# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Storage module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_storage.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Storage')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Storage')
    _Storage = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Storage', [dirname(__file__)])
        except ImportError:
            import _Storage
            return _Storage
        try:
            _mod = imp.load_module('_Storage', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Storage = swig_import_helper()
    del swig_import_helper
else:
    import _Storage
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Storage.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Storage.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Storage.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Storage.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Storage.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Storage.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Storage.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Storage.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Storage.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Storage.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Storage.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Storage.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Storage.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Storage.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Storage.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Storage.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Storage.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Storage.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Storage.process_exception(error, method_name, class_name)
process_exception = _Storage.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection

from enum import IntEnum
from OCC.Core.Exception import *

Storage_AddSolve = _Storage.Storage_AddSolve
Storage_WriteSolve = _Storage.Storage_WriteSolve
Storage_ReadSolve = _Storage.Storage_ReadSolve
Storage_VSOk = _Storage.Storage_VSOk
Storage_VSOpenError = _Storage.Storage_VSOpenError
Storage_VSModeError = _Storage.Storage_VSModeError
Storage_VSCloseError = _Storage.Storage_VSCloseError
Storage_VSAlreadyOpen = _Storage.Storage_VSAlreadyOpen
Storage_VSNotOpen = _Storage.Storage_VSNotOpen
Storage_VSSectionNotFound = _Storage.Storage_VSSectionNotFound
Storage_VSWriteError = _Storage.Storage_VSWriteError
Storage_VSFormatError = _Storage.Storage_VSFormatError
Storage_VSUnknownType = _Storage.Storage_VSUnknownType
Storage_VSTypeMismatch = _Storage.Storage_VSTypeMismatch
Storage_VSInternalError = _Storage.Storage_VSInternalError
Storage_VSExtCharParityError = _Storage.Storage_VSExtCharParityError
Storage_VSWrongFileDriver = _Storage.Storage_VSWrongFileDriver
Storage_VSNone = _Storage.Storage_VSNone
Storage_VSRead = _Storage.Storage_VSRead
Storage_VSWrite = _Storage.Storage_VSWrite
Storage_VSReadWrite = _Storage.Storage_VSReadWrite


class Storage_SolveMode(IntEnum):
	Storage_AddSolve = 0
	Storage_WriteSolve = 1
	Storage_ReadSolve = 2
Storage_AddSolve = Storage_SolveMode.Storage_AddSolve
Storage_WriteSolve = Storage_SolveMode.Storage_WriteSolve
Storage_ReadSolve = Storage_SolveMode.Storage_ReadSolve

class Storage_Error(IntEnum):
	Storage_VSOk = 0
	Storage_VSOpenError = 1
	Storage_VSModeError = 2
	Storage_VSCloseError = 3
	Storage_VSAlreadyOpen = 4
	Storage_VSNotOpen = 5
	Storage_VSSectionNotFound = 6
	Storage_VSWriteError = 7
	Storage_VSFormatError = 8
	Storage_VSUnknownType = 9
	Storage_VSTypeMismatch = 10
	Storage_VSInternalError = 11
	Storage_VSExtCharParityError = 12
	Storage_VSWrongFileDriver = 13
Storage_VSOk = Storage_Error.Storage_VSOk
Storage_VSOpenError = Storage_Error.Storage_VSOpenError
Storage_VSModeError = Storage_Error.Storage_VSModeError
Storage_VSCloseError = Storage_Error.Storage_VSCloseError
Storage_VSAlreadyOpen = Storage_Error.Storage_VSAlreadyOpen
Storage_VSNotOpen = Storage_Error.Storage_VSNotOpen
Storage_VSSectionNotFound = Storage_Error.Storage_VSSectionNotFound
Storage_VSWriteError = Storage_Error.Storage_VSWriteError
Storage_VSFormatError = Storage_Error.Storage_VSFormatError
Storage_VSUnknownType = Storage_Error.Storage_VSUnknownType
Storage_VSTypeMismatch = Storage_Error.Storage_VSTypeMismatch
Storage_VSInternalError = Storage_Error.Storage_VSInternalError
Storage_VSExtCharParityError = Storage_Error.Storage_VSExtCharParityError
Storage_VSWrongFileDriver = Storage_Error.Storage_VSWrongFileDriver

class Storage_OpenMode(IntEnum):
	Storage_VSNone = 0
	Storage_VSRead = 1
	Storage_VSWrite = 2
	Storage_VSReadWrite = 3
Storage_VSNone = Storage_OpenMode.Storage_VSNone
Storage_VSRead = Storage_OpenMode.Storage_VSRead
Storage_VSWrite = Storage_OpenMode.Storage_VSWrite
Storage_VSReadWrite = Storage_OpenMode.Storage_VSReadWrite

class Storage_ArrayOfCallBack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_ArrayOfCallBack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_ArrayOfCallBack, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Storage_CallBack > >::iterator":
        return _Storage.Storage_ArrayOfCallBack_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Storage_CallBack > >::iterator":
        return _Storage.Storage_ArrayOfCallBack_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Storage_CallBack > >::const_iterator":
        return _Storage.Storage_ArrayOfCallBack_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Storage_CallBack > >::const_iterator":
        return _Storage.Storage_ArrayOfCallBack_cend(self)

    def __init__(self, *args):
        this = _Storage.new_Storage_ArrayOfCallBack(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Storage_CallBack > const &') -> "void":
        return _Storage.Storage_ArrayOfCallBack_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _Storage.Storage_ArrayOfCallBack_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Storage.Storage_ArrayOfCallBack_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Storage.Storage_ArrayOfCallBack_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _Storage.Storage_ArrayOfCallBack_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Storage.Storage_ArrayOfCallBack_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _Storage.Storage_ArrayOfCallBack_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _Storage.Storage_ArrayOfCallBack_IsAllocated(self)

    def Assign(self, theOther: 'Storage_ArrayOfCallBack') -> "NCollection_Array1< opencascade::handle< Storage_CallBack > > &":
        return _Storage.Storage_ArrayOfCallBack_Assign(self, theOther)

    def Move(self, theOther: 'Storage_ArrayOfCallBack') -> "NCollection_Array1< opencascade::handle< Storage_CallBack > > &":
        return _Storage.Storage_ArrayOfCallBack_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Storage_CallBack > > &":
        return _Storage.Storage_ArrayOfCallBack_Set(self, *args)

    def First(self) -> "opencascade::handle< Storage_CallBack > const &":
        return _Storage.Storage_ArrayOfCallBack_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Storage_CallBack > &":
        return _Storage.Storage_ArrayOfCallBack_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Storage_CallBack > const &":
        return _Storage.Storage_ArrayOfCallBack_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Storage_CallBack > &":
        return _Storage.Storage_ArrayOfCallBack_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Storage_CallBack > const &":
        return _Storage.Storage_ArrayOfCallBack_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Storage_CallBack > &":
        return _Storage.Storage_ArrayOfCallBack_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Storage_CallBack > &":
        return _Storage.Storage_ArrayOfCallBack___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Storage_CallBack > const &') -> "void":
        return _Storage.Storage_ArrayOfCallBack_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _Storage.Storage_ArrayOfCallBack_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _Storage.delete_Storage_ArrayOfCallBack
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Storage_ArrayOfCallBack_swigregister = _Storage.Storage_ArrayOfCallBack_swigregister
Storage_ArrayOfCallBack_swigregister(Storage_ArrayOfCallBack)

class Storage_ArrayOfSchema(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_ArrayOfSchema, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_ArrayOfSchema, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Storage_Schema > >::iterator":
        return _Storage.Storage_ArrayOfSchema_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Storage_Schema > >::iterator":
        return _Storage.Storage_ArrayOfSchema_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Storage_Schema > >::const_iterator":
        return _Storage.Storage_ArrayOfSchema_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Storage_Schema > >::const_iterator":
        return _Storage.Storage_ArrayOfSchema_cend(self)

    def __init__(self, *args):
        this = _Storage.new_Storage_ArrayOfSchema(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Storage_Schema > const &') -> "void":
        return _Storage.Storage_ArrayOfSchema_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _Storage.Storage_ArrayOfSchema_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Storage.Storage_ArrayOfSchema_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Storage.Storage_ArrayOfSchema_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _Storage.Storage_ArrayOfSchema_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Storage.Storage_ArrayOfSchema_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _Storage.Storage_ArrayOfSchema_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _Storage.Storage_ArrayOfSchema_IsAllocated(self)

    def Assign(self, theOther: 'Storage_ArrayOfSchema') -> "NCollection_Array1< opencascade::handle< Storage_Schema > > &":
        return _Storage.Storage_ArrayOfSchema_Assign(self, theOther)

    def Move(self, theOther: 'Storage_ArrayOfSchema') -> "NCollection_Array1< opencascade::handle< Storage_Schema > > &":
        return _Storage.Storage_ArrayOfSchema_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Storage_Schema > > &":
        return _Storage.Storage_ArrayOfSchema_Set(self, *args)

    def First(self) -> "opencascade::handle< Storage_Schema > const &":
        return _Storage.Storage_ArrayOfSchema_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Storage_Schema > &":
        return _Storage.Storage_ArrayOfSchema_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Storage_Schema > const &":
        return _Storage.Storage_ArrayOfSchema_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Storage_Schema > &":
        return _Storage.Storage_ArrayOfSchema_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Storage_Schema > const &":
        return _Storage.Storage_ArrayOfSchema_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Storage_Schema > &":
        return _Storage.Storage_ArrayOfSchema_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Storage_Schema > &":
        return _Storage.Storage_ArrayOfSchema___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Storage_Schema > const &') -> "void":
        return _Storage.Storage_ArrayOfSchema_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _Storage.Storage_ArrayOfSchema_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _Storage.delete_Storage_ArrayOfSchema
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Storage_ArrayOfSchema_swigregister = _Storage.Storage_ArrayOfSchema_swigregister
Storage_ArrayOfSchema_swigregister(Storage_ArrayOfSchema)

class Storage_MapOfCallBack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_MapOfCallBack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_MapOfCallBack, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_TypedCallBack >,TCollection_AsciiString >::iterator":
        return _Storage.Storage_MapOfCallBack_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_TypedCallBack >,TCollection_AsciiString >::iterator":
        return _Storage.Storage_MapOfCallBack_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_TypedCallBack >,TCollection_AsciiString >::const_iterator":
        return _Storage.Storage_MapOfCallBack_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_TypedCallBack >,TCollection_AsciiString >::const_iterator":
        return _Storage.Storage_MapOfCallBack_cend(self)

    def __init__(self, *args):
        this = _Storage.new_Storage_MapOfCallBack(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'Storage_MapOfCallBack') -> "void":
        return _Storage.Storage_MapOfCallBack_Exchange(self, theOther)

    def Assign(self, theOther: 'Storage_MapOfCallBack') -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_TypedCallBack >,TCollection_AsciiString > &":
        return _Storage.Storage_MapOfCallBack_Assign(self, theOther)

    def Set(self, theOther: 'Storage_MapOfCallBack') -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_TypedCallBack >,TCollection_AsciiString > &":
        return _Storage.Storage_MapOfCallBack_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _Storage.Storage_MapOfCallBack_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_AsciiString const &', theItem: 'opencascade::handle< Storage_TypedCallBack > const &') -> "Standard_Boolean":
        return _Storage.Storage_MapOfCallBack_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_AsciiString const &', theItem: 'opencascade::handle< Storage_TypedCallBack > const &') -> "opencascade::handle< Storage_TypedCallBack > *":
        return _Storage.Storage_MapOfCallBack_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_AsciiString const &') -> "Standard_Boolean":
        return _Storage.Storage_MapOfCallBack_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_AsciiString const &') -> "Standard_Boolean":
        return _Storage.Storage_MapOfCallBack_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_AsciiString const &') -> "opencascade::handle< Storage_TypedCallBack > const *":
        return _Storage.Storage_MapOfCallBack_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _Storage.Storage_MapOfCallBack_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_AsciiString const &') -> "opencascade::handle< Storage_TypedCallBack > *":
        return _Storage.Storage_MapOfCallBack_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_AsciiString const &') -> "opencascade::handle< Storage_TypedCallBack > &":
        return _Storage.Storage_MapOfCallBack_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< Storage_TypedCallBack > &":
        return _Storage.Storage_MapOfCallBack___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _Storage.Storage_MapOfCallBack_Clear(self, *args)
    __swig_destroy__ = _Storage.delete_Storage_MapOfCallBack
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _Storage.Storage_MapOfCallBack_Size(self)
Storage_MapOfCallBack_swigregister = _Storage.Storage_MapOfCallBack_swigregister
Storage_MapOfCallBack_swigregister(Storage_MapOfCallBack)

class Storage_MapOfPers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_MapOfPers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_MapOfPers, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_Root >,TCollection_AsciiString >::iterator":
        return _Storage.Storage_MapOfPers_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_Root >,TCollection_AsciiString >::iterator":
        return _Storage.Storage_MapOfPers_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_Root >,TCollection_AsciiString >::const_iterator":
        return _Storage.Storage_MapOfPers_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_Root >,TCollection_AsciiString >::const_iterator":
        return _Storage.Storage_MapOfPers_cend(self)

    def __init__(self, *args):
        this = _Storage.new_Storage_MapOfPers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'Storage_MapOfPers') -> "void":
        return _Storage.Storage_MapOfPers_Exchange(self, theOther)

    def Assign(self, theOther: 'Storage_MapOfPers') -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_Root >,TCollection_AsciiString > &":
        return _Storage.Storage_MapOfPers_Assign(self, theOther)

    def Set(self, theOther: 'Storage_MapOfPers') -> "NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Storage_Root >,TCollection_AsciiString > &":
        return _Storage.Storage_MapOfPers_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _Storage.Storage_MapOfPers_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_AsciiString const &', theItem: 'opencascade::handle< Storage_Root > const &') -> "Standard_Boolean":
        return _Storage.Storage_MapOfPers_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_AsciiString const &', theItem: 'opencascade::handle< Storage_Root > const &') -> "opencascade::handle< Storage_Root > *":
        return _Storage.Storage_MapOfPers_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_AsciiString const &') -> "Standard_Boolean":
        return _Storage.Storage_MapOfPers_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_AsciiString const &') -> "Standard_Boolean":
        return _Storage.Storage_MapOfPers_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_AsciiString const &') -> "opencascade::handle< Storage_Root > const *":
        return _Storage.Storage_MapOfPers_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _Storage.Storage_MapOfPers_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_AsciiString const &') -> "opencascade::handle< Storage_Root > *":
        return _Storage.Storage_MapOfPers_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_AsciiString const &') -> "opencascade::handle< Storage_Root > &":
        return _Storage.Storage_MapOfPers_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< Storage_Root > &":
        return _Storage.Storage_MapOfPers___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _Storage.Storage_MapOfPers_Clear(self, *args)
    __swig_destroy__ = _Storage.delete_Storage_MapOfPers
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _Storage.Storage_MapOfPers_Size(self)
Storage_MapOfPers_swigregister = _Storage.Storage_MapOfPers_swigregister
Storage_MapOfPers_swigregister(Storage_MapOfPers)

class Storage_PType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_PType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_PType, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_IndexedDataMap< TCollection_AsciiString,int,TCollection_AsciiString >::iterator":
        return _Storage.Storage_PType_begin(self)

    def end(self) -> "NCollection_IndexedDataMap< TCollection_AsciiString,int,TCollection_AsciiString >::iterator":
        return _Storage.Storage_PType_end(self)

    def cbegin(self) -> "NCollection_IndexedDataMap< TCollection_AsciiString,int,TCollection_AsciiString >::const_iterator":
        return _Storage.Storage_PType_cbegin(self)

    def cend(self) -> "NCollection_IndexedDataMap< TCollection_AsciiString,int,TCollection_AsciiString >::const_iterator":
        return _Storage.Storage_PType_cend(self)

    def __init__(self, *args):
        this = _Storage.new_Storage_PType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'Storage_PType') -> "void":
        return _Storage.Storage_PType_Exchange(self, theOther)

    def Assign(self, theOther: 'Storage_PType') -> "NCollection_IndexedDataMap< TCollection_AsciiString,Standard_Integer,TCollection_AsciiString > &":
        return _Storage.Storage_PType_Assign(self, theOther)

    def Set(self, theOther: 'Storage_PType') -> "NCollection_IndexedDataMap< TCollection_AsciiString,Standard_Integer,TCollection_AsciiString > &":
        return _Storage.Storage_PType_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _Storage.Storage_PType_ReSize(self, N)

    def Add(self, theKey1: 'TCollection_AsciiString const &', theItem: 'int const &') -> "Standard_Integer":
        return _Storage.Storage_PType_Add(self, theKey1, theItem)

    def Contains(self, theKey1: 'TCollection_AsciiString const &') -> "Standard_Boolean":
        return _Storage.Storage_PType_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TCollection_AsciiString const &', theItem: 'int const &') -> "void":
        return _Storage.Storage_PType_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _Storage.Storage_PType_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _Storage.Storage_PType_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _Storage.Storage_PType_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TCollection_AsciiString const &') -> "void":
        return _Storage.Storage_PType_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TCollection_AsciiString const &":
        return _Storage.Storage_PType_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex: 'Standard_Integer const') -> "int const &":
        return _Storage.Storage_PType_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex: 'Standard_Integer const') -> "int &":
        return _Storage.Storage_PType_ChangeFromIndex(self, theIndex)

    def __call__(self, *args) -> "int &":
        return _Storage.Storage_PType___call__(self, *args)

    def FindIndex(self, theKey1: 'TCollection_AsciiString const &') -> "Standard_Integer":
        return _Storage.Storage_PType_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1: 'TCollection_AsciiString const &') -> "int &":
        return _Storage.Storage_PType_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1: 'TCollection_AsciiString const &') -> "int const *":
        return _Storage.Storage_PType_Seek(self, theKey1)

    def ChangeSeek(self, theKey1: 'TCollection_AsciiString const &') -> "int *":
        return _Storage.Storage_PType_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args) -> "Standard_Boolean":
        return _Storage.Storage_PType_FindFromKey(self, *args)

    def Clear(self, *args) -> "void":
        return _Storage.Storage_PType_Clear(self, *args)
    __swig_destroy__ = _Storage.delete_Storage_PType
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _Storage.Storage_PType_Size(self)
Storage_PType_swigregister = _Storage.Storage_PType_swigregister
Storage_PType_swigregister(Storage_PType)

class Storage_SeqOfRoot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_SeqOfRoot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_SeqOfRoot, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Storage_Root > >::iterator":
        return _Storage.Storage_SeqOfRoot_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Storage_Root > >::iterator":
        return _Storage.Storage_SeqOfRoot_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Storage_Root > >::const_iterator":
        return _Storage.Storage_SeqOfRoot_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Storage_Root > >::const_iterator":
        return _Storage.Storage_SeqOfRoot_cend(self)

    def __init__(self, *args):
        this = _Storage.new_Storage_SeqOfRoot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Storage.Storage_SeqOfRoot_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Storage.Storage_SeqOfRoot_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Storage.Storage_SeqOfRoot_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Storage.Storage_SeqOfRoot_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Storage.Storage_SeqOfRoot_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Storage.Storage_SeqOfRoot_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Storage.Storage_SeqOfRoot_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Storage.Storage_SeqOfRoot_delNode)
    else:
        delNode = _Storage.Storage_SeqOfRoot_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _Storage.Storage_SeqOfRoot_Clear(self, theAllocator)

    def Assign(self, theOther: 'Storage_SeqOfRoot') -> "NCollection_Sequence< opencascade::handle< Storage_Root > > &":
        return _Storage.Storage_SeqOfRoot_Assign(self, theOther)

    def Set(self, theOther: 'Storage_SeqOfRoot') -> "NCollection_Sequence< opencascade::handle< Storage_Root > > &":
        return _Storage.Storage_SeqOfRoot_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Storage.Storage_SeqOfRoot_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Storage.Storage_SeqOfRoot_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Storage.Storage_SeqOfRoot_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Storage.Storage_SeqOfRoot_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Storage.Storage_SeqOfRoot_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Storage_SeqOfRoot') -> "void":
        return _Storage.Storage_SeqOfRoot_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Storage_Root > const &":
        return _Storage.Storage_SeqOfRoot_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Storage_Root > &":
        return _Storage.Storage_SeqOfRoot_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Storage_Root > const &":
        return _Storage.Storage_SeqOfRoot_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Storage_Root > &":
        return _Storage.Storage_SeqOfRoot_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Storage_Root > const &":
        return _Storage.Storage_SeqOfRoot_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Storage_Root > &":
        return _Storage.Storage_SeqOfRoot_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Storage_Root > &":
        return _Storage.Storage_SeqOfRoot___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Storage_Root > const &') -> "void":
        return _Storage.Storage_SeqOfRoot_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Storage.delete_Storage_SeqOfRoot
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Storage_SeqOfRoot_swigregister = _Storage.Storage_SeqOfRoot_swigregister
Storage_SeqOfRoot_swigregister(Storage_SeqOfRoot)

def Storage_SeqOfRoot_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Storage.Storage_SeqOfRoot_delNode(theNode, theAl)
Storage_SeqOfRoot_delNode = _Storage.Storage_SeqOfRoot_delNode


@classnotwrapped
class Storage_Bucket:
	pass

@classnotwrapped
class Storage_BucketOfPersistent:
	pass

@classnotwrapped
class Storage_BucketIterator:
	pass

@classnotwrapped
class Storage_RootData:
	pass

@classnotwrapped
class Storage_TypeData:
	pass

@classnotwrapped
class Storage_Root:
	pass

@classnotwrapped
class Storage_Schema:
	pass

@classnotwrapped
class Storage_DefaultCallBack:
	pass

@classnotwrapped
class Storage_TypedCallBack:
	pass

@classnotwrapped
class Storage_CallBack:
	pass

@classnotwrapped
class Storage_HeaderData:
	pass

@classnotwrapped
class Storage_BaseDriver:
	pass

@classnotwrapped
class Storage_InternalData:
	pass

@classnotwrapped
class Storage_Data:
	pass

@classnotwrapped
class Storage:
	pass


class Storage_HArrayOfSchema(Storage_ArrayOfSchema, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [Storage_ArrayOfSchema, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_HArrayOfSchema, name, value)
    __swig_getmethods__ = {}
    for _s in [Storage_ArrayOfSchema, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_HArrayOfSchema, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Storage.new_Storage_HArrayOfSchema(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "Storage_ArrayOfSchema const &":
        return _Storage.Storage_HArrayOfSchema_Array1(self)

    def ChangeArray1(self) -> "Storage_ArrayOfSchema &":
        return _Storage.Storage_HArrayOfSchema_ChangeArray1(self)
    __swig_destroy__ = _Storage.delete_Storage_HArrayOfSchema
    __del__ = lambda self: None
Storage_HArrayOfSchema_swigregister = _Storage.Storage_HArrayOfSchema_swigregister
Storage_HArrayOfSchema_swigregister(Storage_HArrayOfSchema)

class Storage_HPArray(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_HPArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_HPArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Storage.new_Storage_HPArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "Storage_PArray const &":
        return _Storage.Storage_HPArray_Array1(self)

    def ChangeArray1(self) -> "Storage_PArray &":
        return _Storage.Storage_HPArray_ChangeArray1(self)
    __swig_destroy__ = _Storage.delete_Storage_HPArray
    __del__ = lambda self: None
Storage_HPArray_swigregister = _Storage.Storage_HPArray_swigregister
Storage_HPArray_swigregister(Storage_HPArray)

class Storage_HArrayOfCallBack(Storage_ArrayOfCallBack, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [Storage_ArrayOfCallBack, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_HArrayOfCallBack, name, value)
    __swig_getmethods__ = {}
    for _s in [Storage_ArrayOfCallBack, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_HArrayOfCallBack, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Storage.new_Storage_HArrayOfCallBack(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "Storage_ArrayOfCallBack const &":
        return _Storage.Storage_HArrayOfCallBack_Array1(self)

    def ChangeArray1(self) -> "Storage_ArrayOfCallBack &":
        return _Storage.Storage_HArrayOfCallBack_ChangeArray1(self)
    __swig_destroy__ = _Storage.delete_Storage_HArrayOfCallBack
    __del__ = lambda self: None
Storage_HArrayOfCallBack_swigregister = _Storage.Storage_HArrayOfCallBack_swigregister
Storage_HArrayOfCallBack_swigregister(Storage_HArrayOfCallBack)

class Storage_HSeqOfRoot(Storage_SeqOfRoot, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [Storage_SeqOfRoot, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage_HSeqOfRoot, name, value)
    __swig_getmethods__ = {}
    for _s in [Storage_SeqOfRoot, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Storage_HSeqOfRoot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Storage.new_Storage_HSeqOfRoot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "Storage_SeqOfRoot const &":
        return _Storage.Storage_HSeqOfRoot_Sequence(self)

    def Append(self, *args) -> "void":
        return _Storage.Storage_HSeqOfRoot_Append(self, *args)

    def ChangeSequence(self) -> "Storage_SeqOfRoot &":
        return _Storage.Storage_HSeqOfRoot_ChangeSequence(self)
    __swig_destroy__ = _Storage.delete_Storage_HSeqOfRoot
    __del__ = lambda self: None
Storage_HSeqOfRoot_swigregister = _Storage.Storage_HSeqOfRoot_swigregister
Storage_HSeqOfRoot_swigregister(Storage_HSeqOfRoot)



# This file is compatible with both classic and new-style classes.


