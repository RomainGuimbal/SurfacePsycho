# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Adaptor2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_adaptor2d.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Adaptor2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Adaptor2d')
    _Adaptor2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Adaptor2d', [dirname(__file__)])
        except ImportError:
            import _Adaptor2d
            return _Adaptor2d
        try:
            _mod = imp.load_module('_Adaptor2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Adaptor2d = swig_import_helper()
    del swig_import_helper
else:
    import _Adaptor2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Adaptor2d.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Adaptor2d.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Adaptor2d.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Adaptor2d.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Adaptor2d.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Adaptor2d.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Adaptor2d.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Adaptor2d.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Adaptor2d.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Adaptor2d.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Adaptor2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Adaptor2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Adaptor2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Adaptor2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Adaptor2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Adaptor2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Adaptor2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Adaptor2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Adaptor2d.process_exception(error, method_name, class_name)
process_exception = _Adaptor2d.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_Adaptor2d_HCurve2d_Create() -> "opencascade::handle< Adaptor2d_HCurve2d >":
    return _Adaptor2d.Handle_Adaptor2d_HCurve2d_Create()
Handle_Adaptor2d_HCurve2d_Create = _Adaptor2d.Handle_Adaptor2d_HCurve2d_Create

def Handle_Adaptor2d_HCurve2d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor2d_HCurve2d >":
    return _Adaptor2d.Handle_Adaptor2d_HCurve2d_DownCast(t)
Handle_Adaptor2d_HCurve2d_DownCast = _Adaptor2d.Handle_Adaptor2d_HCurve2d_DownCast

def Handle_Adaptor2d_HCurve2d_IsNull(t: 'opencascade::handle< Adaptor2d_HCurve2d > const &') -> "bool":
    return _Adaptor2d.Handle_Adaptor2d_HCurve2d_IsNull(t)
Handle_Adaptor2d_HCurve2d_IsNull = _Adaptor2d.Handle_Adaptor2d_HCurve2d_IsNull

def Handle_Adaptor2d_HLine2d_Create() -> "opencascade::handle< Adaptor2d_HLine2d >":
    return _Adaptor2d.Handle_Adaptor2d_HLine2d_Create()
Handle_Adaptor2d_HLine2d_Create = _Adaptor2d.Handle_Adaptor2d_HLine2d_Create

def Handle_Adaptor2d_HLine2d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor2d_HLine2d >":
    return _Adaptor2d.Handle_Adaptor2d_HLine2d_DownCast(t)
Handle_Adaptor2d_HLine2d_DownCast = _Adaptor2d.Handle_Adaptor2d_HLine2d_DownCast

def Handle_Adaptor2d_HLine2d_IsNull(t: 'opencascade::handle< Adaptor2d_HLine2d > const &') -> "bool":
    return _Adaptor2d.Handle_Adaptor2d_HLine2d_IsNull(t)
Handle_Adaptor2d_HLine2d_IsNull = _Adaptor2d.Handle_Adaptor2d_HLine2d_IsNull

def Handle_Adaptor2d_HOffsetCurve_Create() -> "opencascade::handle< Adaptor2d_HOffsetCurve >":
    return _Adaptor2d.Handle_Adaptor2d_HOffsetCurve_Create()
Handle_Adaptor2d_HOffsetCurve_Create = _Adaptor2d.Handle_Adaptor2d_HOffsetCurve_Create

def Handle_Adaptor2d_HOffsetCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor2d_HOffsetCurve >":
    return _Adaptor2d.Handle_Adaptor2d_HOffsetCurve_DownCast(t)
Handle_Adaptor2d_HOffsetCurve_DownCast = _Adaptor2d.Handle_Adaptor2d_HOffsetCurve_DownCast

def Handle_Adaptor2d_HOffsetCurve_IsNull(t: 'opencascade::handle< Adaptor2d_HOffsetCurve > const &') -> "bool":
    return _Adaptor2d.Handle_Adaptor2d_HOffsetCurve_IsNull(t)
Handle_Adaptor2d_HOffsetCurve_IsNull = _Adaptor2d.Handle_Adaptor2d_HOffsetCurve_IsNull
class Adaptor2d_Curve2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor2d_Curve2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor2d_Curve2d, name)
    __repr__ = _swig_repr

    def BSpline(self, *args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _Adaptor2d.Adaptor2d_Curve2d_BSpline(self, *args)


    def Bezier(self, *args) -> "opencascade::handle< Geom2d_BezierCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_BezierCurve>

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Bezier(self, *args)


    def Circle(self, *args) -> "gp_Circ2d":
        """
        No available documentation.

        Returns
        -------
        gp_Circ2d

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Circle(self, *args)


    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Continuity(self, *args)


    def D0(self, *args) -> "void":
        """
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_Curve2d_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_Curve2d_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_Curve2d_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_Curve2d_D3(self, *args)


    def DN(self, *args) -> "gp_Vec2d":
        """
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Adaptor2d.Adaptor2d_Curve2d_DN(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Degree(self, *args)


    def Ellipse(self, *args) -> "gp_Elips2d":
        """
        No available documentation.

        Returns
        -------
        gp_Elips2d

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Ellipse(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_Curve2d_FirstParameter(self, *args)


    def GetType(self, *args) -> "GeomAbs_CurveType":
        """
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _Adaptor2d.Adaptor2d_Curve2d_GetType(self, *args)


    def Hyperbola(self, *args) -> "gp_Hypr2d":
        """
        No available documentation.

        Returns
        -------
        gp_Hypr2d

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Hyperbola(self, *args)


    def Intervals(self, *args) -> "void":
        """
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accomodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Intervals(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor2d.Adaptor2d_Curve2d_IsClosed(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor2d.Adaptor2d_Curve2d_IsPeriodic(self, *args)


    def IsRational(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor2d.Adaptor2d_Curve2d_IsRational(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_Curve2d_LastParameter(self, *args)


    def Line(self, *args) -> "gp_Lin2d":
        """
        No available documentation.

        Returns
        -------
        gp_Lin2d

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Line(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        If necessary, breaks the curve in intervals of continuity <s>. and returns the number of intervals.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_Curve2d_NbIntervals(self, *args)


    def NbKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_Curve2d_NbKnots(self, *args)


    def NbPoles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_Curve2d_NbPoles(self, *args)


    def NbSamples(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_Curve2d_NbSamples(self, *args)


    def Parabola(self, *args) -> "gp_Parab2d":
        """
        No available documentation.

        Returns
        -------
        gp_Parab2d

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Parabola(self, *args)


    def Period(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Period(self, *args)


    def Resolution(self, *args) -> "Standard_Real":
        """
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Resolution(self, *args)


    def Trim(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d >":
        """
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Trim(self, *args)


    def Value(self, *args) -> "gp_Pnt2d":
        """
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt2d

        """
        return _Adaptor2d.Adaptor2d_Curve2d_Value(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _Adaptor2d.new_Adaptor2d_Curve2d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor2d.delete_Adaptor2d_Curve2d
    __del__ = lambda self: None
Adaptor2d_Curve2d_swigregister = _Adaptor2d.Adaptor2d_Curve2d_swigregister
Adaptor2d_Curve2d_swigregister(Adaptor2d_Curve2d)

class Adaptor2d_HCurve2d(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor2d_HCurve2d, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor2d_HCurve2d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BSpline(self, *args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_BSpline(self, *args)


    def Bezier(self, *args) -> "opencascade::handle< Geom2d_BezierCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_BezierCurve>

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Bezier(self, *args)


    def Circle(self, *args) -> "gp_Circ2d":
        """
        No available documentation.

        Returns
        -------
        gp_Circ2d

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Circle(self, *args)


    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Continuity(self, *args)


    def Curve2d(self, *args) -> "Adaptor2d_Curve2d const &":
        """
        Returns a reference to the curve2d inside the hcurve2d.

        Returns
        -------
        Adaptor2d_Curve2d

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Curve2d(self, *args)


    def D0(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_D3(self, *args)


    def DN(self, *args) -> "gp_Vec2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_DN(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Degree(self, *args)


    def Ellipse(self, *args) -> "gp_Elips2d":
        """
        No available documentation.

        Returns
        -------
        gp_Elips2d

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Ellipse(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_FirstParameter(self, *args)


    def GetType(self, *args) -> "GeomAbs_CurveType":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_GetType(self, *args)


    def Hyperbola(self, *args) -> "gp_Hypr2d":
        """
        No available documentation.

        Returns
        -------
        gp_Hypr2d

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Hyperbola(self, *args)


    def Intervals(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Intervals(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_IsClosed(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_IsPeriodic(self, *args)


    def IsRational(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_IsRational(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_LastParameter(self, *args)


    def Line(self, *args) -> "gp_Lin2d":
        """
        No available documentation.

        Returns
        -------
        gp_Lin2d

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Line(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_NbIntervals(self, *args)


    def NbKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_NbKnots(self, *args)


    def NbPoles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_NbPoles(self, *args)


    def Parabola(self, *args) -> "gp_Parab2d":
        """
        No available documentation.

        Returns
        -------
        gp_Parab2d

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Parabola(self, *args)


    def Period(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Period(self, *args)


    def Resolution(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Resolution(self, *args)


    def Trim(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d >":
        """
        If <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Trim(self, *args)


    def Value(self, *args) -> "gp_Pnt2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt2d

        """
        return _Adaptor2d.Adaptor2d_HCurve2d_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor2d_HCurve2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor2d.delete_Adaptor2d_HCurve2d
    __del__ = lambda self: None
Adaptor2d_HCurve2d_swigregister = _Adaptor2d.Adaptor2d_HCurve2d_swigregister
Adaptor2d_HCurve2d_swigregister(Adaptor2d_HCurve2d)

class Adaptor2d_HLine2d(Adaptor2d_HCurve2d):
    __swig_setmethods__ = {}
    for _s in [Adaptor2d_HCurve2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor2d_HLine2d, name, value)
    __swig_getmethods__ = {}
    for _s in [Adaptor2d_HCurve2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor2d_HLine2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty genhcurve2d.

        Returns
        -------
        None

        Creates a genhcurve2d from a curve.

        Parameters
        ----------
        C: Adaptor2d_Line2d

        Returns
        -------
        None

        """
        this = _Adaptor2d.new_Adaptor2d_HLine2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeCurve2d(self, *args) -> "Adaptor2d_Line2d &":
        """
        Returns the curve used to create the genhcurve.

        Returns
        -------
        Adaptor2d_Line2d

        """
        return _Adaptor2d.Adaptor2d_HLine2d_ChangeCurve2d(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the field of the genhcurve2d.

        Parameters
        ----------
        C: Adaptor2d_Line2d

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_HLine2d_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor2d_HLine2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor2d.delete_Adaptor2d_HLine2d
    __del__ = lambda self: None
Adaptor2d_HLine2d_swigregister = _Adaptor2d.Adaptor2d_HLine2d_swigregister
Adaptor2d_HLine2d_swigregister(Adaptor2d_HLine2d)

class Adaptor2d_HOffsetCurve(Adaptor2d_HCurve2d):
    __swig_setmethods__ = {}
    for _s in [Adaptor2d_HCurve2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor2d_HOffsetCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Adaptor2d_HCurve2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor2d_HOffsetCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty genhcurve2d.

        Returns
        -------
        None

        Creates a genhcurve2d from a curve.

        Parameters
        ----------
        C: Adaptor2d_OffsetCurve

        Returns
        -------
        None

        """
        this = _Adaptor2d.new_Adaptor2d_HOffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeCurve2d(self, *args) -> "Adaptor2d_OffsetCurve &":
        """
        Returns the curve used to create the genhcurve.

        Returns
        -------
        Adaptor2d_OffsetCurve

        """
        return _Adaptor2d.Adaptor2d_HOffsetCurve_ChangeCurve2d(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the field of the genhcurve2d.

        Parameters
        ----------
        C: Adaptor2d_OffsetCurve

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_HOffsetCurve_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor2d_HOffsetCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor2d.delete_Adaptor2d_HOffsetCurve
    __del__ = lambda self: None
Adaptor2d_HOffsetCurve_swigregister = _Adaptor2d.Adaptor2d_HOffsetCurve_swigregister
Adaptor2d_HOffsetCurve_swigregister(Adaptor2d_HOffsetCurve)

class Adaptor2d_Line2d(Adaptor2d_Curve2d):
    __swig_setmethods__ = {}
    for _s in [Adaptor2d_Curve2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor2d_Line2d, name, value)
    __swig_getmethods__ = {}
    for _s in [Adaptor2d_Curve2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor2d_Line2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        D: gp_Dir2d
        UFirst: float
        ULast: float

        Returns
        -------
        None

        """
        this = _Adaptor2d.new_Adaptor2d_Line2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        L: gp_Lin2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        L: gp_Lin2d
        UFirst: float
        ULast: float

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_Line2d_Load(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor2d.delete_Adaptor2d_Line2d
    __del__ = lambda self: None
Adaptor2d_Line2d_swigregister = _Adaptor2d.Adaptor2d_Line2d_swigregister
Adaptor2d_Line2d_swigregister(Adaptor2d_Line2d)

class Adaptor2d_OffsetCurve(Adaptor2d_Curve2d):
    __swig_setmethods__ = {}
    for _s in [Adaptor2d_Curve2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor2d_OffsetCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Adaptor2d_Curve2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor2d_OffsetCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        The offset is set to 0.

        Returns
        -------
        None

        The curve is loaded. the offset is set to 0.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        None

        Creates an offsetcurve curve. the offset is set to offset.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        Offset: float

        Returns
        -------
        None

        Create an offset curve. wfirst,wlast define the bounds of the offset curve.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        Offset: float
        WFirst: float
        WLast: float

        Returns
        -------
        None

        """
        this = _Adaptor2d.new_Adaptor2d_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Curve(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Adaptor2d.Adaptor2d_OffsetCurve_Curve(self, *args)


    def Load(self, *args) -> "void":
        """
        Changes the curve. the offset is reset to 0.

        Parameters
        ----------
        S: Adaptor2d_HCurve2d

        Returns
        -------
        None

        Changes the offset on the current curve.

        Parameters
        ----------
        Offset: float

        Returns
        -------
        None

        Changes the offset curve on the current curve.

        Parameters
        ----------
        Offset: float
        WFirst: float
        WLast: float

        Returns
        -------
        None

        """
        return _Adaptor2d.Adaptor2d_OffsetCurve_Load(self, *args)


    def Offset(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor2d.Adaptor2d_OffsetCurve_Offset(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor2d.delete_Adaptor2d_OffsetCurve
    __del__ = lambda self: None
Adaptor2d_OffsetCurve_swigregister = _Adaptor2d.Adaptor2d_OffsetCurve_swigregister
Adaptor2d_OffsetCurve_swigregister(Adaptor2d_OffsetCurve)



# This file is compatible with both classic and new-style classes.


