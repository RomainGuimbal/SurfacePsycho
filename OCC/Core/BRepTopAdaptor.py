# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepTopAdaptor module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_breptopadaptor.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepTopAdaptor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepTopAdaptor')
    _BRepTopAdaptor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepTopAdaptor', [dirname(__file__)])
        except ImportError:
            import _BRepTopAdaptor
            return _BRepTopAdaptor
        try:
            _mod = imp.load_module('_BRepTopAdaptor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepTopAdaptor = swig_import_helper()
    del swig_import_helper
else:
    import _BRepTopAdaptor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepTopAdaptor.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BRepTopAdaptor.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepTopAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepTopAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BRepTopAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BRepTopAdaptor.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BRepTopAdaptor.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BRepTopAdaptor.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BRepTopAdaptor.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BRepTopAdaptor.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepTopAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepTopAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepTopAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepTopAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepTopAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepTopAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BRepTopAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepTopAdaptor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepTopAdaptor.process_exception(error, method_name, class_name)
process_exception = _BRepTopAdaptor.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BRepTopAdaptor_HVertex_Create() -> "opencascade::handle< BRepTopAdaptor_HVertex >":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Create()
Handle_BRepTopAdaptor_HVertex_Create = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_Create

def Handle_BRepTopAdaptor_HVertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTopAdaptor_HVertex >":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DownCast(t)
Handle_BRepTopAdaptor_HVertex_DownCast = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_DownCast

def Handle_BRepTopAdaptor_HVertex_IsNull(t: 'opencascade::handle< BRepTopAdaptor_HVertex > const &') -> "bool":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IsNull(t)
Handle_BRepTopAdaptor_HVertex_IsNull = _BRepTopAdaptor.Handle_BRepTopAdaptor_HVertex_IsNull

def Handle_BRepTopAdaptor_TopolTool_Create() -> "opencascade::handle< BRepTopAdaptor_TopolTool >":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Create()
Handle_BRepTopAdaptor_TopolTool_Create = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_Create

def Handle_BRepTopAdaptor_TopolTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRepTopAdaptor_TopolTool >":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DownCast(t)
Handle_BRepTopAdaptor_TopolTool_DownCast = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_DownCast

def Handle_BRepTopAdaptor_TopolTool_IsNull(t: 'opencascade::handle< BRepTopAdaptor_TopolTool > const &') -> "bool":
    return _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsNull(t)
Handle_BRepTopAdaptor_TopolTool_IsNull = _BRepTopAdaptor.Handle_BRepTopAdaptor_TopolTool_IsNull
class BRepTopAdaptor_MapOfShapeTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepTopAdaptor_MapOfShapeTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepTopAdaptor_MapOfShapeTool, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher >::iterator":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher >::iterator":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher >::const_iterator":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher >::const_iterator":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_cend(self)

    def __init__(self, *args):
        this = _BRepTopAdaptor.new_BRepTopAdaptor_MapOfShapeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'BRepTopAdaptor_MapOfShapeTool') -> "void":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Exchange(self, theOther)

    def Assign(self, theOther: 'BRepTopAdaptor_MapOfShapeTool') -> "NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher > &":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Assign(self, theOther)

    def Set(self, theOther: 'BRepTopAdaptor_MapOfShapeTool') -> "NCollection_DataMap< TopoDS_Shape,BRepTopAdaptor_Tool,TopTools_ShapeMapHasher > &":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'BRepTopAdaptor_Tool') -> "Standard_Boolean":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'BRepTopAdaptor_Tool') -> "BRepTopAdaptor_Tool *":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "BRepTopAdaptor_Tool const *":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "BRepTopAdaptor_Tool *":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "BRepTopAdaptor_Tool &":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_ChangeFind(self, theKey)

    def __call__(self, *args) -> "BRepTopAdaptor_Tool &":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Clear(self, *args)
    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_MapOfShapeTool
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_Size(self)
BRepTopAdaptor_MapOfShapeTool_swigregister = _BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool_swigregister
BRepTopAdaptor_MapOfShapeTool_swigregister(BRepTopAdaptor_MapOfShapeTool)

class BRepTopAdaptor_FClass2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepTopAdaptor_FClass2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepTopAdaptor_FClass2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        F: TopoDS_Face
        Tol: float

        Returns
        -------
        None

        """
        this = _BRepTopAdaptor.new_BRepTopAdaptor_FClass2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Copy(self, *args) -> "BRepTopAdaptor_FClass2d const &":
        """
        No available documentation.

        Parameters
        ----------
        Other: BRepTopAdaptor_FClass2d

        Returns
        -------
        BRepTopAdaptor_FClass2d

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Copy(self, *args)


    def Destroy(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Destroy(self, *args)


    def Perform(self, *args) -> "TopAbs_State":
        """
        No available documentation.

        Parameters
        ----------
        Puv: gp_Pnt2d
        RecadreOnPeriodic: bool,optional
        	default value is Standard_True

        Returns
        -------
        TopAbs_State

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_Perform(self, *args)


    def PerformInfinitePoint(self, *args) -> "TopAbs_State":
        """
        No available documentation.

        Returns
        -------
        TopAbs_State

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_PerformInfinitePoint(self, *args)


    def TestOnRestriction(self, *args) -> "TopAbs_State":
        """
        Test a point with +- an offset (tol) and returns on if some points are out an some are in (caution: internal use . see the code for more details).

        Parameters
        ----------
        Puv: gp_Pnt2d
        Tol: float
        RecadreOnPeriodic: bool,optional
        	default value is Standard_True

        Returns
        -------
        TopAbs_State

        """
        return _BRepTopAdaptor.BRepTopAdaptor_FClass2d_TestOnRestriction(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_FClass2d
    __del__ = lambda self: None
BRepTopAdaptor_FClass2d_swigregister = _BRepTopAdaptor.BRepTopAdaptor_FClass2d_swigregister
BRepTopAdaptor_FClass2d_swigregister(BRepTopAdaptor_FClass2d)

class BRepTopAdaptor_HVertex(OCC.Core.Adaptor3d.Adaptor3d_HVertex):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HVertex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepTopAdaptor_HVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HVertex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepTopAdaptor_HVertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        Vtx: TopoDS_Vertex
        Curve: BRepAdaptor_HCurve2d

        Returns
        -------
        None

        """
        this = _BRepTopAdaptor.new_BRepTopAdaptor_HVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeVertex(self, *args) -> "TopoDS_Vertex":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Vertex

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_ChangeVertex(self, *args)


    def Vertex(self, *args) -> "TopoDS_Vertex const":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Vertex

        """
        return _BRepTopAdaptor.BRepTopAdaptor_HVertex_Vertex(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTopAdaptor_HVertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_HVertex
    __del__ = lambda self: None
BRepTopAdaptor_HVertex_swigregister = _BRepTopAdaptor.BRepTopAdaptor_HVertex_swigregister
BRepTopAdaptor_HVertex_swigregister(BRepTopAdaptor_HVertex)

class BRepTopAdaptor_Tool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepTopAdaptor_Tool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepTopAdaptor_Tool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        F: TopoDS_Face
        Tol2d: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Surface: Adaptor3d_HSurface
        Tol2d: float

        Returns
        -------
        None

        """
        this = _BRepTopAdaptor.new_BRepTopAdaptor_Tool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Destroy(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_Destroy(self, *args)


    def GetSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_GetSurface(self, *args)


    def GetTopolTool(self, *args) -> "opencascade::handle< BRepTopAdaptor_TopolTool >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<BRepTopAdaptor_TopolTool>

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_GetTopolTool(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        F: TopoDS_Face
        Tol2d: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Surface: Adaptor3d_HSurface
        Tol2d: float

        Returns
        -------
        None

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_Init(self, *args)


    def SetTopolTool(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        TT: BRepTopAdaptor_TopolTool

        Returns
        -------
        None

        """
        return _BRepTopAdaptor.BRepTopAdaptor_Tool_SetTopolTool(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_Tool
    __del__ = lambda self: None
BRepTopAdaptor_Tool_swigregister = _BRepTopAdaptor.BRepTopAdaptor_Tool_swigregister
BRepTopAdaptor_Tool_swigregister(BRepTopAdaptor_Tool)

class BRepTopAdaptor_TopolTool(OCC.Core.Adaptor3d.Adaptor3d_TopolTool):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_TopolTool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepTopAdaptor_TopolTool, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_TopolTool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepTopAdaptor_TopolTool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Surface: Adaptor3d_HSurface

        Returns
        -------
        None

        """
        this = _BRepTopAdaptor.new_BRepTopAdaptor_TopolTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Destroy(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Destroy(self, *args)


    def Initialize(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Curve: Adaptor2d_HCurve2d

        Returns
        -------
        None

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Initialize(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        If the function returns the orientation of the arc. if the orientation is forward or reversed, the arc is a 'real' limit of the surface. if the orientation is internal or external, the arc is considered as an arc on the surface.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        TopAbs_Orientation

        If the function returns the orientation of the arc. if the orientation is forward or reversed, the arc is a 'real' limit of the surface. if the orientation is internal or external, the arc is considered as an arc on the surface.

        Parameters
        ----------
        C: Adaptor3d_HVertex

        Returns
        -------
        TopAbs_Orientation

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Orientation(self, *args)


    def Tol3d(self, *args) -> "Standard_Real":
        """
        Returns 3d tolerance of the arc c.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        Returns 3d tolerance of the vertex v.

        Parameters
        ----------
        V: Adaptor3d_HVertex

        Returns
        -------
        float

        """
        return _BRepTopAdaptor.BRepTopAdaptor_TopolTool_Tol3d(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRepTopAdaptor_TopolTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepTopAdaptor.delete_BRepTopAdaptor_TopolTool
    __del__ = lambda self: None
BRepTopAdaptor_TopolTool_swigregister = _BRepTopAdaptor.BRepTopAdaptor_TopolTool_swigregister
BRepTopAdaptor_TopolTool_swigregister(BRepTopAdaptor_TopolTool)


BRepTopAdaptor_SeqOfPtr=OCC.Core.TColStd.TColStd_SequenceOfAddress

# This file is compatible with both classic and new-style classes.


