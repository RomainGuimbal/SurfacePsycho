# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BlendFunc module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_blendfunc.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BlendFunc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BlendFunc')
    _BlendFunc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BlendFunc', [dirname(__file__)])
        except ImportError:
            import _BlendFunc
            return _BlendFunc
        try:
            _mod = imp.load_module('_BlendFunc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BlendFunc = swig_import_helper()
    del swig_import_helper
else:
    import _BlendFunc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BlendFunc.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BlendFunc.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BlendFunc.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BlendFunc.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BlendFunc.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BlendFunc.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BlendFunc.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BlendFunc.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BlendFunc.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BlendFunc.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BlendFunc.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BlendFunc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BlendFunc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BlendFunc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BlendFunc.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BlendFunc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BlendFunc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BlendFunc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BlendFunc.process_exception(error, method_name, class_name)
process_exception = _BlendFunc.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.Convert
import OCC.Core.Blend
import OCC.Core.Law

from enum import IntEnum
from OCC.Core.Exception import *

BlendFunc_Rational = _BlendFunc.BlendFunc_Rational
BlendFunc_QuasiAngular = _BlendFunc.BlendFunc_QuasiAngular
BlendFunc_Polynomial = _BlendFunc.BlendFunc_Polynomial
BlendFunc_Linear = _BlendFunc.BlendFunc_Linear


class BlendFunc_SectionShape(IntEnum):
	BlendFunc_Rational = 0
	BlendFunc_QuasiAngular = 1
	BlendFunc_Polynomial = 2
	BlendFunc_Linear = 3
BlendFunc_Rational = BlendFunc_SectionShape.BlendFunc_Rational
BlendFunc_QuasiAngular = BlendFunc_SectionShape.BlendFunc_QuasiAngular
BlendFunc_Polynomial = BlendFunc_SectionShape.BlendFunc_Polynomial
BlendFunc_Linear = BlendFunc_SectionShape.BlendFunc_Linear

class blendfunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blendfunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blendfunc, name)
    __repr__ = _swig_repr

    def ComputeDNormal(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        p2d: gp_Pnt2d
        Normal: gp_Vec
        DNu: gp_Vec
        DNv: gp_Vec

        Returns
        -------
        bool

        """
        return _BlendFunc.blendfunc_ComputeDNormal(*args)

    ComputeDNormal = staticmethod(ComputeDNormal)

    def ComputeNormal(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        p2d: gp_Pnt2d
        Normal: gp_Vec

        Returns
        -------
        bool

        """
        return _BlendFunc.blendfunc_ComputeNormal(*args)

    ComputeNormal = staticmethod(ComputeNormal)

    def GetMinimalWeights(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SectShape: BlendFunc_SectionShape
        TConv: Convert_ParameterisationType
        AngleMin: float
        AngleMax: float
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.blendfunc_GetMinimalWeights(*args)

    GetMinimalWeights = staticmethod(GetMinimalWeights)

    def GetShape(*args) -> "Standard_Integer &, Standard_Integer &, Standard_Integer &":
        """
        No available documentation.

        Parameters
        ----------
        SectShape: BlendFunc_SectionShape
        MaxAng: float
        TypeConv: Convert_ParameterisationType

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int

        """
        return _BlendFunc.blendfunc_GetShape(*args)

    GetShape = staticmethod(GetShape)

    def NextShape(*args) -> "GeomAbs_Shape":
        """
        Used to obtain the next level of continuity.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        GeomAbs_Shape

        """
        return _BlendFunc.blendfunc_NextShape(*args)

    NextShape = staticmethod(NextShape)

    __repr__ = _dumps_object

    @methodnotwrapped
    def Mults(self):
    	pass

    @methodnotwrapped
    def Knots(self):
    	pass


    def __init__(self):
        this = _BlendFunc.new_blendfunc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BlendFunc.delete_blendfunc
    __del__ = lambda self: None
blendfunc_swigregister = _BlendFunc.blendfunc_swigregister
blendfunc_swigregister(blendfunc)

def blendfunc_ComputeDNormal(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    Surf: Adaptor3d_HSurface
    p2d: gp_Pnt2d
    Normal: gp_Vec
    DNu: gp_Vec
    DNv: gp_Vec

    Returns
    -------
    bool

    """
    return _BlendFunc.blendfunc_ComputeDNormal(*args)

def blendfunc_ComputeNormal(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    Surf: Adaptor3d_HSurface
    p2d: gp_Pnt2d
    Normal: gp_Vec

    Returns
    -------
    bool

    """
    return _BlendFunc.blendfunc_ComputeNormal(*args)

def blendfunc_GetMinimalWeights(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    SectShape: BlendFunc_SectionShape
    TConv: Convert_ParameterisationType
    AngleMin: float
    AngleMax: float
    Weigths: TColStd_Array1OfReal

    Returns
    -------
    None

    """
    return _BlendFunc.blendfunc_GetMinimalWeights(*args)

def blendfunc_GetShape(*args) -> "Standard_Integer &, Standard_Integer &, Standard_Integer &":
    """
    No available documentation.

    Parameters
    ----------
    SectShape: BlendFunc_SectionShape
    MaxAng: float
    TypeConv: Convert_ParameterisationType

    Returns
    -------
    NbPoles: int
    NbKnots: int
    Degree: int

    """
    return _BlendFunc.blendfunc_GetShape(*args)

def blendfunc_NextShape(*args) -> "GeomAbs_Shape":
    """
    Used to obtain the next level of continuity.

    Parameters
    ----------
    S: GeomAbs_Shape

    Returns
    -------
    GeomAbs_Shape

    """
    return _BlendFunc.blendfunc_NextShape(*args)

class BlendFunc_CSCircular(OCC.Core.Blend.Blend_CSFunction):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_CSFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_CSCircular, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_CSFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_CSCircular, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a function for a circular blending between a curve <c> and a surface <s>. the direction of the planes are given by <cguide>. the position of the plane is determined on the curve <c>. <l> defines the change of parameter between <c> and <cguide>. so, the planes are defined as described below : t is the current parameter on the guide line. pguide = c(l(t)); nguide = cguide'(t)/||cguide'(t)||.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        C: Adaptor3d_HCurve
        CGuide: Adaptor3d_HCurve
        L: Law_Function

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_CSCircular(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSection(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Param: float
        U: float
        V: float
        W: float
        tabP: TColgp_Array1OfPnt
        tabV: TColgp_Array1OfVec

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSCircular_GetSection(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float
        U: float
        V: float
        W: float
        C: gp_Circ

        Returns
        -------
        Pdeb: float
        Pfin: float

        Used for the first and last section the method returns standard_true if the derivatives are computed, otherwise it returns standard_false.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Radius: float
        Choix: int

        Returns
        -------
        None

        Sets the type of section generation for the approximations.

        Parameters
        ----------
        TypeSection: BlendFunc_SectionShape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_CSCircular
    __del__ = lambda self: None
BlendFunc_CSCircular_swigregister = _BlendFunc.BlendFunc_CSCircular_swigregister
BlendFunc_CSCircular_swigregister(BlendFunc_CSCircular)

class BlendFunc_CSConstRad(OCC.Core.Blend.Blend_CSFunction):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_CSFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_CSConstRad, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_CSFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_CSConstRad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        C: Adaptor3d_HCurve
        CGuide: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_CSConstRad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSection(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Param: float
        U: float
        V: float
        W: float
        tabP: TColgp_Array1OfPnt
        tabV: TColgp_Array1OfVec

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSConstRad_GetSection(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float
        U: float
        V: float
        W: float
        C: gp_Circ

        Returns
        -------
        Pdeb: float
        Pfin: float

        Used for the first and last section the method returns standard_true if the derivatives are computed, otherwise it returns standard_false.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Radius: float
        Choix: int

        Returns
        -------
        None

        Sets the type of section generation for the approximations.

        Parameters
        ----------
        TypeSection: BlendFunc_SectionShape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_CSConstRad
    __del__ = lambda self: None
BlendFunc_CSConstRad_swigregister = _BlendFunc.BlendFunc_CSConstRad_swigregister
BlendFunc_CSConstRad_swigregister(BlendFunc_CSConstRad)

class BlendFunc_ChAsym(OCC.Core.Blend.Blend_Function):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ChAsym, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ChAsym, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ChAsym(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ComputeValues(self, *args) -> "Standard_Boolean":
        """
        Computes the values <f> of the derivatives for the variable <x> between degf and degl. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        DegF: int
        DegL: int

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_ComputeValues(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_GetTolerance(self, *args)


    def Section(self, *args) -> "Standard_Boolean":
        """
        Utile pour une visu rapide et approximative de la surface.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        C: gp_Lin

        Returns
        -------
        Pdeb: float
        Pfin: float

        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        Sets the distances and the angle.

        Parameters
        ----------
        Dist1: float
        Angle: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChAsym
    __del__ = lambda self: None
BlendFunc_ChAsym_swigregister = _BlendFunc.BlendFunc_ChAsym_swigregister
BlendFunc_ChAsym_swigregister(BlendFunc_ChAsym)

class BlendFunc_ChAsymInv(OCC.Core.Blend.Blend_FuncInv):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ChAsymInv, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ChAsymInv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ChAsymInv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ComputeValues(self, *args) -> "Standard_Boolean":
        """
        Computes the values <f> of the derivatives for the variable <x> between degf and degl. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        DegF: int
        DegL: int

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsymInv_ComputeValues(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_HCurve2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Dist1: float
        Angle: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsymInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChAsymInv
    __del__ = lambda self: None
BlendFunc_ChAsymInv_swigregister = _BlendFunc.BlendFunc_ChAsymInv_swigregister
BlendFunc_ChAsymInv_swigregister(BlendFunc_ChAsymInv)

class BlendFunc_ConstRad(OCC.Core.Blend.Blend_Function):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ConstRad, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ConstRad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ConstRad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AxeRot(self, *args) -> "gp_Ax1":
        """
        No available documentation.

        Parameters
        ----------
        Prm: float

        Returns
        -------
        gp_Ax1

        """
        return _BlendFunc.BlendFunc_ConstRad_AxeRot(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        Utile pour une visu rapide et approximative de la surface.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        C: gp_Circ

        Returns
        -------
        Pdeb: float
        Pfin: float

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        Inits the value of radius, and the 'quadrant'.

        Parameters
        ----------
        Radius: float
        Choix: int

        Returns
        -------
        None

        Sets the type of section generation for the approximations.

        Parameters
        ----------
        TypeSection: BlendFunc_SectionShape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstRad
    __del__ = lambda self: None
BlendFunc_ConstRad_swigregister = _BlendFunc.BlendFunc_ConstRad_swigregister
BlendFunc_ConstRad_swigregister(BlendFunc_ConstRad)

class BlendFunc_ConstRadInv(OCC.Core.Blend.Blend_FuncInv):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ConstRadInv, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ConstRadInv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ConstRadInv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_HCurve2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        R: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstRadInv
    __del__ = lambda self: None
BlendFunc_ConstRadInv_swigregister = _BlendFunc.BlendFunc_ConstRadInv_swigregister
BlendFunc_ConstRadInv_swigregister(BlendFunc_ConstRadInv)

class BlendFunc_Corde(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_Corde, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_Corde, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        CGuide: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_Corde(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DerFguide(self, *args) -> "void":
        """
        Derived of the function compared to the parameter of the guideline.

        Parameters
        ----------
        Sol: math_Vector
        DerF: gp_Vec2d

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Corde_DerFguide(self, *args)


    def Derivatives(self, *args) -> "Standard_Boolean":
        """
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Corde_Derivatives(self, *args)


    def IsSolution(self, *args) -> "Standard_Boolean":
        """
        Returns false if sol is not solution else returns true and updates the fields tgs and tg2d.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Corde_IsSolution(self, *args)


    def IsTangencyPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true when it is not possible to compute the tangent vectors at pointons.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Corde_IsTangencyPoint(self, *args)


    def NPlan(self, *args) -> "gp_Vec const":
        """
        Returns the normal to cguide at ptgui.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_Corde_NPlan(self, *args)


    def PointOnGuide(self, *args) -> "gp_Pnt const":
        """
        Returns the point of parameter <param> on cguide.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_Corde_PointOnGuide(self, *args)


    def PointOnS(self, *args) -> "gp_Pnt const":
        """
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_Corde_PointOnS(self, *args)


    def SetDist(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Dist: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Corde_SetDist(self, *args)


    def SetParam(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Corde_SetParam(self, *args)


    def Tangent2dOnS(self, *args) -> "gp_Vec2d const":
        """
        Returns the tangent vector at pointons, in the parametric space of the first surface.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_Corde_Tangent2dOnS(self, *args)


    def TangentOnS(self, *args) -> "gp_Vec const":
        """
        Returns the tangent vector at pointons, in 3d space.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_Corde_TangentOnS(self, *args)


    def Value(self, *args) -> "Standard_Boolean":
        """
        Computes the values <f> of the function for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Corde_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Corde
    __del__ = lambda self: None
BlendFunc_Corde_swigregister = _BlendFunc.BlendFunc_Corde_swigregister
BlendFunc_Corde_swigregister(BlendFunc_Corde)

class BlendFunc_EvolRad(OCC.Core.Blend.Blend_Function):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_EvolRad, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_EvolRad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve
        Law: Law_Function

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_EvolRad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        Method for graphic traces.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        C: gp_Circ

        Returns
        -------
        Pdeb: float
        Pfin: float

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Choix: int

        Returns
        -------
        None

        Sets the type of section generation for the approximations.

        Parameters
        ----------
        TypeSection: BlendFunc_SectionShape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_EvolRad
    __del__ = lambda self: None
BlendFunc_EvolRad_swigregister = _BlendFunc.BlendFunc_EvolRad_swigregister
BlendFunc_EvolRad_swigregister(BlendFunc_EvolRad)

class BlendFunc_EvolRadInv(OCC.Core.Blend.Blend_FuncInv):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_EvolRadInv, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_EvolRadInv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve
        Law: Law_Function

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_EvolRadInv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_HCurve2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRadInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_EvolRadInv
    __del__ = lambda self: None
BlendFunc_EvolRadInv_swigregister = _BlendFunc.BlendFunc_EvolRadInv_swigregister
BlendFunc_EvolRadInv_swigregister(BlendFunc_EvolRadInv)

class BlendFunc_GenChamfInv(OCC.Core.Blend.Blend_FuncInv):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_GenChamfInv, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_GenChamfInv, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_HCurve2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Dist1: float
        Dist2: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfInv_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_GenChamfInv
    __del__ = lambda self: None
BlendFunc_GenChamfInv_swigregister = _BlendFunc.BlendFunc_GenChamfInv_swigregister
BlendFunc_GenChamfInv_swigregister(BlendFunc_GenChamfInv)

class BlendFunc_GenChamfer(OCC.Core.Blend.Blend_Function):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_GenChamfer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_GenChamfer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        Obsolete method.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        C: gp_Lin

        Returns
        -------
        Pdeb: float
        Pfin: float

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the value of the parameter along the guide line. this determines the plane in which the solution has to be found.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        Sets the bounds of the parametric interval on the guide line. this determines the derivatives in these values if the function is not cn.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        Sets the distances and the 'quadrant'.

        Parameters
        ----------
        Dist1: float
        Dist2: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_GenChamfer
    __del__ = lambda self: None
BlendFunc_GenChamfer_swigregister = _BlendFunc.BlendFunc_GenChamfer_swigregister
BlendFunc_GenChamfer_swigregister(BlendFunc_GenChamfer)

class BlendFunc_Ruled(OCC.Core.Blend.Blend_Function):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_Ruled, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_Function]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_Ruled, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_Ruled(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AxeRot(self, *args) -> "gp_Ax1":
        """
        No available documentation.

        Parameters
        ----------
        Prm: float

        Returns
        -------
        gp_Ax1

        """
        return _BlendFunc.BlendFunc_Ruled_AxeRot(self, *args)


    def GetSection(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        tabP: TColgp_Array1OfPnt
        tabV: TColgp_Array1OfVec

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Ruled_GetSection(self, *args)


    def GetTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_GetTolerance(self, *args)


    def Section(self, *args) -> "void":
        """
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_Section(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Ruled
    __del__ = lambda self: None
BlendFunc_Ruled_swigregister = _BlendFunc.BlendFunc_Ruled_swigregister
BlendFunc_Ruled_swigregister(BlendFunc_Ruled)

class BlendFunc_RuledInv(OCC.Core.Blend.Blend_FuncInv):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_RuledInv, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Blend.Blend_FuncInv]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_RuledInv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_RuledInv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_RuledInv
    __del__ = lambda self: None
BlendFunc_RuledInv_swigregister = _BlendFunc.BlendFunc_RuledInv_swigregister
BlendFunc_RuledInv_swigregister(BlendFunc_RuledInv)

class BlendFunc_Tensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_Tensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_Tensor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        NbRow: int
        NbCol: int
        NbMat: int

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_Tensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetChangeValue(self, Row: 'Standard_Integer const', Col: 'Standard_Integer const', Mat: 'Standard_Integer const') -> "Standard_Real":
        """GetChangeValue(BlendFunc_Tensor self, Standard_Integer const Row, Standard_Integer const Col, Standard_Integer const Mat) -> Standard_Real"""
        return _BlendFunc.BlendFunc_Tensor_GetChangeValue(self, Row, Col, Mat)


    def SetChangeValue(self, Row: 'Standard_Integer const', Col: 'Standard_Integer const', Mat: 'Standard_Integer const', value: 'Standard_Real') -> "void":
        """SetChangeValue(BlendFunc_Tensor self, Standard_Integer const Row, Standard_Integer const Col, Standard_Integer const Mat, Standard_Real value)"""
        return _BlendFunc.BlendFunc_Tensor_SetChangeValue(self, Row, Col, Mat, value)


    def Init(self, *args) -> "void":
        """
        Initialize all the elements of a tensor to initialvalue.

        Parameters
        ----------
        InitialValue: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Tensor_Init(self, *args)


    def Multiply(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Right: math_Vector
        Product: math_Matrix

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Tensor_Multiply(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        Accesses (in read or write mode) the value of index <row>, <col> and <mat> of a tensor. an exception is raised if <row>, <col> or <mat> are not in the correct range.

        Parameters
        ----------
        Row: int
        Col: int
        Mat: int

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_Tensor_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Tensor
    __del__ = lambda self: None
BlendFunc_Tensor_swigregister = _BlendFunc.BlendFunc_Tensor_swigregister
BlendFunc_Tensor_swigregister(BlendFunc_Tensor)

class BlendFunc_ChamfInv(BlendFunc_GenChamfInv):
    __swig_setmethods__ = {}
    for _s in [BlendFunc_GenChamfInv]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ChamfInv, name, value)
    __swig_getmethods__ = {}
    for _s in [BlendFunc_GenChamfInv]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ChamfInv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ChamfInv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChamfInv
    __del__ = lambda self: None
BlendFunc_ChamfInv_swigregister = _BlendFunc.BlendFunc_ChamfInv_swigregister
BlendFunc_ChamfInv_swigregister(BlendFunc_ChamfInv)

class BlendFunc_Chamfer(BlendFunc_GenChamfer):
    __swig_setmethods__ = {}
    for _s in [BlendFunc_GenChamfer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_Chamfer, name, value)
    __swig_getmethods__ = {}
    for _s in [BlendFunc_GenChamfer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_Chamfer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        CG: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_Chamfer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        Sets the distances and the 'quadrant'.

        Parameters
        ----------
        Dist1: float
        Dist2: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Chamfer_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Chamfer
    __del__ = lambda self: None
BlendFunc_Chamfer_swigregister = _BlendFunc.BlendFunc_Chamfer_swigregister
BlendFunc_Chamfer_swigregister(BlendFunc_Chamfer)

class BlendFunc_ConstThroat(BlendFunc_GenChamfer):
    __swig_setmethods__ = {}
    for _s in [BlendFunc_GenChamfer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ConstThroat, name, value)
    __swig_getmethods__ = {}
    for _s in [BlendFunc_GenChamfer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ConstThroat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ConstThroat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        Sets the throat and the 'quadrant'.

        Parameters
        ----------
        aThroat: float
        Standard_Real: 
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstThroat_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroat
    __del__ = lambda self: None
BlendFunc_ConstThroat_swigregister = _BlendFunc.BlendFunc_ConstThroat_swigregister
BlendFunc_ConstThroat_swigregister(BlendFunc_ConstThroat)

class BlendFunc_ConstThroatInv(BlendFunc_GenChamfInv):
    __swig_setmethods__ = {}
    for _s in [BlendFunc_GenChamfInv]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ConstThroatInv, name, value)
    __swig_getmethods__ = {}
    for _s in [BlendFunc_GenChamfInv]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ConstThroatInv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ConstThroatInv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatInv
    __del__ = lambda self: None
BlendFunc_ConstThroatInv_swigregister = _BlendFunc.BlendFunc_ConstThroatInv_swigregister
BlendFunc_ConstThroatInv_swigregister(BlendFunc_ConstThroatInv)

class BlendFunc_ConstThroatWithPenetration(BlendFunc_ConstThroat):
    __swig_setmethods__ = {}
    for _s in [BlendFunc_ConstThroat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ConstThroatWithPenetration, name, value)
    __swig_getmethods__ = {}
    for _s in [BlendFunc_ConstThroat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ConstThroatWithPenetration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ConstThroatWithPenetration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatWithPenetration
    __del__ = lambda self: None
BlendFunc_ConstThroatWithPenetration_swigregister = _BlendFunc.BlendFunc_ConstThroatWithPenetration_swigregister
BlendFunc_ConstThroatWithPenetration_swigregister(BlendFunc_ConstThroatWithPenetration)

class BlendFunc_ConstThroatWithPenetrationInv(BlendFunc_ConstThroatInv):
    __swig_setmethods__ = {}
    for _s in [BlendFunc_ConstThroatInv]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc_ConstThroatWithPenetrationInv, name, value)
    __swig_getmethods__ = {}
    for _s in [BlendFunc_ConstThroatInv]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc_ConstThroatWithPenetrationInv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _BlendFunc.new_BlendFunc_ConstThroatWithPenetrationInv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatWithPenetrationInv
    __del__ = lambda self: None
BlendFunc_ConstThroatWithPenetrationInv_swigregister = _BlendFunc.BlendFunc_ConstThroatWithPenetrationInv_swigregister
BlendFunc_ConstThroatWithPenetrationInv_swigregister(BlendFunc_ConstThroatWithPenetrationInv)



# This file is compatible with both classic and new-style classes.


