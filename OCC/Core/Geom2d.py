# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
Geom2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_geom2d.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Geom2d
else:
    import _Geom2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2d.delete_SwigPyIterator

    def value(self):
        return _Geom2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Geom2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Geom2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Geom2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Geom2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Geom2d.SwigPyIterator_copy(self)

    def next(self):
        return _Geom2d.SwigPyIterator_next(self)

    def __next__(self):
        return _Geom2d.SwigPyIterator___next__(self)

    def previous(self):
        return _Geom2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Geom2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Geom2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Geom2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Geom2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Geom2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Geom2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Geom2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Geom2d:
_Geom2d.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _Geom2d.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_Geom2d_Geometry_Create():
    return _Geom2d.Handle_Geom2d_Geometry_Create()

def Handle_Geom2d_Geometry_DownCast(t):
    return _Geom2d.Handle_Geom2d_Geometry_DownCast(t)

def Handle_Geom2d_Geometry_IsNull(t):
    return _Geom2d.Handle_Geom2d_Geometry_IsNull(t)

def Handle_Geom2d_Transformation_Create():
    return _Geom2d.Handle_Geom2d_Transformation_Create()

def Handle_Geom2d_Transformation_DownCast(t):
    return _Geom2d.Handle_Geom2d_Transformation_DownCast(t)

def Handle_Geom2d_Transformation_IsNull(t):
    return _Geom2d.Handle_Geom2d_Transformation_IsNull(t)

def Handle_Geom2d_AxisPlacement_Create():
    return _Geom2d.Handle_Geom2d_AxisPlacement_Create()

def Handle_Geom2d_AxisPlacement_DownCast(t):
    return _Geom2d.Handle_Geom2d_AxisPlacement_DownCast(t)

def Handle_Geom2d_AxisPlacement_IsNull(t):
    return _Geom2d.Handle_Geom2d_AxisPlacement_IsNull(t)

def Handle_Geom2d_Curve_Create():
    return _Geom2d.Handle_Geom2d_Curve_Create()

def Handle_Geom2d_Curve_DownCast(t):
    return _Geom2d.Handle_Geom2d_Curve_DownCast(t)

def Handle_Geom2d_Curve_IsNull(t):
    return _Geom2d.Handle_Geom2d_Curve_IsNull(t)

def Handle_Geom2d_Point_Create():
    return _Geom2d.Handle_Geom2d_Point_Create()

def Handle_Geom2d_Point_DownCast(t):
    return _Geom2d.Handle_Geom2d_Point_DownCast(t)

def Handle_Geom2d_Point_IsNull(t):
    return _Geom2d.Handle_Geom2d_Point_IsNull(t)

def Handle_Geom2d_Vector_Create():
    return _Geom2d.Handle_Geom2d_Vector_Create()

def Handle_Geom2d_Vector_DownCast(t):
    return _Geom2d.Handle_Geom2d_Vector_DownCast(t)

def Handle_Geom2d_Vector_IsNull(t):
    return _Geom2d.Handle_Geom2d_Vector_IsNull(t)

def Handle_Geom2d_BoundedCurve_Create():
    return _Geom2d.Handle_Geom2d_BoundedCurve_Create()

def Handle_Geom2d_BoundedCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_BoundedCurve_DownCast(t)

def Handle_Geom2d_BoundedCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_BoundedCurve_IsNull(t)

def Handle_Geom2d_CartesianPoint_Create():
    return _Geom2d.Handle_Geom2d_CartesianPoint_Create()

def Handle_Geom2d_CartesianPoint_DownCast(t):
    return _Geom2d.Handle_Geom2d_CartesianPoint_DownCast(t)

def Handle_Geom2d_CartesianPoint_IsNull(t):
    return _Geom2d.Handle_Geom2d_CartesianPoint_IsNull(t)

def Handle_Geom2d_Conic_Create():
    return _Geom2d.Handle_Geom2d_Conic_Create()

def Handle_Geom2d_Conic_DownCast(t):
    return _Geom2d.Handle_Geom2d_Conic_DownCast(t)

def Handle_Geom2d_Conic_IsNull(t):
    return _Geom2d.Handle_Geom2d_Conic_IsNull(t)

def Handle_Geom2d_Direction_Create():
    return _Geom2d.Handle_Geom2d_Direction_Create()

def Handle_Geom2d_Direction_DownCast(t):
    return _Geom2d.Handle_Geom2d_Direction_DownCast(t)

def Handle_Geom2d_Direction_IsNull(t):
    return _Geom2d.Handle_Geom2d_Direction_IsNull(t)

def Handle_Geom2d_Line_Create():
    return _Geom2d.Handle_Geom2d_Line_Create()

def Handle_Geom2d_Line_DownCast(t):
    return _Geom2d.Handle_Geom2d_Line_DownCast(t)

def Handle_Geom2d_Line_IsNull(t):
    return _Geom2d.Handle_Geom2d_Line_IsNull(t)

def Handle_Geom2d_OffsetCurve_Create():
    return _Geom2d.Handle_Geom2d_OffsetCurve_Create()

def Handle_Geom2d_OffsetCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_OffsetCurve_DownCast(t)

def Handle_Geom2d_OffsetCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_OffsetCurve_IsNull(t)

def Handle_Geom2d_VectorWithMagnitude_Create():
    return _Geom2d.Handle_Geom2d_VectorWithMagnitude_Create()

def Handle_Geom2d_VectorWithMagnitude_DownCast(t):
    return _Geom2d.Handle_Geom2d_VectorWithMagnitude_DownCast(t)

def Handle_Geom2d_VectorWithMagnitude_IsNull(t):
    return _Geom2d.Handle_Geom2d_VectorWithMagnitude_IsNull(t)

def Handle_Geom2d_BSplineCurve_Create():
    return _Geom2d.Handle_Geom2d_BSplineCurve_Create()

def Handle_Geom2d_BSplineCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_BSplineCurve_DownCast(t)

def Handle_Geom2d_BSplineCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_BSplineCurve_IsNull(t)

def Handle_Geom2d_BezierCurve_Create():
    return _Geom2d.Handle_Geom2d_BezierCurve_Create()

def Handle_Geom2d_BezierCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_BezierCurve_DownCast(t)

def Handle_Geom2d_BezierCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_BezierCurve_IsNull(t)

def Handle_Geom2d_Circle_Create():
    return _Geom2d.Handle_Geom2d_Circle_Create()

def Handle_Geom2d_Circle_DownCast(t):
    return _Geom2d.Handle_Geom2d_Circle_DownCast(t)

def Handle_Geom2d_Circle_IsNull(t):
    return _Geom2d.Handle_Geom2d_Circle_IsNull(t)

def Handle_Geom2d_Ellipse_Create():
    return _Geom2d.Handle_Geom2d_Ellipse_Create()

def Handle_Geom2d_Ellipse_DownCast(t):
    return _Geom2d.Handle_Geom2d_Ellipse_DownCast(t)

def Handle_Geom2d_Ellipse_IsNull(t):
    return _Geom2d.Handle_Geom2d_Ellipse_IsNull(t)

def Handle_Geom2d_Hyperbola_Create():
    return _Geom2d.Handle_Geom2d_Hyperbola_Create()

def Handle_Geom2d_Hyperbola_DownCast(t):
    return _Geom2d.Handle_Geom2d_Hyperbola_DownCast(t)

def Handle_Geom2d_Hyperbola_IsNull(t):
    return _Geom2d.Handle_Geom2d_Hyperbola_IsNull(t)

def Handle_Geom2d_Parabola_Create():
    return _Geom2d.Handle_Geom2d_Parabola_Create()

def Handle_Geom2d_Parabola_DownCast(t):
    return _Geom2d.Handle_Geom2d_Parabola_DownCast(t)

def Handle_Geom2d_Parabola_IsNull(t):
    return _Geom2d.Handle_Geom2d_Parabola_IsNull(t)

def Handle_Geom2d_TrimmedCurve_Create():
    return _Geom2d.Handle_Geom2d_TrimmedCurve_Create()

def Handle_Geom2d_TrimmedCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_TrimmedCurve_DownCast(t)

def Handle_Geom2d_TrimmedCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_TrimmedCurve_IsNull(t)
class Geom2d_Geometry(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Copy(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Geometry_Copy(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Geometry_DumpJsonToString(self, depth)

    def Mirror(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Performs the symmetrical transformation of a geometry with respect to the point p which is the center of the symmetry and assigns the result to this geometric object.

        Parameters
        ----------
        A: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Performs the symmetrical transformation of a geometry with respect to an axis placement which is the axis of the symmetry.

        """
        return _Geom2d.Geom2d_Geometry_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        A: gp_Ax2d

        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Geometry_Mirrored(self, *args)

    def Rotate(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d
        Ang: float

        Return
        -------
        None

        Description
        -----------
        Rotates a geometry. p is the center of the rotation. ang is the angular value of the rotation in radians.

        """
        return _Geom2d.Geom2d_Geometry_Rotate(self, *args)

    def Rotated(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d
        Ang: float

        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Geometry_Rotated(self, *args)

    def Scale(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d
        S: float

        Return
        -------
        None

        Description
        -----------
        Scales a geometry. s is the scaling value.

        """
        return _Geom2d.Geom2d_Geometry_Scale(self, *args)

    def Scaled(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d
        S: float

        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Geometry_Scaled(self, *args)

    def Transform(self, *args):
        r"""

        Parameters
        ----------
        T: gp_Trsf2d

        Return
        -------
        None

        Description
        -----------
        Transformation of a geometric object. this tansformation can be a translation, a rotation, a symmetry, a scaling or a complex transformation obtained by combination of the previous elementaries transformations. (see class transformation of the package geom2d). the following transformations have the same properties as the previous ones but they don't modified the object itself. a copy of the object is returned.

        """
        return _Geom2d.Geom2d_Geometry_Transform(self, *args)

    def Transformed(self, *args):
        r"""

        Parameters
        ----------
        T: gp_Trsf2d

        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Geometry_Transformed(self, *args)

    def Translate(self, *args):
        r"""

        Parameters
        ----------
        V: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Translates a geometry. v is the vector of the translation.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Translates a geometry from the point p1 to the point p2.

        """
        return _Geom2d.Geom2d_Geometry_Translate(self, *args)

    def Translated(self, *args):
        r"""

        Parameters
        ----------
        V: gp_Vec2d

        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Geometry_Translated(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Geometry_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Geometry

# Register Geom2d_Geometry in _Geom2d:
_Geom2d.Geom2d_Geometry_swigregister(Geom2d_Geometry)
class Geom2d_Transformation(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an identity transformation.

        Parameters
        ----------
        T: gp_Trsf2d

        Return
        -------
        None

        Description
        -----------
        Creates a persistent copy of t.

        """
        _Geom2d.Geom2d_Transformation_swiginit(self, _Geom2d.new_Geom2d_Transformation(*args))

    def Copy(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Transformation>

        Description
        -----------
        Creates a new object, which is a copy of this transformation.

        """
        return _Geom2d.Geom2d_Transformation_Copy(self, *args)

    def Form(self, *args):
        r"""
        Return
        -------
        gp_TrsfForm

        Description
        -----------
        Returns the nature of this transformation as a value of the gp_trsfform enumeration. returns the nature of the transformation. it can be identity, rotation, translation, pntmirror, ax1mirror, scale, compoundtrsf.

        """
        return _Geom2d.Geom2d_Transformation_Form(self, *args)

    def Invert(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Computes the inverse of this transformation. and assigns the result to this transformatio //! raised if the transformation is singular. this means that the scalefactor is lower or equal to resolution from package gp.

        """
        return _Geom2d.Geom2d_Transformation_Invert(self, *args)

    def Inverted(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Transformation>

        Description
        -----------
        Computes the inverse of this transformation and creates a new one. raises constructionerror if the transformation is singular. this means that the scalefactor is lower or equal to resolution from package gp.

        """
        return _Geom2d.Geom2d_Transformation_Inverted(self, *args)

    def IsNegative(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Checks whether this transformation is an indirect transformation: returns true if the determinant of the matrix of the vectorial part of the transformation is less than 0.

        """
        return _Geom2d.Geom2d_Transformation_IsNegative(self, *args)

    def Multiplied(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Transformation

        Return
        -------
        opencascade::handle<Geom2d_Transformation>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Transformation_Multiplied(self, *args)

    def Multiply(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Transformation

        Return
        -------
        None

        Description
        -----------
        Computes the transformation composed with other and <self> . <self> = <self> * other. //! computes the following composition of transformations if n > 0 <self> * <self> * .......* <self>. if n = 0 identity if n < 0 <self>.invert() * .........* <self>.invert().

        """
        return _Geom2d.Geom2d_Transformation_Multiply(self, *args)

    def Power(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        None

        Description
        -----------
        Raised if n < 0 and if the transformation is not inversible.

        """
        return _Geom2d.Geom2d_Transformation_Power(self, *args)

    def Powered(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        opencascade::handle<Geom2d_Transformation>

        Description
        -----------
        Raised if n < 0 and if the transformation is not inversible.

        """
        return _Geom2d.Geom2d_Transformation_Powered(self, *args)

    def PreMultiply(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Transformation

        Return
        -------
        None

        Description
        -----------
        Computes the matrix of the transformation composed with <self> and other. <self> = other * <self>.

        """
        return _Geom2d.Geom2d_Transformation_PreMultiply(self, *args)

    def ScaleFactor(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the scale value of the transformation.

        """
        return _Geom2d.Geom2d_Transformation_ScaleFactor(self, *args)

    def SetMirror(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Makes the transformation into a symmetrical transformation with respect to a point p. p is the center of the symmetry.

        Parameters
        ----------
        A: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Makes the transformation into a symmetrical transformation with respect to an axis a. a is the center of the axial symmetry.

        """
        return _Geom2d.Geom2d_Transformation_SetMirror(self, *args)

    def SetRotation(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d
        Ang: float

        Return
        -------
        None

        Description
        -----------
        Assigns to this transformation the geometric properties of a rotation at angle ang (in radians) about point p.

        """
        return _Geom2d.Geom2d_Transformation_SetRotation(self, *args)

    def SetScale(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d
        S: float

        Return
        -------
        None

        Description
        -----------
        Makes the transformation into a scale. p is the center of the scale and s is the scaling value.

        """
        return _Geom2d.Geom2d_Transformation_SetScale(self, *args)

    def SetTransformation(self, *args):
        r"""

        Parameters
        ----------
        FromSystem1: gp_Ax2d
        ToSystem2: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Makes a transformation allowing passage from the coordinate system 'fromsystem1' to the coordinate system 'tosystem2'.

        Parameters
        ----------
        ToSystem: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Makes the transformation allowing passage from the basic coordinate system {p(0.,0.,0.), vx (1.,0.,0.), vy (0.,1.,0.)} to the local coordinate system defined with the ax2d tosystem.

        """
        return _Geom2d.Geom2d_Transformation_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        r"""

        Parameters
        ----------
        V: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Makes the transformation into a translation. v is the vector of the translation.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Makes the transformation into a translation from the point p1 to the point p2.

        """
        return _Geom2d.Geom2d_Transformation_SetTranslation(self, *args)

    def SetTrsf2d(self, *args):
        r"""

        Parameters
        ----------
        T: gp_Trsf2d

        Return
        -------
        None

        Description
        -----------
        Makes the transformation into a transformation t from package gp.

        """
        return _Geom2d.Geom2d_Transformation_SetTrsf2d(self, *args)

    def Transforms(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        X: float
        Y: float

        Description
        -----------
        Applies the transformation <self> to the triplet {x, y}.

        """
        return _Geom2d.Geom2d_Transformation_Transforms(self, *args)

    def Trsf2d(self, *args):
        r"""
        Return
        -------
        gp_Trsf2d

        Description
        -----------
        Converts this transformation into a gp_trsf2d transformation. returns a non persistent copy of <self>. -c++: return const&.

        """
        return _Geom2d.Geom2d_Transformation_Trsf2d(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        Row: int
        Col: int

        Return
        -------
        float

        Description
        -----------
        Returns the coefficients of the global matrix of transformation. it is a 2 rows x 3 columns matrix. //! raised if row < 1 or row > 2 or col < 1 or col > 2 //! computes the reverse transformation.

        """
        return _Geom2d.Geom2d_Transformation_Value(self, *args)

    def __mul__(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Transformation

        Return
        -------
        opencascade::handle<Geom2d_Transformation>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Transformation___mul__(self, *args)

    def __imul_wrapper__(self, other):
        return _Geom2d.Geom2d_Transformation___imul_wrapper__(self, other)

    def __imul__(self, right):
        self.__imul_wrapper__(right)
        return self



    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Transformation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Transformation

# Register Geom2d_Transformation in _Geom2d:
_Geom2d.Geom2d_Transformation_swigregister(Geom2d_Transformation)
class Geom2d_AxisPlacement(Geom2d_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        A: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Constructs an axis by conversion of the gp_ax2d axis a.

        Parameters
        ----------
        P: gp_Pnt2d
        V: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Constructs an axis from a given origin p and unit vector v.

        """
        _Geom2d.Geom2d_AxisPlacement_swiginit(self, _Geom2d.new_Geom2d_AxisPlacement(*args))

    def Angle(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_AxisPlacement

        Return
        -------
        float

        Description
        -----------
        Computes the angle between the 'direction' of two axis placement in radians. the result is comprised between -pi and pi.

        """
        return _Geom2d.Geom2d_AxisPlacement_Angle(self, *args)

    def Ax2d(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        Converts this axis into a gp_ax2d axis.

        """
        return _Geom2d.Geom2d_AxisPlacement_Ax2d(self, *args)

    def Direction(self, *args):
        r"""
        Return
        -------
        gp_Dir2d

        Description
        -----------
        Returns the 'direction' of <self>. -c++: return const&.

        """
        return _Geom2d.Geom2d_AxisPlacement_Direction(self, *args)

    def Location(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the 'location' point (origin) of the axis placement. -c++: return const&.

        """
        return _Geom2d.Geom2d_AxisPlacement_Location(self, *args)

    def Reverse(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_AxisPlacement_Reverse(self, *args)

    def Reversed(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_AxisPlacement>

        Description
        -----------
        Reverses the unit vector of this axis. note: - reverse assigns the result to this axis, while - reversed creates a new one.

        """
        return _Geom2d.Geom2d_AxisPlacement_Reversed(self, *args)

    def SetAxis(self, *args):
        r"""

        Parameters
        ----------
        A: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Changes the complete definition of the axis placement.

        """
        return _Geom2d.Geom2d_AxisPlacement_SetAxis(self, *args)

    def SetDirection(self, *args):
        r"""

        Parameters
        ----------
        V: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Changes the 'direction' of the axis placement.

        """
        return _Geom2d.Geom2d_AxisPlacement_SetDirection(self, *args)

    def SetLocation(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Changes the 'location' point (origin) of the axis placement.

        """
        return _Geom2d.Geom2d_AxisPlacement_SetLocation(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_AxisPlacement_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_AxisPlacement

# Register Geom2d_AxisPlacement in _Geom2d:
_Geom2d.Geom2d_AxisPlacement_swigregister(Geom2d_AxisPlacement)
class Geom2d_Curve(Geom2d_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Continuity(self, *args):
        r"""
        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        It is the global continuity of the curve: c0: only geometric continuity, c1: continuity of the first derivative all along the curve, c2: continuity of the second derivative all along the curve, c3: continuity of the third derivative all along the curve, g1: tangency continuity all along the curve, g2: curvature continuity all along the curve, cn: the order of continuity is infinite.

        """
        return _Geom2d.Geom2d_Curve_Continuity(self, *args)

    def D0(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Returns in p the point of parameter u. if the curve is periodic then the returned point is p(u) with u = ustart + (u - uend) where ustart and uend are the parametric bounds of the curve. //! raised only for the 'offsetcurve' if it is not possible to compute the current point. for example when the first derivative on the basis curve and the offset direction are parallel.

        """
        return _Geom2d.Geom2d_Curve_D0(self, *args)

    def D1(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u and the first derivative v1. raised if the continuity of the curve is not c1.

        """
        return _Geom2d.Geom2d_Curve_D1(self, *args)

    def D2(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the curve is not c2.

        """
        return _Geom2d.Geom2d_Curve_D2(self, *args)

    def D3(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the curve is not c3.

        """
        return _Geom2d.Geom2d_Curve_D3(self, *args)

    def DN(self, *args):
        r"""

        Parameters
        ----------
        U: float
        N: int

        Return
        -------
        gp_Vec2d

        Description
        -----------
        For the point of parameter u of this curve, computes the vector corresponding to the nth derivative. exceptions stdfail_undefinedderivative if: - the continuity of the curve is not 'cn', or - the derivative vector cannot be computed easily; this is the case with specific types of curve (for example, a rational bspline curve where n is greater than 3). standard_rangeerror if n is less than 1.

        """
        return _Geom2d.Geom2d_Curve_DN(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Curve_DumpJsonToString(self, depth)

    def FirstParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value of the first parameter. warnings: it can be realfirst or reallast from package standard if the curve is infinite.

        """
        return _Geom2d.Geom2d_Curve_FirstParameter(self, *args)

    def IsCN(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        bool

        Description
        -----------
        Returns true if the degree of continuity of this curve is at least n. exceptions standard_rangeerror if n is less than 0.

        """
        return _Geom2d.Geom2d_Curve_IsCN(self, *args)

    def IsClosed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the curve is closed. examples: some curves such as circle are always closed, others such as line are never closed (by definition). some curves such as offsetcurve can be closed or not. these curves are considered as closed if the distance between the first point and the last point of the curve is lower or equal to the resolution from package gp which is a fixed criterion independent of the application.

        """
        return _Geom2d.Geom2d_Curve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the parameter of the curve is periodic. it is possible only if the curve is closed and if the following relation is satisfied: for each parametric value u the distance between the point p(u) and the point p (u + t) is lower or equal to resolution from package gp, t is the period and must be a constant. there are three possibilities: . the curve is never periodic by definition (segmentline) . the curve is always periodic by definition (circle) . the curve can be defined as periodic (bspline). in this case a function setperiodic allows you to give the shape of the curve. the general rule for this case is: if a curve can be periodic or not the default periodicity set is non periodic and you have to turn (explicitly) the curve into a periodic curve if you want the curve to be periodic.

        """
        return _Geom2d.Geom2d_Curve_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Value of the last parameter. warnings: it can be realfirst or reallast from package standard if the curve is infinite.

        """
        return _Geom2d.Geom2d_Curve_LastParameter(self, *args)

    def ParametricTransformation(self, *args):
        r"""

        Parameters
        ----------
        T: gp_Trsf2d

        Return
        -------
        float

        Description
        -----------
        Returns the coefficient required to compute the parametric transformation of this curve when transformation t is applied. this coefficient is the ratio between the parameter of a point on this curve and the parameter of the transformed point on the new curve transformed by t. note: this function generally returns 1. but it can be redefined (for example, on a line).

        """
        return _Geom2d.Geom2d_Curve_ParametricTransformation(self, *args)

    def Period(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the period of this curve. raises if the curve is not periodic.

        """
        return _Geom2d.Geom2d_Curve_Period(self, *args)

    def Reverse(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Changes the direction of parametrization of <self>. the 'firstparameter' and the 'lastparameter' are not changed but the orientation of the curve is modified. if the curve is bounded the startpoint of the initial curve becomes the endpoint of the reversed curve and the endpoint of the initial curve becomes the startpoint of the reversed curve.

        """
        return _Geom2d.Geom2d_Curve_Reverse(self, *args)

    def Reversed(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Creates a reversed duplicate changes the orientation of this curve. the first and last parameters are not changed, but the parametric direction of the curve is reversed. if the curve is bounded: - the start point of the initial curve becomes the end point of the reversed curve, and - the end point of the initial curve becomes the start point of the reversed curve. - reversed creates a new curve.

        """
        return _Geom2d.Geom2d_Curve_Reversed(self, *args)

    def ReversedParameter(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        float

        Description
        -----------
        Computes the parameter on the reversed curve for the point of parameter u on this curve. note: the point of parameter u on this curve is identical to the point of parameter reversedparameter(u) on the reversed curve.

        """
        return _Geom2d.Geom2d_Curve_ReversedParameter(self, *args)

    def TransformedParameter(self, *args):
        r"""

        Parameters
        ----------
        U: float
        T: gp_Trsf2d

        Return
        -------
        float

        Description
        -----------
        Computes the parameter on the curve transformed by t for the point of parameter u on this curve. note: this function generally returns u but it can be redefined (for example, on a line).

        """
        return _Geom2d.Geom2d_Curve_TransformedParameter(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Computes the point of parameter u on <self>. if the curve is periodic then the returned point is p(u) with u = ustart + (u - uend) where ustart and uend are the parametric bounds of the curve. //! it is implemented with d0. //! raised only for the 'offsetcurve' if it is not possible to compute the current point. for example when the first derivative on the basis curve and the offset direction are parallel.

        """
        return _Geom2d.Geom2d_Curve_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Curve

# Register Geom2d_Curve in _Geom2d:
_Geom2d.Geom2d_Curve_swigregister(Geom2d_Curve)
class Geom2d_Point(Geom2d_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Coord(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        X: float
        Y: float

        Description
        -----------
        Returns the coordinates of <self>.

        """
        return _Geom2d.Geom2d_Point_Coord(self, *args)

    def Distance(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Point

        Return
        -------
        float

        Description
        -----------
        Computes the distance between <self> and <other>.

        """
        return _Geom2d.Geom2d_Point_Distance(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Point_DumpJsonToString(self, depth)

    def Pnt2d(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns a non persistent copy of <self>.

        """
        return _Geom2d.Geom2d_Point_Pnt2d(self, *args)

    def SquareDistance(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Point

        Return
        -------
        float

        Description
        -----------
        Computes the square distance between <self> and <other>.

        """
        return _Geom2d.Geom2d_Point_SquareDistance(self, *args)

    def X(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the x coordinate of <self>.

        """
        return _Geom2d.Geom2d_Point_X(self, *args)

    def Y(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the y coordinate of <self>.

        """
        return _Geom2d.Geom2d_Point_Y(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Point_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Point

# Register Geom2d_Point in _Geom2d:
_Geom2d.Geom2d_Point_swigregister(Geom2d_Point)
class Geom2d_Vector(Geom2d_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Angle(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        float

        Description
        -----------
        Computes the angular value, in radians, between this vector and vector other. the result is a value between -pi and pi. the orientation is from this vector to vector other. raises vectorwithnullmagnitude if one of the two vectors is a vector with null magnitude because the angular value is indefinite.

        """
        return _Geom2d.Geom2d_Vector_Angle(self, *args)

    def Coord(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        X: float
        Y: float

        Description
        -----------
        Returns the coordinates of <self>.

        """
        return _Geom2d.Geom2d_Vector_Coord(self, *args)

    def Crossed(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        float

        Description
        -----------
        Cross product of <self> with the vector <other>.

        """
        return _Geom2d.Geom2d_Vector_Crossed(self, *args)

    def Dot(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        float

        Description
        -----------
        Returns the scalar product of 2 vectors.

        """
        return _Geom2d.Geom2d_Vector_Dot(self, *args)

    def Magnitude(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the magnitude of <self>.

        """
        return _Geom2d.Geom2d_Vector_Magnitude(self, *args)

    def Reverse(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reverses the vector <self>.

        """
        return _Geom2d.Geom2d_Vector_Reverse(self, *args)

    def Reversed(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Vector>

        Description
        -----------
        Returns a copy of <self> reversed.

        """
        return _Geom2d.Geom2d_Vector_Reversed(self, *args)

    def SquareMagnitude(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the square magnitude of <self>.

        """
        return _Geom2d.Geom2d_Vector_SquareMagnitude(self, *args)

    def Vec2d(self, *args):
        r"""
        Return
        -------
        gp_Vec2d

        Description
        -----------
        Returns a non persistent copy of <self>.

        """
        return _Geom2d.Geom2d_Vector_Vec2d(self, *args)

    def X(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the x coordinate of <self>.

        """
        return _Geom2d.Geom2d_Vector_X(self, *args)

    def Y(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the y coordinate of <self>.

        """
        return _Geom2d.Geom2d_Vector_Y(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Vector_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Vector

# Register Geom2d_Vector in _Geom2d:
_Geom2d.Geom2d_Vector_swigregister(Geom2d_Vector)
class Geom2d_BoundedCurve(Geom2d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_BoundedCurve_DumpJsonToString(self, depth)

    def EndPoint(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the end point of the curve. the end point is the value of the curve for the 'lastparameter' of the curve.

        """
        return _Geom2d.Geom2d_BoundedCurve_EndPoint(self, *args)

    def StartPoint(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the start point of the curve. the start point is the value of the curve for the 'firstparameter' of the curve.

        """
        return _Geom2d.Geom2d_BoundedCurve_StartPoint(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_BoundedCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_BoundedCurve

# Register Geom2d_BoundedCurve in _Geom2d:
_Geom2d.Geom2d_BoundedCurve_swigregister(Geom2d_BoundedCurve)
class Geom2d_CartesianPoint(Geom2d_Point):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Returns a persistent copy of p.

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _Geom2d.Geom2d_CartesianPoint_swiginit(self, _Geom2d.new_Geom2d_CartesianPoint(*args))

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_CartesianPoint_DumpJsonToString(self, depth)

    def SetCoord(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        None

        Description
        -----------
        Set <self> to x, y coordinates.

        """
        return _Geom2d.Geom2d_CartesianPoint_SetCoord(self, *args)

    def SetPnt2d(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Set <self> to p.x(), p.y() coordinates.

        """
        return _Geom2d.Geom2d_CartesianPoint_SetPnt2d(self, *args)

    def SetX(self, *args):
        r"""

        Parameters
        ----------
        X: float

        Return
        -------
        None

        Description
        -----------
        Changes the x coordinate of me.

        """
        return _Geom2d.Geom2d_CartesianPoint_SetX(self, *args)

    def SetY(self, *args):
        r"""

        Parameters
        ----------
        Y: float

        Return
        -------
        None

        Description
        -----------
        Changes the y coordinate of me.

        """
        return _Geom2d.Geom2d_CartesianPoint_SetY(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_CartesianPoint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_CartesianPoint

# Register Geom2d_CartesianPoint in _Geom2d:
_Geom2d.Geom2d_CartesianPoint_swigregister(Geom2d_CartesianPoint)
class Geom2d_Conic(Geom2d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Conic_DumpJsonToString(self, depth)

    def Eccentricity(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the eccentricity value of the conic e. e = 0 for a circle 0 < e < 1 for an ellipse (e = 0 if majorradius = minorradius) e > 1 for a hyperbola e = 1 for a parabola.

        """
        return _Geom2d.Geom2d_Conic_Eccentricity(self, *args)

    def Location(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the location point of the conic. for the circle, the ellipse and the hyperbola it is the center of the conic. for the parabola it is the vertex of the parabola.

        """
        return _Geom2d.Geom2d_Conic_Location(self, *args)

    def Position(self, *args):
        r"""
        Return
        -------
        gp_Ax22d

        Description
        -----------
        Returns the local coordinates system of the conic.

        """
        return _Geom2d.Geom2d_Conic_Position(self, *args)

    def SetAxis(self, *args):
        r"""

        Parameters
        ----------
        theA: gp_Ax22d

        Return
        -------
        None

        Description
        -----------
        Modifies this conic, redefining its local coordinate system partially, by assigning thea as its axis.

        """
        return _Geom2d.Geom2d_Conic_SetAxis(self, *args)

    def SetLocation(self, *args):
        r"""

        Parameters
        ----------
        theP: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Modifies this conic, redefining its local coordinate system partially, by assigning thep as its origin.

        """
        return _Geom2d.Geom2d_Conic_SetLocation(self, *args)

    def SetXAxis(self, *args):
        r"""

        Parameters
        ----------
        theAX: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Assigns the origin and unit vector of axis thea to the origin of the local coordinate system of this conic and x direction. the other unit vector of the local coordinate system of this conic is recomputed normal to thea, without changing the orientation of the local coordinate system (right-handed or left-handed).

        """
        return _Geom2d.Geom2d_Conic_SetXAxis(self, *args)

    def SetYAxis(self, *args):
        r"""

        Parameters
        ----------
        theAY: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Assigns the origin and unit vector of axis thea to the origin of the local coordinate system of this conic and y direction. the other unit vector of the local coordinate system of this conic is recomputed normal to thea, without changing the orientation of the local coordinate system (right-handed or left-handed).

        """
        return _Geom2d.Geom2d_Conic_SetYAxis(self, *args)

    def XAxis(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        Returns the 'xaxis' of the conic. this axis defines the origin of parametrization of the conic. this axis and the 'yaxis' define the local coordinate system of the conic. -c++: return const&.

        """
        return _Geom2d.Geom2d_Conic_XAxis(self, *args)

    def YAxis(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        Returns the 'yaxis' of the conic. the 'yaxis' is perpendicular to the 'xaxis'.

        """
        return _Geom2d.Geom2d_Conic_YAxis(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Conic_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Conic

# Register Geom2d_Conic in _Geom2d:
_Geom2d.Geom2d_Conic_swigregister(Geom2d_Conic)
class Geom2d_Direction(Geom2d_Vector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        None

        Description
        -----------
        Creates a unit vector with it 2 cartesian coordinates. //! raised if sqrt( x*x + y*y) <= resolution from gp.

        Parameters
        ----------
        V: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Creates a persistent copy of <self>.

        """
        _Geom2d.Geom2d_Direction_swiginit(self, _Geom2d.new_Geom2d_Direction(*args))

    def Dir2d(self, *args):
        r"""
        Return
        -------
        gp_Dir2d

        Description
        -----------
        Converts this unit vector into a gp_dir2d unit vector.

        """
        return _Geom2d.Geom2d_Direction_Dir2d(self, *args)

    def SetCoord(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        None

        Description
        -----------
        Assigns the coordinates x and y to this unit vector, then normalizes it. exceptions standard_constructionerror if sqrt(x*x + y*y) is less than or equal to gp::resolution().

        """
        return _Geom2d.Geom2d_Direction_SetCoord(self, *args)

    def SetDir2d(self, *args):
        r"""

        Parameters
        ----------
        V: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Converts the gp_dir2d unit vector v into this unit vector.

        """
        return _Geom2d.Geom2d_Direction_SetDir2d(self, *args)

    def SetX(self, *args):
        r"""

        Parameters
        ----------
        X: float

        Return
        -------
        None

        Description
        -----------
        Assigns a value to the x coordinate of this unit vector, then normalizes it. exceptions standard_constructionerror if the value assigned causes the magnitude of the vector to become less than or equal to gp::resolution().

        """
        return _Geom2d.Geom2d_Direction_SetX(self, *args)

    def SetY(self, *args):
        r"""

        Parameters
        ----------
        Y: float

        Return
        -------
        None

        Description
        -----------
        Assigns a value to the y coordinate of this unit vector, then normalizes it. exceptions standard_constructionerror if the value assigned causes the magnitude of the vector to become less than or equal to gp::resolution().

        """
        return _Geom2d.Geom2d_Direction_SetY(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Direction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Direction

# Register Geom2d_Direction in _Geom2d:
_Geom2d.Geom2d_Direction_swigregister(Geom2d_Direction)
class Geom2d_Line(Geom2d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        A: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Creates a line located in 2d space with the axis placement a. the location of a is the origin of the line.

        Parameters
        ----------
        L: gp_Lin2d

        Return
        -------
        None

        Description
        -----------
        Creates a line by conversion of the gp_lin2d line l.

        Parameters
        ----------
        P: gp_Pnt2d
        V: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Constructs a line passing through point p and parallel to vector v (p and v are, respectively, the origin and the unit vector of the positioning axis of the line).

        """
        _Geom2d.Geom2d_Line_swiginit(self, _Geom2d.new_Geom2d_Line(*args))

    def Direction(self, *args):
        r"""
        Return
        -------
        gp_Dir2d

        Description
        -----------
        Changes the direction of the line.

        """
        return _Geom2d.Geom2d_Line_Direction(self, *args)

    def Distance(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        float

        Description
        -----------
        Computes the distance between <self> and the point p.

        """
        return _Geom2d.Geom2d_Line_Distance(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Line_DumpJsonToString(self, depth)

    def Lin2d(self, *args):
        r"""
        Return
        -------
        gp_Lin2d

        Description
        -----------
        Returns non persistent line from gp with the same geometric properties as <self>.

        """
        return _Geom2d.Geom2d_Line_Lin2d(self, *args)

    def Location(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Changes the 'location' point (origin) of the line.

        """
        return _Geom2d.Geom2d_Line_Location(self, *args)

    def Position(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Line_Position(self, *args)

    def SetDirection(self, *args):
        r"""

        Parameters
        ----------
        V: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Changes the direction of the line.

        """
        return _Geom2d.Geom2d_Line_SetDirection(self, *args)

    def SetLin2d(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin2d

        Return
        -------
        None

        Description
        -----------
        Set <self> so that <self> has the same geometric properties as l.

        """
        return _Geom2d.Geom2d_Line_SetLin2d(self, *args)

    def SetLocation(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Changes the 'location' point (origin) of the line.

        """
        return _Geom2d.Geom2d_Line_SetLocation(self, *args)

    def SetPosition(self, *args):
        r"""

        Parameters
        ----------
        A: gp_Ax2d

        Return
        -------
        None

        Description
        -----------
        Changes the 'location' and a the 'direction' of <self>.

        """
        return _Geom2d.Geom2d_Line_SetPosition(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Line_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Line

# Register Geom2d_Line in _Geom2d:
_Geom2d.Geom2d_Line_swigregister(Geom2d_Line)
class Geom2d_OffsetCurve(Geom2d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        C: Geom2d_Curve
        Offset: float
        isNotCheckC0: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Constructs a curve offset from the basis curve c, where offset is the distance between the offset curve and the basis curve at any point. a point on the offset curve is built by measuring the offset value along a normal vector at a point on c. this normal vector is obtained by rotating the vector tangential to c at 90 degrees in the anti-trigonometric sense. the side of c on which the offset value is measured is indicated by this normal vector if offset is positive, or in the inverse sense if offset is negative. if isnotcheckc0 = true checking if basis curve has c0-continuity is not made. warnings: in this package the entities are not shared. the offsetcurve is built with a copy of the curve c. so when c is modified the offsetcurve is not modified warning! if isnotcheckc0 = false, constructionerror raised if the basis curve c is not at least c1. no check is done to know if ||v^z|| != 0.0 at any point.

        """
        _Geom2d.Geom2d_OffsetCurve_swiginit(self, _Geom2d.new_Geom2d_OffsetCurve(*args))

    def BasisCurve(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Returns the basis curve of this offset curve. the basis curve can be an offset curve.

        """
        return _Geom2d.Geom2d_OffsetCurve_BasisCurve(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_OffsetCurve_DumpJsonToString(self, depth)

    def GetBasisCurveContinuity(self, *args):
        r"""
        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        Returns continuity of the basis curve.

        """
        return _Geom2d.Geom2d_OffsetCurve_GetBasisCurveContinuity(self, *args)

    def Offset(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the offset value of this offset curve.

        """
        return _Geom2d.Geom2d_OffsetCurve_Offset(self, *args)

    def SetBasisCurve(self, *args):
        r"""

        Parameters
        ----------
        C: Geom2d_Curve
        isNotCheckC0: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Changes this offset curve by assigning c as the basis curve from which it is built. if isnotcheckc0 = true checking if basis curve has c0-continuity is not made. exceptions if isnotcheckc0 = false, standard_constructionerror if the curve c is not at least 'c1' continuous.

        """
        return _Geom2d.Geom2d_OffsetCurve_SetBasisCurve(self, *args)

    def SetOffsetValue(self, *args):
        r"""

        Parameters
        ----------
        D: float

        Return
        -------
        None

        Description
        -----------
        Changes this offset curve by assigning d as the offset value.

        """
        return _Geom2d.Geom2d_OffsetCurve_SetOffsetValue(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_OffsetCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_OffsetCurve

# Register Geom2d_OffsetCurve in _Geom2d:
_Geom2d.Geom2d_OffsetCurve_swigregister(Geom2d_OffsetCurve)
class Geom2d_VectorWithMagnitude(Geom2d_Vector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        V: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Creates a persistent copy of v.

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        None

        Description
        -----------
        Creates a vector with two cartesian coordinates.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Creates a vector from the point p1 to the point p2. the magnitude of the vector is the distance between p1 and p2.

        """
        _Geom2d.Geom2d_VectorWithMagnitude_swiginit(self, _Geom2d.new_Geom2d_VectorWithMagnitude(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        None

        Description
        -----------
        Adds the vector other to <self>.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Add(self, *args)

    def Added(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Added(self, *args)

    def Divide(self, *args):
        r"""

        Parameters
        ----------
        Scalar: float

        Return
        -------
        None

        Description
        -----------
        Divides <self> by a scalar.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Divide(self, *args)

    def Divided(self, *args):
        r"""

        Parameters
        ----------
        Scalar: float

        Return
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        Description
        -----------
        Divides <self> by a scalar. a new vector is returned.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Divided(self, *args)

    def Multiplied(self, *args):
        r"""

        Parameters
        ----------
        Scalar: float

        Return
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        Description
        -----------
        Computes the product of the vector <self> by a scalar. a new vector is returned. //! -c++: alias operator * collision with same operator defined for the class vector!.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Multiplied(self, *args)

    def Multiply(self, *args):
        r"""

        Parameters
        ----------
        Scalar: float

        Return
        -------
        None

        Description
        -----------
        Computes the product of the vector <self> by a scalar.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Multiply(self, *args)

    def Normalize(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Normalizes <self>. //! raised if the magnitude of the vector is lower or equal to resolution from package gp.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Normalize(self, *args)

    def Normalized(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        Description
        -----------
        Returns a copy of <self> normalized. //! raised if the magnitude of the vector is lower or equal to resolution from package gp.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Normalized(self, *args)

    def SetCoord(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        None

        Description
        -----------
        Set <self> to x, y coordinates.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SetCoord(self, *args)

    def SetVec2d(self, *args):
        r"""

        Parameters
        ----------
        V: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SetVec2d(self, *args)

    def SetX(self, *args):
        r"""

        Parameters
        ----------
        X: float

        Return
        -------
        None

        Description
        -----------
        Changes the x coordinate of <self>.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SetX(self, *args)

    def SetY(self, *args):
        r"""

        Parameters
        ----------
        Y: float

        Return
        -------
        None

        Description
        -----------
        Changes the y coordinate of <self>.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SetY(self, *args)

    def Subtract(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        None

        Description
        -----------
        Subtracts the vector other to <self>.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Subtract(self, *args)

    def Subtracted(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Subtracted(self, *args)

    def __imul_wrapper__(self, other):
        r"""Json string serializer."""
        return _Geom2d.Geom2d_VectorWithMagnitude___imul_wrapper__(self, other)

    def __imul__(self, right):
        self.__imul_wrapper__(right)
        return self


    def __add__(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude___add__(self, *args)

    def __iadd_wrapper__(self, other):
        r"""Json string serializer."""
        return _Geom2d.Geom2d_VectorWithMagnitude___iadd_wrapper__(self, other)

    def __iadd__(self, right):
        self.__iadd_wrapper__(right)
        return self


    def __sub__(self, *args):
        r"""

        Parameters
        ----------
        Other: Geom2d_Vector

        Return
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_VectorWithMagnitude___sub__(self, *args)

    def __isub_wrapper__(self, other):
        r"""Json string serializer."""
        return _Geom2d.Geom2d_VectorWithMagnitude___isub_wrapper__(self, other)

    def __isub__(self, right):
        self.__isub_wrapper__(right)
        return self


    def __truediv__(self, *args):
        return _Geom2d.Geom2d_VectorWithMagnitude___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv_wrapper__(self, other):
        r"""Json string serializer."""
        return _Geom2d.Geom2d_VectorWithMagnitude___itruediv_wrapper__(self, other)

    def __itruediv__(self, right):
        self.__itruediv_wrapper__(right)
        return self



    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_VectorWithMagnitude_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_VectorWithMagnitude

# Register Geom2d_VectorWithMagnitude in _Geom2d:
_Geom2d.Geom2d_VectorWithMagnitude_swigregister(Geom2d_VectorWithMagnitude)
class Geom2d_BSplineCurve(Geom2d_BoundedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Poles: TColgp_Array1OfPnt2d
        Knots: TColStd_Array1OfReal
        Multiplicities: TColStd_Array1OfInteger
        Degree: int
        Periodic: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Creates a non-rational b_spline curve on the basis <knots, multiplicities> of degree <degree>. the following conditions must be verified. 0 < degree <= maxdegree. //! knots.length() == mults.length() >= 2 //! knots(i) < knots(i+1) (knots are increasing) //! 1 <= mults(i) <= degree //! on a non periodic curve the first and last multiplicities may be degree+1 (this is even recommended if you want the curve to start and finish on the first and last pole). //! on a periodic curve the first and the last multicities must be the same. //! on non-periodic curves //! poles.length() == sum(mults(i)) - degree - 1 >= 2 //! on periodic curves //! poles.length() == sum(mults(i)) except the first or last.

        Parameters
        ----------
        Poles: TColgp_Array1OfPnt2d
        Weights: TColStd_Array1OfReal
        Knots: TColStd_Array1OfReal
        Multiplicities: TColStd_Array1OfInteger
        Degree: int
        Periodic: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Creates a rational b_spline curve on the basis <knots, multiplicities> of degree <degree>. the following conditions must be verified. 0 < degree <= maxdegree. //! knots.length() == mults.length() >= 2 //! knots(i) < knots(i+1) (knots are increasing) //! 1 <= mults(i) <= degree //! on a non periodic curve the first and last multiplicities may be degree+1 (this is even recommended if you want the curve to start and finish on the first and last pole). //! on a periodic curve the first and the last multicities must be the same. //! on non-periodic curves //! poles.length() == sum(mults(i)) - degree - 1 >= 2 //! on periodic curves //! poles.length() == sum(mults(i)) except the first or last.

        """
        _Geom2d.Geom2d_BSplineCurve_swiginit(self, _Geom2d.new_Geom2d_BSplineCurve(*args))

    def Degree(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the degree of this bspline curve. in this class the degree of the basis normalized b-spline functions cannot be greater than 'maxdegree' computation of value and derivatives.

        """
        return _Geom2d.Geom2d_BSplineCurve_Degree(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_BSplineCurve_DumpJsonToString(self, depth)

    def FirstUKnotIndex(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        For a b-spline curve the first parameter (which gives the start point of the curve) is a knot value but if the multiplicity of the first knot index is lower than degree + 1 it is not the first knot of the curve. this method computes the index of the knot corresponding to the first parameter.

        """
        return _Geom2d.Geom2d_BSplineCurve_FirstUKnotIndex(self, *args)

    def IncreaseDegree(self, *args):
        r"""

        Parameters
        ----------
        Degree: int

        Return
        -------
        None

        Description
        -----------
        Increases the degree of this bspline curve to degree. as a result, the poles, weights and multiplicities tables are modified; the knots table is not changed. nothing is done if degree is less than or equal to the current degree. exceptions standard_constructionerror if degree is greater than geom2d_bsplinecurve::maxdegree().

        """
        return _Geom2d.Geom2d_BSplineCurve_IncreaseDegree(self, *args)

    def IncreaseMultiplicity(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        M: int

        Return
        -------
        None

        Description
        -----------
        Increases the multiplicity of the knot <index> to <m>. //! if <m> is lower or equal to the current multiplicity nothing is done. if <m> is higher than the degree the degree is used. if <index> is not in [firstuknotindex, lastuknotindex].

        Parameters
        ----------
        I1: int
        I2: int
        M: int

        Return
        -------
        None

        Description
        -----------
        Increases the multiplicities of the knots in [i1,i2] to <m>. //! for each knot if <m> is lower or equal to the current multiplicity nothing is done. if <m> is higher than the degree the degree is used. as a result, the poles and weights tables of this curve are modified. warning it is forbidden to modify the multiplicity of the first or last knot of a non-periodic curve. be careful as geom2d does not protect against this. exceptions standard_outofrange if either index, i1 or i2 is outside the bounds of the knots table.

        """
        return _Geom2d.Geom2d_BSplineCurve_IncreaseMultiplicity(self, *args)

    def IncrementMultiplicity(self, *args):
        r"""

        Parameters
        ----------
        I1: int
        I2: int
        M: int

        Return
        -------
        None

        Description
        -----------
        Increases by m the multiplicity of the knots of indexes i1 to i2 in the knots table of this bspline curve. for each knot, the resulting multiplicity is limited to the degree of this curve. if m is negative, nothing is done. as a result, the poles and weights tables of this bspline curve are modified. warning it is forbidden to modify the multiplicity of the first or last knot of a non-periodic curve. be careful as geom2d does not protect against this. exceptions standard_outofrange if i1 or i2 is outside the bounds of the knots table.

        """
        return _Geom2d.Geom2d_BSplineCurve_IncrementMultiplicity(self, *args)

    def InsertKnot(self, *args):
        r"""

        Parameters
        ----------
        U: float
        M: int (optional, default to 1)
        ParametricTolerance: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Inserts a knot value in the sequence of knots. if <u> is an existing knot the multiplicity is increased by <m>. //! if u is not on the parameter range nothing is done. //! if the multiplicity is negative or null nothing is done. the new multiplicity is limited to the degree. //! the tolerance criterion for knots equality is the max of epsilon(u) and parametrictolerance. warning - if u is less than the first parameter or greater than the last parameter of this bspline curve, nothing is done. - if m is negative or null, nothing is done. - the multiplicity of a knot is limited to the degree of this bspline curve.

        """
        return _Geom2d.Geom2d_BSplineCurve_InsertKnot(self, *args)

    def InsertKnots(self, *args):
        r"""

        Parameters
        ----------
        Knots: TColStd_Array1OfReal
        Mults: TColStd_Array1OfInteger
        ParametricTolerance: float (optional, default to 0.0)
        Add: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Inserts the values of the array knots, with the respective multiplicities given by the array mults, into the knots table of this bspline curve. if a value of the array knots is an existing knot, its multiplicity is: - increased by m, if add is true, or - increased to m, if add is false (default value). the tolerance criterion used for knot equality is the larger of the values parametrictolerance (defaulted to 0.) and standard_real::epsilon(u), where u is the current knot value. warning - for a value of the array knots which is less than the first parameter or greater than the last parameter of this bspline curve, nothing is done. - for a value of the array mults which is negative or null, nothing is done. - the multiplicity of a knot is limited to the degree of this bspline curve.

        """
        return _Geom2d.Geom2d_BSplineCurve_InsertKnots(self, *args)

    def InsertPoleAfter(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        The new pole is inserted after the pole of range index. if the curve was non rational it can become rational. //! raised if the b-spline is nonuniform or piecewisebezier or if weight <= 0.0 raised if index is not in the range [1, number of poles].

        """
        return _Geom2d.Geom2d_BSplineCurve_InsertPoleAfter(self, *args)

    def InsertPoleBefore(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        The new pole is inserted before the pole of range index. if the curve was non rational it can become rational. //! raised if the b-spline is nonuniform or piecewisebezier or if weight <= 0.0 raised if index is not in the range [1, number of poles].

        """
        return _Geom2d.Geom2d_BSplineCurve_InsertPoleBefore(self, *args)

    def IsG1(self, *args):
        r"""

        Parameters
        ----------
        theTf: float
        theTl: float
        theAngTol: float

        Return
        -------
        bool

        Description
        -----------
        Check if curve has at least g1 continuity in interval [thetf, thetl] returns true if iscn(1) or angle between 'left' and 'right' first derivatives at knots with c0 continuity is less then theangtol only knots in interval [thetf, thetl] is checked.

        """
        return _Geom2d.Geom2d_BSplineCurve_IsG1(self, *args)

    def IsRational(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the weights are not identical. the tolerance criterion is epsilon of the class real.

        """
        return _Geom2d.Geom2d_BSplineCurve_IsRational(self, *args)

    def Knot(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        float

        Description
        -----------
        Returns the knot of range index. when there is a knot with a multiplicity greater than 1 the knot is not repeated. the method multiplicity can be used to get the multiplicity of the knot. raised if index < 1 or index > nbknots.

        """
        return _Geom2d.Geom2d_BSplineCurve_Knot(self, *args)

    def KnotDistribution(self, *args):
        r"""
        Return
        -------
        GeomAbs_BSplKnotDistribution

        Description
        -----------
        Returns nonuniform or uniform or quasiuniform or piecewisebezier. if all the knots differ by a positive constant from the preceding knot the bspline curve can be: - uniform if all the knots are of multiplicity 1, - quasiuniform if all the knots are of multiplicity 1 except for the first and last knot which are of multiplicity degree + 1, - piecewisebezier if the first and last knots have multiplicity degree + 1 and if interior knots have multiplicity degree a piecewise bezier with only two knots is a beziercurve. else the curve is non uniform. the tolerance criterion is epsilon from class real.

        """
        return _Geom2d.Geom2d_BSplineCurve_KnotDistribution(self, *args)

    def KnotSequence(self, *args):
        r"""

        Parameters
        ----------
        K: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Returns the knots sequence. in this sequence the knots with a multiplicity greater than 1 are repeated. example: k = {k1, k1, k1, k2, k3, k3, k4, k4, k4} //! raised if k.lower() is less than number of first knot in knot sequence with repetitions or k.upper() is more than number of last knot in knot sequence with repetitions.
        Return
        -------
        TColStd_Array1OfReal

        Description
        -----------
        Returns the knots sequence. in this sequence the knots with a multiplicity greater than 1 are repeated. example: k = {k1, k1, k1, k2, k3, k3, k4, k4, k4}.

        """
        return _Geom2d.Geom2d_BSplineCurve_KnotSequence(self, *args)

    def Knots(self, *args):
        r"""

        Parameters
        ----------
        K: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Returns the knot values of the b-spline curve; //! raised k.lower() is less than number of first knot or k.upper() is more than number of last knot.
        Return
        -------
        TColStd_Array1OfReal

        Description
        -----------
        Returns the knot values of the b-spline curve;.

        """
        return _Geom2d.Geom2d_BSplineCurve_Knots(self, *args)

    def LastUKnotIndex(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        For a bspline curve the last parameter (which gives the end point of the curve) is a knot value but if the multiplicity of the last knot index is lower than degree + 1 it is not the last knot of the curve. this method computes the index of the knot corresponding to the last parameter.

        """
        return _Geom2d.Geom2d_BSplineCurve_LastUKnotIndex(self, *args)

    def LocalD0(self, *args):
        r"""

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Raised if fromk1 = tok2.

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalD0(self, *args)

    def LocalD1(self, *args):
        r"""

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        P: gp_Pnt2d
        V1: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Raised if the local continuity of the curve is not c1 between the knot k1 and the knot k2. raised if fromk1 = tok2.

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalD1(self, *args)

    def LocalD2(self, *args):
        r"""

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Raised if the local continuity of the curve is not c2 between the knot k1 and the knot k2. raised if fromk1 = tok2.

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalD2(self, *args)

    def LocalD3(self, *args):
        r"""

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Raised if the local continuity of the curve is not c3 between the knot k1 and the knot k2. raised if fromk1 = tok2.

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalD3(self, *args)

    def LocalDN(self, *args):
        r"""

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        N: int

        Return
        -------
        gp_Vec2d

        Description
        -----------
        Raised if the local continuity of the curve is not cn between the knot k1 and the knot k2. raised if fromk1 = tok2. raised if n < 1.

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalDN(self, *args)

    def LocalValue(self, *args):
        r"""

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Raised if fromk1 = tok2.

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalValue(self, *args)

    def LocateU(self, *args):
        r"""

        Parameters
        ----------
        U: float
        ParametricTolerance: float
        WithKnotRepetition: bool (optional, default to Standard_False)

        Return
        -------
        I1: int
        I2: int

        Description
        -----------
        Locates the parametric value u in the sequence of knots. if 'withknotrepetition' is true we consider the knot's representation with repetition of multiple knot value, otherwise we consider the knot's representation with no repetition of multiple knot values. knots (i1) <= u <= knots (i2) . if i1 = i2 u is a knot value (the tolerance criterion parametrictolerance is used). . if i1 < 1 => u < knots (1) - abs(parametrictolerance) . if i2 > nbknots => u > knots (nbknots) + abs(parametrictolerance).

        """
        return _Geom2d.Geom2d_BSplineCurve_LocateU(self, *args)

    @staticmethod
    def MaxDegree(*args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the value of the maximum degree of the normalized b-spline basis functions in this package.

        """
        return _Geom2d.Geom2d_BSplineCurve_MaxDegree(*args)

    def MovePoint(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        Index1: int
        Index2: int

        Return
        -------
        FirstModifiedPole: int
        LastModifiedPole: int

        Description
        -----------
        Moves the point of parameter u of this bspline curve to p. index1 and index2 are the indexes in the table of poles of this bspline curve of the first and last poles designated to be moved. firstmodifiedpole and lastmodifiedpole are the indexes of the first and last poles, which are effectively modified. in the event of incompatibility between index1, index2 and the value u: - no change is made to this bspline curve, and - the firstmodifiedpole and lastmodifiedpole are returned null. exceptions standard_outofrange if: - index1 is greater than or equal to index2, or - index1 or index2 is less than 1 or greater than the number of poles of this bspline curve.

        """
        return _Geom2d.Geom2d_BSplineCurve_MovePoint(self, *args)

    def MovePointAndTangent(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        Tangent: gp_Vec2d
        Tolerance: float
        StartingCondition: int
        EndingCondition: int

        Return
        -------
        ErrorStatus: int

        Description
        -----------
        Move a point with parameter u to p. and makes it tangent at u be tangent. startingcondition = -1 means first can move endingcondition = -1 means last point can move startingcondition = 0 means the first point cannot move endingcondition = 0 means the last point cannot move startingcondition = 1 means the first point and tangent cannot move endingcondition = 1 means the last point and tangent cannot move and so forth errorstatus != 0 means that there are not enough degree of freedom with the constrain to deform the curve accordingly.

        """
        return _Geom2d.Geom2d_BSplineCurve_MovePointAndTangent(self, *args)

    def Multiplicities(self, *args):
        r"""

        Parameters
        ----------
        M: TColStd_Array1OfInteger

        Return
        -------
        None

        Description
        -----------
        Returns the multiplicity of the knots of the curve. //! raised if the length of m is not equal to nbknots.
        Return
        -------
        TColStd_Array1OfInteger

        Description
        -----------
        Returns the multiplicity of the knots of the curve.

        """
        return _Geom2d.Geom2d_BSplineCurve_Multiplicities(self, *args)

    def Multiplicity(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        int

        Description
        -----------
        Returns the multiplicity of the knots of range index. raised if index < 1 or index > nbknots.

        """
        return _Geom2d.Geom2d_BSplineCurve_Multiplicity(self, *args)

    def NbKnots(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of knots. this method returns the number of knot without repetition of multiple knots.

        """
        return _Geom2d.Geom2d_BSplineCurve_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of poles.

        """
        return _Geom2d.Geom2d_BSplineCurve_NbPoles(self, *args)

    def PeriodicNormalization(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        U: float

        Description
        -----------
        Computes the parameter normalized within the 'first' period of this bspline curve, if it is periodic: the returned value is in the range param1 and param1 + period, where: - param1 is the 'first parameter', and - period the period of this bspline curve. note: if this curve is not periodic, u is not modified.

        """
        return _Geom2d.Geom2d_BSplineCurve_PeriodicNormalization(self, *args)

    def Pole(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the pole of range index. raised if index < 1 or index > nbpoles.

        """
        return _Geom2d.Geom2d_BSplineCurve_Pole(self, *args)

    def Poles(self, *args):
        r"""

        Parameters
        ----------
        P: TColgp_Array1OfPnt2d

        Return
        -------
        None

        Description
        -----------
        Returns the poles of the b-spline curve; //! raised if the length of p is not equal to the number of poles.
        Return
        -------
        TColgp_Array1OfPnt2d

        Description
        -----------
        Returns the poles of the b-spline curve;.

        """
        return _Geom2d.Geom2d_BSplineCurve_Poles(self, *args)

    def RemoveKnot(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        M: int
        Tolerance: float

        Return
        -------
        bool

        Description
        -----------
        Reduces the multiplicity of the knot of index index to m. if m is equal to 0, the knot is removed. with a modification of this type, the array of poles is also modified. two different algorithms are systematically used to compute the new poles of the curve. if, for each pole, the distance between the pole calculated using the first algorithm and the same pole calculated using the second algorithm, is less than tolerance, this ensures that the curve is not modified by more than tolerance. under these conditions, true is returned; otherwise, false is returned. a low tolerance is used to prevent modification of the curve. a high tolerance is used to 'smooth' the curve. exceptions standard_outofrange if index is outside the bounds of the knots table.

        """
        return _Geom2d.Geom2d_BSplineCurve_RemoveKnot(self, *args)

    def RemovePole(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        None

        Description
        -----------
        Removes the pole of range index if the curve was rational it can become non rational. //! raised if the b-spline is nonuniform or piecewisebezier. raised if the number of poles of the b-spline curve is lower or equal to 2 before removing. raised if index is not in the range [1, number of poles].

        """
        return _Geom2d.Geom2d_BSplineCurve_RemovePole(self, *args)

    def Resolution(self, *args):
        r"""

        Parameters
        ----------
        ToleranceUV: float

        Return
        -------
        UTolerance: float

        Description
        -----------
        Computes for this bspline curve the parametric tolerance utolerance for a given tolerance tolerance3d (relative to dimensions in the plane). if f(t) is the equation of this bspline curve, utolerance ensures that: | t1 - t0| < utolerance ===> |f(t1) - f(t0)| < toleranceuv.

        """
        return _Geom2d.Geom2d_BSplineCurve_Resolution(self, *args)

    def Segment(self, *args):
        r"""

        Parameters
        ----------
        U1: float
        U2: float
        theTolerance: float (optional, default to Precision::PConfusion())

        Return
        -------
        None

        Description
        -----------
        Modifies this bspline curve by segmenting it between u1 and u2. either of these values can be outside the bounds of the curve, but u2 must be greater than u1. all data structure tables of this bspline curve are modified, but the knots located between u1 and u2 are retained. the degree of the curve is not modified. //! parameter thetolerance defines the possible proximity of the segment boundaries and b-spline knots to treat them as equal. //! warnings: even if <self> is not closed it can become closed after the segmentation for example if u1 or u2 are out of the bounds of the curve <self> or if the curve makes loop. after the segmentation the length of a curve can be null. - the segmentation of a periodic curve over an interval corresponding to its period generates a non-periodic curve with equivalent geometry. exceptions standard_domainerror if u2 is less than u1. raises if u2 < u1. standard_domainerror if u2 - u1 exceeds the period for periodic curves. i.e. ((u2 - u1) - period) > precision::pconfusion().

        """
        return _Geom2d.Geom2d_BSplineCurve_Segment(self, *args)

    def SetKnot(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        K: float

        Return
        -------
        None

        Description
        -----------
        Modifies this bspline curve by assigning the value k to the knot of index index in the knots table. this is a relatively local modification because k must be such that: knots(index - 1) < k < knots(index + 1) exceptions standard_constructionerror if: - k is not such that: knots(index - 1) < k < knots(index + 1) - m is greater than the degree of this bspline curve or lower than the previous multiplicity of knot of index index in the knots table. standard_outofrange if index is outside the bounds of the knots table.

        Parameters
        ----------
        Index: int
        K: float
        M: int

        Return
        -------
        None

        Description
        -----------
        Modifies this bspline curve by assigning the value k to the knot of index index in the knots table. this is a relatively local modification because k must be such that: knots(index - 1) < k < knots(index + 1) the second syntax allows you also to increase the multiplicity of the knot to m (but it is not possible to decrease the multiplicity of the knot with this function). exceptions standard_constructionerror if: - k is not such that: knots(index - 1) < k < knots(index + 1) - m is greater than the degree of this bspline curve or lower than the previous multiplicity of knot of index index in the knots table. standard_outofrange if index is outside the bounds of the knots table.

        """
        return _Geom2d.Geom2d_BSplineCurve_SetKnot(self, *args)

    def SetKnots(self, *args):
        r"""

        Parameters
        ----------
        K: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Modifies this bspline curve by assigning the array k to its knots table. the multiplicity of the knots is not modified. exceptions standard_constructionerror if the values in the array k are not in ascending order. standard_outofrange if the bounds of the array k are not respectively 1 and the number of knots of this bspline curve.

        """
        return _Geom2d.Geom2d_BSplineCurve_SetKnots(self, *args)

    def SetNotPeriodic(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Changes this bspline curve into a non-periodic curve. if this curve is already non-periodic, it is not modified. note that the poles and knots tables are modified. warning if this curve is periodic, as the multiplicity of the first and last knots is not modified, and is not equal to degree + 1, where degree is the degree of this bspline curve, the start and end points of the curve are not its first and last poles.

        """
        return _Geom2d.Geom2d_BSplineCurve_SetNotPeriodic(self, *args)

    def SetOrigin(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        None

        Description
        -----------
        Assigns the knot of index index in the knots table as the origin of this periodic bspline curve. as a consequence, the knots and poles tables are modified. exceptions standard_nosuchobject if this curve is not periodic. standard_domainerror if index is outside the bounds of the knots table.

        """
        return _Geom2d.Geom2d_BSplineCurve_SetOrigin(self, *args)

    def SetPeriodic(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Changes this bspline curve into a periodic curve. to become periodic, the curve must first be closed. next, the knot sequence must be periodic. for this, firstuknotindex and lastuknotindex are used to compute i1 and i2, the indexes in the knots array of the knots corresponding to the first and last parameters of this bspline curve. the period is therefore knot(i2) - knot(i1). consequently, the knots and poles tables are modified. exceptions standard_constructionerror if this bspline curve is not closed.

        """
        return _Geom2d.Geom2d_BSplineCurve_SetPeriodic(self, *args)

    def SetPole(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Modifies this bspline curve by assigning p to the pole of index index in the poles table. exceptions standard_outofrange if index is outside the bounds of the poles table. standard_constructionerror if weight is negative or null.

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float

        Return
        -------
        None

        Description
        -----------
        Modifies this bspline curve by assigning p to the pole of index index in the poles table. the second syntax also allows you to modify the weight of the modified pole, which becomes weight. in this case, if this bspline curve is non-rational, it can become rational and vice versa. exceptions standard_outofrange if index is outside the bounds of the poles table. standard_constructionerror if weight is negative or null.

        """
        return _Geom2d.Geom2d_BSplineCurve_SetPole(self, *args)

    def SetWeight(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        Weight: float

        Return
        -------
        None

        Description
        -----------
        Assigns the weight weight to the pole of index index of the poles table. if the curve was non rational it can become rational. if the curve was rational it can become non rational. exceptions standard_outofrange if index is outside the bounds of the poles table. standard_constructionerror if weight is negative or null.

        """
        return _Geom2d.Geom2d_BSplineCurve_SetWeight(self, *args)

    def Weight(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        float

        Description
        -----------
        Returns the weight of the pole of range index . raised if index < 1 or index > nbpoles.

        """
        return _Geom2d.Geom2d_BSplineCurve_Weight(self, *args)

    def Weights(self, *args):
        r"""

        Parameters
        ----------
        W: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Returns the weights of the b-spline curve; //! raised if the length of w is not equal to nbpoles.
        Return
        -------
        TColStd_Array1OfReal *

        Description
        -----------
        Returns the weights of the b-spline curve;.

        """
        return _Geom2d.Geom2d_BSplineCurve_Weights(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_BSplineCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_BSplineCurve

# Register Geom2d_BSplineCurve in _Geom2d:
_Geom2d.Geom2d_BSplineCurve_swigregister(Geom2d_BSplineCurve)
class Geom2d_BezierCurve(Geom2d_BoundedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        CurvePoles: TColgp_Array1OfPnt2d

        Return
        -------
        None

        Description
        -----------
        Creates a non rational bezier curve with a set of poles: curvepoles. the weights are defaulted to all being 1. raises constructionerror if the number of poles is greater than maxdegree + 1 or lower than 2.

        Parameters
        ----------
        CurvePoles: TColgp_Array1OfPnt2d
        PoleWeights: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Creates a rational bezier curve with the set of poles curvepoles and the set of weights poleweights . if all the weights are identical the curve is considered as non rational. raises constructionerror if the number of poles is greater than maxdegree + 1 or lower than 2 or curvepoles and curveweights have not the same length or one weight value is lower or equal to resolution from package gp.

        """
        _Geom2d.Geom2d_BezierCurve_swiginit(self, _Geom2d.new_Geom2d_BezierCurve(*args))

    def Degree(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the polynomial degree of the curve. it is the number of poles less one. in this package the degree of a bezier curve cannot be greater than 'maxdegree'.

        """
        return _Geom2d.Geom2d_BezierCurve_Degree(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_BezierCurve_DumpJsonToString(self, depth)

    def Increase(self, *args):
        r"""

        Parameters
        ----------
        Degree: int

        Return
        -------
        None

        Description
        -----------
        Increases the degree of a bezier curve. degree is the new degree of <self>. raises constructionerror if degree is greater than maxdegree or lower than 2 or lower than the initial degree of <self>.

        """
        return _Geom2d.Geom2d_BezierCurve_Increase(self, *args)

    def InsertPoleAfter(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        Inserts a pole with its weight in the set of poles after the pole of range index. if the curve was non rational it can become rational if all the weights are not identical. raised if index is not in the range [0, nbpoles] //! raised if the resulting number of poles is greater than maxdegree + 1.

        """
        return _Geom2d.Geom2d_BezierCurve_InsertPoleAfter(self, *args)

    def InsertPoleBefore(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        Inserts a pole with its weight in the set of poles after the pole of range index. if the curve was non rational it can become rational if all the weights are not identical. raised if index is not in the range [1, nbpoles+1] //! raised if the resulting number of poles is greater than maxdegree + 1.

        """
        return _Geom2d.Geom2d_BezierCurve_InsertPoleBefore(self, *args)

    def IsRational(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns false if all the weights are identical. the tolerance criterion is resolution from package gp.

        """
        return _Geom2d.Geom2d_BezierCurve_IsRational(self, *args)

    @staticmethod
    def MaxDegree(*args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the value of the maximum polynomial degree of a beziercurve. this value is 25.

        """
        return _Geom2d.Geom2d_BezierCurve_MaxDegree(*args)

    def NbPoles(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of poles for this bezier curve.

        """
        return _Geom2d.Geom2d_BezierCurve_NbPoles(self, *args)

    def Pole(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the pole of range index. raised if index is not in the range [1, nbpoles].

        """
        return _Geom2d.Geom2d_BezierCurve_Pole(self, *args)

    def Poles(self, *args):
        r"""

        Parameters
        ----------
        P: TColgp_Array1OfPnt2d

        Return
        -------
        None

        Description
        -----------
        Returns all the poles of the curve. //! raised if the length of p is not equal to the number of poles.
        Return
        -------
        TColgp_Array1OfPnt2d

        Description
        -----------
        Returns all the poles of the curve.

        """
        return _Geom2d.Geom2d_BezierCurve_Poles(self, *args)

    def RemovePole(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        None

        Description
        -----------
        Removes the pole of range index. if the curve was rational it can become non rational. raised if index is not in the range [1, nbpoles].

        """
        return _Geom2d.Geom2d_BezierCurve_RemovePole(self, *args)

    def Resolution(self, *args):
        r"""

        Parameters
        ----------
        ToleranceUV: float

        Return
        -------
        UTolerance: float

        Description
        -----------
        Computes for this bezier curve the parametric tolerance utolerance for a given tolerance tolerance3d (relative to dimensions in the plane). if f(t) is the equation of this bezier curve, utolerance ensures that | t1 - t0| < utolerance ===> |f(t1) - f(t0)| < toleranceuv.

        """
        return _Geom2d.Geom2d_BezierCurve_Resolution(self, *args)

    def Segment(self, *args):
        r"""

        Parameters
        ----------
        U1: float
        U2: float

        Return
        -------
        None

        Description
        -----------
        Segments the curve between u1 and u2 which can be out of the bounds of the curve. the curve is oriented from u1 to u2. the control points are modified, the first and the last point are not the same but the parametrization range is [0, 1] else it could not be a bezier curve. warnings: even if <self> is not closed it can become closed after the segmentation for example if u1 or u2 are out of the bounds of the curve <self> or if the curve makes loop. after the segmentation the length of a curve can be null.

        """
        return _Geom2d.Geom2d_BezierCurve_Segment(self, *args)

    def SetPole(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Substitutes the pole of range index with p. if the curve <self> is rational the weight of range index is not modified. raised if index is not in the range [1, nbpoles].

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float

        Return
        -------
        None

        Description
        -----------
        Substitutes the pole and the weights of range index. if the curve <self> is not rational it can become rational if all the weights are not identical. if the curve was rational it can become non rational if all the weights are identical. raised if index is not in the range [1, nbpoles] raised if weight <= resolution from package gp.

        """
        return _Geom2d.Geom2d_BezierCurve_SetPole(self, *args)

    def SetWeight(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        Weight: float

        Return
        -------
        None

        Description
        -----------
        Changes the weight of the pole of range index. if the curve <self> is not rational it can become rational if all the weights are not identical. if the curve was rational it can become non rational if all the weights are identical. raised if index is not in the range [1, nbpoles] raised if weight <= resolution from package gp.

        """
        return _Geom2d.Geom2d_BezierCurve_SetWeight(self, *args)

    def Weight(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        float

        Description
        -----------
        Returns the weight of range index. raised if index is not in the range [1, nbpoles].

        """
        return _Geom2d.Geom2d_BezierCurve_Weight(self, *args)

    def Weights(self, *args):
        r"""

        Parameters
        ----------
        W: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Returns all the weights of the curve. //! raised if the length of w is not equal to the number of poles.
        Return
        -------
        TColStd_Array1OfReal *

        Description
        -----------
        Returns all the weights of the curve.

        """
        return _Geom2d.Geom2d_BezierCurve_Weights(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_BezierCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_BezierCurve

# Register Geom2d_BezierCurve in _Geom2d:
_Geom2d.Geom2d_BezierCurve_swigregister(Geom2d_BezierCurve)
class Geom2d_Circle(Geom2d_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        C: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        Constructs a circle by conversion of the gp_circ2d circle c.

        Parameters
        ----------
        A: gp_Ax2d
        Radius: float
        Sense: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Constructs a circle of radius radius, whose center is the origin of axis a; a is the 'x axis' of the local coordinate system of the circle; this coordinate system is direct if sense is true (default value) or indirect if sense is false. note: it is possible to create a circle where radius is equal to 0.0. exceptions standard_constructionerror if radius is negative.

        Parameters
        ----------
        A: gp_Ax22d
        Radius: float

        Return
        -------
        None

        Description
        -----------
        Constructs a circle of radius radius, where the coordinate system a locates the circle and defines its orientation in the plane such that: - the center of the circle is the origin of a, - the orientation (direct or indirect) of a gives the orientation of the circle.

        """
        _Geom2d.Geom2d_Circle_swiginit(self, _Geom2d.new_Geom2d_Circle(*args))

    def Circ2d(self, *args):
        r"""
        Return
        -------
        gp_Circ2d

        Description
        -----------
        Returns the non persistent circle from gp with the same geometric properties as <self>.

        """
        return _Geom2d.Geom2d_Circle_Circ2d(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Circle_DumpJsonToString(self, depth)

    def Radius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the radius of this circle.

        """
        return _Geom2d.Geom2d_Circle_Radius(self, *args)

    def SetCirc2d(self, *args):
        r"""

        Parameters
        ----------
        C: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        Converts the gp_circ2d circle c into this circle.

        """
        return _Geom2d.Geom2d_Circle_SetCirc2d(self, *args)

    def SetRadius(self, *args):
        r"""

        Parameters
        ----------
        R: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Geom2d.Geom2d_Circle_SetRadius(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Circle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Circle

# Register Geom2d_Circle in _Geom2d:
_Geom2d.Geom2d_Circle_swigregister(Geom2d_Circle)
class Geom2d_Ellipse(Geom2d_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        E: gp_Elips2d

        Return
        -------
        None

        Description
        -----------
        Creates an ellipse by conversion of the gp_elips2d ellipse e.

        Parameters
        ----------
        MajorAxis: gp_Ax2d
        MajorRadius: float
        MinorRadius: float
        Sense: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Creates an ellipse defined by its major and minor radii, majorradius and minorradius, and positioned in the plane by its major axis majoraxis; the center of the ellipse is the origin of majoraxis and the unit vector of majoraxis is the 'x direction' of the local coordinate system of the ellipse; this coordinate system is direct if sense is true (default value) or indirect if sense is false. warnings: it is not forbidden to create an ellipse with majorradius = minorradius. exceptions standard_constructionerror if: - majorradius is less than minorradius, or - minorradius is less than 0.

        Parameters
        ----------
        Axis: gp_Ax22d
        MajorRadius: float
        MinorRadius: float

        Return
        -------
        None

        Description
        -----------
        Creates an ellipse defined by its major and minor radii, majorradius and minorradius, where the coordinate system axis locates the ellipse and defines its orientation in the plane such that: - the center of the ellipse is the origin of axis, - the 'x direction' of axis defines the major axis of the ellipse, - the 'y direction' of axis defines the minor axis of the ellipse, - the orientation of axis (direct or indirect) gives the orientation of the ellipse. warnings: it is not forbidden to create an ellipse with majorradius = minorradius. exceptions standard_constructionerror if: - majorradius is less than minorradius, or - minorradius is less than 0.

        """
        _Geom2d.Geom2d_Ellipse_swiginit(self, _Geom2d.new_Geom2d_Ellipse(*args))

    def Directrix1(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        Computes the directrices of this ellipse. this directrix is the line normal to the xaxis of the ellipse in the local plane (z = 0) at a distance d = majorradius / e from the center of the ellipse, where e is the eccentricity of the ellipse. this line is parallel to the 'yaxis'. the intersection point between directrix1 and the 'xaxis' is the 'location' point of the directrix1. this point is on the positive side of the 'xaxis'. raises constructionerror if eccentricity = 0.0. (the ellipse degenerates into a circle).

        """
        return _Geom2d.Geom2d_Ellipse_Directrix1(self, *args)

    def Directrix2(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        This line is obtained by the symmetrical transformation of 'directrix1' with respect to the 'yaxis' of the ellipse. raises constructionerror if eccentricity = 0.0. (the ellipse degenerates into a circle).

        """
        return _Geom2d.Geom2d_Ellipse_Directrix2(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Ellipse_DumpJsonToString(self, depth)

    def Elips2d(self, *args):
        r"""
        Return
        -------
        gp_Elips2d

        Description
        -----------
        Converts this ellipse into a gp_elips2d ellipse.

        """
        return _Geom2d.Geom2d_Ellipse_Elips2d(self, *args)

    def Focal(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Computes the focal distance. the focal distance is the distance between the center and a focus of the ellipse.

        """
        return _Geom2d.Geom2d_Ellipse_Focal(self, *args)

    def Focus1(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the first focus of the ellipse. this focus is on the positive side of the 'xaxis' of the ellipse.

        """
        return _Geom2d.Geom2d_Ellipse_Focus1(self, *args)

    def Focus2(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the second focus of the ellipse. this focus is on the negative side of the 'xaxis' of the ellipse.

        """
        return _Geom2d.Geom2d_Ellipse_Focus2(self, *args)

    def MajorRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the major radius of this ellipse.

        """
        return _Geom2d.Geom2d_Ellipse_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the minor radius of this ellipse.

        """
        return _Geom2d.Geom2d_Ellipse_MinorRadius(self, *args)

    def Parameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Computes the parameter of this ellipse. this value is given by the formula p = (1 - e * e) * majorradius where e is the eccentricity of the ellipse. returns 0 if majorradius = 0.

        """
        return _Geom2d.Geom2d_Ellipse_Parameter(self, *args)

    def SetElips2d(self, *args):
        r"""

        Parameters
        ----------
        E: gp_Elips2d

        Return
        -------
        None

        Description
        -----------
        Converts the gp_elips2d ellipse e into this ellipse.

        """
        return _Geom2d.Geom2d_Ellipse_SetElips2d(self, *args)

    def SetMajorRadius(self, *args):
        r"""

        Parameters
        ----------
        MajorRadius: float

        Return
        -------
        None

        Description
        -----------
        Assigns a value to the major radius of this ellipse. exceptions standard_constructionerror if: - the major radius of this ellipse becomes less than the minor radius, or - minorradius is less than 0.

        """
        return _Geom2d.Geom2d_Ellipse_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        r"""

        Parameters
        ----------
        MinorRadius: float

        Return
        -------
        None

        Description
        -----------
        Assigns a value to the minor radius of this ellipse. exceptions standard_constructionerror if: - the major radius of this ellipse becomes less than the minor radius, or - minorradius is less than 0.

        """
        return _Geom2d.Geom2d_Ellipse_SetMinorRadius(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Ellipse_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Ellipse

# Register Geom2d_Ellipse in _Geom2d:
_Geom2d.Geom2d_Ellipse_swigregister(Geom2d_Ellipse)
class Geom2d_Hyperbola(Geom2d_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        H: gp_Hypr2d

        Return
        -------
        None

        Description
        -----------
        Creates an hyperbola from a non persistent one from package gp.

        Parameters
        ----------
        MajorAxis: gp_Ax2d
        MajorRadius: float
        MinorRadius: float
        Sense: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Majoraxis is the 'xaxis' of the hyperbola. the yaxis is in the direct sense if 'sense' is true; the major radius of the hyperbola is on this 'xaxis' and the minor radius is on the 'yaxis' of the hyperbola. raised if majorradius < 0.0 or if minorradius < 0.0.

        Parameters
        ----------
        Axis: gp_Ax22d
        MajorRadius: float
        MinorRadius: float

        Return
        -------
        None

        Description
        -----------
        The xdirection of 'axis' is the 'xaxis' of the hyperbola and the ydirection of 'axis' is the 'yaxis'. the major radius of the hyperbola is on this 'xaxis' and the minor radius is on the 'yaxis' of the hyperbola. raised if majorradius < 0.0 or if minorradius < 0.0.

        """
        _Geom2d.Geom2d_Hyperbola_swiginit(self, _Geom2d.new_Geom2d_Hyperbola(*args))

    def Asymptote1(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        In the local coordinate system of the hyperbola the equation of the hyperbola is (x*x)/(a*a) - (y*y)/(b*b) = 1.0 and the equation of the first asymptote is y = (b/a)*x where a is the major radius of the hyperbola and b is the minor radius of the hyperbola. raised if majorradius = 0.0.

        """
        return _Geom2d.Geom2d_Hyperbola_Asymptote1(self, *args)

    def Asymptote2(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        In the local coordinate system of the hyperbola the equation of the hyperbola is (x*x)/(a*a) - (y*y)/(b*b) = 1.0 and the equation of the first asymptote is y = -(b/a)*x. where a is the major radius of the hyperbola and b is the minor radius of the hyperbola. raised if majorradius = 0.0.

        """
        return _Geom2d.Geom2d_Hyperbola_Asymptote2(self, *args)

    def ConjugateBranch1(self, *args):
        r"""
        Return
        -------
        gp_Hypr2d

        Description
        -----------
        Computes the first conjugate branch relative to this hyperbola. note: the diagram given under the class purpose indicates where these two branches of hyperbola are positioned in relation to this branch of hyperbola.

        """
        return _Geom2d.Geom2d_Hyperbola_ConjugateBranch1(self, *args)

    def ConjugateBranch2(self, *args):
        r"""
        Return
        -------
        gp_Hypr2d

        Description
        -----------
        Computes the second conjugate branch relative to this hyperbola. note: the diagram given under the class purpose indicates where these two branches of hyperbola are positioned in relation to this branch of hyperbola.

        """
        return _Geom2d.Geom2d_Hyperbola_ConjugateBranch2(self, *args)

    def Directrix1(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        This directrix is the line normal to the xaxis of the hyperbola in the local plane (z = 0) at a distance d = majorradius / e from the center of the hyperbola, where e is the eccentricity of the hyperbola. this line is parallel to the 'yaxis'. the intersection point between directrix1 and the 'xaxis' is the location point of the directrix1. this point is on the positive side of the 'xaxis'.

        """
        return _Geom2d.Geom2d_Hyperbola_Directrix1(self, *args)

    def Directrix2(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        This line is obtained by the symmetrical transformation of 'directrix1' with respect to the 'yaxis' of the hyperbola.

        """
        return _Geom2d.Geom2d_Hyperbola_Directrix2(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Hyperbola_DumpJsonToString(self, depth)

    def Focal(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Computes the focal distance. it is the distance between the two focus of the hyperbola.

        """
        return _Geom2d.Geom2d_Hyperbola_Focal(self, *args)

    def Focus1(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the first focus of the hyperbola. this focus is on the positive side of the 'xaxis' of the hyperbola.

        """
        return _Geom2d.Geom2d_Hyperbola_Focus1(self, *args)

    def Focus2(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the second focus of the hyperbola. this focus is on the negative side of the 'xaxis' of the hyperbola.

        """
        return _Geom2d.Geom2d_Hyperbola_Focus2(self, *args)

    def Hypr2d(self, *args):
        r"""
        Return
        -------
        gp_Hypr2d

        Description
        -----------
        Converts this hyperbola into a gp_hypr2d one.

        """
        return _Geom2d.Geom2d_Hyperbola_Hypr2d(self, *args)

    def MajorRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the major or minor radius of this hyperbola. the major radius is also the distance between the center of the hyperbola and the apex of the main branch (located on the 'x axis' of the hyperbola).

        """
        return _Geom2d.Geom2d_Hyperbola_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the major or minor radius of this hyperbola. the minor radius is also the distance between the center of the hyperbola and the apex of a conjugate branch (located on the 'y axis' of the hyperbola).

        """
        return _Geom2d.Geom2d_Hyperbola_MinorRadius(self, *args)

    def OtherBranch(self, *args):
        r"""
        Return
        -------
        gp_Hypr2d

        Description
        -----------
        Computes the 'other' branch of this hyperbola. this is a symmetrical branch with respect to the center of this hyperbola. note: the diagram given under the class purpose indicates where the 'other' branch is positioned in relation to this branch of the hyperbola. ^ yaxis | firstconjugatebranch | other | main ---------------------------- c ------------------------------------------&gtxaxis branch | branch | | secondconjugatebranch | warning the major radius can be less than the minor radius.

        """
        return _Geom2d.Geom2d_Hyperbola_OtherBranch(self, *args)

    def Parameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Computes the parameter of this hyperbola. the parameter is: p = (e*e - 1) * majorradius where e is the eccentricity of this hyperbola and majorradius its major radius. exceptions standard_domainerror if the major radius of this hyperbola is null.

        """
        return _Geom2d.Geom2d_Hyperbola_Parameter(self, *args)

    def SetHypr2d(self, *args):
        r"""

        Parameters
        ----------
        H: gp_Hypr2d

        Return
        -------
        None

        Description
        -----------
        Converts the gp_hypr2d hyperbola h into this hyperbola.

        """
        return _Geom2d.Geom2d_Hyperbola_SetHypr2d(self, *args)

    def SetMajorRadius(self, *args):
        r"""

        Parameters
        ----------
        MajorRadius: float

        Return
        -------
        None

        Description
        -----------
        Assigns a value to the major or minor radius of this hyperbola. exceptions standard_constructionerror if: - majorradius is less than 0.0, - minorradius is less than 0.0.

        """
        return _Geom2d.Geom2d_Hyperbola_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        r"""

        Parameters
        ----------
        MinorRadius: float

        Return
        -------
        None

        Description
        -----------
        Assigns a value to the major or minor radius of this hyperbola. exceptions standard_constructionerror if: - majorradius is less than 0.0, - minorradius is less than 0.0.

        """
        return _Geom2d.Geom2d_Hyperbola_SetMinorRadius(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Hyperbola_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Hyperbola

# Register Geom2d_Hyperbola in _Geom2d:
_Geom2d.Geom2d_Hyperbola_swigregister(Geom2d_Hyperbola)
class Geom2d_Parabola(Geom2d_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Prb: gp_Parab2d

        Return
        -------
        None

        Description
        -----------
        Creates a parabola from a non persistent one.

        Parameters
        ----------
        MirrorAxis: gp_Ax2d
        Focal: float
        Sense: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Creates a parabola with its 'mirroraxis' and it's focal length 'focal'. mirroraxis is the axis of symmetry of the curve, it is the 'xaxis'. the 'yaxis' is parallel to the directrix of the parabola and is in the direct sense if sense is true. the 'location' point of 'mirroraxis' is the vertex of the parabola raised if focal < 0.0.

        Parameters
        ----------
        Axis: gp_Ax22d
        Focal: float

        Return
        -------
        None

        Description
        -----------
        Creates a parabola with its axis and it's focal length 'focal'. the xdirection of axis is the axis of symmetry of the curve, it is the 'xaxis'. the 'yaxis' is parallel to the directrix of the parabola. the 'location' point of 'axis' is the vertex of the parabola. raised if focal < 0.0.

        Parameters
        ----------
        D: gp_Ax2d
        F: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        D is the directrix of the parabola and f the focus point. the symmetry axis 'xaxis' of the parabola is normal to the directrix and pass through the focus point f, but its 'location' point is the vertex of the parabola. the 'yaxis' of the parabola is parallel to d and its 'location' point is the vertex of the parabola.

        """
        _Geom2d.Geom2d_Parabola_swiginit(self, _Geom2d.new_Geom2d_Parabola(*args))

    def Directrix(self, *args):
        r"""
        Return
        -------
        gp_Ax2d

        Description
        -----------
        The directrix is parallel to the 'yaxis' of the parabola. the 'location' point of the directrix is the intersection point between the directrix and the symmetry axis ('xaxis') of the parabola.

        """
        return _Geom2d.Geom2d_Parabola_Directrix(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_Parabola_DumpJsonToString(self, depth)

    def Focal(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Computes the focal length of this parabola. the focal length is the distance between the apex and the focus of the parabola.

        """
        return _Geom2d.Geom2d_Parabola_Focal(self, *args)

    def Focus(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Computes the focus of this parabola the focus is on the positive side of the 'x axis' of the local coordinate system of the parabola.

        """
        return _Geom2d.Geom2d_Parabola_Focus(self, *args)

    def Parab2d(self, *args):
        r"""
        Return
        -------
        gp_Parab2d

        Description
        -----------
        Returns the non persistent parabola from gp with the same geometric properties as <self>.

        """
        return _Geom2d.Geom2d_Parabola_Parab2d(self, *args)

    def Parameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Computes the parameter of this parabola, which is the distance between its focus and its directrix. this distance is twice the focal length. if p is the parameter of the parabola, the equation of the parabola in its local coordinate system is: y**2 = 2.*p*x.

        """
        return _Geom2d.Geom2d_Parabola_Parameter(self, *args)

    def SetFocal(self, *args):
        r"""

        Parameters
        ----------
        Focal: float

        Return
        -------
        None

        Description
        -----------
        Assigns the value focal to the focal length of this parabola. exceptions standard_constructionerror if focal is negative.

        """
        return _Geom2d.Geom2d_Parabola_SetFocal(self, *args)

    def SetParab2d(self, *args):
        r"""

        Parameters
        ----------
        Prb: gp_Parab2d

        Return
        -------
        None

        Description
        -----------
        Converts the gp_parab2d parabola prb into this parabola.

        """
        return _Geom2d.Geom2d_Parabola_SetParab2d(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Parabola_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Parabola

# Register Geom2d_Parabola in _Geom2d:
_Geom2d.Geom2d_Parabola_swigregister(Geom2d_Parabola)
class Geom2d_TrimmedCurve(Geom2d_BoundedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        C: Geom2d_Curve
        U1: float
        U2: float
        Sense: bool (optional, default to Standard_True)
        theAdjustPeriodic: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Creates a trimmed curve from the basis curve c limited between u1 and u2. //! . u1 can be greater or lower than u2. . the returned curve is oriented from u1 to u2. . if the basis curve c is periodic there is an ambiguity because two parts are available. in this case by default the trimmed curve has the same orientation as the basis curve (sense = true). if sense = false then the orientation of the trimmed curve is opposite to the orientation of the basis curve c. if the curve is closed but not periodic it is not possible to keep the part of the curve including the junction point (except if the junction point is at the beginning or at the end of the trimmed curve) because you could lose the fundamental characteristics of the basis curve which are used for example to compute the derivatives of the trimmed curve. so for a closed curve the rules are the same as for a open curve. warnings: in this package the entities are not shared. the trimmedcurve is built with a copy of the curve c. so when c is modified the trimmedcurve is not modified warnings: if <c> is periodic and <theadjustperiodic> is true, parametrics bounds of the trimmedcurve, can be different to [<u1>;<u2>}, if <u1> or <u2> are not in the principal period. include: for more explanation see the scheme given with this class. raises constructionerror the c is not periodic and u1 or u2 are out of the bounds of c. raised if u1 = u2.

        """
        _Geom2d.Geom2d_TrimmedCurve_swiginit(self, _Geom2d.new_Geom2d_TrimmedCurve(*args))

    def BasisCurve(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Returns the basis curve. warning this function does not return a constant reference. consequently, any modification of the returned value directly modifies the trimmed curve.

        """
        return _Geom2d.Geom2d_TrimmedCurve_BasisCurve(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Geom2d.Geom2d_TrimmedCurve_DumpJsonToString(self, depth)

    def SetTrim(self, *args):
        r"""

        Parameters
        ----------
        U1: float
        U2: float
        Sense: bool (optional, default to Standard_True)
        theAdjustPeriodic: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Changes this trimmed curve, by redefining the parameter values u1 and u2, which limit its basis curve. note: if the basis curve is periodic, the trimmed curve has the same orientation as the basis curve if sense is true (default value) or the opposite orientation if sense is false. warning if the basis curve is periodic and theadjustperiodic is true, the bounds of the trimmed curve may be different from u1 and u2 if the parametric origin of the basis curve is within the arc of the trimmed curve. in this case, the modified parameter will be equal to u1 or u2 plus or minus the period. if theadjustperiodic is false, parameters u1 and u2 will stay unchanged. exceptions standard_constructionerror if: - the basis curve is not periodic, and either u1 or u2 are outside the bounds of the basis curve, or - u1 is equal to u2.

        """
        return _Geom2d.Geom2d_TrimmedCurve_SetTrim(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_TrimmedCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_TrimmedCurve

# Register Geom2d_TrimmedCurve in _Geom2d:
_Geom2d.Geom2d_TrimmedCurve_swigregister(Geom2d_TrimmedCurve)



@deprecated
def Geom2d_BSplineCurve_MaxDegree(*args):
	return Geom2d_BSplineCurve.MaxDegree(*args)

@deprecated
def Geom2d_BezierCurve_MaxDegree(*args):
	return Geom2d_BezierCurve.MaxDegree(*args)



