# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TDataStd module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tdatastd.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TDataStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TDataStd')
    _TDataStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDataStd', [dirname(__file__)])
        except ImportError:
            import _TDataStd
            return _TDataStd
        try:
            _mod = imp.load_module('_TDataStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TDataStd = swig_import_helper()
    del swig_import_helper
else:
    import _TDataStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDataStd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TDataStd.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TDataStd.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TDataStd.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TDataStd.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TDataStd.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TDataStd.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TDataStd.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TDataStd.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TDataStd.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TDataStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TDataStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TDataStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TDataStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TDataStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TDataStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TDataStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TDataStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TDataStd.process_exception(error, method_name, class_name)
process_exception = _TDataStd.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TDF

from enum import IntEnum
from OCC.Core.Exception import *

TDataStd_SCALAR = _TDataStd.TDataStd_SCALAR
TDataStd_LENGTH = _TDataStd.TDataStd_LENGTH
TDataStd_ANGULAR = _TDataStd.TDataStd_ANGULAR


class TDataStd_RealEnum(IntEnum):
	TDataStd_SCALAR = 0
	TDataStd_LENGTH = 1
	TDataStd_ANGULAR = 2
TDataStd_SCALAR = TDataStd_RealEnum.TDataStd_SCALAR
TDataStd_LENGTH = TDataStd_RealEnum.TDataStd_LENGTH
TDataStd_ANGULAR = TDataStd_RealEnum.TDataStd_ANGULAR


def Handle_TDataStd_AsciiString_Create() -> "opencascade::handle< TDataStd_AsciiString >":
    return _TDataStd.Handle_TDataStd_AsciiString_Create()
Handle_TDataStd_AsciiString_Create = _TDataStd.Handle_TDataStd_AsciiString_Create

def Handle_TDataStd_AsciiString_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_AsciiString >":
    return _TDataStd.Handle_TDataStd_AsciiString_DownCast(t)
Handle_TDataStd_AsciiString_DownCast = _TDataStd.Handle_TDataStd_AsciiString_DownCast

def Handle_TDataStd_AsciiString_IsNull(t: 'opencascade::handle< TDataStd_AsciiString > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_AsciiString_IsNull(t)
Handle_TDataStd_AsciiString_IsNull = _TDataStd.Handle_TDataStd_AsciiString_IsNull

def Handle_TDataStd_BooleanArray_Create() -> "opencascade::handle< TDataStd_BooleanArray >":
    return _TDataStd.Handle_TDataStd_BooleanArray_Create()
Handle_TDataStd_BooleanArray_Create = _TDataStd.Handle_TDataStd_BooleanArray_Create

def Handle_TDataStd_BooleanArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_BooleanArray >":
    return _TDataStd.Handle_TDataStd_BooleanArray_DownCast(t)
Handle_TDataStd_BooleanArray_DownCast = _TDataStd.Handle_TDataStd_BooleanArray_DownCast

def Handle_TDataStd_BooleanArray_IsNull(t: 'opencascade::handle< TDataStd_BooleanArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_BooleanArray_IsNull(t)
Handle_TDataStd_BooleanArray_IsNull = _TDataStd.Handle_TDataStd_BooleanArray_IsNull

def Handle_TDataStd_BooleanList_Create() -> "opencascade::handle< TDataStd_BooleanList >":
    return _TDataStd.Handle_TDataStd_BooleanList_Create()
Handle_TDataStd_BooleanList_Create = _TDataStd.Handle_TDataStd_BooleanList_Create

def Handle_TDataStd_BooleanList_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_BooleanList >":
    return _TDataStd.Handle_TDataStd_BooleanList_DownCast(t)
Handle_TDataStd_BooleanList_DownCast = _TDataStd.Handle_TDataStd_BooleanList_DownCast

def Handle_TDataStd_BooleanList_IsNull(t: 'opencascade::handle< TDataStd_BooleanList > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_BooleanList_IsNull(t)
Handle_TDataStd_BooleanList_IsNull = _TDataStd.Handle_TDataStd_BooleanList_IsNull

def Handle_TDataStd_ByteArray_Create() -> "opencascade::handle< TDataStd_ByteArray >":
    return _TDataStd.Handle_TDataStd_ByteArray_Create()
Handle_TDataStd_ByteArray_Create = _TDataStd.Handle_TDataStd_ByteArray_Create

def Handle_TDataStd_ByteArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_ByteArray >":
    return _TDataStd.Handle_TDataStd_ByteArray_DownCast(t)
Handle_TDataStd_ByteArray_DownCast = _TDataStd.Handle_TDataStd_ByteArray_DownCast

def Handle_TDataStd_ByteArray_IsNull(t: 'opencascade::handle< TDataStd_ByteArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_ByteArray_IsNull(t)
Handle_TDataStd_ByteArray_IsNull = _TDataStd.Handle_TDataStd_ByteArray_IsNull

def Handle_TDataStd_Current_Create() -> "opencascade::handle< TDataStd_Current >":
    return _TDataStd.Handle_TDataStd_Current_Create()
Handle_TDataStd_Current_Create = _TDataStd.Handle_TDataStd_Current_Create

def Handle_TDataStd_Current_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Current >":
    return _TDataStd.Handle_TDataStd_Current_DownCast(t)
Handle_TDataStd_Current_DownCast = _TDataStd.Handle_TDataStd_Current_DownCast

def Handle_TDataStd_Current_IsNull(t: 'opencascade::handle< TDataStd_Current > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Current_IsNull(t)
Handle_TDataStd_Current_IsNull = _TDataStd.Handle_TDataStd_Current_IsNull

def Handle_TDataStd_DeltaOnModificationOfByteArray_Create() -> "opencascade::handle< TDataStd_DeltaOnModificationOfByteArray >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_Create()
Handle_TDataStd_DeltaOnModificationOfByteArray_Create = _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_Create

def Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_DeltaOnModificationOfByteArray >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast(t)
Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast

def Handle_TDataStd_DeltaOnModificationOfByteArray_IsNull(t: 'opencascade::handle< TDataStd_DeltaOnModificationOfByteArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_IsNull(t)
Handle_TDataStd_DeltaOnModificationOfByteArray_IsNull = _TDataStd.Handle_TDataStd_DeltaOnModificationOfByteArray_IsNull

def Handle_TDataStd_DeltaOnModificationOfExtStringArray_Create() -> "opencascade::handle< TDataStd_DeltaOnModificationOfExtStringArray >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_Create()
Handle_TDataStd_DeltaOnModificationOfExtStringArray_Create = _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_Create

def Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_DeltaOnModificationOfExtStringArray >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast(t)
Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast

def Handle_TDataStd_DeltaOnModificationOfExtStringArray_IsNull(t: 'opencascade::handle< TDataStd_DeltaOnModificationOfExtStringArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_IsNull(t)
Handle_TDataStd_DeltaOnModificationOfExtStringArray_IsNull = _TDataStd.Handle_TDataStd_DeltaOnModificationOfExtStringArray_IsNull

def Handle_TDataStd_DeltaOnModificationOfIntArray_Create() -> "opencascade::handle< TDataStd_DeltaOnModificationOfIntArray >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_Create()
Handle_TDataStd_DeltaOnModificationOfIntArray_Create = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_Create

def Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_DeltaOnModificationOfIntArray >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast(t)
Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast

def Handle_TDataStd_DeltaOnModificationOfIntArray_IsNull(t: 'opencascade::handle< TDataStd_DeltaOnModificationOfIntArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_IsNull(t)
Handle_TDataStd_DeltaOnModificationOfIntArray_IsNull = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntArray_IsNull

def Handle_TDataStd_DeltaOnModificationOfIntPackedMap_Create() -> "opencascade::handle< TDataStd_DeltaOnModificationOfIntPackedMap >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_Create()
Handle_TDataStd_DeltaOnModificationOfIntPackedMap_Create = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_Create

def Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_DeltaOnModificationOfIntPackedMap >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast(t)
Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast

def Handle_TDataStd_DeltaOnModificationOfIntPackedMap_IsNull(t: 'opencascade::handle< TDataStd_DeltaOnModificationOfIntPackedMap > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_IsNull(t)
Handle_TDataStd_DeltaOnModificationOfIntPackedMap_IsNull = _TDataStd.Handle_TDataStd_DeltaOnModificationOfIntPackedMap_IsNull

def Handle_TDataStd_DeltaOnModificationOfRealArray_Create() -> "opencascade::handle< TDataStd_DeltaOnModificationOfRealArray >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_Create()
Handle_TDataStd_DeltaOnModificationOfRealArray_Create = _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_Create

def Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_DeltaOnModificationOfRealArray >":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast(t)
Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast = _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast

def Handle_TDataStd_DeltaOnModificationOfRealArray_IsNull(t: 'opencascade::handle< TDataStd_DeltaOnModificationOfRealArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_IsNull(t)
Handle_TDataStd_DeltaOnModificationOfRealArray_IsNull = _TDataStd.Handle_TDataStd_DeltaOnModificationOfRealArray_IsNull

def Handle_TDataStd_Expression_Create() -> "opencascade::handle< TDataStd_Expression >":
    return _TDataStd.Handle_TDataStd_Expression_Create()
Handle_TDataStd_Expression_Create = _TDataStd.Handle_TDataStd_Expression_Create

def Handle_TDataStd_Expression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Expression >":
    return _TDataStd.Handle_TDataStd_Expression_DownCast(t)
Handle_TDataStd_Expression_DownCast = _TDataStd.Handle_TDataStd_Expression_DownCast

def Handle_TDataStd_Expression_IsNull(t: 'opencascade::handle< TDataStd_Expression > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Expression_IsNull(t)
Handle_TDataStd_Expression_IsNull = _TDataStd.Handle_TDataStd_Expression_IsNull

def Handle_TDataStd_ExtStringArray_Create() -> "opencascade::handle< TDataStd_ExtStringArray >":
    return _TDataStd.Handle_TDataStd_ExtStringArray_Create()
Handle_TDataStd_ExtStringArray_Create = _TDataStd.Handle_TDataStd_ExtStringArray_Create

def Handle_TDataStd_ExtStringArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_ExtStringArray >":
    return _TDataStd.Handle_TDataStd_ExtStringArray_DownCast(t)
Handle_TDataStd_ExtStringArray_DownCast = _TDataStd.Handle_TDataStd_ExtStringArray_DownCast

def Handle_TDataStd_ExtStringArray_IsNull(t: 'opencascade::handle< TDataStd_ExtStringArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_ExtStringArray_IsNull(t)
Handle_TDataStd_ExtStringArray_IsNull = _TDataStd.Handle_TDataStd_ExtStringArray_IsNull

def Handle_TDataStd_ExtStringList_Create() -> "opencascade::handle< TDataStd_ExtStringList >":
    return _TDataStd.Handle_TDataStd_ExtStringList_Create()
Handle_TDataStd_ExtStringList_Create = _TDataStd.Handle_TDataStd_ExtStringList_Create

def Handle_TDataStd_ExtStringList_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_ExtStringList >":
    return _TDataStd.Handle_TDataStd_ExtStringList_DownCast(t)
Handle_TDataStd_ExtStringList_DownCast = _TDataStd.Handle_TDataStd_ExtStringList_DownCast

def Handle_TDataStd_ExtStringList_IsNull(t: 'opencascade::handle< TDataStd_ExtStringList > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_ExtStringList_IsNull(t)
Handle_TDataStd_ExtStringList_IsNull = _TDataStd.Handle_TDataStd_ExtStringList_IsNull

def Handle_TDataStd_HDataMapOfStringByte_Create() -> "opencascade::handle< TDataStd_HDataMapOfStringByte >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringByte_Create()
Handle_TDataStd_HDataMapOfStringByte_Create = _TDataStd.Handle_TDataStd_HDataMapOfStringByte_Create

def Handle_TDataStd_HDataMapOfStringByte_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_HDataMapOfStringByte >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringByte_DownCast(t)
Handle_TDataStd_HDataMapOfStringByte_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringByte_DownCast

def Handle_TDataStd_HDataMapOfStringByte_IsNull(t: 'opencascade::handle< TDataStd_HDataMapOfStringByte > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringByte_IsNull(t)
Handle_TDataStd_HDataMapOfStringByte_IsNull = _TDataStd.Handle_TDataStd_HDataMapOfStringByte_IsNull

def Handle_TDataStd_HDataMapOfStringHArray1OfInteger_Create() -> "opencascade::handle< TDataStd_HDataMapOfStringHArray1OfInteger >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_Create()
Handle_TDataStd_HDataMapOfStringHArray1OfInteger_Create = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_Create

def Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_HDataMapOfStringHArray1OfInteger >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast(t)
Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast

def Handle_TDataStd_HDataMapOfStringHArray1OfInteger_IsNull(t: 'opencascade::handle< TDataStd_HDataMapOfStringHArray1OfInteger > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_IsNull(t)
Handle_TDataStd_HDataMapOfStringHArray1OfInteger_IsNull = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfInteger_IsNull

def Handle_TDataStd_HDataMapOfStringHArray1OfReal_Create() -> "opencascade::handle< TDataStd_HDataMapOfStringHArray1OfReal >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_Create()
Handle_TDataStd_HDataMapOfStringHArray1OfReal_Create = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_Create

def Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_HDataMapOfStringHArray1OfReal >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast(t)
Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast

def Handle_TDataStd_HDataMapOfStringHArray1OfReal_IsNull(t: 'opencascade::handle< TDataStd_HDataMapOfStringHArray1OfReal > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_IsNull(t)
Handle_TDataStd_HDataMapOfStringHArray1OfReal_IsNull = _TDataStd.Handle_TDataStd_HDataMapOfStringHArray1OfReal_IsNull

def Handle_TDataStd_HDataMapOfStringInteger_Create() -> "opencascade::handle< TDataStd_HDataMapOfStringInteger >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_Create()
Handle_TDataStd_HDataMapOfStringInteger_Create = _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_Create

def Handle_TDataStd_HDataMapOfStringInteger_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_HDataMapOfStringInteger >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_DownCast(t)
Handle_TDataStd_HDataMapOfStringInteger_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_DownCast

def Handle_TDataStd_HDataMapOfStringInteger_IsNull(t: 'opencascade::handle< TDataStd_HDataMapOfStringInteger > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_IsNull(t)
Handle_TDataStd_HDataMapOfStringInteger_IsNull = _TDataStd.Handle_TDataStd_HDataMapOfStringInteger_IsNull

def Handle_TDataStd_HDataMapOfStringReal_Create() -> "opencascade::handle< TDataStd_HDataMapOfStringReal >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringReal_Create()
Handle_TDataStd_HDataMapOfStringReal_Create = _TDataStd.Handle_TDataStd_HDataMapOfStringReal_Create

def Handle_TDataStd_HDataMapOfStringReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_HDataMapOfStringReal >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringReal_DownCast(t)
Handle_TDataStd_HDataMapOfStringReal_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringReal_DownCast

def Handle_TDataStd_HDataMapOfStringReal_IsNull(t: 'opencascade::handle< TDataStd_HDataMapOfStringReal > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringReal_IsNull(t)
Handle_TDataStd_HDataMapOfStringReal_IsNull = _TDataStd.Handle_TDataStd_HDataMapOfStringReal_IsNull

def Handle_TDataStd_HDataMapOfStringString_Create() -> "opencascade::handle< TDataStd_HDataMapOfStringString >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringString_Create()
Handle_TDataStd_HDataMapOfStringString_Create = _TDataStd.Handle_TDataStd_HDataMapOfStringString_Create

def Handle_TDataStd_HDataMapOfStringString_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_HDataMapOfStringString >":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringString_DownCast(t)
Handle_TDataStd_HDataMapOfStringString_DownCast = _TDataStd.Handle_TDataStd_HDataMapOfStringString_DownCast

def Handle_TDataStd_HDataMapOfStringString_IsNull(t: 'opencascade::handle< TDataStd_HDataMapOfStringString > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_HDataMapOfStringString_IsNull(t)
Handle_TDataStd_HDataMapOfStringString_IsNull = _TDataStd.Handle_TDataStd_HDataMapOfStringString_IsNull

def Handle_TDataStd_IntPackedMap_Create() -> "opencascade::handle< TDataStd_IntPackedMap >":
    return _TDataStd.Handle_TDataStd_IntPackedMap_Create()
Handle_TDataStd_IntPackedMap_Create = _TDataStd.Handle_TDataStd_IntPackedMap_Create

def Handle_TDataStd_IntPackedMap_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_IntPackedMap >":
    return _TDataStd.Handle_TDataStd_IntPackedMap_DownCast(t)
Handle_TDataStd_IntPackedMap_DownCast = _TDataStd.Handle_TDataStd_IntPackedMap_DownCast

def Handle_TDataStd_IntPackedMap_IsNull(t: 'opencascade::handle< TDataStd_IntPackedMap > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_IntPackedMap_IsNull(t)
Handle_TDataStd_IntPackedMap_IsNull = _TDataStd.Handle_TDataStd_IntPackedMap_IsNull

def Handle_TDataStd_Integer_Create() -> "opencascade::handle< TDataStd_Integer >":
    return _TDataStd.Handle_TDataStd_Integer_Create()
Handle_TDataStd_Integer_Create = _TDataStd.Handle_TDataStd_Integer_Create

def Handle_TDataStd_Integer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Integer >":
    return _TDataStd.Handle_TDataStd_Integer_DownCast(t)
Handle_TDataStd_Integer_DownCast = _TDataStd.Handle_TDataStd_Integer_DownCast

def Handle_TDataStd_Integer_IsNull(t: 'opencascade::handle< TDataStd_Integer > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Integer_IsNull(t)
Handle_TDataStd_Integer_IsNull = _TDataStd.Handle_TDataStd_Integer_IsNull

def Handle_TDataStd_IntegerArray_Create() -> "opencascade::handle< TDataStd_IntegerArray >":
    return _TDataStd.Handle_TDataStd_IntegerArray_Create()
Handle_TDataStd_IntegerArray_Create = _TDataStd.Handle_TDataStd_IntegerArray_Create

def Handle_TDataStd_IntegerArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_IntegerArray >":
    return _TDataStd.Handle_TDataStd_IntegerArray_DownCast(t)
Handle_TDataStd_IntegerArray_DownCast = _TDataStd.Handle_TDataStd_IntegerArray_DownCast

def Handle_TDataStd_IntegerArray_IsNull(t: 'opencascade::handle< TDataStd_IntegerArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_IntegerArray_IsNull(t)
Handle_TDataStd_IntegerArray_IsNull = _TDataStd.Handle_TDataStd_IntegerArray_IsNull

def Handle_TDataStd_IntegerList_Create() -> "opencascade::handle< TDataStd_IntegerList >":
    return _TDataStd.Handle_TDataStd_IntegerList_Create()
Handle_TDataStd_IntegerList_Create = _TDataStd.Handle_TDataStd_IntegerList_Create

def Handle_TDataStd_IntegerList_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_IntegerList >":
    return _TDataStd.Handle_TDataStd_IntegerList_DownCast(t)
Handle_TDataStd_IntegerList_DownCast = _TDataStd.Handle_TDataStd_IntegerList_DownCast

def Handle_TDataStd_IntegerList_IsNull(t: 'opencascade::handle< TDataStd_IntegerList > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_IntegerList_IsNull(t)
Handle_TDataStd_IntegerList_IsNull = _TDataStd.Handle_TDataStd_IntegerList_IsNull

def Handle_TDataStd_NamedData_Create() -> "opencascade::handle< TDataStd_NamedData >":
    return _TDataStd.Handle_TDataStd_NamedData_Create()
Handle_TDataStd_NamedData_Create = _TDataStd.Handle_TDataStd_NamedData_Create

def Handle_TDataStd_NamedData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_NamedData >":
    return _TDataStd.Handle_TDataStd_NamedData_DownCast(t)
Handle_TDataStd_NamedData_DownCast = _TDataStd.Handle_TDataStd_NamedData_DownCast

def Handle_TDataStd_NamedData_IsNull(t: 'opencascade::handle< TDataStd_NamedData > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_NamedData_IsNull(t)
Handle_TDataStd_NamedData_IsNull = _TDataStd.Handle_TDataStd_NamedData_IsNull

def Handle_TDataStd_Real_Create() -> "opencascade::handle< TDataStd_Real >":
    return _TDataStd.Handle_TDataStd_Real_Create()
Handle_TDataStd_Real_Create = _TDataStd.Handle_TDataStd_Real_Create

def Handle_TDataStd_Real_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Real >":
    return _TDataStd.Handle_TDataStd_Real_DownCast(t)
Handle_TDataStd_Real_DownCast = _TDataStd.Handle_TDataStd_Real_DownCast

def Handle_TDataStd_Real_IsNull(t: 'opencascade::handle< TDataStd_Real > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Real_IsNull(t)
Handle_TDataStd_Real_IsNull = _TDataStd.Handle_TDataStd_Real_IsNull

def Handle_TDataStd_RealArray_Create() -> "opencascade::handle< TDataStd_RealArray >":
    return _TDataStd.Handle_TDataStd_RealArray_Create()
Handle_TDataStd_RealArray_Create = _TDataStd.Handle_TDataStd_RealArray_Create

def Handle_TDataStd_RealArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_RealArray >":
    return _TDataStd.Handle_TDataStd_RealArray_DownCast(t)
Handle_TDataStd_RealArray_DownCast = _TDataStd.Handle_TDataStd_RealArray_DownCast

def Handle_TDataStd_RealArray_IsNull(t: 'opencascade::handle< TDataStd_RealArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_RealArray_IsNull(t)
Handle_TDataStd_RealArray_IsNull = _TDataStd.Handle_TDataStd_RealArray_IsNull

def Handle_TDataStd_RealList_Create() -> "opencascade::handle< TDataStd_RealList >":
    return _TDataStd.Handle_TDataStd_RealList_Create()
Handle_TDataStd_RealList_Create = _TDataStd.Handle_TDataStd_RealList_Create

def Handle_TDataStd_RealList_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_RealList >":
    return _TDataStd.Handle_TDataStd_RealList_DownCast(t)
Handle_TDataStd_RealList_DownCast = _TDataStd.Handle_TDataStd_RealList_DownCast

def Handle_TDataStd_RealList_IsNull(t: 'opencascade::handle< TDataStd_RealList > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_RealList_IsNull(t)
Handle_TDataStd_RealList_IsNull = _TDataStd.Handle_TDataStd_RealList_IsNull

def Handle_TDataStd_ReferenceArray_Create() -> "opencascade::handle< TDataStd_ReferenceArray >":
    return _TDataStd.Handle_TDataStd_ReferenceArray_Create()
Handle_TDataStd_ReferenceArray_Create = _TDataStd.Handle_TDataStd_ReferenceArray_Create

def Handle_TDataStd_ReferenceArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_ReferenceArray >":
    return _TDataStd.Handle_TDataStd_ReferenceArray_DownCast(t)
Handle_TDataStd_ReferenceArray_DownCast = _TDataStd.Handle_TDataStd_ReferenceArray_DownCast

def Handle_TDataStd_ReferenceArray_IsNull(t: 'opencascade::handle< TDataStd_ReferenceArray > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_ReferenceArray_IsNull(t)
Handle_TDataStd_ReferenceArray_IsNull = _TDataStd.Handle_TDataStd_ReferenceArray_IsNull

def Handle_TDataStd_ReferenceList_Create() -> "opencascade::handle< TDataStd_ReferenceList >":
    return _TDataStd.Handle_TDataStd_ReferenceList_Create()
Handle_TDataStd_ReferenceList_Create = _TDataStd.Handle_TDataStd_ReferenceList_Create

def Handle_TDataStd_ReferenceList_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_ReferenceList >":
    return _TDataStd.Handle_TDataStd_ReferenceList_DownCast(t)
Handle_TDataStd_ReferenceList_DownCast = _TDataStd.Handle_TDataStd_ReferenceList_DownCast

def Handle_TDataStd_ReferenceList_IsNull(t: 'opencascade::handle< TDataStd_ReferenceList > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_ReferenceList_IsNull(t)
Handle_TDataStd_ReferenceList_IsNull = _TDataStd.Handle_TDataStd_ReferenceList_IsNull

def Handle_TDataStd_TreeNode_Create() -> "opencascade::handle< TDataStd_TreeNode >":
    return _TDataStd.Handle_TDataStd_TreeNode_Create()
Handle_TDataStd_TreeNode_Create = _TDataStd.Handle_TDataStd_TreeNode_Create

def Handle_TDataStd_TreeNode_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_TreeNode >":
    return _TDataStd.Handle_TDataStd_TreeNode_DownCast(t)
Handle_TDataStd_TreeNode_DownCast = _TDataStd.Handle_TDataStd_TreeNode_DownCast

def Handle_TDataStd_TreeNode_IsNull(t: 'opencascade::handle< TDataStd_TreeNode > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_TreeNode_IsNull(t)
Handle_TDataStd_TreeNode_IsNull = _TDataStd.Handle_TDataStd_TreeNode_IsNull

def Handle_TDataStd_UAttribute_Create() -> "opencascade::handle< TDataStd_UAttribute >":
    return _TDataStd.Handle_TDataStd_UAttribute_Create()
Handle_TDataStd_UAttribute_Create = _TDataStd.Handle_TDataStd_UAttribute_Create

def Handle_TDataStd_UAttribute_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_UAttribute >":
    return _TDataStd.Handle_TDataStd_UAttribute_DownCast(t)
Handle_TDataStd_UAttribute_DownCast = _TDataStd.Handle_TDataStd_UAttribute_DownCast

def Handle_TDataStd_UAttribute_IsNull(t: 'opencascade::handle< TDataStd_UAttribute > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_UAttribute_IsNull(t)
Handle_TDataStd_UAttribute_IsNull = _TDataStd.Handle_TDataStd_UAttribute_IsNull

def Handle_TDataStd_Variable_Create() -> "opencascade::handle< TDataStd_Variable >":
    return _TDataStd.Handle_TDataStd_Variable_Create()
Handle_TDataStd_Variable_Create = _TDataStd.Handle_TDataStd_Variable_Create

def Handle_TDataStd_Variable_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Variable >":
    return _TDataStd.Handle_TDataStd_Variable_DownCast(t)
Handle_TDataStd_Variable_DownCast = _TDataStd.Handle_TDataStd_Variable_DownCast

def Handle_TDataStd_Variable_IsNull(t: 'opencascade::handle< TDataStd_Variable > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Variable_IsNull(t)
Handle_TDataStd_Variable_IsNull = _TDataStd.Handle_TDataStd_Variable_IsNull

def Handle_TDataStd_Comment_Create() -> "opencascade::handle< TDataStd_Comment >":
    return _TDataStd.Handle_TDataStd_Comment_Create()
Handle_TDataStd_Comment_Create = _TDataStd.Handle_TDataStd_Comment_Create

def Handle_TDataStd_Comment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Comment >":
    return _TDataStd.Handle_TDataStd_Comment_DownCast(t)
Handle_TDataStd_Comment_DownCast = _TDataStd.Handle_TDataStd_Comment_DownCast

def Handle_TDataStd_Comment_IsNull(t: 'opencascade::handle< TDataStd_Comment > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Comment_IsNull(t)
Handle_TDataStd_Comment_IsNull = _TDataStd.Handle_TDataStd_Comment_IsNull

def Handle_TDataStd_Directory_Create() -> "opencascade::handle< TDataStd_Directory >":
    return _TDataStd.Handle_TDataStd_Directory_Create()
Handle_TDataStd_Directory_Create = _TDataStd.Handle_TDataStd_Directory_Create

def Handle_TDataStd_Directory_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Directory >":
    return _TDataStd.Handle_TDataStd_Directory_DownCast(t)
Handle_TDataStd_Directory_DownCast = _TDataStd.Handle_TDataStd_Directory_DownCast

def Handle_TDataStd_Directory_IsNull(t: 'opencascade::handle< TDataStd_Directory > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Directory_IsNull(t)
Handle_TDataStd_Directory_IsNull = _TDataStd.Handle_TDataStd_Directory_IsNull

def Handle_TDataStd_Name_Create() -> "opencascade::handle< TDataStd_Name >":
    return _TDataStd.Handle_TDataStd_Name_Create()
Handle_TDataStd_Name_Create = _TDataStd.Handle_TDataStd_Name_Create

def Handle_TDataStd_Name_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Name >":
    return _TDataStd.Handle_TDataStd_Name_DownCast(t)
Handle_TDataStd_Name_DownCast = _TDataStd.Handle_TDataStd_Name_DownCast

def Handle_TDataStd_Name_IsNull(t: 'opencascade::handle< TDataStd_Name > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Name_IsNull(t)
Handle_TDataStd_Name_IsNull = _TDataStd.Handle_TDataStd_Name_IsNull

def Handle_TDataStd_NoteBook_Create() -> "opencascade::handle< TDataStd_NoteBook >":
    return _TDataStd.Handle_TDataStd_NoteBook_Create()
Handle_TDataStd_NoteBook_Create = _TDataStd.Handle_TDataStd_NoteBook_Create

def Handle_TDataStd_NoteBook_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_NoteBook >":
    return _TDataStd.Handle_TDataStd_NoteBook_DownCast(t)
Handle_TDataStd_NoteBook_DownCast = _TDataStd.Handle_TDataStd_NoteBook_DownCast

def Handle_TDataStd_NoteBook_IsNull(t: 'opencascade::handle< TDataStd_NoteBook > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_NoteBook_IsNull(t)
Handle_TDataStd_NoteBook_IsNull = _TDataStd.Handle_TDataStd_NoteBook_IsNull

def Handle_TDataStd_Relation_Create() -> "opencascade::handle< TDataStd_Relation >":
    return _TDataStd.Handle_TDataStd_Relation_Create()
Handle_TDataStd_Relation_Create = _TDataStd.Handle_TDataStd_Relation_Create

def Handle_TDataStd_Relation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Relation >":
    return _TDataStd.Handle_TDataStd_Relation_DownCast(t)
Handle_TDataStd_Relation_DownCast = _TDataStd.Handle_TDataStd_Relation_DownCast

def Handle_TDataStd_Relation_IsNull(t: 'opencascade::handle< TDataStd_Relation > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Relation_IsNull(t)
Handle_TDataStd_Relation_IsNull = _TDataStd.Handle_TDataStd_Relation_IsNull

def Handle_TDataStd_Tick_Create() -> "opencascade::handle< TDataStd_Tick >":
    return _TDataStd.Handle_TDataStd_Tick_Create()
Handle_TDataStd_Tick_Create = _TDataStd.Handle_TDataStd_Tick_Create

def Handle_TDataStd_Tick_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_Tick >":
    return _TDataStd.Handle_TDataStd_Tick_DownCast(t)
Handle_TDataStd_Tick_DownCast = _TDataStd.Handle_TDataStd_Tick_DownCast

def Handle_TDataStd_Tick_IsNull(t: 'opencascade::handle< TDataStd_Tick > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_Tick_IsNull(t)
Handle_TDataStd_Tick_IsNull = _TDataStd.Handle_TDataStd_Tick_IsNull

def Handle_TDataStd_HLabelArray1_Create() -> "opencascade::handle< TDataStd_HLabelArray1 >":
    return _TDataStd.Handle_TDataStd_HLabelArray1_Create()
Handle_TDataStd_HLabelArray1_Create = _TDataStd.Handle_TDataStd_HLabelArray1_Create

def Handle_TDataStd_HLabelArray1_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDataStd_HLabelArray1 >":
    return _TDataStd.Handle_TDataStd_HLabelArray1_DownCast(t)
Handle_TDataStd_HLabelArray1_DownCast = _TDataStd.Handle_TDataStd_HLabelArray1_DownCast

def Handle_TDataStd_HLabelArray1_IsNull(t: 'opencascade::handle< TDataStd_HLabelArray1 > const &') -> "bool":
    return _TDataStd.Handle_TDataStd_HLabelArray1_IsNull(t)
Handle_TDataStd_HLabelArray1_IsNull = _TDataStd.Handle_TDataStd_HLabelArray1_IsNull
class TDataStd_DataMapOfStringByte(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DataMapOfStringByte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DataMapOfStringByte, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_ExtendedString,unsigned char,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringByte_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_ExtendedString,unsigned char,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringByte_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_ExtendedString,unsigned char,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringByte_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_ExtendedString,unsigned char,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringByte_cend(self)

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_DataMapOfStringByte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDataStd_DataMapOfStringByte') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringByte_Exchange(self, theOther)

    def Assign(self, theOther: 'TDataStd_DataMapOfStringByte') -> "NCollection_DataMap< TCollection_ExtendedString,Standard_Byte,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringByte_Assign(self, theOther)

    def Set(self, theOther: 'TDataStd_DataMapOfStringByte') -> "NCollection_DataMap< TCollection_ExtendedString,Standard_Byte,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringByte_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringByte_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_ExtendedString', theItem: 'unsigned char const &') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringByte_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_ExtendedString', theItem: 'unsigned char const &') -> "unsigned char *":
        return _TDataStd.TDataStd_DataMapOfStringByte_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringByte_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringByte_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_ExtendedString') -> "unsigned char const *":
        return _TDataStd.TDataStd_DataMapOfStringByte_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringByte_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_ExtendedString') -> "unsigned char *":
        return _TDataStd.TDataStd_DataMapOfStringByte_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_ExtendedString') -> "unsigned char &":
        return _TDataStd.TDataStd_DataMapOfStringByte_ChangeFind(self, theKey)

    def __call__(self, *args) -> "unsigned char &":
        return _TDataStd.TDataStd_DataMapOfStringByte___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TDataStd.TDataStd_DataMapOfStringByte_Clear(self, *args)
    __swig_destroy__ = _TDataStd.delete_TDataStd_DataMapOfStringByte
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_DataMapOfStringByte_Size(self)
TDataStd_DataMapOfStringByte_swigregister = _TDataStd.TDataStd_DataMapOfStringByte_swigregister
TDataStd_DataMapOfStringByte_swigregister(TDataStd_DataMapOfStringByte)

class TDataStd_DataMapOfStringHArray1OfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DataMapOfStringHArray1OfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DataMapOfStringHArray1OfInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfInteger >,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfInteger >,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfInteger >,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfInteger >,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_cend(self)

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_DataMapOfStringHArray1OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDataStd_DataMapOfStringHArray1OfInteger') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TDataStd_DataMapOfStringHArray1OfInteger') -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfInteger >,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Assign(self, theOther)

    def Set(self, theOther: 'TDataStd_DataMapOfStringHArray1OfInteger') -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfInteger >,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_ExtendedString', theItem: 'opencascade::handle< TColStd_HArray1OfInteger > const &') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_ExtendedString', theItem: 'opencascade::handle< TColStd_HArray1OfInteger > const &') -> "opencascade::handle< TColStd_HArray1OfInteger > *":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_ExtendedString') -> "opencascade::handle< TColStd_HArray1OfInteger > const *":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_ExtendedString') -> "opencascade::handle< TColStd_HArray1OfInteger > *":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_ExtendedString') -> "opencascade::handle< TColStd_HArray1OfInteger > &":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< TColStd_HArray1OfInteger > &":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Clear(self, *args)
    __swig_destroy__ = _TDataStd.delete_TDataStd_DataMapOfStringHArray1OfInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_Size(self)
TDataStd_DataMapOfStringHArray1OfInteger_swigregister = _TDataStd.TDataStd_DataMapOfStringHArray1OfInteger_swigregister
TDataStd_DataMapOfStringHArray1OfInteger_swigregister(TDataStd_DataMapOfStringHArray1OfInteger)

class TDataStd_DataMapOfStringHArray1OfReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DataMapOfStringHArray1OfReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DataMapOfStringHArray1OfReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfReal >,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfReal >,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfReal >,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfReal >,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_cend(self)

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_DataMapOfStringHArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDataStd_DataMapOfStringHArray1OfReal') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Exchange(self, theOther)

    def Assign(self, theOther: 'TDataStd_DataMapOfStringHArray1OfReal') -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfReal >,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Assign(self, theOther)

    def Set(self, theOther: 'TDataStd_DataMapOfStringHArray1OfReal') -> "NCollection_DataMap< TCollection_ExtendedString,opencascade::handle< TColStd_HArray1OfReal >,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_ExtendedString', theItem: 'opencascade::handle< TColStd_HArray1OfReal > const &') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_ExtendedString', theItem: 'opencascade::handle< TColStd_HArray1OfReal > const &') -> "opencascade::handle< TColStd_HArray1OfReal > *":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_ExtendedString') -> "opencascade::handle< TColStd_HArray1OfReal > const *":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_ExtendedString') -> "opencascade::handle< TColStd_HArray1OfReal > *":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_ExtendedString') -> "opencascade::handle< TColStd_HArray1OfReal > &":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal > &":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Clear(self, *args)
    __swig_destroy__ = _TDataStd.delete_TDataStd_DataMapOfStringHArray1OfReal
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_Size(self)
TDataStd_DataMapOfStringHArray1OfReal_swigregister = _TDataStd.TDataStd_DataMapOfStringHArray1OfReal_swigregister
TDataStd_DataMapOfStringHArray1OfReal_swigregister(TDataStd_DataMapOfStringHArray1OfReal)

class TDataStd_DataMapOfStringReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DataMapOfStringReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DataMapOfStringReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_ExtendedString,double,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringReal_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_ExtendedString,double,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringReal_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_ExtendedString,double,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringReal_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_ExtendedString,double,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringReal_cend(self)

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_DataMapOfStringReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDataStd_DataMapOfStringReal') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringReal_Exchange(self, theOther)

    def Assign(self, theOther: 'TDataStd_DataMapOfStringReal') -> "NCollection_DataMap< TCollection_ExtendedString,Standard_Real,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringReal_Assign(self, theOther)

    def Set(self, theOther: 'TDataStd_DataMapOfStringReal') -> "NCollection_DataMap< TCollection_ExtendedString,Standard_Real,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringReal_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringReal_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_ExtendedString', theItem: 'double const &') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringReal_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_ExtendedString', theItem: 'double const &') -> "double *":
        return _TDataStd.TDataStd_DataMapOfStringReal_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringReal_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringReal_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_ExtendedString') -> "double const *":
        return _TDataStd.TDataStd_DataMapOfStringReal_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringReal_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_ExtendedString') -> "double *":
        return _TDataStd.TDataStd_DataMapOfStringReal_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_ExtendedString') -> "double &":
        return _TDataStd.TDataStd_DataMapOfStringReal_ChangeFind(self, theKey)

    def __call__(self, *args) -> "double &":
        return _TDataStd.TDataStd_DataMapOfStringReal___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TDataStd.TDataStd_DataMapOfStringReal_Clear(self, *args)
    __swig_destroy__ = _TDataStd.delete_TDataStd_DataMapOfStringReal
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_DataMapOfStringReal_Size(self)
TDataStd_DataMapOfStringReal_swigregister = _TDataStd.TDataStd_DataMapOfStringReal_swigregister
TDataStd_DataMapOfStringReal_swigregister(TDataStd_DataMapOfStringReal)

class TDataStd_DataMapOfStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DataMapOfStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DataMapOfStringString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_ExtendedString,TCollection_ExtendedString,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringString_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_ExtendedString,TCollection_ExtendedString,TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_DataMapOfStringString_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_ExtendedString,TCollection_ExtendedString,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringString_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_ExtendedString,TCollection_ExtendedString,TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_DataMapOfStringString_cend(self)

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_DataMapOfStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDataStd_DataMapOfStringString') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringString_Exchange(self, theOther)

    def Assign(self, theOther: 'TDataStd_DataMapOfStringString') -> "NCollection_DataMap< TCollection_ExtendedString,TCollection_ExtendedString,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringString_Assign(self, theOther)

    def Set(self, theOther: 'TDataStd_DataMapOfStringString') -> "NCollection_DataMap< TCollection_ExtendedString,TCollection_ExtendedString,TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_DataMapOfStringString_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDataStd.TDataStd_DataMapOfStringString_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_ExtendedString', theItem: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringString_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_ExtendedString', theItem: 'TCollection_ExtendedString') -> "TCollection_ExtendedString *":
        return _TDataStd.TDataStd_DataMapOfStringString_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringString_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringString_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_ExtendedString') -> "TCollection_ExtendedString const *":
        return _TDataStd.TDataStd_DataMapOfStringString_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TDataStd.TDataStd_DataMapOfStringString_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_ExtendedString') -> "TCollection_ExtendedString *":
        return _TDataStd.TDataStd_DataMapOfStringString_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_ExtendedString') -> "TCollection_ExtendedString &":
        return _TDataStd.TDataStd_DataMapOfStringString_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TCollection_ExtendedString &":
        return _TDataStd.TDataStd_DataMapOfStringString___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TDataStd.TDataStd_DataMapOfStringString_Clear(self, *args)
    __swig_destroy__ = _TDataStd.delete_TDataStd_DataMapOfStringString
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_DataMapOfStringString_Size(self)
TDataStd_DataMapOfStringString_swigregister = _TDataStd.TDataStd_DataMapOfStringString_swigregister
TDataStd_DataMapOfStringString_swigregister(TDataStd_DataMapOfStringString)

class TDataStd_LabelArray1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_LabelArray1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_LabelArray1, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< TDF_Label >::iterator":
        return _TDataStd.TDataStd_LabelArray1_begin(self)

    def end(self) -> "NCollection_Array1< TDF_Label >::iterator":
        return _TDataStd.TDataStd_LabelArray1_end(self)

    def cbegin(self) -> "NCollection_Array1< TDF_Label >::const_iterator":
        return _TDataStd.TDataStd_LabelArray1_cbegin(self)

    def cend(self) -> "NCollection_Array1< TDF_Label >::const_iterator":
        return _TDataStd.TDataStd_LabelArray1_cend(self)

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_LabelArray1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'TDF_Label') -> "void":
        return _TDataStd.TDataStd_LabelArray1_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_LabelArray1_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_LabelArray1_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TDataStd.TDataStd_LabelArray1_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_LabelArray1_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_LabelArray1_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TDataStd.TDataStd_LabelArray1_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TDataStd.TDataStd_LabelArray1_IsAllocated(self)

    def Assign(self, theOther: 'TDataStd_LabelArray1') -> "NCollection_Array1< TDF_Label > &":
        return _TDataStd.TDataStd_LabelArray1_Assign(self, theOther)

    def Move(self, theOther: 'TDataStd_LabelArray1') -> "NCollection_Array1< TDF_Label > &":
        return _TDataStd.TDataStd_LabelArray1_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< TDF_Label > &":
        return _TDataStd.TDataStd_LabelArray1_Set(self, *args)

    def First(self) -> "TDF_Label const &":
        return _TDataStd.TDataStd_LabelArray1_First(self)

    def ChangeFirst(self) -> "TDF_Label &":
        return _TDataStd.TDataStd_LabelArray1_ChangeFirst(self)

    def Last(self) -> "TDF_Label const &":
        return _TDataStd.TDataStd_LabelArray1_Last(self)

    def ChangeLast(self) -> "TDF_Label &":
        return _TDataStd.TDataStd_LabelArray1_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TDF_Label const &":
        return _TDataStd.TDataStd_LabelArray1_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TDF_Label &":
        return _TDataStd.TDataStd_LabelArray1_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TDF_Label &":
        return _TDataStd.TDataStd_LabelArray1___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TDF_Label') -> "void":
        return _TDataStd.TDataStd_LabelArray1_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TDataStd.TDataStd_LabelArray1_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TDataStd.delete_TDataStd_LabelArray1
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TDataStd_LabelArray1_swigregister = _TDataStd.TDataStd_LabelArray1_swigregister
TDataStd_LabelArray1_swigregister(TDataStd_LabelArray1)

class TDataStd_ListIteratorOfListOfByte(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ListIteratorOfListOfByte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ListIteratorOfListOfByte, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_ListIteratorOfListOfByte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TDataStd.TDataStd_ListIteratorOfListOfByte_More(self)

    def Next(self) -> "void":
        return _TDataStd.TDataStd_ListIteratorOfListOfByte_Next(self)

    def Value(self) -> "unsigned char const &":
        return _TDataStd.TDataStd_ListIteratorOfListOfByte_Value(self)

    def ChangeValue(self) -> "unsigned char &":
        return _TDataStd.TDataStd_ListIteratorOfListOfByte_ChangeValue(self)
    __swig_destroy__ = _TDataStd.delete_TDataStd_ListIteratorOfListOfByte
    __del__ = lambda self: None
TDataStd_ListIteratorOfListOfByte_swigregister = _TDataStd.TDataStd_ListIteratorOfListOfByte_swigregister
TDataStd_ListIteratorOfListOfByte_swigregister(TDataStd_ListIteratorOfListOfByte)

class TDataStd_ListIteratorOfListOfExtendedString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ListIteratorOfListOfExtendedString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ListIteratorOfListOfExtendedString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_ListIteratorOfListOfExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_More(self)

    def Next(self) -> "void":
        return _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_Next(self)

    def Value(self) -> "TCollection_ExtendedString const &":
        return _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_Value(self)

    def ChangeValue(self) -> "TCollection_ExtendedString &":
        return _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_ChangeValue(self)
    __swig_destroy__ = _TDataStd.delete_TDataStd_ListIteratorOfListOfExtendedString
    __del__ = lambda self: None
TDataStd_ListIteratorOfListOfExtendedString_swigregister = _TDataStd.TDataStd_ListIteratorOfListOfExtendedString_swigregister
TDataStd_ListIteratorOfListOfExtendedString_swigregister(TDataStd_ListIteratorOfListOfExtendedString)

class TDataStd_ListOfByte(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ListOfByte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ListOfByte, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< unsigned char >::iterator":
        return _TDataStd.TDataStd_ListOfByte_begin(self)

    def end(self) -> "NCollection_List< unsigned char >::iterator":
        return _TDataStd.TDataStd_ListOfByte_end(self)

    def cbegin(self) -> "NCollection_List< unsigned char >::const_iterator":
        return _TDataStd.TDataStd_ListOfByte_cbegin(self)

    def cend(self) -> "NCollection_List< unsigned char >::const_iterator":
        return _TDataStd.TDataStd_ListOfByte_cend(self)

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_ListOfByte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_ListOfByte_Size(self)

    def Assign(self, theOther: 'TDataStd_ListOfByte') -> "NCollection_List< Standard_Byte > &":
        return _TDataStd.TDataStd_ListOfByte_Assign(self, theOther)

    def Set(self, theOther: 'TDataStd_ListOfByte') -> "NCollection_List< Standard_Byte > &":
        return _TDataStd.TDataStd_ListOfByte_Set(self, theOther)

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDataStd.TDataStd_ListOfByte_Clear(self, theAllocator)

    def First(self) -> "unsigned char const &":
        return _TDataStd.TDataStd_ListOfByte_First(self)

    def Last(self) -> "unsigned char const &":
        return _TDataStd.TDataStd_ListOfByte_Last(self)

    def Append(self, *args) -> "void":
        return _TDataStd.TDataStd_ListOfByte_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDataStd.TDataStd_ListOfByte_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TDataStd.TDataStd_ListOfByte_RemoveFirst(self)

    def Remove(self, theIter: 'TDataStd_ListIteratorOfListOfByte') -> "void":
        return _TDataStd.TDataStd_ListOfByte_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TDataStd.TDataStd_ListOfByte_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDataStd.TDataStd_ListOfByte_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TDataStd.TDataStd_ListOfByte_Reverse(self)
    __swig_destroy__ = _TDataStd.delete_TDataStd_ListOfByte
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDataStd_ListOfByte_swigregister = _TDataStd.TDataStd_ListOfByte_swigregister
TDataStd_ListOfByte_swigregister(TDataStd_ListOfByte)

class TDataStd_ListOfExtendedString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ListOfExtendedString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ListOfExtendedString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_ListOfExtendedString_begin(self)

    def end(self) -> "NCollection_List< TCollection_ExtendedString >::iterator":
        return _TDataStd.TDataStd_ListOfExtendedString_end(self)

    def cbegin(self) -> "NCollection_List< TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_ListOfExtendedString_cbegin(self)

    def cend(self) -> "NCollection_List< TCollection_ExtendedString >::const_iterator":
        return _TDataStd.TDataStd_ListOfExtendedString_cend(self)

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_ListOfExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDataStd.TDataStd_ListOfExtendedString_Size(self)

    def Assign(self, theOther: 'TDataStd_ListOfExtendedString') -> "NCollection_List< TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_ListOfExtendedString_Assign(self, theOther)

    def Set(self, theOther: 'TDataStd_ListOfExtendedString') -> "NCollection_List< TCollection_ExtendedString > &":
        return _TDataStd.TDataStd_ListOfExtendedString_Set(self, theOther)

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDataStd.TDataStd_ListOfExtendedString_Clear(self, theAllocator)

    def First(self) -> "TCollection_ExtendedString const &":
        return _TDataStd.TDataStd_ListOfExtendedString_First(self)

    def Last(self) -> "TCollection_ExtendedString const &":
        return _TDataStd.TDataStd_ListOfExtendedString_Last(self)

    def Append(self, *args) -> "void":
        return _TDataStd.TDataStd_ListOfExtendedString_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDataStd.TDataStd_ListOfExtendedString_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TDataStd.TDataStd_ListOfExtendedString_RemoveFirst(self)

    def Remove(self, theIter: 'TDataStd_ListIteratorOfListOfExtendedString') -> "void":
        return _TDataStd.TDataStd_ListOfExtendedString_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TDataStd.TDataStd_ListOfExtendedString_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDataStd.TDataStd_ListOfExtendedString_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TDataStd.TDataStd_ListOfExtendedString_Reverse(self)
    __swig_destroy__ = _TDataStd.delete_TDataStd_ListOfExtendedString
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDataStd_ListOfExtendedString_swigregister = _TDataStd.TDataStd_ListOfExtendedString_swigregister
TDataStd_ListOfExtendedString_swigregister(TDataStd_ListOfExtendedString)

class tdatastd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tdatastd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tdatastd, name)
    __repr__ = _swig_repr

    def IDList(*args) -> "void":
        """
        Appends to <anidlist> the list of the attributes ids of this package. caution: <anidlist> is not cleared before use.

        Parameters
        ----------
        anIDList: TDF_IDList

        Returns
        -------
        None

        """
        return _TDataStd.tdatastd_IDList(*args)

    IDList = staticmethod(IDList)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TDataStd.new_tdatastd()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDataStd.delete_tdatastd
    __del__ = lambda self: None
tdatastd_swigregister = _TDataStd.tdatastd_swigregister
tdatastd_swigregister(tdatastd)

def tdatastd_IDList(*args) -> "void":
    """
    Appends to <anidlist> the list of the attributes ids of this package. caution: <anidlist> is not cleared before use.

    Parameters
    ----------
    anIDList: TDF_IDList

    Returns
    -------
    None

    """
    return _TDataStd.tdatastd_IDList(*args)

class TDataStd_AsciiString(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_AsciiString, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_AsciiString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_AsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_AsciiString self) -> std::string"""
        return _TDataStd.TDataStd_AsciiString_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_AsciiString self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_AsciiString self) -> std::string
        """
        return _TDataStd.TDataStd_AsciiString_DumpJsonToString(self, depth)


    def Get(self, *args) -> "TCollection_AsciiString const &":
        """
        No available documentation.

        Returns
        -------
        TCollection_AsciiString

        """
        return _TDataStd.TDataStd_AsciiString_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods ============= returns the guid of the attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_AsciiString_GetID(*args)

    GetID = staticmethod(GetID)

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_AsciiString_IsEmpty(self, *args)


    def Set(self, *args) -> "void":
        """
        Finds, or creates an asciistring attribute and sets the string. the asciistring attribute is returned. asciistring methods ===================.

        Parameters
        ----------
        label: TDF_Label
        string: TCollection_AsciiString

        Returns
        -------
        opencascade::handle<TDataStd_AsciiString>

        Finds, or creates, an asciistring attribute with explicit user defined <guid> and sets <string>. the name attribute is returned. .

        Parameters
        ----------
        label: TDF_Label
        guid: Standard_GUID
        string: TCollection_AsciiString

        Returns
        -------
        opencascade::handle<TDataStd_AsciiString>

        No available documentation.

        Parameters
        ----------
        S: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_AsciiString_Set(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit user defined guid to the attribute.

        Parameters
        ----------
        guid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_AsciiString_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_AsciiString_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_AsciiString
    __del__ = lambda self: None
TDataStd_AsciiString_swigregister = _TDataStd.TDataStd_AsciiString_swigregister
TDataStd_AsciiString_swigregister(TDataStd_AsciiString)

def TDataStd_AsciiString_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods ============= returns the guid of the attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_AsciiString_GetID(*args)

class TDataStd_BooleanArray(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_BooleanArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_BooleanArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_BooleanArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_BooleanArray self) -> std::string"""
        return _TDataStd.TDataStd_BooleanArray_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_BooleanArray self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_BooleanArray self) -> std::string
        """
        return _TDataStd.TDataStd_BooleanArray_DumpJsonToString(self, depth)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ============== returns an id for array.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_BooleanArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Init(self, *args) -> "void":
        """
        Initialize the inner array with bounds from <lower> to <upper>.

        Parameters
        ----------
        lower: int
        upper: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_BooleanArray_Init(self, *args)


    def InternalArray(self, *args) -> "opencascade::handle< TColStd_HArray1OfByte > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfByte>

        """
        return _TDataStd.TDataStd_BooleanArray_InternalArray(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        Returns the number of elements in the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_BooleanArray_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        Returns the lower boundary of the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_BooleanArray_Lower(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_BooleanArray >":
        """
        Finds or creates an attribute with internal boolean array.

        Parameters
        ----------
        label: TDF_Label
        lower: int
        upper: int

        Returns
        -------
        opencascade::handle<TDataStd_BooleanArray>

        Finds or creates an attribute with the array using explicit user defined <guid>.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID
        lower: int
        upper: int

        Returns
        -------
        opencascade::handle<TDataStd_BooleanArray>

        """
        return _TDataStd.TDataStd_BooleanArray_Set(*args)

    Set = staticmethod(Set)

    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_BooleanArray_SetID(self, *args)


    def SetInternalArray(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        values: TColStd_HArray1OfByte

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_BooleanArray_SetInternalArray(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Sets the <index>th element of the array to <value> outofrange exception is raised if <index> doesn't respect lower and upper bounds of the internal array.

        Parameters
        ----------
        index: int
        value: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_BooleanArray_SetValue(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        Returns the upper boundary of the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_BooleanArray_Upper(self, *args)


    def Value(self, *args) -> "Standard_Boolean":
        """
        Return the value of the <index>th element of the array.

        Parameters
        ----------
        Index: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_BooleanArray_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_BooleanArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_BooleanArray
    __del__ = lambda self: None
TDataStd_BooleanArray_swigregister = _TDataStd.TDataStd_BooleanArray_swigregister
TDataStd_BooleanArray_swigregister(TDataStd_BooleanArray)

def TDataStd_BooleanArray_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ============== returns an id for array.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_BooleanArray_GetID(*args)

def TDataStd_BooleanArray_Set(*args) -> "opencascade::handle< TDataStd_BooleanArray >":
    """
    Finds or creates an attribute with internal boolean array.

    Parameters
    ----------
    label: TDF_Label
    lower: int
    upper: int

    Returns
    -------
    opencascade::handle<TDataStd_BooleanArray>

    Finds or creates an attribute with the array using explicit user defined <guid>.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID
    lower: int
    upper: int

    Returns
    -------
    opencascade::handle<TDataStd_BooleanArray>

    """
    return _TDataStd.TDataStd_BooleanArray_Set(*args)

class TDataStd_BooleanList(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_BooleanList, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_BooleanList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_BooleanList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Append(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_BooleanList_Append(self, *args)


    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_BooleanList_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_BooleanList self) -> std::string"""
        return _TDataStd.TDataStd_BooleanList_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_BooleanList self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_BooleanList self) -> std::string
        """
        return _TDataStd.TDataStd_BooleanList_DumpJsonToString(self, depth)


    def Extent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_BooleanList_Extent(self, *args)


    def First(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_BooleanList_First(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ============== returns the id of the list of booleans attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_BooleanList_GetID(*args)

    GetID = staticmethod(GetID)

    def InsertAfter(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> after the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        after_value: bool

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_BooleanList_InsertAfter(self, *args)


    def InsertBefore(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> before the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        before_value: bool

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_BooleanList_InsertBefore(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_BooleanList_IsEmpty(self, *args)


    def Last(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_BooleanList_Last(self, *args)


    def List(self, *args) -> "TDataStd_ListOfByte const &":
        """List(TDataStd_BooleanList self) -> TDataStd_ListOfByte"""
        return _TDataStd.TDataStd_BooleanList_List(self, *args)


    def Prepend(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_BooleanList_Prepend(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        Removes a value at <index> position.

        Parameters
        ----------
        index: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_BooleanList_Remove(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_BooleanList >":
        """
        Finds or creates a list of boolean values attribute.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_BooleanList>

        Finds or creates a list of boolean values attribute with explicit user defined <guid>.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID

        Returns
        -------
        opencascade::handle<TDataStd_BooleanList>

        """
        return _TDataStd.TDataStd_BooleanList_Set(*args)

    Set = staticmethod(Set)

    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_BooleanList_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_BooleanList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_BooleanList
    __del__ = lambda self: None
TDataStd_BooleanList_swigregister = _TDataStd.TDataStd_BooleanList_swigregister
TDataStd_BooleanList_swigregister(TDataStd_BooleanList)

def TDataStd_BooleanList_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ============== returns the id of the list of booleans attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_BooleanList_GetID(*args)

def TDataStd_BooleanList_Set(*args) -> "opencascade::handle< TDataStd_BooleanList >":
    """
    Finds or creates a list of boolean values attribute.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_BooleanList>

    Finds or creates a list of boolean values attribute with explicit user defined <guid>.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID

    Returns
    -------
    opencascade::handle<TDataStd_BooleanList>

    """
    return _TDataStd.TDataStd_BooleanList_Set(*args)

class TDataStd_ByteArray(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ByteArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ByteArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_ByteArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeArray(self, *args) -> "void":
        """
        Sets the inner array <myvalue> of the attribute to <newarray>. if value of <newarray> differs from <myvalue>, backup performed and myvalue refers to new instance of harray1ofinteger that holds <newarray> values. if <ischeckitems> equal true each item of <newarray> will be checked with each item of <myvalue> for coincidence (to avoid backup).

        Parameters
        ----------
        newArray: TColStd_HArray1OfByte
        isCheckItems: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ByteArray_ChangeArray(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_ByteArray self) -> std::string"""
        return _TDataStd.TDataStd_ByteArray_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_ByteArray self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_ByteArray self) -> std::string
        """
        return _TDataStd.TDataStd_ByteArray_DumpJsonToString(self, depth)


    def GetDelta(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ByteArray_GetDelta(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ============== returns an id for array.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_ByteArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Init(self, *args) -> "void":
        """
        Initialize the inner array with bounds from <lower> to <upper>.

        Parameters
        ----------
        lower: int
        upper: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ByteArray_Init(self, *args)


    def InternalArray(self, *args) -> "opencascade::handle< TColStd_HArray1OfByte > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfByte>

        """
        return _TDataStd.TDataStd_ByteArray_InternalArray(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        Returns the number of elements in the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ByteArray_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        Returns the lower boundary of the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ByteArray_Lower(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_ByteArray >":
        """
        Finds or creates an attribute with the array on the specified label. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, all input parameters are refused and the found attribute is returned.

        Parameters
        ----------
        label: TDF_Label
        lower: int
        upper: int
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_ByteArray>

        Finds or creates an attribute with byte array and explicit user defined <guid> on the specified label.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID
        lower: int
        upper: int
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_ByteArray>

        """
        return _TDataStd.TDataStd_ByteArray_Set(*args)

    Set = staticmethod(Set)

    def SetDelta(self, *args) -> "void":
        """
        For internal use only!.

        Parameters
        ----------
        isDelta: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ByteArray_SetDelta(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ByteArray_SetID(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Sets the <index>th element of the array to <value> outofrange exception is raised if <index> doesn't respect lower and upper bounds of the internal array.

        Parameters
        ----------
        index: int
        value: Standard_Byte

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ByteArray_SetValue(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        Returns the upper boundary of the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ByteArray_Upper(self, *args)


    def Value(self, *args) -> "Standard_Byte":
        """
        Return the value of the <index>th element of the array.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Standard_Byte

        """
        return _TDataStd.TDataStd_ByteArray_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_ByteArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_ByteArray
    __del__ = lambda self: None
TDataStd_ByteArray_swigregister = _TDataStd.TDataStd_ByteArray_swigregister
TDataStd_ByteArray_swigregister(TDataStd_ByteArray)

def TDataStd_ByteArray_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ============== returns an id for array.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_ByteArray_GetID(*args)

def TDataStd_ByteArray_Set(*args) -> "opencascade::handle< TDataStd_ByteArray >":
    """
    Finds or creates an attribute with the array on the specified label. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, all input parameters are refused and the found attribute is returned.

    Parameters
    ----------
    label: TDF_Label
    lower: int
    upper: int
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_ByteArray>

    Finds or creates an attribute with byte array and explicit user defined <guid> on the specified label.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID
    lower: int
    upper: int
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_ByteArray>

    """
    return _TDataStd.TDataStd_ByteArray_Set(*args)

class TDataStd_ChildNodeIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ChildNodeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ChildNodeIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty iterator.

        Returns
        -------
        None

        Iterates on the childstepren of the given step. if <alllevels> option is set to true, it explores not only the first, but all the sub step levels.

        Parameters
        ----------
        aTreeNode: TDataStd_TreeNode
        allLevels: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_ChildNodeIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args) -> "void":
        """
        Initializes the iteration on the children step of the given step. if <alllevels> option is set to true, it explores not only the first, but all the sub step levels.

        Parameters
        ----------
        aTreeNode: TDataStd_TreeNode
        allLevels: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ChildNodeIterator_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a current item in the iteration.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ChildNodeIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Move to the next item.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ChildNodeIterator_Next(self, *args)


    def NextBrother(self, *args) -> "void":
        """
        Move to the next brother. if there is none, go up etc. this method is interesting only with 'alllevels' behavior, because it avoids to explore the current step childstepren.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ChildNodeIterator_NextBrother(self, *args)


    def Value(self, *args) -> "opencascade::handle< TDataStd_TreeNode > const &":
        """
        Returns the current item; a null step if there is no one.

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_ChildNodeIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_ChildNodeIterator
    __del__ = lambda self: None
TDataStd_ChildNodeIterator_swigregister = _TDataStd.TDataStd_ChildNodeIterator_swigregister
TDataStd_ChildNodeIterator_swigregister(TDataStd_ChildNodeIterator)

class TDataStd_Current(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Current, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Current, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Current(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Current self) -> std::string"""
        return _TDataStd.TDataStd_Current_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_Current self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_Current self) -> std::string
        """
        return _TDataStd.TDataStd_Current_DumpJsonToString(self, depth)


    def Get(*args) -> "TDF_Label":
        """
        Returns current of <acces> framework. raise if (!has).

        Parameters
        ----------
        acces: TDF_Label

        Returns
        -------
        TDF_Label

        """
        return _TDataStd.TDataStd_Current_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods =============.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Current_GetID(*args)

    GetID = staticmethod(GetID)

    def GetLabel(self, *args) -> "TDF_Label":
        """
        No available documentation.

        Returns
        -------
        TDF_Label

        """
        return _TDataStd.TDataStd_Current_GetLabel(self, *args)


    def Has(*args) -> "Standard_Boolean":
        """
        Returns true if a current label is managed in <acces> framework. class methods =============.

        Parameters
        ----------
        acces: TDF_Label

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_Current_Has(*args)

    Has = staticmethod(Has)

    def Set(*args) -> "void":
        """
        Set <l> as current of <l> framework.

        Parameters
        ----------
        L: TDF_Label

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Current_Set(*args)

    Set = staticmethod(Set)

    def SetLabel(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        current: TDF_Label

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Current_SetLabel(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Current_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Current
    __del__ = lambda self: None
TDataStd_Current_swigregister = _TDataStd.TDataStd_Current_swigregister
TDataStd_Current_swigregister(TDataStd_Current)

def TDataStd_Current_Get(*args) -> "TDF_Label":
    """
    Returns current of <acces> framework. raise if (!has).

    Parameters
    ----------
    acces: TDF_Label

    Returns
    -------
    TDF_Label

    """
    return _TDataStd.TDataStd_Current_Get(*args)

def TDataStd_Current_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods =============.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Current_GetID(*args)

def TDataStd_Current_Has(*args) -> "Standard_Boolean":
    """
    Returns true if a current label is managed in <acces> framework. class methods =============.

    Parameters
    ----------
    acces: TDF_Label

    Returns
    -------
    bool

    """
    return _TDataStd.TDataStd_Current_Has(*args)

def TDataStd_Current_Set(*args) -> "void":
    """
    Set <l> as current of <l> framework.

    Parameters
    ----------
    L: TDF_Label

    Returns
    -------
    None

    """
    return _TDataStd.TDataStd_Current_Set(*args)

class TDataStd_DeltaOnModificationOfByteArray(OCC.Core.TDF.TDF_DeltaOnModification):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DeltaOnModificationOfByteArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DeltaOnModificationOfByteArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initializes a tdf_deltaonmodification.

        Parameters
        ----------
        Arr: TDataStd_ByteArray

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_DeltaOnModificationOfByteArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_DeltaOnModificationOfByteArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_DeltaOnModificationOfByteArray
    __del__ = lambda self: None
TDataStd_DeltaOnModificationOfByteArray_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfByteArray_swigregister
TDataStd_DeltaOnModificationOfByteArray_swigregister(TDataStd_DeltaOnModificationOfByteArray)

class TDataStd_DeltaOnModificationOfExtStringArray(OCC.Core.TDF.TDF_DeltaOnModification):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DeltaOnModificationOfExtStringArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DeltaOnModificationOfExtStringArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initializes a tdf_deltaonmodification.

        Parameters
        ----------
        Arr: TDataStd_ExtStringArray

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_DeltaOnModificationOfExtStringArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_DeltaOnModificationOfExtStringArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_DeltaOnModificationOfExtStringArray
    __del__ = lambda self: None
TDataStd_DeltaOnModificationOfExtStringArray_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfExtStringArray_swigregister
TDataStd_DeltaOnModificationOfExtStringArray_swigregister(TDataStd_DeltaOnModificationOfExtStringArray)

class TDataStd_DeltaOnModificationOfIntArray(OCC.Core.TDF.TDF_DeltaOnModification):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DeltaOnModificationOfIntArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DeltaOnModificationOfIntArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initializes a tdf_deltaonmodification.

        Parameters
        ----------
        Arr: TDataStd_IntegerArray

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_DeltaOnModificationOfIntArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_DeltaOnModificationOfIntArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_DeltaOnModificationOfIntArray
    __del__ = lambda self: None
TDataStd_DeltaOnModificationOfIntArray_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfIntArray_swigregister
TDataStd_DeltaOnModificationOfIntArray_swigregister(TDataStd_DeltaOnModificationOfIntArray)

class TDataStd_DeltaOnModificationOfIntPackedMap(OCC.Core.TDF.TDF_DeltaOnModification):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DeltaOnModificationOfIntPackedMap, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DeltaOnModificationOfIntPackedMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initializes a tdf_deltaonmodification.

        Parameters
        ----------
        Arr: TDataStd_IntPackedMap

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_DeltaOnModificationOfIntPackedMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_DeltaOnModificationOfIntPackedMap_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_DeltaOnModificationOfIntPackedMap
    __del__ = lambda self: None
TDataStd_DeltaOnModificationOfIntPackedMap_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfIntPackedMap_swigregister
TDataStd_DeltaOnModificationOfIntPackedMap_swigregister(TDataStd_DeltaOnModificationOfIntPackedMap)

class TDataStd_DeltaOnModificationOfRealArray(OCC.Core.TDF.TDF_DeltaOnModification):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_DeltaOnModificationOfRealArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_DeltaOnModification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_DeltaOnModificationOfRealArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initializes a tdf_deltaonmodification.

        Parameters
        ----------
        Arr: TDataStd_RealArray

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_DeltaOnModificationOfRealArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_DeltaOnModificationOfRealArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_DeltaOnModificationOfRealArray
    __del__ = lambda self: None
TDataStd_DeltaOnModificationOfRealArray_swigregister = _TDataStd.TDataStd_DeltaOnModificationOfRealArray_swigregister
TDataStd_DeltaOnModificationOfRealArray_swigregister(TDataStd_DeltaOnModificationOfRealArray)

class TDataStd_Expression(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Expression, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Expression, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Expression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Expression self) -> std::string"""
        return _TDataStd.TDataStd_Expression_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_Expression self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_Expression self) -> std::string
        """
        return _TDataStd.TDataStd_Expression_DumpJsonToString(self, depth)


    def GetExpression(self, *args) -> "TCollection_ExtendedString const &":
        """
        No available documentation.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Expression_GetExpression(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods =============.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Expression_GetID(*args)

    GetID = staticmethod(GetID)

    def GetVariables(self, *args) -> "TDF_AttributeList &":
        """
        No available documentation.

        Returns
        -------
        TDF_AttributeList

        """
        return _TDataStd.TDataStd_Expression_GetVariables(self, *args)


    def Name(self, *args) -> "TCollection_ExtendedString":
        """
        Build and return the expression name.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Expression_Name(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_Expression >":
        """
        Find, or create, an expression attribute. expressionmethods ============.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_Expression>

        """
        return _TDataStd.TDataStd_Expression_Set(*args)

    Set = staticmethod(Set)

    def SetExpression(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        E: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Expression_SetExpression(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Expression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Expression
    __del__ = lambda self: None
TDataStd_Expression_swigregister = _TDataStd.TDataStd_Expression_swigregister
TDataStd_Expression_swigregister(TDataStd_Expression)

def TDataStd_Expression_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods =============.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Expression_GetID(*args)

def TDataStd_Expression_Set(*args) -> "opencascade::handle< TDataStd_Expression >":
    """
    Find, or create, an expression attribute. expressionmethods ============.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_Expression>

    """
    return _TDataStd.TDataStd_Expression_Set(*args)

class TDataStd_ExtStringArray(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ExtStringArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ExtStringArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_ExtStringArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array(self, *args) -> "opencascade::handle< TColStd_HArray1OfExtendedString > const &":
        """
        Return the inner array of the extstringarray attribute.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfExtendedString>

        """
        return _TDataStd.TDataStd_ExtStringArray_Array(self, *args)


    def ChangeArray(self, *args) -> "void":
        """
        Sets the inner array <myvalue> of the extstringarray attribute to <newarray>. if value of <newarray> differs from <myvalue>, backup performed and myvalue refers to new instance of harray1ofextendedstring that holds <newarray> values if <ischeckitems> equal true each item of <newarray> will be checked with each item of <myvalue> for coincidence (to avoid backup).

        Parameters
        ----------
        newArray: TColStd_HArray1OfExtendedString
        isCheckItems: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringArray_ChangeArray(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_ExtStringArray self) -> std::string"""
        return _TDataStd.TDataStd_ExtStringArray_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_ExtStringArray self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_ExtStringArray self) -> std::string
        """
        return _TDataStd.TDataStd_ExtStringArray_DumpJsonToString(self, depth)


    def GetDelta(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ExtStringArray_GetDelta(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods ============= returns the guid for the attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_ExtStringArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Init(self, *args) -> "void":
        """
        Initializes the inner array with bounds from <lower> to <upper>.

        Parameters
        ----------
        lower: int
        upper: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringArray_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        Return the number of elements of <self>.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ExtStringArray_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        Return the lower bound.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ExtStringArray_Lower(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_ExtStringArray >":
        """
        Finds, or creates, an extstringarray attribute with <lower> and <upper> bounds on the specified label. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, all input parameters are refused and the found attribute is returned.

        Parameters
        ----------
        label: TDF_Label
        lower: int
        upper: int
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_ExtStringArray>

        Finds, or creates, an extstringarray attribute with explicit user defined <guid>. the extstringarray attribute is returned.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID
        lower: int
        upper: int
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_ExtStringArray>

        """
        return _TDataStd.TDataStd_ExtStringArray_Set(*args)

    Set = staticmethod(Set)

    def SetDelta(self, *args) -> "void":
        """
        For internal use only!.

        Parameters
        ----------
        isDelta: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringArray_SetDelta(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringArray_SetID(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Sets the <index>th element of the array to <value> outofrange exception is raised if <index> doesn't respect lower and upper bounds of the internal array.

        Parameters
        ----------
        Index: int
        Value: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringArray_SetValue(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        Return the upper bound.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ExtStringArray_Upper(self, *args)


    def Value(self, *args) -> "TCollection_ExtendedString const &":
        """
        Returns the value of the <index>th element of the array.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ExtStringArray_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_ExtStringArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_ExtStringArray
    __del__ = lambda self: None
TDataStd_ExtStringArray_swigregister = _TDataStd.TDataStd_ExtStringArray_swigregister
TDataStd_ExtStringArray_swigregister(TDataStd_ExtStringArray)

def TDataStd_ExtStringArray_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods ============= returns the guid for the attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_ExtStringArray_GetID(*args)

def TDataStd_ExtStringArray_Set(*args) -> "opencascade::handle< TDataStd_ExtStringArray >":
    """
    Finds, or creates, an extstringarray attribute with <lower> and <upper> bounds on the specified label. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, all input parameters are refused and the found attribute is returned.

    Parameters
    ----------
    label: TDF_Label
    lower: int
    upper: int
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_ExtStringArray>

    Finds, or creates, an extstringarray attribute with explicit user defined <guid>. the extstringarray attribute is returned.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID
    lower: int
    upper: int
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_ExtStringArray>

    """
    return _TDataStd.TDataStd_ExtStringArray_Set(*args)

class TDataStd_ExtStringList(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ExtStringList, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ExtStringList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_ExtStringList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Append(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringList_Append(self, *args)


    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringList_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_ExtStringList self) -> std::string"""
        return _TDataStd.TDataStd_ExtStringList_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_ExtStringList self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_ExtStringList self) -> std::string
        """
        return _TDataStd.TDataStd_ExtStringList_DumpJsonToString(self, depth)


    def Extent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ExtStringList_Extent(self, *args)


    def First(self, *args) -> "TCollection_ExtendedString const &":
        """
        No available documentation.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ExtStringList_First(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ============== returns the id of the list of strings attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_ExtStringList_GetID(*args)

    GetID = staticmethod(GetID)

    def InsertAfter(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> after the first meet of <after_value>.

        Parameters
        ----------
        value: TCollection_ExtendedString
        after_value: TCollection_ExtendedString

        Returns
        -------
        bool

        Inserts the <value> after the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        after_value: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ExtStringList_InsertAfter(self, *args)


    def InsertBefore(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> before the first meet of <before_value>.

        Parameters
        ----------
        value: TCollection_ExtendedString
        before_value: TCollection_ExtendedString

        Returns
        -------
        bool

        Inserts the <value> before the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        before_value: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ExtStringList_InsertBefore(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ExtStringList_IsEmpty(self, *args)


    def Last(self, *args) -> "TCollection_ExtendedString const &":
        """
        No available documentation.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_ExtStringList_Last(self, *args)


    def List(self, *args) -> "TDataStd_ListOfExtendedString const &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_ListOfExtendedString

        """
        return _TDataStd.TDataStd_ExtStringList_List(self, *args)


    def Prepend(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringList_Prepend(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        Removes the first meet of the <value>.

        Parameters
        ----------
        value: TCollection_ExtendedString

        Returns
        -------
        bool

        Removes a value at <index> position.

        Parameters
        ----------
        index: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ExtStringList_Remove(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_ExtStringList >":
        """
        Finds or creates a list of string values attribute with explicit user defined <guid>.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_ExtStringList>

        Finds or creates a list of string values attribute.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID

        Returns
        -------
        opencascade::handle<TDataStd_ExtStringList>

        """
        return _TDataStd.TDataStd_ExtStringList_Set(*args)

    Set = staticmethod(Set)

    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ExtStringList_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_ExtStringList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_ExtStringList
    __del__ = lambda self: None
TDataStd_ExtStringList_swigregister = _TDataStd.TDataStd_ExtStringList_swigregister
TDataStd_ExtStringList_swigregister(TDataStd_ExtStringList)

def TDataStd_ExtStringList_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ============== returns the id of the list of strings attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_ExtStringList_GetID(*args)

def TDataStd_ExtStringList_Set(*args) -> "opencascade::handle< TDataStd_ExtStringList >":
    """
    Finds or creates a list of string values attribute with explicit user defined <guid>.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_ExtStringList>

    Finds or creates a list of string values attribute.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID

    Returns
    -------
    opencascade::handle<TDataStd_ExtStringList>

    """
    return _TDataStd.TDataStd_ExtStringList_Set(*args)

class TDataStd_HDataMapOfStringByte(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_HDataMapOfStringByte, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_HDataMapOfStringByte, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        NbBuckets: int,optional
        	default value is 1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theOther: TDataStd_DataMapOfStringByte

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_HDataMapOfStringByte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeMap(self, *args) -> "TDataStd_DataMapOfStringByte &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringByte

        """
        return _TDataStd.TDataStd_HDataMapOfStringByte_ChangeMap(self, *args)


    def Map(self, *args) -> "TDataStd_DataMapOfStringByte const &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringByte

        """
        return _TDataStd.TDataStd_HDataMapOfStringByte_Map(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_HDataMapOfStringByte_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_HDataMapOfStringByte
    __del__ = lambda self: None
TDataStd_HDataMapOfStringByte_swigregister = _TDataStd.TDataStd_HDataMapOfStringByte_swigregister
TDataStd_HDataMapOfStringByte_swigregister(TDataStd_HDataMapOfStringByte)

class TDataStd_HDataMapOfStringHArray1OfInteger(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_HDataMapOfStringHArray1OfInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_HDataMapOfStringHArray1OfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        NbBuckets: int,optional
        	default value is 1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theOther: TDataStd_DataMapOfStringHArray1OfInteger

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_HDataMapOfStringHArray1OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeMap(self, *args) -> "TDataStd_DataMapOfStringHArray1OfInteger &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringHArray1OfInteger

        """
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_ChangeMap(self, *args)


    def Map(self, *args) -> "TDataStd_DataMapOfStringHArray1OfInteger const &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringHArray1OfInteger

        """
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_Map(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_HDataMapOfStringHArray1OfInteger_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_HDataMapOfStringHArray1OfInteger
    __del__ = lambda self: None
TDataStd_HDataMapOfStringHArray1OfInteger_swigregister = _TDataStd.TDataStd_HDataMapOfStringHArray1OfInteger_swigregister
TDataStd_HDataMapOfStringHArray1OfInteger_swigregister(TDataStd_HDataMapOfStringHArray1OfInteger)

class TDataStd_HDataMapOfStringHArray1OfReal(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_HDataMapOfStringHArray1OfReal, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_HDataMapOfStringHArray1OfReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        NbBuckets: int,optional
        	default value is 1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theOther: TDataStd_DataMapOfStringHArray1OfReal

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_HDataMapOfStringHArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeMap(self, *args) -> "TDataStd_DataMapOfStringHArray1OfReal &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringHArray1OfReal

        """
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_ChangeMap(self, *args)


    def Map(self, *args) -> "TDataStd_DataMapOfStringHArray1OfReal const &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringHArray1OfReal

        """
        return _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_Map(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_HDataMapOfStringHArray1OfReal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_HDataMapOfStringHArray1OfReal
    __del__ = lambda self: None
TDataStd_HDataMapOfStringHArray1OfReal_swigregister = _TDataStd.TDataStd_HDataMapOfStringHArray1OfReal_swigregister
TDataStd_HDataMapOfStringHArray1OfReal_swigregister(TDataStd_HDataMapOfStringHArray1OfReal)

class TDataStd_HDataMapOfStringInteger(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_HDataMapOfStringInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_HDataMapOfStringInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        NbBuckets: int,optional
        	default value is 1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theOther: TColStd_DataMapOfStringInteger

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_HDataMapOfStringInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeMap(self, *args) -> "TColStd_DataMapOfStringInteger &":
        """
        No available documentation.

        Returns
        -------
        TColStd_DataMapOfStringInteger

        """
        return _TDataStd.TDataStd_HDataMapOfStringInteger_ChangeMap(self, *args)


    def Map(self, *args) -> "TColStd_DataMapOfStringInteger const &":
        """
        No available documentation.

        Returns
        -------
        TColStd_DataMapOfStringInteger

        """
        return _TDataStd.TDataStd_HDataMapOfStringInteger_Map(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_HDataMapOfStringInteger_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_HDataMapOfStringInteger
    __del__ = lambda self: None
TDataStd_HDataMapOfStringInteger_swigregister = _TDataStd.TDataStd_HDataMapOfStringInteger_swigregister
TDataStd_HDataMapOfStringInteger_swigregister(TDataStd_HDataMapOfStringInteger)

class TDataStd_HDataMapOfStringReal(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_HDataMapOfStringReal, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_HDataMapOfStringReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        NbBuckets: int,optional
        	default value is 1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theOther: TDataStd_DataMapOfStringReal

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_HDataMapOfStringReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeMap(self, *args) -> "TDataStd_DataMapOfStringReal &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringReal

        """
        return _TDataStd.TDataStd_HDataMapOfStringReal_ChangeMap(self, *args)


    def Map(self, *args) -> "TDataStd_DataMapOfStringReal const &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringReal

        """
        return _TDataStd.TDataStd_HDataMapOfStringReal_Map(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_HDataMapOfStringReal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_HDataMapOfStringReal
    __del__ = lambda self: None
TDataStd_HDataMapOfStringReal_swigregister = _TDataStd.TDataStd_HDataMapOfStringReal_swigregister
TDataStd_HDataMapOfStringReal_swigregister(TDataStd_HDataMapOfStringReal)

class TDataStd_HDataMapOfStringString(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_HDataMapOfStringString, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_HDataMapOfStringString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        NbBuckets: int,optional
        	default value is 1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theOther: TDataStd_DataMapOfStringString

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_HDataMapOfStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeMap(self, *args) -> "TDataStd_DataMapOfStringString &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringString

        """
        return _TDataStd.TDataStd_HDataMapOfStringString_ChangeMap(self, *args)


    def Map(self, *args) -> "TDataStd_DataMapOfStringString const &":
        """
        No available documentation.

        Returns
        -------
        TDataStd_DataMapOfStringString

        """
        return _TDataStd.TDataStd_HDataMapOfStringString_Map(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_HDataMapOfStringString_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_HDataMapOfStringString
    __del__ = lambda self: None
TDataStd_HDataMapOfStringString_swigregister = _TDataStd.TDataStd_HDataMapOfStringString_swigregister
TDataStd_HDataMapOfStringString_swigregister(TDataStd_HDataMapOfStringString)

class TDataStd_IntPackedMap(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_IntPackedMap, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_IntPackedMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_IntPackedMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        theKey: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntPackedMap_Add(self, *args)


    def ChangeMap(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        theMap: TColStd_HPackedMapOfInteger

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        theMap: TColStd_PackedMapOfInteger

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntPackedMap_ChangeMap(self, *args)


    def Clear(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntPackedMap_Clear(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        theKey: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntPackedMap_Contains(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_IntPackedMap self) -> std::string"""
        return _TDataStd.TDataStd_IntPackedMap_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_IntPackedMap self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_IntPackedMap self) -> std::string
        """
        return _TDataStd.TDataStd_IntPackedMap_DumpJsonToString(self, depth)


    def Extent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_IntPackedMap_Extent(self, *args)


    def GetDelta(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntPackedMap_GetDelta(self, *args)


    def GetHMap(self, *args) -> "opencascade::handle< TColStd_HPackedMapOfInteger > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HPackedMapOfInteger>

        """
        return _TDataStd.TDataStd_IntPackedMap_GetHMap(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods ============= returns the guid of the attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_IntPackedMap_GetID(*args)

    GetID = staticmethod(GetID)

    def GetMap(self, *args) -> "TColStd_PackedMapOfInteger const &":
        """
        No available documentation.

        Returns
        -------
        TColStd_PackedMapOfInteger

        """
        return _TDataStd.TDataStd_IntPackedMap_GetMap(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntPackedMap_IsEmpty(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        theKey: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntPackedMap_Remove(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_IntPackedMap >":
        """
        Finds or creates an integer map attribute on the given label. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, input parameter <isdelta> is refused and the found attribute returned. attribute methods ===================.

        Parameters
        ----------
        label: TDF_Label
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_IntPackedMap>

        """
        return _TDataStd.TDataStd_IntPackedMap_Set(*args)

    Set = staticmethod(Set)

    def SetDelta(self, *args) -> "void":
        """
        For internal use only!.

        Parameters
        ----------
        isDelta: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntPackedMap_SetDelta(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_IntPackedMap_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_IntPackedMap
    __del__ = lambda self: None
TDataStd_IntPackedMap_swigregister = _TDataStd.TDataStd_IntPackedMap_swigregister
TDataStd_IntPackedMap_swigregister(TDataStd_IntPackedMap)

def TDataStd_IntPackedMap_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods ============= returns the guid of the attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_IntPackedMap_GetID(*args)

def TDataStd_IntPackedMap_Set(*args) -> "opencascade::handle< TDataStd_IntPackedMap >":
    """
    Finds or creates an integer map attribute on the given label. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, input parameter <isdelta> is refused and the found attribute returned. attribute methods ===================.

    Parameters
    ----------
    label: TDF_Label
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_IntPackedMap>

    """
    return _TDataStd.TDataStd_IntPackedMap_Set(*args)

class TDataStd_Integer(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Integer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Integer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Integer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Integer self) -> std::string"""
        return _TDataStd.TDataStd_Integer_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_Integer self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_Integer self) -> std::string
        """
        return _TDataStd.TDataStd_Integer_DumpJsonToString(self, depth)


    def Get(self, *args) -> "Standard_Integer":
        """
        Returns the integer value contained in the attribute.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_Integer_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods ============= returns the guid for integers.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Integer_GetID(*args)

    GetID = staticmethod(GetID)

    def IsCaptured(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a reference on the same label.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_Integer_IsCaptured(self, *args)


    def Set(self, *args) -> "void":
        """
        Finds, or creates, an integer attribute and sets <value> the integer attribute is returned.

        Parameters
        ----------
        label: TDF_Label
        value: int

        Returns
        -------
        opencascade::handle<TDataStd_Integer>

        Finds, or creates, an integer attribute with explicit user defined <guid> and sets <value>. the integer attribute is returned. .

        Parameters
        ----------
        label: TDF_Label
        guid: Standard_GUID
        value: int

        Returns
        -------
        opencascade::handle<TDataStd_Integer>

        Integer methods ===============.

        Parameters
        ----------
        V: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Integer_Set(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        guid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Integer_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Integer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Integer
    __del__ = lambda self: None
TDataStd_Integer_swigregister = _TDataStd.TDataStd_Integer_swigregister
TDataStd_Integer_swigregister(TDataStd_Integer)

def TDataStd_Integer_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods ============= returns the guid for integers.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Integer_GetID(*args)

class TDataStd_IntegerArray(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_IntegerArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_IntegerArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_IntegerArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array(self, *args) -> "opencascade::handle< TColStd_HArray1OfInteger > const &":
        """
        Return the inner array of the integerarray attribute.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfInteger>

        """
        return _TDataStd.TDataStd_IntegerArray_Array(self, *args)


    def ChangeArray(self, *args) -> "void":
        """
        Sets the inner array <myvalue> of the integerarray attribute to <newarray>. if value of <newarray> differs from <myvalue>, backup performed and myvalue refers to new instance of harray1ofinteger that holds <newarray> values if <ischeckitems> equal true each item of <newarray> will be checked with each item of <myvalue> for coincidence (to avoid backup).

        Parameters
        ----------
        newArray: TColStd_HArray1OfInteger
        isCheckItems: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerArray_ChangeArray(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_IntegerArray self) -> std::string"""
        return _TDataStd.TDataStd_IntegerArray_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_IntegerArray self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_IntegerArray self) -> std::string
        """
        return _TDataStd.TDataStd_IntegerArray_DumpJsonToString(self, depth)


    def GetDelta(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntegerArray_GetDelta(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods ============= returns the guid for arrays of integers.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_IntegerArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Init(self, *args) -> "void":
        """
        Initialize the inner array with bounds from <lower> to <upper>.

        Parameters
        ----------
        lower: int
        upper: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerArray_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        Returns the length of this array of integers in terms of the number of elements it contains.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_IntegerArray_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        Returns the lower boundary of this array of integers.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_IntegerArray_Lower(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_IntegerArray >":
        """
        Finds or creates on the <label> an integer array attribute with the specified <lower> and <upper> boundaries. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, all input parameters are refused and the found attribute is returned.

        Parameters
        ----------
        label: TDF_Label
        lower: int
        upper: int
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_IntegerArray>

        Finds, or creates, an integerarray attribute with explicit user defined <guid>. the integerarray attribute is returned.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID
        lower: int
        upper: int
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_IntegerArray>

        """
        return _TDataStd.TDataStd_IntegerArray_Set(*args)

    Set = staticmethod(Set)

    def SetDelta(self, *args) -> "void":
        """
        For internal use only!.

        Parameters
        ----------
        isDelta: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerArray_SetDelta(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerArray_SetID(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Sets the <index>th element of the array to <value> outofrange exception is raised if <index> doesn't respect lower and upper bounds of the internal array.

        Parameters
        ----------
        Index: int
        Value: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerArray_SetValue(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        Return the upper boundary of this array of integers.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_IntegerArray_Upper(self, *args)


    def Value(self, *args) -> "Standard_Integer":
        """
        Return the value of the <index>th element of the array.

        Parameters
        ----------
        Index: int

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_IntegerArray_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_IntegerArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_IntegerArray
    __del__ = lambda self: None
TDataStd_IntegerArray_swigregister = _TDataStd.TDataStd_IntegerArray_swigregister
TDataStd_IntegerArray_swigregister(TDataStd_IntegerArray)

def TDataStd_IntegerArray_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods ============= returns the guid for arrays of integers.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_IntegerArray_GetID(*args)

def TDataStd_IntegerArray_Set(*args) -> "opencascade::handle< TDataStd_IntegerArray >":
    """
    Finds or creates on the <label> an integer array attribute with the specified <lower> and <upper> boundaries. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, all input parameters are refused and the found attribute is returned.

    Parameters
    ----------
    label: TDF_Label
    lower: int
    upper: int
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_IntegerArray>

    Finds, or creates, an integerarray attribute with explicit user defined <guid>. the integerarray attribute is returned.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID
    lower: int
    upper: int
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_IntegerArray>

    """
    return _TDataStd.TDataStd_IntegerArray_Set(*args)

class TDataStd_IntegerList(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_IntegerList, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_IntegerList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_IntegerList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Append(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerList_Append(self, *args)


    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerList_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_IntegerList self) -> std::string"""
        return _TDataStd.TDataStd_IntegerList_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_IntegerList self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_IntegerList self) -> std::string
        """
        return _TDataStd.TDataStd_IntegerList_DumpJsonToString(self, depth)


    def Extent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_IntegerList_Extent(self, *args)


    def First(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_IntegerList_First(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ============== returns the id of the list of integer attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_IntegerList_GetID(*args)

    GetID = staticmethod(GetID)

    def InsertAfter(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> after the first meet of <after_value>.

        Parameters
        ----------
        value: int
        after_value: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntegerList_InsertAfter(self, *args)


    def InsertAfterByIndex(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> after the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        after_value: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntegerList_InsertAfterByIndex(self, *args)


    def InsertBefore(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> before the first meet of <before_value>.

        Parameters
        ----------
        value: int
        before_value: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntegerList_InsertBefore(self, *args)


    def InsertBeforeByIndex(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> before the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        before_value: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntegerList_InsertBeforeByIndex(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntegerList_IsEmpty(self, *args)


    def Last(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_IntegerList_Last(self, *args)


    def List(self, *args) -> "TColStd_ListOfInteger const &":
        """
        No available documentation.

        Returns
        -------
        TColStd_ListOfInteger

        """
        return _TDataStd.TDataStd_IntegerList_List(self, *args)


    def Prepend(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerList_Prepend(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        Removes the first meet of the <value>.

        Parameters
        ----------
        value: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntegerList_Remove(self, *args)


    def RemoveByIndex(self, *args) -> "Standard_Boolean":
        """
        Removes a value at <index> position.

        Parameters
        ----------
        index: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_IntegerList_RemoveByIndex(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_IntegerList >":
        """
        Finds or creates a list of integer values attribute.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_IntegerList>

        Finds or creates a list of integer values attribute with explicit user defined <guid>.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID

        Returns
        -------
        opencascade::handle<TDataStd_IntegerList>

        """
        return _TDataStd.TDataStd_IntegerList_Set(*args)

    Set = staticmethod(Set)

    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_IntegerList_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_IntegerList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_IntegerList
    __del__ = lambda self: None
TDataStd_IntegerList_swigregister = _TDataStd.TDataStd_IntegerList_swigregister
TDataStd_IntegerList_swigregister(TDataStd_IntegerList)

def TDataStd_IntegerList_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ============== returns the id of the list of integer attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_IntegerList_GetID(*args)

def TDataStd_IntegerList_Set(*args) -> "opencascade::handle< TDataStd_IntegerList >":
    """
    Finds or creates a list of integer values attribute.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_IntegerList>

    Finds or creates a list of integer values attribute with explicit user defined <guid>.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID

    Returns
    -------
    opencascade::handle<TDataStd_IntegerList>

    """
    return _TDataStd.TDataStd_IntegerList_Set(*args)

class TDataStd_NamedData(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_NamedData, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_NamedData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_NamedData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeArraysOfIntegers(self, *args) -> "void":
        """
        Replace the container content by new content of the <thearraysofintegers>.

        Parameters
        ----------
        theArraysOfIntegers: TDataStd_DataMapOfStringHArray1OfInteger

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_ChangeArraysOfIntegers(self, *args)


    def ChangeArraysOfReals(self, *args) -> "void":
        """
        Replace the container content by new content of the <thearraysofreals>.

        Parameters
        ----------
        theArraysOfReals: TDataStd_DataMapOfStringHArray1OfReal

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_ChangeArraysOfReals(self, *args)


    def ChangeBytes(self, *args) -> "void":
        """
        Replace the container content by new content of the <thebytes>.

        Parameters
        ----------
        theBytes: TDataStd_DataMapOfStringByte

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_ChangeBytes(self, *args)


    def ChangeIntegers(self, *args) -> "void":
        """
        Replace the container content by new content of the <theintegers>.

        Parameters
        ----------
        theIntegers: TColStd_DataMapOfStringInteger

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_ChangeIntegers(self, *args)


    def ChangeReals(self, *args) -> "void":
        """
        Replace the container content by new content of the <thereals>.

        Parameters
        ----------
        theReals: TDataStd_DataMapOfStringReal

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_ChangeReals(self, *args)


    def ChangeStrings(self, *args) -> "void":
        """
        Replace the container content by new content of the <thestrings>.

        Parameters
        ----------
        theStrings: TDataStd_DataMapOfStringString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_ChangeStrings(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clear data.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_NamedData self) -> std::string"""
        return _TDataStd.TDataStd_NamedData_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_NamedData self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_NamedData self) -> std::string
        """
        return _TDataStd.TDataStd_NamedData_DumpJsonToString(self, depth)


    def GetArrayOfIntegers(self, *args) -> "opencascade::handle< TColStd_HArray1OfInteger > const &":
        """
        Returns the named array of integer values. it returns a null handle if there is no such a named array of integers (use hasarrayofintegers()).

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfInteger>

        """
        return _TDataStd.TDataStd_NamedData_GetArrayOfIntegers(self, *args)


    def GetArrayOfReals(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal > const &":
        """
        Returns the named array of real values. it returns a null handle if there is no such a named array of reals (use hasarrayofreals()).

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _TDataStd.TDataStd_NamedData_GetArrayOfReals(self, *args)


    def GetArraysOfIntegersContainer(self, *args) -> "TDataStd_DataMapOfStringHArray1OfInteger const &":
        """
        Returns the internal container of named arrays of integer values.

        Returns
        -------
        TDataStd_DataMapOfStringHArray1OfInteger

        """
        return _TDataStd.TDataStd_NamedData_GetArraysOfIntegersContainer(self, *args)


    def GetArraysOfRealsContainer(self, *args) -> "TDataStd_DataMapOfStringHArray1OfReal const &":
        """
        Returns the internal container of named arrays of real values.

        Returns
        -------
        TDataStd_DataMapOfStringHArray1OfReal

        """
        return _TDataStd.TDataStd_NamedData_GetArraysOfRealsContainer(self, *args)


    def GetByte(self, *args) -> "Standard_Byte":
        """
        Returns the named byte. it returns 0 if there is no such a named byte (use hasbyte()).

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        Standard_Byte

        """
        return _TDataStd.TDataStd_NamedData_GetByte(self, *args)


    def GetBytesContainer(self, *args) -> "TDataStd_DataMapOfStringByte const &":
        """
        Returns the internal container of named bytes.

        Returns
        -------
        TDataStd_DataMapOfStringByte

        """
        return _TDataStd.TDataStd_NamedData_GetBytesContainer(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Returns the id of the named data attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_NamedData_GetID(*args)

    GetID = staticmethod(GetID)

    def GetInteger(self, *args) -> "Standard_Integer":
        """
        Returns the integer value specified by the name. it returns 0 if internal map doesn't contain the specified integer (use hasinteger() to check before).

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_NamedData_GetInteger(self, *args)


    def GetIntegersContainer(self, *args) -> "TColStd_DataMapOfStringInteger const &":
        """
        Returns the internal container of named integers.

        Returns
        -------
        TColStd_DataMapOfStringInteger

        """
        return _TDataStd.TDataStd_NamedData_GetIntegersContainer(self, *args)


    def GetReal(self, *args) -> "Standard_Real":
        """
        Returns the named real. it returns 0.0 if there is no such a named real (use hasreal()).

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        float

        """
        return _TDataStd.TDataStd_NamedData_GetReal(self, *args)


    def GetRealsContainer(self, *args) -> "TDataStd_DataMapOfStringReal const &":
        """
        Returns the internal container of named reals.

        Returns
        -------
        TDataStd_DataMapOfStringReal

        """
        return _TDataStd.TDataStd_NamedData_GetRealsContainer(self, *args)


    def GetString(self, *args) -> "TCollection_ExtendedString const &":
        """
        Returns the named string. it returns an empty string if there is no such a named string (use hasstring()).

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_NamedData_GetString(self, *args)


    def GetStringsContainer(self, *args) -> "TDataStd_DataMapOfStringString const &":
        """
        Returns the internal container of named strings.

        Returns
        -------
        TDataStd_DataMapOfStringString

        """
        return _TDataStd.TDataStd_NamedData_GetStringsContainer(self, *args)


    def HasArrayOfIntegers(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute contains this named array of integer values.

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasArrayOfIntegers(self, *args)


    def HasArrayOfReals(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute contains this named array of real values.

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasArrayOfReals(self, *args)


    def HasArraysOfIntegers(self, *args) -> "Standard_Boolean":
        """
        Returns true if there are some named arrays of integer values in the attribute.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasArraysOfIntegers(self, *args)


    def HasArraysOfReals(self, *args) -> "Standard_Boolean":
        """
        Returns true if there are some named arrays of real values in the attribute.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasArraysOfReals(self, *args)


    def HasByte(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute contains this named byte.

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasByte(self, *args)


    def HasBytes(self, *args) -> "Standard_Boolean":
        """
        Returns true if there are some named bytes in the attribute.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasBytes(self, *args)


    def HasDeferredData(self, *args) -> "Standard_Boolean":
        """
        Returns true if some data is not loaded from deferred storage and can be loaded using loaddeferreddata(). //! late-load interface allows to avoid loading auxiliary data into memory until it is needed by application and also speed up reader by skipping data chunks in file. this feature requires file format having special structure, and usually implies read-only access, therefore default implementation will return false here. //! late-load elements require special attention to ensure data consistency, as such elements are created in undefined state (no data) and undo/redo mechanism will not work until deferred data being loaded. //! usage scenarios: - application displays model in read-only way. late-load elements are loaded temporarily on demand and immediatly unloaded. thenameddata->loaddeferreddata (true); tcollection_asciistring avalue = thenameddata->getstring (thekey); thenameddata->unloaddeferreddata(); - application saves the model into another format. all late-load elements should be loaded (at least temporary during operation). - application modifies the model. late-load element should be loaded with removed link to deferred storage, so that undo()/redo() will work as expected since loading. thenameddata->loaddeferreddata (false); thenameddata->setstring (thekey, thenewvalue);.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasDeferredData(self, *args)


    def HasInteger(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute contains specified by name integer value.

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasInteger(self, *args)


    def HasIntegers(self, *args) -> "Standard_Boolean":
        """
        Returns true if at least one named integer value is kept in the attribute.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasIntegers(self, *args)


    def HasReal(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute contains a real specified by name.

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasReal(self, *args)


    def HasReals(self, *args) -> "Standard_Boolean":
        """
        Returns true if at least one named real value is kept in the attribute.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasReals(self, *args)


    def HasString(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute contains this named string.

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasString(self, *args)


    def HasStrings(self, *args) -> "Standard_Boolean":
        """
        Returns true if there are some named strings in the attribute.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_HasStrings(self, *args)


    def LoadDeferredData(self, *args) -> "Standard_Boolean":
        """
        Load data from deferred storage, without calling backup(). as result, the content of the object will be overidden by data from deferred storage (which is normally read-only). @param thetokeepdeferred [in] when true, the link to deferred storage will be preserved  so that it will be possible calling unloaddeferreddata() afterwards for releasing memory returns false if deferred storage is unavailable or deferred data has been already loaded.

        Parameters
        ----------
        theToKeepDeferred: bool,optional
        	default value is false

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_LoadDeferredData(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_NamedData >":
        """
        Finds or creates a named data attribute.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_NamedData>

        """
        return _TDataStd.TDataStd_NamedData_Set(*args)

    Set = staticmethod(Set)

    def SetArrayOfIntegers(self, *args) -> "void":
        """
        Defines a named array of integer values. @param thename [in] key @param thearrayofintegers [in] new value, overrides existing (passed array will be copied by value!).

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theArrayOfIntegers: TColStd_HArray1OfInteger

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_SetArrayOfIntegers(self, *args)


    def SetArrayOfReals(self, *args) -> "void":
        """
        Defines a named array of real values. @param thename [in] key @param thearrayofintegers [in] new value, overrides existing (passed array will be copied by value!).

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theArrayOfReals: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_SetArrayOfReals(self, *args)


    def SetByte(self, *args) -> "void":
        """
        Defines a named byte. if the byte already exists, it changes its value to <thebyte>.

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theByte: Standard_Byte

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_SetByte(self, *args)


    def SetInteger(self, *args) -> "void":
        """
        Defines a named integer. if the integer already exists, it changes its value to <theinteger>.

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theInteger: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_SetInteger(self, *args)


    def SetReal(self, *args) -> "void":
        """
        Defines a named real. if the real already exists, it changes its value to <thereal>.

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theReal: float

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_SetReal(self, *args)


    def SetString(self, *args) -> "void":
        """
        Defines a named string. if the string already exists, it changes its value to <thestring>.

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theString: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_SetString(self, *args)


    def UnloadDeferredData(self, *args) -> "Standard_Boolean":
        """
        Releases data if object has connected deferred storage, without calling backup(). warning! this operation does not unload modifications to deferred storage (normally it is read-only), so that modifications will be discarded (if any). returns false if object has no deferred data.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NamedData_UnloadDeferredData(self, *args)


    def clear(self, *args) -> "void":
        """
        Clear data without calling backup().

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_clear(self, *args)


    def setArrayOfIntegers(self, *args) -> "void":
        """
        Defines a named array of integer values (without calling backup).

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theArrayOfIntegers: TColStd_HArray1OfInteger

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_setArrayOfIntegers(self, *args)


    def setArrayOfReals(self, *args) -> "void":
        """
        Defines a named array of real values (without calling backup).

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theArrayOfReals: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_setArrayOfReals(self, *args)


    def setByte(self, *args) -> "void":
        """
        Defines a named byte (without calling backup).

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theByte: Standard_Byte

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_setByte(self, *args)


    def setInteger(self, *args) -> "void":
        """
        Defines a named integer (without calling backup).

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theInteger: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_setInteger(self, *args)


    def setReal(self, *args) -> "void":
        """
        Defines a named real (without calling backup).

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theReal: float

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_setReal(self, *args)


    def setString(self, *args) -> "void":
        """
        Defines a named string (without calling backup).

        Parameters
        ----------
        theName: TCollection_ExtendedString
        theString: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_NamedData_setString(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_NamedData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_NamedData
    __del__ = lambda self: None
TDataStd_NamedData_swigregister = _TDataStd.TDataStd_NamedData_swigregister
TDataStd_NamedData_swigregister(TDataStd_NamedData)

def TDataStd_NamedData_GetID(*args) -> "Standard_GUID const &":
    """
    Returns the id of the named data attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_NamedData_GetID(*args)

def TDataStd_NamedData_Set(*args) -> "opencascade::handle< TDataStd_NamedData >":
    """
    Finds or creates a named data attribute.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_NamedData>

    """
    return _TDataStd.TDataStd_NamedData_Set(*args)

class TDataStd_Real(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Real, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Real, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Real(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Real self) -> std::string"""
        return _TDataStd.TDataStd_Real_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_Real self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_Real self) -> std::string
        """
        return _TDataStd.TDataStd_Real_DumpJsonToString(self, depth)


    def Get(self, *args) -> "Standard_Real":
        """
        Returns the real number value contained in the attribute.

        Returns
        -------
        float

        """
        return _TDataStd.TDataStd_Real_Get(self, *args)


    def GetDimension(self, *args) -> "TDataStd_RealEnum":
        """
        Obsolete method that will be removed in next versions. this field is not supported in the persistence mechanism.

        Returns
        -------
        TDataStd_RealEnum

        """
        return _TDataStd.TDataStd_Real_GetDimension(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods ============= returns the default guid for real numbers.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Real_GetID(*args)

    GetID = staticmethod(GetID)

    def IsCaptured(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a reference on the same label.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_Real_IsCaptured(self, *args)


    def Set(self, *args) -> "void":
        """
        Finds, or creates, a real attribute with default guid and sets <value>. the real attribute is returned. the real dimension is scalar by default. use setdimension to overwrite. real methods ============.

        Parameters
        ----------
        label: TDF_Label
        value: float

        Returns
        -------
        opencascade::handle<TDataStd_Real>

        Finds, or creates, a real attribute with explicit guid and sets <value>. the real attribute is returned. real methods ============.

        Parameters
        ----------
        label: TDF_Label
        guid: Standard_GUID
        value: float

        Returns
        -------
        opencascade::handle<TDataStd_Real>

        Sets the real number v.

        Parameters
        ----------
        V: float

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Real_Set(self, *args)


    def SetDimension(self, *args) -> "void":
        """
        Obsolete method that will be removed in next versions. this field is not supported in the persistence mechanism.

        Parameters
        ----------
        DIM: TDataStd_RealEnum

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Real_SetDimension(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid for the attribute.

        Parameters
        ----------
        guid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Real_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Real_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Real
    __del__ = lambda self: None
TDataStd_Real_swigregister = _TDataStd.TDataStd_Real_swigregister
TDataStd_Real_swigregister(TDataStd_Real)

def TDataStd_Real_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods ============= returns the default guid for real numbers.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Real_GetID(*args)

class TDataStd_RealArray(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_RealArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_RealArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_RealArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal > const &":
        """
        Returns the handle of this array of reals.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _TDataStd.TDataStd_RealArray_Array(self, *args)


    def ChangeArray(self, *args) -> "void":
        """
        Sets the inner array <myvalue> of the realarray attribute to <newarray>. if value of <newarray> differs from <myvalue>, backup performed and myvalue refers to new instance of harray1ofreal that holds <newarray> values if <ischeckitems> equal true each item of <newarray> will be checked with each item of <myvalue> for coincidence (to avoid backup).

        Parameters
        ----------
        newArray: TColStd_HArray1OfReal
        isCheckItems: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealArray_ChangeArray(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_RealArray self) -> std::string"""
        return _TDataStd.TDataStd_RealArray_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_RealArray self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_RealArray self) -> std::string
        """
        return _TDataStd.TDataStd_RealArray_DumpJsonToString(self, depth)


    def GetDelta(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_RealArray_GetDelta(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods ============= returns the guid for arrays of reals.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_RealArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Init(self, *args) -> "void":
        """
        Initialize the inner array with bounds from <lower> to <upper>.

        Parameters
        ----------
        lower: int
        upper: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealArray_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        Returns the number of elements of the array of reals in terms of the number of elements it contains.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_RealArray_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        Returns the lower boundary of the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_RealArray_Lower(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_RealArray >":
        """
        Finds or creates on the <label> a real array attribute with the specified <lower> and <upper> boundaries. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, input parameter <isdelta> is refused and the found attribute returned.

        Parameters
        ----------
        label: TDF_Label
        lower: int
        upper: int
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_RealArray>

        Finds, or creates, an realarray attribute with explicit user defined <guid>. the realarray attribute is returned.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID
        lower: int
        upper: int
        isDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_RealArray>

        """
        return _TDataStd.TDataStd_RealArray_Set(*args)

    Set = staticmethod(Set)

    def SetDelta(self, *args) -> "void":
        """
        For internal use only!.

        Parameters
        ----------
        isDelta: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealArray_SetDelta(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealArray_SetID(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Sets the <index>th element of the array to <value> outofrange exception is raised if <index> doesn't respect lower and upper bounds of the internal array.

        Parameters
        ----------
        Index: int
        Value: float

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealArray_SetValue(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        Returns the upper boundary of the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_RealArray_Upper(self, *args)


    def Value(self, *args) -> "Standard_Real":
        """
        Return the value of the <index>th element of the array.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _TDataStd.TDataStd_RealArray_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_RealArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_RealArray
    __del__ = lambda self: None
TDataStd_RealArray_swigregister = _TDataStd.TDataStd_RealArray_swigregister
TDataStd_RealArray_swigregister(TDataStd_RealArray)

def TDataStd_RealArray_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods ============= returns the guid for arrays of reals.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_RealArray_GetID(*args)

def TDataStd_RealArray_Set(*args) -> "opencascade::handle< TDataStd_RealArray >":
    """
    Finds or creates on the <label> a real array attribute with the specified <lower> and <upper> boundaries. if <isdelta> == false, defaultdeltaonmodification is used. if <isdelta> == true, deltaonmodification of the current attribute is used. if attribute is already set, input parameter <isdelta> is refused and the found attribute returned.

    Parameters
    ----------
    label: TDF_Label
    lower: int
    upper: int
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_RealArray>

    Finds, or creates, an realarray attribute with explicit user defined <guid>. the realarray attribute is returned.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID
    lower: int
    upper: int
    isDelta: bool,optional
    	default value is Standard_False

    Returns
    -------
    opencascade::handle<TDataStd_RealArray>

    """
    return _TDataStd.TDataStd_RealArray_Set(*args)

class TDataStd_RealList(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_RealList, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_RealList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_RealList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Append(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: float

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealList_Append(self, *args)


    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealList_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_RealList self) -> std::string"""
        return _TDataStd.TDataStd_RealList_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_RealList self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_RealList self) -> std::string
        """
        return _TDataStd.TDataStd_RealList_DumpJsonToString(self, depth)


    def Extent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_RealList_Extent(self, *args)


    def First(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _TDataStd.TDataStd_RealList_First(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ============== returns the id of the list of doubles attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_RealList_GetID(*args)

    GetID = staticmethod(GetID)

    def InsertAfter(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> after the first meet of <after_value>.

        Parameters
        ----------
        value: float
        after_value: float

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_RealList_InsertAfter(self, *args)


    def InsertAfterByIndex(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> after the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        after_value: float

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_RealList_InsertAfterByIndex(self, *args)


    def InsertBefore(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> before the first meet of <before_value>.

        Parameters
        ----------
        value: float
        before_value: float

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_RealList_InsertBefore(self, *args)


    def InsertBeforeByIndex(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> before the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        before_value: float

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_RealList_InsertBeforeByIndex(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_RealList_IsEmpty(self, *args)


    def Last(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _TDataStd.TDataStd_RealList_Last(self, *args)


    def List(self, *args) -> "TColStd_ListOfReal const &":
        """
        No available documentation.

        Returns
        -------
        TColStd_ListOfReal

        """
        return _TDataStd.TDataStd_RealList_List(self, *args)


    def Prepend(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: float

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealList_Prepend(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        Removes the first meet of the <value>.

        Parameters
        ----------
        value: float

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_RealList_Remove(self, *args)


    def RemoveByIndex(self, *args) -> "Standard_Boolean":
        """
        Removes a value at <index> position.

        Parameters
        ----------
        index: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_RealList_RemoveByIndex(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_RealList >":
        """
        Finds or creates a list of double values attribute.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_RealList>

        Finds or creates a list of double values attribute with explicit user defined <guid>.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID

        Returns
        -------
        opencascade::handle<TDataStd_RealList>

        """
        return _TDataStd.TDataStd_RealList_Set(*args)

    Set = staticmethod(Set)

    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_RealList_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_RealList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_RealList
    __del__ = lambda self: None
TDataStd_RealList_swigregister = _TDataStd.TDataStd_RealList_swigregister
TDataStd_RealList_swigregister(TDataStd_RealList)

def TDataStd_RealList_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ============== returns the id of the list of doubles attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_RealList_GetID(*args)

def TDataStd_RealList_Set(*args) -> "opencascade::handle< TDataStd_RealList >":
    """
    Finds or creates a list of double values attribute.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_RealList>

    Finds or creates a list of double values attribute with explicit user defined <guid>.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID

    Returns
    -------
    opencascade::handle<TDataStd_RealList>

    """
    return _TDataStd.TDataStd_RealList_Set(*args)

class TDataStd_ReferenceArray(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ReferenceArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ReferenceArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_ReferenceArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_ReferenceArray self) -> std::string"""
        return _TDataStd.TDataStd_ReferenceArray_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_ReferenceArray self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_ReferenceArray self) -> std::string
        """
        return _TDataStd.TDataStd_ReferenceArray_DumpJsonToString(self, depth)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ============== returns the id of the array of references (labels) attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_ReferenceArray_GetID(*args)

    GetID = staticmethod(GetID)

    def Init(self, *args) -> "void":
        """
        Initialize the inner array with bounds from <lower> to <upper>.

        Parameters
        ----------
        lower: int
        upper: int

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ReferenceArray_Init(self, *args)


    def InternalArray(self, *args) -> "opencascade::handle< TDataStd_HLabelArray1 > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TDataStd_HLabelArray1>

        """
        return _TDataStd.TDataStd_ReferenceArray_InternalArray(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        Returns the number of elements in the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ReferenceArray_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        Returns the lower boundary of the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ReferenceArray_Lower(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_ReferenceArray >":
        """
        Finds or creates an array of reference values (labels) attribute.

        Parameters
        ----------
        label: TDF_Label
        lower: int
        upper: int

        Returns
        -------
        opencascade::handle<TDataStd_ReferenceArray>

        Finds or creates an array of reference values (labels) attribute with explicit user defined <guid>.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID
        lower: int
        upper: int

        Returns
        -------
        opencascade::handle<TDataStd_ReferenceArray>

        """
        return _TDataStd.TDataStd_ReferenceArray_Set(*args)

    Set = staticmethod(Set)

    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ReferenceArray_SetID(self, *args)


    def SetInternalArray(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        values: TDataStd_HLabelArray1
        isCheckItems: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ReferenceArray_SetInternalArray(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Sets the <index>th element of the array to <value> outofrange exception is raised if <index> doesn't respect lower and upper bounds of the internal array.

        Parameters
        ----------
        index: int
        value: TDF_Label

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ReferenceArray_SetValue(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        Returns the upper boundary of the array.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ReferenceArray_Upper(self, *args)


    def Value(self, *args) -> "TDF_Label":
        """
        Returns the value of the <index>th element of the array.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TDF_Label

        """
        return _TDataStd.TDataStd_ReferenceArray_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_ReferenceArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_ReferenceArray
    __del__ = lambda self: None
TDataStd_ReferenceArray_swigregister = _TDataStd.TDataStd_ReferenceArray_swigregister
TDataStd_ReferenceArray_swigregister(TDataStd_ReferenceArray)

def TDataStd_ReferenceArray_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ============== returns the id of the array of references (labels) attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_ReferenceArray_GetID(*args)

def TDataStd_ReferenceArray_Set(*args) -> "opencascade::handle< TDataStd_ReferenceArray >":
    """
    Finds or creates an array of reference values (labels) attribute.

    Parameters
    ----------
    label: TDF_Label
    lower: int
    upper: int

    Returns
    -------
    opencascade::handle<TDataStd_ReferenceArray>

    Finds or creates an array of reference values (labels) attribute with explicit user defined <guid>.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID
    lower: int
    upper: int

    Returns
    -------
    opencascade::handle<TDataStd_ReferenceArray>

    """
    return _TDataStd.TDataStd_ReferenceArray_Set(*args)

class TDataStd_ReferenceList(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_ReferenceList, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_ReferenceList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_ReferenceList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Append(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: TDF_Label

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ReferenceList_Append(self, *args)


    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ReferenceList_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_ReferenceList self) -> std::string"""
        return _TDataStd.TDataStd_ReferenceList_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_ReferenceList self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_ReferenceList self) -> std::string
        """
        return _TDataStd.TDataStd_ReferenceList_DumpJsonToString(self, depth)


    def Extent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_ReferenceList_Extent(self, *args)


    def First(self, *args) -> "TDF_Label const &":
        """
        No available documentation.

        Returns
        -------
        TDF_Label

        """
        return _TDataStd.TDataStd_ReferenceList_First(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ============== returns the id of the list of references (labels) attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_ReferenceList_GetID(*args)

    GetID = staticmethod(GetID)

    def InsertAfter(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> after the first meet of <after_value>.

        Parameters
        ----------
        value: TDF_Label
        after_value: TDF_Label

        Returns
        -------
        bool

        Inserts the label after the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        after_value: TDF_Label

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ReferenceList_InsertAfter(self, *args)


    def InsertBefore(self, *args) -> "Standard_Boolean":
        """
        Inserts the <value> before the first meet of <before_value>.

        Parameters
        ----------
        value: TDF_Label
        before_value: TDF_Label

        Returns
        -------
        bool

        Inserts the label before the <index> position. the indices start with 1 .. extent().

        Parameters
        ----------
        index: int
        before_value: TDF_Label

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ReferenceList_InsertBefore(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ReferenceList_IsEmpty(self, *args)


    def Last(self, *args) -> "TDF_Label const &":
        """
        No available documentation.

        Returns
        -------
        TDF_Label

        """
        return _TDataStd.TDataStd_ReferenceList_Last(self, *args)


    def List(self, *args) -> "TDF_LabelList const &":
        """
        No available documentation.

        Returns
        -------
        TDF_LabelList

        """
        return _TDataStd.TDataStd_ReferenceList_List(self, *args)


    def Prepend(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        value: TDF_Label

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ReferenceList_Prepend(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        Removes the first meet of the <value>.

        Parameters
        ----------
        value: TDF_Label

        Returns
        -------
        bool

        Removes a label at 'index' position.

        Parameters
        ----------
        index: int

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_ReferenceList_Remove(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_ReferenceList >":
        """
        Finds or creates a list of reference values (labels) attribute.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_ReferenceList>

        Finds or creates a list of reference values (labels) attribute with explicit user defined <guid>.

        Parameters
        ----------
        label: TDF_Label
        theGuid: Standard_GUID

        Returns
        -------
        opencascade::handle<TDataStd_ReferenceList>

        """
        return _TDataStd.TDataStd_ReferenceList_Set(*args)

    Set = staticmethod(Set)

    def SetID(self, *args) -> "void":
        """
        Sets the explicit guid (user defined) for the attribute.

        Parameters
        ----------
        theGuid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_ReferenceList_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_ReferenceList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_ReferenceList
    __del__ = lambda self: None
TDataStd_ReferenceList_swigregister = _TDataStd.TDataStd_ReferenceList_swigregister
TDataStd_ReferenceList_swigregister(TDataStd_ReferenceList)

def TDataStd_ReferenceList_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ============== returns the id of the list of references (labels) attribute.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_ReferenceList_GetID(*args)

def TDataStd_ReferenceList_Set(*args) -> "opencascade::handle< TDataStd_ReferenceList >":
    """
    Finds or creates a list of reference values (labels) attribute.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_ReferenceList>

    Finds or creates a list of reference values (labels) attribute with explicit user defined <guid>.

    Parameters
    ----------
    label: TDF_Label
    theGuid: Standard_GUID

    Returns
    -------
    opencascade::handle<TDataStd_ReferenceList>

    """
    return _TDataStd.TDataStd_ReferenceList_Set(*args)

class TDataStd_TreeNode(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_TreeNode, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_TreeNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_TreeNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Append(self, *args) -> "Standard_Boolean":
        """
        Insert the treenode <child> as last child of <self>. if the insertion is successful <self> becomes the father of <child>.

        Parameters
        ----------
        Child: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_Append(self, *args)


    def Depth(self, *args) -> "Standard_Integer":
        """
        Returns the depth of this tree node in the overall tree node structure. in other words, the number of father tree nodes of this one is returned.

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_TreeNode_Depth(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_TreeNode self) -> std::string"""
        return _TDataStd.TDataStd_TreeNode_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_TreeNode self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_TreeNode self) -> std::string
        """
        return _TDataStd.TDataStd_TreeNode_DumpJsonToString(self, depth)


    def Father(self, *args) -> "opencascade::handle< TDataStd_TreeNode >":
        """
        Returns the father treenode of <self>. null if root.

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_TreeNode_Father(self, *args)


    def Find(*args) -> "Standard_Boolean":
        """
        Class methods working on the node =================================== returns true if the tree node t is found on the label l. otherwise, false is returned.

        Parameters
        ----------
        L: TDF_Label
        T: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_Find(*args)

    Find = staticmethod(Find)

    def FindLast(self, *args) -> "opencascade::handle< TDataStd_TreeNode >":
        """
        Returns the last child tree node in this tree node object. to set fields =============.

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_TreeNode_FindLast(self, *args)


    def First(self, *args) -> "opencascade::handle< TDataStd_TreeNode >":
        """
        Returns the first child tree node in this tree node object.

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_TreeNode_First(self, *args)


    def GetDefaultTreeID(*args) -> "Standard_GUID const &":
        """
        Returns a default tree id. this id is used by the <set> method without explicit tree id. instance methods: ================.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_TreeNode_GetDefaultTreeID(*args)

    GetDefaultTreeID = staticmethod(GetDefaultTreeID)

    def HasFather(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute has a father tree node.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_HasFather(self, *args)


    def HasFirst(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute has a first child tree node.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_HasFirst(self, *args)


    def HasLast(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute has a last child tree node.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_HasLast(self, *args)


    def HasNext(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute has a next tree node.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_HasNext(self, *args)


    def HasPrevious(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute has a previous tree node.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_HasPrevious(self, *args)


    def InsertAfter(self, *args) -> "Standard_Boolean":
        """
        Inserts the treenode <node> after <self>. if insertion is successful <self> and <node> belongs to the same father.

        Parameters
        ----------
        Node: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_InsertAfter(self, *args)


    def InsertBefore(self, *args) -> "Standard_Boolean":
        """
        Inserts the treenode <node> before <self>. if insertion is successful <self> and <node> belongs to the same father.

        Parameters
        ----------
        Node: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_InsertBefore(self, *args)


    def IsAscendant(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute is an ascendant of of. in other words, if it is a father or the father of a father of of.

        Parameters
        ----------
        of: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_IsAscendant(self, *args)


    def IsChild(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute is a child of of.

        Parameters
        ----------
        of: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_IsChild(self, *args)


    def IsDescendant(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute is a descendant of of. in other words, if it is a child or the child of a child of of.

        Parameters
        ----------
        of: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_IsDescendant(self, *args)


    def IsFather(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute is a father of of.

        Parameters
        ----------
        of: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_IsFather(self, *args)


    def IsRoot(self, *args) -> "Standard_Boolean":
        """
        Returns true if this tree node attribute is the ultimate father in the tree.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_IsRoot(self, *args)


    def Last(self, *args) -> "opencascade::handle< TDataStd_TreeNode >":
        """
        Returns the last child tree node in this tree node object.

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_TreeNode_Last(self, *args)


    def NbChildren(self, *args) -> "Standard_Integer":
        """
        Returns the number of child nodes. if <alllevels> is true, the method counts children of all levels (children of children ...).

        Parameters
        ----------
        allLevels: bool,optional
        	default value is Standard_False

        Returns
        -------
        int

        """
        return _TDataStd.TDataStd_TreeNode_NbChildren(self, *args)


    def Next(self, *args) -> "opencascade::handle< TDataStd_TreeNode >":
        """
        Returns the next tree node in this tree node attribute. warning this tree node is null if it is the last one in this tree node attribute.returns the next treenode of <self>. null if last.

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_TreeNode_Next(self, *args)


    def Prepend(self, *args) -> "Standard_Boolean":
        """
        Insert the the treenode <child> as first child of <self>. if the insertion is successful <self> becomes the father of <child>.

        Parameters
        ----------
        Child: TDataStd_TreeNode

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_Prepend(self, *args)


    def Previous(self, *args) -> "opencascade::handle< TDataStd_TreeNode >":
        """
        Returns the previous tree node of this tree node attribute. warning this tree node is null if it is the first one in this tree node attribute.

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_TreeNode_Previous(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        Removes this tree node attribute from its father node. the result is that this attribute becomes a root node.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_TreeNode_Remove(self, *args)


    def Root(self, *args) -> "opencascade::handle< TDataStd_TreeNode >":
        """
        Returns the ultimate father of this tree node attribute.

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_TreeNode_Root(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_TreeNode >":
        """
        Finds or creates a treenode attribute on the label <l> with the default tree id, returned by the method <getdefaulttreeid>. returns the created/found treenode attribute.

        Parameters
        ----------
        L: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        Finds or creates a treenode attribute on the label <l>, with an explicit tree id. <explicittreeid> is the id returned by <tdf_attribute::id> method. returns the found/created treenode attribute.

        Parameters
        ----------
        L: TDF_Label
        ExplicitTreeID: Standard_GUID

        Returns
        -------
        opencascade::handle<TDataStd_TreeNode>

        """
        return _TDataStd.TDataStd_TreeNode_Set(*args)

    Set = staticmethod(Set)

    def SetFather(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        F: TDataStd_TreeNode

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_TreeNode_SetFather(self, *args)


    def SetFirst(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        F: TDataStd_TreeNode

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_TreeNode_SetFirst(self, *args)


    def SetLast(self, *args) -> "void":
        """
        Treenode callback: ==================.

        Parameters
        ----------
        F: TDataStd_TreeNode

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_TreeNode_SetLast(self, *args)


    def SetNext(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        F: TDataStd_TreeNode

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_TreeNode_SetNext(self, *args)


    def SetPrevious(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        F: TDataStd_TreeNode

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_TreeNode_SetPrevious(self, *args)


    def SetTreeID(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        explicitID: Standard_GUID

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_TreeNode_SetTreeID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_TreeNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_TreeNode
    __del__ = lambda self: None
TDataStd_TreeNode_swigregister = _TDataStd.TDataStd_TreeNode_swigregister
TDataStd_TreeNode_swigregister(TDataStd_TreeNode)

def TDataStd_TreeNode_Find(*args) -> "Standard_Boolean":
    """
    Class methods working on the node =================================== returns true if the tree node t is found on the label l. otherwise, false is returned.

    Parameters
    ----------
    L: TDF_Label
    T: TDataStd_TreeNode

    Returns
    -------
    bool

    """
    return _TDataStd.TDataStd_TreeNode_Find(*args)

def TDataStd_TreeNode_GetDefaultTreeID(*args) -> "Standard_GUID const &":
    """
    Returns a default tree id. this id is used by the <set> method without explicit tree id. instance methods: ================.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_TreeNode_GetDefaultTreeID(*args)

def TDataStd_TreeNode_Set(*args) -> "opencascade::handle< TDataStd_TreeNode >":
    """
    Finds or creates a treenode attribute on the label <l> with the default tree id, returned by the method <getdefaulttreeid>. returns the created/found treenode attribute.

    Parameters
    ----------
    L: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_TreeNode>

    Finds or creates a treenode attribute on the label <l>, with an explicit tree id. <explicittreeid> is the id returned by <tdf_attribute::id> method. returns the found/created treenode attribute.

    Parameters
    ----------
    L: TDF_Label
    ExplicitTreeID: Standard_GUID

    Returns
    -------
    opencascade::handle<TDataStd_TreeNode>

    """
    return _TDataStd.TDataStd_TreeNode_Set(*args)

class TDataStd_UAttribute(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_UAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_UAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_UAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_UAttribute self) -> std::string"""
        return _TDataStd.TDataStd_UAttribute_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_UAttribute self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_UAttribute self) -> std::string
        """
        return _TDataStd.TDataStd_UAttribute_DumpJsonToString(self, depth)


    def Set(*args) -> "opencascade::handle< TDataStd_UAttribute >":
        """
        Api class methods ============= find, or create, a uattribute attribute with <localid> as local guid. the uattribute attribute is returned. uattribute methods ============.

        Parameters
        ----------
        label: TDF_Label
        LocalID: Standard_GUID

        Returns
        -------
        opencascade::handle<TDataStd_UAttribute>

        """
        return _TDataStd.TDataStd_UAttribute_Set(*args)

    Set = staticmethod(Set)


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_UAttribute_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_UAttribute
    __del__ = lambda self: None
TDataStd_UAttribute_swigregister = _TDataStd.TDataStd_UAttribute_swigregister
TDataStd_UAttribute_swigregister(TDataStd_UAttribute)

def TDataStd_UAttribute_Set(*args) -> "opencascade::handle< TDataStd_UAttribute >":
    """
    Api class methods ============= find, or create, a uattribute attribute with <localid> as local guid. the uattribute attribute is returned. uattribute methods ============.

    Parameters
    ----------
    label: TDF_Label
    LocalID: Standard_GUID

    Returns
    -------
    opencascade::handle<TDataStd_UAttribute>

    """
    return _TDataStd.TDataStd_UAttribute_Set(*args)

class TDataStd_Variable(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Variable, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Variable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Variable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Assign(self, *args) -> "opencascade::handle< TDataStd_Expression >":
        """
        Create(if doesn't exist) and returns the assigned expression attribute. fill it after.

        Returns
        -------
        opencascade::handle<TDataStd_Expression>

        """
        return _TDataStd.TDataStd_Variable_Assign(self, *args)


    def Constant(self, *args) -> "void":
        """
        If <status> is true, this variable will not be modified by the solver.

        Parameters
        ----------
        status: bool

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Variable_Constant(self, *args)


    def Desassign(self, *args) -> "void":
        """
        If <self> is assigned delete the associated expression attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Variable_Desassign(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Variable self) -> std::string"""
        return _TDataStd.TDataStd_Variable_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_Variable self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_Variable self) -> std::string
        """
        return _TDataStd.TDataStd_Variable_DumpJsonToString(self, depth)


    def Expression(self, *args) -> "opencascade::handle< TDataStd_Expression >":
        """
        If <self> is assigned, returns associated expression attribute.

        Returns
        -------
        opencascade::handle<TDataStd_Expression>

        """
        return _TDataStd.TDataStd_Variable_Expression(self, *args)


    def Get(self, *args) -> "Standard_Real":
        """
        Returns value stored in associated real attribute.

        Returns
        -------
        float

        """
        return _TDataStd.TDataStd_Variable_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods =============.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Variable_GetID(*args)

    GetID = staticmethod(GetID)

    def IsAssigned(self, *args) -> "Standard_Boolean":
        """
        Returns true if an expression attribute is associated. create(if doesn't exist), set and returns the assigned expression attribute.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_Variable_IsAssigned(self, *args)


    def IsCaptured(self, *args) -> "Standard_Boolean":
        """
        Shortcut for <real()->iscaptured()>.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_Variable_IsCaptured(self, *args)


    def IsConstant(self, *args) -> "Standard_Boolean":
        """
        A constant value is not modified by regeneration.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_Variable_IsConstant(self, *args)


    def IsValued(self, *args) -> "Standard_Boolean":
        """
        Returns true if a real attribute is associated.

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_Variable_IsValued(self, *args)


    def Name(self, *args) -> "TCollection_ExtendedString const &":
        """
        Set or change the name of the variable, in myunknown and my associated name attribute.

        Parameters
        ----------
        string: TCollection_ExtendedString

        Returns
        -------
        None

        Returns string stored in the associated name attribute.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Variable_Name(self, *args)


    def Real(self, *args) -> "opencascade::handle< TDataStd_Real >":
        """
        Returns associated real attribute.

        Returns
        -------
        opencascade::handle<TDataStd_Real>

        """
        return _TDataStd.TDataStd_Variable_Real(self, *args)


    def Set(self, *args) -> "void":
        """
        Find, or create, a variable attribute. real methods ============.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_Variable>

        Retrieve or create the associated real attribute and set the value <value>.

        Parameters
        ----------
        value: float

        Returns
        -------
        None

        Obsolete method that will be removed in next versions. the dimension argument is not supported in the persistence mechanism.

        Parameters
        ----------
        value: float
        dimension: TDataStd_RealEnum

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Variable_Set(self, *args)


    def Unit(self, *args) -> "TCollection_AsciiString const &":
        """
        No available documentation.

        Parameters
        ----------
        unit: TCollection_AsciiString

        Returns
        -------
        None

        To read/write fields ===================.

        Returns
        -------
        TCollection_AsciiString

        """
        return _TDataStd.TDataStd_Variable_Unit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Variable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Variable
    __del__ = lambda self: None
TDataStd_Variable_swigregister = _TDataStd.TDataStd_Variable_swigregister
TDataStd_Variable_swigregister(TDataStd_Variable)

def TDataStd_Variable_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods =============.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Variable_GetID(*args)

class TDataStd_Comment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Comment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Comment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Comment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Comment self) -> std::string"""
        return _TDataStd.TDataStd_Comment_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods ============= returns the guid for comments.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Comment_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args) -> "void":
        """
        Find, or create a comment attribute. the comment attribute is returned.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_Comment>

        Finds, or creates a comment attribute and sets the string. the comment attribute is returned. comment methods ============.

        Parameters
        ----------
        label: TDF_Label
        string: TCollection_ExtendedString

        Returns
        -------
        opencascade::handle<TDataStd_Comment>

        No available documentation.

        Parameters
        ----------
        S: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Comment_Set(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit user defined guid to the attribute.

        Parameters
        ----------
        guid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Comment_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Comment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Comment
    __del__ = lambda self: None
TDataStd_Comment_swigregister = _TDataStd.TDataStd_Comment_swigregister
TDataStd_Comment_swigregister(TDataStd_Comment)

def TDataStd_Comment_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods ============= returns the guid for comments.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Comment_GetID(*args)

class TDataStd_Directory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Directory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Directory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Directory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddDirectory(*args) -> "opencascade::handle< TDataStd_Directory >":
        """
        Creates a new sub-label and sets the sub-directory dir on that label.

        Parameters
        ----------
        dir: TDataStd_Directory

        Returns
        -------
        opencascade::handle<TDataStd_Directory>

        """
        return _TDataStd.TDataStd_Directory_AddDirectory(*args)

    AddDirectory = staticmethod(AddDirectory)

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Directory self) -> std::string"""
        return _TDataStd.TDataStd_Directory_DumpToString(self)


    def Find(*args) -> "Standard_Boolean":
        """
        Class methods ============= searches for a directory attribute on the label current, or on one of the father labels of current. if a directory attribute is found, true is returned, and the attribute found is set as d.

        Parameters
        ----------
        current: TDF_Label
        D: TDataStd_Directory

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_Directory_Find(*args)

    Find = staticmethod(Find)

    def GetID(*args) -> "Standard_GUID const &":
        """
        Directory methods ===============.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Directory_GetID(*args)

    GetID = staticmethod(GetID)

    def ID(self, *args) -> "Standard_GUID const &":
        """
        No available documentation.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Directory_ID(self, *args)


    def MakeObjectLabel(*args) -> "TDF_Label":
        """
        Makes new label and returns it to insert other object attributes (sketch,part...etc...).

        Parameters
        ----------
        dir: TDataStd_Directory

        Returns
        -------
        TDF_Label

        """
        return _TDataStd.TDataStd_Directory_MakeObjectLabel(*args)

    MakeObjectLabel = staticmethod(MakeObjectLabel)

    def New(*args) -> "opencascade::handle< TDataStd_Directory >":
        """
        Creates an empty directory attribute, located at <label>. raises if <label> has attribute.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_Directory>

        """
        return _TDataStd.TDataStd_Directory_New(*args)

    New = staticmethod(New)


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Directory_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Directory
    __del__ = lambda self: None
TDataStd_Directory_swigregister = _TDataStd.TDataStd_Directory_swigregister
TDataStd_Directory_swigregister(TDataStd_Directory)

def TDataStd_Directory_AddDirectory(*args) -> "opencascade::handle< TDataStd_Directory >":
    """
    Creates a new sub-label and sets the sub-directory dir on that label.

    Parameters
    ----------
    dir: TDataStd_Directory

    Returns
    -------
    opencascade::handle<TDataStd_Directory>

    """
    return _TDataStd.TDataStd_Directory_AddDirectory(*args)

def TDataStd_Directory_Find(*args) -> "Standard_Boolean":
    """
    Class methods ============= searches for a directory attribute on the label current, or on one of the father labels of current. if a directory attribute is found, true is returned, and the attribute found is set as d.

    Parameters
    ----------
    current: TDF_Label
    D: TDataStd_Directory

    Returns
    -------
    bool

    """
    return _TDataStd.TDataStd_Directory_Find(*args)

def TDataStd_Directory_GetID(*args) -> "Standard_GUID const &":
    """
    Directory methods ===============.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Directory_GetID(*args)

def TDataStd_Directory_MakeObjectLabel(*args) -> "TDF_Label":
    """
    Makes new label and returns it to insert other object attributes (sketch,part...etc...).

    Parameters
    ----------
    dir: TDataStd_Directory

    Returns
    -------
    TDF_Label

    """
    return _TDataStd.TDataStd_Directory_MakeObjectLabel(*args)

def TDataStd_Directory_New(*args) -> "opencascade::handle< TDataStd_Directory >":
    """
    Creates an empty directory attribute, located at <label>. raises if <label> has attribute.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_Directory>

    """
    return _TDataStd.TDataStd_Directory_New(*args)

class TDataStd_Name(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Name, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Name, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Name(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Name self) -> std::string"""
        return _TDataStd.TDataStd_Name_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods working on the name itself ======================================== returns the guid for name attributes.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Name_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args) -> "void":
        """
        Creates (if does not exist) and sets the name in the name attribute. from any label <l> search in father labels (l is not concerned) the first name attribute.if found set it in <father>. class methods working on the name tree ====================================== search in the whole tdf_data the name attribute which fit with <fullpath>. returns true if found. search under <currentlabel> a label which fit with <name>. returns true if found. shortcut which avoids building a listofextendedstrin. search in the whole tdf_data the label which fit with name returns true if found. tools methods to translate path <-> pathlist =========================================== move to draw for draw test we may provide this tool method which convert a path in a sequence of string to call after the findlabel methods. example: if it's given 'assembly:part_1:sketch_5' it will return in <pathlist> the list of 3 strings: 'assembly','part_1','sketch_5'. move to draw from <pathlist> build the string path name methods ============.

        Parameters
        ----------
        label: TDF_Label
        string: TCollection_ExtendedString

        Returns
        -------
        opencascade::handle<TDataStd_Name>

        Finds, or creates, a name attribute with explicit user defined <guid> and sets <string>. the name attribute is returned. .

        Parameters
        ----------
        label: TDF_Label
        guid: Standard_GUID
        string: TCollection_ExtendedString

        Returns
        -------
        opencascade::handle<TDataStd_Name>

        Sets <s> as name. raises if <s> is not a valid name.

        Parameters
        ----------
        S: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Name_Set(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets the explicit user defined guid to the attribute.

        Parameters
        ----------
        guid: Standard_GUID

        Returns
        -------
        None

        Sets default guid for the attribute.

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Name_SetID(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Name_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Name
    __del__ = lambda self: None
TDataStd_Name_swigregister = _TDataStd.TDataStd_Name_swigregister
TDataStd_Name_swigregister(TDataStd_Name)

def TDataStd_Name_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods working on the name itself ======================================== returns the guid for name attributes.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Name_GetID(*args)

class TDataStd_NoteBook(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_NoteBook, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_NoteBook, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_NoteBook(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Append(self, *args) -> "opencascade::handle< TDataStd_Integer >":
        """
        Tool to create an integer attribute from <value>, insert it in a new son label of <self>. the real attribute is returned.

        Parameters
        ----------
        value: float
        isExported: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_Real>

        Tool to create an real attribute from <value>, insert it in a new son label of <self>. the integer attribute is returned.

        Parameters
        ----------
        value: int
        isExported: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDataStd_Integer>

        """
        return _TDataStd.TDataStd_NoteBook_Append(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_NoteBook self) -> std::string"""
        return _TDataStd.TDataStd_NoteBook_DumpToString(self)


    def Find(*args) -> "Standard_Boolean":
        """
        Class methods ============= try to retrieve a notebook attribute at <current> label or in fathers label of <current>. returns true if found and set <n>.

        Parameters
        ----------
        current: TDF_Label
        N: TDataStd_NoteBook

        Returns
        -------
        bool

        """
        return _TDataStd.TDataStd_NoteBook_Find(*args)

    Find = staticmethod(Find)

    def GetID(*args) -> "Standard_GUID const &":
        """
        Notebook methods ===============.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_NoteBook_GetID(*args)

    GetID = staticmethod(GetID)

    def ID(self, *args) -> "Standard_GUID const &":
        """
        No available documentation.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_NoteBook_ID(self, *args)


    def New(*args) -> "opencascade::handle< TDataStd_NoteBook >":
        """
        Create an enpty notebook attribute, located at <label>. raises if <label> has attribute.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_NoteBook>

        """
        return _TDataStd.TDataStd_NoteBook_New(*args)

    New = staticmethod(New)


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_NoteBook_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_NoteBook
    __del__ = lambda self: None
TDataStd_NoteBook_swigregister = _TDataStd.TDataStd_NoteBook_swigregister
TDataStd_NoteBook_swigregister(TDataStd_NoteBook)

def TDataStd_NoteBook_Find(*args) -> "Standard_Boolean":
    """
    Class methods ============= try to retrieve a notebook attribute at <current> label or in fathers label of <current>. returns true if found and set <n>.

    Parameters
    ----------
    current: TDF_Label
    N: TDataStd_NoteBook

    Returns
    -------
    bool

    """
    return _TDataStd.TDataStd_NoteBook_Find(*args)

def TDataStd_NoteBook_GetID(*args) -> "Standard_GUID const &":
    """
    Notebook methods ===============.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_NoteBook_GetID(*args)

def TDataStd_NoteBook_New(*args) -> "opencascade::handle< TDataStd_NoteBook >":
    """
    Create an enpty notebook attribute, located at <label>. raises if <label> has attribute.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_NoteBook>

    """
    return _TDataStd.TDataStd_NoteBook_New(*args)

class TDataStd_Relation(TDataStd_Expression):
    __swig_setmethods__ = {}
    for _s in [TDataStd_Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Relation, name, value)
    __swig_getmethods__ = {}
    for _s in [TDataStd_Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Relation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Relation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Relation self) -> std::string"""
        return _TDataStd.TDataStd_Relation_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDataStd_Relation self, int depth=-1) -> std::string
        DumpJsonToString(TDataStd_Relation self) -> std::string
        """
        return _TDataStd.TDataStd_Relation_DumpJsonToString(self, depth)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods =============.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Relation_GetID(*args)

    GetID = staticmethod(GetID)

    def GetRelation(self, *args) -> "TCollection_ExtendedString const &":
        """
        No available documentation.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDataStd.TDataStd_Relation_GetRelation(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_Relation >":
        """
        Find, or create, an relation attribute. real methods ============.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_Relation>

        """
        return _TDataStd.TDataStd_Relation_Set(*args)

    Set = staticmethod(Set)

    def SetRelation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        E: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDataStd.TDataStd_Relation_SetRelation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Relation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Relation
    __del__ = lambda self: None
TDataStd_Relation_swigregister = _TDataStd.TDataStd_Relation_swigregister
TDataStd_Relation_swigregister(TDataStd_Relation)

def TDataStd_Relation_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods =============.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Relation_GetID(*args)

def TDataStd_Relation_Set(*args) -> "opencascade::handle< TDataStd_Relation >":
    """
    Find, or create, an relation attribute. real methods ============.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_Relation>

    """
    return _TDataStd.TDataStd_Relation_Set(*args)

class TDataStd_Tick(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_Tick, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_Tick, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDataStd.new_TDataStd_Tick(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDataStd_Tick self) -> std::string"""
        return _TDataStd.TDataStd_Tick_DumpToString(self)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Static methods ==============.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Tick_GetID(*args)

    GetID = staticmethod(GetID)

    def ID(self, *args) -> "Standard_GUID const &":
        """
        No available documentation.

        Returns
        -------
        Standard_GUID

        """
        return _TDataStd.TDataStd_Tick_ID(self, *args)


    def Set(*args) -> "opencascade::handle< TDataStd_Tick >":
        """
        Find, or create, a tick attribute. tick methods ============.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDataStd_Tick>

        """
        return _TDataStd.TDataStd_Tick_Set(*args)

    Set = staticmethod(Set)


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_Tick_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataStd.delete_TDataStd_Tick
    __del__ = lambda self: None
TDataStd_Tick_swigregister = _TDataStd.TDataStd_Tick_swigregister
TDataStd_Tick_swigregister(TDataStd_Tick)

def TDataStd_Tick_GetID(*args) -> "Standard_GUID const &":
    """
    Static methods ==============.

    Returns
    -------
    Standard_GUID

    """
    return _TDataStd.TDataStd_Tick_GetID(*args)

def TDataStd_Tick_Set(*args) -> "opencascade::handle< TDataStd_Tick >":
    """
    Find, or create, a tick attribute. tick methods ============.

    Parameters
    ----------
    label: TDF_Label

    Returns
    -------
    opencascade::handle<TDataStd_Tick>

    """
    return _TDataStd.TDataStd_Tick_Set(*args)


@classnotwrapped
class TDataStd_GenericEmpty:
	pass

@classnotwrapped
class TDataStd_GenericExtString:
	pass


class TDataStd_HLabelArray1(TDataStd_LabelArray1, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TDataStd_LabelArray1, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDataStd_HLabelArray1, name, value)
    __swig_getmethods__ = {}
    for _s in [TDataStd_LabelArray1, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDataStd_HLabelArray1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDataStd.new_TDataStd_HLabelArray1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TDataStd_LabelArray1 const &":
        return _TDataStd.TDataStd_HLabelArray1_Array1(self)

    def ChangeArray1(self) -> "TDataStd_LabelArray1 &":
        return _TDataStd.TDataStd_HLabelArray1_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TDataStd_HLabelArray1_DownCast(t)

    __swig_destroy__ = _TDataStd.delete_TDataStd_HLabelArray1
    __del__ = lambda self: None
TDataStd_HLabelArray1_swigregister = _TDataStd.TDataStd_HLabelArray1_swigregister
TDataStd_HLabelArray1_swigregister(TDataStd_HLabelArray1)



# This file is compatible with both classic and new-style classes.


