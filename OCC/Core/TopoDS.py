# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopoDS module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topods.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopoDS')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopoDS')
    _TopoDS = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopoDS', [dirname(__file__)])
        except ImportError:
            import _TopoDS
            return _TopoDS
        try:
            _mod = imp.load_module('_TopoDS', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopoDS = swig_import_helper()
    del swig_import_helper
else:
    import _TopoDS
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopoDS.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TopoDS.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopoDS.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopoDS.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TopoDS.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TopoDS.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TopoDS.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TopoDS.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TopoDS.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TopoDS.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopoDS.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TopoDS.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TopoDS.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopoDS.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopoDS.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopoDS.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TopoDS.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopoDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopoDS.process_exception(error, method_name, class_name)
process_exception = _TopoDS.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_TopoDS_HShape_Create() -> "opencascade::handle< TopoDS_HShape >":
    return _TopoDS.Handle_TopoDS_HShape_Create()
Handle_TopoDS_HShape_Create = _TopoDS.Handle_TopoDS_HShape_Create

def Handle_TopoDS_HShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_HShape >":
    return _TopoDS.Handle_TopoDS_HShape_DownCast(t)
Handle_TopoDS_HShape_DownCast = _TopoDS.Handle_TopoDS_HShape_DownCast

def Handle_TopoDS_HShape_IsNull(t: 'opencascade::handle< TopoDS_HShape > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_HShape_IsNull(t)
Handle_TopoDS_HShape_IsNull = _TopoDS.Handle_TopoDS_HShape_IsNull

def Handle_TopoDS_TShape_Create() -> "opencascade::handle< TopoDS_TShape >":
    return _TopoDS.Handle_TopoDS_TShape_Create()
Handle_TopoDS_TShape_Create = _TopoDS.Handle_TopoDS_TShape_Create

def Handle_TopoDS_TShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TShape >":
    return _TopoDS.Handle_TopoDS_TShape_DownCast(t)
Handle_TopoDS_TShape_DownCast = _TopoDS.Handle_TopoDS_TShape_DownCast

def Handle_TopoDS_TShape_IsNull(t: 'opencascade::handle< TopoDS_TShape > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TShape_IsNull(t)
Handle_TopoDS_TShape_IsNull = _TopoDS.Handle_TopoDS_TShape_IsNull

def Handle_TopoDS_TCompSolid_Create() -> "opencascade::handle< TopoDS_TCompSolid >":
    return _TopoDS.Handle_TopoDS_TCompSolid_Create()
Handle_TopoDS_TCompSolid_Create = _TopoDS.Handle_TopoDS_TCompSolid_Create

def Handle_TopoDS_TCompSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TCompSolid >":
    return _TopoDS.Handle_TopoDS_TCompSolid_DownCast(t)
Handle_TopoDS_TCompSolid_DownCast = _TopoDS.Handle_TopoDS_TCompSolid_DownCast

def Handle_TopoDS_TCompSolid_IsNull(t: 'opencascade::handle< TopoDS_TCompSolid > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TCompSolid_IsNull(t)
Handle_TopoDS_TCompSolid_IsNull = _TopoDS.Handle_TopoDS_TCompSolid_IsNull

def Handle_TopoDS_TCompound_Create() -> "opencascade::handle< TopoDS_TCompound >":
    return _TopoDS.Handle_TopoDS_TCompound_Create()
Handle_TopoDS_TCompound_Create = _TopoDS.Handle_TopoDS_TCompound_Create

def Handle_TopoDS_TCompound_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TCompound >":
    return _TopoDS.Handle_TopoDS_TCompound_DownCast(t)
Handle_TopoDS_TCompound_DownCast = _TopoDS.Handle_TopoDS_TCompound_DownCast

def Handle_TopoDS_TCompound_IsNull(t: 'opencascade::handle< TopoDS_TCompound > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TCompound_IsNull(t)
Handle_TopoDS_TCompound_IsNull = _TopoDS.Handle_TopoDS_TCompound_IsNull

def Handle_TopoDS_TEdge_Create() -> "opencascade::handle< TopoDS_TEdge >":
    return _TopoDS.Handle_TopoDS_TEdge_Create()
Handle_TopoDS_TEdge_Create = _TopoDS.Handle_TopoDS_TEdge_Create

def Handle_TopoDS_TEdge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TEdge >":
    return _TopoDS.Handle_TopoDS_TEdge_DownCast(t)
Handle_TopoDS_TEdge_DownCast = _TopoDS.Handle_TopoDS_TEdge_DownCast

def Handle_TopoDS_TEdge_IsNull(t: 'opencascade::handle< TopoDS_TEdge > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TEdge_IsNull(t)
Handle_TopoDS_TEdge_IsNull = _TopoDS.Handle_TopoDS_TEdge_IsNull

def Handle_TopoDS_TFace_Create() -> "opencascade::handle< TopoDS_TFace >":
    return _TopoDS.Handle_TopoDS_TFace_Create()
Handle_TopoDS_TFace_Create = _TopoDS.Handle_TopoDS_TFace_Create

def Handle_TopoDS_TFace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TFace >":
    return _TopoDS.Handle_TopoDS_TFace_DownCast(t)
Handle_TopoDS_TFace_DownCast = _TopoDS.Handle_TopoDS_TFace_DownCast

def Handle_TopoDS_TFace_IsNull(t: 'opencascade::handle< TopoDS_TFace > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TFace_IsNull(t)
Handle_TopoDS_TFace_IsNull = _TopoDS.Handle_TopoDS_TFace_IsNull

def Handle_TopoDS_TShell_Create() -> "opencascade::handle< TopoDS_TShell >":
    return _TopoDS.Handle_TopoDS_TShell_Create()
Handle_TopoDS_TShell_Create = _TopoDS.Handle_TopoDS_TShell_Create

def Handle_TopoDS_TShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TShell >":
    return _TopoDS.Handle_TopoDS_TShell_DownCast(t)
Handle_TopoDS_TShell_DownCast = _TopoDS.Handle_TopoDS_TShell_DownCast

def Handle_TopoDS_TShell_IsNull(t: 'opencascade::handle< TopoDS_TShell > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TShell_IsNull(t)
Handle_TopoDS_TShell_IsNull = _TopoDS.Handle_TopoDS_TShell_IsNull

def Handle_TopoDS_TSolid_Create() -> "opencascade::handle< TopoDS_TSolid >":
    return _TopoDS.Handle_TopoDS_TSolid_Create()
Handle_TopoDS_TSolid_Create = _TopoDS.Handle_TopoDS_TSolid_Create

def Handle_TopoDS_TSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TSolid >":
    return _TopoDS.Handle_TopoDS_TSolid_DownCast(t)
Handle_TopoDS_TSolid_DownCast = _TopoDS.Handle_TopoDS_TSolid_DownCast

def Handle_TopoDS_TSolid_IsNull(t: 'opencascade::handle< TopoDS_TSolid > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TSolid_IsNull(t)
Handle_TopoDS_TSolid_IsNull = _TopoDS.Handle_TopoDS_TSolid_IsNull

def Handle_TopoDS_TVertex_Create() -> "opencascade::handle< TopoDS_TVertex >":
    return _TopoDS.Handle_TopoDS_TVertex_Create()
Handle_TopoDS_TVertex_Create = _TopoDS.Handle_TopoDS_TVertex_Create

def Handle_TopoDS_TVertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TVertex >":
    return _TopoDS.Handle_TopoDS_TVertex_DownCast(t)
Handle_TopoDS_TVertex_DownCast = _TopoDS.Handle_TopoDS_TVertex_DownCast

def Handle_TopoDS_TVertex_IsNull(t: 'opencascade::handle< TopoDS_TVertex > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TVertex_IsNull(t)
Handle_TopoDS_TVertex_IsNull = _TopoDS.Handle_TopoDS_TVertex_IsNull

def Handle_TopoDS_TWire_Create() -> "opencascade::handle< TopoDS_TWire >":
    return _TopoDS.Handle_TopoDS_TWire_Create()
Handle_TopoDS_TWire_Create = _TopoDS.Handle_TopoDS_TWire_Create

def Handle_TopoDS_TWire_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopoDS_TWire >":
    return _TopoDS.Handle_TopoDS_TWire_DownCast(t)
Handle_TopoDS_TWire_DownCast = _TopoDS.Handle_TopoDS_TWire_DownCast

def Handle_TopoDS_TWire_IsNull(t: 'opencascade::handle< TopoDS_TWire > const &') -> "bool":
    return _TopoDS.Handle_TopoDS_TWire_IsNull(t)
Handle_TopoDS_TWire_IsNull = _TopoDS.Handle_TopoDS_TWire_IsNull
class TopoDS_ListIteratorOfListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_ListIteratorOfListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_ListIteratorOfListOfShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TopoDS.new_TopoDS_ListIteratorOfListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TopoDS.TopoDS_ListIteratorOfListOfShape_More(self)

    def Next(self) -> "void":
        return _TopoDS.TopoDS_ListIteratorOfListOfShape_Next(self)

    def Value(self) -> "TopoDS_Shape const &":
        return _TopoDS.TopoDS_ListIteratorOfListOfShape_Value(self)

    def ChangeValue(self) -> "TopoDS_Shape &":
        return _TopoDS.TopoDS_ListIteratorOfListOfShape_ChangeValue(self)
    __swig_destroy__ = _TopoDS.delete_TopoDS_ListIteratorOfListOfShape
    __del__ = lambda self: None
TopoDS_ListIteratorOfListOfShape_swigregister = _TopoDS.TopoDS_ListIteratorOfListOfShape_swigregister
TopoDS_ListIteratorOfListOfShape_swigregister(TopoDS_ListIteratorOfListOfShape)

class TopoDS_ListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_ListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_ListOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< TopoDS_Shape >::iterator":
        return _TopoDS.TopoDS_ListOfShape_begin(self)

    def end(self) -> "NCollection_List< TopoDS_Shape >::iterator":
        return _TopoDS.TopoDS_ListOfShape_end(self)

    def cbegin(self) -> "NCollection_List< TopoDS_Shape >::const_iterator":
        return _TopoDS.TopoDS_ListOfShape_cbegin(self)

    def cend(self) -> "NCollection_List< TopoDS_Shape >::const_iterator":
        return _TopoDS.TopoDS_ListOfShape_cend(self)

    def __init__(self, *args):
        this = _TopoDS.new_TopoDS_ListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TopoDS.TopoDS_ListOfShape_Size(self)

    def Assign(self, theOther: 'TopoDS_ListOfShape') -> "NCollection_List< TopoDS_Shape > &":
        return _TopoDS.TopoDS_ListOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopoDS_ListOfShape') -> "NCollection_List< TopoDS_Shape > &":
        return _TopoDS.TopoDS_ListOfShape_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TopoDS.TopoDS_ListOfShape_Clear(self, theAllocator)

    def First(self) -> "TopoDS_Shape const &":
        return _TopoDS.TopoDS_ListOfShape_First(self)

    def Last(self) -> "TopoDS_Shape const &":
        return _TopoDS.TopoDS_ListOfShape_Last(self)

    def Append(self, *args) -> "void":
        return _TopoDS.TopoDS_ListOfShape_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TopoDS.TopoDS_ListOfShape_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TopoDS.TopoDS_ListOfShape_RemoveFirst(self)

    def Remove(self, theIter: 'TopoDS_ListIteratorOfListOfShape') -> "void":
        return _TopoDS.TopoDS_ListOfShape_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TopoDS.TopoDS_ListOfShape_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TopoDS.TopoDS_ListOfShape_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TopoDS.TopoDS_ListOfShape_Reverse(self)
    __swig_destroy__ = _TopoDS.delete_TopoDS_ListOfShape
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TopoDS_ListOfShape_swigregister = _TopoDS.TopoDS_ListOfShape_swigregister
TopoDS_ListOfShape_swigregister(TopoDS_ListOfShape)

class topods(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, topods, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, topods, name)
    __repr__ = _swig_repr

    def CompSolid(*args) -> "TopoDS_CompSolid":
        """
        Casts shape s to the more specialized return type, compsolid. exceptions standard_typemismatch if s cannot be cast to this return type.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_CompSolid

        No available documentation.

        Parameters
        ----------
        &: TopoDS_Shape

        Returns
        -------
        TopoDS_CompSolid

        """
        return _TopoDS.topods_CompSolid(*args)

    CompSolid = staticmethod(CompSolid)

    def Compound(*args) -> "TopoDS_Compound":
        """
        Casts shape s to the more specialized return type, compound. exceptions standard_typemismatch if s cannot be cast to this return type.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Compound

        No available documentation.

        Parameters
        ----------
        &: TopoDS_Shape

        Returns
        -------
        TopoDS_Compound

        """
        return _TopoDS.topods_Compound(*args)

    Compound = staticmethod(Compound)

    def Edge(*args) -> "TopoDS_Edge":
        """
        Casts shape s to the more specialized return type, edge exceptions standard_typemismatch if s cannot be cast to this return type.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Edge

        No available documentation.

        Parameters
        ----------
        &: TopoDS_Shape

        Returns
        -------
        TopoDS_Edge

        """
        return _TopoDS.topods_Edge(*args)

    Edge = staticmethod(Edge)

    def Face(*args) -> "TopoDS_Face":
        """
        Casts shape s to the more specialized return type, face. exceptions standard_typemismatch if s cannot be cast to this return type.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Face

        No available documentation.

        Parameters
        ----------
        &: TopoDS_Shape

        Returns
        -------
        TopoDS_Face

        """
        return _TopoDS.topods_Face(*args)

    Face = staticmethod(Face)

    def Shell(*args) -> "TopoDS_Shell":
        """
        Casts shape s to the more specialized return type, shell. exceptions standard_typemismatch if s cannot be cast to this return type.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shell

        No available documentation.

        Parameters
        ----------
        &: TopoDS_Shape

        Returns
        -------
        TopoDS_Shell

        """
        return _TopoDS.topods_Shell(*args)

    Shell = staticmethod(Shell)

    def Solid(*args) -> "TopoDS_Solid":
        """
        Casts shape s to the more specialized return type, solid. exceptions standard_typemismatch if s cannot be cast to this return type.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Solid

        No available documentation.

        Parameters
        ----------
        &: TopoDS_Shape

        Returns
        -------
        TopoDS_Solid

        """
        return _TopoDS.topods_Solid(*args)

    Solid = staticmethod(Solid)

    def Vertex(*args) -> "TopoDS_Vertex":
        """
        Basic tool to access the data structure. casts shape s to the more specialized return type, vertex. exceptions standard_typemismatch if s cannot be cast to this return type.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Vertex

        No available documentation.

        Parameters
        ----------
        &: TopoDS_Shape

        Returns
        -------
        TopoDS_Vertex

        """
        return _TopoDS.topods_Vertex(*args)

    Vertex = staticmethod(Vertex)

    def Wire(*args) -> "TopoDS_Wire":
        """
        Casts shape s to the more specialized return type, wire. exceptions standard_typemismatch if s cannot be cast to this return type.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Wire

        No available documentation.

        Parameters
        ----------
        &: TopoDS_Shape

        Returns
        -------
        TopoDS_Wire

        """
        return _TopoDS.topods_Wire(*args)

    Wire = staticmethod(Wire)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TopoDS.new_topods()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopoDS.delete_topods
    __del__ = lambda self: None
topods_swigregister = _TopoDS.topods_swigregister
topods_swigregister(topods)

def topods_CompSolid(*args) -> "TopoDS_CompSolid":
    """
    Casts shape s to the more specialized return type, compsolid. exceptions standard_typemismatch if s cannot be cast to this return type.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopoDS_CompSolid

    No available documentation.

    Parameters
    ----------
    &: TopoDS_Shape

    Returns
    -------
    TopoDS_CompSolid

    """
    return _TopoDS.topods_CompSolid(*args)

def topods_Compound(*args) -> "TopoDS_Compound":
    """
    Casts shape s to the more specialized return type, compound. exceptions standard_typemismatch if s cannot be cast to this return type.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopoDS_Compound

    No available documentation.

    Parameters
    ----------
    &: TopoDS_Shape

    Returns
    -------
    TopoDS_Compound

    """
    return _TopoDS.topods_Compound(*args)

def topods_Edge(*args) -> "TopoDS_Edge":
    """
    Casts shape s to the more specialized return type, edge exceptions standard_typemismatch if s cannot be cast to this return type.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopoDS_Edge

    No available documentation.

    Parameters
    ----------
    &: TopoDS_Shape

    Returns
    -------
    TopoDS_Edge

    """
    return _TopoDS.topods_Edge(*args)

def topods_Face(*args) -> "TopoDS_Face":
    """
    Casts shape s to the more specialized return type, face. exceptions standard_typemismatch if s cannot be cast to this return type.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopoDS_Face

    No available documentation.

    Parameters
    ----------
    &: TopoDS_Shape

    Returns
    -------
    TopoDS_Face

    """
    return _TopoDS.topods_Face(*args)

def topods_Shell(*args) -> "TopoDS_Shell":
    """
    Casts shape s to the more specialized return type, shell. exceptions standard_typemismatch if s cannot be cast to this return type.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopoDS_Shell

    No available documentation.

    Parameters
    ----------
    &: TopoDS_Shape

    Returns
    -------
    TopoDS_Shell

    """
    return _TopoDS.topods_Shell(*args)

def topods_Solid(*args) -> "TopoDS_Solid":
    """
    Casts shape s to the more specialized return type, solid. exceptions standard_typemismatch if s cannot be cast to this return type.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopoDS_Solid

    No available documentation.

    Parameters
    ----------
    &: TopoDS_Shape

    Returns
    -------
    TopoDS_Solid

    """
    return _TopoDS.topods_Solid(*args)

def topods_Vertex(*args) -> "TopoDS_Vertex":
    """
    Basic tool to access the data structure. casts shape s to the more specialized return type, vertex. exceptions standard_typemismatch if s cannot be cast to this return type.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopoDS_Vertex

    No available documentation.

    Parameters
    ----------
    &: TopoDS_Shape

    Returns
    -------
    TopoDS_Vertex

    """
    return _TopoDS.topods_Vertex(*args)

def topods_Wire(*args) -> "TopoDS_Wire":
    """
    Casts shape s to the more specialized return type, wire. exceptions standard_typemismatch if s cannot be cast to this return type.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopoDS_Wire

    No available documentation.

    Parameters
    ----------
    &: TopoDS_Shape

    Returns
    -------
    TopoDS_Wire

    """
    return _TopoDS.topods_Wire(*args)

class TopoDS_AlertAttribute(OCC.Core.Message.Message_AttributeStream):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Message.Message_AttributeStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_AlertAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Message.Message_AttributeStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_AlertAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor with shape argument.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theName: TCollection_AsciiString,optional
        	default value is TCollection_AsciiString()

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_AlertAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TopoDS_AlertAttribute self, int depth=-1) -> std::string
        DumpJsonToString(TopoDS_AlertAttribute self) -> std::string
        """
        return _TopoDS.TopoDS_AlertAttribute_DumpJsonToString(self, depth)


    def GetShape(self, *args) -> "TopoDS_Shape const":
        """
        Returns contained shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_AlertAttribute_GetShape(self, *args)


    def Send(*args) -> "void":
        """
        Push shape information into messenger.

        Parameters
        ----------
        theMessenger: Message_Messenger
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_AlertAttribute_Send(*args)

    Send = staticmethod(Send)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_AlertAttribute
    __del__ = lambda self: None
TopoDS_AlertAttribute_swigregister = _TopoDS.TopoDS_AlertAttribute_swigregister
TopoDS_AlertAttribute_swigregister(TopoDS_AlertAttribute)

def TopoDS_AlertAttribute_Send(*args) -> "void":
    """
    Push shape information into messenger.

    Parameters
    ----------
    theMessenger: Message_Messenger
    theShape: TopoDS_Shape

    Returns
    -------
    None

    """
    return _TopoDS.TopoDS_AlertAttribute_Send(*args)

class TopoDS_AlertWithShape(OCC.Core.Message.Message_Alert):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Message.Message_Alert]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_AlertWithShape, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Message.Message_Alert]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_AlertWithShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor with shape argument.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_AlertWithShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetShape(self, *args) -> "TopoDS_Shape const":
        """
        Returns contained shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_AlertWithShape_GetShape(self, *args)


    def SetShape(self, *args) -> "void":
        """
        Sets the shape.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_AlertWithShape_SetShape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_AlertWithShape
    __del__ = lambda self: None
TopoDS_AlertWithShape_swigregister = _TopoDS.TopoDS_AlertWithShape_swigregister
TopoDS_AlertWithShape_swigregister(TopoDS_AlertWithShape)

class TopoDS_Builder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Builder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Builder, name)
    __repr__ = _swig_repr

    def Add(self, *args) -> "void":
        """
        Add the shape c in the shape s. exceptions - topods_frozenshape if s is not free and cannot be modified. - topods__uncompatibleshapes if s and c are not compatible.

        Parameters
        ----------
        S: TopoDS_Shape
        C: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Builder_Add(self, *args)


    def MakeCompSolid(self, *args) -> "void":
        """
        Make an empty composite solid.

        Parameters
        ----------
        C: TopoDS_CompSolid

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Builder_MakeCompSolid(self, *args)


    def MakeCompound(self, *args) -> "void":
        """
        Make an empty compound.

        Parameters
        ----------
        C: TopoDS_Compound

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Builder_MakeCompound(self, *args)


    def MakeShell(self, *args) -> "void":
        """
        Make an empty shell.

        Parameters
        ----------
        S: TopoDS_Shell

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Builder_MakeShell(self, *args)


    def MakeSolid(self, *args) -> "void":
        """
        Make a solid covering the whole 3d space.

        Parameters
        ----------
        S: TopoDS_Solid

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Builder_MakeSolid(self, *args)


    def MakeWire(self, *args) -> "void":
        """
        Make an empty wire.

        Parameters
        ----------
        W: TopoDS_Wire

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Builder_MakeWire(self, *args)


    def Remove(self, *args) -> "void":
        """
        Remove the shape c from the shape s. exceptions topods_frozenshape if s is frozen and cannot be modified.

        Parameters
        ----------
        S: TopoDS_Shape
        C: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Builder_Remove(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _TopoDS.new_TopoDS_Builder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopoDS.delete_TopoDS_Builder
    __del__ = lambda self: None
TopoDS_Builder_swigregister = _TopoDS.TopoDS_Builder_swigregister
TopoDS_Builder_swigregister(TopoDS_Builder)

class TopoDS_HShape(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_HShape, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_HShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty shape object.

        Returns
        -------
        None

        Constructs a shape object defined by the shape ashape.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_HShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeShape(self, *args) -> "TopoDS_Shape":
        """
        Exchanges the topods_shape object defining this shape for another one referencing the same underlying shape accesses the list of shapes within the underlying shape referenced by the topods_shape object. returns a reference to a topods_shape based on this shape. the topods_shape can be modified.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_HShape_ChangeShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        Loads this shape with the shape ashape.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        None

        Returns a reference to a constant topods_shape based on this shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_HShape_Shape(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_HShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_HShape
    __del__ = lambda self: None
TopoDS_HShape_swigregister = _TopoDS.TopoDS_HShape_swigregister
TopoDS_HShape_swigregister(TopoDS_HShape)

class TopoDS_Iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Iterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty iterator.

        Returns
        -------
        None

        Creates an iterator on <s> sub-shapes. note: - if cumori is true, the function composes all sub-shapes with the orientation of s. - if cumloc is true, the function multiplies all sub-shapes by the location of s, i.e. it applies to each sub-shape the transformation that is associated with s.

        Parameters
        ----------
        S: TopoDS_Shape
        cumOri: bool,optional
        	default value is Standard_True
        cumLoc: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Iterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args) -> "void":
        """
        Initializes this iterator with shape s. note: - if cumori is true, the function composes all sub-shapes with the orientation of s. - if cumloc is true, the function multiplies all sub-shapes by the location of s, i.e. it applies to each sub-shape the transformation that is associated with s.

        Parameters
        ----------
        S: TopoDS_Shape
        cumOri: bool,optional
        	default value is Standard_True
        cumLoc: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Iterator_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is another sub-shape in the shape which this iterator is scanning.

        Returns
        -------
        bool

        """
        return _TopoDS.TopoDS_Iterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Moves on to the next sub-shape in the shape which this iterator is scanning. exceptions standard_nomoreobject if there are no more sub-shapes in the shape.

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Iterator_Next(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        Returns the current sub-shape in the shape which this iterator is scanning. exceptions standard_nosuchobject if there is no current sub-shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_Iterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Iterator
    __del__ = lambda self: None
TopoDS_Iterator_swigregister = _TopoDS.TopoDS_Iterator_swigregister
TopoDS_Iterator_swigregister(TopoDS_Iterator)

class TopoDS_Shape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Shape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Shape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDS_Shape self, TopoDS_Shape arg0) -> TopoDS_Shape
        Creates a null shape referring to nothing.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Checked(self, *args) -> "void":
        """
        Returns the checked flag.

        Returns
        -------
        bool

        Sets the checked flag.

        Parameters
        ----------
        theIsChecked: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Checked(self, *args)


    def Closed(self, *args) -> "void":
        """
        Returns the closedness flag.

        Returns
        -------
        bool

        Sets the closedness flag.

        Parameters
        ----------
        theIsClosed: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Closed(self, *args)


    def Complement(self, *args) -> "void":
        """
        Complements the orientation, using the complement method from the topabs package.

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Complement(self, *args)


    def Complemented(self, *args) -> "TopoDS_Shape":
        """
        Returns a shape similar to <self> with the orientation complemented, using the complement method from the topabs package.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Complemented(self, *args)


    def Compose(self, *args) -> "void":
        """
        Updates the shape orientation by composition with theorient, using the compose method from the topabs package.

        Parameters
        ----------
        theOrient: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Compose(self, *args)


    def Composed(self, *args) -> "TopoDS_Shape":
        """
        Returns a shape similar to <self> with the orientation composed with theorient, using the compose method from the topabs package.

        Parameters
        ----------
        theOrient: TopAbs_Orientation

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Composed(self, *args)


    def Convex(self, *args) -> "void":
        """
        Returns the convexness flag.

        Returns
        -------
        bool

        Sets the convexness flag.

        Parameters
        ----------
        theIsConvex: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Convex(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TopoDS_Shape self, int depth=-1) -> std::string
        DumpJsonToString(TopoDS_Shape self) -> std::string
        """
        return _TopoDS.TopoDS_Shape_DumpJsonToString(self, depth)


    def EmptyCopied(self, *args) -> "TopoDS_Shape":
        """
        Returns a new shape with the same orientation and location and a new tshape with the same geometry and no sub-shapes.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_EmptyCopied(self, *args)


    def EmptyCopy(self, *args) -> "void":
        """
        Replace <self> by a new shape with the same orientation and location and a new tshape with the same geometry and no sub-shapes.

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_EmptyCopy(self, *args)


    def Free(self, *args) -> "void":
        """
        Returns the free flag.

        Returns
        -------
        bool

        Sets the free flag.

        Parameters
        ----------
        theIsFree: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Free(self, *args)


    def HashCode(self, *args) -> "Standard_Integer":
        """
        Returns a hashed value denoting <self>. this value is in the range [1, theupperbound]. it is computed from the tshape and the location. the orientation is not used. @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

        Parameters
        ----------
        theUpperBound: int

        Returns
        -------
        int

        """
        return _TopoDS.TopoDS_Shape_HashCode(self, *args)


    def __hash__(self) -> "Standard_Integer":
        """__hash__(TopoDS_Shape self) -> Standard_Integer"""
        return _TopoDS.TopoDS_Shape___hash__(self)


    def Infinite(self, *args) -> "void":
        """
        Returns the infinity flag.

        Returns
        -------
        bool

        Sets the infinity flag.

        Parameters
        ----------
        theIsInfinite: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Infinite(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        Returns true if two shapes are equal, i.e. if they share the same tshape with the same locations and orientations.

        Parameters
        ----------
        theOther: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopoDS.TopoDS_Shape_IsEqual(self, *args)


    def IsNotEqual(self, *args) -> "Standard_Boolean":
        """
        Negation of the isequal method.

        Parameters
        ----------
        theOther: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopoDS.TopoDS_Shape_IsNotEqual(self, *args)


    def IsNull(self, *args) -> "Standard_Boolean":
        """
        Returns true if this shape is null. in other words, it references no underlying shape with the potential to be given a location and an orientation.

        Returns
        -------
        bool

        """
        return _TopoDS.TopoDS_Shape_IsNull(self, *args)


    def IsPartner(self, *args) -> "Standard_Boolean":
        """
        Returns true if two shapes are partners, i.e. if they share the same tshape. locations and orientations may differ.

        Parameters
        ----------
        theOther: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopoDS.TopoDS_Shape_IsPartner(self, *args)


    def IsSame(self, *args) -> "Standard_Boolean":
        """
        Returns true if two shapes are same, i.e. if they share the same tshape with the same locations. orientations may differ.

        Parameters
        ----------
        theOther: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopoDS.TopoDS_Shape_IsSame(self, *args)


    def Located(self, *args) -> "TopoDS_Shape":
        """
        Returns a shape similar to <self> with the local coordinate system set to <loc>.

        Parameters
        ----------
        theLoc: TopLoc_Location

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Located(self, *args)


    def Location(self, *args) -> "void":
        """
        Returns the shape local coordinate system.

        Returns
        -------
        TopLoc_Location

        Sets the shape local coordinate system.

        Parameters
        ----------
        theLoc: TopLoc_Location

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Location(self, *args)


    def Locked(self, *args) -> "void":
        """
        Returns the locked flag.

        Returns
        -------
        bool

        Sets the locked flag.

        Parameters
        ----------
        theIsLocked: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Locked(self, *args)


    def Modified(self, *args) -> "void":
        """
        Returns the modification flag.

        Returns
        -------
        bool

        Sets the modification flag.

        Parameters
        ----------
        theIsModified: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Modified(self, *args)


    def Move(self, *args) -> "void":
        """
        Multiplies the shape location by theposition.

        Parameters
        ----------
        thePosition: TopLoc_Location

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Move(self, *args)


    def Moved(self, *args) -> "TopoDS_Shape":
        """
        Returns a shape similar to <self> with a location multiplied by theposition.

        Parameters
        ----------
        thePosition: TopLoc_Location

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Moved(self, *args)


    def NbChildren(self, *args) -> "Standard_Integer":
        """
        Returns the number of direct sub-shapes (children). @sa topods_iterator for accessing sub-shapes.

        Returns
        -------
        int

        """
        return _TopoDS.TopoDS_Shape_NbChildren(self, *args)


    def Nullify(self, *args) -> "void":
        """
        Destroys the reference to the underlying shape stored in this shape. as a result, this shape becomes null.

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Nullify(self, *args)


    def Orientable(self, *args) -> "void":
        """
        Returns the orientability flag.

        Returns
        -------
        bool

        Sets the orientability flag.

        Parameters
        ----------
        theIsOrientable: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Orientable(self, *args)


    def Orientation(self, *args) -> "void":
        """
        Returns the shape orientation.

        Returns
        -------
        TopAbs_Orientation

        Sets the shape orientation.

        Parameters
        ----------
        theOrient: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Orientation(self, *args)


    def Oriented(self, *args) -> "TopoDS_Shape":
        """
        Returns a shape similar to <self> with the orientation set to <or>.

        Parameters
        ----------
        theOrient: TopAbs_Orientation

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Oriented(self, *args)


    def Reverse(self, *args) -> "void":
        """
        Reverses the orientation, using the reverse method from the topabs package.

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_Reverse(self, *args)


    def Reversed(self, *args) -> "TopoDS_Shape":
        """
        Returns a shape similar to <self> with the orientation reversed, using the reverse method from the topabs package.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopoDS.TopoDS_Shape_Reversed(self, *args)


    def ShapeType(self, *args) -> "TopAbs_ShapeEnum":
        """
        Returns the value of the topabs_shapeenum enumeration that corresponds to this shape, for example vertex, edge, and so on. exceptions standard_nullobject if this shape is null.

        Returns
        -------
        TopAbs_ShapeEnum

        """
        return _TopoDS.TopoDS_Shape_ShapeType(self, *args)


    def TShape(self, *args) -> "void":
        """
        Returns a handle to the actual shape implementation.

        Returns
        -------
        opencascade::handle<TopoDS_TShape>

        No available documentation.

        Parameters
        ----------
        theTShape: TopoDS_TShape

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_Shape_TShape(self, *args)


    def __ne_wrapper__(self, other: 'TopoDS_Shape') -> "bool":
        """__ne_wrapper__(TopoDS_Shape self, TopoDS_Shape other) -> bool"""
        return _TopoDS.TopoDS_Shape___ne_wrapper__(self, other)


    def __ne__(self, right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def __eq_wrapper__(self, other: 'TopoDS_Shape') -> "bool":
        """__eq_wrapper__(TopoDS_Shape self, TopoDS_Shape other) -> bool"""
        return _TopoDS.TopoDS_Shape___eq_wrapper__(self, other)


    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __getstate__(self):
    	from .BRepTools import breptools_WriteToString
    	str_shape = breptools_WriteToString(self, True)
    	return str_shape
    def __setstate__(self, state):
    	from .BRepTools import breptools_ReadFromString
    	the_shape = breptools_ReadFromString(state)
    	self.this = the_shape.this


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Shape
    __del__ = lambda self: None
TopoDS_Shape_swigregister = _TopoDS.TopoDS_Shape_swigregister
TopoDS_Shape_swigregister(TopoDS_Shape)

class TopoDS_TShape(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TShape, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Checked(self, *args) -> "void":
        """
        Returns the checked flag.

        Returns
        -------
        bool

        Sets the checked flag.

        Parameters
        ----------
        theIsChecked: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_TShape_Checked(self, *args)


    def Closed(self, *args) -> "void":
        """
        Returns the closedness flag.

        Returns
        -------
        bool

        Sets the closedness flag.

        Parameters
        ----------
        theIsClosed: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_TShape_Closed(self, *args)


    def Convex(self, *args) -> "void":
        """
        Returns the convexness flag.

        Returns
        -------
        bool

        Sets the convexness flag.

        Parameters
        ----------
        theIsConvex: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_TShape_Convex(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TopoDS_TShape self, int depth=-1) -> std::string
        DumpJsonToString(TopoDS_TShape self) -> std::string
        """
        return _TopoDS.TopoDS_TShape_DumpJsonToString(self, depth)


    def EmptyCopy(self, *args) -> "opencascade::handle< TopoDS_TShape >":
        """
        Returns a copy of the tshape with no sub-shapes.

        Returns
        -------
        opencascade::handle<TopoDS_TShape>

        """
        return _TopoDS.TopoDS_TShape_EmptyCopy(self, *args)


    def Free(self, *args) -> "void":
        """
        Returns the free flag.

        Returns
        -------
        bool

        Sets the free flag.

        Parameters
        ----------
        theIsFree: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_TShape_Free(self, *args)


    def Infinite(self, *args) -> "void":
        """
        Returns the infinity flag.

        Returns
        -------
        bool

        Sets the infinity flag.

        Parameters
        ----------
        theIsInfinite: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_TShape_Infinite(self, *args)


    def Locked(self, *args) -> "void":
        """
        Returns the locked flag.

        Returns
        -------
        bool

        Sets the locked flag.

        Parameters
        ----------
        theIsLocked: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_TShape_Locked(self, *args)


    def Modified(self, *args) -> "void":
        """
        Returns the modification flag.

        Returns
        -------
        bool

        Sets the modification flag.

        Parameters
        ----------
        theIsModified: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_TShape_Modified(self, *args)


    def NbChildren(self, *args) -> "Standard_Integer":
        """
        Returns the number of direct sub-shapes (children). @sa topods_iterator for accessing sub-shapes.

        Returns
        -------
        int

        """
        return _TopoDS.TopoDS_TShape_NbChildren(self, *args)


    def Orientable(self, *args) -> "void":
        """
        Returns the orientability flag.

        Returns
        -------
        bool

        Sets the orientability flag.

        Parameters
        ----------
        theIsOrientable: bool

        Returns
        -------
        None

        """
        return _TopoDS.TopoDS_TShape_Orientable(self, *args)


    def ShapeType(self, *args) -> "TopAbs_ShapeEnum":
        """
        Returns the type as a term of the shapeenum enum : vertex, edge, wire, face, ....

        Returns
        -------
        TopAbs_ShapeEnum

        """
        return _TopoDS.TopoDS_TShape_ShapeType(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TShape
    __del__ = lambda self: None
TopoDS_TShape_swigregister = _TopoDS.TopoDS_TShape_swigregister
TopoDS_TShape_swigregister(TopoDS_TShape)

class TopoDS_CompSolid(TopoDS_Shape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_CompSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_CompSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an undefined compsolid.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_CompSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_CompSolid
    __del__ = lambda self: None
TopoDS_CompSolid_swigregister = _TopoDS.TopoDS_CompSolid_swigregister
TopoDS_CompSolid_swigregister(TopoDS_CompSolid)

class TopoDS_Compound(TopoDS_Shape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Compound, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Compound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an undefined compound.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Compound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Compound
    __del__ = lambda self: None
TopoDS_Compound_swigregister = _TopoDS.TopoDS_Compound_swigregister
TopoDS_Compound_swigregister(TopoDS_Compound)

class TopoDS_Edge(TopoDS_Shape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Edge, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Edge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Undefined edge.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Edge
    __del__ = lambda self: None
TopoDS_Edge_swigregister = _TopoDS.TopoDS_Edge_swigregister
TopoDS_Edge_swigregister(TopoDS_Edge)

class TopoDS_Face(TopoDS_Shape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Face, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Face, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Undefined face.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Face
    __del__ = lambda self: None
TopoDS_Face_swigregister = _TopoDS.TopoDS_Face_swigregister
TopoDS_Face_swigregister(TopoDS_Face)

class TopoDS_Shell(TopoDS_Shape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Shell, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Shell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an undefined shell.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Shell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Shell
    __del__ = lambda self: None
TopoDS_Shell_swigregister = _TopoDS.TopoDS_Shell_swigregister
TopoDS_Shell_swigregister(TopoDS_Shell)

class TopoDS_Solid(TopoDS_Shape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Solid, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Solid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an undefined solid.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Solid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Solid
    __del__ = lambda self: None
TopoDS_Solid_swigregister = _TopoDS.TopoDS_Solid_swigregister
TopoDS_Solid_swigregister(TopoDS_Solid)

class TopoDS_TCompSolid(TopoDS_TShape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TCompSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TCompSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tcompsolid.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_TCompSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TCompSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TCompSolid
    __del__ = lambda self: None
TopoDS_TCompSolid_swigregister = _TopoDS.TopoDS_TCompSolid_swigregister
TopoDS_TCompSolid_swigregister(TopoDS_TCompSolid)

class TopoDS_TCompound(TopoDS_TShape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TCompound, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TCompound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tcompound.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_TCompound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TCompound_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TCompound
    __del__ = lambda self: None
TopoDS_TCompound_swigregister = _TopoDS.TopoDS_TCompound_swigregister
TopoDS_TCompound_swigregister(TopoDS_TCompound)

class TopoDS_TEdge(TopoDS_TShape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TEdge, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TEdge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TEdge
    __del__ = lambda self: None
TopoDS_TEdge_swigregister = _TopoDS.TopoDS_TEdge_swigregister
TopoDS_TEdge_swigregister(TopoDS_TEdge)

class TopoDS_TFace(TopoDS_TShape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TFace, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TFace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tface.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_TFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TFace_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TFace
    __del__ = lambda self: None
TopoDS_TFace_swigregister = _TopoDS.TopoDS_TFace_swigregister
TopoDS_TFace_swigregister(TopoDS_TFace)

class TopoDS_TShell(TopoDS_TShape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TShell, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tshell.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_TShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TShell
    __del__ = lambda self: None
TopoDS_TShell_swigregister = _TopoDS.TopoDS_TShell_swigregister
TopoDS_TShell_swigregister(TopoDS_TShell)

class TopoDS_TSolid(TopoDS_TShape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tsolid.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_TSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TSolid
    __del__ = lambda self: None
TopoDS_TSolid_swigregister = _TopoDS.TopoDS_TSolid_swigregister
TopoDS_TSolid_swigregister(TopoDS_TSolid)

class TopoDS_TVertex(TopoDS_TShape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TVertex, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TVertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TVertex
    __del__ = lambda self: None
TopoDS_TVertex_swigregister = _TopoDS.TopoDS_TVertex_swigregister
TopoDS_TVertex_swigregister(TopoDS_TVertex)

class TopoDS_TWire(TopoDS_TShape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_TWire, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_TShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_TWire, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty twire.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_TWire(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TopoDS_TWire_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_TWire
    __del__ = lambda self: None
TopoDS_TWire_swigregister = _TopoDS.TopoDS_TWire_swigregister
TopoDS_TWire_swigregister(TopoDS_TWire)

class TopoDS_Vertex(TopoDS_Shape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Vertex, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Vertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDS_Vertex self, TopoDS_Vertex arg0) -> TopoDS_Vertex
        Undefined vertex.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Vertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Vertex
    __del__ = lambda self: None
TopoDS_Vertex_swigregister = _TopoDS.TopoDS_Vertex_swigregister
TopoDS_Vertex_swigregister(TopoDS_Vertex)

class TopoDS_Wire(TopoDS_Shape):
    __swig_setmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopoDS_Wire, name, value)
    __swig_getmethods__ = {}
    for _s in [TopoDS_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopoDS_Wire, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Undefined wire.

        Returns
        -------
        None

        """
        this = _TopoDS.new_TopoDS_Wire(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _TopoDS.delete_TopoDS_Wire
    __del__ = lambda self: None
TopoDS_Wire_swigregister = _TopoDS.TopoDS_Wire_swigregister
TopoDS_Wire_swigregister(TopoDS_Wire)



# This file is compatible with both classic and new-style classes.


