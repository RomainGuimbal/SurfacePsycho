# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TColStd module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tcolstd.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TColStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TColStd')
    _TColStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TColStd', [dirname(__file__)])
        except ImportError:
            import _TColStd
            return _TColStd
        try:
            _mod = imp.load_module('_TColStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TColStd = swig_import_helper()
    del swig_import_helper
else:
    import _TColStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColStd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TColStd.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TColStd.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TColStd.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TColStd.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TColStd.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TColStd.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TColStd.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TColStd.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TColStd.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TColStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TColStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TColStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TColStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TColStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TColStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TColStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TColStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TColStd.process_exception(error, method_name, class_name)
process_exception = _TColStd.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_TColStd_HPackedMapOfInteger_Create() -> "opencascade::handle< TColStd_HPackedMapOfInteger >":
    return _TColStd.Handle_TColStd_HPackedMapOfInteger_Create()
Handle_TColStd_HPackedMapOfInteger_Create = _TColStd.Handle_TColStd_HPackedMapOfInteger_Create

def Handle_TColStd_HPackedMapOfInteger_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HPackedMapOfInteger >":
    return _TColStd.Handle_TColStd_HPackedMapOfInteger_DownCast(t)
Handle_TColStd_HPackedMapOfInteger_DownCast = _TColStd.Handle_TColStd_HPackedMapOfInteger_DownCast

def Handle_TColStd_HPackedMapOfInteger_IsNull(t: 'opencascade::handle< TColStd_HPackedMapOfInteger > const &') -> "bool":
    return _TColStd.Handle_TColStd_HPackedMapOfInteger_IsNull(t)
Handle_TColStd_HPackedMapOfInteger_IsNull = _TColStd.Handle_TColStd_HPackedMapOfInteger_IsNull

def Handle_TColStd_HArray1OfExtendedString_Create() -> "opencascade::handle< TColStd_HArray1OfExtendedString >":
    return _TColStd.Handle_TColStd_HArray1OfExtendedString_Create()
Handle_TColStd_HArray1OfExtendedString_Create = _TColStd.Handle_TColStd_HArray1OfExtendedString_Create

def Handle_TColStd_HArray1OfExtendedString_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfExtendedString >":
    return _TColStd.Handle_TColStd_HArray1OfExtendedString_DownCast(t)
Handle_TColStd_HArray1OfExtendedString_DownCast = _TColStd.Handle_TColStd_HArray1OfExtendedString_DownCast

def Handle_TColStd_HArray1OfExtendedString_IsNull(t: 'opencascade::handle< TColStd_HArray1OfExtendedString > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfExtendedString_IsNull(t)
Handle_TColStd_HArray1OfExtendedString_IsNull = _TColStd.Handle_TColStd_HArray1OfExtendedString_IsNull

def Handle_TColStd_HArray1OfCharacter_Create() -> "opencascade::handle< TColStd_HArray1OfCharacter >":
    return _TColStd.Handle_TColStd_HArray1OfCharacter_Create()
Handle_TColStd_HArray1OfCharacter_Create = _TColStd.Handle_TColStd_HArray1OfCharacter_Create

def Handle_TColStd_HArray1OfCharacter_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfCharacter >":
    return _TColStd.Handle_TColStd_HArray1OfCharacter_DownCast(t)
Handle_TColStd_HArray1OfCharacter_DownCast = _TColStd.Handle_TColStd_HArray1OfCharacter_DownCast

def Handle_TColStd_HArray1OfCharacter_IsNull(t: 'opencascade::handle< TColStd_HArray1OfCharacter > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfCharacter_IsNull(t)
Handle_TColStd_HArray1OfCharacter_IsNull = _TColStd.Handle_TColStd_HArray1OfCharacter_IsNull

def Handle_TColStd_HArray1OfBoolean_Create() -> "opencascade::handle< TColStd_HArray1OfBoolean >":
    return _TColStd.Handle_TColStd_HArray1OfBoolean_Create()
Handle_TColStd_HArray1OfBoolean_Create = _TColStd.Handle_TColStd_HArray1OfBoolean_Create

def Handle_TColStd_HArray1OfBoolean_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfBoolean >":
    return _TColStd.Handle_TColStd_HArray1OfBoolean_DownCast(t)
Handle_TColStd_HArray1OfBoolean_DownCast = _TColStd.Handle_TColStd_HArray1OfBoolean_DownCast

def Handle_TColStd_HArray1OfBoolean_IsNull(t: 'opencascade::handle< TColStd_HArray1OfBoolean > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfBoolean_IsNull(t)
Handle_TColStd_HArray1OfBoolean_IsNull = _TColStd.Handle_TColStd_HArray1OfBoolean_IsNull

def Handle_TColStd_HArray1OfAsciiString_Create() -> "opencascade::handle< TColStd_HArray1OfAsciiString >":
    return _TColStd.Handle_TColStd_HArray1OfAsciiString_Create()
Handle_TColStd_HArray1OfAsciiString_Create = _TColStd.Handle_TColStd_HArray1OfAsciiString_Create

def Handle_TColStd_HArray1OfAsciiString_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfAsciiString >":
    return _TColStd.Handle_TColStd_HArray1OfAsciiString_DownCast(t)
Handle_TColStd_HArray1OfAsciiString_DownCast = _TColStd.Handle_TColStd_HArray1OfAsciiString_DownCast

def Handle_TColStd_HArray1OfAsciiString_IsNull(t: 'opencascade::handle< TColStd_HArray1OfAsciiString > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfAsciiString_IsNull(t)
Handle_TColStd_HArray1OfAsciiString_IsNull = _TColStd.Handle_TColStd_HArray1OfAsciiString_IsNull

def Handle_TColStd_HArray1OfReal_Create() -> "opencascade::handle< TColStd_HArray1OfReal >":
    return _TColStd.Handle_TColStd_HArray1OfReal_Create()
Handle_TColStd_HArray1OfReal_Create = _TColStd.Handle_TColStd_HArray1OfReal_Create

def Handle_TColStd_HArray1OfReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfReal >":
    return _TColStd.Handle_TColStd_HArray1OfReal_DownCast(t)
Handle_TColStd_HArray1OfReal_DownCast = _TColStd.Handle_TColStd_HArray1OfReal_DownCast

def Handle_TColStd_HArray1OfReal_IsNull(t: 'opencascade::handle< TColStd_HArray1OfReal > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfReal_IsNull(t)
Handle_TColStd_HArray1OfReal_IsNull = _TColStd.Handle_TColStd_HArray1OfReal_IsNull

def Handle_TColStd_HArray1OfInteger_Create() -> "opencascade::handle< TColStd_HArray1OfInteger >":
    return _TColStd.Handle_TColStd_HArray1OfInteger_Create()
Handle_TColStd_HArray1OfInteger_Create = _TColStd.Handle_TColStd_HArray1OfInteger_Create

def Handle_TColStd_HArray1OfInteger_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfInteger >":
    return _TColStd.Handle_TColStd_HArray1OfInteger_DownCast(t)
Handle_TColStd_HArray1OfInteger_DownCast = _TColStd.Handle_TColStd_HArray1OfInteger_DownCast

def Handle_TColStd_HArray1OfInteger_IsNull(t: 'opencascade::handle< TColStd_HArray1OfInteger > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfInteger_IsNull(t)
Handle_TColStd_HArray1OfInteger_IsNull = _TColStd.Handle_TColStd_HArray1OfInteger_IsNull

def Handle_TColStd_HArray1OfListOfInteger_Create() -> "opencascade::handle< TColStd_HArray1OfListOfInteger >":
    return _TColStd.Handle_TColStd_HArray1OfListOfInteger_Create()
Handle_TColStd_HArray1OfListOfInteger_Create = _TColStd.Handle_TColStd_HArray1OfListOfInteger_Create

def Handle_TColStd_HArray1OfListOfInteger_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfListOfInteger >":
    return _TColStd.Handle_TColStd_HArray1OfListOfInteger_DownCast(t)
Handle_TColStd_HArray1OfListOfInteger_DownCast = _TColStd.Handle_TColStd_HArray1OfListOfInteger_DownCast

def Handle_TColStd_HArray1OfListOfInteger_IsNull(t: 'opencascade::handle< TColStd_HArray1OfListOfInteger > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfListOfInteger_IsNull(t)
Handle_TColStd_HArray1OfListOfInteger_IsNull = _TColStd.Handle_TColStd_HArray1OfListOfInteger_IsNull

def Handle_TColStd_HArray1OfTransient_Create() -> "opencascade::handle< TColStd_HArray1OfTransient >":
    return _TColStd.Handle_TColStd_HArray1OfTransient_Create()
Handle_TColStd_HArray1OfTransient_Create = _TColStd.Handle_TColStd_HArray1OfTransient_Create

def Handle_TColStd_HArray1OfTransient_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfTransient >":
    return _TColStd.Handle_TColStd_HArray1OfTransient_DownCast(t)
Handle_TColStd_HArray1OfTransient_DownCast = _TColStd.Handle_TColStd_HArray1OfTransient_DownCast

def Handle_TColStd_HArray1OfTransient_IsNull(t: 'opencascade::handle< TColStd_HArray1OfTransient > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfTransient_IsNull(t)
Handle_TColStd_HArray1OfTransient_IsNull = _TColStd.Handle_TColStd_HArray1OfTransient_IsNull

def Handle_TColStd_HArray1OfByte_Create() -> "opencascade::handle< TColStd_HArray1OfByte >":
    return _TColStd.Handle_TColStd_HArray1OfByte_Create()
Handle_TColStd_HArray1OfByte_Create = _TColStd.Handle_TColStd_HArray1OfByte_Create

def Handle_TColStd_HArray1OfByte_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray1OfByte >":
    return _TColStd.Handle_TColStd_HArray1OfByte_DownCast(t)
Handle_TColStd_HArray1OfByte_DownCast = _TColStd.Handle_TColStd_HArray1OfByte_DownCast

def Handle_TColStd_HArray1OfByte_IsNull(t: 'opencascade::handle< TColStd_HArray1OfByte > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray1OfByte_IsNull(t)
Handle_TColStd_HArray1OfByte_IsNull = _TColStd.Handle_TColStd_HArray1OfByte_IsNull

def Handle_TColStd_HArray2OfBoolean_Create() -> "opencascade::handle< TColStd_HArray2OfBoolean >":
    return _TColStd.Handle_TColStd_HArray2OfBoolean_Create()
Handle_TColStd_HArray2OfBoolean_Create = _TColStd.Handle_TColStd_HArray2OfBoolean_Create

def Handle_TColStd_HArray2OfBoolean_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray2OfBoolean >":
    return _TColStd.Handle_TColStd_HArray2OfBoolean_DownCast(t)
Handle_TColStd_HArray2OfBoolean_DownCast = _TColStd.Handle_TColStd_HArray2OfBoolean_DownCast

def Handle_TColStd_HArray2OfBoolean_IsNull(t: 'opencascade::handle< TColStd_HArray2OfBoolean > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray2OfBoolean_IsNull(t)
Handle_TColStd_HArray2OfBoolean_IsNull = _TColStd.Handle_TColStd_HArray2OfBoolean_IsNull

def Handle_TColStd_HArray2OfTransient_Create() -> "opencascade::handle< TColStd_HArray2OfTransient >":
    return _TColStd.Handle_TColStd_HArray2OfTransient_Create()
Handle_TColStd_HArray2OfTransient_Create = _TColStd.Handle_TColStd_HArray2OfTransient_Create

def Handle_TColStd_HArray2OfTransient_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray2OfTransient >":
    return _TColStd.Handle_TColStd_HArray2OfTransient_DownCast(t)
Handle_TColStd_HArray2OfTransient_DownCast = _TColStd.Handle_TColStd_HArray2OfTransient_DownCast

def Handle_TColStd_HArray2OfTransient_IsNull(t: 'opencascade::handle< TColStd_HArray2OfTransient > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray2OfTransient_IsNull(t)
Handle_TColStd_HArray2OfTransient_IsNull = _TColStd.Handle_TColStd_HArray2OfTransient_IsNull

def Handle_TColStd_HArray2OfReal_Create() -> "opencascade::handle< TColStd_HArray2OfReal >":
    return _TColStd.Handle_TColStd_HArray2OfReal_Create()
Handle_TColStd_HArray2OfReal_Create = _TColStd.Handle_TColStd_HArray2OfReal_Create

def Handle_TColStd_HArray2OfReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray2OfReal >":
    return _TColStd.Handle_TColStd_HArray2OfReal_DownCast(t)
Handle_TColStd_HArray2OfReal_DownCast = _TColStd.Handle_TColStd_HArray2OfReal_DownCast

def Handle_TColStd_HArray2OfReal_IsNull(t: 'opencascade::handle< TColStd_HArray2OfReal > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray2OfReal_IsNull(t)
Handle_TColStd_HArray2OfReal_IsNull = _TColStd.Handle_TColStd_HArray2OfReal_IsNull

def Handle_TColStd_HArray2OfInteger_Create() -> "opencascade::handle< TColStd_HArray2OfInteger >":
    return _TColStd.Handle_TColStd_HArray2OfInteger_Create()
Handle_TColStd_HArray2OfInteger_Create = _TColStd.Handle_TColStd_HArray2OfInteger_Create

def Handle_TColStd_HArray2OfInteger_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray2OfInteger >":
    return _TColStd.Handle_TColStd_HArray2OfInteger_DownCast(t)
Handle_TColStd_HArray2OfInteger_DownCast = _TColStd.Handle_TColStd_HArray2OfInteger_DownCast

def Handle_TColStd_HArray2OfInteger_IsNull(t: 'opencascade::handle< TColStd_HArray2OfInteger > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray2OfInteger_IsNull(t)
Handle_TColStd_HArray2OfInteger_IsNull = _TColStd.Handle_TColStd_HArray2OfInteger_IsNull

def Handle_TColStd_HArray2OfCharacter_Create() -> "opencascade::handle< TColStd_HArray2OfCharacter >":
    return _TColStd.Handle_TColStd_HArray2OfCharacter_Create()
Handle_TColStd_HArray2OfCharacter_Create = _TColStd.Handle_TColStd_HArray2OfCharacter_Create

def Handle_TColStd_HArray2OfCharacter_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HArray2OfCharacter >":
    return _TColStd.Handle_TColStd_HArray2OfCharacter_DownCast(t)
Handle_TColStd_HArray2OfCharacter_DownCast = _TColStd.Handle_TColStd_HArray2OfCharacter_DownCast

def Handle_TColStd_HArray2OfCharacter_IsNull(t: 'opencascade::handle< TColStd_HArray2OfCharacter > const &') -> "bool":
    return _TColStd.Handle_TColStd_HArray2OfCharacter_IsNull(t)
Handle_TColStd_HArray2OfCharacter_IsNull = _TColStd.Handle_TColStd_HArray2OfCharacter_IsNull

def Handle_TColStd_HSequenceOfHAsciiString_Create() -> "opencascade::handle< TColStd_HSequenceOfHAsciiString >":
    return _TColStd.Handle_TColStd_HSequenceOfHAsciiString_Create()
Handle_TColStd_HSequenceOfHAsciiString_Create = _TColStd.Handle_TColStd_HSequenceOfHAsciiString_Create

def Handle_TColStd_HSequenceOfHAsciiString_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HSequenceOfHAsciiString >":
    return _TColStd.Handle_TColStd_HSequenceOfHAsciiString_DownCast(t)
Handle_TColStd_HSequenceOfHAsciiString_DownCast = _TColStd.Handle_TColStd_HSequenceOfHAsciiString_DownCast

def Handle_TColStd_HSequenceOfHAsciiString_IsNull(t: 'opencascade::handle< TColStd_HSequenceOfHAsciiString > const &') -> "bool":
    return _TColStd.Handle_TColStd_HSequenceOfHAsciiString_IsNull(t)
Handle_TColStd_HSequenceOfHAsciiString_IsNull = _TColStd.Handle_TColStd_HSequenceOfHAsciiString_IsNull

def Handle_TColStd_HSequenceOfTransient_Create() -> "opencascade::handle< TColStd_HSequenceOfTransient >":
    return _TColStd.Handle_TColStd_HSequenceOfTransient_Create()
Handle_TColStd_HSequenceOfTransient_Create = _TColStd.Handle_TColStd_HSequenceOfTransient_Create

def Handle_TColStd_HSequenceOfTransient_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HSequenceOfTransient >":
    return _TColStd.Handle_TColStd_HSequenceOfTransient_DownCast(t)
Handle_TColStd_HSequenceOfTransient_DownCast = _TColStd.Handle_TColStd_HSequenceOfTransient_DownCast

def Handle_TColStd_HSequenceOfTransient_IsNull(t: 'opencascade::handle< TColStd_HSequenceOfTransient > const &') -> "bool":
    return _TColStd.Handle_TColStd_HSequenceOfTransient_IsNull(t)
Handle_TColStd_HSequenceOfTransient_IsNull = _TColStd.Handle_TColStd_HSequenceOfTransient_IsNull

def Handle_TColStd_HSequenceOfAsciiString_Create() -> "opencascade::handle< TColStd_HSequenceOfAsciiString >":
    return _TColStd.Handle_TColStd_HSequenceOfAsciiString_Create()
Handle_TColStd_HSequenceOfAsciiString_Create = _TColStd.Handle_TColStd_HSequenceOfAsciiString_Create

def Handle_TColStd_HSequenceOfAsciiString_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HSequenceOfAsciiString >":
    return _TColStd.Handle_TColStd_HSequenceOfAsciiString_DownCast(t)
Handle_TColStd_HSequenceOfAsciiString_DownCast = _TColStd.Handle_TColStd_HSequenceOfAsciiString_DownCast

def Handle_TColStd_HSequenceOfAsciiString_IsNull(t: 'opencascade::handle< TColStd_HSequenceOfAsciiString > const &') -> "bool":
    return _TColStd.Handle_TColStd_HSequenceOfAsciiString_IsNull(t)
Handle_TColStd_HSequenceOfAsciiString_IsNull = _TColStd.Handle_TColStd_HSequenceOfAsciiString_IsNull

def Handle_TColStd_HSequenceOfHExtendedString_Create() -> "opencascade::handle< TColStd_HSequenceOfHExtendedString >":
    return _TColStd.Handle_TColStd_HSequenceOfHExtendedString_Create()
Handle_TColStd_HSequenceOfHExtendedString_Create = _TColStd.Handle_TColStd_HSequenceOfHExtendedString_Create

def Handle_TColStd_HSequenceOfHExtendedString_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HSequenceOfHExtendedString >":
    return _TColStd.Handle_TColStd_HSequenceOfHExtendedString_DownCast(t)
Handle_TColStd_HSequenceOfHExtendedString_DownCast = _TColStd.Handle_TColStd_HSequenceOfHExtendedString_DownCast

def Handle_TColStd_HSequenceOfHExtendedString_IsNull(t: 'opencascade::handle< TColStd_HSequenceOfHExtendedString > const &') -> "bool":
    return _TColStd.Handle_TColStd_HSequenceOfHExtendedString_IsNull(t)
Handle_TColStd_HSequenceOfHExtendedString_IsNull = _TColStd.Handle_TColStd_HSequenceOfHExtendedString_IsNull

def Handle_TColStd_HSequenceOfInteger_Create() -> "opencascade::handle< TColStd_HSequenceOfInteger >":
    return _TColStd.Handle_TColStd_HSequenceOfInteger_Create()
Handle_TColStd_HSequenceOfInteger_Create = _TColStd.Handle_TColStd_HSequenceOfInteger_Create

def Handle_TColStd_HSequenceOfInteger_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HSequenceOfInteger >":
    return _TColStd.Handle_TColStd_HSequenceOfInteger_DownCast(t)
Handle_TColStd_HSequenceOfInteger_DownCast = _TColStd.Handle_TColStd_HSequenceOfInteger_DownCast

def Handle_TColStd_HSequenceOfInteger_IsNull(t: 'opencascade::handle< TColStd_HSequenceOfInteger > const &') -> "bool":
    return _TColStd.Handle_TColStd_HSequenceOfInteger_IsNull(t)
Handle_TColStd_HSequenceOfInteger_IsNull = _TColStd.Handle_TColStd_HSequenceOfInteger_IsNull

def Handle_TColStd_HSequenceOfExtendedString_Create() -> "opencascade::handle< TColStd_HSequenceOfExtendedString >":
    return _TColStd.Handle_TColStd_HSequenceOfExtendedString_Create()
Handle_TColStd_HSequenceOfExtendedString_Create = _TColStd.Handle_TColStd_HSequenceOfExtendedString_Create

def Handle_TColStd_HSequenceOfExtendedString_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HSequenceOfExtendedString >":
    return _TColStd.Handle_TColStd_HSequenceOfExtendedString_DownCast(t)
Handle_TColStd_HSequenceOfExtendedString_DownCast = _TColStd.Handle_TColStd_HSequenceOfExtendedString_DownCast

def Handle_TColStd_HSequenceOfExtendedString_IsNull(t: 'opencascade::handle< TColStd_HSequenceOfExtendedString > const &') -> "bool":
    return _TColStd.Handle_TColStd_HSequenceOfExtendedString_IsNull(t)
Handle_TColStd_HSequenceOfExtendedString_IsNull = _TColStd.Handle_TColStd_HSequenceOfExtendedString_IsNull

def Handle_TColStd_HSequenceOfReal_Create() -> "opencascade::handle< TColStd_HSequenceOfReal >":
    return _TColStd.Handle_TColStd_HSequenceOfReal_Create()
Handle_TColStd_HSequenceOfReal_Create = _TColStd.Handle_TColStd_HSequenceOfReal_Create

def Handle_TColStd_HSequenceOfReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColStd_HSequenceOfReal >":
    return _TColStd.Handle_TColStd_HSequenceOfReal_DownCast(t)
Handle_TColStd_HSequenceOfReal_DownCast = _TColStd.Handle_TColStd_HSequenceOfReal_DownCast

def Handle_TColStd_HSequenceOfReal_IsNull(t: 'opencascade::handle< TColStd_HSequenceOfReal > const &') -> "bool":
    return _TColStd.Handle_TColStd_HSequenceOfReal_IsNull(t)
Handle_TColStd_HSequenceOfReal_IsNull = _TColStd.Handle_TColStd_HSequenceOfReal_IsNull
class TColStd_Array1OfAsciiString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfAsciiString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfAsciiString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_Array1OfAsciiString_begin(self)

    def end(self) -> "NCollection_Array1< TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_Array1OfAsciiString_end(self)

    def cbegin(self) -> "NCollection_Array1< TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_Array1OfAsciiString_cbegin(self)

    def cend(self) -> "NCollection_Array1< TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_Array1OfAsciiString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'TCollection_AsciiString') -> "void":
        return _TColStd.TColStd_Array1OfAsciiString_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfAsciiString_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfAsciiString_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfAsciiString_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfAsciiString_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfAsciiString_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfAsciiString_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfAsciiString_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfAsciiString') -> "NCollection_Array1< TCollection_AsciiString > &":
        return _TColStd.TColStd_Array1OfAsciiString_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfAsciiString') -> "NCollection_Array1< TCollection_AsciiString > &":
        return _TColStd.TColStd_Array1OfAsciiString_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< TCollection_AsciiString > &":
        return _TColStd.TColStd_Array1OfAsciiString_Set(self, *args)

    def First(self) -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_Array1OfAsciiString_First(self)

    def ChangeFirst(self) -> "TCollection_AsciiString &":
        return _TColStd.TColStd_Array1OfAsciiString_ChangeFirst(self)

    def Last(self) -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_Array1OfAsciiString_Last(self)

    def ChangeLast(self) -> "TCollection_AsciiString &":
        return _TColStd.TColStd_Array1OfAsciiString_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_Array1OfAsciiString_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TCollection_AsciiString &":
        return _TColStd.TColStd_Array1OfAsciiString_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TCollection_AsciiString &":
        return _TColStd.TColStd_Array1OfAsciiString___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TCollection_AsciiString') -> "void":
        return _TColStd.TColStd_Array1OfAsciiString_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfAsciiString_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfAsciiString
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfAsciiString_swigregister = _TColStd.TColStd_Array1OfAsciiString_swigregister
TColStd_Array1OfAsciiString_swigregister(TColStd_Array1OfAsciiString)

class TColStd_Array1OfBoolean(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfBoolean, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfBoolean, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< bool >::iterator":
        return _TColStd.TColStd_Array1OfBoolean_begin(self)

    def end(self) -> "NCollection_Array1< bool >::iterator":
        return _TColStd.TColStd_Array1OfBoolean_end(self)

    def cbegin(self) -> "NCollection_Array1< bool >::const_iterator":
        return _TColStd.TColStd_Array1OfBoolean_cbegin(self)

    def cend(self) -> "NCollection_Array1< bool >::const_iterator":
        return _TColStd.TColStd_Array1OfBoolean_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfBoolean(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'bool const &') -> "void":
        return _TColStd.TColStd_Array1OfBoolean_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfBoolean_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfBoolean_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfBoolean_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfBoolean_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfBoolean_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfBoolean_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfBoolean_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfBoolean') -> "NCollection_Array1< Standard_Boolean > &":
        return _TColStd.TColStd_Array1OfBoolean_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfBoolean') -> "NCollection_Array1< Standard_Boolean > &":
        return _TColStd.TColStd_Array1OfBoolean_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< Standard_Boolean > &":
        return _TColStd.TColStd_Array1OfBoolean_Set(self, *args)

    def First(self) -> "bool const &":
        return _TColStd.TColStd_Array1OfBoolean_First(self)

    def ChangeFirst(self) -> "bool &":
        return _TColStd.TColStd_Array1OfBoolean_ChangeFirst(self)

    def Last(self) -> "bool const &":
        return _TColStd.TColStd_Array1OfBoolean_Last(self)

    def ChangeLast(self) -> "bool &":
        return _TColStd.TColStd_Array1OfBoolean_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "bool const &":
        return _TColStd.TColStd_Array1OfBoolean_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "bool &":
        return _TColStd.TColStd_Array1OfBoolean_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "bool &":
        return _TColStd.TColStd_Array1OfBoolean___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'bool const &') -> "void":
        return _TColStd.TColStd_Array1OfBoolean_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfBoolean_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfBoolean
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfBoolean_swigregister = _TColStd.TColStd_Array1OfBoolean_swigregister
TColStd_Array1OfBoolean_swigregister(TColStd_Array1OfBoolean)

class TColStd_Array1OfByte(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfByte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfByte, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< unsigned char >::iterator":
        return _TColStd.TColStd_Array1OfByte_begin(self)

    def end(self) -> "NCollection_Array1< unsigned char >::iterator":
        return _TColStd.TColStd_Array1OfByte_end(self)

    def cbegin(self) -> "NCollection_Array1< unsigned char >::const_iterator":
        return _TColStd.TColStd_Array1OfByte_cbegin(self)

    def cend(self) -> "NCollection_Array1< unsigned char >::const_iterator":
        return _TColStd.TColStd_Array1OfByte_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfByte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'unsigned char const &') -> "void":
        return _TColStd.TColStd_Array1OfByte_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfByte_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfByte_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfByte_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfByte_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfByte_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfByte_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfByte_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfByte') -> "NCollection_Array1< Standard_Byte > &":
        return _TColStd.TColStd_Array1OfByte_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfByte') -> "NCollection_Array1< Standard_Byte > &":
        return _TColStd.TColStd_Array1OfByte_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< Standard_Byte > &":
        return _TColStd.TColStd_Array1OfByte_Set(self, *args)

    def First(self) -> "unsigned char const &":
        return _TColStd.TColStd_Array1OfByte_First(self)

    def ChangeFirst(self) -> "unsigned char &":
        return _TColStd.TColStd_Array1OfByte_ChangeFirst(self)

    def Last(self) -> "unsigned char const &":
        return _TColStd.TColStd_Array1OfByte_Last(self)

    def ChangeLast(self) -> "unsigned char &":
        return _TColStd.TColStd_Array1OfByte_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "unsigned char const &":
        return _TColStd.TColStd_Array1OfByte_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "unsigned char &":
        return _TColStd.TColStd_Array1OfByte_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "unsigned char &":
        return _TColStd.TColStd_Array1OfByte___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'unsigned char const &') -> "void":
        return _TColStd.TColStd_Array1OfByte_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfByte_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfByte
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfByte_swigregister = _TColStd.TColStd_Array1OfByte_swigregister
TColStd_Array1OfByte_swigregister(TColStd_Array1OfByte)

class TColStd_Array1OfCharacter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfCharacter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfCharacter, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< char >::iterator":
        return _TColStd.TColStd_Array1OfCharacter_begin(self)

    def end(self) -> "NCollection_Array1< char >::iterator":
        return _TColStd.TColStd_Array1OfCharacter_end(self)

    def cbegin(self) -> "NCollection_Array1< char >::const_iterator":
        return _TColStd.TColStd_Array1OfCharacter_cbegin(self)

    def cend(self) -> "NCollection_Array1< char >::const_iterator":
        return _TColStd.TColStd_Array1OfCharacter_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfCharacter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'char const &') -> "void":
        return _TColStd.TColStd_Array1OfCharacter_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfCharacter_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfCharacter_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfCharacter_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfCharacter_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfCharacter_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfCharacter_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfCharacter_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfCharacter') -> "NCollection_Array1< Standard_Character > &":
        return _TColStd.TColStd_Array1OfCharacter_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfCharacter') -> "NCollection_Array1< Standard_Character > &":
        return _TColStd.TColStd_Array1OfCharacter_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< Standard_Character > &":
        return _TColStd.TColStd_Array1OfCharacter_Set(self, *args)

    def First(self) -> "char const &":
        return _TColStd.TColStd_Array1OfCharacter_First(self)

    def ChangeFirst(self) -> "char &":
        return _TColStd.TColStd_Array1OfCharacter_ChangeFirst(self)

    def Last(self) -> "char const &":
        return _TColStd.TColStd_Array1OfCharacter_Last(self)

    def ChangeLast(self) -> "char &":
        return _TColStd.TColStd_Array1OfCharacter_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "char const &":
        return _TColStd.TColStd_Array1OfCharacter_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "char &":
        return _TColStd.TColStd_Array1OfCharacter_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "char &":
        return _TColStd.TColStd_Array1OfCharacter___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'char const &') -> "void":
        return _TColStd.TColStd_Array1OfCharacter_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfCharacter_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfCharacter
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfCharacter_swigregister = _TColStd.TColStd_Array1OfCharacter_swigregister
TColStd_Array1OfCharacter_swigregister(TColStd_Array1OfCharacter)

class TColStd_Array1OfExtendedString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfExtendedString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfExtendedString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< TCollection_ExtendedString >::iterator":
        return _TColStd.TColStd_Array1OfExtendedString_begin(self)

    def end(self) -> "NCollection_Array1< TCollection_ExtendedString >::iterator":
        return _TColStd.TColStd_Array1OfExtendedString_end(self)

    def cbegin(self) -> "NCollection_Array1< TCollection_ExtendedString >::const_iterator":
        return _TColStd.TColStd_Array1OfExtendedString_cbegin(self)

    def cend(self) -> "NCollection_Array1< TCollection_ExtendedString >::const_iterator":
        return _TColStd.TColStd_Array1OfExtendedString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'TCollection_ExtendedString') -> "void":
        return _TColStd.TColStd_Array1OfExtendedString_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfExtendedString_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfExtendedString_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfExtendedString_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfExtendedString_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfExtendedString_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfExtendedString_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfExtendedString_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfExtendedString') -> "NCollection_Array1< TCollection_ExtendedString > &":
        return _TColStd.TColStd_Array1OfExtendedString_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfExtendedString') -> "NCollection_Array1< TCollection_ExtendedString > &":
        return _TColStd.TColStd_Array1OfExtendedString_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< TCollection_ExtendedString > &":
        return _TColStd.TColStd_Array1OfExtendedString_Set(self, *args)

    def First(self) -> "TCollection_ExtendedString const &":
        return _TColStd.TColStd_Array1OfExtendedString_First(self)

    def ChangeFirst(self) -> "TCollection_ExtendedString &":
        return _TColStd.TColStd_Array1OfExtendedString_ChangeFirst(self)

    def Last(self) -> "TCollection_ExtendedString const &":
        return _TColStd.TColStd_Array1OfExtendedString_Last(self)

    def ChangeLast(self) -> "TCollection_ExtendedString &":
        return _TColStd.TColStd_Array1OfExtendedString_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TCollection_ExtendedString const &":
        return _TColStd.TColStd_Array1OfExtendedString_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TCollection_ExtendedString &":
        return _TColStd.TColStd_Array1OfExtendedString_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TCollection_ExtendedString &":
        return _TColStd.TColStd_Array1OfExtendedString___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TCollection_ExtendedString') -> "void":
        return _TColStd.TColStd_Array1OfExtendedString_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfExtendedString_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfExtendedString
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfExtendedString_swigregister = _TColStd.TColStd_Array1OfExtendedString_swigregister
TColStd_Array1OfExtendedString_swigregister(TColStd_Array1OfExtendedString)

class TColStd_Array1OfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< int >::iterator":
        return _TColStd.TColStd_Array1OfInteger_begin(self)

    def end(self) -> "NCollection_Array1< int >::iterator":
        return _TColStd.TColStd_Array1OfInteger_end(self)

    def cbegin(self) -> "NCollection_Array1< int >::const_iterator":
        return _TColStd.TColStd_Array1OfInteger_cbegin(self)

    def cend(self) -> "NCollection_Array1< int >::const_iterator":
        return _TColStd.TColStd_Array1OfInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'int const &') -> "void":
        return _TColStd.TColStd_Array1OfInteger_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfInteger_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfInteger_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfInteger_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfInteger_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfInteger_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfInteger_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfInteger_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfInteger') -> "NCollection_Array1< Standard_Integer > &":
        return _TColStd.TColStd_Array1OfInteger_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfInteger') -> "NCollection_Array1< Standard_Integer > &":
        return _TColStd.TColStd_Array1OfInteger_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< Standard_Integer > &":
        return _TColStd.TColStd_Array1OfInteger_Set(self, *args)

    def First(self) -> "int const &":
        return _TColStd.TColStd_Array1OfInteger_First(self)

    def ChangeFirst(self) -> "int &":
        return _TColStd.TColStd_Array1OfInteger_ChangeFirst(self)

    def Last(self) -> "int const &":
        return _TColStd.TColStd_Array1OfInteger_Last(self)

    def ChangeLast(self) -> "int &":
        return _TColStd.TColStd_Array1OfInteger_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "int const &":
        return _TColStd.TColStd_Array1OfInteger_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "int &":
        return _TColStd.TColStd_Array1OfInteger_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "int &":
        return _TColStd.TColStd_Array1OfInteger___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'int const &') -> "void":
        return _TColStd.TColStd_Array1OfInteger_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfInteger_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfInteger
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfInteger_swigregister = _TColStd.TColStd_Array1OfInteger_swigregister
TColStd_Array1OfInteger_swigregister(TColStd_Array1OfInteger)

class TColStd_Array1OfListOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfListOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfListOfInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< TColStd_ListOfInteger >::iterator":
        return _TColStd.TColStd_Array1OfListOfInteger_begin(self)

    def end(self) -> "NCollection_Array1< TColStd_ListOfInteger >::iterator":
        return _TColStd.TColStd_Array1OfListOfInteger_end(self)

    def cbegin(self) -> "NCollection_Array1< TColStd_ListOfInteger >::const_iterator":
        return _TColStd.TColStd_Array1OfListOfInteger_cbegin(self)

    def cend(self) -> "NCollection_Array1< TColStd_ListOfInteger >::const_iterator":
        return _TColStd.TColStd_Array1OfListOfInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfListOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'TColStd_ListOfInteger') -> "void":
        return _TColStd.TColStd_Array1OfListOfInteger_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfListOfInteger_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfListOfInteger_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfListOfInteger_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfListOfInteger_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfListOfInteger_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfListOfInteger_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfListOfInteger_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfListOfInteger') -> "NCollection_Array1< TColStd_ListOfInteger > &":
        return _TColStd.TColStd_Array1OfListOfInteger_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfListOfInteger') -> "NCollection_Array1< TColStd_ListOfInteger > &":
        return _TColStd.TColStd_Array1OfListOfInteger_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< TColStd_ListOfInteger > &":
        return _TColStd.TColStd_Array1OfListOfInteger_Set(self, *args)

    def First(self) -> "TColStd_ListOfInteger const &":
        return _TColStd.TColStd_Array1OfListOfInteger_First(self)

    def ChangeFirst(self) -> "TColStd_ListOfInteger &":
        return _TColStd.TColStd_Array1OfListOfInteger_ChangeFirst(self)

    def Last(self) -> "TColStd_ListOfInteger const &":
        return _TColStd.TColStd_Array1OfListOfInteger_Last(self)

    def ChangeLast(self) -> "TColStd_ListOfInteger &":
        return _TColStd.TColStd_Array1OfListOfInteger_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TColStd_ListOfInteger const &":
        return _TColStd.TColStd_Array1OfListOfInteger_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TColStd_ListOfInteger &":
        return _TColStd.TColStd_Array1OfListOfInteger_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TColStd_ListOfInteger &":
        return _TColStd.TColStd_Array1OfListOfInteger___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TColStd_ListOfInteger') -> "void":
        return _TColStd.TColStd_Array1OfListOfInteger_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfListOfInteger_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfListOfInteger
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfListOfInteger_swigregister = _TColStd.TColStd_Array1OfListOfInteger_swigregister
TColStd_Array1OfListOfInteger_swigregister(TColStd_Array1OfListOfInteger)

class TColStd_Array1OfReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< double >::iterator":
        return _TColStd.TColStd_Array1OfReal_begin(self)

    def end(self) -> "NCollection_Array1< double >::iterator":
        return _TColStd.TColStd_Array1OfReal_end(self)

    def cbegin(self) -> "NCollection_Array1< double >::const_iterator":
        return _TColStd.TColStd_Array1OfReal_cbegin(self)

    def cend(self) -> "NCollection_Array1< double >::const_iterator":
        return _TColStd.TColStd_Array1OfReal_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'double const &') -> "void":
        return _TColStd.TColStd_Array1OfReal_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfReal_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfReal_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfReal_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfReal_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfReal_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfReal_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfReal_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfReal') -> "NCollection_Array1< Standard_Real > &":
        return _TColStd.TColStd_Array1OfReal_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfReal') -> "NCollection_Array1< Standard_Real > &":
        return _TColStd.TColStd_Array1OfReal_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< Standard_Real > &":
        return _TColStd.TColStd_Array1OfReal_Set(self, *args)

    def First(self) -> "double const &":
        return _TColStd.TColStd_Array1OfReal_First(self)

    def ChangeFirst(self) -> "double &":
        return _TColStd.TColStd_Array1OfReal_ChangeFirst(self)

    def Last(self) -> "double const &":
        return _TColStd.TColStd_Array1OfReal_Last(self)

    def ChangeLast(self) -> "double &":
        return _TColStd.TColStd_Array1OfReal_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "double const &":
        return _TColStd.TColStd_Array1OfReal_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "double &":
        return _TColStd.TColStd_Array1OfReal_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "double &":
        return _TColStd.TColStd_Array1OfReal___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'double const &') -> "void":
        return _TColStd.TColStd_Array1OfReal_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfReal_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfReal
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfReal_swigregister = _TColStd.TColStd_Array1OfReal_swigregister
TColStd_Array1OfReal_swigregister(TColStd_Array1OfReal)

class TColStd_Array1OfTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array1OfTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array1OfTransient, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Standard_Transient > >::iterator":
        return _TColStd.TColStd_Array1OfTransient_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Standard_Transient > >::iterator":
        return _TColStd.TColStd_Array1OfTransient_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Standard_Transient > >::const_iterator":
        return _TColStd.TColStd_Array1OfTransient_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Standard_Transient > >::const_iterator":
        return _TColStd.TColStd_Array1OfTransient_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array1OfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Standard_Transient > const &') -> "void":
        return _TColStd.TColStd_Array1OfTransient_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfTransient_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfTransient_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfTransient_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfTransient_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array1OfTransient_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfTransient_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array1OfTransient_IsAllocated(self)

    def Assign(self, theOther: 'TColStd_Array1OfTransient') -> "NCollection_Array1< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_Array1OfTransient_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array1OfTransient') -> "NCollection_Array1< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_Array1OfTransient_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_Array1OfTransient_Set(self, *args)

    def First(self) -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_Array1OfTransient_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_Array1OfTransient_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_Array1OfTransient_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_Array1OfTransient_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_Array1OfTransient_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_Array1OfTransient_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_Array1OfTransient___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Standard_Transient > const &') -> "void":
        return _TColStd.TColStd_Array1OfTransient_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColStd.TColStd_Array1OfTransient_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfTransient
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColStd_Array1OfTransient_swigregister = _TColStd.TColStd_Array1OfTransient_swigregister
TColStd_Array1OfTransient_swigregister(TColStd_Array1OfTransient)

class TColStd_Array2OfBoolean(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array2OfBoolean, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array2OfBoolean, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array2OfBoolean(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'bool const &') -> "void":
        return _TColStd.TColStd_Array2OfBoolean_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfBoolean_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array2OfBoolean_IsDeletable(self)

    def Assign(self, theOther: 'TColStd_Array2OfBoolean') -> "NCollection_Array2< Standard_Boolean > &":
        return _TColStd.TColStd_Array2OfBoolean_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array2OfBoolean') -> "NCollection_Array2< Standard_Boolean > &":
        return _TColStd.TColStd_Array2OfBoolean_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< Standard_Boolean > &":
        return _TColStd.TColStd_Array2OfBoolean_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "bool const &":
        return _TColStd.TColStd_Array2OfBoolean_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "bool &":
        return _TColStd.TColStd_Array2OfBoolean_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "bool &":
        return _TColStd.TColStd_Array2OfBoolean___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'bool const &') -> "void":
        return _TColStd.TColStd_Array2OfBoolean_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TColStd.TColStd_Array2OfBoolean_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfBoolean
    __del__ = lambda self: None
TColStd_Array2OfBoolean_swigregister = _TColStd.TColStd_Array2OfBoolean_swigregister
TColStd_Array2OfBoolean_swigregister(TColStd_Array2OfBoolean)

class TColStd_Array2OfCharacter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array2OfCharacter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array2OfCharacter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array2OfCharacter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'char const &') -> "void":
        return _TColStd.TColStd_Array2OfCharacter_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfCharacter_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array2OfCharacter_IsDeletable(self)

    def Assign(self, theOther: 'TColStd_Array2OfCharacter') -> "NCollection_Array2< Standard_Character > &":
        return _TColStd.TColStd_Array2OfCharacter_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array2OfCharacter') -> "NCollection_Array2< Standard_Character > &":
        return _TColStd.TColStd_Array2OfCharacter_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< Standard_Character > &":
        return _TColStd.TColStd_Array2OfCharacter_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "char const &":
        return _TColStd.TColStd_Array2OfCharacter_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "char &":
        return _TColStd.TColStd_Array2OfCharacter_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "char &":
        return _TColStd.TColStd_Array2OfCharacter___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'char const &') -> "void":
        return _TColStd.TColStd_Array2OfCharacter_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TColStd.TColStd_Array2OfCharacter_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfCharacter
    __del__ = lambda self: None
TColStd_Array2OfCharacter_swigregister = _TColStd.TColStd_Array2OfCharacter_swigregister
TColStd_Array2OfCharacter_swigregister(TColStd_Array2OfCharacter)

class TColStd_Array2OfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array2OfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array2OfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array2OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'int const &') -> "void":
        return _TColStd.TColStd_Array2OfInteger_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfInteger_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array2OfInteger_IsDeletable(self)

    def Assign(self, theOther: 'TColStd_Array2OfInteger') -> "NCollection_Array2< Standard_Integer > &":
        return _TColStd.TColStd_Array2OfInteger_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array2OfInteger') -> "NCollection_Array2< Standard_Integer > &":
        return _TColStd.TColStd_Array2OfInteger_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< Standard_Integer > &":
        return _TColStd.TColStd_Array2OfInteger_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "int const &":
        return _TColStd.TColStd_Array2OfInteger_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "int &":
        return _TColStd.TColStd_Array2OfInteger_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "int &":
        return _TColStd.TColStd_Array2OfInteger___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'int const &') -> "void":
        return _TColStd.TColStd_Array2OfInteger_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TColStd.TColStd_Array2OfInteger_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfInteger
    __del__ = lambda self: None
TColStd_Array2OfInteger_swigregister = _TColStd.TColStd_Array2OfInteger_swigregister
TColStd_Array2OfInteger_swigregister(TColStd_Array2OfInteger)

class TColStd_Array2OfReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array2OfReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array2OfReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array2OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'double const &') -> "void":
        return _TColStd.TColStd_Array2OfReal_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfReal_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array2OfReal_IsDeletable(self)

    def Assign(self, theOther: 'TColStd_Array2OfReal') -> "NCollection_Array2< Standard_Real > &":
        return _TColStd.TColStd_Array2OfReal_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array2OfReal') -> "NCollection_Array2< Standard_Real > &":
        return _TColStd.TColStd_Array2OfReal_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< Standard_Real > &":
        return _TColStd.TColStd_Array2OfReal_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "double const &":
        return _TColStd.TColStd_Array2OfReal_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "double &":
        return _TColStd.TColStd_Array2OfReal_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "double &":
        return _TColStd.TColStd_Array2OfReal___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'double const &') -> "void":
        return _TColStd.TColStd_Array2OfReal_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TColStd.TColStd_Array2OfReal_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfReal
    __del__ = lambda self: None
TColStd_Array2OfReal_swigregister = _TColStd.TColStd_Array2OfReal_swigregister
TColStd_Array2OfReal_swigregister(TColStd_Array2OfReal)

class TColStd_Array2OfTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_Array2OfTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_Array2OfTransient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_Array2OfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Standard_Transient > const &') -> "void":
        return _TColStd.TColStd_Array2OfTransient_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TColStd.TColStd_Array2OfTransient_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColStd.TColStd_Array2OfTransient_IsDeletable(self)

    def Assign(self, theOther: 'TColStd_Array2OfTransient') -> "NCollection_Array2< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_Array2OfTransient_Assign(self, theOther)

    def Move(self, theOther: 'TColStd_Array2OfTransient') -> "NCollection_Array2< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_Array2OfTransient_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_Array2OfTransient_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_Array2OfTransient_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_Array2OfTransient_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_Array2OfTransient___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'opencascade::handle< Standard_Transient > const &') -> "void":
        return _TColStd.TColStd_Array2OfTransient_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TColStd.TColStd_Array2OfTransient_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfTransient
    __del__ = lambda self: None
TColStd_Array2OfTransient_swigregister = _TColStd.TColStd_Array2OfTransient_swigregister
TColStd_Array2OfTransient_swigregister(TColStd_Array2OfTransient)

class TColStd_DataMapOfAsciiStringInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_DataMapOfAsciiStringInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_DataMapOfAsciiStringInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_AsciiString,int,TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_AsciiString,int,TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_AsciiString,int,TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_AsciiString,int,TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_DataMapOfAsciiStringInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_DataMapOfAsciiStringInteger') -> "void":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_DataMapOfAsciiStringInteger') -> "NCollection_DataMap< TCollection_AsciiString,Standard_Integer,TCollection_AsciiString > &":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_DataMapOfAsciiStringInteger') -> "NCollection_DataMap< TCollection_AsciiString,Standard_Integer,TCollection_AsciiString > &":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_AsciiString', theItem: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_AsciiString', theItem: 'int const &') -> "int *":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_AsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_AsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_AsciiString') -> "int const *":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_AsciiString') -> "int *":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_AsciiString') -> "int &":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_ChangeFind(self, theKey)

    def __call__(self, *args) -> "int &":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfAsciiStringInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Size(self)
TColStd_DataMapOfAsciiStringInteger_swigregister = _TColStd.TColStd_DataMapOfAsciiStringInteger_swigregister
TColStd_DataMapOfAsciiStringInteger_swigregister(TColStd_DataMapOfAsciiStringInteger)

class TColStd_DataMapOfIntegerInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_DataMapOfIntegerInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_DataMapOfIntegerInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< int,int,TColStd_MapIntegerHasher >::iterator":
        return _TColStd.TColStd_DataMapOfIntegerInteger_begin(self)

    def end(self) -> "NCollection_DataMap< int,int,TColStd_MapIntegerHasher >::iterator":
        return _TColStd.TColStd_DataMapOfIntegerInteger_end(self)

    def cbegin(self) -> "NCollection_DataMap< int,int,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfIntegerInteger_cbegin(self)

    def cend(self) -> "NCollection_DataMap< int,int,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfIntegerInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_DataMapOfIntegerInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_DataMapOfIntegerInteger') -> "void":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_DataMapOfIntegerInteger') -> "NCollection_DataMap< Standard_Integer,Standard_Integer,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_DataMapOfIntegerInteger') -> "NCollection_DataMap< Standard_Integer,Standard_Integer,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_DataMapOfIntegerInteger_ReSize(self, N)

    def Bind(self, theKey: 'int const &', theItem: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'int const &', theItem: 'int const &') -> "int *":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerInteger_IsBound(self, theKey)

    def UnBind(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerInteger_UnBind(self, theKey)

    def Seek(self, theKey: 'int const &') -> "int const *":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Find(self, *args)

    def ChangeSeek(self, theKey: 'int const &') -> "int *":
        return _TColStd.TColStd_DataMapOfIntegerInteger_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'int const &') -> "int &":
        return _TColStd.TColStd_DataMapOfIntegerInteger_ChangeFind(self, theKey)

    def __call__(self, *args) -> "int &":
        return _TColStd.TColStd_DataMapOfIntegerInteger___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfIntegerInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Size(self)

    def Keys(self) -> "PyObject *":
        return _TColStd.TColStd_DataMapOfIntegerInteger_Keys(self)
TColStd_DataMapOfIntegerInteger_swigregister = _TColStd.TColStd_DataMapOfIntegerInteger_swigregister
TColStd_DataMapOfIntegerInteger_swigregister(TColStd_DataMapOfIntegerInteger)

class TColStd_DataMapOfIntegerListOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_DataMapOfIntegerListOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_DataMapOfIntegerListOfInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< int,TColStd_ListOfInteger,TColStd_MapIntegerHasher >::iterator":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_begin(self)

    def end(self) -> "NCollection_DataMap< int,TColStd_ListOfInteger,TColStd_MapIntegerHasher >::iterator":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_end(self)

    def cbegin(self) -> "NCollection_DataMap< int,TColStd_ListOfInteger,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_cbegin(self)

    def cend(self) -> "NCollection_DataMap< int,TColStd_ListOfInteger,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_DataMapOfIntegerListOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_DataMapOfIntegerListOfInteger') -> "void":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_DataMapOfIntegerListOfInteger') -> "NCollection_DataMap< Standard_Integer,TColStd_ListOfInteger,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_DataMapOfIntegerListOfInteger') -> "NCollection_DataMap< Standard_Integer,TColStd_ListOfInteger,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_ReSize(self, N)

    def Bind(self, theKey: 'int const &', theItem: 'TColStd_ListOfInteger') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'int const &', theItem: 'TColStd_ListOfInteger') -> "TColStd_ListOfInteger *":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_IsBound(self, theKey)

    def UnBind(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_UnBind(self, theKey)

    def Seek(self, theKey: 'int const &') -> "TColStd_ListOfInteger const *":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Find(self, *args)

    def ChangeSeek(self, theKey: 'int const &') -> "TColStd_ListOfInteger *":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'int const &') -> "TColStd_ListOfInteger &":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TColStd_ListOfInteger &":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfIntegerListOfInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Size(self)

    def Keys(self) -> "PyObject *":
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Keys(self)
TColStd_DataMapOfIntegerListOfInteger_swigregister = _TColStd.TColStd_DataMapOfIntegerListOfInteger_swigregister
TColStd_DataMapOfIntegerListOfInteger_swigregister(TColStd_DataMapOfIntegerListOfInteger)

class TColStd_DataMapOfIntegerReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_DataMapOfIntegerReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_DataMapOfIntegerReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< int,double,TColStd_MapIntegerHasher >::iterator":
        return _TColStd.TColStd_DataMapOfIntegerReal_begin(self)

    def end(self) -> "NCollection_DataMap< int,double,TColStd_MapIntegerHasher >::iterator":
        return _TColStd.TColStd_DataMapOfIntegerReal_end(self)

    def cbegin(self) -> "NCollection_DataMap< int,double,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfIntegerReal_cbegin(self)

    def cend(self) -> "NCollection_DataMap< int,double,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfIntegerReal_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_DataMapOfIntegerReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_DataMapOfIntegerReal') -> "void":
        return _TColStd.TColStd_DataMapOfIntegerReal_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_DataMapOfIntegerReal') -> "NCollection_DataMap< Standard_Integer,Standard_Real,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_DataMapOfIntegerReal_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_DataMapOfIntegerReal') -> "NCollection_DataMap< Standard_Integer,Standard_Real,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_DataMapOfIntegerReal_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_DataMapOfIntegerReal_ReSize(self, N)

    def Bind(self, theKey: 'int const &', theItem: 'double const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerReal_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'int const &', theItem: 'double const &') -> "double *":
        return _TColStd.TColStd_DataMapOfIntegerReal_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerReal_IsBound(self, theKey)

    def UnBind(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerReal_UnBind(self, theKey)

    def Seek(self, theKey: 'int const &') -> "double const *":
        return _TColStd.TColStd_DataMapOfIntegerReal_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerReal_Find(self, *args)

    def ChangeSeek(self, theKey: 'int const &') -> "double *":
        return _TColStd.TColStd_DataMapOfIntegerReal_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'int const &') -> "double &":
        return _TColStd.TColStd_DataMapOfIntegerReal_ChangeFind(self, theKey)

    def __call__(self, *args) -> "double &":
        return _TColStd.TColStd_DataMapOfIntegerReal___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_DataMapOfIntegerReal_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfIntegerReal
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_DataMapOfIntegerReal_Size(self)

    def Keys(self) -> "PyObject *":
        return _TColStd.TColStd_DataMapOfIntegerReal_Keys(self)
TColStd_DataMapOfIntegerReal_swigregister = _TColStd.TColStd_DataMapOfIntegerReal_swigregister
TColStd_DataMapOfIntegerReal_swigregister(TColStd_DataMapOfIntegerReal)

class TColStd_DataMapOfIntegerTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_DataMapOfIntegerTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_DataMapOfIntegerTransient, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< int,opencascade::handle< Standard_Transient >,TColStd_MapIntegerHasher >::iterator":
        return _TColStd.TColStd_DataMapOfIntegerTransient_begin(self)

    def end(self) -> "NCollection_DataMap< int,opencascade::handle< Standard_Transient >,TColStd_MapIntegerHasher >::iterator":
        return _TColStd.TColStd_DataMapOfIntegerTransient_end(self)

    def cbegin(self) -> "NCollection_DataMap< int,opencascade::handle< Standard_Transient >,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfIntegerTransient_cbegin(self)

    def cend(self) -> "NCollection_DataMap< int,opencascade::handle< Standard_Transient >,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfIntegerTransient_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_DataMapOfIntegerTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_DataMapOfIntegerTransient') -> "void":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_DataMapOfIntegerTransient') -> "NCollection_DataMap< Standard_Integer,opencascade::handle< Standard_Transient >,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_DataMapOfIntegerTransient') -> "NCollection_DataMap< Standard_Integer,opencascade::handle< Standard_Transient >,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_DataMapOfIntegerTransient_ReSize(self, N)

    def Bind(self, theKey: 'int const &', theItem: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'int const &', theItem: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > *":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerTransient_IsBound(self, theKey)

    def UnBind(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerTransient_UnBind(self, theKey)

    def Seek(self, theKey: 'int const &') -> "opencascade::handle< Standard_Transient > const *":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Find(self, *args)

    def ChangeSeek(self, theKey: 'int const &') -> "opencascade::handle< Standard_Transient > *":
        return _TColStd.TColStd_DataMapOfIntegerTransient_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'int const &') -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_DataMapOfIntegerTransient_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_DataMapOfIntegerTransient___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfIntegerTransient
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Size(self)

    def Keys(self) -> "PyObject *":
        return _TColStd.TColStd_DataMapOfIntegerTransient_Keys(self)
TColStd_DataMapOfIntegerTransient_swigregister = _TColStd.TColStd_DataMapOfIntegerTransient_swigregister
TColStd_DataMapOfIntegerTransient_swigregister(TColStd_DataMapOfIntegerTransient)

class TColStd_DataMapOfStringInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_DataMapOfStringInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_DataMapOfStringInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_ExtendedString,int,TCollection_ExtendedString >::iterator":
        return _TColStd.TColStd_DataMapOfStringInteger_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_ExtendedString,int,TCollection_ExtendedString >::iterator":
        return _TColStd.TColStd_DataMapOfStringInteger_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_ExtendedString,int,TCollection_ExtendedString >::const_iterator":
        return _TColStd.TColStd_DataMapOfStringInteger_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_ExtendedString,int,TCollection_ExtendedString >::const_iterator":
        return _TColStd.TColStd_DataMapOfStringInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_DataMapOfStringInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_DataMapOfStringInteger') -> "void":
        return _TColStd.TColStd_DataMapOfStringInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_DataMapOfStringInteger') -> "NCollection_DataMap< TCollection_ExtendedString,Standard_Integer,TCollection_ExtendedString > &":
        return _TColStd.TColStd_DataMapOfStringInteger_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_DataMapOfStringInteger') -> "NCollection_DataMap< TCollection_ExtendedString,Standard_Integer,TCollection_ExtendedString > &":
        return _TColStd.TColStd_DataMapOfStringInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_DataMapOfStringInteger_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_ExtendedString', theItem: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfStringInteger_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_ExtendedString', theItem: 'int const &') -> "int *":
        return _TColStd.TColStd_DataMapOfStringInteger_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfStringInteger_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfStringInteger_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_ExtendedString') -> "int const *":
        return _TColStd.TColStd_DataMapOfStringInteger_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfStringInteger_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_ExtendedString') -> "int *":
        return _TColStd.TColStd_DataMapOfStringInteger_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_ExtendedString') -> "int &":
        return _TColStd.TColStd_DataMapOfStringInteger_ChangeFind(self, theKey)

    def __call__(self, *args) -> "int &":
        return _TColStd.TColStd_DataMapOfStringInteger___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_DataMapOfStringInteger_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfStringInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_DataMapOfStringInteger_Size(self)
TColStd_DataMapOfStringInteger_swigregister = _TColStd.TColStd_DataMapOfStringInteger_swigregister
TColStd_DataMapOfStringInteger_swigregister(TColStd_DataMapOfStringInteger)

class TColStd_DataMapOfTransientTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_DataMapOfTransientTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_DataMapOfTransientTransient, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::iterator":
        return _TColStd.TColStd_DataMapOfTransientTransient_begin(self)

    def end(self) -> "NCollection_DataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::iterator":
        return _TColStd.TColStd_DataMapOfTransientTransient_end(self)

    def cbegin(self) -> "NCollection_DataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfTransientTransient_cbegin(self)

    def cend(self) -> "NCollection_DataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::const_iterator":
        return _TColStd.TColStd_DataMapOfTransientTransient_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_DataMapOfTransientTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_DataMapOfTransientTransient') -> "void":
        return _TColStd.TColStd_DataMapOfTransientTransient_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_DataMapOfTransientTransient') -> "NCollection_DataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher > &":
        return _TColStd.TColStd_DataMapOfTransientTransient_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_DataMapOfTransientTransient') -> "NCollection_DataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher > &":
        return _TColStd.TColStd_DataMapOfTransientTransient_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_DataMapOfTransientTransient_ReSize(self, N)

    def Bind(self, theKey: 'opencascade::handle< Standard_Transient > const &', theItem: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfTransientTransient_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'opencascade::handle< Standard_Transient > const &', theItem: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > *":
        return _TColStd.TColStd_DataMapOfTransientTransient_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfTransientTransient_IsBound(self, theKey)

    def UnBind(self, theKey: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfTransientTransient_UnBind(self, theKey)

    def Seek(self, theKey: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > const *":
        return _TColStd.TColStd_DataMapOfTransientTransient_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_DataMapOfTransientTransient_Find(self, *args)

    def ChangeSeek(self, theKey: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > *":
        return _TColStd.TColStd_DataMapOfTransientTransient_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_DataMapOfTransientTransient_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_DataMapOfTransientTransient___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_DataMapOfTransientTransient_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfTransientTransient
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_DataMapOfTransientTransient_Size(self)
TColStd_DataMapOfTransientTransient_swigregister = _TColStd.TColStd_DataMapOfTransientTransient_swigregister
TColStd_DataMapOfTransientTransient_swigregister(TColStd_DataMapOfTransientTransient)

class TColStd_IndexedDataMapOfStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_IndexedDataMapOfStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_IndexedDataMapOfStringString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_IndexedDataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_IndexedDataMapOfStringString_begin(self)

    def end(self) -> "NCollection_IndexedDataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_IndexedDataMapOfStringString_end(self)

    def cbegin(self) -> "NCollection_IndexedDataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_IndexedDataMapOfStringString_cbegin(self)

    def cend(self) -> "NCollection_IndexedDataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_IndexedDataMapOfStringString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_IndexedDataMapOfStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_IndexedDataMapOfStringString') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_IndexedDataMapOfStringString') -> "NCollection_IndexedDataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString > &":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_IndexedDataMapOfStringString') -> "NCollection_IndexedDataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString > &":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfStringString_ReSize(self, N)

    def Add(self, theKey1: 'TCollection_AsciiString', theItem: 'TCollection_AsciiString') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Add(self, theKey1, theItem)

    def Contains(self, theKey1: 'TCollection_AsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TCollection_AsciiString', theItem: 'TCollection_AsciiString') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TColStd.TColStd_IndexedDataMapOfStringString_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfStringString_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TCollection_AsciiString') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfStringString_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_IndexedDataMapOfStringString_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex: 'Standard_Integer const') -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_IndexedDataMapOfStringString_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex: 'Standard_Integer const') -> "TCollection_AsciiString &":
        return _TColStd.TColStd_IndexedDataMapOfStringString_ChangeFromIndex(self, theIndex)

    def __call__(self, *args) -> "TCollection_AsciiString &":
        return _TColStd.TColStd_IndexedDataMapOfStringString___call__(self, *args)

    def FindIndex(self, theKey1: 'TCollection_AsciiString') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedDataMapOfStringString_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1: 'TCollection_AsciiString') -> "TCollection_AsciiString &":
        return _TColStd.TColStd_IndexedDataMapOfStringString_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1: 'TCollection_AsciiString') -> "TCollection_AsciiString const *":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Seek(self, theKey1)

    def ChangeSeek(self, theKey1: 'TCollection_AsciiString') -> "TCollection_AsciiString *":
        return _TColStd.TColStd_IndexedDataMapOfStringString_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedDataMapOfStringString_FindFromKey(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_IndexedDataMapOfStringString
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_IndexedDataMapOfStringString_Size(self)
TColStd_IndexedDataMapOfStringString_swigregister = _TColStd.TColStd_IndexedDataMapOfStringString_swigregister
TColStd_IndexedDataMapOfStringString_swigregister(TColStd_IndexedDataMapOfStringString)

class TColStd_IndexedDataMapOfTransientTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_IndexedDataMapOfTransientTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_IndexedDataMapOfTransientTransient, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_IndexedDataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::iterator":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_begin(self)

    def end(self) -> "NCollection_IndexedDataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::iterator":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_end(self)

    def cbegin(self) -> "NCollection_IndexedDataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::const_iterator":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_cbegin(self)

    def cend(self) -> "NCollection_IndexedDataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::const_iterator":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_IndexedDataMapOfTransientTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_IndexedDataMapOfTransientTransient') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_IndexedDataMapOfTransientTransient') -> "NCollection_IndexedDataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher > &":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_IndexedDataMapOfTransientTransient') -> "NCollection_IndexedDataMap< opencascade::handle< Standard_Transient >,opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher > &":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_ReSize(self, N)

    def Add(self, theKey1: 'opencascade::handle< Standard_Transient > const &', theItem: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Add(self, theKey1, theItem)

    def Contains(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'opencascade::handle< Standard_Transient > const &', theItem: 'opencascade::handle< Standard_Transient > const &') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "void":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeFromIndex(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient___call__(self, *args)

    def FindIndex(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > const *":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Seek(self, theKey1)

    def ChangeSeek(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > *":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindFromKey(self, *args)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_IndexedDataMapOfTransientTransient
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Size(self)
TColStd_IndexedDataMapOfTransientTransient_swigregister = _TColStd.TColStd_IndexedDataMapOfTransientTransient_swigregister
TColStd_IndexedDataMapOfTransientTransient_swigregister(TColStd_IndexedDataMapOfTransientTransient)

class TColStd_IndexedMapOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_IndexedMapOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_IndexedMapOfInteger, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< int,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_IndexedMapOfInteger_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< int,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_IndexedMapOfInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_IndexedMapOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_IndexedMapOfInteger') -> "void":
        return _TColStd.TColStd_IndexedMapOfInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_IndexedMapOfInteger') -> "NCollection_IndexedMap< Standard_Integer,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_IndexedMapOfInteger_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_IndexedMapOfInteger') -> "NCollection_IndexedMap< Standard_Integer,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_IndexedMapOfInteger_Set(self, theOther)

    def ReSize(self, theExtent: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfInteger_ReSize(self, theExtent)

    def Add(self, theKey1: 'int const &') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfInteger_Add(self, theKey1)

    def Contains(self, theKey1: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedMapOfInteger_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'int const &') -> "void":
        return _TColStd.TColStd_IndexedMapOfInteger_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfInteger_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TColStd.TColStd_IndexedMapOfInteger_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfInteger_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedMapOfInteger_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "int const &":
        return _TColStd.TColStd_IndexedMapOfInteger_FindKey(self, theIndex)

    def __call__(self, theIndex: 'Standard_Integer const') -> "int const &":
        return _TColStd.TColStd_IndexedMapOfInteger___call__(self, theIndex)

    def FindIndex(self, theKey1: 'int const &') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfInteger_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_IndexedMapOfInteger_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapOfInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfInteger_Size(self)
TColStd_IndexedMapOfInteger_swigregister = _TColStd.TColStd_IndexedMapOfInteger_swigregister
TColStd_IndexedMapOfInteger_swigregister(TColStd_IndexedMapOfInteger)

class TColStd_IndexedMapOfReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_IndexedMapOfReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_IndexedMapOfReal, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< double,TColStd_MapRealHasher >::const_iterator":
        return _TColStd.TColStd_IndexedMapOfReal_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< double,TColStd_MapRealHasher >::const_iterator":
        return _TColStd.TColStd_IndexedMapOfReal_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_IndexedMapOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_IndexedMapOfReal') -> "void":
        return _TColStd.TColStd_IndexedMapOfReal_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_IndexedMapOfReal') -> "NCollection_IndexedMap< Standard_Real,TColStd_MapRealHasher > &":
        return _TColStd.TColStd_IndexedMapOfReal_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_IndexedMapOfReal') -> "NCollection_IndexedMap< Standard_Real,TColStd_MapRealHasher > &":
        return _TColStd.TColStd_IndexedMapOfReal_Set(self, theOther)

    def ReSize(self, theExtent: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfReal_ReSize(self, theExtent)

    def Add(self, theKey1: 'double const &') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfReal_Add(self, theKey1)

    def Contains(self, theKey1: 'double const &') -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedMapOfReal_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'double const &') -> "void":
        return _TColStd.TColStd_IndexedMapOfReal_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfReal_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TColStd.TColStd_IndexedMapOfReal_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfReal_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'double const &') -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedMapOfReal_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "double const &":
        return _TColStd.TColStd_IndexedMapOfReal_FindKey(self, theIndex)

    def __call__(self, theIndex: 'Standard_Integer const') -> "double const &":
        return _TColStd.TColStd_IndexedMapOfReal___call__(self, theIndex)

    def FindIndex(self, theKey1: 'double const &') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfReal_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_IndexedMapOfReal_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapOfReal
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfReal_Size(self)
TColStd_IndexedMapOfReal_swigregister = _TColStd.TColStd_IndexedMapOfReal_swigregister
TColStd_IndexedMapOfReal_swigregister(TColStd_IndexedMapOfReal)

class TColStd_IndexedMapOfTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_IndexedMapOfTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_IndexedMapOfTransient, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::const_iterator":
        return _TColStd.TColStd_IndexedMapOfTransient_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::const_iterator":
        return _TColStd.TColStd_IndexedMapOfTransient_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_IndexedMapOfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_IndexedMapOfTransient') -> "void":
        return _TColStd.TColStd_IndexedMapOfTransient_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_IndexedMapOfTransient') -> "NCollection_IndexedMap< opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher > &":
        return _TColStd.TColStd_IndexedMapOfTransient_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_IndexedMapOfTransient') -> "NCollection_IndexedMap< opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher > &":
        return _TColStd.TColStd_IndexedMapOfTransient_Set(self, theOther)

    def ReSize(self, theExtent: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfTransient_ReSize(self, theExtent)

    def Add(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfTransient_Add(self, theKey1)

    def Contains(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedMapOfTransient_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'opencascade::handle< Standard_Transient > const &') -> "void":
        return _TColStd.TColStd_IndexedMapOfTransient_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfTransient_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TColStd.TColStd_IndexedMapOfTransient_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_IndexedMapOfTransient_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_IndexedMapOfTransient_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_IndexedMapOfTransient_FindKey(self, theIndex)

    def __call__(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_IndexedMapOfTransient___call__(self, theIndex)

    def FindIndex(self, theKey1: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfTransient_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_IndexedMapOfTransient_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapOfTransient
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_IndexedMapOfTransient_Size(self)
TColStd_IndexedMapOfTransient_swigregister = _TColStd.TColStd_IndexedMapOfTransient_swigregister
TColStd_IndexedMapOfTransient_swigregister(TColStd_IndexedMapOfTransient)

class TColStd_ListIteratorOfListOfAsciiString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_ListIteratorOfListOfAsciiString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_ListIteratorOfListOfAsciiString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_ListIteratorOfListOfAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TColStd.TColStd_ListIteratorOfListOfAsciiString_More(self)

    def Next(self) -> "void":
        return _TColStd.TColStd_ListIteratorOfListOfAsciiString_Next(self)

    def Value(self) -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_ListIteratorOfListOfAsciiString_Value(self)

    def ChangeValue(self) -> "TCollection_AsciiString &":
        return _TColStd.TColStd_ListIteratorOfListOfAsciiString_ChangeValue(self)
    __swig_destroy__ = _TColStd.delete_TColStd_ListIteratorOfListOfAsciiString
    __del__ = lambda self: None
TColStd_ListIteratorOfListOfAsciiString_swigregister = _TColStd.TColStd_ListIteratorOfListOfAsciiString_swigregister
TColStd_ListIteratorOfListOfAsciiString_swigregister(TColStd_ListIteratorOfListOfAsciiString)

class TColStd_ListIteratorOfListOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_ListIteratorOfListOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_ListIteratorOfListOfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_ListIteratorOfListOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TColStd.TColStd_ListIteratorOfListOfInteger_More(self)

    def Next(self) -> "void":
        return _TColStd.TColStd_ListIteratorOfListOfInteger_Next(self)

    def Value(self) -> "int const &":
        return _TColStd.TColStd_ListIteratorOfListOfInteger_Value(self)

    def ChangeValue(self) -> "int &":
        return _TColStd.TColStd_ListIteratorOfListOfInteger_ChangeValue(self)
    __swig_destroy__ = _TColStd.delete_TColStd_ListIteratorOfListOfInteger
    __del__ = lambda self: None
TColStd_ListIteratorOfListOfInteger_swigregister = _TColStd.TColStd_ListIteratorOfListOfInteger_swigregister
TColStd_ListIteratorOfListOfInteger_swigregister(TColStd_ListIteratorOfListOfInteger)

class TColStd_ListIteratorOfListOfReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_ListIteratorOfListOfReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_ListIteratorOfListOfReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_ListIteratorOfListOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TColStd.TColStd_ListIteratorOfListOfReal_More(self)

    def Next(self) -> "void":
        return _TColStd.TColStd_ListIteratorOfListOfReal_Next(self)

    def Value(self) -> "double const &":
        return _TColStd.TColStd_ListIteratorOfListOfReal_Value(self)

    def ChangeValue(self) -> "double &":
        return _TColStd.TColStd_ListIteratorOfListOfReal_ChangeValue(self)
    __swig_destroy__ = _TColStd.delete_TColStd_ListIteratorOfListOfReal
    __del__ = lambda self: None
TColStd_ListIteratorOfListOfReal_swigregister = _TColStd.TColStd_ListIteratorOfListOfReal_swigregister
TColStd_ListIteratorOfListOfReal_swigregister(TColStd_ListIteratorOfListOfReal)

class TColStd_ListIteratorOfListOfTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_ListIteratorOfListOfTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_ListIteratorOfListOfTransient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_ListIteratorOfListOfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TColStd.TColStd_ListIteratorOfListOfTransient_More(self)

    def Next(self) -> "void":
        return _TColStd.TColStd_ListIteratorOfListOfTransient_Next(self)

    def Value(self) -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_ListIteratorOfListOfTransient_Value(self)

    def ChangeValue(self) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_ListIteratorOfListOfTransient_ChangeValue(self)
    __swig_destroy__ = _TColStd.delete_TColStd_ListIteratorOfListOfTransient
    __del__ = lambda self: None
TColStd_ListIteratorOfListOfTransient_swigregister = _TColStd.TColStd_ListIteratorOfListOfTransient_swigregister
TColStd_ListIteratorOfListOfTransient_swigregister(TColStd_ListIteratorOfListOfTransient)

class TColStd_ListOfAsciiString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_ListOfAsciiString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_ListOfAsciiString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_ListOfAsciiString_begin(self)

    def end(self) -> "NCollection_List< TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_ListOfAsciiString_end(self)

    def cbegin(self) -> "NCollection_List< TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_ListOfAsciiString_cbegin(self)

    def cend(self) -> "NCollection_List< TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_ListOfAsciiString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_ListOfAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_ListOfAsciiString_Size(self)

    def Assign(self, theOther: 'TColStd_ListOfAsciiString') -> "NCollection_List< TCollection_AsciiString > &":
        return _TColStd.TColStd_ListOfAsciiString_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_ListOfAsciiString') -> "NCollection_List< TCollection_AsciiString > &":
        return _TColStd.TColStd_ListOfAsciiString_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_ListOfAsciiString_Clear(self, theAllocator)

    def First(self) -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_ListOfAsciiString_First(self)

    def Last(self) -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_ListOfAsciiString_Last(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_ListOfAsciiString_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_ListOfAsciiString_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TColStd.TColStd_ListOfAsciiString_RemoveFirst(self)

    def Remove(self, theIter: 'TColStd_ListIteratorOfListOfAsciiString') -> "void":
        return _TColStd.TColStd_ListOfAsciiString_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_ListOfAsciiString_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_ListOfAsciiString_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_ListOfAsciiString_Reverse(self)
    __swig_destroy__ = _TColStd.delete_TColStd_ListOfAsciiString
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_ListOfAsciiString_swigregister = _TColStd.TColStd_ListOfAsciiString_swigregister
TColStd_ListOfAsciiString_swigregister(TColStd_ListOfAsciiString)

class TColStd_ListOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_ListOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_ListOfInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< int >::iterator":
        return _TColStd.TColStd_ListOfInteger_begin(self)

    def end(self) -> "NCollection_List< int >::iterator":
        return _TColStd.TColStd_ListOfInteger_end(self)

    def cbegin(self) -> "NCollection_List< int >::const_iterator":
        return _TColStd.TColStd_ListOfInteger_cbegin(self)

    def cend(self) -> "NCollection_List< int >::const_iterator":
        return _TColStd.TColStd_ListOfInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_ListOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_ListOfInteger_Size(self)

    def Assign(self, theOther: 'TColStd_ListOfInteger') -> "NCollection_List< Standard_Integer > &":
        return _TColStd.TColStd_ListOfInteger_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_ListOfInteger') -> "NCollection_List< Standard_Integer > &":
        return _TColStd.TColStd_ListOfInteger_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_ListOfInteger_Clear(self, theAllocator)

    def First(self) -> "int const &":
        return _TColStd.TColStd_ListOfInteger_First(self)

    def Last(self) -> "int const &":
        return _TColStd.TColStd_ListOfInteger_Last(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_ListOfInteger_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_ListOfInteger_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TColStd.TColStd_ListOfInteger_RemoveFirst(self)

    def Remove(self, theIter: 'TColStd_ListIteratorOfListOfInteger') -> "void":
        return _TColStd.TColStd_ListOfInteger_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_ListOfInteger_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_ListOfInteger_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_ListOfInteger_Reverse(self)
    __swig_destroy__ = _TColStd.delete_TColStd_ListOfInteger
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_ListOfInteger_swigregister = _TColStd.TColStd_ListOfInteger_swigregister
TColStd_ListOfInteger_swigregister(TColStd_ListOfInteger)

class TColStd_ListOfReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_ListOfReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_ListOfReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< double >::iterator":
        return _TColStd.TColStd_ListOfReal_begin(self)

    def end(self) -> "NCollection_List< double >::iterator":
        return _TColStd.TColStd_ListOfReal_end(self)

    def cbegin(self) -> "NCollection_List< double >::const_iterator":
        return _TColStd.TColStd_ListOfReal_cbegin(self)

    def cend(self) -> "NCollection_List< double >::const_iterator":
        return _TColStd.TColStd_ListOfReal_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_ListOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_ListOfReal_Size(self)

    def Assign(self, theOther: 'TColStd_ListOfReal') -> "NCollection_List< Standard_Real > &":
        return _TColStd.TColStd_ListOfReal_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_ListOfReal') -> "NCollection_List< Standard_Real > &":
        return _TColStd.TColStd_ListOfReal_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_ListOfReal_Clear(self, theAllocator)

    def First(self) -> "double const &":
        return _TColStd.TColStd_ListOfReal_First(self)

    def Last(self) -> "double const &":
        return _TColStd.TColStd_ListOfReal_Last(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_ListOfReal_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_ListOfReal_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TColStd.TColStd_ListOfReal_RemoveFirst(self)

    def Remove(self, theIter: 'TColStd_ListIteratorOfListOfReal') -> "void":
        return _TColStd.TColStd_ListOfReal_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_ListOfReal_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_ListOfReal_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_ListOfReal_Reverse(self)
    __swig_destroy__ = _TColStd.delete_TColStd_ListOfReal
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_ListOfReal_swigregister = _TColStd.TColStd_ListOfReal_swigregister
TColStd_ListOfReal_swigregister(TColStd_ListOfReal)

class TColStd_ListOfTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_ListOfTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_ListOfTransient, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< Standard_Transient > >::iterator":
        return _TColStd.TColStd_ListOfTransient_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< Standard_Transient > >::iterator":
        return _TColStd.TColStd_ListOfTransient_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< Standard_Transient > >::const_iterator":
        return _TColStd.TColStd_ListOfTransient_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< Standard_Transient > >::const_iterator":
        return _TColStd.TColStd_ListOfTransient_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_ListOfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_ListOfTransient_Size(self)

    def Assign(self, theOther: 'TColStd_ListOfTransient') -> "NCollection_List< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_ListOfTransient_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_ListOfTransient') -> "NCollection_List< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_ListOfTransient_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_ListOfTransient_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_ListOfTransient_First(self)

    def Last(self) -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_ListOfTransient_Last(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_ListOfTransient_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_ListOfTransient_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TColStd.TColStd_ListOfTransient_RemoveFirst(self)

    def Remove(self, theIter: 'TColStd_ListIteratorOfListOfTransient') -> "void":
        return _TColStd.TColStd_ListOfTransient_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_ListOfTransient_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_ListOfTransient_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_ListOfTransient_Reverse(self)
    __swig_destroy__ = _TColStd.delete_TColStd_ListOfTransient
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_ListOfTransient_swigregister = _TColStd.TColStd_ListOfTransient_swigregister
TColStd_ListOfTransient_swigregister(TColStd_ListOfTransient)

class TColStd_MapIntegerHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_MapIntegerHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_MapIntegerHasher, name)
    __repr__ = _swig_repr
    if _newclass:
        HashCode = staticmethod(_TColStd.TColStd_MapIntegerHasher_HashCode)
    else:
        HashCode = _TColStd.TColStd_MapIntegerHasher_HashCode
    if _newclass:
        IsEqual = staticmethod(_TColStd.TColStd_MapIntegerHasher_IsEqual)
    else:
        IsEqual = _TColStd.TColStd_MapIntegerHasher_IsEqual

    def __init__(self):
        this = _TColStd.new_TColStd_MapIntegerHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColStd.delete_TColStd_MapIntegerHasher
    __del__ = lambda self: None
TColStd_MapIntegerHasher_swigregister = _TColStd.TColStd_MapIntegerHasher_swigregister
TColStd_MapIntegerHasher_swigregister(TColStd_MapIntegerHasher)

def TColStd_MapIntegerHasher_HashCode(theKey: 'int const &', theUpperBound: 'Standard_Integer const') -> "Standard_Integer":
    return _TColStd.TColStd_MapIntegerHasher_HashCode(theKey, theUpperBound)
TColStd_MapIntegerHasher_HashCode = _TColStd.TColStd_MapIntegerHasher_HashCode

def TColStd_MapIntegerHasher_IsEqual(theKey1: 'int const &', theKey2: 'int const &') -> "Standard_Boolean":
    return _TColStd.TColStd_MapIntegerHasher_IsEqual(theKey1, theKey2)
TColStd_MapIntegerHasher_IsEqual = _TColStd.TColStd_MapIntegerHasher_IsEqual

class TColStd_MapOfAsciiString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_MapOfAsciiString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_MapOfAsciiString, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< TCollection_AsciiString,TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_MapOfAsciiString_cbegin(self)

    def cend(self) -> "NCollection_Map< TCollection_AsciiString,TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_MapOfAsciiString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_MapOfAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_MapOfAsciiString') -> "void":
        return _TColStd.TColStd_MapOfAsciiString_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_MapOfAsciiString') -> "NCollection_Map< TCollection_AsciiString,TCollection_AsciiString > &":
        return _TColStd.TColStd_MapOfAsciiString_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_MapOfAsciiString') -> "NCollection_Map< TCollection_AsciiString,TCollection_AsciiString > &":
        return _TColStd.TColStd_MapOfAsciiString_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_MapOfAsciiString_ReSize(self, N)

    def Add(self, K: 'TCollection_AsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_Add(self, K)

    def Added(self, K: 'TCollection_AsciiString') -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_MapOfAsciiString_Added(self, K)

    def Remove(self, K: 'TCollection_AsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_MapOfAsciiString_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_MapOfAsciiString
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_MapOfAsciiString_Size(self)

    def IsEqual(self, theOther: 'TColStd_MapOfAsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_Contains(self, *args)

    def Union(self, theLeft: 'TColStd_MapOfAsciiString', theRight: 'TColStd_MapOfAsciiString') -> "void":
        return _TColStd.TColStd_MapOfAsciiString_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TColStd_MapOfAsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TColStd_MapOfAsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TColStd_MapOfAsciiString', theRight: 'TColStd_MapOfAsciiString') -> "void":
        return _TColStd.TColStd_MapOfAsciiString_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TColStd_MapOfAsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TColStd_MapOfAsciiString', theRight: 'TColStd_MapOfAsciiString') -> "void":
        return _TColStd.TColStd_MapOfAsciiString_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TColStd_MapOfAsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_Subtract(self, theOther)

    def Difference(self, theLeft: 'TColStd_MapOfAsciiString', theRight: 'TColStd_MapOfAsciiString') -> "void":
        return _TColStd.TColStd_MapOfAsciiString_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TColStd_MapOfAsciiString') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfAsciiString_Differ(self, theOther)
TColStd_MapOfAsciiString_swigregister = _TColStd.TColStd_MapOfAsciiString_swigregister
TColStd_MapOfAsciiString_swigregister(TColStd_MapOfAsciiString)

class TColStd_MapOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_MapOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_MapOfInteger, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< int,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_MapOfInteger_cbegin(self)

    def cend(self) -> "NCollection_Map< int,TColStd_MapIntegerHasher >::const_iterator":
        return _TColStd.TColStd_MapOfInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_MapOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_MapOfInteger') -> "void":
        return _TColStd.TColStd_MapOfInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_MapOfInteger') -> "NCollection_Map< Standard_Integer,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_MapOfInteger_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_MapOfInteger') -> "NCollection_Map< Standard_Integer,TColStd_MapIntegerHasher > &":
        return _TColStd.TColStd_MapOfInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_MapOfInteger_ReSize(self, N)

    def Add(self, K: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_Add(self, K)

    def Added(self, K: 'int const &') -> "int const &":
        return _TColStd.TColStd_MapOfInteger_Added(self, K)

    def Remove(self, K: 'int const &') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_MapOfInteger_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_MapOfInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_MapOfInteger_Size(self)

    def IsEqual(self, theOther: 'TColStd_MapOfInteger') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_Contains(self, *args)

    def Union(self, theLeft: 'TColStd_MapOfInteger', theRight: 'TColStd_MapOfInteger') -> "void":
        return _TColStd.TColStd_MapOfInteger_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TColStd_MapOfInteger') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TColStd_MapOfInteger') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TColStd_MapOfInteger', theRight: 'TColStd_MapOfInteger') -> "void":
        return _TColStd.TColStd_MapOfInteger_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TColStd_MapOfInteger') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TColStd_MapOfInteger', theRight: 'TColStd_MapOfInteger') -> "void":
        return _TColStd.TColStd_MapOfInteger_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TColStd_MapOfInteger') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_Subtract(self, theOther)

    def Difference(self, theLeft: 'TColStd_MapOfInteger', theRight: 'TColStd_MapOfInteger') -> "void":
        return _TColStd.TColStd_MapOfInteger_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TColStd_MapOfInteger') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfInteger_Differ(self, theOther)
TColStd_MapOfInteger_swigregister = _TColStd.TColStd_MapOfInteger_swigregister
TColStd_MapOfInteger_swigregister(TColStd_MapOfInteger)

class TColStd_MapOfReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_MapOfReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_MapOfReal, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< double,TColStd_MapRealHasher >::const_iterator":
        return _TColStd.TColStd_MapOfReal_cbegin(self)

    def cend(self) -> "NCollection_Map< double,TColStd_MapRealHasher >::const_iterator":
        return _TColStd.TColStd_MapOfReal_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_MapOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_MapOfReal') -> "void":
        return _TColStd.TColStd_MapOfReal_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_MapOfReal') -> "NCollection_Map< Standard_Real,TColStd_MapRealHasher > &":
        return _TColStd.TColStd_MapOfReal_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_MapOfReal') -> "NCollection_Map< Standard_Real,TColStd_MapRealHasher > &":
        return _TColStd.TColStd_MapOfReal_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_MapOfReal_ReSize(self, N)

    def Add(self, K: 'double const &') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_Add(self, K)

    def Added(self, K: 'double const &') -> "double const &":
        return _TColStd.TColStd_MapOfReal_Added(self, K)

    def Remove(self, K: 'double const &') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_MapOfReal_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_MapOfReal
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_MapOfReal_Size(self)

    def IsEqual(self, theOther: 'TColStd_MapOfReal') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_Contains(self, *args)

    def Union(self, theLeft: 'TColStd_MapOfReal', theRight: 'TColStd_MapOfReal') -> "void":
        return _TColStd.TColStd_MapOfReal_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TColStd_MapOfReal') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TColStd_MapOfReal') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TColStd_MapOfReal', theRight: 'TColStd_MapOfReal') -> "void":
        return _TColStd.TColStd_MapOfReal_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TColStd_MapOfReal') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TColStd_MapOfReal', theRight: 'TColStd_MapOfReal') -> "void":
        return _TColStd.TColStd_MapOfReal_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TColStd_MapOfReal') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_Subtract(self, theOther)

    def Difference(self, theLeft: 'TColStd_MapOfReal', theRight: 'TColStd_MapOfReal') -> "void":
        return _TColStd.TColStd_MapOfReal_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TColStd_MapOfReal') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfReal_Differ(self, theOther)
TColStd_MapOfReal_swigregister = _TColStd.TColStd_MapOfReal_swigregister
TColStd_MapOfReal_swigregister(TColStd_MapOfReal)

class TColStd_MapOfTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_MapOfTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_MapOfTransient, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::const_iterator":
        return _TColStd.TColStd_MapOfTransient_cbegin(self)

    def cend(self) -> "NCollection_Map< opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher >::const_iterator":
        return _TColStd.TColStd_MapOfTransient_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_MapOfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TColStd_MapOfTransient') -> "void":
        return _TColStd.TColStd_MapOfTransient_Exchange(self, theOther)

    def Assign(self, theOther: 'TColStd_MapOfTransient') -> "NCollection_Map< opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher > &":
        return _TColStd.TColStd_MapOfTransient_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_MapOfTransient') -> "NCollection_Map< opencascade::handle< Standard_Transient >,TColStd_MapTransientHasher > &":
        return _TColStd.TColStd_MapOfTransient_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_MapOfTransient_ReSize(self, N)

    def Add(self, K: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_Add(self, K)

    def Added(self, K: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_MapOfTransient_Added(self, K)

    def Remove(self, K: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TColStd.TColStd_MapOfTransient_Clear(self, *args)
    __swig_destroy__ = _TColStd.delete_TColStd_MapOfTransient
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_MapOfTransient_Size(self)

    def IsEqual(self, theOther: 'TColStd_MapOfTransient') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_Contains(self, *args)

    def Union(self, theLeft: 'TColStd_MapOfTransient', theRight: 'TColStd_MapOfTransient') -> "void":
        return _TColStd.TColStd_MapOfTransient_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TColStd_MapOfTransient') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TColStd_MapOfTransient') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TColStd_MapOfTransient', theRight: 'TColStd_MapOfTransient') -> "void":
        return _TColStd.TColStd_MapOfTransient_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TColStd_MapOfTransient') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TColStd_MapOfTransient', theRight: 'TColStd_MapOfTransient') -> "void":
        return _TColStd.TColStd_MapOfTransient_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TColStd_MapOfTransient') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_Subtract(self, theOther)

    def Difference(self, theLeft: 'TColStd_MapOfTransient', theRight: 'TColStd_MapOfTransient') -> "void":
        return _TColStd.TColStd_MapOfTransient_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TColStd_MapOfTransient') -> "Standard_Boolean":
        return _TColStd.TColStd_MapOfTransient_Differ(self, theOther)
TColStd_MapOfTransient_swigregister = _TColStd.TColStd_MapOfTransient_swigregister
TColStd_MapOfTransient_swigregister(TColStd_MapOfTransient)

class TColStd_MapRealHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_MapRealHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_MapRealHasher, name)
    __repr__ = _swig_repr
    if _newclass:
        HashCode = staticmethod(_TColStd.TColStd_MapRealHasher_HashCode)
    else:
        HashCode = _TColStd.TColStd_MapRealHasher_HashCode
    if _newclass:
        IsEqual = staticmethod(_TColStd.TColStd_MapRealHasher_IsEqual)
    else:
        IsEqual = _TColStd.TColStd_MapRealHasher_IsEqual

    def __init__(self):
        this = _TColStd.new_TColStd_MapRealHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColStd.delete_TColStd_MapRealHasher
    __del__ = lambda self: None
TColStd_MapRealHasher_swigregister = _TColStd.TColStd_MapRealHasher_swigregister
TColStd_MapRealHasher_swigregister(TColStd_MapRealHasher)

def TColStd_MapRealHasher_HashCode(theKey: 'double const &', theUpperBound: 'Standard_Integer const') -> "Standard_Integer":
    return _TColStd.TColStd_MapRealHasher_HashCode(theKey, theUpperBound)
TColStd_MapRealHasher_HashCode = _TColStd.TColStd_MapRealHasher_HashCode

def TColStd_MapRealHasher_IsEqual(theKey1: 'double const &', theKey2: 'double const &') -> "Standard_Boolean":
    return _TColStd.TColStd_MapRealHasher_IsEqual(theKey1, theKey2)
TColStd_MapRealHasher_IsEqual = _TColStd.TColStd_MapRealHasher_IsEqual

class TColStd_MapTransientHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_MapTransientHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_MapTransientHasher, name)
    __repr__ = _swig_repr
    if _newclass:
        HashCode = staticmethod(_TColStd.TColStd_MapTransientHasher_HashCode)
    else:
        HashCode = _TColStd.TColStd_MapTransientHasher_HashCode
    if _newclass:
        IsEqual = staticmethod(_TColStd.TColStd_MapTransientHasher_IsEqual)
    else:
        IsEqual = _TColStd.TColStd_MapTransientHasher_IsEqual

    def __init__(self):
        this = _TColStd.new_TColStd_MapTransientHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColStd.delete_TColStd_MapTransientHasher
    __del__ = lambda self: None
TColStd_MapTransientHasher_swigregister = _TColStd.TColStd_MapTransientHasher_swigregister
TColStd_MapTransientHasher_swigregister(TColStd_MapTransientHasher)

def TColStd_MapTransientHasher_HashCode(theKey: 'opencascade::handle< Standard_Transient > const &', theUpperBound: 'Standard_Integer const') -> "Standard_Integer":
    return _TColStd.TColStd_MapTransientHasher_HashCode(theKey, theUpperBound)
TColStd_MapTransientHasher_HashCode = _TColStd.TColStd_MapTransientHasher_HashCode

def TColStd_MapTransientHasher_IsEqual(theKey1: 'opencascade::handle< Standard_Transient > const &', theKey2: 'opencascade::handle< Standard_Transient > const &') -> "Standard_Boolean":
    return _TColStd.TColStd_MapTransientHasher_IsEqual(theKey1, theKey2)
TColStd_MapTransientHasher_IsEqual = _TColStd.TColStd_MapTransientHasher_IsEqual

class TColStd_SequenceOfAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfAddress, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< void * >::iterator":
        return _TColStd.TColStd_SequenceOfAddress_begin(self)

    def end(self) -> "NCollection_Sequence< void * >::iterator":
        return _TColStd.TColStd_SequenceOfAddress_end(self)

    def cbegin(self) -> "NCollection_Sequence< void * >::const_iterator":
        return _TColStd.TColStd_SequenceOfAddress_cbegin(self)

    def cend(self) -> "NCollection_Sequence< void * >::const_iterator":
        return _TColStd.TColStd_SequenceOfAddress_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfAddress(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfAddress_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfAddress_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfAddress_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfAddress_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfAddress_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfAddress_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfAddress_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfAddress_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfAddress_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfAddress_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfAddress') -> "NCollection_Sequence< void * > &":
        return _TColStd.TColStd_SequenceOfAddress_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfAddress') -> "NCollection_Sequence< void * > &":
        return _TColStd.TColStd_SequenceOfAddress_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAddress_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAddress_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAddress_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAddress_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAddress_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfAddress') -> "void":
        return _TColStd.TColStd_SequenceOfAddress_Split(self, theIndex, theSeq)

    def First(self) -> "void *const &":
        return _TColStd.TColStd_SequenceOfAddress_First(self)

    def ChangeFirst(self) -> "void *&":
        return _TColStd.TColStd_SequenceOfAddress_ChangeFirst(self)

    def Last(self) -> "void *const &":
        return _TColStd.TColStd_SequenceOfAddress_Last(self)

    def ChangeLast(self) -> "void *&":
        return _TColStd.TColStd_SequenceOfAddress_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "void *const &":
        return _TColStd.TColStd_SequenceOfAddress_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "void *&":
        return _TColStd.TColStd_SequenceOfAddress_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "void *&":
        return _TColStd.TColStd_SequenceOfAddress___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'void *const &') -> "void":
        return _TColStd.TColStd_SequenceOfAddress_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfAddress
    __del__ = lambda self: None
TColStd_SequenceOfAddress_swigregister = _TColStd.TColStd_SequenceOfAddress_swigregister
TColStd_SequenceOfAddress_swigregister(TColStd_SequenceOfAddress)

def TColStd_SequenceOfAddress_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfAddress_delNode(theNode, theAl)
TColStd_SequenceOfAddress_delNode = _TColStd.TColStd_SequenceOfAddress_delNode

class TColStd_SequenceOfAsciiString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfAsciiString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfAsciiString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_SequenceOfAsciiString_begin(self)

    def end(self) -> "NCollection_Sequence< TCollection_AsciiString >::iterator":
        return _TColStd.TColStd_SequenceOfAsciiString_end(self)

    def cbegin(self) -> "NCollection_Sequence< TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_SequenceOfAsciiString_cbegin(self)

    def cend(self) -> "NCollection_Sequence< TCollection_AsciiString >::const_iterator":
        return _TColStd.TColStd_SequenceOfAsciiString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfAsciiString_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfAsciiString_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfAsciiString_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfAsciiString_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfAsciiString_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfAsciiString_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfAsciiString_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfAsciiString') -> "NCollection_Sequence< TCollection_AsciiString > &":
        return _TColStd.TColStd_SequenceOfAsciiString_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfAsciiString') -> "NCollection_Sequence< TCollection_AsciiString > &":
        return _TColStd.TColStd_SequenceOfAsciiString_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfAsciiString') -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_Split(self, theIndex, theSeq)

    def First(self) -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_SequenceOfAsciiString_First(self)

    def ChangeFirst(self) -> "TCollection_AsciiString &":
        return _TColStd.TColStd_SequenceOfAsciiString_ChangeFirst(self)

    def Last(self) -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_SequenceOfAsciiString_Last(self)

    def ChangeLast(self) -> "TCollection_AsciiString &":
        return _TColStd.TColStd_SequenceOfAsciiString_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TCollection_AsciiString const &":
        return _TColStd.TColStd_SequenceOfAsciiString_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TCollection_AsciiString &":
        return _TColStd.TColStd_SequenceOfAsciiString_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TCollection_AsciiString &":
        return _TColStd.TColStd_SequenceOfAsciiString___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TCollection_AsciiString') -> "void":
        return _TColStd.TColStd_SequenceOfAsciiString_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfAsciiString
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_SequenceOfAsciiString_swigregister = _TColStd.TColStd_SequenceOfAsciiString_swigregister
TColStd_SequenceOfAsciiString_swigregister(TColStd_SequenceOfAsciiString)

def TColStd_SequenceOfAsciiString_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfAsciiString_delNode(theNode, theAl)
TColStd_SequenceOfAsciiString_delNode = _TColStd.TColStd_SequenceOfAsciiString_delNode

class TColStd_SequenceOfBoolean(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfBoolean, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfBoolean, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< bool >::iterator":
        return _TColStd.TColStd_SequenceOfBoolean_begin(self)

    def end(self) -> "NCollection_Sequence< bool >::iterator":
        return _TColStd.TColStd_SequenceOfBoolean_end(self)

    def cbegin(self) -> "NCollection_Sequence< bool >::const_iterator":
        return _TColStd.TColStd_SequenceOfBoolean_cbegin(self)

    def cend(self) -> "NCollection_Sequence< bool >::const_iterator":
        return _TColStd.TColStd_SequenceOfBoolean_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfBoolean(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfBoolean_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfBoolean_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfBoolean_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfBoolean_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfBoolean_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfBoolean_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfBoolean_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfBoolean') -> "NCollection_Sequence< Standard_Boolean > &":
        return _TColStd.TColStd_SequenceOfBoolean_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfBoolean') -> "NCollection_Sequence< Standard_Boolean > &":
        return _TColStd.TColStd_SequenceOfBoolean_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfBoolean') -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_Split(self, theIndex, theSeq)

    def First(self) -> "bool const &":
        return _TColStd.TColStd_SequenceOfBoolean_First(self)

    def ChangeFirst(self) -> "bool &":
        return _TColStd.TColStd_SequenceOfBoolean_ChangeFirst(self)

    def Last(self) -> "bool const &":
        return _TColStd.TColStd_SequenceOfBoolean_Last(self)

    def ChangeLast(self) -> "bool &":
        return _TColStd.TColStd_SequenceOfBoolean_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "bool const &":
        return _TColStd.TColStd_SequenceOfBoolean_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "bool &":
        return _TColStd.TColStd_SequenceOfBoolean_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "bool &":
        return _TColStd.TColStd_SequenceOfBoolean___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'bool const &') -> "void":
        return _TColStd.TColStd_SequenceOfBoolean_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfBoolean
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_SequenceOfBoolean_swigregister = _TColStd.TColStd_SequenceOfBoolean_swigregister
TColStd_SequenceOfBoolean_swigregister(TColStd_SequenceOfBoolean)

def TColStd_SequenceOfBoolean_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfBoolean_delNode(theNode, theAl)
TColStd_SequenceOfBoolean_delNode = _TColStd.TColStd_SequenceOfBoolean_delNode

class TColStd_SequenceOfExtendedString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfExtendedString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfExtendedString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< TCollection_ExtendedString >::iterator":
        return _TColStd.TColStd_SequenceOfExtendedString_begin(self)

    def end(self) -> "NCollection_Sequence< TCollection_ExtendedString >::iterator":
        return _TColStd.TColStd_SequenceOfExtendedString_end(self)

    def cbegin(self) -> "NCollection_Sequence< TCollection_ExtendedString >::const_iterator":
        return _TColStd.TColStd_SequenceOfExtendedString_cbegin(self)

    def cend(self) -> "NCollection_Sequence< TCollection_ExtendedString >::const_iterator":
        return _TColStd.TColStd_SequenceOfExtendedString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfExtendedString_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfExtendedString_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfExtendedString_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfExtendedString_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfExtendedString_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfExtendedString_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfExtendedString_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfExtendedString') -> "NCollection_Sequence< TCollection_ExtendedString > &":
        return _TColStd.TColStd_SequenceOfExtendedString_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfExtendedString') -> "NCollection_Sequence< TCollection_ExtendedString > &":
        return _TColStd.TColStd_SequenceOfExtendedString_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfExtendedString') -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_Split(self, theIndex, theSeq)

    def First(self) -> "TCollection_ExtendedString const &":
        return _TColStd.TColStd_SequenceOfExtendedString_First(self)

    def ChangeFirst(self) -> "TCollection_ExtendedString &":
        return _TColStd.TColStd_SequenceOfExtendedString_ChangeFirst(self)

    def Last(self) -> "TCollection_ExtendedString const &":
        return _TColStd.TColStd_SequenceOfExtendedString_Last(self)

    def ChangeLast(self) -> "TCollection_ExtendedString &":
        return _TColStd.TColStd_SequenceOfExtendedString_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TCollection_ExtendedString const &":
        return _TColStd.TColStd_SequenceOfExtendedString_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TCollection_ExtendedString &":
        return _TColStd.TColStd_SequenceOfExtendedString_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TCollection_ExtendedString &":
        return _TColStd.TColStd_SequenceOfExtendedString___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TCollection_ExtendedString') -> "void":
        return _TColStd.TColStd_SequenceOfExtendedString_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfExtendedString
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_SequenceOfExtendedString_swigregister = _TColStd.TColStd_SequenceOfExtendedString_swigregister
TColStd_SequenceOfExtendedString_swigregister(TColStd_SequenceOfExtendedString)

def TColStd_SequenceOfExtendedString_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfExtendedString_delNode(theNode, theAl)
TColStd_SequenceOfExtendedString_delNode = _TColStd.TColStd_SequenceOfExtendedString_delNode

class TColStd_SequenceOfHAsciiString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfHAsciiString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfHAsciiString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< TCollection_HAsciiString > >::iterator":
        return _TColStd.TColStd_SequenceOfHAsciiString_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< TCollection_HAsciiString > >::iterator":
        return _TColStd.TColStd_SequenceOfHAsciiString_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< TCollection_HAsciiString > >::const_iterator":
        return _TColStd.TColStd_SequenceOfHAsciiString_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< TCollection_HAsciiString > >::const_iterator":
        return _TColStd.TColStd_SequenceOfHAsciiString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfHAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfHAsciiString_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfHAsciiString_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfHAsciiString_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfHAsciiString_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfHAsciiString_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfHAsciiString_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfHAsciiString_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfHAsciiString') -> "NCollection_Sequence< opencascade::handle< TCollection_HAsciiString > > &":
        return _TColStd.TColStd_SequenceOfHAsciiString_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfHAsciiString') -> "NCollection_Sequence< opencascade::handle< TCollection_HAsciiString > > &":
        return _TColStd.TColStd_SequenceOfHAsciiString_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfHAsciiString') -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< TCollection_HAsciiString > const &":
        return _TColStd.TColStd_SequenceOfHAsciiString_First(self)

    def ChangeFirst(self) -> "opencascade::handle< TCollection_HAsciiString > &":
        return _TColStd.TColStd_SequenceOfHAsciiString_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< TCollection_HAsciiString > const &":
        return _TColStd.TColStd_SequenceOfHAsciiString_Last(self)

    def ChangeLast(self) -> "opencascade::handle< TCollection_HAsciiString > &":
        return _TColStd.TColStd_SequenceOfHAsciiString_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TCollection_HAsciiString > const &":
        return _TColStd.TColStd_SequenceOfHAsciiString_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TCollection_HAsciiString > &":
        return _TColStd.TColStd_SequenceOfHAsciiString_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< TCollection_HAsciiString > &":
        return _TColStd.TColStd_SequenceOfHAsciiString___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< TCollection_HAsciiString > const &') -> "void":
        return _TColStd.TColStd_SequenceOfHAsciiString_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfHAsciiString
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_SequenceOfHAsciiString_swigregister = _TColStd.TColStd_SequenceOfHAsciiString_swigregister
TColStd_SequenceOfHAsciiString_swigregister(TColStd_SequenceOfHAsciiString)

def TColStd_SequenceOfHAsciiString_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfHAsciiString_delNode(theNode, theAl)
TColStd_SequenceOfHAsciiString_delNode = _TColStd.TColStd_SequenceOfHAsciiString_delNode

class TColStd_SequenceOfHExtendedString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfHExtendedString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfHExtendedString, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< TCollection_HExtendedString > >::iterator":
        return _TColStd.TColStd_SequenceOfHExtendedString_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< TCollection_HExtendedString > >::iterator":
        return _TColStd.TColStd_SequenceOfHExtendedString_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< TCollection_HExtendedString > >::const_iterator":
        return _TColStd.TColStd_SequenceOfHExtendedString_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< TCollection_HExtendedString > >::const_iterator":
        return _TColStd.TColStd_SequenceOfHExtendedString_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfHExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfHExtendedString_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfHExtendedString_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfHExtendedString_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfHExtendedString_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfHExtendedString_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfHExtendedString_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfHExtendedString_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfHExtendedString') -> "NCollection_Sequence< opencascade::handle< TCollection_HExtendedString > > &":
        return _TColStd.TColStd_SequenceOfHExtendedString_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfHExtendedString') -> "NCollection_Sequence< opencascade::handle< TCollection_HExtendedString > > &":
        return _TColStd.TColStd_SequenceOfHExtendedString_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfHExtendedString') -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< TCollection_HExtendedString > const &":
        return _TColStd.TColStd_SequenceOfHExtendedString_First(self)

    def ChangeFirst(self) -> "opencascade::handle< TCollection_HExtendedString > &":
        return _TColStd.TColStd_SequenceOfHExtendedString_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< TCollection_HExtendedString > const &":
        return _TColStd.TColStd_SequenceOfHExtendedString_Last(self)

    def ChangeLast(self) -> "opencascade::handle< TCollection_HExtendedString > &":
        return _TColStd.TColStd_SequenceOfHExtendedString_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TCollection_HExtendedString > const &":
        return _TColStd.TColStd_SequenceOfHExtendedString_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TCollection_HExtendedString > &":
        return _TColStd.TColStd_SequenceOfHExtendedString_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< TCollection_HExtendedString > &":
        return _TColStd.TColStd_SequenceOfHExtendedString___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< TCollection_HExtendedString > const &') -> "void":
        return _TColStd.TColStd_SequenceOfHExtendedString_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfHExtendedString
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_SequenceOfHExtendedString_swigregister = _TColStd.TColStd_SequenceOfHExtendedString_swigregister
TColStd_SequenceOfHExtendedString_swigregister(TColStd_SequenceOfHExtendedString)

def TColStd_SequenceOfHExtendedString_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfHExtendedString_delNode(theNode, theAl)
TColStd_SequenceOfHExtendedString_delNode = _TColStd.TColStd_SequenceOfHExtendedString_delNode

class TColStd_SequenceOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< int >::iterator":
        return _TColStd.TColStd_SequenceOfInteger_begin(self)

    def end(self) -> "NCollection_Sequence< int >::iterator":
        return _TColStd.TColStd_SequenceOfInteger_end(self)

    def cbegin(self) -> "NCollection_Sequence< int >::const_iterator":
        return _TColStd.TColStd_SequenceOfInteger_cbegin(self)

    def cend(self) -> "NCollection_Sequence< int >::const_iterator":
        return _TColStd.TColStd_SequenceOfInteger_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfInteger_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfInteger_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfInteger_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfInteger_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfInteger_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfInteger_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfInteger_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfInteger_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfInteger_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfInteger_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfInteger') -> "NCollection_Sequence< Standard_Integer > &":
        return _TColStd.TColStd_SequenceOfInteger_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfInteger') -> "NCollection_Sequence< Standard_Integer > &":
        return _TColStd.TColStd_SequenceOfInteger_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfInteger_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfInteger_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfInteger_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfInteger_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfInteger_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfInteger') -> "void":
        return _TColStd.TColStd_SequenceOfInteger_Split(self, theIndex, theSeq)

    def First(self) -> "int const &":
        return _TColStd.TColStd_SequenceOfInteger_First(self)

    def ChangeFirst(self) -> "int &":
        return _TColStd.TColStd_SequenceOfInteger_ChangeFirst(self)

    def Last(self) -> "int const &":
        return _TColStd.TColStd_SequenceOfInteger_Last(self)

    def ChangeLast(self) -> "int &":
        return _TColStd.TColStd_SequenceOfInteger_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "int const &":
        return _TColStd.TColStd_SequenceOfInteger_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "int &":
        return _TColStd.TColStd_SequenceOfInteger_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "int &":
        return _TColStd.TColStd_SequenceOfInteger___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'int const &') -> "void":
        return _TColStd.TColStd_SequenceOfInteger_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfInteger
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_SequenceOfInteger_swigregister = _TColStd.TColStd_SequenceOfInteger_swigregister
TColStd_SequenceOfInteger_swigregister(TColStd_SequenceOfInteger)

def TColStd_SequenceOfInteger_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfInteger_delNode(theNode, theAl)
TColStd_SequenceOfInteger_delNode = _TColStd.TColStd_SequenceOfInteger_delNode

class TColStd_SequenceOfReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< double >::iterator":
        return _TColStd.TColStd_SequenceOfReal_begin(self)

    def end(self) -> "NCollection_Sequence< double >::iterator":
        return _TColStd.TColStd_SequenceOfReal_end(self)

    def cbegin(self) -> "NCollection_Sequence< double >::const_iterator":
        return _TColStd.TColStd_SequenceOfReal_cbegin(self)

    def cend(self) -> "NCollection_Sequence< double >::const_iterator":
        return _TColStd.TColStd_SequenceOfReal_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfReal_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfReal_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfReal_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfReal_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfReal_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfReal_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfReal_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfReal_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfReal_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfReal_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfReal') -> "NCollection_Sequence< Standard_Real > &":
        return _TColStd.TColStd_SequenceOfReal_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfReal') -> "NCollection_Sequence< Standard_Real > &":
        return _TColStd.TColStd_SequenceOfReal_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfReal_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfReal_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfReal_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfReal_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfReal_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfReal') -> "void":
        return _TColStd.TColStd_SequenceOfReal_Split(self, theIndex, theSeq)

    def First(self) -> "double const &":
        return _TColStd.TColStd_SequenceOfReal_First(self)

    def ChangeFirst(self) -> "double &":
        return _TColStd.TColStd_SequenceOfReal_ChangeFirst(self)

    def Last(self) -> "double const &":
        return _TColStd.TColStd_SequenceOfReal_Last(self)

    def ChangeLast(self) -> "double &":
        return _TColStd.TColStd_SequenceOfReal_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "double const &":
        return _TColStd.TColStd_SequenceOfReal_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "double &":
        return _TColStd.TColStd_SequenceOfReal_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "double &":
        return _TColStd.TColStd_SequenceOfReal___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'double const &') -> "void":
        return _TColStd.TColStd_SequenceOfReal_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfReal
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_SequenceOfReal_swigregister = _TColStd.TColStd_SequenceOfReal_swigregister
TColStd_SequenceOfReal_swigregister(TColStd_SequenceOfReal)

def TColStd_SequenceOfReal_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfReal_delNode(theNode, theAl)
TColStd_SequenceOfReal_delNode = _TColStd.TColStd_SequenceOfReal_delNode

class TColStd_SequenceOfTransient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_SequenceOfTransient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_SequenceOfTransient, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Standard_Transient > >::iterator":
        return _TColStd.TColStd_SequenceOfTransient_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Standard_Transient > >::iterator":
        return _TColStd.TColStd_SequenceOfTransient_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Standard_Transient > >::const_iterator":
        return _TColStd.TColStd_SequenceOfTransient_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Standard_Transient > >::const_iterator":
        return _TColStd.TColStd_SequenceOfTransient_cend(self)

    def __init__(self, *args):
        this = _TColStd.new_TColStd_SequenceOfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfTransient_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfTransient_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfTransient_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColStd.TColStd_SequenceOfTransient_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColStd.TColStd_SequenceOfTransient_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColStd.TColStd_SequenceOfTransient_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColStd.TColStd_SequenceOfTransient_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColStd.TColStd_SequenceOfTransient_delNode)
    else:
        delNode = _TColStd.TColStd_SequenceOfTransient_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColStd.TColStd_SequenceOfTransient_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColStd_SequenceOfTransient') -> "NCollection_Sequence< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_SequenceOfTransient_Assign(self, theOther)

    def Set(self, theOther: 'TColStd_SequenceOfTransient') -> "NCollection_Sequence< opencascade::handle< Standard_Transient > > &":
        return _TColStd.TColStd_SequenceOfTransient_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfTransient_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfTransient_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfTransient_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfTransient_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColStd.TColStd_SequenceOfTransient_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColStd_SequenceOfTransient') -> "void":
        return _TColStd.TColStd_SequenceOfTransient_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_SequenceOfTransient_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_SequenceOfTransient_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_SequenceOfTransient_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_SequenceOfTransient_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > const &":
        return _TColStd.TColStd_SequenceOfTransient_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_SequenceOfTransient_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Standard_Transient > &":
        return _TColStd.TColStd_SequenceOfTransient___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Standard_Transient > const &') -> "void":
        return _TColStd.TColStd_SequenceOfTransient_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfTransient
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColStd_SequenceOfTransient_swigregister = _TColStd.TColStd_SequenceOfTransient_swigregister
TColStd_SequenceOfTransient_swigregister(TColStd_SequenceOfTransient)

def TColStd_SequenceOfTransient_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColStd.TColStd_SequenceOfTransient_delNode(theNode, theAl)
TColStd_SequenceOfTransient_delNode = _TColStd.TColStd_SequenceOfTransient_delNode

class TColStd_HPackedMapOfInteger(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HPackedMapOfInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HPackedMapOfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        NbBuckets: int,optional
        	default value is 1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theOther: TColStd_PackedMapOfInteger

        Returns
        -------
        None

        """
        this = _TColStd.new_TColStd_HPackedMapOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeMap(self, *args) -> "TColStd_PackedMapOfInteger &":
        """
        No available documentation.

        Returns
        -------
        TColStd_PackedMapOfInteger

        """
        return _TColStd.TColStd_HPackedMapOfInteger_ChangeMap(self, *args)


    def Map(self, *args) -> "TColStd_PackedMapOfInteger const &":
        """
        No available documentation.

        Returns
        -------
        TColStd_PackedMapOfInteger

        """
        return _TColStd.TColStd_HPackedMapOfInteger_Map(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HPackedMapOfInteger_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HPackedMapOfInteger
    __del__ = lambda self: None
TColStd_HPackedMapOfInteger_swigregister = _TColStd.TColStd_HPackedMapOfInteger_swigregister
TColStd_HPackedMapOfInteger_swigregister(TColStd_HPackedMapOfInteger)

class TColStd_PackedMapOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_PackedMapOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_PackedMapOfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        /// constructor.

        Parameters
        ----------
        NbBuckets: int,optional
        	default value is 1

        Returns
        -------
        None

        /// copy constructor.

        Parameters
        ----------
        theOther: TColStd_PackedMapOfInteger

        Returns
        -------
        None

        """
        this = _TColStd.new_TColStd_PackedMapOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        aKey: int

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_Add(self, *args)


    def Assign(self, *args) -> "TColStd_PackedMapOfInteger &":
        """
        No available documentation.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        TColStd_PackedMapOfInteger

        """
        return _TColStd.TColStd_PackedMapOfInteger_Assign(self, *args)


    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TColStd.TColStd_PackedMapOfInteger_Clear(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        aKey: int

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_Contains(self, *args)


    def Differ(self, *args) -> "Standard_Boolean":
        """
        /** * apply to this map the symmetric difference (aka exclusive disjunction, boolean xor) operation with another (given) map. * the result contains the values that are contained only in this or the operand map, but not in both. * this algorithm is similar to method difference(). * returns true if contents of this map is changed */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_Differ(self, *args)


    def Difference(self, *args) -> "void":
        """
        /** * sets this map to be the result of symmetric difference (aka exclusive disjunction, boolean xor) operation between two given maps. * the new map contains the values that are contained only in the first or the second operand maps but not in both. * all previous contents of this map is cleared. * this map (result of the boolean operation) can also be used as one of operands. */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        None

        """
        return _TColStd.TColStd_PackedMapOfInteger_Difference(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TColStd.TColStd_PackedMapOfInteger_Extent(self, *args)


    def GetMaximalMapped(self, *args) -> "Standard_Integer":
        """
        /** * query the maximal contained key value. */.

        Returns
        -------
        int

        """
        return _TColStd.TColStd_PackedMapOfInteger_GetMaximalMapped(self, *args)


    def GetMinimalMapped(self, *args) -> "Standard_Integer":
        """
        /** * query the minimal contained key value. */.

        Returns
        -------
        int

        """
        return _TColStd.TColStd_PackedMapOfInteger_GetMinimalMapped(self, *args)


    def HasIntersection(self, *args) -> "Standard_Boolean":
        """
        /** * returns true if this map has common items with the given one. */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_HasIntersection(self, *args)


    def Intersect(self, *args) -> "Standard_Boolean":
        """
        /** * apply to this map the intersection operation (aka multiplication, common, boolean and) with another (given) map. * the result contains only the values that are contained in both this and the given maps. * this algorithm is similar to method intersection(). * returns true if content of this map is changed */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_Intersect(self, *args)


    def Intersection(self, *args) -> "void":
        """
        /** * sets this map to be the result of intersection (aka multiplication, common, boolean and) operation between two given maps. * the new map contains only the values that are contained in both map operands. * all previous contents of this map is cleared. this same map (result of the boolean operation) can also be used as one of operands. * the order of operands makes no difference; the method minimizes internally the number of iterations using the smallest map for the loop. */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        None

        """
        return _TColStd.TColStd_PackedMapOfInteger_Intersection(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_IsEmpty(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        /** * returns true if this map is equal to the given one, i.e. they contain the * same sets of elements */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_IsEqual(self, *args)


    def IsSubset(self, *args) -> "Standard_Boolean":
        """
        /** * returns true if this map is subset of the given one, i.e. all elements * contained in this map is contained also in the operand map. * if this map is empty that this method returns true for any operand map. */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_IsSubset(self, *args)


    def NbBuckets(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TColStd.TColStd_PackedMapOfInteger_NbBuckets(self, *args)


    def ReSize(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        NbBuckets: int

        Returns
        -------
        None

        """
        return _TColStd.TColStd_PackedMapOfInteger_ReSize(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        aKey: int

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_Remove(self, *args)


    def StatisticsToString(self) -> "std::string":
        """StatisticsToString(TColStd_PackedMapOfInteger self) -> std::string"""
        return _TColStd.TColStd_PackedMapOfInteger_StatisticsToString(self)


    def Subtract(self, *args) -> "Standard_Boolean":
        """
        /** * apply to this map the subtraction (aka set-theoretic difference, relative complement, exclude, cut, boolean not) operation with another (given) map. * the result contains only the values that were previously contained in this map and not contained in this map. * this algorithm is similar to method subtract() with two operands. * returns true if contents of this map is changed */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_Subtract(self, *args)


    def Subtraction(self, *args) -> "void":
        """
        /** * sets this map to be the result of subtraction * (aka set-theoretic difference, relative complement, exclude, cut, boolean not) operation between two given maps. * the new map contains only the values that are contained in the first map operands and not contained in the second one. * all previous contents of this map is cleared. * this map (result of the boolean operation) can also be used as the first operand. */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        None

        """
        return _TColStd.TColStd_PackedMapOfInteger_Subtraction(self, *args)


    def Union(self, *args) -> "void":
        """
        /** * sets this map to be the result of union (aka addition, fuse, merge, boolean or) operation between two given maps. * the new map contains the values that are contained either in the first map or in the second map or in both. * all previous contents of this map is cleared. this map (result of the boolean operation) can also be passed as one of operands. */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        None

        """
        return _TColStd.TColStd_PackedMapOfInteger_Union(self, *args)


    def Unite(self, *args) -> "Standard_Boolean":
        """
        /** * apply to this map the boolean operation union (aka addition, fuse, merge, boolean or) with another (given) map. * the result contains the values that were previously contained in this map or contained in the given (operand) map. * this algorithm is similar to method union(). * returns true if content of this map is changed */.

        Parameters
        ----------
        &: TColStd_PackedMapOfInteger

        Returns
        -------
        bool

        """
        return _TColStd.TColStd_PackedMapOfInteger_Unite(self, *args)


    def __isub_wrapper__(self, other: 'TColStd_PackedMapOfInteger') -> "void":
        """__isub_wrapper__(TColStd_PackedMapOfInteger self, TColStd_PackedMapOfInteger other)"""
        return _TColStd.TColStd_PackedMapOfInteger___isub_wrapper__(self, other)


    def __isub__(self, right):
        self.__isub_wrapper__(right)
        return self


    def __eq_wrapper__(self, other: 'TColStd_PackedMapOfInteger') -> "bool":
        """__eq_wrapper__(TColStd_PackedMapOfInteger self, TColStd_PackedMapOfInteger other) -> bool"""
        return _TColStd.TColStd_PackedMapOfInteger___eq_wrapper__(self, other)


    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_PackedMapOfInteger
    __del__ = lambda self: None
TColStd_PackedMapOfInteger_swigregister = _TColStd.TColStd_PackedMapOfInteger_swigregister
TColStd_PackedMapOfInteger_swigregister(TColStd_PackedMapOfInteger)

class TColStd_HArray1OfExtendedString(TColStd_Array1OfExtendedString, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfExtendedString, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfExtendedString, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfExtendedString, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfExtendedString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfExtendedString const &":
        return _TColStd.TColStd_HArray1OfExtendedString_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfExtendedString &":
        return _TColStd.TColStd_HArray1OfExtendedString_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfExtendedString_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfExtendedString
    __del__ = lambda self: None
TColStd_HArray1OfExtendedString_swigregister = _TColStd.TColStd_HArray1OfExtendedString_swigregister
TColStd_HArray1OfExtendedString_swigregister(TColStd_HArray1OfExtendedString)

class TColStd_HArray1OfCharacter(TColStd_Array1OfCharacter, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfCharacter, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfCharacter, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfCharacter, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfCharacter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfCharacter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfCharacter const &":
        return _TColStd.TColStd_HArray1OfCharacter_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfCharacter &":
        return _TColStd.TColStd_HArray1OfCharacter_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfCharacter_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfCharacter
    __del__ = lambda self: None
TColStd_HArray1OfCharacter_swigregister = _TColStd.TColStd_HArray1OfCharacter_swigregister
TColStd_HArray1OfCharacter_swigregister(TColStd_HArray1OfCharacter)

class TColStd_HArray1OfBoolean(TColStd_Array1OfBoolean, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfBoolean, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfBoolean, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfBoolean, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfBoolean, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfBoolean(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfBoolean const &":
        return _TColStd.TColStd_HArray1OfBoolean_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfBoolean &":
        return _TColStd.TColStd_HArray1OfBoolean_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfBoolean_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfBoolean
    __del__ = lambda self: None
TColStd_HArray1OfBoolean_swigregister = _TColStd.TColStd_HArray1OfBoolean_swigregister
TColStd_HArray1OfBoolean_swigregister(TColStd_HArray1OfBoolean)

class TColStd_HArray1OfAsciiString(TColStd_Array1OfAsciiString, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfAsciiString, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfAsciiString, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfAsciiString, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfAsciiString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfAsciiString const &":
        return _TColStd.TColStd_HArray1OfAsciiString_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfAsciiString &":
        return _TColStd.TColStd_HArray1OfAsciiString_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfAsciiString_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfAsciiString
    __del__ = lambda self: None
TColStd_HArray1OfAsciiString_swigregister = _TColStd.TColStd_HArray1OfAsciiString_swigregister
TColStd_HArray1OfAsciiString_swigregister(TColStd_HArray1OfAsciiString)

class TColStd_HArray1OfReal(TColStd_Array1OfReal, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfReal, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfReal, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfReal, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfReal const &":
        return _TColStd.TColStd_HArray1OfReal_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfReal &":
        return _TColStd.TColStd_HArray1OfReal_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfReal_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfReal
    __del__ = lambda self: None
TColStd_HArray1OfReal_swigregister = _TColStd.TColStd_HArray1OfReal_swigregister
TColStd_HArray1OfReal_swigregister(TColStd_HArray1OfReal)

class TColStd_HArray1OfInteger(TColStd_Array1OfInteger, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfInteger, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfInteger, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfInteger const &":
        return _TColStd.TColStd_HArray1OfInteger_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfInteger &":
        return _TColStd.TColStd_HArray1OfInteger_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfInteger_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfInteger
    __del__ = lambda self: None
TColStd_HArray1OfInteger_swigregister = _TColStd.TColStd_HArray1OfInteger_swigregister
TColStd_HArray1OfInteger_swigregister(TColStd_HArray1OfInteger)

class TColStd_HArray1OfListOfInteger(TColStd_Array1OfListOfInteger, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfListOfInteger, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfListOfInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfListOfInteger, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfListOfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfListOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfListOfInteger const &":
        return _TColStd.TColStd_HArray1OfListOfInteger_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfListOfInteger &":
        return _TColStd.TColStd_HArray1OfListOfInteger_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfListOfInteger_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfListOfInteger
    __del__ = lambda self: None
TColStd_HArray1OfListOfInteger_swigregister = _TColStd.TColStd_HArray1OfListOfInteger_swigregister
TColStd_HArray1OfListOfInteger_swigregister(TColStd_HArray1OfListOfInteger)

class TColStd_HArray1OfTransient(TColStd_Array1OfTransient, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfTransient, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfTransient, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfTransient, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfTransient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfTransient const &":
        return _TColStd.TColStd_HArray1OfTransient_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfTransient &":
        return _TColStd.TColStd_HArray1OfTransient_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfTransient_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfTransient
    __del__ = lambda self: None
TColStd_HArray1OfTransient_swigregister = _TColStd.TColStd_HArray1OfTransient_swigregister
TColStd_HArray1OfTransient_swigregister(TColStd_HArray1OfTransient)

class TColStd_HArray1OfByte(TColStd_Array1OfByte, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array1OfByte, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray1OfByte, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array1OfByte, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray1OfByte, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray1OfByte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColStd_Array1OfByte const &":
        return _TColStd.TColStd_HArray1OfByte_Array1(self)

    def ChangeArray1(self) -> "TColStd_Array1OfByte &":
        return _TColStd.TColStd_HArray1OfByte_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray1OfByte_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfByte
    __del__ = lambda self: None
TColStd_HArray1OfByte_swigregister = _TColStd.TColStd_HArray1OfByte_swigregister
TColStd_HArray1OfByte_swigregister(TColStd_HArray1OfByte)

class TColStd_HArray2OfBoolean(TColStd_Array2OfBoolean, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array2OfBoolean, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray2OfBoolean, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array2OfBoolean, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray2OfBoolean, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray2OfBoolean(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array2(self) -> "TColStd_Array2OfBoolean const &":
        return _TColStd.TColStd_HArray2OfBoolean_Array2(self)

    def ChangeArray2(self) -> "TColStd_Array2OfBoolean &":
        return _TColStd.TColStd_HArray2OfBoolean_ChangeArray2(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray2OfBoolean_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfBoolean
    __del__ = lambda self: None
TColStd_HArray2OfBoolean_swigregister = _TColStd.TColStd_HArray2OfBoolean_swigregister
TColStd_HArray2OfBoolean_swigregister(TColStd_HArray2OfBoolean)

class TColStd_HArray2OfTransient(TColStd_Array2OfTransient, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array2OfTransient, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray2OfTransient, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array2OfTransient, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray2OfTransient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray2OfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array2(self) -> "TColStd_Array2OfTransient const &":
        return _TColStd.TColStd_HArray2OfTransient_Array2(self)

    def ChangeArray2(self) -> "TColStd_Array2OfTransient &":
        return _TColStd.TColStd_HArray2OfTransient_ChangeArray2(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray2OfTransient_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfTransient
    __del__ = lambda self: None
TColStd_HArray2OfTransient_swigregister = _TColStd.TColStd_HArray2OfTransient_swigregister
TColStd_HArray2OfTransient_swigregister(TColStd_HArray2OfTransient)

class TColStd_HArray2OfReal(TColStd_Array2OfReal, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array2OfReal, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray2OfReal, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array2OfReal, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray2OfReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray2OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array2(self) -> "TColStd_Array2OfReal const &":
        return _TColStd.TColStd_HArray2OfReal_Array2(self)

    def ChangeArray2(self) -> "TColStd_Array2OfReal &":
        return _TColStd.TColStd_HArray2OfReal_ChangeArray2(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray2OfReal_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfReal
    __del__ = lambda self: None
TColStd_HArray2OfReal_swigregister = _TColStd.TColStd_HArray2OfReal_swigregister
TColStd_HArray2OfReal_swigregister(TColStd_HArray2OfReal)

class TColStd_HArray2OfInteger(TColStd_Array2OfInteger, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array2OfInteger, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray2OfInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array2OfInteger, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray2OfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray2OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array2(self) -> "TColStd_Array2OfInteger const &":
        return _TColStd.TColStd_HArray2OfInteger_Array2(self)

    def ChangeArray2(self) -> "TColStd_Array2OfInteger &":
        return _TColStd.TColStd_HArray2OfInteger_ChangeArray2(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray2OfInteger_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfInteger
    __del__ = lambda self: None
TColStd_HArray2OfInteger_swigregister = _TColStd.TColStd_HArray2OfInteger_swigregister
TColStd_HArray2OfInteger_swigregister(TColStd_HArray2OfInteger)

class TColStd_HArray2OfCharacter(TColStd_Array2OfCharacter, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_Array2OfCharacter, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HArray2OfCharacter, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_Array2OfCharacter, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HArray2OfCharacter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HArray2OfCharacter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array2(self) -> "TColStd_Array2OfCharacter const &":
        return _TColStd.TColStd_HArray2OfCharacter_Array2(self)

    def ChangeArray2(self) -> "TColStd_Array2OfCharacter &":
        return _TColStd.TColStd_HArray2OfCharacter_ChangeArray2(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HArray2OfCharacter_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfCharacter
    __del__ = lambda self: None
TColStd_HArray2OfCharacter_swigregister = _TColStd.TColStd_HArray2OfCharacter_swigregister
TColStd_HArray2OfCharacter_swigregister(TColStd_HArray2OfCharacter)

class TColStd_HSequenceOfHAsciiString(TColStd_SequenceOfHAsciiString, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_SequenceOfHAsciiString, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HSequenceOfHAsciiString, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_SequenceOfHAsciiString, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HSequenceOfHAsciiString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HSequenceOfHAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColStd_SequenceOfHAsciiString const &":
        return _TColStd.TColStd_HSequenceOfHAsciiString_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_HSequenceOfHAsciiString_Append(self, *args)

    def ChangeSequence(self) -> "TColStd_SequenceOfHAsciiString &":
        return _TColStd.TColStd_HSequenceOfHAsciiString_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HSequenceOfHAsciiString_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfHAsciiString
    __del__ = lambda self: None
TColStd_HSequenceOfHAsciiString_swigregister = _TColStd.TColStd_HSequenceOfHAsciiString_swigregister
TColStd_HSequenceOfHAsciiString_swigregister(TColStd_HSequenceOfHAsciiString)

class TColStd_HSequenceOfTransient(TColStd_SequenceOfTransient, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_SequenceOfTransient, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HSequenceOfTransient, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_SequenceOfTransient, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HSequenceOfTransient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HSequenceOfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColStd_SequenceOfTransient const &":
        return _TColStd.TColStd_HSequenceOfTransient_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_HSequenceOfTransient_Append(self, *args)

    def ChangeSequence(self) -> "TColStd_SequenceOfTransient &":
        return _TColStd.TColStd_HSequenceOfTransient_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HSequenceOfTransient_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfTransient
    __del__ = lambda self: None
TColStd_HSequenceOfTransient_swigregister = _TColStd.TColStd_HSequenceOfTransient_swigregister
TColStd_HSequenceOfTransient_swigregister(TColStd_HSequenceOfTransient)

class TColStd_HSequenceOfAsciiString(TColStd_SequenceOfAsciiString, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_SequenceOfAsciiString, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HSequenceOfAsciiString, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_SequenceOfAsciiString, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HSequenceOfAsciiString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HSequenceOfAsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColStd_SequenceOfAsciiString const &":
        return _TColStd.TColStd_HSequenceOfAsciiString_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_HSequenceOfAsciiString_Append(self, *args)

    def ChangeSequence(self) -> "TColStd_SequenceOfAsciiString &":
        return _TColStd.TColStd_HSequenceOfAsciiString_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HSequenceOfAsciiString_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfAsciiString
    __del__ = lambda self: None
TColStd_HSequenceOfAsciiString_swigregister = _TColStd.TColStd_HSequenceOfAsciiString_swigregister
TColStd_HSequenceOfAsciiString_swigregister(TColStd_HSequenceOfAsciiString)

class TColStd_HSequenceOfHExtendedString(TColStd_SequenceOfHExtendedString, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_SequenceOfHExtendedString, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HSequenceOfHExtendedString, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_SequenceOfHExtendedString, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HSequenceOfHExtendedString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HSequenceOfHExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColStd_SequenceOfHExtendedString const &":
        return _TColStd.TColStd_HSequenceOfHExtendedString_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_HSequenceOfHExtendedString_Append(self, *args)

    def ChangeSequence(self) -> "TColStd_SequenceOfHExtendedString &":
        return _TColStd.TColStd_HSequenceOfHExtendedString_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HSequenceOfHExtendedString_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfHExtendedString
    __del__ = lambda self: None
TColStd_HSequenceOfHExtendedString_swigregister = _TColStd.TColStd_HSequenceOfHExtendedString_swigregister
TColStd_HSequenceOfHExtendedString_swigregister(TColStd_HSequenceOfHExtendedString)

class TColStd_HSequenceOfInteger(TColStd_SequenceOfInteger, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_SequenceOfInteger, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HSequenceOfInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_SequenceOfInteger, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HSequenceOfInteger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HSequenceOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColStd_SequenceOfInteger const &":
        return _TColStd.TColStd_HSequenceOfInteger_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_HSequenceOfInteger_Append(self, *args)

    def ChangeSequence(self) -> "TColStd_SequenceOfInteger &":
        return _TColStd.TColStd_HSequenceOfInteger_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HSequenceOfInteger_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfInteger
    __del__ = lambda self: None
TColStd_HSequenceOfInteger_swigregister = _TColStd.TColStd_HSequenceOfInteger_swigregister
TColStd_HSequenceOfInteger_swigregister(TColStd_HSequenceOfInteger)

class TColStd_HSequenceOfExtendedString(TColStd_SequenceOfExtendedString, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_SequenceOfExtendedString, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HSequenceOfExtendedString, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_SequenceOfExtendedString, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HSequenceOfExtendedString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HSequenceOfExtendedString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColStd_SequenceOfExtendedString const &":
        return _TColStd.TColStd_HSequenceOfExtendedString_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_HSequenceOfExtendedString_Append(self, *args)

    def ChangeSequence(self) -> "TColStd_SequenceOfExtendedString &":
        return _TColStd.TColStd_HSequenceOfExtendedString_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HSequenceOfExtendedString_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfExtendedString
    __del__ = lambda self: None
TColStd_HSequenceOfExtendedString_swigregister = _TColStd.TColStd_HSequenceOfExtendedString_swigregister
TColStd_HSequenceOfExtendedString_swigregister(TColStd_HSequenceOfExtendedString)

class TColStd_HSequenceOfReal(TColStd_SequenceOfReal, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColStd_SequenceOfReal, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColStd_HSequenceOfReal, name, value)
    __swig_getmethods__ = {}
    for _s in [TColStd_SequenceOfReal, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColStd_HSequenceOfReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColStd.new_TColStd_HSequenceOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColStd_SequenceOfReal const &":
        return _TColStd.TColStd_HSequenceOfReal_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColStd.TColStd_HSequenceOfReal_Append(self, *args)

    def ChangeSequence(self) -> "TColStd_SequenceOfReal &":
        return _TColStd.TColStd_HSequenceOfReal_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColStd_HSequenceOfReal_DownCast(t)

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfReal
    __del__ = lambda self: None
TColStd_HSequenceOfReal_swigregister = _TColStd.TColStd_HSequenceOfReal_swigregister
TColStd_HSequenceOfReal_swigregister(TColStd_HSequenceOfReal)



# This file is compatible with both classic and new-style classes.


