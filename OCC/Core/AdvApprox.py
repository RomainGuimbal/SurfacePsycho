# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AdvApprox module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_advapprox.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AdvApprox')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AdvApprox')
    _AdvApprox = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AdvApprox', [dirname(__file__)])
        except ImportError:
            import _AdvApprox
            return _AdvApprox
        try:
            _mod = imp.load_module('_AdvApprox', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AdvApprox = swig_import_helper()
    del swig_import_helper
else:
    import _AdvApprox
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AdvApprox.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _AdvApprox.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _AdvApprox.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _AdvApprox.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _AdvApprox.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _AdvApprox.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _AdvApprox.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _AdvApprox.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _AdvApprox.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _AdvApprox.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _AdvApprox.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _AdvApprox.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _AdvApprox.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _AdvApprox.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _AdvApprox.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _AdvApprox.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _AdvApprox.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AdvApprox.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _AdvApprox.process_exception(error, method_name, class_name)
process_exception = _AdvApprox.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.PLib
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp

from enum import IntEnum
from OCC.Core.Exception import *



class AdvApprox_ApproxAFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApprox_ApproxAFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApprox_ApproxAFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs approximator tool. //! warning: the func should be valid reference to object of type inherited from class evaluatorfunction from approx with life time longer than that of the approximator tool; //! the result should be formatted in the following way : <--num1dss--> <--2 * num2dss--> <--3 * num3dss--> r[0] .... r[num1dss].....  r[dimension-1] //! the order in which each subspace appears should be consistent with the tolerances given in the create function and the results will be given in that order as well that is : curve2d(n) will correspond to the nth entry described by num2dss, curve(n) will correspond to the nth entry described by num3dss the same type of schema applies to the poles1d, poles2d and poles.

        Parameters
        ----------
        Num1DSS: int
        Num2DSS: int
        Num3DSS: int
        OneDTol: TColStd_HArray1OfReal
        TwoDTol: TColStd_HArray1OfReal
        ThreeDTol: TColStd_HArray1OfReal
        First: float
        Last: float
        Continuity: GeomAbs_Shape
        MaxDeg: int
        MaxSeg: int
        Func: AdvApprox_EvaluatorFunction

        Returns
        -------
        None

        Approximation with user methode of cutting.

        Parameters
        ----------
        Num1DSS: int
        Num2DSS: int
        Num3DSS: int
        OneDTol: TColStd_HArray1OfReal
        TwoDTol: TColStd_HArray1OfReal
        ThreeDTol: TColStd_HArray1OfReal
        First: float
        Last: float
        Continuity: GeomAbs_Shape
        MaxDeg: int
        MaxSeg: int
        Func: AdvApprox_EvaluatorFunction
        CutTool: AdvApprox_Cutting

        Returns
        -------
        None

        """
        this = _AdvApprox.new_AdvApprox_ApproxAFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Approximation(*args) -> "Standard_Integer &, Standard_Integer &":
        """
        No available documentation.

        Parameters
        ----------
        TotalDimension: int
        TotalNumSS: int
        LocalDimension: TColStd_Array1OfInteger
        First: float
        Last: float
        Evaluator: AdvApprox_EvaluatorFunction
        CutTool: AdvApprox_Cutting
        ContinuityOrder: int
        NumMaxCoeffs: int
        MaxSegments: int
        TolerancesArray: TColStd_Array1OfReal
        code_precis: int
        NumCoeffPerCurveArray: TColStd_Array1OfInteger
        LocalCoefficientArray: TColStd_Array1OfReal
        IntervalsArray: TColStd_Array1OfReal
        ErrorMaxArray: TColStd_Array1OfReal
        AverageErrorArray: TColStd_Array1OfReal

        Returns
        -------
        NumCurves: int
        ErrorCode: int

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Approximation(*args)

    Approximation = staticmethod(Approximation)

    def AverageError(self, *args) -> "Standard_Real":
        """
        Returns the error as is in the algorithms.

        Parameters
        ----------
        Dimension: int

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        No available documentation.

        Parameters
        ----------
        Dimension: int
        Index: int

        Returns
        -------
        float

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_AverageError(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Degree(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AdvApprox_ApproxAFunction self) -> std::string"""
        return _AdvApprox.AdvApprox_ApproxAFunction_DumpToString(self)


    def HasResult(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_HasResult(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_IsDone(self, *args)


    def Knots(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Knots(self, *args)


    def MaxError(self, *args) -> "Standard_Real":
        """
        Returns the error as is in the algorithms.

        Parameters
        ----------
        Dimension: int

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        No available documentation.

        Parameters
        ----------
        Dimension: int
        Index: int

        Returns
        -------
        float

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_MaxError(self, *args)


    def Multiplicities(self, *args) -> "opencascade::handle< TColStd_HArray1OfInteger >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfInteger>

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Multiplicities(self, *args)


    def NbKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_NbKnots(self, *args)


    def NbPoles(self, *args) -> "Standard_Integer":
        """
        As the name says.

        Returns
        -------
        int

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_NbPoles(self, *args)


    def NumSubSpaces(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        Dimension: int

        Returns
        -------
        int

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_NumSubSpaces(self, *args)


    def Poles(self, *args) -> "void":
        """
        -- returns the poles from the algorithms as is.

        Returns
        -------
        opencascade::handle<TColgp_HArray2OfPnt>

        Returns the poles at index from the 3d subspace.

        Parameters
        ----------
        Index: int
        P: TColgp_Array1OfPnt

        Returns
        -------
        None

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Poles(self, *args)


    def Poles1d(self, *args) -> "void":
        """
        Returns the poles from the algorithms as is.

        Returns
        -------
        opencascade::handle<TColStd_HArray2OfReal>

        Returns the poles at index from the 1d subspace.

        Parameters
        ----------
        Index: int
        P: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Poles1d(self, *args)


    def Poles2d(self, *args) -> "void":
        """
        Returns the poles from the algorithms as is.

        Returns
        -------
        opencascade::handle<TColgp_HArray2OfPnt2d>

        Returns the poles at index from the 2d subspace.

        Parameters
        ----------
        Index: int
        P: TColgp_Array1OfPnt2d

        Returns
        -------
        None

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Poles2d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_ApproxAFunction
    __del__ = lambda self: None
AdvApprox_ApproxAFunction_swigregister = _AdvApprox.AdvApprox_ApproxAFunction_swigregister
AdvApprox_ApproxAFunction_swigregister(AdvApprox_ApproxAFunction)

def AdvApprox_ApproxAFunction_Approximation(*args) -> "Standard_Integer &, Standard_Integer &":
    """
    No available documentation.

    Parameters
    ----------
    TotalDimension: int
    TotalNumSS: int
    LocalDimension: TColStd_Array1OfInteger
    First: float
    Last: float
    Evaluator: AdvApprox_EvaluatorFunction
    CutTool: AdvApprox_Cutting
    ContinuityOrder: int
    NumMaxCoeffs: int
    MaxSegments: int
    TolerancesArray: TColStd_Array1OfReal
    code_precis: int
    NumCoeffPerCurveArray: TColStd_Array1OfInteger
    LocalCoefficientArray: TColStd_Array1OfReal
    IntervalsArray: TColStd_Array1OfReal
    ErrorMaxArray: TColStd_Array1OfReal
    AverageErrorArray: TColStd_Array1OfReal

    Returns
    -------
    NumCurves: int
    ErrorCode: int

    """
    return _AdvApprox.AdvApprox_ApproxAFunction_Approximation(*args)

class AdvApprox_Cutting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApprox_Cutting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApprox_Cutting, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Value(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        a: float
        b: float

        Returns
        -------
        cuttingvalue: float

        """
        return _AdvApprox.AdvApprox_Cutting_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_Cutting
    __del__ = lambda self: None
AdvApprox_Cutting_swigregister = _AdvApprox.AdvApprox_Cutting_swigregister
AdvApprox_Cutting_swigregister(AdvApprox_Cutting)

class AdvApprox_SimpleApprox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApprox_SimpleApprox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApprox_SimpleApprox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        TotalDimension: int
        TotalNumSS: int
        Continuity: GeomAbs_Shape
        WorkDegree: int
        NbGaussPoints: int
        JacobiBase: PLib_JacobiPolynomial
        Func: AdvApprox_EvaluatorFunction

        Returns
        -------
        None

        """
        this = _AdvApprox.new_AdvApprox_SimpleApprox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AverageError(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _AdvApprox.AdvApprox_SimpleApprox_AverageError(self, *args)


    def Coefficients(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns the coefficients in the jacobi base.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApprox.AdvApprox_SimpleApprox_Coefficients(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApprox.AdvApprox_SimpleApprox_Degree(self, *args)


    def DifTab(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApprox.AdvApprox_SimpleApprox_DifTab(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AdvApprox_SimpleApprox self) -> std::string"""
        return _AdvApprox.AdvApprox_SimpleApprox_DumpToString(self)


    def FirstConstr(self, *args) -> "opencascade::handle< TColStd_HArray2OfReal >":
        """
        Returns the constraints at first.

        Returns
        -------
        opencascade::handle<TColStd_HArray2OfReal>

        """
        return _AdvApprox.AdvApprox_SimpleApprox_FirstConstr(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _AdvApprox.AdvApprox_SimpleApprox_IsDone(self, *args)


    def LastConstr(self, *args) -> "opencascade::handle< TColStd_HArray2OfReal >":
        """
        Returns the constraints at last.

        Returns
        -------
        opencascade::handle<TColStd_HArray2OfReal>

        """
        return _AdvApprox.AdvApprox_SimpleApprox_LastConstr(self, *args)


    def MaxError(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _AdvApprox.AdvApprox_SimpleApprox_MaxError(self, *args)


    def Perform(self, *args) -> "void":
        """
        Constructs approximator tool. //! warning: the func should be valid reference to object of type inherited from class evaluatorfunction from approx with life time longer than that of the approximator tool;.

        Parameters
        ----------
        LocalDimension: TColStd_Array1OfInteger
        LocalTolerancesArray: TColStd_Array1OfReal
        First: float
        Last: float
        MaxDegree: int

        Returns
        -------
        None

        """
        return _AdvApprox.AdvApprox_SimpleApprox_Perform(self, *args)


    def SomTab(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApprox.AdvApprox_SimpleApprox_SomTab(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_SimpleApprox
    __del__ = lambda self: None
AdvApprox_SimpleApprox_swigregister = _AdvApprox.AdvApprox_SimpleApprox_swigregister
AdvApprox_SimpleApprox_swigregister(AdvApprox_SimpleApprox)

class AdvApprox_DichoCutting(AdvApprox_Cutting):
    __swig_setmethods__ = {}
    for _s in [AdvApprox_Cutting]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApprox_DichoCutting, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvApprox_Cutting]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApprox_DichoCutting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _AdvApprox.new_AdvApprox_DichoCutting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_DichoCutting
    __del__ = lambda self: None
AdvApprox_DichoCutting_swigregister = _AdvApprox.AdvApprox_DichoCutting_swigregister
AdvApprox_DichoCutting_swigregister(AdvApprox_DichoCutting)

class AdvApprox_PrefAndRec(AdvApprox_Cutting):
    __swig_setmethods__ = {}
    for _s in [AdvApprox_Cutting]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApprox_PrefAndRec, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvApprox_Cutting]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApprox_PrefAndRec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        RecomendedCut: TColStd_Array1OfReal
        PrefferedCut: TColStd_Array1OfReal
        Weight: float,optional
        	default value is 5

        Returns
        -------
        None

        """
        this = _AdvApprox.new_AdvApprox_PrefAndRec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_PrefAndRec
    __del__ = lambda self: None
AdvApprox_PrefAndRec_swigregister = _AdvApprox.AdvApprox_PrefAndRec_swigregister
AdvApprox_PrefAndRec_swigregister(AdvApprox_PrefAndRec)

class AdvApprox_PrefCutting(AdvApprox_Cutting):
    __swig_setmethods__ = {}
    for _s in [AdvApprox_Cutting]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApprox_PrefCutting, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvApprox_Cutting]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApprox_PrefCutting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        CutPnts: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        this = _AdvApprox.new_AdvApprox_PrefCutting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_PrefCutting
    __del__ = lambda self: None
AdvApprox_PrefCutting_swigregister = _AdvApprox.AdvApprox_PrefCutting_swigregister
AdvApprox_PrefCutting_swigregister(AdvApprox_PrefCutting)


@classnotwrapped
class AdvApprox_EvaluatorFunction:
	pass




# This file is compatible with both classic and new-style classes.


