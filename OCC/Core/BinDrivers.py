# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinDrivers module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_bindrivers.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinDrivers')
    _BinDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinDrivers', [dirname(__file__)])
        except ImportError:
            import _BinDrivers
            return _BinDrivers
        try:
            _mod = imp.load_module('_BinDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _BinDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinDrivers.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BinDrivers.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BinDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BinDrivers.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BinDrivers.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BinDrivers.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BinDrivers.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BinDrivers.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BinDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BinDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BinDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinDrivers.process_exception(error, method_name, class_name)
process_exception = _BinDrivers.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.BinMDF
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.BinLDrivers

from enum import IntEnum
from OCC.Core.Exception import *

BinDrivers_ENDATTRLIST = _BinDrivers.BinDrivers_ENDATTRLIST
BinDrivers_ENDLABEL = _BinDrivers.BinDrivers_ENDLABEL


class BinDrivers_Marker(IntEnum):
	BinDrivers_ENDATTRLIST = - 1
	BinDrivers_ENDLABEL = - 2
BinDrivers_ENDATTRLIST = BinDrivers_Marker.BinDrivers_ENDATTRLIST
BinDrivers_ENDLABEL = BinDrivers_Marker.BinDrivers_ENDLABEL


def Handle_BinDrivers_DocumentRetrievalDriver_Create() -> "opencascade::handle< BinDrivers_DocumentRetrievalDriver >":
    return _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_Create()
Handle_BinDrivers_DocumentRetrievalDriver_Create = _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_Create

def Handle_BinDrivers_DocumentRetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinDrivers_DocumentRetrievalDriver >":
    return _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_DownCast(t)
Handle_BinDrivers_DocumentRetrievalDriver_DownCast = _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_DownCast

def Handle_BinDrivers_DocumentRetrievalDriver_IsNull(t: 'opencascade::handle< BinDrivers_DocumentRetrievalDriver > const &') -> "bool":
    return _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_IsNull(t)
Handle_BinDrivers_DocumentRetrievalDriver_IsNull = _BinDrivers.Handle_BinDrivers_DocumentRetrievalDriver_IsNull

def Handle_BinDrivers_DocumentStorageDriver_Create() -> "opencascade::handle< BinDrivers_DocumentStorageDriver >":
    return _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_Create()
Handle_BinDrivers_DocumentStorageDriver_Create = _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_Create

def Handle_BinDrivers_DocumentStorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinDrivers_DocumentStorageDriver >":
    return _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_DownCast(t)
Handle_BinDrivers_DocumentStorageDriver_DownCast = _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_DownCast

def Handle_BinDrivers_DocumentStorageDriver_IsNull(t: 'opencascade::handle< BinDrivers_DocumentStorageDriver > const &') -> "bool":
    return _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_IsNull(t)
Handle_BinDrivers_DocumentStorageDriver_IsNull = _BinDrivers.Handle_BinDrivers_DocumentStorageDriver_IsNull
class bindrivers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bindrivers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bindrivers, name)
    __repr__ = _swig_repr

    def AttributeDrivers(*args) -> "opencascade::handle< BinMDF_ADriverTable >":
        """
        Creates the table of drivers of types supported.

        Parameters
        ----------
        MsgDrv: Message_Messenger

        Returns
        -------
        opencascade::handle<BinMDF_ADriverTable>

        """
        return _BinDrivers.bindrivers_AttributeDrivers(*args)

    AttributeDrivers = staticmethod(AttributeDrivers)

    def DefineFormat(*args) -> "void":
        """
        Defines format 'binocaf' and registers its read and write drivers in the specified application.

        Parameters
        ----------
        theApp: TDocStd_Application

        Returns
        -------
        None

        """
        return _BinDrivers.bindrivers_DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
        """
        No available documentation.

        Parameters
        ----------
        theGUID: Standard_GUID

        Returns
        -------
        opencascade::handle<Standard_Transient>

        """
        return _BinDrivers.bindrivers_Factory(*args)

    Factory = staticmethod(Factory)

    def StorageVersion(*args) -> "TCollection_AsciiString":
        """
        Returns '1'.

        Returns
        -------
        TCollection_AsciiString

        """
        return _BinDrivers.bindrivers_StorageVersion(*args)

    StorageVersion = staticmethod(StorageVersion)

    __repr__ = _dumps_object


    def __init__(self):
        this = _BinDrivers.new_bindrivers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinDrivers.delete_bindrivers
    __del__ = lambda self: None
bindrivers_swigregister = _BinDrivers.bindrivers_swigregister
bindrivers_swigregister(bindrivers)

def bindrivers_AttributeDrivers(*args) -> "opencascade::handle< BinMDF_ADriverTable >":
    """
    Creates the table of drivers of types supported.

    Parameters
    ----------
    MsgDrv: Message_Messenger

    Returns
    -------
    opencascade::handle<BinMDF_ADriverTable>

    """
    return _BinDrivers.bindrivers_AttributeDrivers(*args)

def bindrivers_DefineFormat(*args) -> "void":
    """
    Defines format 'binocaf' and registers its read and write drivers in the specified application.

    Parameters
    ----------
    theApp: TDocStd_Application

    Returns
    -------
    None

    """
    return _BinDrivers.bindrivers_DefineFormat(*args)

def bindrivers_Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
    """
    No available documentation.

    Parameters
    ----------
    theGUID: Standard_GUID

    Returns
    -------
    opencascade::handle<Standard_Transient>

    """
    return _BinDrivers.bindrivers_Factory(*args)

def bindrivers_StorageVersion(*args) -> "TCollection_AsciiString":
    """
    Returns '1'.

    Returns
    -------
    TCollection_AsciiString

    """
    return _BinDrivers.bindrivers_StorageVersion(*args)

class BinDrivers_DocumentRetrievalDriver(OCC.Core.BinLDrivers.BinLDrivers_DocumentRetrievalDriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.BinLDrivers.BinLDrivers_DocumentRetrievalDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinDrivers_DocumentRetrievalDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.BinLDrivers.BinLDrivers_DocumentRetrievalDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinDrivers_DocumentRetrievalDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Returns
        -------
        None

        """
        this = _BinDrivers.new_BinDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args) -> "void":
        """
        Clears the namedshape driver.

        Returns
        -------
        None

        """
        return _BinDrivers.BinDrivers_DocumentRetrievalDriver_Clear(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinDrivers.delete_BinDrivers_DocumentRetrievalDriver
    __del__ = lambda self: None
BinDrivers_DocumentRetrievalDriver_swigregister = _BinDrivers.BinDrivers_DocumentRetrievalDriver_swigregister
BinDrivers_DocumentRetrievalDriver_swigregister(BinDrivers_DocumentRetrievalDriver)

class BinDrivers_DocumentStorageDriver(OCC.Core.BinLDrivers.BinLDrivers_DocumentStorageDriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.BinLDrivers.BinLDrivers_DocumentStorageDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinDrivers_DocumentStorageDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.BinLDrivers.BinLDrivers_DocumentStorageDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinDrivers_DocumentStorageDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Returns
        -------
        None

        """
        this = _BinDrivers.new_BinDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsWithTriangles(self, *args) -> "Standard_Boolean":
        """
        Return true if shape should be stored with triangles.

        Returns
        -------
        bool

        """
        return _BinDrivers.BinDrivers_DocumentStorageDriver_IsWithTriangles(self, *args)


    def SetWithTriangles(self, *args) -> "void":
        """
        Set if triangulation should be stored or not.

        Parameters
        ----------
        theMessageDriver: Message_Messenger
        theWithTriangulation: bool

        Returns
        -------
        None

        """
        return _BinDrivers.BinDrivers_DocumentStorageDriver_SetWithTriangles(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinDrivers.delete_BinDrivers_DocumentStorageDriver
    __del__ = lambda self: None
BinDrivers_DocumentStorageDriver_swigregister = _BinDrivers.BinDrivers_DocumentStorageDriver_swigregister
BinDrivers_DocumentStorageDriver_swigregister(BinDrivers_DocumentStorageDriver)



# This file is compatible with both classic and new-style classes.


