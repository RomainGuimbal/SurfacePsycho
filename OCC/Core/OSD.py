# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
OSD module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_osd.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OSD
else:
    import _OSD

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OSD.delete_SwigPyIterator

    def value(self):
        return _OSD.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OSD.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OSD.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OSD.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OSD.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OSD.SwigPyIterator_copy(self)

    def next(self):
        return _OSD.SwigPyIterator_next(self)

    def __next__(self):
        return _OSD.SwigPyIterator___next__(self)

    def previous(self):
        return _OSD.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OSD.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OSD.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OSD.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OSD.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OSD.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OSD.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OSD.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OSD:
_OSD.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _OSD.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *

OSD_FromBeginning = _OSD.OSD_FromBeginning
OSD_FromHere = _OSD.OSD_FromHere
OSD_FromEnd = _OSD.OSD_FromEnd
OSD_FILE = _OSD.OSD_FILE
OSD_DIRECTORY = _OSD.OSD_DIRECTORY
OSD_LINK = _OSD.OSD_LINK
OSD_SOCKET = _OSD.OSD_SOCKET
OSD_UNKNOWN = _OSD.OSD_UNKNOWN
OSD_RTLD_LAZY = _OSD.OSD_RTLD_LAZY
OSD_RTLD_NOW = _OSD.OSD_RTLD_NOW
OSD_NoLock = _OSD.OSD_NoLock
OSD_ReadLock = _OSD.OSD_ReadLock
OSD_WriteLock = _OSD.OSD_WriteLock
OSD_ExclusiveLock = _OSD.OSD_ExclusiveLock
OSD_Unavailable = _OSD.OSD_Unavailable
OSD_SUN = _OSD.OSD_SUN
OSD_DEC = _OSD.OSD_DEC
OSD_SGI = _OSD.OSD_SGI
OSD_NEC = _OSD.OSD_NEC
OSD_MAC = _OSD.OSD_MAC
OSD_PC = _OSD.OSD_PC
OSD_HP = _OSD.OSD_HP
OSD_IBM = _OSD.OSD_IBM
OSD_VAX = _OSD.OSD_VAX
OSD_LIN = _OSD.OSD_LIN
OSD_AIX = _OSD.OSD_AIX
OSD_ReadOnly = _OSD.OSD_ReadOnly
OSD_WriteOnly = _OSD.OSD_WriteOnly
OSD_ReadWrite = _OSD.OSD_ReadWrite
OSD_SignalMode_AsIs = _OSD.OSD_SignalMode_AsIs
OSD_SignalMode_Set = _OSD.OSD_SignalMode_Set
OSD_SignalMode_SetUnhandled = _OSD.OSD_SignalMode_SetUnhandled
OSD_SignalMode_Unset = _OSD.OSD_SignalMode_Unset
OSD_None = _OSD.OSD_None
OSD_R = _OSD.OSD_R
OSD_W = _OSD.OSD_W
OSD_RW = _OSD.OSD_RW
OSD_X = _OSD.OSD_X
OSD_RX = _OSD.OSD_RX
OSD_WX = _OSD.OSD_WX
OSD_RWX = _OSD.OSD_RWX
OSD_D = _OSD.OSD_D
OSD_RD = _OSD.OSD_RD
OSD_WD = _OSD.OSD_WD
OSD_RWD = _OSD.OSD_RWD
OSD_XD = _OSD.OSD_XD
OSD_RXD = _OSD.OSD_RXD
OSD_WXD = _OSD.OSD_WXD
OSD_RWXD = _OSD.OSD_RWXD
OSD_Unknown = _OSD.OSD_Unknown
OSD_Default = _OSD.OSD_Default
OSD_UnixBSD = _OSD.OSD_UnixBSD
OSD_UnixSystemV = _OSD.OSD_UnixSystemV
OSD_VMS = _OSD.OSD_VMS
OSD_OS2 = _OSD.OSD_OS2
OSD_OSF = _OSD.OSD_OSF
OSD_MacOs = _OSD.OSD_MacOs
OSD_Taligent = _OSD.OSD_Taligent
OSD_WindowsNT = _OSD.OSD_WindowsNT
OSD_LinuxREDHAT = _OSD.OSD_LinuxREDHAT
OSD_Aix = _OSD.OSD_Aix
OSD_WDirectory = _OSD.OSD_WDirectory
OSD_WDirectoryIterator = _OSD.OSD_WDirectoryIterator
OSD_WEnvironment = _OSD.OSD_WEnvironment
OSD_WFile = _OSD.OSD_WFile
OSD_WFileNode = _OSD.OSD_WFileNode
OSD_WFileIterator = _OSD.OSD_WFileIterator
OSD_WPath = _OSD.OSD_WPath
OSD_WProcess = _OSD.OSD_WProcess
OSD_WProtection = _OSD.OSD_WProtection
OSD_WHost = _OSD.OSD_WHost
OSD_WDisk = _OSD.OSD_WDisk
OSD_WChronometer = _OSD.OSD_WChronometer
OSD_WTimer = _OSD.OSD_WTimer
OSD_WPackage = _OSD.OSD_WPackage
OSD_WEnvironmentIterator = _OSD.OSD_WEnvironmentIterator


class OSD_FromWhere(IntEnum):
	OSD_FromBeginning = 0
	OSD_FromHere = 1
	OSD_FromEnd = 2
OSD_FromBeginning = OSD_FromWhere.OSD_FromBeginning
OSD_FromHere = OSD_FromWhere.OSD_FromHere
OSD_FromEnd = OSD_FromWhere.OSD_FromEnd

class OSD_KindFile(IntEnum):
	OSD_FILE = 0
	OSD_DIRECTORY = 1
	OSD_LINK = 2
	OSD_SOCKET = 3
	OSD_UNKNOWN = 4
OSD_FILE = OSD_KindFile.OSD_FILE
OSD_DIRECTORY = OSD_KindFile.OSD_DIRECTORY
OSD_LINK = OSD_KindFile.OSD_LINK
OSD_SOCKET = OSD_KindFile.OSD_SOCKET
OSD_UNKNOWN = OSD_KindFile.OSD_UNKNOWN

class OSD_LoadMode(IntEnum):
	OSD_RTLD_LAZY = 0
	OSD_RTLD_NOW = 1
OSD_RTLD_LAZY = OSD_LoadMode.OSD_RTLD_LAZY
OSD_RTLD_NOW = OSD_LoadMode.OSD_RTLD_NOW

class OSD_LockType(IntEnum):
	OSD_NoLock = 0
	OSD_ReadLock = 1
	OSD_WriteLock = 2
	OSD_ExclusiveLock = 3
OSD_NoLock = OSD_LockType.OSD_NoLock
OSD_ReadLock = OSD_LockType.OSD_ReadLock
OSD_WriteLock = OSD_LockType.OSD_WriteLock
OSD_ExclusiveLock = OSD_LockType.OSD_ExclusiveLock

class OSD_OEMType(IntEnum):
	OSD_Unavailable = 0
	OSD_SUN = 1
	OSD_DEC = 2
	OSD_SGI = 3
	OSD_NEC = 4
	OSD_MAC = 5
	OSD_PC = 6
	OSD_HP = 7
	OSD_IBM = 8
	OSD_VAX = 9
	OSD_LIN = 10
	OSD_AIX = 11
OSD_Unavailable = OSD_OEMType.OSD_Unavailable
OSD_SUN = OSD_OEMType.OSD_SUN
OSD_DEC = OSD_OEMType.OSD_DEC
OSD_SGI = OSD_OEMType.OSD_SGI
OSD_NEC = OSD_OEMType.OSD_NEC
OSD_MAC = OSD_OEMType.OSD_MAC
OSD_PC = OSD_OEMType.OSD_PC
OSD_HP = OSD_OEMType.OSD_HP
OSD_IBM = OSD_OEMType.OSD_IBM
OSD_VAX = OSD_OEMType.OSD_VAX
OSD_LIN = OSD_OEMType.OSD_LIN
OSD_AIX = OSD_OEMType.OSD_AIX

class OSD_OpenMode(IntEnum):
	OSD_ReadOnly = 0
	OSD_WriteOnly = 1
	OSD_ReadWrite = 2
OSD_ReadOnly = OSD_OpenMode.OSD_ReadOnly
OSD_WriteOnly = OSD_OpenMode.OSD_WriteOnly
OSD_ReadWrite = OSD_OpenMode.OSD_ReadWrite

class OSD_SignalMode(IntEnum):
	OSD_SignalMode_AsIs = 0
	OSD_SignalMode_Set = 1
	OSD_SignalMode_SetUnhandled = 2
	OSD_SignalMode_Unset = 3
OSD_SignalMode_AsIs = OSD_SignalMode.OSD_SignalMode_AsIs
OSD_SignalMode_Set = OSD_SignalMode.OSD_SignalMode_Set
OSD_SignalMode_SetUnhandled = OSD_SignalMode.OSD_SignalMode_SetUnhandled
OSD_SignalMode_Unset = OSD_SignalMode.OSD_SignalMode_Unset

class OSD_SingleProtection(IntEnum):
	OSD_None = 0
	OSD_R = 1
	OSD_W = 2
	OSD_RW = 3
	OSD_X = 4
	OSD_RX = 5
	OSD_WX = 6
	OSD_RWX = 7
	OSD_D = 8
	OSD_RD = 9
	OSD_WD = 10
	OSD_RWD = 11
	OSD_XD = 12
	OSD_RXD = 13
	OSD_WXD = 14
	OSD_RWXD = 15
OSD_None = OSD_SingleProtection.OSD_None
OSD_R = OSD_SingleProtection.OSD_R
OSD_W = OSD_SingleProtection.OSD_W
OSD_RW = OSD_SingleProtection.OSD_RW
OSD_X = OSD_SingleProtection.OSD_X
OSD_RX = OSD_SingleProtection.OSD_RX
OSD_WX = OSD_SingleProtection.OSD_WX
OSD_RWX = OSD_SingleProtection.OSD_RWX
OSD_D = OSD_SingleProtection.OSD_D
OSD_RD = OSD_SingleProtection.OSD_RD
OSD_WD = OSD_SingleProtection.OSD_WD
OSD_RWD = OSD_SingleProtection.OSD_RWD
OSD_XD = OSD_SingleProtection.OSD_XD
OSD_RXD = OSD_SingleProtection.OSD_RXD
OSD_WXD = OSD_SingleProtection.OSD_WXD
OSD_RWXD = OSD_SingleProtection.OSD_RWXD

class OSD_SysType(IntEnum):
	OSD_Unknown = 0
	OSD_Default = 1
	OSD_UnixBSD = 2
	OSD_UnixSystemV = 3
	OSD_VMS = 4
	OSD_OS2 = 5
	OSD_OSF = 6
	OSD_MacOs = 7
	OSD_Taligent = 8
	OSD_WindowsNT = 9
	OSD_LinuxREDHAT = 10
	OSD_Aix = 11
OSD_Unknown = OSD_SysType.OSD_Unknown
OSD_Default = OSD_SysType.OSD_Default
OSD_UnixBSD = OSD_SysType.OSD_UnixBSD
OSD_UnixSystemV = OSD_SysType.OSD_UnixSystemV
OSD_VMS = OSD_SysType.OSD_VMS
OSD_OS2 = OSD_SysType.OSD_OS2
OSD_OSF = OSD_SysType.OSD_OSF
OSD_MacOs = OSD_SysType.OSD_MacOs
OSD_Taligent = OSD_SysType.OSD_Taligent
OSD_WindowsNT = OSD_SysType.OSD_WindowsNT
OSD_LinuxREDHAT = OSD_SysType.OSD_LinuxREDHAT
OSD_Aix = OSD_SysType.OSD_Aix

class OSD_WhoAmI(IntEnum):
	OSD_WDirectory = 0
	OSD_WDirectoryIterator = 1
	OSD_WEnvironment = 2
	OSD_WFile = 3
	OSD_WFileNode = 4
	OSD_WFileIterator = 5
	OSD_WPath = 6
	OSD_WProcess = 7
	OSD_WProtection = 8
	OSD_WHost = 9
	OSD_WDisk = 10
	OSD_WChronometer = 11
	OSD_WTimer = 12
	OSD_WPackage = 13
	OSD_WEnvironmentIterator = 14
OSD_WDirectory = OSD_WhoAmI.OSD_WDirectory
OSD_WDirectoryIterator = OSD_WhoAmI.OSD_WDirectoryIterator
OSD_WEnvironment = OSD_WhoAmI.OSD_WEnvironment
OSD_WFile = OSD_WhoAmI.OSD_WFile
OSD_WFileNode = OSD_WhoAmI.OSD_WFileNode
OSD_WFileIterator = OSD_WhoAmI.OSD_WFileIterator
OSD_WPath = OSD_WhoAmI.OSD_WPath
OSD_WProcess = OSD_WhoAmI.OSD_WProcess
OSD_WProtection = OSD_WhoAmI.OSD_WProtection
OSD_WHost = OSD_WhoAmI.OSD_WHost
OSD_WDisk = OSD_WhoAmI.OSD_WDisk
OSD_WChronometer = OSD_WhoAmI.OSD_WChronometer
OSD_WTimer = OSD_WhoAmI.OSD_WTimer
OSD_WPackage = OSD_WhoAmI.OSD_WPackage
OSD_WEnvironmentIterator = OSD_WhoAmI.OSD_WEnvironmentIterator


@classnotwrapped
class OSD_SharedLibrary:
	pass

@classnotwrapped
class OSD_FileIterator:
	pass

@classnotwrapped
class OSD_FileSystem:
	pass

@classnotwrapped
class OSD_Host:
	pass

@classnotwrapped
class OSD_File:
	pass

@classnotwrapped
class OSD_StreamBuffer:
	pass

@classnotwrapped
class OSD_Thread:
	pass

@classnotwrapped
class OSD_Error:
	pass

@classnotwrapped
class OSD_Process:
	pass

@classnotwrapped
class OSD_Timer:
	pass

@classnotwrapped
class OSD_Disk:
	pass

@classnotwrapped
class OSD_Environment:
	pass

@classnotwrapped
class OSD_Parallel:
	pass

@classnotwrapped
class OSD_PerfMeter:
	pass

@classnotwrapped
class OSD_Protection:
	pass

@classnotwrapped
class OSD_Path:
	pass

@classnotwrapped
class OSD_Directory:
	pass

@classnotwrapped
class OSD_LocalFileSystem:
	pass

@classnotwrapped
class OSD_ThreadPool:
	pass

@classnotwrapped
class OSD_MemInfo:
	pass

@classnotwrapped
class OSD_DirectoryIterator:
	pass

@classnotwrapped
class OSD_MAllocHook:
	pass

@classnotwrapped
class OSD_FileNode:
	pass

@classnotwrapped
class OSD_CachedFileSystem:
	pass

@classnotwrapped
class OSD_FileSystemSelector:
	pass

@classnotwrapped
class OSD_Chronometer:
	pass

@classnotwrapped
class OSD:
	pass





