# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomEvaluator module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomevaluator.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomEvaluator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomEvaluator')
    _GeomEvaluator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomEvaluator', [dirname(__file__)])
        except ImportError:
            import _GeomEvaluator
            return _GeomEvaluator
        try:
            _mod = imp.load_module('_GeomEvaluator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomEvaluator = swig_import_helper()
    del swig_import_helper
else:
    import _GeomEvaluator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomEvaluator.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _GeomEvaluator.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GeomEvaluator.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GeomEvaluator.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _GeomEvaluator.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _GeomEvaluator.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _GeomEvaluator.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _GeomEvaluator.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _GeomEvaluator.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _GeomEvaluator.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GeomEvaluator.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _GeomEvaluator.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _GeomEvaluator.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GeomEvaluator.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GeomEvaluator.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GeomEvaluator.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _GeomEvaluator.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomEvaluator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomEvaluator.process_exception(error, method_name, class_name)
process_exception = _GeomEvaluator.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.GeomAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_GeomEvaluator_Curve_Create() -> "opencascade::handle< GeomEvaluator_Curve >":
    return _GeomEvaluator.Handle_GeomEvaluator_Curve_Create()
Handle_GeomEvaluator_Curve_Create = _GeomEvaluator.Handle_GeomEvaluator_Curve_Create

def Handle_GeomEvaluator_Curve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_Curve >":
    return _GeomEvaluator.Handle_GeomEvaluator_Curve_DownCast(t)
Handle_GeomEvaluator_Curve_DownCast = _GeomEvaluator.Handle_GeomEvaluator_Curve_DownCast

def Handle_GeomEvaluator_Curve_IsNull(t: 'opencascade::handle< GeomEvaluator_Curve > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_Curve_IsNull(t)
Handle_GeomEvaluator_Curve_IsNull = _GeomEvaluator.Handle_GeomEvaluator_Curve_IsNull

def Handle_GeomEvaluator_Surface_Create() -> "opencascade::handle< GeomEvaluator_Surface >":
    return _GeomEvaluator.Handle_GeomEvaluator_Surface_Create()
Handle_GeomEvaluator_Surface_Create = _GeomEvaluator.Handle_GeomEvaluator_Surface_Create

def Handle_GeomEvaluator_Surface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_Surface >":
    return _GeomEvaluator.Handle_GeomEvaluator_Surface_DownCast(t)
Handle_GeomEvaluator_Surface_DownCast = _GeomEvaluator.Handle_GeomEvaluator_Surface_DownCast

def Handle_GeomEvaluator_Surface_IsNull(t: 'opencascade::handle< GeomEvaluator_Surface > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_Surface_IsNull(t)
Handle_GeomEvaluator_Surface_IsNull = _GeomEvaluator.Handle_GeomEvaluator_Surface_IsNull

def Handle_GeomEvaluator_OffsetCurve_Create() -> "opencascade::handle< GeomEvaluator_OffsetCurve >":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_Create()
Handle_GeomEvaluator_OffsetCurve_Create = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_Create

def Handle_GeomEvaluator_OffsetCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_OffsetCurve >":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DownCast(t)
Handle_GeomEvaluator_OffsetCurve_DownCast = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DownCast

def Handle_GeomEvaluator_OffsetCurve_IsNull(t: 'opencascade::handle< GeomEvaluator_OffsetCurve > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IsNull(t)
Handle_GeomEvaluator_OffsetCurve_IsNull = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IsNull

def Handle_GeomEvaluator_OffsetSurface_Create() -> "opencascade::handle< GeomEvaluator_OffsetSurface >":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_Create()
Handle_GeomEvaluator_OffsetSurface_Create = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_Create

def Handle_GeomEvaluator_OffsetSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_OffsetSurface >":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DownCast(t)
Handle_GeomEvaluator_OffsetSurface_DownCast = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DownCast

def Handle_GeomEvaluator_OffsetSurface_IsNull(t: 'opencascade::handle< GeomEvaluator_OffsetSurface > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IsNull(t)
Handle_GeomEvaluator_OffsetSurface_IsNull = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IsNull

def Handle_GeomEvaluator_SurfaceOfExtrusion_Create() -> "opencascade::handle< GeomEvaluator_SurfaceOfExtrusion >":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_Create()
Handle_GeomEvaluator_SurfaceOfExtrusion_Create = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_Create

def Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_SurfaceOfExtrusion >":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(t)
Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast

def Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull(t: 'opencascade::handle< GeomEvaluator_SurfaceOfExtrusion > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull(t)
Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull

def Handle_GeomEvaluator_SurfaceOfRevolution_Create() -> "opencascade::handle< GeomEvaluator_SurfaceOfRevolution >":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_Create()
Handle_GeomEvaluator_SurfaceOfRevolution_Create = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_Create

def Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomEvaluator_SurfaceOfRevolution >":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(t)
Handle_GeomEvaluator_SurfaceOfRevolution_DownCast = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DownCast

def Handle_GeomEvaluator_SurfaceOfRevolution_IsNull(t: 'opencascade::handle< GeomEvaluator_SurfaceOfRevolution > const &') -> "bool":
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IsNull(t)
Handle_GeomEvaluator_SurfaceOfRevolution_IsNull = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IsNull
class GeomEvaluator_Curve(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomEvaluator_Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomEvaluator_Curve, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        Value of 3d curve.

        Parameters
        ----------
        theU: float
        theValue: gp_Pnt

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_Curve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        Value and first derivatives of curve.

        Parameters
        ----------
        theU: float
        theValue: gp_Pnt
        theD1: gp_Vec

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_Curve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        Value, first and second derivatives of curve.

        Parameters
        ----------
        theU: float
        theValue: gp_Pnt
        theD1: gp_Vec
        theD2: gp_Vec

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_Curve_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        Value, first, second and third derivatives of curve.

        Parameters
        ----------
        theU: float
        theValue: gp_Pnt
        theD1: gp_Vec
        theD2: gp_Vec
        theD3: gp_Vec

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_Curve_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        Calculates n-th derivatives of curve, where n = thederu. raises if n < 1.

        Parameters
        ----------
        theU: float
        theDerU: int

        Returns
        -------
        gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Curve_DN(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_Curve
    __del__ = lambda self: None
GeomEvaluator_Curve_swigregister = _GeomEvaluator.GeomEvaluator_Curve_swigregister
GeomEvaluator_Curve_swigregister(GeomEvaluator_Curve)

class GeomEvaluator_Surface(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomEvaluator_Surface, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomEvaluator_Surface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        Value of surface.

        Parameters
        ----------
        theU: float
        theV: float
        theValue: gp_Pnt

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_Surface_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        Value and first derivatives of surface.

        Parameters
        ----------
        theU: float
        theV: float
        theValue: gp_Pnt
        theD1U: gp_Vec
        theD1V: gp_Vec

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_Surface_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        Value, first and second derivatives of surface.

        Parameters
        ----------
        theU: float
        theV: float
        theValue: gp_Pnt
        theD1U: gp_Vec
        theD1V: gp_Vec
        theD2U: gp_Vec
        theD2V: gp_Vec
        theD2UV: gp_Vec

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_Surface_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        Value, first, second and third derivatives of surface.

        Parameters
        ----------
        theU: float
        theV: float
        theValue: gp_Pnt
        theD1U: gp_Vec
        theD1V: gp_Vec
        theD2U: gp_Vec
        theD2V: gp_Vec
        theD2UV: gp_Vec
        theD3U: gp_Vec
        theD3V: gp_Vec
        theD3UUV: gp_Vec
        theD3UVV: gp_Vec

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_Surface_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        Calculates n-th derivatives of surface, where n = thederu + thederv. //! raises if n < 1 or thederu < 0 or thederv < 0.

        Parameters
        ----------
        theU: float
        theV: float
        theDerU: int
        theDerV: int

        Returns
        -------
        gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Surface_DN(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_Surface
    __del__ = lambda self: None
GeomEvaluator_Surface_swigregister = _GeomEvaluator.GeomEvaluator_Surface_swigregister
GeomEvaluator_Surface_swigregister(GeomEvaluator_Surface)

class GeomEvaluator_OffsetCurve(GeomEvaluator_Curve):
    __swig_setmethods__ = {}
    for _s in [GeomEvaluator_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomEvaluator_OffsetCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomEvaluator_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomEvaluator_OffsetCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialize evaluator by curve.

        Parameters
        ----------
        theBase: Geom_Curve
        theOffset: float
        theDirection: gp_Dir

        Returns
        -------
        None

        Initialize evaluator by curve adaptor.

        Parameters
        ----------
        theBase: GeomAdaptor_HCurve
        theOffset: float
        theDirection: gp_Dir

        Returns
        -------
        None

        """
        this = _GeomEvaluator.new_GeomEvaluator_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOffsetDirection(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theDirection: gp_Dir

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetDirection(self, *args)


    def SetOffsetValue(self, *args) -> "void":
        """
        Change the offset value.

        Parameters
        ----------
        theOffset: float

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_OffsetCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_OffsetCurve
    __del__ = lambda self: None
GeomEvaluator_OffsetCurve_swigregister = _GeomEvaluator.GeomEvaluator_OffsetCurve_swigregister
GeomEvaluator_OffsetCurve_swigregister(GeomEvaluator_OffsetCurve)

class GeomEvaluator_OffsetSurface(GeomEvaluator_Surface):
    __swig_setmethods__ = {}
    for _s in [GeomEvaluator_Surface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomEvaluator_OffsetSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomEvaluator_Surface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomEvaluator_OffsetSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialize evaluator by surface.

        Parameters
        ----------
        theBase: Geom_Surface
        theOffset: float
        theOscSurf: Geom_OsculatingSurface,optional
        	default value is opencascade::handle<Geom_OsculatingSurface>()

        Returns
        -------
        None

        Initialize evaluator by surface adaptor.

        Parameters
        ----------
        theBase: GeomAdaptor_HSurface
        theOffset: float
        theOscSurf: Geom_OsculatingSurface,optional
        	default value is opencascade::handle<Geom_OsculatingSurface>()

        Returns
        -------
        None

        """
        this = _GeomEvaluator.new_GeomEvaluator_OffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOffsetValue(self, *args) -> "void":
        """
        Change the offset value.

        Parameters
        ----------
        theOffset: float

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_SetOffsetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_OffsetSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_OffsetSurface
    __del__ = lambda self: None
GeomEvaluator_OffsetSurface_swigregister = _GeomEvaluator.GeomEvaluator_OffsetSurface_swigregister
GeomEvaluator_OffsetSurface_swigregister(GeomEvaluator_OffsetSurface)

class GeomEvaluator_SurfaceOfExtrusion(GeomEvaluator_Surface):
    __swig_setmethods__ = {}
    for _s in [GeomEvaluator_Surface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomEvaluator_SurfaceOfExtrusion, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomEvaluator_Surface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomEvaluator_SurfaceOfExtrusion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialize evaluator by surface.

        Parameters
        ----------
        theBase: Geom_Curve
        theExtrusionDir: gp_Dir

        Returns
        -------
        None

        Initialize evaluator by surface adaptor.

        Parameters
        ----------
        theBase: Adaptor3d_HCurve
        theExtrusionDir: gp_Dir

        Returns
        -------
        None

        """
        this = _GeomEvaluator.new_GeomEvaluator_SurfaceOfExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetDirection(self, *args) -> "void":
        """
        /changes the direction of extrusion.

        Parameters
        ----------
        theDirection: gp_Dir

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_SetDirection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_SurfaceOfExtrusion
    __del__ = lambda self: None
GeomEvaluator_SurfaceOfExtrusion_swigregister = _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_swigregister
GeomEvaluator_SurfaceOfExtrusion_swigregister(GeomEvaluator_SurfaceOfExtrusion)

class GeomEvaluator_SurfaceOfRevolution(GeomEvaluator_Surface):
    __swig_setmethods__ = {}
    for _s in [GeomEvaluator_Surface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomEvaluator_SurfaceOfRevolution, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomEvaluator_Surface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomEvaluator_SurfaceOfRevolution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialize evaluator by revolved curve, the axis of revolution and the location.

        Parameters
        ----------
        theBase: Geom_Curve
        theRevolDir: gp_Dir
        theRevolLoc: gp_Pnt

        Returns
        -------
        None

        Initialize evaluator by adaptor of the revolved curve, the axis of revolution and the location.

        Parameters
        ----------
        theBase: Adaptor3d_HCurve
        theRevolDir: gp_Dir
        theRevolLoc: gp_Pnt

        Returns
        -------
        None

        """
        this = _GeomEvaluator.new_GeomEvaluator_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetAxis(self, *args) -> "void":
        """
        Change the axis of revolution.

        Parameters
        ----------
        theAxis: gp_Ax1

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetAxis(self, *args)


    def SetDirection(self, *args) -> "void":
        """
        Change direction of the axis of revolution.

        Parameters
        ----------
        theDirection: gp_Dir

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetDirection(self, *args)


    def SetLocation(self, *args) -> "void":
        """
        Change location of the axis of revolution.

        Parameters
        ----------
        theLocation: gp_Pnt

        Returns
        -------
        None

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetLocation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_SurfaceOfRevolution
    __del__ = lambda self: None
GeomEvaluator_SurfaceOfRevolution_swigregister = _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_swigregister
GeomEvaluator_SurfaceOfRevolution_swigregister(GeomEvaluator_SurfaceOfRevolution)



# This file is compatible with both classic and new-style classes.


