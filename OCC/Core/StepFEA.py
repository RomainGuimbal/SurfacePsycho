# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepFEA module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepfea.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepFEA')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepFEA')
    _StepFEA = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepFEA', [dirname(__file__)])
        except ImportError:
            import _StepFEA
            return _StepFEA
        try:
            _mod = imp.load_module('_StepFEA', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepFEA = swig_import_helper()
    del swig_import_helper
else:
    import _StepFEA
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepFEA.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StepFEA.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepFEA.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepFEA.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StepFEA.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StepFEA.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StepFEA.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StepFEA.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StepFEA.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StepFEA.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepFEA.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StepFEA.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StepFEA.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepFEA.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepFEA.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepFEA.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StepFEA.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepFEA.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepFEA.process_exception(error, method_name, class_name)
process_exception = _StepFEA.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepElement
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.StepGeom

from enum import IntEnum
from OCC.Core.Exception import *

StepFEA_Volume = _StepFEA.StepFEA_Volume
StepFEA_Cartesian = _StepFEA.StepFEA_Cartesian
StepFEA_Cylindrical = _StepFEA.StepFEA_Cylindrical
StepFEA_Spherical = _StepFEA.StepFEA_Spherical
StepFEA_XTranslation = _StepFEA.StepFEA_XTranslation
StepFEA_YTranslation = _StepFEA.StepFEA_YTranslation
StepFEA_ZTranslation = _StepFEA.StepFEA_ZTranslation
StepFEA_XRotation = _StepFEA.StepFEA_XRotation
StepFEA_YRotation = _StepFEA.StepFEA_YRotation
StepFEA_ZRotation = _StepFEA.StepFEA_ZRotation
StepFEA_Warp = _StepFEA.StepFEA_Warp
StepFEA_ElementEdge = _StepFEA.StepFEA_ElementEdge
StepFEA_Unspecified = _StepFEA.StepFEA_Unspecified


class StepFEA_ElementVolume(IntEnum):
	StepFEA_Volume = 0
StepFEA_Volume = StepFEA_ElementVolume.StepFEA_Volume

class StepFEA_CoordinateSystemType(IntEnum):
	StepFEA_Cartesian = 0
	StepFEA_Cylindrical = 1
	StepFEA_Spherical = 2
StepFEA_Cartesian = StepFEA_CoordinateSystemType.StepFEA_Cartesian
StepFEA_Cylindrical = StepFEA_CoordinateSystemType.StepFEA_Cylindrical
StepFEA_Spherical = StepFEA_CoordinateSystemType.StepFEA_Spherical

class StepFEA_EnumeratedDegreeOfFreedom(IntEnum):
	StepFEA_XTranslation = 0
	StepFEA_YTranslation = 1
	StepFEA_ZTranslation = 2
	StepFEA_XRotation = 3
	StepFEA_YRotation = 4
	StepFEA_ZRotation = 5
	StepFEA_Warp = 6
StepFEA_XTranslation = StepFEA_EnumeratedDegreeOfFreedom.StepFEA_XTranslation
StepFEA_YTranslation = StepFEA_EnumeratedDegreeOfFreedom.StepFEA_YTranslation
StepFEA_ZTranslation = StepFEA_EnumeratedDegreeOfFreedom.StepFEA_ZTranslation
StepFEA_XRotation = StepFEA_EnumeratedDegreeOfFreedom.StepFEA_XRotation
StepFEA_YRotation = StepFEA_EnumeratedDegreeOfFreedom.StepFEA_YRotation
StepFEA_ZRotation = StepFEA_EnumeratedDegreeOfFreedom.StepFEA_ZRotation
StepFEA_Warp = StepFEA_EnumeratedDegreeOfFreedom.StepFEA_Warp

class StepFEA_CurveEdge(IntEnum):
	StepFEA_ElementEdge = 0
StepFEA_ElementEdge = StepFEA_CurveEdge.StepFEA_ElementEdge

class StepFEA_UnspecifiedValue(IntEnum):
	StepFEA_Unspecified = 0
StepFEA_Unspecified = StepFEA_UnspecifiedValue.StepFEA_Unspecified


def Handle_StepFEA_Curve3dElementProperty_Create() -> "opencascade::handle< StepFEA_Curve3dElementProperty >":
    return _StepFEA.Handle_StepFEA_Curve3dElementProperty_Create()
Handle_StepFEA_Curve3dElementProperty_Create = _StepFEA.Handle_StepFEA_Curve3dElementProperty_Create

def Handle_StepFEA_Curve3dElementProperty_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_Curve3dElementProperty >":
    return _StepFEA.Handle_StepFEA_Curve3dElementProperty_DownCast(t)
Handle_StepFEA_Curve3dElementProperty_DownCast = _StepFEA.Handle_StepFEA_Curve3dElementProperty_DownCast

def Handle_StepFEA_Curve3dElementProperty_IsNull(t: 'opencascade::handle< StepFEA_Curve3dElementProperty > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_Curve3dElementProperty_IsNull(t)
Handle_StepFEA_Curve3dElementProperty_IsNull = _StepFEA.Handle_StepFEA_Curve3dElementProperty_IsNull

def Handle_StepFEA_CurveElementEndOffset_Create() -> "opencascade::handle< StepFEA_CurveElementEndOffset >":
    return _StepFEA.Handle_StepFEA_CurveElementEndOffset_Create()
Handle_StepFEA_CurveElementEndOffset_Create = _StepFEA.Handle_StepFEA_CurveElementEndOffset_Create

def Handle_StepFEA_CurveElementEndOffset_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_CurveElementEndOffset >":
    return _StepFEA.Handle_StepFEA_CurveElementEndOffset_DownCast(t)
Handle_StepFEA_CurveElementEndOffset_DownCast = _StepFEA.Handle_StepFEA_CurveElementEndOffset_DownCast

def Handle_StepFEA_CurveElementEndOffset_IsNull(t: 'opencascade::handle< StepFEA_CurveElementEndOffset > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_CurveElementEndOffset_IsNull(t)
Handle_StepFEA_CurveElementEndOffset_IsNull = _StepFEA.Handle_StepFEA_CurveElementEndOffset_IsNull

def Handle_StepFEA_CurveElementEndRelease_Create() -> "opencascade::handle< StepFEA_CurveElementEndRelease >":
    return _StepFEA.Handle_StepFEA_CurveElementEndRelease_Create()
Handle_StepFEA_CurveElementEndRelease_Create = _StepFEA.Handle_StepFEA_CurveElementEndRelease_Create

def Handle_StepFEA_CurveElementEndRelease_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_CurveElementEndRelease >":
    return _StepFEA.Handle_StepFEA_CurveElementEndRelease_DownCast(t)
Handle_StepFEA_CurveElementEndRelease_DownCast = _StepFEA.Handle_StepFEA_CurveElementEndRelease_DownCast

def Handle_StepFEA_CurveElementEndRelease_IsNull(t: 'opencascade::handle< StepFEA_CurveElementEndRelease > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_CurveElementEndRelease_IsNull(t)
Handle_StepFEA_CurveElementEndRelease_IsNull = _StepFEA.Handle_StepFEA_CurveElementEndRelease_IsNull

def Handle_StepFEA_CurveElementInterval_Create() -> "opencascade::handle< StepFEA_CurveElementInterval >":
    return _StepFEA.Handle_StepFEA_CurveElementInterval_Create()
Handle_StepFEA_CurveElementInterval_Create = _StepFEA.Handle_StepFEA_CurveElementInterval_Create

def Handle_StepFEA_CurveElementInterval_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_CurveElementInterval >":
    return _StepFEA.Handle_StepFEA_CurveElementInterval_DownCast(t)
Handle_StepFEA_CurveElementInterval_DownCast = _StepFEA.Handle_StepFEA_CurveElementInterval_DownCast

def Handle_StepFEA_CurveElementInterval_IsNull(t: 'opencascade::handle< StepFEA_CurveElementInterval > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_CurveElementInterval_IsNull(t)
Handle_StepFEA_CurveElementInterval_IsNull = _StepFEA.Handle_StepFEA_CurveElementInterval_IsNull

def Handle_StepFEA_CurveElementLocation_Create() -> "opencascade::handle< StepFEA_CurveElementLocation >":
    return _StepFEA.Handle_StepFEA_CurveElementLocation_Create()
Handle_StepFEA_CurveElementLocation_Create = _StepFEA.Handle_StepFEA_CurveElementLocation_Create

def Handle_StepFEA_CurveElementLocation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_CurveElementLocation >":
    return _StepFEA.Handle_StepFEA_CurveElementLocation_DownCast(t)
Handle_StepFEA_CurveElementLocation_DownCast = _StepFEA.Handle_StepFEA_CurveElementLocation_DownCast

def Handle_StepFEA_CurveElementLocation_IsNull(t: 'opencascade::handle< StepFEA_CurveElementLocation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_CurveElementLocation_IsNull(t)
Handle_StepFEA_CurveElementLocation_IsNull = _StepFEA.Handle_StepFEA_CurveElementLocation_IsNull

def Handle_StepFEA_DegreeOfFreedomMember_Create() -> "opencascade::handle< StepFEA_DegreeOfFreedomMember >":
    return _StepFEA.Handle_StepFEA_DegreeOfFreedomMember_Create()
Handle_StepFEA_DegreeOfFreedomMember_Create = _StepFEA.Handle_StepFEA_DegreeOfFreedomMember_Create

def Handle_StepFEA_DegreeOfFreedomMember_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_DegreeOfFreedomMember >":
    return _StepFEA.Handle_StepFEA_DegreeOfFreedomMember_DownCast(t)
Handle_StepFEA_DegreeOfFreedomMember_DownCast = _StepFEA.Handle_StepFEA_DegreeOfFreedomMember_DownCast

def Handle_StepFEA_DegreeOfFreedomMember_IsNull(t: 'opencascade::handle< StepFEA_DegreeOfFreedomMember > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_DegreeOfFreedomMember_IsNull(t)
Handle_StepFEA_DegreeOfFreedomMember_IsNull = _StepFEA.Handle_StepFEA_DegreeOfFreedomMember_IsNull

def Handle_StepFEA_ElementGeometricRelationship_Create() -> "opencascade::handle< StepFEA_ElementGeometricRelationship >":
    return _StepFEA.Handle_StepFEA_ElementGeometricRelationship_Create()
Handle_StepFEA_ElementGeometricRelationship_Create = _StepFEA.Handle_StepFEA_ElementGeometricRelationship_Create

def Handle_StepFEA_ElementGeometricRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_ElementGeometricRelationship >":
    return _StepFEA.Handle_StepFEA_ElementGeometricRelationship_DownCast(t)
Handle_StepFEA_ElementGeometricRelationship_DownCast = _StepFEA.Handle_StepFEA_ElementGeometricRelationship_DownCast

def Handle_StepFEA_ElementGeometricRelationship_IsNull(t: 'opencascade::handle< StepFEA_ElementGeometricRelationship > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_ElementGeometricRelationship_IsNull(t)
Handle_StepFEA_ElementGeometricRelationship_IsNull = _StepFEA.Handle_StepFEA_ElementGeometricRelationship_IsNull

def Handle_StepFEA_ElementRepresentation_Create() -> "opencascade::handle< StepFEA_ElementRepresentation >":
    return _StepFEA.Handle_StepFEA_ElementRepresentation_Create()
Handle_StepFEA_ElementRepresentation_Create = _StepFEA.Handle_StepFEA_ElementRepresentation_Create

def Handle_StepFEA_ElementRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_ElementRepresentation >":
    return _StepFEA.Handle_StepFEA_ElementRepresentation_DownCast(t)
Handle_StepFEA_ElementRepresentation_DownCast = _StepFEA.Handle_StepFEA_ElementRepresentation_DownCast

def Handle_StepFEA_ElementRepresentation_IsNull(t: 'opencascade::handle< StepFEA_ElementRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_ElementRepresentation_IsNull(t)
Handle_StepFEA_ElementRepresentation_IsNull = _StepFEA.Handle_StepFEA_ElementRepresentation_IsNull

def Handle_StepFEA_FeaAxis2Placement3d_Create() -> "opencascade::handle< StepFEA_FeaAxis2Placement3d >":
    return _StepFEA.Handle_StepFEA_FeaAxis2Placement3d_Create()
Handle_StepFEA_FeaAxis2Placement3d_Create = _StepFEA.Handle_StepFEA_FeaAxis2Placement3d_Create

def Handle_StepFEA_FeaAxis2Placement3d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaAxis2Placement3d >":
    return _StepFEA.Handle_StepFEA_FeaAxis2Placement3d_DownCast(t)
Handle_StepFEA_FeaAxis2Placement3d_DownCast = _StepFEA.Handle_StepFEA_FeaAxis2Placement3d_DownCast

def Handle_StepFEA_FeaAxis2Placement3d_IsNull(t: 'opencascade::handle< StepFEA_FeaAxis2Placement3d > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaAxis2Placement3d_IsNull(t)
Handle_StepFEA_FeaAxis2Placement3d_IsNull = _StepFEA.Handle_StepFEA_FeaAxis2Placement3d_IsNull

def Handle_StepFEA_FeaCurveSectionGeometricRelationship_Create() -> "opencascade::handle< StepFEA_FeaCurveSectionGeometricRelationship >":
    return _StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship_Create()
Handle_StepFEA_FeaCurveSectionGeometricRelationship_Create = _StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship_Create

def Handle_StepFEA_FeaCurveSectionGeometricRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaCurveSectionGeometricRelationship >":
    return _StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship_DownCast(t)
Handle_StepFEA_FeaCurveSectionGeometricRelationship_DownCast = _StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship_DownCast

def Handle_StepFEA_FeaCurveSectionGeometricRelationship_IsNull(t: 'opencascade::handle< StepFEA_FeaCurveSectionGeometricRelationship > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship_IsNull(t)
Handle_StepFEA_FeaCurveSectionGeometricRelationship_IsNull = _StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship_IsNull

def Handle_StepFEA_FeaGroup_Create() -> "opencascade::handle< StepFEA_FeaGroup >":
    return _StepFEA.Handle_StepFEA_FeaGroup_Create()
Handle_StepFEA_FeaGroup_Create = _StepFEA.Handle_StepFEA_FeaGroup_Create

def Handle_StepFEA_FeaGroup_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaGroup >":
    return _StepFEA.Handle_StepFEA_FeaGroup_DownCast(t)
Handle_StepFEA_FeaGroup_DownCast = _StepFEA.Handle_StepFEA_FeaGroup_DownCast

def Handle_StepFEA_FeaGroup_IsNull(t: 'opencascade::handle< StepFEA_FeaGroup > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaGroup_IsNull(t)
Handle_StepFEA_FeaGroup_IsNull = _StepFEA.Handle_StepFEA_FeaGroup_IsNull

def Handle_StepFEA_FeaMaterialPropertyRepresentation_Create() -> "opencascade::handle< StepFEA_FeaMaterialPropertyRepresentation >":
    return _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation_Create()
Handle_StepFEA_FeaMaterialPropertyRepresentation_Create = _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation_Create

def Handle_StepFEA_FeaMaterialPropertyRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaMaterialPropertyRepresentation >":
    return _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation_DownCast(t)
Handle_StepFEA_FeaMaterialPropertyRepresentation_DownCast = _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation_DownCast

def Handle_StepFEA_FeaMaterialPropertyRepresentation_IsNull(t: 'opencascade::handle< StepFEA_FeaMaterialPropertyRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation_IsNull(t)
Handle_StepFEA_FeaMaterialPropertyRepresentation_IsNull = _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation_IsNull

def Handle_StepFEA_FeaMaterialPropertyRepresentationItem_Create() -> "opencascade::handle< StepFEA_FeaMaterialPropertyRepresentationItem >":
    return _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem_Create()
Handle_StepFEA_FeaMaterialPropertyRepresentationItem_Create = _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem_Create

def Handle_StepFEA_FeaMaterialPropertyRepresentationItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaMaterialPropertyRepresentationItem >":
    return _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem_DownCast(t)
Handle_StepFEA_FeaMaterialPropertyRepresentationItem_DownCast = _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem_DownCast

def Handle_StepFEA_FeaMaterialPropertyRepresentationItem_IsNull(t: 'opencascade::handle< StepFEA_FeaMaterialPropertyRepresentationItem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem_IsNull(t)
Handle_StepFEA_FeaMaterialPropertyRepresentationItem_IsNull = _StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem_IsNull

def Handle_StepFEA_FeaModel_Create() -> "opencascade::handle< StepFEA_FeaModel >":
    return _StepFEA.Handle_StepFEA_FeaModel_Create()
Handle_StepFEA_FeaModel_Create = _StepFEA.Handle_StepFEA_FeaModel_Create

def Handle_StepFEA_FeaModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaModel >":
    return _StepFEA.Handle_StepFEA_FeaModel_DownCast(t)
Handle_StepFEA_FeaModel_DownCast = _StepFEA.Handle_StepFEA_FeaModel_DownCast

def Handle_StepFEA_FeaModel_IsNull(t: 'opencascade::handle< StepFEA_FeaModel > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaModel_IsNull(t)
Handle_StepFEA_FeaModel_IsNull = _StepFEA.Handle_StepFEA_FeaModel_IsNull

def Handle_StepFEA_FeaModelDefinition_Create() -> "opencascade::handle< StepFEA_FeaModelDefinition >":
    return _StepFEA.Handle_StepFEA_FeaModelDefinition_Create()
Handle_StepFEA_FeaModelDefinition_Create = _StepFEA.Handle_StepFEA_FeaModelDefinition_Create

def Handle_StepFEA_FeaModelDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaModelDefinition >":
    return _StepFEA.Handle_StepFEA_FeaModelDefinition_DownCast(t)
Handle_StepFEA_FeaModelDefinition_DownCast = _StepFEA.Handle_StepFEA_FeaModelDefinition_DownCast

def Handle_StepFEA_FeaModelDefinition_IsNull(t: 'opencascade::handle< StepFEA_FeaModelDefinition > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaModelDefinition_IsNull(t)
Handle_StepFEA_FeaModelDefinition_IsNull = _StepFEA.Handle_StepFEA_FeaModelDefinition_IsNull

def Handle_StepFEA_FeaParametricPoint_Create() -> "opencascade::handle< StepFEA_FeaParametricPoint >":
    return _StepFEA.Handle_StepFEA_FeaParametricPoint_Create()
Handle_StepFEA_FeaParametricPoint_Create = _StepFEA.Handle_StepFEA_FeaParametricPoint_Create

def Handle_StepFEA_FeaParametricPoint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaParametricPoint >":
    return _StepFEA.Handle_StepFEA_FeaParametricPoint_DownCast(t)
Handle_StepFEA_FeaParametricPoint_DownCast = _StepFEA.Handle_StepFEA_FeaParametricPoint_DownCast

def Handle_StepFEA_FeaParametricPoint_IsNull(t: 'opencascade::handle< StepFEA_FeaParametricPoint > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaParametricPoint_IsNull(t)
Handle_StepFEA_FeaParametricPoint_IsNull = _StepFEA.Handle_StepFEA_FeaParametricPoint_IsNull

def Handle_StepFEA_FeaRepresentationItem_Create() -> "opencascade::handle< StepFEA_FeaRepresentationItem >":
    return _StepFEA.Handle_StepFEA_FeaRepresentationItem_Create()
Handle_StepFEA_FeaRepresentationItem_Create = _StepFEA.Handle_StepFEA_FeaRepresentationItem_Create

def Handle_StepFEA_FeaRepresentationItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaRepresentationItem >":
    return _StepFEA.Handle_StepFEA_FeaRepresentationItem_DownCast(t)
Handle_StepFEA_FeaRepresentationItem_DownCast = _StepFEA.Handle_StepFEA_FeaRepresentationItem_DownCast

def Handle_StepFEA_FeaRepresentationItem_IsNull(t: 'opencascade::handle< StepFEA_FeaRepresentationItem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaRepresentationItem_IsNull(t)
Handle_StepFEA_FeaRepresentationItem_IsNull = _StepFEA.Handle_StepFEA_FeaRepresentationItem_IsNull

def Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_Create() -> "opencascade::handle< StepFEA_FeaSurfaceSectionGeometricRelationship >":
    return _StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_Create()
Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_Create = _StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_Create

def Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaSurfaceSectionGeometricRelationship >":
    return _StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_DownCast(t)
Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_DownCast = _StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_DownCast

def Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_IsNull(t: 'opencascade::handle< StepFEA_FeaSurfaceSectionGeometricRelationship > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_IsNull(t)
Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_IsNull = _StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_IsNull

def Handle_StepFEA_FreedomAndCoefficient_Create() -> "opencascade::handle< StepFEA_FreedomAndCoefficient >":
    return _StepFEA.Handle_StepFEA_FreedomAndCoefficient_Create()
Handle_StepFEA_FreedomAndCoefficient_Create = _StepFEA.Handle_StepFEA_FreedomAndCoefficient_Create

def Handle_StepFEA_FreedomAndCoefficient_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FreedomAndCoefficient >":
    return _StepFEA.Handle_StepFEA_FreedomAndCoefficient_DownCast(t)
Handle_StepFEA_FreedomAndCoefficient_DownCast = _StepFEA.Handle_StepFEA_FreedomAndCoefficient_DownCast

def Handle_StepFEA_FreedomAndCoefficient_IsNull(t: 'opencascade::handle< StepFEA_FreedomAndCoefficient > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FreedomAndCoefficient_IsNull(t)
Handle_StepFEA_FreedomAndCoefficient_IsNull = _StepFEA.Handle_StepFEA_FreedomAndCoefficient_IsNull

def Handle_StepFEA_FreedomsList_Create() -> "opencascade::handle< StepFEA_FreedomsList >":
    return _StepFEA.Handle_StepFEA_FreedomsList_Create()
Handle_StepFEA_FreedomsList_Create = _StepFEA.Handle_StepFEA_FreedomsList_Create

def Handle_StepFEA_FreedomsList_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FreedomsList >":
    return _StepFEA.Handle_StepFEA_FreedomsList_DownCast(t)
Handle_StepFEA_FreedomsList_DownCast = _StepFEA.Handle_StepFEA_FreedomsList_DownCast

def Handle_StepFEA_FreedomsList_IsNull(t: 'opencascade::handle< StepFEA_FreedomsList > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FreedomsList_IsNull(t)
Handle_StepFEA_FreedomsList_IsNull = _StepFEA.Handle_StepFEA_FreedomsList_IsNull

def Handle_StepFEA_NodeDefinition_Create() -> "opencascade::handle< StepFEA_NodeDefinition >":
    return _StepFEA.Handle_StepFEA_NodeDefinition_Create()
Handle_StepFEA_NodeDefinition_Create = _StepFEA.Handle_StepFEA_NodeDefinition_Create

def Handle_StepFEA_NodeDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_NodeDefinition >":
    return _StepFEA.Handle_StepFEA_NodeDefinition_DownCast(t)
Handle_StepFEA_NodeDefinition_DownCast = _StepFEA.Handle_StepFEA_NodeDefinition_DownCast

def Handle_StepFEA_NodeDefinition_IsNull(t: 'opencascade::handle< StepFEA_NodeDefinition > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_NodeDefinition_IsNull(t)
Handle_StepFEA_NodeDefinition_IsNull = _StepFEA.Handle_StepFEA_NodeDefinition_IsNull

def Handle_StepFEA_NodeRepresentation_Create() -> "opencascade::handle< StepFEA_NodeRepresentation >":
    return _StepFEA.Handle_StepFEA_NodeRepresentation_Create()
Handle_StepFEA_NodeRepresentation_Create = _StepFEA.Handle_StepFEA_NodeRepresentation_Create

def Handle_StepFEA_NodeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_NodeRepresentation >":
    return _StepFEA.Handle_StepFEA_NodeRepresentation_DownCast(t)
Handle_StepFEA_NodeRepresentation_DownCast = _StepFEA.Handle_StepFEA_NodeRepresentation_DownCast

def Handle_StepFEA_NodeRepresentation_IsNull(t: 'opencascade::handle< StepFEA_NodeRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_NodeRepresentation_IsNull(t)
Handle_StepFEA_NodeRepresentation_IsNull = _StepFEA.Handle_StepFEA_NodeRepresentation_IsNull

def Handle_StepFEA_NodeSet_Create() -> "opencascade::handle< StepFEA_NodeSet >":
    return _StepFEA.Handle_StepFEA_NodeSet_Create()
Handle_StepFEA_NodeSet_Create = _StepFEA.Handle_StepFEA_NodeSet_Create

def Handle_StepFEA_NodeSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_NodeSet >":
    return _StepFEA.Handle_StepFEA_NodeSet_DownCast(t)
Handle_StepFEA_NodeSet_DownCast = _StepFEA.Handle_StepFEA_NodeSet_DownCast

def Handle_StepFEA_NodeSet_IsNull(t: 'opencascade::handle< StepFEA_NodeSet > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_NodeSet_IsNull(t)
Handle_StepFEA_NodeSet_IsNull = _StepFEA.Handle_StepFEA_NodeSet_IsNull

def Handle_StepFEA_SymmetricTensor23dMember_Create() -> "opencascade::handle< StepFEA_SymmetricTensor23dMember >":
    return _StepFEA.Handle_StepFEA_SymmetricTensor23dMember_Create()
Handle_StepFEA_SymmetricTensor23dMember_Create = _StepFEA.Handle_StepFEA_SymmetricTensor23dMember_Create

def Handle_StepFEA_SymmetricTensor23dMember_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_SymmetricTensor23dMember >":
    return _StepFEA.Handle_StepFEA_SymmetricTensor23dMember_DownCast(t)
Handle_StepFEA_SymmetricTensor23dMember_DownCast = _StepFEA.Handle_StepFEA_SymmetricTensor23dMember_DownCast

def Handle_StepFEA_SymmetricTensor23dMember_IsNull(t: 'opencascade::handle< StepFEA_SymmetricTensor23dMember > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_SymmetricTensor23dMember_IsNull(t)
Handle_StepFEA_SymmetricTensor23dMember_IsNull = _StepFEA.Handle_StepFEA_SymmetricTensor23dMember_IsNull

def Handle_StepFEA_SymmetricTensor43dMember_Create() -> "opencascade::handle< StepFEA_SymmetricTensor43dMember >":
    return _StepFEA.Handle_StepFEA_SymmetricTensor43dMember_Create()
Handle_StepFEA_SymmetricTensor43dMember_Create = _StepFEA.Handle_StepFEA_SymmetricTensor43dMember_Create

def Handle_StepFEA_SymmetricTensor43dMember_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_SymmetricTensor43dMember >":
    return _StepFEA.Handle_StepFEA_SymmetricTensor43dMember_DownCast(t)
Handle_StepFEA_SymmetricTensor43dMember_DownCast = _StepFEA.Handle_StepFEA_SymmetricTensor43dMember_DownCast

def Handle_StepFEA_SymmetricTensor43dMember_IsNull(t: 'opencascade::handle< StepFEA_SymmetricTensor43dMember > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_SymmetricTensor43dMember_IsNull(t)
Handle_StepFEA_SymmetricTensor43dMember_IsNull = _StepFEA.Handle_StepFEA_SymmetricTensor43dMember_IsNull

def Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_Create() -> "opencascade::handle< StepFEA_AlignedCurve3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_Create()
Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_Create = _StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_Create

def Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_AlignedCurve3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_DownCast(t)
Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_DownCast = _StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_DownCast

def Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_IsNull(t: 'opencascade::handle< StepFEA_AlignedCurve3dElementCoordinateSystem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_IsNull(t)
Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_IsNull = _StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_IsNull

def Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_Create() -> "opencascade::handle< StepFEA_AlignedSurface3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_Create()
Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_Create = _StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_Create

def Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_AlignedSurface3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_DownCast(t)
Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_DownCast = _StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_DownCast

def Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_IsNull(t: 'opencascade::handle< StepFEA_AlignedSurface3dElementCoordinateSystem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_IsNull(t)
Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_IsNull = _StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_IsNull

def Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_Create() -> "opencascade::handle< StepFEA_ArbitraryVolume3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_Create()
Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_Create = _StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_Create

def Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_ArbitraryVolume3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_DownCast(t)
Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_DownCast = _StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_DownCast

def Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_IsNull(t: 'opencascade::handle< StepFEA_ArbitraryVolume3dElementCoordinateSystem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_IsNull(t)
Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_IsNull = _StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_IsNull

def Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_Create() -> "opencascade::handle< StepFEA_ConstantSurface3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_Create()
Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_Create = _StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_Create

def Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_ConstantSurface3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_DownCast(t)
Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_DownCast = _StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_DownCast

def Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_IsNull(t: 'opencascade::handle< StepFEA_ConstantSurface3dElementCoordinateSystem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_IsNull(t)
Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_IsNull = _StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_IsNull

def Handle_StepFEA_Curve3dElementRepresentation_Create() -> "opencascade::handle< StepFEA_Curve3dElementRepresentation >":
    return _StepFEA.Handle_StepFEA_Curve3dElementRepresentation_Create()
Handle_StepFEA_Curve3dElementRepresentation_Create = _StepFEA.Handle_StepFEA_Curve3dElementRepresentation_Create

def Handle_StepFEA_Curve3dElementRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_Curve3dElementRepresentation >":
    return _StepFEA.Handle_StepFEA_Curve3dElementRepresentation_DownCast(t)
Handle_StepFEA_Curve3dElementRepresentation_DownCast = _StepFEA.Handle_StepFEA_Curve3dElementRepresentation_DownCast

def Handle_StepFEA_Curve3dElementRepresentation_IsNull(t: 'opencascade::handle< StepFEA_Curve3dElementRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_Curve3dElementRepresentation_IsNull(t)
Handle_StepFEA_Curve3dElementRepresentation_IsNull = _StepFEA.Handle_StepFEA_Curve3dElementRepresentation_IsNull

def Handle_StepFEA_CurveElementIntervalConstant_Create() -> "opencascade::handle< StepFEA_CurveElementIntervalConstant >":
    return _StepFEA.Handle_StepFEA_CurveElementIntervalConstant_Create()
Handle_StepFEA_CurveElementIntervalConstant_Create = _StepFEA.Handle_StepFEA_CurveElementIntervalConstant_Create

def Handle_StepFEA_CurveElementIntervalConstant_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_CurveElementIntervalConstant >":
    return _StepFEA.Handle_StepFEA_CurveElementIntervalConstant_DownCast(t)
Handle_StepFEA_CurveElementIntervalConstant_DownCast = _StepFEA.Handle_StepFEA_CurveElementIntervalConstant_DownCast

def Handle_StepFEA_CurveElementIntervalConstant_IsNull(t: 'opencascade::handle< StepFEA_CurveElementIntervalConstant > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_CurveElementIntervalConstant_IsNull(t)
Handle_StepFEA_CurveElementIntervalConstant_IsNull = _StepFEA.Handle_StepFEA_CurveElementIntervalConstant_IsNull

def Handle_StepFEA_CurveElementIntervalLinearlyVarying_Create() -> "opencascade::handle< StepFEA_CurveElementIntervalLinearlyVarying >":
    return _StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying_Create()
Handle_StepFEA_CurveElementIntervalLinearlyVarying_Create = _StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying_Create

def Handle_StepFEA_CurveElementIntervalLinearlyVarying_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_CurveElementIntervalLinearlyVarying >":
    return _StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying_DownCast(t)
Handle_StepFEA_CurveElementIntervalLinearlyVarying_DownCast = _StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying_DownCast

def Handle_StepFEA_CurveElementIntervalLinearlyVarying_IsNull(t: 'opencascade::handle< StepFEA_CurveElementIntervalLinearlyVarying > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying_IsNull(t)
Handle_StepFEA_CurveElementIntervalLinearlyVarying_IsNull = _StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying_IsNull

def Handle_StepFEA_DummyNode_Create() -> "opencascade::handle< StepFEA_DummyNode >":
    return _StepFEA.Handle_StepFEA_DummyNode_Create()
Handle_StepFEA_DummyNode_Create = _StepFEA.Handle_StepFEA_DummyNode_Create

def Handle_StepFEA_DummyNode_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_DummyNode >":
    return _StepFEA.Handle_StepFEA_DummyNode_DownCast(t)
Handle_StepFEA_DummyNode_DownCast = _StepFEA.Handle_StepFEA_DummyNode_DownCast

def Handle_StepFEA_DummyNode_IsNull(t: 'opencascade::handle< StepFEA_DummyNode > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_DummyNode_IsNull(t)
Handle_StepFEA_DummyNode_IsNull = _StepFEA.Handle_StepFEA_DummyNode_IsNull

def Handle_StepFEA_ElementGroup_Create() -> "opencascade::handle< StepFEA_ElementGroup >":
    return _StepFEA.Handle_StepFEA_ElementGroup_Create()
Handle_StepFEA_ElementGroup_Create = _StepFEA.Handle_StepFEA_ElementGroup_Create

def Handle_StepFEA_ElementGroup_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_ElementGroup >":
    return _StepFEA.Handle_StepFEA_ElementGroup_DownCast(t)
Handle_StepFEA_ElementGroup_DownCast = _StepFEA.Handle_StepFEA_ElementGroup_DownCast

def Handle_StepFEA_ElementGroup_IsNull(t: 'opencascade::handle< StepFEA_ElementGroup > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_ElementGroup_IsNull(t)
Handle_StepFEA_ElementGroup_IsNull = _StepFEA.Handle_StepFEA_ElementGroup_IsNull

def Handle_StepFEA_FeaAreaDensity_Create() -> "opencascade::handle< StepFEA_FeaAreaDensity >":
    return _StepFEA.Handle_StepFEA_FeaAreaDensity_Create()
Handle_StepFEA_FeaAreaDensity_Create = _StepFEA.Handle_StepFEA_FeaAreaDensity_Create

def Handle_StepFEA_FeaAreaDensity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaAreaDensity >":
    return _StepFEA.Handle_StepFEA_FeaAreaDensity_DownCast(t)
Handle_StepFEA_FeaAreaDensity_DownCast = _StepFEA.Handle_StepFEA_FeaAreaDensity_DownCast

def Handle_StepFEA_FeaAreaDensity_IsNull(t: 'opencascade::handle< StepFEA_FeaAreaDensity > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaAreaDensity_IsNull(t)
Handle_StepFEA_FeaAreaDensity_IsNull = _StepFEA.Handle_StepFEA_FeaAreaDensity_IsNull

def Handle_StepFEA_FeaLinearElasticity_Create() -> "opencascade::handle< StepFEA_FeaLinearElasticity >":
    return _StepFEA.Handle_StepFEA_FeaLinearElasticity_Create()
Handle_StepFEA_FeaLinearElasticity_Create = _StepFEA.Handle_StepFEA_FeaLinearElasticity_Create

def Handle_StepFEA_FeaLinearElasticity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaLinearElasticity >":
    return _StepFEA.Handle_StepFEA_FeaLinearElasticity_DownCast(t)
Handle_StepFEA_FeaLinearElasticity_DownCast = _StepFEA.Handle_StepFEA_FeaLinearElasticity_DownCast

def Handle_StepFEA_FeaLinearElasticity_IsNull(t: 'opencascade::handle< StepFEA_FeaLinearElasticity > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaLinearElasticity_IsNull(t)
Handle_StepFEA_FeaLinearElasticity_IsNull = _StepFEA.Handle_StepFEA_FeaLinearElasticity_IsNull

def Handle_StepFEA_FeaMassDensity_Create() -> "opencascade::handle< StepFEA_FeaMassDensity >":
    return _StepFEA.Handle_StepFEA_FeaMassDensity_Create()
Handle_StepFEA_FeaMassDensity_Create = _StepFEA.Handle_StepFEA_FeaMassDensity_Create

def Handle_StepFEA_FeaMassDensity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaMassDensity >":
    return _StepFEA.Handle_StepFEA_FeaMassDensity_DownCast(t)
Handle_StepFEA_FeaMassDensity_DownCast = _StepFEA.Handle_StepFEA_FeaMassDensity_DownCast

def Handle_StepFEA_FeaMassDensity_IsNull(t: 'opencascade::handle< StepFEA_FeaMassDensity > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaMassDensity_IsNull(t)
Handle_StepFEA_FeaMassDensity_IsNull = _StepFEA.Handle_StepFEA_FeaMassDensity_IsNull

def Handle_StepFEA_FeaModel3d_Create() -> "opencascade::handle< StepFEA_FeaModel3d >":
    return _StepFEA.Handle_StepFEA_FeaModel3d_Create()
Handle_StepFEA_FeaModel3d_Create = _StepFEA.Handle_StepFEA_FeaModel3d_Create

def Handle_StepFEA_FeaModel3d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaModel3d >":
    return _StepFEA.Handle_StepFEA_FeaModel3d_DownCast(t)
Handle_StepFEA_FeaModel3d_DownCast = _StepFEA.Handle_StepFEA_FeaModel3d_DownCast

def Handle_StepFEA_FeaModel3d_IsNull(t: 'opencascade::handle< StepFEA_FeaModel3d > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaModel3d_IsNull(t)
Handle_StepFEA_FeaModel3d_IsNull = _StepFEA.Handle_StepFEA_FeaModel3d_IsNull

def Handle_StepFEA_FeaMoistureAbsorption_Create() -> "opencascade::handle< StepFEA_FeaMoistureAbsorption >":
    return _StepFEA.Handle_StepFEA_FeaMoistureAbsorption_Create()
Handle_StepFEA_FeaMoistureAbsorption_Create = _StepFEA.Handle_StepFEA_FeaMoistureAbsorption_Create

def Handle_StepFEA_FeaMoistureAbsorption_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaMoistureAbsorption >":
    return _StepFEA.Handle_StepFEA_FeaMoistureAbsorption_DownCast(t)
Handle_StepFEA_FeaMoistureAbsorption_DownCast = _StepFEA.Handle_StepFEA_FeaMoistureAbsorption_DownCast

def Handle_StepFEA_FeaMoistureAbsorption_IsNull(t: 'opencascade::handle< StepFEA_FeaMoistureAbsorption > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaMoistureAbsorption_IsNull(t)
Handle_StepFEA_FeaMoistureAbsorption_IsNull = _StepFEA.Handle_StepFEA_FeaMoistureAbsorption_IsNull

def Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_Create() -> "opencascade::handle< StepFEA_FeaSecantCoefficientOfLinearThermalExpansion >":
    return _StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_Create()
Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_Create = _StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_Create

def Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaSecantCoefficientOfLinearThermalExpansion >":
    return _StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_DownCast(t)
Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_DownCast = _StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_DownCast

def Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_IsNull(t: 'opencascade::handle< StepFEA_FeaSecantCoefficientOfLinearThermalExpansion > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_IsNull(t)
Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_IsNull = _StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_IsNull

def Handle_StepFEA_FeaShellBendingStiffness_Create() -> "opencascade::handle< StepFEA_FeaShellBendingStiffness >":
    return _StepFEA.Handle_StepFEA_FeaShellBendingStiffness_Create()
Handle_StepFEA_FeaShellBendingStiffness_Create = _StepFEA.Handle_StepFEA_FeaShellBendingStiffness_Create

def Handle_StepFEA_FeaShellBendingStiffness_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaShellBendingStiffness >":
    return _StepFEA.Handle_StepFEA_FeaShellBendingStiffness_DownCast(t)
Handle_StepFEA_FeaShellBendingStiffness_DownCast = _StepFEA.Handle_StepFEA_FeaShellBendingStiffness_DownCast

def Handle_StepFEA_FeaShellBendingStiffness_IsNull(t: 'opencascade::handle< StepFEA_FeaShellBendingStiffness > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaShellBendingStiffness_IsNull(t)
Handle_StepFEA_FeaShellBendingStiffness_IsNull = _StepFEA.Handle_StepFEA_FeaShellBendingStiffness_IsNull

def Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_Create() -> "opencascade::handle< StepFEA_FeaShellMembraneBendingCouplingStiffness >":
    return _StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_Create()
Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_Create = _StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_Create

def Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaShellMembraneBendingCouplingStiffness >":
    return _StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_DownCast(t)
Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_DownCast = _StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_DownCast

def Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_IsNull(t: 'opencascade::handle< StepFEA_FeaShellMembraneBendingCouplingStiffness > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_IsNull(t)
Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_IsNull = _StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_IsNull

def Handle_StepFEA_FeaShellMembraneStiffness_Create() -> "opencascade::handle< StepFEA_FeaShellMembraneStiffness >":
    return _StepFEA.Handle_StepFEA_FeaShellMembraneStiffness_Create()
Handle_StepFEA_FeaShellMembraneStiffness_Create = _StepFEA.Handle_StepFEA_FeaShellMembraneStiffness_Create

def Handle_StepFEA_FeaShellMembraneStiffness_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaShellMembraneStiffness >":
    return _StepFEA.Handle_StepFEA_FeaShellMembraneStiffness_DownCast(t)
Handle_StepFEA_FeaShellMembraneStiffness_DownCast = _StepFEA.Handle_StepFEA_FeaShellMembraneStiffness_DownCast

def Handle_StepFEA_FeaShellMembraneStiffness_IsNull(t: 'opencascade::handle< StepFEA_FeaShellMembraneStiffness > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaShellMembraneStiffness_IsNull(t)
Handle_StepFEA_FeaShellMembraneStiffness_IsNull = _StepFEA.Handle_StepFEA_FeaShellMembraneStiffness_IsNull

def Handle_StepFEA_FeaShellShearStiffness_Create() -> "opencascade::handle< StepFEA_FeaShellShearStiffness >":
    return _StepFEA.Handle_StepFEA_FeaShellShearStiffness_Create()
Handle_StepFEA_FeaShellShearStiffness_Create = _StepFEA.Handle_StepFEA_FeaShellShearStiffness_Create

def Handle_StepFEA_FeaShellShearStiffness_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaShellShearStiffness >":
    return _StepFEA.Handle_StepFEA_FeaShellShearStiffness_DownCast(t)
Handle_StepFEA_FeaShellShearStiffness_DownCast = _StepFEA.Handle_StepFEA_FeaShellShearStiffness_DownCast

def Handle_StepFEA_FeaShellShearStiffness_IsNull(t: 'opencascade::handle< StepFEA_FeaShellShearStiffness > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaShellShearStiffness_IsNull(t)
Handle_StepFEA_FeaShellShearStiffness_IsNull = _StepFEA.Handle_StepFEA_FeaShellShearStiffness_IsNull

def Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_Create() -> "opencascade::handle< StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion >":
    return _StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_Create()
Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_Create = _StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_Create

def Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion >":
    return _StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_DownCast(t)
Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_DownCast = _StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_DownCast

def Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_IsNull(t: 'opencascade::handle< StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_IsNull(t)
Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_IsNull = _StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_IsNull

def Handle_StepFEA_GeometricNode_Create() -> "opencascade::handle< StepFEA_GeometricNode >":
    return _StepFEA.Handle_StepFEA_GeometricNode_Create()
Handle_StepFEA_GeometricNode_Create = _StepFEA.Handle_StepFEA_GeometricNode_Create

def Handle_StepFEA_GeometricNode_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_GeometricNode >":
    return _StepFEA.Handle_StepFEA_GeometricNode_DownCast(t)
Handle_StepFEA_GeometricNode_DownCast = _StepFEA.Handle_StepFEA_GeometricNode_DownCast

def Handle_StepFEA_GeometricNode_IsNull(t: 'opencascade::handle< StepFEA_GeometricNode > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_GeometricNode_IsNull(t)
Handle_StepFEA_GeometricNode_IsNull = _StepFEA.Handle_StepFEA_GeometricNode_IsNull

def Handle_StepFEA_Node_Create() -> "opencascade::handle< StepFEA_Node >":
    return _StepFEA.Handle_StepFEA_Node_Create()
Handle_StepFEA_Node_Create = _StepFEA.Handle_StepFEA_Node_Create

def Handle_StepFEA_Node_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_Node >":
    return _StepFEA.Handle_StepFEA_Node_DownCast(t)
Handle_StepFEA_Node_DownCast = _StepFEA.Handle_StepFEA_Node_DownCast

def Handle_StepFEA_Node_IsNull(t: 'opencascade::handle< StepFEA_Node > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_Node_IsNull(t)
Handle_StepFEA_Node_IsNull = _StepFEA.Handle_StepFEA_Node_IsNull

def Handle_StepFEA_NodeGroup_Create() -> "opencascade::handle< StepFEA_NodeGroup >":
    return _StepFEA.Handle_StepFEA_NodeGroup_Create()
Handle_StepFEA_NodeGroup_Create = _StepFEA.Handle_StepFEA_NodeGroup_Create

def Handle_StepFEA_NodeGroup_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_NodeGroup >":
    return _StepFEA.Handle_StepFEA_NodeGroup_DownCast(t)
Handle_StepFEA_NodeGroup_DownCast = _StepFEA.Handle_StepFEA_NodeGroup_DownCast

def Handle_StepFEA_NodeGroup_IsNull(t: 'opencascade::handle< StepFEA_NodeGroup > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_NodeGroup_IsNull(t)
Handle_StepFEA_NodeGroup_IsNull = _StepFEA.Handle_StepFEA_NodeGroup_IsNull

def Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_Create() -> "opencascade::handle< StepFEA_ParametricCurve3dElementCoordinateDirection >":
    return _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_Create()
Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_Create = _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_Create

def Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_ParametricCurve3dElementCoordinateDirection >":
    return _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_DownCast(t)
Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_DownCast = _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_DownCast

def Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_IsNull(t: 'opencascade::handle< StepFEA_ParametricCurve3dElementCoordinateDirection > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_IsNull(t)
Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_IsNull = _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_IsNull

def Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_Create() -> "opencascade::handle< StepFEA_ParametricCurve3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_Create()
Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_Create = _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_Create

def Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_ParametricCurve3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_DownCast(t)
Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_DownCast = _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_DownCast

def Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_IsNull(t: 'opencascade::handle< StepFEA_ParametricCurve3dElementCoordinateSystem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_IsNull(t)
Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_IsNull = _StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_IsNull

def Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_Create() -> "opencascade::handle< StepFEA_ParametricSurface3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_Create()
Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_Create = _StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_Create

def Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_ParametricSurface3dElementCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_DownCast(t)
Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_DownCast = _StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_DownCast

def Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_IsNull(t: 'opencascade::handle< StepFEA_ParametricSurface3dElementCoordinateSystem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_IsNull(t)
Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_IsNull = _StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_IsNull

def Handle_StepFEA_Surface3dElementRepresentation_Create() -> "opencascade::handle< StepFEA_Surface3dElementRepresentation >":
    return _StepFEA.Handle_StepFEA_Surface3dElementRepresentation_Create()
Handle_StepFEA_Surface3dElementRepresentation_Create = _StepFEA.Handle_StepFEA_Surface3dElementRepresentation_Create

def Handle_StepFEA_Surface3dElementRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_Surface3dElementRepresentation >":
    return _StepFEA.Handle_StepFEA_Surface3dElementRepresentation_DownCast(t)
Handle_StepFEA_Surface3dElementRepresentation_DownCast = _StepFEA.Handle_StepFEA_Surface3dElementRepresentation_DownCast

def Handle_StepFEA_Surface3dElementRepresentation_IsNull(t: 'opencascade::handle< StepFEA_Surface3dElementRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_Surface3dElementRepresentation_IsNull(t)
Handle_StepFEA_Surface3dElementRepresentation_IsNull = _StepFEA.Handle_StepFEA_Surface3dElementRepresentation_IsNull

def Handle_StepFEA_Volume3dElementRepresentation_Create() -> "opencascade::handle< StepFEA_Volume3dElementRepresentation >":
    return _StepFEA.Handle_StepFEA_Volume3dElementRepresentation_Create()
Handle_StepFEA_Volume3dElementRepresentation_Create = _StepFEA.Handle_StepFEA_Volume3dElementRepresentation_Create

def Handle_StepFEA_Volume3dElementRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_Volume3dElementRepresentation >":
    return _StepFEA.Handle_StepFEA_Volume3dElementRepresentation_DownCast(t)
Handle_StepFEA_Volume3dElementRepresentation_DownCast = _StepFEA.Handle_StepFEA_Volume3dElementRepresentation_DownCast

def Handle_StepFEA_Volume3dElementRepresentation_IsNull(t: 'opencascade::handle< StepFEA_Volume3dElementRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_Volume3dElementRepresentation_IsNull(t)
Handle_StepFEA_Volume3dElementRepresentation_IsNull = _StepFEA.Handle_StepFEA_Volume3dElementRepresentation_IsNull

def Handle_StepFEA_NodeWithSolutionCoordinateSystem_Create() -> "opencascade::handle< StepFEA_NodeWithSolutionCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem_Create()
Handle_StepFEA_NodeWithSolutionCoordinateSystem_Create = _StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem_Create

def Handle_StepFEA_NodeWithSolutionCoordinateSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_NodeWithSolutionCoordinateSystem >":
    return _StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem_DownCast(t)
Handle_StepFEA_NodeWithSolutionCoordinateSystem_DownCast = _StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem_DownCast

def Handle_StepFEA_NodeWithSolutionCoordinateSystem_IsNull(t: 'opencascade::handle< StepFEA_NodeWithSolutionCoordinateSystem > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem_IsNull(t)
Handle_StepFEA_NodeWithSolutionCoordinateSystem_IsNull = _StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem_IsNull

def Handle_StepFEA_NodeWithVector_Create() -> "opencascade::handle< StepFEA_NodeWithVector >":
    return _StepFEA.Handle_StepFEA_NodeWithVector_Create()
Handle_StepFEA_NodeWithVector_Create = _StepFEA.Handle_StepFEA_NodeWithVector_Create

def Handle_StepFEA_NodeWithVector_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_NodeWithVector >":
    return _StepFEA.Handle_StepFEA_NodeWithVector_DownCast(t)
Handle_StepFEA_NodeWithVector_DownCast = _StepFEA.Handle_StepFEA_NodeWithVector_DownCast

def Handle_StepFEA_NodeWithVector_IsNull(t: 'opencascade::handle< StepFEA_NodeWithVector > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_NodeWithVector_IsNull(t)
Handle_StepFEA_NodeWithVector_IsNull = _StepFEA.Handle_StepFEA_NodeWithVector_IsNull

def Handle_StepFEA_HArray1OfCurveElementInterval_Create() -> "opencascade::handle< StepFEA_HArray1OfCurveElementInterval >":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementInterval_Create()
Handle_StepFEA_HArray1OfCurveElementInterval_Create = _StepFEA.Handle_StepFEA_HArray1OfCurveElementInterval_Create

def Handle_StepFEA_HArray1OfCurveElementInterval_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HArray1OfCurveElementInterval >":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementInterval_DownCast(t)
Handle_StepFEA_HArray1OfCurveElementInterval_DownCast = _StepFEA.Handle_StepFEA_HArray1OfCurveElementInterval_DownCast

def Handle_StepFEA_HArray1OfCurveElementInterval_IsNull(t: 'opencascade::handle< StepFEA_HArray1OfCurveElementInterval > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementInterval_IsNull(t)
Handle_StepFEA_HArray1OfCurveElementInterval_IsNull = _StepFEA.Handle_StepFEA_HArray1OfCurveElementInterval_IsNull

def Handle_StepFEA_HArray1OfCurveElementEndOffset_Create() -> "opencascade::handle< StepFEA_HArray1OfCurveElementEndOffset >":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndOffset_Create()
Handle_StepFEA_HArray1OfCurveElementEndOffset_Create = _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndOffset_Create

def Handle_StepFEA_HArray1OfCurveElementEndOffset_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HArray1OfCurveElementEndOffset >":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndOffset_DownCast(t)
Handle_StepFEA_HArray1OfCurveElementEndOffset_DownCast = _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndOffset_DownCast

def Handle_StepFEA_HArray1OfCurveElementEndOffset_IsNull(t: 'opencascade::handle< StepFEA_HArray1OfCurveElementEndOffset > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndOffset_IsNull(t)
Handle_StepFEA_HArray1OfCurveElementEndOffset_IsNull = _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndOffset_IsNull

def Handle_StepFEA_HArray1OfElementRepresentation_Create() -> "opencascade::handle< StepFEA_HArray1OfElementRepresentation >":
    return _StepFEA.Handle_StepFEA_HArray1OfElementRepresentation_Create()
Handle_StepFEA_HArray1OfElementRepresentation_Create = _StepFEA.Handle_StepFEA_HArray1OfElementRepresentation_Create

def Handle_StepFEA_HArray1OfElementRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HArray1OfElementRepresentation >":
    return _StepFEA.Handle_StepFEA_HArray1OfElementRepresentation_DownCast(t)
Handle_StepFEA_HArray1OfElementRepresentation_DownCast = _StepFEA.Handle_StepFEA_HArray1OfElementRepresentation_DownCast

def Handle_StepFEA_HArray1OfElementRepresentation_IsNull(t: 'opencascade::handle< StepFEA_HArray1OfElementRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HArray1OfElementRepresentation_IsNull(t)
Handle_StepFEA_HArray1OfElementRepresentation_IsNull = _StepFEA.Handle_StepFEA_HArray1OfElementRepresentation_IsNull

def Handle_StepFEA_HArray1OfCurveElementEndRelease_Create() -> "opencascade::handle< StepFEA_HArray1OfCurveElementEndRelease >":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndRelease_Create()
Handle_StepFEA_HArray1OfCurveElementEndRelease_Create = _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndRelease_Create

def Handle_StepFEA_HArray1OfCurveElementEndRelease_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HArray1OfCurveElementEndRelease >":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndRelease_DownCast(t)
Handle_StepFEA_HArray1OfCurveElementEndRelease_DownCast = _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndRelease_DownCast

def Handle_StepFEA_HArray1OfCurveElementEndRelease_IsNull(t: 'opencascade::handle< StepFEA_HArray1OfCurveElementEndRelease > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndRelease_IsNull(t)
Handle_StepFEA_HArray1OfCurveElementEndRelease_IsNull = _StepFEA.Handle_StepFEA_HArray1OfCurveElementEndRelease_IsNull

def Handle_StepFEA_HArray1OfDegreeOfFreedom_Create() -> "opencascade::handle< StepFEA_HArray1OfDegreeOfFreedom >":
    return _StepFEA.Handle_StepFEA_HArray1OfDegreeOfFreedom_Create()
Handle_StepFEA_HArray1OfDegreeOfFreedom_Create = _StepFEA.Handle_StepFEA_HArray1OfDegreeOfFreedom_Create

def Handle_StepFEA_HArray1OfDegreeOfFreedom_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HArray1OfDegreeOfFreedom >":
    return _StepFEA.Handle_StepFEA_HArray1OfDegreeOfFreedom_DownCast(t)
Handle_StepFEA_HArray1OfDegreeOfFreedom_DownCast = _StepFEA.Handle_StepFEA_HArray1OfDegreeOfFreedom_DownCast

def Handle_StepFEA_HArray1OfDegreeOfFreedom_IsNull(t: 'opencascade::handle< StepFEA_HArray1OfDegreeOfFreedom > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HArray1OfDegreeOfFreedom_IsNull(t)
Handle_StepFEA_HArray1OfDegreeOfFreedom_IsNull = _StepFEA.Handle_StepFEA_HArray1OfDegreeOfFreedom_IsNull

def Handle_StepFEA_HArray1OfNodeRepresentation_Create() -> "opencascade::handle< StepFEA_HArray1OfNodeRepresentation >":
    return _StepFEA.Handle_StepFEA_HArray1OfNodeRepresentation_Create()
Handle_StepFEA_HArray1OfNodeRepresentation_Create = _StepFEA.Handle_StepFEA_HArray1OfNodeRepresentation_Create

def Handle_StepFEA_HArray1OfNodeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HArray1OfNodeRepresentation >":
    return _StepFEA.Handle_StepFEA_HArray1OfNodeRepresentation_DownCast(t)
Handle_StepFEA_HArray1OfNodeRepresentation_DownCast = _StepFEA.Handle_StepFEA_HArray1OfNodeRepresentation_DownCast

def Handle_StepFEA_HArray1OfNodeRepresentation_IsNull(t: 'opencascade::handle< StepFEA_HArray1OfNodeRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HArray1OfNodeRepresentation_IsNull(t)
Handle_StepFEA_HArray1OfNodeRepresentation_IsNull = _StepFEA.Handle_StepFEA_HArray1OfNodeRepresentation_IsNull

def Handle_StepFEA_HSequenceOfElementRepresentation_Create() -> "opencascade::handle< StepFEA_HSequenceOfElementRepresentation >":
    return _StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation_Create()
Handle_StepFEA_HSequenceOfElementRepresentation_Create = _StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation_Create

def Handle_StepFEA_HSequenceOfElementRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HSequenceOfElementRepresentation >":
    return _StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation_DownCast(t)
Handle_StepFEA_HSequenceOfElementRepresentation_DownCast = _StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation_DownCast

def Handle_StepFEA_HSequenceOfElementRepresentation_IsNull(t: 'opencascade::handle< StepFEA_HSequenceOfElementRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation_IsNull(t)
Handle_StepFEA_HSequenceOfElementRepresentation_IsNull = _StepFEA.Handle_StepFEA_HSequenceOfElementRepresentation_IsNull

def Handle_StepFEA_HSequenceOfElementGeometricRelationship_Create() -> "opencascade::handle< StepFEA_HSequenceOfElementGeometricRelationship >":
    return _StepFEA.Handle_StepFEA_HSequenceOfElementGeometricRelationship_Create()
Handle_StepFEA_HSequenceOfElementGeometricRelationship_Create = _StepFEA.Handle_StepFEA_HSequenceOfElementGeometricRelationship_Create

def Handle_StepFEA_HSequenceOfElementGeometricRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HSequenceOfElementGeometricRelationship >":
    return _StepFEA.Handle_StepFEA_HSequenceOfElementGeometricRelationship_DownCast(t)
Handle_StepFEA_HSequenceOfElementGeometricRelationship_DownCast = _StepFEA.Handle_StepFEA_HSequenceOfElementGeometricRelationship_DownCast

def Handle_StepFEA_HSequenceOfElementGeometricRelationship_IsNull(t: 'opencascade::handle< StepFEA_HSequenceOfElementGeometricRelationship > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HSequenceOfElementGeometricRelationship_IsNull(t)
Handle_StepFEA_HSequenceOfElementGeometricRelationship_IsNull = _StepFEA.Handle_StepFEA_HSequenceOfElementGeometricRelationship_IsNull

def Handle_StepFEA_HSequenceOfNodeRepresentation_Create() -> "opencascade::handle< StepFEA_HSequenceOfNodeRepresentation >":
    return _StepFEA.Handle_StepFEA_HSequenceOfNodeRepresentation_Create()
Handle_StepFEA_HSequenceOfNodeRepresentation_Create = _StepFEA.Handle_StepFEA_HSequenceOfNodeRepresentation_Create

def Handle_StepFEA_HSequenceOfNodeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HSequenceOfNodeRepresentation >":
    return _StepFEA.Handle_StepFEA_HSequenceOfNodeRepresentation_DownCast(t)
Handle_StepFEA_HSequenceOfNodeRepresentation_DownCast = _StepFEA.Handle_StepFEA_HSequenceOfNodeRepresentation_DownCast

def Handle_StepFEA_HSequenceOfNodeRepresentation_IsNull(t: 'opencascade::handle< StepFEA_HSequenceOfNodeRepresentation > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HSequenceOfNodeRepresentation_IsNull(t)
Handle_StepFEA_HSequenceOfNodeRepresentation_IsNull = _StepFEA.Handle_StepFEA_HSequenceOfNodeRepresentation_IsNull

def Handle_StepFEA_HSequenceOfCurve3dElementProperty_Create() -> "opencascade::handle< StepFEA_HSequenceOfCurve3dElementProperty >":
    return _StepFEA.Handle_StepFEA_HSequenceOfCurve3dElementProperty_Create()
Handle_StepFEA_HSequenceOfCurve3dElementProperty_Create = _StepFEA.Handle_StepFEA_HSequenceOfCurve3dElementProperty_Create

def Handle_StepFEA_HSequenceOfCurve3dElementProperty_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepFEA_HSequenceOfCurve3dElementProperty >":
    return _StepFEA.Handle_StepFEA_HSequenceOfCurve3dElementProperty_DownCast(t)
Handle_StepFEA_HSequenceOfCurve3dElementProperty_DownCast = _StepFEA.Handle_StepFEA_HSequenceOfCurve3dElementProperty_DownCast

def Handle_StepFEA_HSequenceOfCurve3dElementProperty_IsNull(t: 'opencascade::handle< StepFEA_HSequenceOfCurve3dElementProperty > const &') -> "bool":
    return _StepFEA.Handle_StepFEA_HSequenceOfCurve3dElementProperty_IsNull(t)
Handle_StepFEA_HSequenceOfCurve3dElementProperty_IsNull = _StepFEA.Handle_StepFEA_HSequenceOfCurve3dElementProperty_IsNull
class StepFEA_Array1OfCurveElementEndOffset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Array1OfCurveElementEndOffset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Array1OfCurveElementEndOffset, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndOffset > >::iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndOffset > >::iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndOffset > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndOffset > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_Array1OfCurveElementEndOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepFEA_CurveElementEndOffset > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_IsAllocated(self)

    def Assign(self, theOther: 'StepFEA_Array1OfCurveElementEndOffset') -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndOffset > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Assign(self, theOther)

    def Move(self, theOther: 'StepFEA_Array1OfCurveElementEndOffset') -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndOffset > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndOffset > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Set(self, *args)

    def First(self) -> "opencascade::handle< StepFEA_CurveElementEndOffset > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_CurveElementEndOffset > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_CurveElementEndOffset > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_CurveElementEndOffset > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_CurveElementEndOffset > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_CurveElementEndOffset > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_CurveElementEndOffset > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_CurveElementEndOffset > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementEndOffset_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepFEA.delete_StepFEA_Array1OfCurveElementEndOffset
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepFEA_Array1OfCurveElementEndOffset_swigregister = _StepFEA.StepFEA_Array1OfCurveElementEndOffset_swigregister
StepFEA_Array1OfCurveElementEndOffset_swigregister(StepFEA_Array1OfCurveElementEndOffset)

class StepFEA_Array1OfCurveElementEndRelease(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Array1OfCurveElementEndRelease, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Array1OfCurveElementEndRelease, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndRelease > >::iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndRelease > >::iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndRelease > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndRelease > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_Array1OfCurveElementEndRelease(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepFEA_CurveElementEndRelease > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_IsAllocated(self)

    def Assign(self, theOther: 'StepFEA_Array1OfCurveElementEndRelease') -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndRelease > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Assign(self, theOther)

    def Move(self, theOther: 'StepFEA_Array1OfCurveElementEndRelease') -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndRelease > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementEndRelease > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Set(self, *args)

    def First(self) -> "opencascade::handle< StepFEA_CurveElementEndRelease > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_CurveElementEndRelease > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_CurveElementEndRelease > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_CurveElementEndRelease > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_CurveElementEndRelease > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_CurveElementEndRelease > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_CurveElementEndRelease > &":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_CurveElementEndRelease > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementEndRelease_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepFEA.delete_StepFEA_Array1OfCurveElementEndRelease
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepFEA_Array1OfCurveElementEndRelease_swigregister = _StepFEA.StepFEA_Array1OfCurveElementEndRelease_swigregister
StepFEA_Array1OfCurveElementEndRelease_swigregister(StepFEA_Array1OfCurveElementEndRelease)

class StepFEA_Array1OfCurveElementInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Array1OfCurveElementInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Array1OfCurveElementInterval, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementInterval > >::iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementInterval > >::iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementInterval > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementInterval > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_Array1OfCurveElementInterval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepFEA_CurveElementInterval > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_IsAllocated(self)

    def Assign(self, theOther: 'StepFEA_Array1OfCurveElementInterval') -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementInterval > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Assign(self, theOther)

    def Move(self, theOther: 'StepFEA_Array1OfCurveElementInterval') -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementInterval > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepFEA_CurveElementInterval > > &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Set(self, *args)

    def First(self) -> "opencascade::handle< StepFEA_CurveElementInterval > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_CurveElementInterval > &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_CurveElementInterval > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_CurveElementInterval > &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_CurveElementInterval > const &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_CurveElementInterval > &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_CurveElementInterval > &":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_CurveElementInterval > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepFEA.StepFEA_Array1OfCurveElementInterval_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepFEA.delete_StepFEA_Array1OfCurveElementInterval
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepFEA_Array1OfCurveElementInterval_swigregister = _StepFEA.StepFEA_Array1OfCurveElementInterval_swigregister
StepFEA_Array1OfCurveElementInterval_swigregister(StepFEA_Array1OfCurveElementInterval)

class StepFEA_Array1OfDegreeOfFreedom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Array1OfDegreeOfFreedom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Array1OfDegreeOfFreedom, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepFEA_DegreeOfFreedom >::iterator":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_begin(self)

    def end(self) -> "NCollection_Array1< StepFEA_DegreeOfFreedom >::iterator":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_end(self)

    def cbegin(self) -> "NCollection_Array1< StepFEA_DegreeOfFreedom >::const_iterator":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepFEA_DegreeOfFreedom >::const_iterator":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_Array1OfDegreeOfFreedom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepFEA_DegreeOfFreedom') -> "void":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_IsAllocated(self)

    def Assign(self, theOther: 'StepFEA_Array1OfDegreeOfFreedom') -> "NCollection_Array1< StepFEA_DegreeOfFreedom > &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Assign(self, theOther)

    def Move(self, theOther: 'StepFEA_Array1OfDegreeOfFreedom') -> "NCollection_Array1< StepFEA_DegreeOfFreedom > &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepFEA_DegreeOfFreedom > &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Set(self, *args)

    def First(self) -> "StepFEA_DegreeOfFreedom const &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_First(self)

    def ChangeFirst(self) -> "StepFEA_DegreeOfFreedom &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_ChangeFirst(self)

    def Last(self) -> "StepFEA_DegreeOfFreedom const &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Last(self)

    def ChangeLast(self) -> "StepFEA_DegreeOfFreedom &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepFEA_DegreeOfFreedom const &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepFEA_DegreeOfFreedom &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepFEA_DegreeOfFreedom &":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepFEA_DegreeOfFreedom') -> "void":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepFEA.StepFEA_Array1OfDegreeOfFreedom_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepFEA.delete_StepFEA_Array1OfDegreeOfFreedom
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepFEA_Array1OfDegreeOfFreedom_swigregister = _StepFEA.StepFEA_Array1OfDegreeOfFreedom_swigregister
StepFEA_Array1OfDegreeOfFreedom_swigregister(StepFEA_Array1OfDegreeOfFreedom)

class StepFEA_Array1OfElementRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Array1OfElementRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Array1OfElementRepresentation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_ElementRepresentation > >::iterator":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepFEA_ElementRepresentation > >::iterator":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_ElementRepresentation > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepFEA_ElementRepresentation > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_Array1OfElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepFEA_ElementRepresentation > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_IsAllocated(self)

    def Assign(self, theOther: 'StepFEA_Array1OfElementRepresentation') -> "NCollection_Array1< opencascade::handle< StepFEA_ElementRepresentation > > &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Assign(self, theOther)

    def Move(self, theOther: 'StepFEA_Array1OfElementRepresentation') -> "NCollection_Array1< opencascade::handle< StepFEA_ElementRepresentation > > &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepFEA_ElementRepresentation > > &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Set(self, *args)

    def First(self) -> "opencascade::handle< StepFEA_ElementRepresentation > const &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_ElementRepresentation > &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_ElementRepresentation > const &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_ElementRepresentation > &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_ElementRepresentation > const &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_ElementRepresentation > &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_ElementRepresentation > &":
        return _StepFEA.StepFEA_Array1OfElementRepresentation___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_ElementRepresentation > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepFEA.StepFEA_Array1OfElementRepresentation_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepFEA.delete_StepFEA_Array1OfElementRepresentation
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepFEA_Array1OfElementRepresentation_swigregister = _StepFEA.StepFEA_Array1OfElementRepresentation_swigregister
StepFEA_Array1OfElementRepresentation_swigregister(StepFEA_Array1OfElementRepresentation)

class StepFEA_Array1OfNodeRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Array1OfNodeRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Array1OfNodeRepresentation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_NodeRepresentation > >::iterator":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepFEA_NodeRepresentation > >::iterator":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepFEA_NodeRepresentation > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepFEA_NodeRepresentation > >::const_iterator":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_Array1OfNodeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepFEA_NodeRepresentation > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_IsAllocated(self)

    def Assign(self, theOther: 'StepFEA_Array1OfNodeRepresentation') -> "NCollection_Array1< opencascade::handle< StepFEA_NodeRepresentation > > &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Assign(self, theOther)

    def Move(self, theOther: 'StepFEA_Array1OfNodeRepresentation') -> "NCollection_Array1< opencascade::handle< StepFEA_NodeRepresentation > > &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepFEA_NodeRepresentation > > &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Set(self, *args)

    def First(self) -> "opencascade::handle< StepFEA_NodeRepresentation > const &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_NodeRepresentation > &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_NodeRepresentation > const &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_NodeRepresentation > &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_NodeRepresentation > const &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_NodeRepresentation > &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_NodeRepresentation > &":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_NodeRepresentation > const &') -> "void":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepFEA.StepFEA_Array1OfNodeRepresentation_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepFEA.delete_StepFEA_Array1OfNodeRepresentation
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepFEA_Array1OfNodeRepresentation_swigregister = _StepFEA.StepFEA_Array1OfNodeRepresentation_swigregister
StepFEA_Array1OfNodeRepresentation_swigregister(StepFEA_Array1OfNodeRepresentation)

class StepFEA_SequenceOfCurve3dElementProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SequenceOfCurve3dElementProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SequenceOfCurve3dElementProperty, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_Curve3dElementProperty > >::iterator":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_Curve3dElementProperty > >::iterator":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_Curve3dElementProperty > >::const_iterator":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_Curve3dElementProperty > >::const_iterator":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_SequenceOfCurve3dElementProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_IsEmpty(self)

    def Reverse(self) -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_StepFEA.StepFEA_SequenceOfCurve3dElementProperty_delNode)
    else:
        delNode = _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Clear(self, theAllocator)

    def Assign(self, theOther: 'StepFEA_SequenceOfCurve3dElementProperty') -> "NCollection_Sequence< opencascade::handle< StepFEA_Curve3dElementProperty > > &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Assign(self, theOther)

    def Set(self, theOther: 'StepFEA_SequenceOfCurve3dElementProperty') -> "NCollection_Sequence< opencascade::handle< StepFEA_Curve3dElementProperty > > &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'StepFEA_SequenceOfCurve3dElementProperty') -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< StepFEA_Curve3dElementProperty > const &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_Curve3dElementProperty > &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_Curve3dElementProperty > const &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_Curve3dElementProperty > &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_Curve3dElementProperty > const &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_Curve3dElementProperty > &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_Curve3dElementProperty > &":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_Curve3dElementProperty > const &') -> "void":
        return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _StepFEA.delete_StepFEA_SequenceOfCurve3dElementProperty
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

StepFEA_SequenceOfCurve3dElementProperty_swigregister = _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_swigregister
StepFEA_SequenceOfCurve3dElementProperty_swigregister(StepFEA_SequenceOfCurve3dElementProperty)

def StepFEA_SequenceOfCurve3dElementProperty_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_delNode(theNode, theAl)
StepFEA_SequenceOfCurve3dElementProperty_delNode = _StepFEA.StepFEA_SequenceOfCurve3dElementProperty_delNode

class StepFEA_SequenceOfElementGeometricRelationship(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SequenceOfElementGeometricRelationship, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SequenceOfElementGeometricRelationship, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementGeometricRelationship > >::iterator":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementGeometricRelationship > >::iterator":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementGeometricRelationship > >::const_iterator":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementGeometricRelationship > >::const_iterator":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_SequenceOfElementGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_IsEmpty(self)

    def Reverse(self) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_StepFEA.StepFEA_SequenceOfElementGeometricRelationship_delNode)
    else:
        delNode = _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Clear(self, theAllocator)

    def Assign(self, theOther: 'StepFEA_SequenceOfElementGeometricRelationship') -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementGeometricRelationship > > &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Assign(self, theOther)

    def Set(self, theOther: 'StepFEA_SequenceOfElementGeometricRelationship') -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementGeometricRelationship > > &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'StepFEA_SequenceOfElementGeometricRelationship') -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< StepFEA_ElementGeometricRelationship > const &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_ElementGeometricRelationship > &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_ElementGeometricRelationship > const &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_ElementGeometricRelationship > &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_ElementGeometricRelationship > const &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_ElementGeometricRelationship > &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_ElementGeometricRelationship > &":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_ElementGeometricRelationship > const &') -> "void":
        return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _StepFEA.delete_StepFEA_SequenceOfElementGeometricRelationship
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

StepFEA_SequenceOfElementGeometricRelationship_swigregister = _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_swigregister
StepFEA_SequenceOfElementGeometricRelationship_swigregister(StepFEA_SequenceOfElementGeometricRelationship)

def StepFEA_SequenceOfElementGeometricRelationship_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_delNode(theNode, theAl)
StepFEA_SequenceOfElementGeometricRelationship_delNode = _StepFEA.StepFEA_SequenceOfElementGeometricRelationship_delNode

class StepFEA_SequenceOfElementRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SequenceOfElementRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SequenceOfElementRepresentation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementRepresentation > >::iterator":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementRepresentation > >::iterator":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementRepresentation > >::const_iterator":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementRepresentation > >::const_iterator":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_SequenceOfElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_IsEmpty(self)

    def Reverse(self) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_StepFEA.StepFEA_SequenceOfElementRepresentation_delNode)
    else:
        delNode = _StepFEA.StepFEA_SequenceOfElementRepresentation_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Clear(self, theAllocator)

    def Assign(self, theOther: 'StepFEA_SequenceOfElementRepresentation') -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementRepresentation > > &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Assign(self, theOther)

    def Set(self, theOther: 'StepFEA_SequenceOfElementRepresentation') -> "NCollection_Sequence< opencascade::handle< StepFEA_ElementRepresentation > > &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'StepFEA_SequenceOfElementRepresentation') -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< StepFEA_ElementRepresentation > const &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_ElementRepresentation > &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_ElementRepresentation > const &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_ElementRepresentation > &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_ElementRepresentation > const &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_ElementRepresentation > &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_ElementRepresentation > &":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_ElementRepresentation > const &') -> "void":
        return _StepFEA.StepFEA_SequenceOfElementRepresentation_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _StepFEA.delete_StepFEA_SequenceOfElementRepresentation
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

StepFEA_SequenceOfElementRepresentation_swigregister = _StepFEA.StepFEA_SequenceOfElementRepresentation_swigregister
StepFEA_SequenceOfElementRepresentation_swigregister(StepFEA_SequenceOfElementRepresentation)

def StepFEA_SequenceOfElementRepresentation_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _StepFEA.StepFEA_SequenceOfElementRepresentation_delNode(theNode, theAl)
StepFEA_SequenceOfElementRepresentation_delNode = _StepFEA.StepFEA_SequenceOfElementRepresentation_delNode

class StepFEA_SequenceOfNodeRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SequenceOfNodeRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SequenceOfNodeRepresentation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_NodeRepresentation > >::iterator":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_NodeRepresentation > >::iterator":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_NodeRepresentation > >::const_iterator":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< StepFEA_NodeRepresentation > >::const_iterator":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_cend(self)

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_SequenceOfNodeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_IsEmpty(self)

    def Reverse(self) -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_StepFEA.StepFEA_SequenceOfNodeRepresentation_delNode)
    else:
        delNode = _StepFEA.StepFEA_SequenceOfNodeRepresentation_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Clear(self, theAllocator)

    def Assign(self, theOther: 'StepFEA_SequenceOfNodeRepresentation') -> "NCollection_Sequence< opencascade::handle< StepFEA_NodeRepresentation > > &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Assign(self, theOther)

    def Set(self, theOther: 'StepFEA_SequenceOfNodeRepresentation') -> "NCollection_Sequence< opencascade::handle< StepFEA_NodeRepresentation > > &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'StepFEA_SequenceOfNodeRepresentation') -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< StepFEA_NodeRepresentation > const &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepFEA_NodeRepresentation > &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepFEA_NodeRepresentation > const &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepFEA_NodeRepresentation > &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_NodeRepresentation > const &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepFEA_NodeRepresentation > &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepFEA_NodeRepresentation > &":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepFEA_NodeRepresentation > const &') -> "void":
        return _StepFEA.StepFEA_SequenceOfNodeRepresentation_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _StepFEA.delete_StepFEA_SequenceOfNodeRepresentation
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

StepFEA_SequenceOfNodeRepresentation_swigregister = _StepFEA.StepFEA_SequenceOfNodeRepresentation_swigregister
StepFEA_SequenceOfNodeRepresentation_swigregister(StepFEA_SequenceOfNodeRepresentation)

def StepFEA_SequenceOfNodeRepresentation_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _StepFEA.StepFEA_SequenceOfNodeRepresentation_delNode(theNode, theAl)
StepFEA_SequenceOfNodeRepresentation_delNode = _StepFEA.StepFEA_SequenceOfNodeRepresentation_delNode

class StepFEA_Curve3dElementProperty(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Curve3dElementProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Curve3dElementProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_Curve3dElementProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_Description(self, *args)


    def EndOffsets(self, *args) -> "opencascade::handle< StepFEA_HArray1OfCurveElementEndOffset >":
        """
        Returns field endoffsets.

        Returns
        -------
        opencascade::handle<StepFEA_HArray1OfCurveElementEndOffset>

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_EndOffsets(self, *args)


    def EndReleases(self, *args) -> "opencascade::handle< StepFEA_HArray1OfCurveElementEndRelease >":
        """
        Returns field endreleases.

        Returns
        -------
        opencascade::handle<StepFEA_HArray1OfCurveElementEndRelease>

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_EndReleases(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aPropertyId: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aIntervalDefinitions: StepFEA_HArray1OfCurveElementInterval
        aEndOffsets: StepFEA_HArray1OfCurveElementEndOffset
        aEndReleases: StepFEA_HArray1OfCurveElementEndRelease

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_Init(self, *args)


    def IntervalDefinitions(self, *args) -> "opencascade::handle< StepFEA_HArray1OfCurveElementInterval >":
        """
        Returns field intervaldefinitions.

        Returns
        -------
        opencascade::handle<StepFEA_HArray1OfCurveElementInterval>

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_IntervalDefinitions(self, *args)


    def PropertyId(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field propertyid.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_PropertyId(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_SetDescription(self, *args)


    def SetEndOffsets(self, *args) -> "void":
        """
        Set field endoffsets.

        Parameters
        ----------
        EndOffsets: StepFEA_HArray1OfCurveElementEndOffset

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_SetEndOffsets(self, *args)


    def SetEndReleases(self, *args) -> "void":
        """
        Set field endreleases.

        Parameters
        ----------
        EndReleases: StepFEA_HArray1OfCurveElementEndRelease

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_SetEndReleases(self, *args)


    def SetIntervalDefinitions(self, *args) -> "void":
        """
        Set field intervaldefinitions.

        Parameters
        ----------
        IntervalDefinitions: StepFEA_HArray1OfCurveElementInterval

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_SetIntervalDefinitions(self, *args)


    def SetPropertyId(self, *args) -> "void":
        """
        Set field propertyid.

        Parameters
        ----------
        PropertyId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementProperty_SetPropertyId(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_Curve3dElementProperty_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_Curve3dElementProperty
    __del__ = lambda self: None
StepFEA_Curve3dElementProperty_swigregister = _StepFEA.StepFEA_Curve3dElementProperty_swigregister
StepFEA_Curve3dElementProperty_swigregister(StepFEA_Curve3dElementProperty)

class StepFEA_CurveElementEndCoordinateSystem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_CurveElementEndCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_CurveElementEndCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_CurveElementEndCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AlignedCurve3dElementCoordinateSystem(self, *args) -> "opencascade::handle< StepFEA_AlignedCurve3dElementCoordinateSystem >":
        """
        Returns value as alignedcurve3delementcoordinatesystem (or null if another type).

        Returns
        -------
        opencascade::handle<StepFEA_AlignedCurve3dElementCoordinateSystem>

        """
        return _StepFEA.StepFEA_CurveElementEndCoordinateSystem_AlignedCurve3dElementCoordinateSystem(self, *args)


    def FeaAxis2Placement3d(self, *args) -> "opencascade::handle< StepFEA_FeaAxis2Placement3d >":
        """
        Returns value as feaaxis2placement3d (or null if another type).

        Returns
        -------
        opencascade::handle<StepFEA_FeaAxis2Placement3d>

        """
        return _StepFEA.StepFEA_CurveElementEndCoordinateSystem_FeaAxis2Placement3d(self, *args)


    def ParametricCurve3dElementCoordinateSystem(self, *args) -> "opencascade::handle< StepFEA_ParametricCurve3dElementCoordinateSystem >":
        """
        Returns value as parametriccurve3delementcoordinatesystem (or null if another type).

        Returns
        -------
        opencascade::handle<StepFEA_ParametricCurve3dElementCoordinateSystem>

        """
        return _StepFEA.StepFEA_CurveElementEndCoordinateSystem_ParametricCurve3dElementCoordinateSystem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_CurveElementEndCoordinateSystem
    __del__ = lambda self: None
StepFEA_CurveElementEndCoordinateSystem_swigregister = _StepFEA.StepFEA_CurveElementEndCoordinateSystem_swigregister
StepFEA_CurveElementEndCoordinateSystem_swigregister(StepFEA_CurveElementEndCoordinateSystem)

class StepFEA_CurveElementEndOffset(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_CurveElementEndOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_CurveElementEndOffset, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_CurveElementEndOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CoordinateSystem(self, *args) -> "StepFEA_CurveElementEndCoordinateSystem":
        """
        Returns field coordinatesystem.

        Returns
        -------
        StepFEA_CurveElementEndCoordinateSystem

        """
        return _StepFEA.StepFEA_CurveElementEndOffset_CoordinateSystem(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aCoordinateSystem: StepFEA_CurveElementEndCoordinateSystem
        aOffsetVector: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementEndOffset_Init(self, *args)


    def OffsetVector(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns field offsetvector.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_CurveElementEndOffset_OffsetVector(self, *args)


    def SetCoordinateSystem(self, *args) -> "void":
        """
        Set field coordinatesystem.

        Parameters
        ----------
        CoordinateSystem: StepFEA_CurveElementEndCoordinateSystem

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementEndOffset_SetCoordinateSystem(self, *args)


    def SetOffsetVector(self, *args) -> "void":
        """
        Set field offsetvector.

        Parameters
        ----------
        OffsetVector: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementEndOffset_SetOffsetVector(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_CurveElementEndOffset_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_CurveElementEndOffset
    __del__ = lambda self: None
StepFEA_CurveElementEndOffset_swigregister = _StepFEA.StepFEA_CurveElementEndOffset_swigregister
StepFEA_CurveElementEndOffset_swigregister(StepFEA_CurveElementEndOffset)

class StepFEA_CurveElementEndRelease(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_CurveElementEndRelease, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_CurveElementEndRelease, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_CurveElementEndRelease(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CoordinateSystem(self, *args) -> "StepFEA_CurveElementEndCoordinateSystem":
        """
        Returns field coordinatesystem.

        Returns
        -------
        StepFEA_CurveElementEndCoordinateSystem

        """
        return _StepFEA.StepFEA_CurveElementEndRelease_CoordinateSystem(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aCoordinateSystem: StepFEA_CurveElementEndCoordinateSystem
        aReleases: StepElement_HArray1OfCurveElementEndReleasePacket

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementEndRelease_Init(self, *args)


    def Releases(self, *args) -> "opencascade::handle< StepElement_HArray1OfCurveElementEndReleasePacket >":
        """
        Returns field releases.

        Returns
        -------
        opencascade::handle<StepElement_HArray1OfCurveElementEndReleasePacket>

        """
        return _StepFEA.StepFEA_CurveElementEndRelease_Releases(self, *args)


    def SetCoordinateSystem(self, *args) -> "void":
        """
        Set field coordinatesystem.

        Parameters
        ----------
        CoordinateSystem: StepFEA_CurveElementEndCoordinateSystem

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementEndRelease_SetCoordinateSystem(self, *args)


    def SetReleases(self, *args) -> "void":
        """
        Set field releases.

        Parameters
        ----------
        Releases: StepElement_HArray1OfCurveElementEndReleasePacket

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementEndRelease_SetReleases(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_CurveElementEndRelease_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_CurveElementEndRelease
    __del__ = lambda self: None
StepFEA_CurveElementEndRelease_swigregister = _StepFEA.StepFEA_CurveElementEndRelease_swigregister
StepFEA_CurveElementEndRelease_swigregister(StepFEA_CurveElementEndRelease)

class StepFEA_CurveElementInterval(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_CurveElementInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_CurveElementInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_CurveElementInterval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EuAngles(self, *args) -> "opencascade::handle< StepBasic_EulerAngles >":
        """
        Returns field euangles.

        Returns
        -------
        opencascade::handle<StepBasic_EulerAngles>

        """
        return _StepFEA.StepFEA_CurveElementInterval_EuAngles(self, *args)


    def FinishPosition(self, *args) -> "opencascade::handle< StepFEA_CurveElementLocation >":
        """
        Returns field finishposition.

        Returns
        -------
        opencascade::handle<StepFEA_CurveElementLocation>

        """
        return _StepFEA.StepFEA_CurveElementInterval_FinishPosition(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aFinishPosition: StepFEA_CurveElementLocation
        aEuAngles: StepBasic_EulerAngles

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementInterval_Init(self, *args)


    def SetEuAngles(self, *args) -> "void":
        """
        Set field euangles.

        Parameters
        ----------
        EuAngles: StepBasic_EulerAngles

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementInterval_SetEuAngles(self, *args)


    def SetFinishPosition(self, *args) -> "void":
        """
        Set field finishposition.

        Parameters
        ----------
        FinishPosition: StepFEA_CurveElementLocation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementInterval_SetFinishPosition(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_CurveElementInterval_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_CurveElementInterval
    __del__ = lambda self: None
StepFEA_CurveElementInterval_swigregister = _StepFEA.StepFEA_CurveElementInterval_swigregister
StepFEA_CurveElementInterval_swigregister(StepFEA_CurveElementInterval)

class StepFEA_CurveElementLocation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_CurveElementLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_CurveElementLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_CurveElementLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Coordinate(self, *args) -> "opencascade::handle< StepFEA_FeaParametricPoint >":
        """
        Returns field coordinate.

        Returns
        -------
        opencascade::handle<StepFEA_FeaParametricPoint>

        """
        return _StepFEA.StepFEA_CurveElementLocation_Coordinate(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aCoordinate: StepFEA_FeaParametricPoint

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementLocation_Init(self, *args)


    def SetCoordinate(self, *args) -> "void":
        """
        Set field coordinate.

        Parameters
        ----------
        Coordinate: StepFEA_FeaParametricPoint

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementLocation_SetCoordinate(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_CurveElementLocation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_CurveElementLocation
    __del__ = lambda self: None
StepFEA_CurveElementLocation_swigregister = _StepFEA.StepFEA_CurveElementLocation_swigregister
StepFEA_CurveElementLocation_swigregister(StepFEA_CurveElementLocation)

class StepFEA_DegreeOfFreedom(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_DegreeOfFreedom, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_DegreeOfFreedom, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_DegreeOfFreedom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ApplicationDefinedDegreeOfFreedom(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns value as applicationdefineddegreeoffreedom (or null if another type).

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepFEA.StepFEA_DegreeOfFreedom_ApplicationDefinedDegreeOfFreedom(self, *args)


    def EnumeratedDegreeOfFreedom(self, *args) -> "StepFEA_EnumeratedDegreeOfFreedom":
        """
        Returns value as enumerateddegreeoffreedom (or null if another type).

        Returns
        -------
        StepFEA_EnumeratedDegreeOfFreedom

        """
        return _StepFEA.StepFEA_DegreeOfFreedom_EnumeratedDegreeOfFreedom(self, *args)


    def SetApplicationDefinedDegreeOfFreedom(self, *args) -> "void":
        """
        Set value for applicationdefineddegreeoffreedom.

        Parameters
        ----------
        aVal: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_DegreeOfFreedom_SetApplicationDefinedDegreeOfFreedom(self, *args)


    def SetEnumeratedDegreeOfFreedom(self, *args) -> "void":
        """
        Returns value as enumerateddegreeoffreedom (or null if another type).

        Parameters
        ----------
        aVal: StepFEA_EnumeratedDegreeOfFreedom

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_DegreeOfFreedom_SetEnumeratedDegreeOfFreedom(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_DegreeOfFreedom
    __del__ = lambda self: None
StepFEA_DegreeOfFreedom_swigregister = _StepFEA.StepFEA_DegreeOfFreedom_swigregister
StepFEA_DegreeOfFreedom_swigregister(StepFEA_DegreeOfFreedom)

class StepFEA_DegreeOfFreedomMember(OCC.Core.StepData.StepData_SelectNamed):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectNamed]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_DegreeOfFreedomMember, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectNamed]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_DegreeOfFreedomMember, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_DegreeOfFreedomMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_DegreeOfFreedomMember_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_DegreeOfFreedomMember
    __del__ = lambda self: None
StepFEA_DegreeOfFreedomMember_swigregister = _StepFEA.StepFEA_DegreeOfFreedomMember_swigregister
StepFEA_DegreeOfFreedomMember_swigregister(StepFEA_DegreeOfFreedomMember)

class StepFEA_ElementGeometricRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ElementGeometricRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ElementGeometricRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ElementGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Aspect(self, *args) -> "StepElement_ElementAspect":
        """
        Returns field aspect.

        Returns
        -------
        StepElement_ElementAspect

        """
        return _StepFEA.StepFEA_ElementGeometricRelationship_Aspect(self, *args)


    def ElementRef(self, *args) -> "StepFEA_ElementOrElementGroup":
        """
        Returns field elementref.

        Returns
        -------
        StepFEA_ElementOrElementGroup

        """
        return _StepFEA.StepFEA_ElementGeometricRelationship_ElementRef(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aElementRef: StepFEA_ElementOrElementGroup
        aItem: StepElement_AnalysisItemWithinRepresentation
        aAspect: StepElement_ElementAspect

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ElementGeometricRelationship_Init(self, *args)


    def Item(self, *args) -> "opencascade::handle< StepElement_AnalysisItemWithinRepresentation >":
        """
        Returns field item.

        Returns
        -------
        opencascade::handle<StepElement_AnalysisItemWithinRepresentation>

        """
        return _StepFEA.StepFEA_ElementGeometricRelationship_Item(self, *args)


    def SetAspect(self, *args) -> "void":
        """
        Set field aspect.

        Parameters
        ----------
        Aspect: StepElement_ElementAspect

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ElementGeometricRelationship_SetAspect(self, *args)


    def SetElementRef(self, *args) -> "void":
        """
        Set field elementref.

        Parameters
        ----------
        ElementRef: StepFEA_ElementOrElementGroup

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ElementGeometricRelationship_SetElementRef(self, *args)


    def SetItem(self, *args) -> "void":
        """
        Set field item.

        Parameters
        ----------
        Item: StepElement_AnalysisItemWithinRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ElementGeometricRelationship_SetItem(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_ElementGeometricRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ElementGeometricRelationship
    __del__ = lambda self: None
StepFEA_ElementGeometricRelationship_swigregister = _StepFEA.StepFEA_ElementGeometricRelationship_swigregister
StepFEA_ElementGeometricRelationship_swigregister(StepFEA_ElementGeometricRelationship)

class StepFEA_ElementOrElementGroup(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ElementOrElementGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ElementOrElementGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ElementOrElementGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ElementGroup(self, *args) -> "opencascade::handle< StepFEA_ElementGroup >":
        """
        Returns value as elementgroup (or null if another type).

        Returns
        -------
        opencascade::handle<StepFEA_ElementGroup>

        """
        return _StepFEA.StepFEA_ElementOrElementGroup_ElementGroup(self, *args)


    def ElementRepresentation(self, *args) -> "opencascade::handle< StepFEA_ElementRepresentation >":
        """
        Returns value as elementrepresentation (or null if another type).

        Returns
        -------
        opencascade::handle<StepFEA_ElementRepresentation>

        """
        return _StepFEA.StepFEA_ElementOrElementGroup_ElementRepresentation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ElementOrElementGroup
    __del__ = lambda self: None
StepFEA_ElementOrElementGroup_swigregister = _StepFEA.StepFEA_ElementOrElementGroup_swigregister
StepFEA_ElementOrElementGroup_swigregister(StepFEA_ElementOrElementGroup)

class StepFEA_ElementRepresentation(OCC.Core.StepRepr.StepRepr_Representation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ElementRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentation_Name: TCollection_HAsciiString
        aRepresentation_Items: StepRepr_HArray1OfRepresentationItem
        aRepresentation_ContextOfItems: StepRepr_RepresentationContext
        aNodeList: StepFEA_HArray1OfNodeRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ElementRepresentation_Init(self, *args)


    def NodeList(self, *args) -> "opencascade::handle< StepFEA_HArray1OfNodeRepresentation >":
        """
        Returns field nodelist.

        Returns
        -------
        opencascade::handle<StepFEA_HArray1OfNodeRepresentation>

        """
        return _StepFEA.StepFEA_ElementRepresentation_NodeList(self, *args)


    def SetNodeList(self, *args) -> "void":
        """
        Set field nodelist.

        Parameters
        ----------
        NodeList: StepFEA_HArray1OfNodeRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ElementRepresentation_SetNodeList(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_ElementRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ElementRepresentation
    __del__ = lambda self: None
StepFEA_ElementRepresentation_swigregister = _StepFEA.StepFEA_ElementRepresentation_swigregister
StepFEA_ElementRepresentation_swigregister(StepFEA_ElementRepresentation)

class StepFEA_FeaAxis2Placement3d(OCC.Core.StepGeom.StepGeom_Axis2Placement3d):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_Axis2Placement3d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaAxis2Placement3d, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_Axis2Placement3d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaAxis2Placement3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaAxis2Placement3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepFEA.StepFEA_FeaAxis2Placement3d_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aPlacement_Location: StepGeom_CartesianPoint
        hasAxis2Placement3d_Axis: bool
        aAxis2Placement3d_Axis: StepGeom_Direction
        hasAxis2Placement3d_RefDirection: bool
        aAxis2Placement3d_RefDirection: StepGeom_Direction
        aSystemType: StepFEA_CoordinateSystemType
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaAxis2Placement3d_Init(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaAxis2Placement3d_SetDescription(self, *args)


    def SetSystemType(self, *args) -> "void":
        """
        Set field systemtype.

        Parameters
        ----------
        SystemType: StepFEA_CoordinateSystemType

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaAxis2Placement3d_SetSystemType(self, *args)


    def SystemType(self, *args) -> "StepFEA_CoordinateSystemType":
        """
        Returns field systemtype.

        Returns
        -------
        StepFEA_CoordinateSystemType

        """
        return _StepFEA.StepFEA_FeaAxis2Placement3d_SystemType(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaAxis2Placement3d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaAxis2Placement3d
    __del__ = lambda self: None
StepFEA_FeaAxis2Placement3d_swigregister = _StepFEA.StepFEA_FeaAxis2Placement3d_swigregister
StepFEA_FeaAxis2Placement3d_swigregister(StepFEA_FeaAxis2Placement3d)

class StepFEA_FeaCurveSectionGeometricRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaCurveSectionGeometricRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaCurveSectionGeometricRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaCurveSectionGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aSectionRef: StepElement_CurveElementSectionDefinition
        aItem: StepElement_AnalysisItemWithinRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaCurveSectionGeometricRelationship_Init(self, *args)


    def Item(self, *args) -> "opencascade::handle< StepElement_AnalysisItemWithinRepresentation >":
        """
        Returns field item.

        Returns
        -------
        opencascade::handle<StepElement_AnalysisItemWithinRepresentation>

        """
        return _StepFEA.StepFEA_FeaCurveSectionGeometricRelationship_Item(self, *args)


    def SectionRef(self, *args) -> "opencascade::handle< StepElement_CurveElementSectionDefinition >":
        """
        Returns field sectionref.

        Returns
        -------
        opencascade::handle<StepElement_CurveElementSectionDefinition>

        """
        return _StepFEA.StepFEA_FeaCurveSectionGeometricRelationship_SectionRef(self, *args)


    def SetItem(self, *args) -> "void":
        """
        Set field item.

        Parameters
        ----------
        Item: StepElement_AnalysisItemWithinRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaCurveSectionGeometricRelationship_SetItem(self, *args)


    def SetSectionRef(self, *args) -> "void":
        """
        Set field sectionref.

        Parameters
        ----------
        SectionRef: StepElement_CurveElementSectionDefinition

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaCurveSectionGeometricRelationship_SetSectionRef(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaCurveSectionGeometricRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaCurveSectionGeometricRelationship
    __del__ = lambda self: None
StepFEA_FeaCurveSectionGeometricRelationship_swigregister = _StepFEA.StepFEA_FeaCurveSectionGeometricRelationship_swigregister
StepFEA_FeaCurveSectionGeometricRelationship_swigregister(StepFEA_FeaCurveSectionGeometricRelationship)

class StepFEA_FeaGroup(OCC.Core.StepBasic.StepBasic_Group):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_Group]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_Group]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aGroup_Name: TCollection_HAsciiString
        aGroup_Description: TCollection_HAsciiString
        aModelRef: StepFEA_FeaModel

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaGroup_Init(self, *args)


    def ModelRef(self, *args) -> "opencascade::handle< StepFEA_FeaModel >":
        """
        Returns field modelref.

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel>

        """
        return _StepFEA.StepFEA_FeaGroup_ModelRef(self, *args)


    def SetModelRef(self, *args) -> "void":
        """
        Set field modelref.

        Parameters
        ----------
        ModelRef: StepFEA_FeaModel

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaGroup_SetModelRef(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaGroup_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaGroup
    __del__ = lambda self: None
StepFEA_FeaGroup_swigregister = _StepFEA.StepFEA_FeaGroup_swigregister
StepFEA_FeaGroup_swigregister(StepFEA_FeaGroup)

class StepFEA_FeaMaterialPropertyRepresentation(OCC.Core.StepRepr.StepRepr_MaterialPropertyRepresentation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_MaterialPropertyRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaMaterialPropertyRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_MaterialPropertyRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaMaterialPropertyRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaMaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaMaterialPropertyRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaMaterialPropertyRepresentation
    __del__ = lambda self: None
StepFEA_FeaMaterialPropertyRepresentation_swigregister = _StepFEA.StepFEA_FeaMaterialPropertyRepresentation_swigregister
StepFEA_FeaMaterialPropertyRepresentation_swigregister(StepFEA_FeaMaterialPropertyRepresentation)

class StepFEA_FeaMaterialPropertyRepresentationItem(OCC.Core.StepRepr.StepRepr_RepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaMaterialPropertyRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaMaterialPropertyRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaMaterialPropertyRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaMaterialPropertyRepresentationItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaMaterialPropertyRepresentationItem
    __del__ = lambda self: None
StepFEA_FeaMaterialPropertyRepresentationItem_swigregister = _StepFEA.StepFEA_FeaMaterialPropertyRepresentationItem_swigregister
StepFEA_FeaMaterialPropertyRepresentationItem_swigregister(StepFEA_FeaMaterialPropertyRepresentationItem)

class StepFEA_FeaModel(OCC.Core.StepRepr.StepRepr_Representation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AnalysisType(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field analysistype.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepFEA.StepFEA_FeaModel_AnalysisType(self, *args)


    def CreatingSoftware(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field creatingsoftware.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepFEA.StepFEA_FeaModel_CreatingSoftware(self, *args)


    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepFEA.StepFEA_FeaModel_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentation_Name: TCollection_HAsciiString
        aRepresentation_Items: StepRepr_HArray1OfRepresentationItem
        aRepresentation_ContextOfItems: StepRepr_RepresentationContext
        aCreatingSoftware: TCollection_HAsciiString
        aIntendedAnalysisCode: TColStd_HArray1OfAsciiString
        aDescription: TCollection_HAsciiString
        aAnalysisType: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaModel_Init(self, *args)


    def IntendedAnalysisCode(self, *args) -> "opencascade::handle< TColStd_HArray1OfAsciiString >":
        """
        Returns field intendedanalysiscode.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfAsciiString>

        """
        return _StepFEA.StepFEA_FeaModel_IntendedAnalysisCode(self, *args)


    def SetAnalysisType(self, *args) -> "void":
        """
        Set field analysistype.

        Parameters
        ----------
        AnalysisType: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaModel_SetAnalysisType(self, *args)


    def SetCreatingSoftware(self, *args) -> "void":
        """
        Set field creatingsoftware.

        Parameters
        ----------
        CreatingSoftware: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaModel_SetCreatingSoftware(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaModel_SetDescription(self, *args)


    def SetIntendedAnalysisCode(self, *args) -> "void":
        """
        Set field intendedanalysiscode.

        Parameters
        ----------
        IntendedAnalysisCode: TColStd_HArray1OfAsciiString

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaModel_SetIntendedAnalysisCode(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaModel
    __del__ = lambda self: None
StepFEA_FeaModel_swigregister = _StepFEA.StepFEA_FeaModel_swigregister
StepFEA_FeaModel_swigregister(StepFEA_FeaModel)

class StepFEA_FeaModelDefinition(OCC.Core.StepRepr.StepRepr_ShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaModelDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaModelDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaModelDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaModelDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaModelDefinition
    __del__ = lambda self: None
StepFEA_FeaModelDefinition_swigregister = _StepFEA.StepFEA_FeaModelDefinition_swigregister
StepFEA_FeaModelDefinition_swigregister(StepFEA_FeaModelDefinition)

class StepFEA_FeaParametricPoint(OCC.Core.StepGeom.StepGeom_Point):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_Point]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaParametricPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_Point]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaParametricPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaParametricPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Coordinates(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns field coordinates.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_FeaParametricPoint_Coordinates(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aCoordinates: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaParametricPoint_Init(self, *args)


    def SetCoordinates(self, *args) -> "void":
        """
        Set field coordinates.

        Parameters
        ----------
        Coordinates: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaParametricPoint_SetCoordinates(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaParametricPoint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaParametricPoint
    __del__ = lambda self: None
StepFEA_FeaParametricPoint_swigregister = _StepFEA.StepFEA_FeaParametricPoint_swigregister
StepFEA_FeaParametricPoint_swigregister(StepFEA_FeaParametricPoint)

class StepFEA_FeaRepresentationItem(OCC.Core.StepRepr.StepRepr_RepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaRepresentationItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaRepresentationItem
    __del__ = lambda self: None
StepFEA_FeaRepresentationItem_swigregister = _StepFEA.StepFEA_FeaRepresentationItem_swigregister
StepFEA_FeaRepresentationItem_swigregister(StepFEA_FeaRepresentationItem)

class StepFEA_FeaSurfaceSectionGeometricRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaSurfaceSectionGeometricRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaSurfaceSectionGeometricRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaSurfaceSectionGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aSectionRef: StepElement_SurfaceSection
        aItem: StepElement_AnalysisItemWithinRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaSurfaceSectionGeometricRelationship_Init(self, *args)


    def Item(self, *args) -> "opencascade::handle< StepElement_AnalysisItemWithinRepresentation >":
        """
        Returns field item.

        Returns
        -------
        opencascade::handle<StepElement_AnalysisItemWithinRepresentation>

        """
        return _StepFEA.StepFEA_FeaSurfaceSectionGeometricRelationship_Item(self, *args)


    def SectionRef(self, *args) -> "opencascade::handle< StepElement_SurfaceSection >":
        """
        Returns field sectionref.

        Returns
        -------
        opencascade::handle<StepElement_SurfaceSection>

        """
        return _StepFEA.StepFEA_FeaSurfaceSectionGeometricRelationship_SectionRef(self, *args)


    def SetItem(self, *args) -> "void":
        """
        Set field item.

        Parameters
        ----------
        Item: StepElement_AnalysisItemWithinRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaSurfaceSectionGeometricRelationship_SetItem(self, *args)


    def SetSectionRef(self, *args) -> "void":
        """
        Set field sectionref.

        Parameters
        ----------
        SectionRef: StepElement_SurfaceSection

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaSurfaceSectionGeometricRelationship_SetSectionRef(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaSurfaceSectionGeometricRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaSurfaceSectionGeometricRelationship
    __del__ = lambda self: None
StepFEA_FeaSurfaceSectionGeometricRelationship_swigregister = _StepFEA.StepFEA_FeaSurfaceSectionGeometricRelationship_swigregister
StepFEA_FeaSurfaceSectionGeometricRelationship_swigregister(StepFEA_FeaSurfaceSectionGeometricRelationship)

class StepFEA_FreedomAndCoefficient(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FreedomAndCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FreedomAndCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FreedomAndCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def A(self, *args) -> "StepElement_MeasureOrUnspecifiedValue":
        """
        Returns field a.

        Returns
        -------
        StepElement_MeasureOrUnspecifiedValue

        """
        return _StepFEA.StepFEA_FreedomAndCoefficient_A(self, *args)


    def Freedom(self, *args) -> "StepFEA_DegreeOfFreedom":
        """
        Returns field freedom.

        Returns
        -------
        StepFEA_DegreeOfFreedom

        """
        return _StepFEA.StepFEA_FreedomAndCoefficient_Freedom(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aFreedom: StepFEA_DegreeOfFreedom
        aA: StepElement_MeasureOrUnspecifiedValue

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FreedomAndCoefficient_Init(self, *args)


    def SetA(self, *args) -> "void":
        """
        Set field a.

        Parameters
        ----------
        A: StepElement_MeasureOrUnspecifiedValue

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FreedomAndCoefficient_SetA(self, *args)


    def SetFreedom(self, *args) -> "void":
        """
        Set field freedom.

        Parameters
        ----------
        Freedom: StepFEA_DegreeOfFreedom

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FreedomAndCoefficient_SetFreedom(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FreedomAndCoefficient_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FreedomAndCoefficient
    __del__ = lambda self: None
StepFEA_FreedomAndCoefficient_swigregister = _StepFEA.StepFEA_FreedomAndCoefficient_swigregister
StepFEA_FreedomAndCoefficient_swigregister(StepFEA_FreedomAndCoefficient)

class StepFEA_FreedomsList(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FreedomsList, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FreedomsList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FreedomsList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Freedoms(self, *args) -> "opencascade::handle< StepFEA_HArray1OfDegreeOfFreedom >":
        """
        Returns field freedoms.

        Returns
        -------
        opencascade::handle<StepFEA_HArray1OfDegreeOfFreedom>

        """
        return _StepFEA.StepFEA_FreedomsList_Freedoms(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aFreedoms: StepFEA_HArray1OfDegreeOfFreedom

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FreedomsList_Init(self, *args)


    def SetFreedoms(self, *args) -> "void":
        """
        Set field freedoms.

        Parameters
        ----------
        Freedoms: StepFEA_HArray1OfDegreeOfFreedom

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FreedomsList_SetFreedoms(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FreedomsList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FreedomsList
    __del__ = lambda self: None
StepFEA_FreedomsList_swigregister = _StepFEA.StepFEA_FreedomsList_swigregister
StepFEA_FreedomsList_swigregister(StepFEA_FreedomsList)

class StepFEA_NodeDefinition(OCC.Core.StepRepr.StepRepr_ShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_NodeDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_NodeDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_NodeDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_NodeDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_NodeDefinition
    __del__ = lambda self: None
StepFEA_NodeDefinition_swigregister = _StepFEA.StepFEA_NodeDefinition_swigregister
StepFEA_NodeDefinition_swigregister(StepFEA_NodeDefinition)

class StepFEA_NodeRepresentation(OCC.Core.StepRepr.StepRepr_Representation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_NodeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_NodeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_NodeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentation_Name: TCollection_HAsciiString
        aRepresentation_Items: StepRepr_HArray1OfRepresentationItem
        aRepresentation_ContextOfItems: StepRepr_RepresentationContext
        aModelRef: StepFEA_FeaModel

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_NodeRepresentation_Init(self, *args)


    def ModelRef(self, *args) -> "opencascade::handle< StepFEA_FeaModel >":
        """
        Returns field modelref.

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel>

        """
        return _StepFEA.StepFEA_NodeRepresentation_ModelRef(self, *args)


    def SetModelRef(self, *args) -> "void":
        """
        Set field modelref.

        Parameters
        ----------
        ModelRef: StepFEA_FeaModel

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_NodeRepresentation_SetModelRef(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_NodeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_NodeRepresentation
    __del__ = lambda self: None
StepFEA_NodeRepresentation_swigregister = _StepFEA.StepFEA_NodeRepresentation_swigregister
StepFEA_NodeRepresentation_swigregister(StepFEA_NodeRepresentation)

class StepFEA_NodeSet(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_NodeSet, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_NodeSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_NodeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aNodes: StepFEA_HArray1OfNodeRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_NodeSet_Init(self, *args)


    def Nodes(self, *args) -> "opencascade::handle< StepFEA_HArray1OfNodeRepresentation >":
        """
        Returns field nodes.

        Returns
        -------
        opencascade::handle<StepFEA_HArray1OfNodeRepresentation>

        """
        return _StepFEA.StepFEA_NodeSet_Nodes(self, *args)


    def SetNodes(self, *args) -> "void":
        """
        Set field nodes.

        Parameters
        ----------
        Nodes: StepFEA_HArray1OfNodeRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_NodeSet_SetNodes(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_NodeSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_NodeSet
    __del__ = lambda self: None
StepFEA_NodeSet_swigregister = _StepFEA.StepFEA_NodeSet_swigregister
StepFEA_NodeSet_swigregister(StepFEA_NodeSet)

class StepFEA_SymmetricTensor22d(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SymmetricTensor22d, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SymmetricTensor22d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_SymmetricTensor22d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AnisotropicSymmetricTensor22d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as anisotropicsymmetrictensor22d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor22d_AnisotropicSymmetricTensor22d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_SymmetricTensor22d
    __del__ = lambda self: None
StepFEA_SymmetricTensor22d_swigregister = _StepFEA.StepFEA_SymmetricTensor22d_swigregister
StepFEA_SymmetricTensor22d_swigregister(StepFEA_SymmetricTensor22d)

class StepFEA_SymmetricTensor23d(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SymmetricTensor23d, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SymmetricTensor23d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_SymmetricTensor23d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AnisotropicSymmetricTensor23d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as anisotropicsymmetrictensor23d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor23d_AnisotropicSymmetricTensor23d(self, *args)


    def IsotropicSymmetricTensor23d(self, *args) -> "Standard_Real":
        """
        Returns value as isotropicsymmetrictensor23d (or null if another type).

        Returns
        -------
        float

        """
        return _StepFEA.StepFEA_SymmetricTensor23d_IsotropicSymmetricTensor23d(self, *args)


    def OrthotropicSymmetricTensor23d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as orthotropicsymmetrictensor23d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor23d_OrthotropicSymmetricTensor23d(self, *args)


    def SetAnisotropicSymmetricTensor23d(self, *args) -> "void":
        """
        Set value for anisotropicsymmetrictensor23d.

        Parameters
        ----------
        aVal: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_SymmetricTensor23d_SetAnisotropicSymmetricTensor23d(self, *args)


    def SetIsotropicSymmetricTensor23d(self, *args) -> "void":
        """
        Set value for isotropicsymmetrictensor23d.

        Parameters
        ----------
        aVal: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_SymmetricTensor23d_SetIsotropicSymmetricTensor23d(self, *args)


    def SetOrthotropicSymmetricTensor23d(self, *args) -> "void":
        """
        Set value for orthotropicsymmetrictensor23d.

        Parameters
        ----------
        aVal: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_SymmetricTensor23d_SetOrthotropicSymmetricTensor23d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_SymmetricTensor23d
    __del__ = lambda self: None
StepFEA_SymmetricTensor23d_swigregister = _StepFEA.StepFEA_SymmetricTensor23d_swigregister
StepFEA_SymmetricTensor23d_swigregister(StepFEA_SymmetricTensor23d)

class StepFEA_SymmetricTensor23dMember(OCC.Core.StepData.StepData_SelectArrReal):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectArrReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SymmetricTensor23dMember, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectArrReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SymmetricTensor23dMember, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_SymmetricTensor23dMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_SymmetricTensor23dMember_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_SymmetricTensor23dMember
    __del__ = lambda self: None
StepFEA_SymmetricTensor23dMember_swigregister = _StepFEA.StepFEA_SymmetricTensor23dMember_swigregister
StepFEA_SymmetricTensor23dMember_swigregister(StepFEA_SymmetricTensor23dMember)

class StepFEA_SymmetricTensor42d(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SymmetricTensor42d, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SymmetricTensor42d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_SymmetricTensor42d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AnisotropicSymmetricTensor42d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as anisotropicsymmetrictensor42d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor42d_AnisotropicSymmetricTensor42d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_SymmetricTensor42d
    __del__ = lambda self: None
StepFEA_SymmetricTensor42d_swigregister = _StepFEA.StepFEA_SymmetricTensor42d_swigregister
StepFEA_SymmetricTensor42d_swigregister(StepFEA_SymmetricTensor42d)

class StepFEA_SymmetricTensor43d(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SymmetricTensor43d, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SymmetricTensor43d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_SymmetricTensor43d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AnisotropicSymmetricTensor43d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as anisotropicsymmetrictensor43d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor43d_AnisotropicSymmetricTensor43d(self, *args)


    def FeaColumnNormalisedMonoclinicSymmetricTensor43d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as feacolumnnormalisedmonoclinicsymmetrictensor43d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor43d_FeaColumnNormalisedMonoclinicSymmetricTensor43d(self, *args)


    def FeaColumnNormalisedOrthotropicSymmetricTensor43d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as feacolumnnormalisedorthotropicsymmetrictensor43d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor43d_FeaColumnNormalisedOrthotropicSymmetricTensor43d(self, *args)


    def FeaIsoOrthotropicSymmetricTensor43d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as feaisoorthotropicsymmetrictensor43d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor43d_FeaIsoOrthotropicSymmetricTensor43d(self, *args)


    def FeaIsotropicSymmetricTensor43d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as feaisotropicsymmetrictensor43d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor43d_FeaIsotropicSymmetricTensor43d(self, *args)


    def FeaTransverseIsotropicSymmetricTensor43d(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns value as featransverseisotropicsymmetrictensor43d (or null if another type).

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepFEA.StepFEA_SymmetricTensor43d_FeaTransverseIsotropicSymmetricTensor43d(self, *args)


    __repr__ = _dumps_object

    @methodnotwrapped
    def SetFeaIsotropicSymmetricTensor43d(self):
    	pass

    __swig_destroy__ = _StepFEA.delete_StepFEA_SymmetricTensor43d
    __del__ = lambda self: None
StepFEA_SymmetricTensor43d_swigregister = _StepFEA.StepFEA_SymmetricTensor43d_swigregister
StepFEA_SymmetricTensor43d_swigregister(StepFEA_SymmetricTensor43d)

class StepFEA_SymmetricTensor43dMember(OCC.Core.StepData.StepData_SelectArrReal):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectArrReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_SymmetricTensor43dMember, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectArrReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_SymmetricTensor43dMember, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_SymmetricTensor43dMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_SymmetricTensor43dMember_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_SymmetricTensor43dMember
    __del__ = lambda self: None
StepFEA_SymmetricTensor43dMember_swigregister = _StepFEA.StepFEA_SymmetricTensor43dMember_swigregister
StepFEA_SymmetricTensor43dMember_swigregister(StepFEA_SymmetricTensor43dMember)

class StepFEA_AlignedCurve3dElementCoordinateSystem(StepFEA_FeaRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_AlignedCurve3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_AlignedCurve3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_AlignedCurve3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CoordinateSystem(self, *args) -> "opencascade::handle< StepFEA_FeaAxis2Placement3d >":
        """
        Returns field coordinatesystem.

        Returns
        -------
        opencascade::handle<StepFEA_FeaAxis2Placement3d>

        """
        return _StepFEA.StepFEA_AlignedCurve3dElementCoordinateSystem_CoordinateSystem(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aCoordinateSystem: StepFEA_FeaAxis2Placement3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_AlignedCurve3dElementCoordinateSystem_Init(self, *args)


    def SetCoordinateSystem(self, *args) -> "void":
        """
        Set field coordinatesystem.

        Parameters
        ----------
        CoordinateSystem: StepFEA_FeaAxis2Placement3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_AlignedCurve3dElementCoordinateSystem_SetCoordinateSystem(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_AlignedCurve3dElementCoordinateSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_AlignedCurve3dElementCoordinateSystem
    __del__ = lambda self: None
StepFEA_AlignedCurve3dElementCoordinateSystem_swigregister = _StepFEA.StepFEA_AlignedCurve3dElementCoordinateSystem_swigregister
StepFEA_AlignedCurve3dElementCoordinateSystem_swigregister(StepFEA_AlignedCurve3dElementCoordinateSystem)

class StepFEA_AlignedSurface3dElementCoordinateSystem(StepFEA_FeaRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_AlignedSurface3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_AlignedSurface3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_AlignedSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CoordinateSystem(self, *args) -> "opencascade::handle< StepFEA_FeaAxis2Placement3d >":
        """
        Returns field coordinatesystem.

        Returns
        -------
        opencascade::handle<StepFEA_FeaAxis2Placement3d>

        """
        return _StepFEA.StepFEA_AlignedSurface3dElementCoordinateSystem_CoordinateSystem(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aCoordinateSystem: StepFEA_FeaAxis2Placement3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_AlignedSurface3dElementCoordinateSystem_Init(self, *args)


    def SetCoordinateSystem(self, *args) -> "void":
        """
        Set field coordinatesystem.

        Parameters
        ----------
        CoordinateSystem: StepFEA_FeaAxis2Placement3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_AlignedSurface3dElementCoordinateSystem_SetCoordinateSystem(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_AlignedSurface3dElementCoordinateSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_AlignedSurface3dElementCoordinateSystem
    __del__ = lambda self: None
StepFEA_AlignedSurface3dElementCoordinateSystem_swigregister = _StepFEA.StepFEA_AlignedSurface3dElementCoordinateSystem_swigregister
StepFEA_AlignedSurface3dElementCoordinateSystem_swigregister(StepFEA_AlignedSurface3dElementCoordinateSystem)

class StepFEA_ArbitraryVolume3dElementCoordinateSystem(StepFEA_FeaRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ArbitraryVolume3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ArbitraryVolume3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ArbitraryVolume3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CoordinateSystem(self, *args) -> "opencascade::handle< StepFEA_FeaAxis2Placement3d >":
        """
        Returns field coordinatesystem.

        Returns
        -------
        opencascade::handle<StepFEA_FeaAxis2Placement3d>

        """
        return _StepFEA.StepFEA_ArbitraryVolume3dElementCoordinateSystem_CoordinateSystem(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aCoordinateSystem: StepFEA_FeaAxis2Placement3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ArbitraryVolume3dElementCoordinateSystem_Init(self, *args)


    def SetCoordinateSystem(self, *args) -> "void":
        """
        Set field coordinatesystem.

        Parameters
        ----------
        CoordinateSystem: StepFEA_FeaAxis2Placement3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ArbitraryVolume3dElementCoordinateSystem_SetCoordinateSystem(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ArbitraryVolume3dElementCoordinateSystem
    __del__ = lambda self: None
StepFEA_ArbitraryVolume3dElementCoordinateSystem_swigregister = _StepFEA.StepFEA_ArbitraryVolume3dElementCoordinateSystem_swigregister
StepFEA_ArbitraryVolume3dElementCoordinateSystem_swigregister(StepFEA_ArbitraryVolume3dElementCoordinateSystem)

class StepFEA_ConstantSurface3dElementCoordinateSystem(StepFEA_FeaRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ConstantSurface3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ConstantSurface3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ConstantSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angle(self, *args) -> "Standard_Real":
        """
        Returns field angle.

        Returns
        -------
        float

        """
        return _StepFEA.StepFEA_ConstantSurface3dElementCoordinateSystem_Angle(self, *args)


    def Axis(self, *args) -> "Standard_Integer":
        """
        Returns field axis.

        Returns
        -------
        int

        """
        return _StepFEA.StepFEA_ConstantSurface3dElementCoordinateSystem_Axis(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aAxis: int
        aAngle: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ConstantSurface3dElementCoordinateSystem_Init(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        Set field angle.

        Parameters
        ----------
        Angle: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ConstantSurface3dElementCoordinateSystem_SetAngle(self, *args)


    def SetAxis(self, *args) -> "void":
        """
        Set field axis.

        Parameters
        ----------
        Axis: int

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ConstantSurface3dElementCoordinateSystem_SetAxis(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_ConstantSurface3dElementCoordinateSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ConstantSurface3dElementCoordinateSystem
    __del__ = lambda self: None
StepFEA_ConstantSurface3dElementCoordinateSystem_swigregister = _StepFEA.StepFEA_ConstantSurface3dElementCoordinateSystem_swigregister
StepFEA_ConstantSurface3dElementCoordinateSystem_swigregister(StepFEA_ConstantSurface3dElementCoordinateSystem)

class StepFEA_Curve3dElementRepresentation(StepFEA_ElementRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepFEA_ElementRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Curve3dElementRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_ElementRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Curve3dElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_Curve3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ElementDescriptor(self, *args) -> "opencascade::handle< StepElement_Curve3dElementDescriptor >":
        """
        Returns field elementdescriptor.

        Returns
        -------
        opencascade::handle<StepElement_Curve3dElementDescriptor>

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_ElementDescriptor(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentation_Name: TCollection_HAsciiString
        aRepresentation_Items: StepRepr_HArray1OfRepresentationItem
        aRepresentation_ContextOfItems: StepRepr_RepresentationContext
        aElementRepresentation_NodeList: StepFEA_HArray1OfNodeRepresentation
        aModelRef: StepFEA_FeaModel3d
        aElementDescriptor: StepElement_Curve3dElementDescriptor
        aProperty: StepFEA_Curve3dElementProperty
        aMaterial: StepElement_ElementMaterial

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_Init(self, *args)


    def Material(self, *args) -> "opencascade::handle< StepElement_ElementMaterial >":
        """
        Returns field material.

        Returns
        -------
        opencascade::handle<StepElement_ElementMaterial>

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_Material(self, *args)


    def ModelRef(self, *args) -> "opencascade::handle< StepFEA_FeaModel3d >":
        """
        Returns field modelref.

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel3d>

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_ModelRef(self, *args)


    def Property(self, *args) -> "opencascade::handle< StepFEA_Curve3dElementProperty >":
        """
        Returns field property.

        Returns
        -------
        opencascade::handle<StepFEA_Curve3dElementProperty>

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_Property(self, *args)


    def SetElementDescriptor(self, *args) -> "void":
        """
        Set field elementdescriptor.

        Parameters
        ----------
        ElementDescriptor: StepElement_Curve3dElementDescriptor

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_SetElementDescriptor(self, *args)


    def SetMaterial(self, *args) -> "void":
        """
        Set field material.

        Parameters
        ----------
        Material: StepElement_ElementMaterial

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_SetMaterial(self, *args)


    def SetModelRef(self, *args) -> "void":
        """
        Set field modelref.

        Parameters
        ----------
        ModelRef: StepFEA_FeaModel3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_SetModelRef(self, *args)


    def SetProperty(self, *args) -> "void":
        """
        Set field property.

        Parameters
        ----------
        Property: StepFEA_Curve3dElementProperty

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Curve3dElementRepresentation_SetProperty(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_Curve3dElementRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_Curve3dElementRepresentation
    __del__ = lambda self: None
StepFEA_Curve3dElementRepresentation_swigregister = _StepFEA.StepFEA_Curve3dElementRepresentation_swigregister
StepFEA_Curve3dElementRepresentation_swigregister(StepFEA_Curve3dElementRepresentation)

class StepFEA_CurveElementIntervalConstant(StepFEA_CurveElementInterval):
    __swig_setmethods__ = {}
    for _s in [StepFEA_CurveElementInterval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_CurveElementIntervalConstant, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_CurveElementInterval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_CurveElementIntervalConstant, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_CurveElementIntervalConstant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aCurveElementInterval_FinishPosition: StepFEA_CurveElementLocation
        aCurveElementInterval_EuAngles: StepBasic_EulerAngles
        aSection: StepElement_CurveElementSectionDefinition

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementIntervalConstant_Init(self, *args)


    def Section(self, *args) -> "opencascade::handle< StepElement_CurveElementSectionDefinition >":
        """
        Returns field section.

        Returns
        -------
        opencascade::handle<StepElement_CurveElementSectionDefinition>

        """
        return _StepFEA.StepFEA_CurveElementIntervalConstant_Section(self, *args)


    def SetSection(self, *args) -> "void":
        """
        Set field section.

        Parameters
        ----------
        Section: StepElement_CurveElementSectionDefinition

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementIntervalConstant_SetSection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_CurveElementIntervalConstant_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_CurveElementIntervalConstant
    __del__ = lambda self: None
StepFEA_CurveElementIntervalConstant_swigregister = _StepFEA.StepFEA_CurveElementIntervalConstant_swigregister
StepFEA_CurveElementIntervalConstant_swigregister(StepFEA_CurveElementIntervalConstant)

class StepFEA_CurveElementIntervalLinearlyVarying(StepFEA_CurveElementInterval):
    __swig_setmethods__ = {}
    for _s in [StepFEA_CurveElementInterval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_CurveElementIntervalLinearlyVarying, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_CurveElementInterval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_CurveElementIntervalLinearlyVarying, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_CurveElementIntervalLinearlyVarying(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aCurveElementInterval_FinishPosition: StepFEA_CurveElementLocation
        aCurveElementInterval_EuAngles: StepBasic_EulerAngles
        aSections: StepElement_HArray1OfCurveElementSectionDefinition

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementIntervalLinearlyVarying_Init(self, *args)


    def Sections(self, *args) -> "opencascade::handle< StepElement_HArray1OfCurveElementSectionDefinition >":
        """
        Returns field sections.

        Returns
        -------
        opencascade::handle<StepElement_HArray1OfCurveElementSectionDefinition>

        """
        return _StepFEA.StepFEA_CurveElementIntervalLinearlyVarying_Sections(self, *args)


    def SetSections(self, *args) -> "void":
        """
        Set field sections.

        Parameters
        ----------
        Sections: StepElement_HArray1OfCurveElementSectionDefinition

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_CurveElementIntervalLinearlyVarying_SetSections(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_CurveElementIntervalLinearlyVarying_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_CurveElementIntervalLinearlyVarying
    __del__ = lambda self: None
StepFEA_CurveElementIntervalLinearlyVarying_swigregister = _StepFEA.StepFEA_CurveElementIntervalLinearlyVarying_swigregister
StepFEA_CurveElementIntervalLinearlyVarying_swigregister(StepFEA_CurveElementIntervalLinearlyVarying)

class StepFEA_DummyNode(StepFEA_NodeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepFEA_NodeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_DummyNode, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_NodeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_DummyNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_DummyNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_DummyNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_DummyNode
    __del__ = lambda self: None
StepFEA_DummyNode_swigregister = _StepFEA.StepFEA_DummyNode_swigregister
StepFEA_DummyNode_swigregister(StepFEA_DummyNode)

class StepFEA_ElementGroup(StepFEA_FeaGroup):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ElementGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ElementGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ElementGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Elements(self, *args) -> "opencascade::handle< StepFEA_HArray1OfElementRepresentation >":
        """
        Returns field elements.

        Returns
        -------
        opencascade::handle<StepFEA_HArray1OfElementRepresentation>

        """
        return _StepFEA.StepFEA_ElementGroup_Elements(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aGroup_Name: TCollection_HAsciiString
        aGroup_Description: TCollection_HAsciiString
        aFeaGroup_ModelRef: StepFEA_FeaModel
        aElements: StepFEA_HArray1OfElementRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ElementGroup_Init(self, *args)


    def SetElements(self, *args) -> "void":
        """
        Set field elements.

        Parameters
        ----------
        Elements: StepFEA_HArray1OfElementRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ElementGroup_SetElements(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_ElementGroup_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ElementGroup
    __del__ = lambda self: None
StepFEA_ElementGroup_swigregister = _StepFEA.StepFEA_ElementGroup_swigregister
StepFEA_ElementGroup_swigregister(StepFEA_ElementGroup)

class StepFEA_FeaAreaDensity(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaAreaDensity, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaAreaDensity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaAreaDensity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstant(self, *args) -> "Standard_Real":
        """
        Returns field feaconstant.

        Returns
        -------
        float

        """
        return _StepFEA.StepFEA_FeaAreaDensity_FeaConstant(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstant: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaAreaDensity_Init(self, *args)


    def SetFeaConstant(self, *args) -> "void":
        """
        Set field feaconstant.

        Parameters
        ----------
        FeaConstant: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaAreaDensity_SetFeaConstant(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaAreaDensity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaAreaDensity
    __del__ = lambda self: None
StepFEA_FeaAreaDensity_swigregister = _StepFEA.StepFEA_FeaAreaDensity_swigregister
StepFEA_FeaAreaDensity_swigregister(StepFEA_FeaAreaDensity)

class StepFEA_FeaLinearElasticity(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaLinearElasticity, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaLinearElasticity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaLinearElasticity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstants(self, *args) -> "StepFEA_SymmetricTensor43d":
        """
        Returns field feaconstants.

        Returns
        -------
        StepFEA_SymmetricTensor43d

        """
        return _StepFEA.StepFEA_FeaLinearElasticity_FeaConstants(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstants: StepFEA_SymmetricTensor43d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaLinearElasticity_Init(self, *args)


    def SetFeaConstants(self, *args) -> "void":
        """
        Set field feaconstants.

        Parameters
        ----------
        FeaConstants: StepFEA_SymmetricTensor43d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaLinearElasticity_SetFeaConstants(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaLinearElasticity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaLinearElasticity
    __del__ = lambda self: None
StepFEA_FeaLinearElasticity_swigregister = _StepFEA.StepFEA_FeaLinearElasticity_swigregister
StepFEA_FeaLinearElasticity_swigregister(StepFEA_FeaLinearElasticity)

class StepFEA_FeaMassDensity(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaMassDensity, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaMassDensity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaMassDensity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstant(self, *args) -> "Standard_Real":
        """
        Returns field feaconstant.

        Returns
        -------
        float

        """
        return _StepFEA.StepFEA_FeaMassDensity_FeaConstant(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstant: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaMassDensity_Init(self, *args)


    def SetFeaConstant(self, *args) -> "void":
        """
        Set field feaconstant.

        Parameters
        ----------
        FeaConstant: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaMassDensity_SetFeaConstant(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaMassDensity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaMassDensity
    __del__ = lambda self: None
StepFEA_FeaMassDensity_swigregister = _StepFEA.StepFEA_FeaMassDensity_swigregister
StepFEA_FeaMassDensity_swigregister(StepFEA_FeaMassDensity)

class StepFEA_FeaModel3d(StepFEA_FeaModel):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaModel3d, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaModel3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaModel3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaModel3d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaModel3d
    __del__ = lambda self: None
StepFEA_FeaModel3d_swigregister = _StepFEA.StepFEA_FeaModel3d_swigregister
StepFEA_FeaModel3d_swigregister(StepFEA_FeaModel3d)

class StepFEA_FeaMoistureAbsorption(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaMoistureAbsorption, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaMoistureAbsorption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaMoistureAbsorption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstants(self, *args) -> "StepFEA_SymmetricTensor23d":
        """
        Returns field feaconstants.

        Returns
        -------
        StepFEA_SymmetricTensor23d

        """
        return _StepFEA.StepFEA_FeaMoistureAbsorption_FeaConstants(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstants: StepFEA_SymmetricTensor23d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaMoistureAbsorption_Init(self, *args)


    def SetFeaConstants(self, *args) -> "void":
        """
        Set field feaconstants.

        Parameters
        ----------
        FeaConstants: StepFEA_SymmetricTensor23d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaMoistureAbsorption_SetFeaConstants(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaMoistureAbsorption_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaMoistureAbsorption
    __del__ = lambda self: None
StepFEA_FeaMoistureAbsorption_swigregister = _StepFEA.StepFEA_FeaMoistureAbsorption_swigregister
StepFEA_FeaMoistureAbsorption_swigregister(StepFEA_FeaMoistureAbsorption)

class StepFEA_FeaSecantCoefficientOfLinearThermalExpansion(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaSecantCoefficientOfLinearThermalExpansion, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaSecantCoefficientOfLinearThermalExpansion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstants(self, *args) -> "StepFEA_SymmetricTensor23d":
        """
        Returns field feaconstants.

        Returns
        -------
        StepFEA_SymmetricTensor23d

        """
        return _StepFEA.StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_FeaConstants(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstants: StepFEA_SymmetricTensor23d
        aReferenceTemperature: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_Init(self, *args)


    def ReferenceTemperature(self, *args) -> "Standard_Real":
        """
        Returns field referencetemperature.

        Returns
        -------
        float

        """
        return _StepFEA.StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_ReferenceTemperature(self, *args)


    def SetFeaConstants(self, *args) -> "void":
        """
        Set field feaconstants.

        Parameters
        ----------
        FeaConstants: StepFEA_SymmetricTensor23d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_SetFeaConstants(self, *args)


    def SetReferenceTemperature(self, *args) -> "void":
        """
        Set field referencetemperature.

        Parameters
        ----------
        ReferenceTemperature: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_SetReferenceTemperature(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion
    __del__ = lambda self: None
StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_swigregister = _StepFEA.StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_swigregister
StepFEA_FeaSecantCoefficientOfLinearThermalExpansion_swigregister(StepFEA_FeaSecantCoefficientOfLinearThermalExpansion)

class StepFEA_FeaShellBendingStiffness(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaShellBendingStiffness, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaShellBendingStiffness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaShellBendingStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstants(self, *args) -> "StepFEA_SymmetricTensor42d":
        """
        Returns field feaconstants.

        Returns
        -------
        StepFEA_SymmetricTensor42d

        """
        return _StepFEA.StepFEA_FeaShellBendingStiffness_FeaConstants(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstants: StepFEA_SymmetricTensor42d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaShellBendingStiffness_Init(self, *args)


    def SetFeaConstants(self, *args) -> "void":
        """
        Set field feaconstants.

        Parameters
        ----------
        FeaConstants: StepFEA_SymmetricTensor42d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaShellBendingStiffness_SetFeaConstants(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaShellBendingStiffness_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaShellBendingStiffness
    __del__ = lambda self: None
StepFEA_FeaShellBendingStiffness_swigregister = _StepFEA.StepFEA_FeaShellBendingStiffness_swigregister
StepFEA_FeaShellBendingStiffness_swigregister(StepFEA_FeaShellBendingStiffness)

class StepFEA_FeaShellMembraneBendingCouplingStiffness(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaShellMembraneBendingCouplingStiffness, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaShellMembraneBendingCouplingStiffness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaShellMembraneBendingCouplingStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstants(self, *args) -> "StepFEA_SymmetricTensor42d":
        """
        Returns field feaconstants.

        Returns
        -------
        StepFEA_SymmetricTensor42d

        """
        return _StepFEA.StepFEA_FeaShellMembraneBendingCouplingStiffness_FeaConstants(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstants: StepFEA_SymmetricTensor42d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaShellMembraneBendingCouplingStiffness_Init(self, *args)


    def SetFeaConstants(self, *args) -> "void":
        """
        Set field feaconstants.

        Parameters
        ----------
        FeaConstants: StepFEA_SymmetricTensor42d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaShellMembraneBendingCouplingStiffness_SetFeaConstants(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaShellMembraneBendingCouplingStiffness
    __del__ = lambda self: None
StepFEA_FeaShellMembraneBendingCouplingStiffness_swigregister = _StepFEA.StepFEA_FeaShellMembraneBendingCouplingStiffness_swigregister
StepFEA_FeaShellMembraneBendingCouplingStiffness_swigregister(StepFEA_FeaShellMembraneBendingCouplingStiffness)

class StepFEA_FeaShellMembraneStiffness(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaShellMembraneStiffness, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaShellMembraneStiffness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaShellMembraneStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstants(self, *args) -> "StepFEA_SymmetricTensor42d":
        """
        Returns field feaconstants.

        Returns
        -------
        StepFEA_SymmetricTensor42d

        """
        return _StepFEA.StepFEA_FeaShellMembraneStiffness_FeaConstants(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstants: StepFEA_SymmetricTensor42d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaShellMembraneStiffness_Init(self, *args)


    def SetFeaConstants(self, *args) -> "void":
        """
        Set field feaconstants.

        Parameters
        ----------
        FeaConstants: StepFEA_SymmetricTensor42d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaShellMembraneStiffness_SetFeaConstants(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaShellMembraneStiffness_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaShellMembraneStiffness
    __del__ = lambda self: None
StepFEA_FeaShellMembraneStiffness_swigregister = _StepFEA.StepFEA_FeaShellMembraneStiffness_swigregister
StepFEA_FeaShellMembraneStiffness_swigregister(StepFEA_FeaShellMembraneStiffness)

class StepFEA_FeaShellShearStiffness(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaShellShearStiffness, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaShellShearStiffness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaShellShearStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstants(self, *args) -> "StepFEA_SymmetricTensor22d":
        """
        Returns field feaconstants.

        Returns
        -------
        StepFEA_SymmetricTensor22d

        """
        return _StepFEA.StepFEA_FeaShellShearStiffness_FeaConstants(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstants: StepFEA_SymmetricTensor22d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaShellShearStiffness_Init(self, *args)


    def SetFeaConstants(self, *args) -> "void":
        """
        Set field feaconstants.

        Parameters
        ----------
        FeaConstants: StepFEA_SymmetricTensor22d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaShellShearStiffness_SetFeaConstants(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaShellShearStiffness_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaShellShearStiffness
    __del__ = lambda self: None
StepFEA_FeaShellShearStiffness_swigregister = _StepFEA.StepFEA_FeaShellShearStiffness_swigregister
StepFEA_FeaShellShearStiffness_swigregister(StepFEA_FeaShellShearStiffness)

class StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion(StepFEA_FeaMaterialPropertyRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaMaterialPropertyRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FeaConstants(self, *args) -> "StepFEA_SymmetricTensor23d":
        """
        Returns field feaconstants.

        Returns
        -------
        StepFEA_SymmetricTensor23d

        """
        return _StepFEA.StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_FeaConstants(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFeaConstants: StepFEA_SymmetricTensor23d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_Init(self, *args)


    def SetFeaConstants(self, *args) -> "void":
        """
        Set field feaconstants.

        Parameters
        ----------
        FeaConstants: StepFEA_SymmetricTensor23d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_SetFeaConstants(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion
    __del__ = lambda self: None
StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_swigregister = _StepFEA.StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_swigregister
StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion_swigregister(StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion)

class StepFEA_GeometricNode(StepFEA_NodeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepFEA_NodeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_GeometricNode, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_NodeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_GeometricNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_GeometricNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_GeometricNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_GeometricNode
    __del__ = lambda self: None
StepFEA_GeometricNode_swigregister = _StepFEA.StepFEA_GeometricNode_swigregister
StepFEA_GeometricNode_swigregister(StepFEA_GeometricNode)

class StepFEA_Node(StepFEA_NodeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepFEA_NodeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Node, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_NodeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Node, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_Node_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_Node
    __del__ = lambda self: None
StepFEA_Node_swigregister = _StepFEA.StepFEA_Node_swigregister
StepFEA_Node_swigregister(StepFEA_Node)

class StepFEA_NodeGroup(StepFEA_FeaGroup):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaGroup]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_NodeGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaGroup]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_NodeGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_NodeGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aGroup_Name: TCollection_HAsciiString
        aGroup_Description: TCollection_HAsciiString
        aFeaGroup_ModelRef: StepFEA_FeaModel
        aNodes: StepFEA_HArray1OfNodeRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_NodeGroup_Init(self, *args)


    def Nodes(self, *args) -> "opencascade::handle< StepFEA_HArray1OfNodeRepresentation >":
        """
        Returns field nodes.

        Returns
        -------
        opencascade::handle<StepFEA_HArray1OfNodeRepresentation>

        """
        return _StepFEA.StepFEA_NodeGroup_Nodes(self, *args)


    def SetNodes(self, *args) -> "void":
        """
        Set field nodes.

        Parameters
        ----------
        Nodes: StepFEA_HArray1OfNodeRepresentation

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_NodeGroup_SetNodes(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_NodeGroup_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_NodeGroup
    __del__ = lambda self: None
StepFEA_NodeGroup_swigregister = _StepFEA.StepFEA_NodeGroup_swigregister
StepFEA_NodeGroup_swigregister(StepFEA_NodeGroup)

class StepFEA_ParametricCurve3dElementCoordinateDirection(StepFEA_FeaRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ParametricCurve3dElementCoordinateDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ParametricCurve3dElementCoordinateDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ParametricCurve3dElementCoordinateDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aOrientation: StepGeom_Direction

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ParametricCurve3dElementCoordinateDirection_Init(self, *args)


    def Orientation(self, *args) -> "opencascade::handle< StepGeom_Direction >":
        """
        Returns field orientation.

        Returns
        -------
        opencascade::handle<StepGeom_Direction>

        """
        return _StepFEA.StepFEA_ParametricCurve3dElementCoordinateDirection_Orientation(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        Set field orientation.

        Parameters
        ----------
        Orientation: StepGeom_Direction

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ParametricCurve3dElementCoordinateDirection_SetOrientation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_ParametricCurve3dElementCoordinateDirection_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ParametricCurve3dElementCoordinateDirection
    __del__ = lambda self: None
StepFEA_ParametricCurve3dElementCoordinateDirection_swigregister = _StepFEA.StepFEA_ParametricCurve3dElementCoordinateDirection_swigregister
StepFEA_ParametricCurve3dElementCoordinateDirection_swigregister(StepFEA_ParametricCurve3dElementCoordinateDirection)

class StepFEA_ParametricCurve3dElementCoordinateSystem(StepFEA_FeaRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ParametricCurve3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ParametricCurve3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ParametricCurve3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Direction(self, *args) -> "opencascade::handle< StepFEA_ParametricCurve3dElementCoordinateDirection >":
        """
        Returns field direction.

        Returns
        -------
        opencascade::handle<StepFEA_ParametricCurve3dElementCoordinateDirection>

        """
        return _StepFEA.StepFEA_ParametricCurve3dElementCoordinateSystem_Direction(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aDirection: StepFEA_ParametricCurve3dElementCoordinateDirection

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ParametricCurve3dElementCoordinateSystem_Init(self, *args)


    def SetDirection(self, *args) -> "void":
        """
        Set field direction.

        Parameters
        ----------
        Direction: StepFEA_ParametricCurve3dElementCoordinateDirection

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ParametricCurve3dElementCoordinateSystem_SetDirection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_ParametricCurve3dElementCoordinateSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ParametricCurve3dElementCoordinateSystem
    __del__ = lambda self: None
StepFEA_ParametricCurve3dElementCoordinateSystem_swigregister = _StepFEA.StepFEA_ParametricCurve3dElementCoordinateSystem_swigregister
StepFEA_ParametricCurve3dElementCoordinateSystem_swigregister(StepFEA_ParametricCurve3dElementCoordinateSystem)

class StepFEA_ParametricSurface3dElementCoordinateSystem(StepFEA_FeaRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_ParametricSurface3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_FeaRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_ParametricSurface3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_ParametricSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angle(self, *args) -> "Standard_Real":
        """
        Returns field angle.

        Returns
        -------
        float

        """
        return _StepFEA.StepFEA_ParametricSurface3dElementCoordinateSystem_Angle(self, *args)


    def Axis(self, *args) -> "Standard_Integer":
        """
        Returns field axis.

        Returns
        -------
        int

        """
        return _StepFEA.StepFEA_ParametricSurface3dElementCoordinateSystem_Axis(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aAxis: int
        aAngle: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ParametricSurface3dElementCoordinateSystem_Init(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        Set field angle.

        Parameters
        ----------
        Angle: float

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ParametricSurface3dElementCoordinateSystem_SetAngle(self, *args)


    def SetAxis(self, *args) -> "void":
        """
        Set field axis.

        Parameters
        ----------
        Axis: int

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_ParametricSurface3dElementCoordinateSystem_SetAxis(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_ParametricSurface3dElementCoordinateSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_ParametricSurface3dElementCoordinateSystem
    __del__ = lambda self: None
StepFEA_ParametricSurface3dElementCoordinateSystem_swigregister = _StepFEA.StepFEA_ParametricSurface3dElementCoordinateSystem_swigregister
StepFEA_ParametricSurface3dElementCoordinateSystem_swigregister(StepFEA_ParametricSurface3dElementCoordinateSystem)

class StepFEA_Surface3dElementRepresentation(StepFEA_ElementRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepFEA_ElementRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Surface3dElementRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_ElementRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Surface3dElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_Surface3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ElementDescriptor(self, *args) -> "opencascade::handle< StepElement_Surface3dElementDescriptor >":
        """
        Returns field elementdescriptor.

        Returns
        -------
        opencascade::handle<StepElement_Surface3dElementDescriptor>

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_ElementDescriptor(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentation_Name: TCollection_HAsciiString
        aRepresentation_Items: StepRepr_HArray1OfRepresentationItem
        aRepresentation_ContextOfItems: StepRepr_RepresentationContext
        aElementRepresentation_NodeList: StepFEA_HArray1OfNodeRepresentation
        aModelRef: StepFEA_FeaModel3d
        aElementDescriptor: StepElement_Surface3dElementDescriptor
        aProperty: StepElement_SurfaceElementProperty
        aMaterial: StepElement_ElementMaterial

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_Init(self, *args)


    def Material(self, *args) -> "opencascade::handle< StepElement_ElementMaterial >":
        """
        Returns field material.

        Returns
        -------
        opencascade::handle<StepElement_ElementMaterial>

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_Material(self, *args)


    def ModelRef(self, *args) -> "opencascade::handle< StepFEA_FeaModel3d >":
        """
        Returns field modelref.

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel3d>

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_ModelRef(self, *args)


    def Property(self, *args) -> "opencascade::handle< StepElement_SurfaceElementProperty >":
        """
        Returns field property.

        Returns
        -------
        opencascade::handle<StepElement_SurfaceElementProperty>

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_Property(self, *args)


    def SetElementDescriptor(self, *args) -> "void":
        """
        Set field elementdescriptor.

        Parameters
        ----------
        ElementDescriptor: StepElement_Surface3dElementDescriptor

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_SetElementDescriptor(self, *args)


    def SetMaterial(self, *args) -> "void":
        """
        Set field material.

        Parameters
        ----------
        Material: StepElement_ElementMaterial

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_SetMaterial(self, *args)


    def SetModelRef(self, *args) -> "void":
        """
        Set field modelref.

        Parameters
        ----------
        ModelRef: StepFEA_FeaModel3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_SetModelRef(self, *args)


    def SetProperty(self, *args) -> "void":
        """
        Set field property.

        Parameters
        ----------
        Property: StepElement_SurfaceElementProperty

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Surface3dElementRepresentation_SetProperty(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_Surface3dElementRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_Surface3dElementRepresentation
    __del__ = lambda self: None
StepFEA_Surface3dElementRepresentation_swigregister = _StepFEA.StepFEA_Surface3dElementRepresentation_swigregister
StepFEA_Surface3dElementRepresentation_swigregister(StepFEA_Surface3dElementRepresentation)

class StepFEA_Volume3dElementRepresentation(StepFEA_ElementRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepFEA_ElementRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_Volume3dElementRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_ElementRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_Volume3dElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_Volume3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ElementDescriptor(self, *args) -> "opencascade::handle< StepElement_Volume3dElementDescriptor >":
        """
        Returns field elementdescriptor.

        Returns
        -------
        opencascade::handle<StepElement_Volume3dElementDescriptor>

        """
        return _StepFEA.StepFEA_Volume3dElementRepresentation_ElementDescriptor(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentation_Name: TCollection_HAsciiString
        aRepresentation_Items: StepRepr_HArray1OfRepresentationItem
        aRepresentation_ContextOfItems: StepRepr_RepresentationContext
        aElementRepresentation_NodeList: StepFEA_HArray1OfNodeRepresentation
        aModelRef: StepFEA_FeaModel3d
        aElementDescriptor: StepElement_Volume3dElementDescriptor
        aMaterial: StepElement_ElementMaterial

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Volume3dElementRepresentation_Init(self, *args)


    def Material(self, *args) -> "opencascade::handle< StepElement_ElementMaterial >":
        """
        Returns field material.

        Returns
        -------
        opencascade::handle<StepElement_ElementMaterial>

        """
        return _StepFEA.StepFEA_Volume3dElementRepresentation_Material(self, *args)


    def ModelRef(self, *args) -> "opencascade::handle< StepFEA_FeaModel3d >":
        """
        Returns field modelref.

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel3d>

        """
        return _StepFEA.StepFEA_Volume3dElementRepresentation_ModelRef(self, *args)


    def SetElementDescriptor(self, *args) -> "void":
        """
        Set field elementdescriptor.

        Parameters
        ----------
        ElementDescriptor: StepElement_Volume3dElementDescriptor

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Volume3dElementRepresentation_SetElementDescriptor(self, *args)


    def SetMaterial(self, *args) -> "void":
        """
        Set field material.

        Parameters
        ----------
        Material: StepElement_ElementMaterial

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Volume3dElementRepresentation_SetMaterial(self, *args)


    def SetModelRef(self, *args) -> "void":
        """
        Set field modelref.

        Parameters
        ----------
        ModelRef: StepFEA_FeaModel3d

        Returns
        -------
        None

        """
        return _StepFEA.StepFEA_Volume3dElementRepresentation_SetModelRef(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_Volume3dElementRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_Volume3dElementRepresentation
    __del__ = lambda self: None
StepFEA_Volume3dElementRepresentation_swigregister = _StepFEA.StepFEA_Volume3dElementRepresentation_swigregister
StepFEA_Volume3dElementRepresentation_swigregister(StepFEA_Volume3dElementRepresentation)

class StepFEA_NodeWithSolutionCoordinateSystem(StepFEA_Node):
    __swig_setmethods__ = {}
    for _s in [StepFEA_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_NodeWithSolutionCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_NodeWithSolutionCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_NodeWithSolutionCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_NodeWithSolutionCoordinateSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_NodeWithSolutionCoordinateSystem
    __del__ = lambda self: None
StepFEA_NodeWithSolutionCoordinateSystem_swigregister = _StepFEA.StepFEA_NodeWithSolutionCoordinateSystem_swigregister
StepFEA_NodeWithSolutionCoordinateSystem_swigregister(StepFEA_NodeWithSolutionCoordinateSystem)

class StepFEA_NodeWithVector(StepFEA_Node):
    __swig_setmethods__ = {}
    for _s in [StepFEA_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_NodeWithVector, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_NodeWithVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepFEA.new_StepFEA_NodeWithVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_NodeWithVector_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepFEA.delete_StepFEA_NodeWithVector
    __del__ = lambda self: None
StepFEA_NodeWithVector_swigregister = _StepFEA.StepFEA_NodeWithVector_swigregister
StepFEA_NodeWithVector_swigregister(StepFEA_NodeWithVector)

class StepFEA_HArray1OfCurveElementInterval(StepFEA_Array1OfCurveElementInterval, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_Array1OfCurveElementInterval, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HArray1OfCurveElementInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_Array1OfCurveElementInterval, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HArray1OfCurveElementInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HArray1OfCurveElementInterval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepFEA_Array1OfCurveElementInterval const &":
        return _StepFEA.StepFEA_HArray1OfCurveElementInterval_Array1(self)

    def ChangeArray1(self) -> "StepFEA_Array1OfCurveElementInterval &":
        return _StepFEA.StepFEA_HArray1OfCurveElementInterval_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HArray1OfCurveElementInterval_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HArray1OfCurveElementInterval
    __del__ = lambda self: None
StepFEA_HArray1OfCurveElementInterval_swigregister = _StepFEA.StepFEA_HArray1OfCurveElementInterval_swigregister
StepFEA_HArray1OfCurveElementInterval_swigregister(StepFEA_HArray1OfCurveElementInterval)

class StepFEA_HArray1OfCurveElementEndOffset(StepFEA_Array1OfCurveElementEndOffset, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_Array1OfCurveElementEndOffset, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HArray1OfCurveElementEndOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_Array1OfCurveElementEndOffset, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HArray1OfCurveElementEndOffset, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HArray1OfCurveElementEndOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepFEA_Array1OfCurveElementEndOffset const &":
        return _StepFEA.StepFEA_HArray1OfCurveElementEndOffset_Array1(self)

    def ChangeArray1(self) -> "StepFEA_Array1OfCurveElementEndOffset &":
        return _StepFEA.StepFEA_HArray1OfCurveElementEndOffset_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HArray1OfCurveElementEndOffset_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HArray1OfCurveElementEndOffset
    __del__ = lambda self: None
StepFEA_HArray1OfCurveElementEndOffset_swigregister = _StepFEA.StepFEA_HArray1OfCurveElementEndOffset_swigregister
StepFEA_HArray1OfCurveElementEndOffset_swigregister(StepFEA_HArray1OfCurveElementEndOffset)

class StepFEA_HArray1OfElementRepresentation(StepFEA_Array1OfElementRepresentation, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_Array1OfElementRepresentation, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HArray1OfElementRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_Array1OfElementRepresentation, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HArray1OfElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HArray1OfElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepFEA_Array1OfElementRepresentation const &":
        return _StepFEA.StepFEA_HArray1OfElementRepresentation_Array1(self)

    def ChangeArray1(self) -> "StepFEA_Array1OfElementRepresentation &":
        return _StepFEA.StepFEA_HArray1OfElementRepresentation_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HArray1OfElementRepresentation_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HArray1OfElementRepresentation
    __del__ = lambda self: None
StepFEA_HArray1OfElementRepresentation_swigregister = _StepFEA.StepFEA_HArray1OfElementRepresentation_swigregister
StepFEA_HArray1OfElementRepresentation_swigregister(StepFEA_HArray1OfElementRepresentation)

class StepFEA_HArray1OfCurveElementEndRelease(StepFEA_Array1OfCurveElementEndRelease, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_Array1OfCurveElementEndRelease, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HArray1OfCurveElementEndRelease, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_Array1OfCurveElementEndRelease, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HArray1OfCurveElementEndRelease, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HArray1OfCurveElementEndRelease(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepFEA_Array1OfCurveElementEndRelease const &":
        return _StepFEA.StepFEA_HArray1OfCurveElementEndRelease_Array1(self)

    def ChangeArray1(self) -> "StepFEA_Array1OfCurveElementEndRelease &":
        return _StepFEA.StepFEA_HArray1OfCurveElementEndRelease_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HArray1OfCurveElementEndRelease_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HArray1OfCurveElementEndRelease
    __del__ = lambda self: None
StepFEA_HArray1OfCurveElementEndRelease_swigregister = _StepFEA.StepFEA_HArray1OfCurveElementEndRelease_swigregister
StepFEA_HArray1OfCurveElementEndRelease_swigregister(StepFEA_HArray1OfCurveElementEndRelease)

class StepFEA_HArray1OfDegreeOfFreedom(StepFEA_Array1OfDegreeOfFreedom, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_Array1OfDegreeOfFreedom, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HArray1OfDegreeOfFreedom, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_Array1OfDegreeOfFreedom, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HArray1OfDegreeOfFreedom, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HArray1OfDegreeOfFreedom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepFEA_Array1OfDegreeOfFreedom const &":
        return _StepFEA.StepFEA_HArray1OfDegreeOfFreedom_Array1(self)

    def ChangeArray1(self) -> "StepFEA_Array1OfDegreeOfFreedom &":
        return _StepFEA.StepFEA_HArray1OfDegreeOfFreedom_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HArray1OfDegreeOfFreedom_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HArray1OfDegreeOfFreedom
    __del__ = lambda self: None
StepFEA_HArray1OfDegreeOfFreedom_swigregister = _StepFEA.StepFEA_HArray1OfDegreeOfFreedom_swigregister
StepFEA_HArray1OfDegreeOfFreedom_swigregister(StepFEA_HArray1OfDegreeOfFreedom)

class StepFEA_HArray1OfNodeRepresentation(StepFEA_Array1OfNodeRepresentation, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_Array1OfNodeRepresentation, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HArray1OfNodeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_Array1OfNodeRepresentation, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HArray1OfNodeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HArray1OfNodeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepFEA_Array1OfNodeRepresentation const &":
        return _StepFEA.StepFEA_HArray1OfNodeRepresentation_Array1(self)

    def ChangeArray1(self) -> "StepFEA_Array1OfNodeRepresentation &":
        return _StepFEA.StepFEA_HArray1OfNodeRepresentation_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HArray1OfNodeRepresentation_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HArray1OfNodeRepresentation
    __del__ = lambda self: None
StepFEA_HArray1OfNodeRepresentation_swigregister = _StepFEA.StepFEA_HArray1OfNodeRepresentation_swigregister
StepFEA_HArray1OfNodeRepresentation_swigregister(StepFEA_HArray1OfNodeRepresentation)

class StepFEA_HSequenceOfElementRepresentation(StepFEA_SequenceOfElementRepresentation, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_SequenceOfElementRepresentation, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HSequenceOfElementRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_SequenceOfElementRepresentation, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HSequenceOfElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HSequenceOfElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "StepFEA_SequenceOfElementRepresentation const &":
        return _StepFEA.StepFEA_HSequenceOfElementRepresentation_Sequence(self)

    def Append(self, *args) -> "void":
        return _StepFEA.StepFEA_HSequenceOfElementRepresentation_Append(self, *args)

    def ChangeSequence(self) -> "StepFEA_SequenceOfElementRepresentation &":
        return _StepFEA.StepFEA_HSequenceOfElementRepresentation_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HSequenceOfElementRepresentation_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HSequenceOfElementRepresentation
    __del__ = lambda self: None
StepFEA_HSequenceOfElementRepresentation_swigregister = _StepFEA.StepFEA_HSequenceOfElementRepresentation_swigregister
StepFEA_HSequenceOfElementRepresentation_swigregister(StepFEA_HSequenceOfElementRepresentation)

class StepFEA_HSequenceOfElementGeometricRelationship(StepFEA_SequenceOfElementGeometricRelationship, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_SequenceOfElementGeometricRelationship, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HSequenceOfElementGeometricRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_SequenceOfElementGeometricRelationship, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HSequenceOfElementGeometricRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HSequenceOfElementGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "StepFEA_SequenceOfElementGeometricRelationship const &":
        return _StepFEA.StepFEA_HSequenceOfElementGeometricRelationship_Sequence(self)

    def Append(self, *args) -> "void":
        return _StepFEA.StepFEA_HSequenceOfElementGeometricRelationship_Append(self, *args)

    def ChangeSequence(self) -> "StepFEA_SequenceOfElementGeometricRelationship &":
        return _StepFEA.StepFEA_HSequenceOfElementGeometricRelationship_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HSequenceOfElementGeometricRelationship_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HSequenceOfElementGeometricRelationship
    __del__ = lambda self: None
StepFEA_HSequenceOfElementGeometricRelationship_swigregister = _StepFEA.StepFEA_HSequenceOfElementGeometricRelationship_swigregister
StepFEA_HSequenceOfElementGeometricRelationship_swigregister(StepFEA_HSequenceOfElementGeometricRelationship)

class StepFEA_HSequenceOfNodeRepresentation(StepFEA_SequenceOfNodeRepresentation, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_SequenceOfNodeRepresentation, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HSequenceOfNodeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_SequenceOfNodeRepresentation, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HSequenceOfNodeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HSequenceOfNodeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "StepFEA_SequenceOfNodeRepresentation const &":
        return _StepFEA.StepFEA_HSequenceOfNodeRepresentation_Sequence(self)

    def Append(self, *args) -> "void":
        return _StepFEA.StepFEA_HSequenceOfNodeRepresentation_Append(self, *args)

    def ChangeSequence(self) -> "StepFEA_SequenceOfNodeRepresentation &":
        return _StepFEA.StepFEA_HSequenceOfNodeRepresentation_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HSequenceOfNodeRepresentation_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HSequenceOfNodeRepresentation
    __del__ = lambda self: None
StepFEA_HSequenceOfNodeRepresentation_swigregister = _StepFEA.StepFEA_HSequenceOfNodeRepresentation_swigregister
StepFEA_HSequenceOfNodeRepresentation_swigregister(StepFEA_HSequenceOfNodeRepresentation)

class StepFEA_HSequenceOfCurve3dElementProperty(StepFEA_SequenceOfCurve3dElementProperty, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepFEA_SequenceOfCurve3dElementProperty, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepFEA_HSequenceOfCurve3dElementProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [StepFEA_SequenceOfCurve3dElementProperty, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepFEA_HSequenceOfCurve3dElementProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepFEA.new_StepFEA_HSequenceOfCurve3dElementProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "StepFEA_SequenceOfCurve3dElementProperty const &":
        return _StepFEA.StepFEA_HSequenceOfCurve3dElementProperty_Sequence(self)

    def Append(self, *args) -> "void":
        return _StepFEA.StepFEA_HSequenceOfCurve3dElementProperty_Append(self, *args)

    def ChangeSequence(self) -> "StepFEA_SequenceOfCurve3dElementProperty &":
        return _StepFEA.StepFEA_HSequenceOfCurve3dElementProperty_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepFEA_HSequenceOfCurve3dElementProperty_DownCast(t)

    __swig_destroy__ = _StepFEA.delete_StepFEA_HSequenceOfCurve3dElementProperty
    __del__ = lambda self: None
StepFEA_HSequenceOfCurve3dElementProperty_swigregister = _StepFEA.StepFEA_HSequenceOfCurve3dElementProperty_swigregister
StepFEA_HSequenceOfCurve3dElementProperty_swigregister(StepFEA_HSequenceOfCurve3dElementProperty)



# This file is compatible with both classic and new-style classes.


