# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWStepFEA module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwstepfea.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepFEA')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepFEA')
    _RWStepFEA = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepFEA', [dirname(__file__)])
        except ImportError:
            import _RWStepFEA
            return _RWStepFEA
        try:
            _mod = imp.load_module('_RWStepFEA', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepFEA = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepFEA
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepFEA.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _RWStepFEA.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWStepFEA.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWStepFEA.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _RWStepFEA.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepFEA.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _RWStepFEA.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _RWStepFEA.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _RWStepFEA.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _RWStepFEA.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWStepFEA.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepFEA.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepFEA.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWStepFEA.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWStepFEA.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWStepFEA.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _RWStepFEA.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepFEA.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWStepFEA.process_exception(error, method_name, class_name)
process_exception = _RWStepFEA.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepFEA
import OCC.Core.StepElement
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.StepGeom

from enum import IntEnum
from OCC.Core.Exception import *



class RWStepFEA_RWAlignedCurve3dElementCoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWAlignedCurve3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWAlignedCurve3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWAlignedCurve3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads alignedcurve3delementcoordinatesystem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_AlignedCurve3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_AlignedCurve3dElementCoordinateSystem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes alignedcurve3delementcoordinatesystem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_AlignedCurve3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWAlignedCurve3dElementCoordinateSystem
    __del__ = lambda self: None
RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_swigregister
RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_swigregister(RWStepFEA_RWAlignedCurve3dElementCoordinateSystem)

class RWStepFEA_RWAlignedSurface3dElementCoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWAlignedSurface3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWAlignedSurface3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWAlignedSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads alignedsurface3delementcoordinatesystem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_AlignedSurface3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_AlignedSurface3dElementCoordinateSystem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes alignedsurface3delementcoordinatesystem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_AlignedSurface3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWAlignedSurface3dElementCoordinateSystem
    __del__ = lambda self: None
RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_swigregister
RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_swigregister(RWStepFEA_RWAlignedSurface3dElementCoordinateSystem)

class RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads arbitraryvolume3delementcoordinatesystem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_ArbitraryVolume3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_ArbitraryVolume3dElementCoordinateSystem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes arbitraryvolume3delementcoordinatesystem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_ArbitraryVolume3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem
    __del__ = lambda self: None
RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_swigregister
RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_swigregister(RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem)

class RWStepFEA_RWConstantSurface3dElementCoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWConstantSurface3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWConstantSurface3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWConstantSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads constantsurface3delementcoordinatesystem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_ConstantSurface3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWConstantSurface3dElementCoordinateSystem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_ConstantSurface3dElementCoordinateSystem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWConstantSurface3dElementCoordinateSystem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes constantsurface3delementcoordinatesystem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_ConstantSurface3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWConstantSurface3dElementCoordinateSystem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWConstantSurface3dElementCoordinateSystem
    __del__ = lambda self: None
RWStepFEA_RWConstantSurface3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWConstantSurface3dElementCoordinateSystem_swigregister
RWStepFEA_RWConstantSurface3dElementCoordinateSystem_swigregister(RWStepFEA_RWConstantSurface3dElementCoordinateSystem)

class RWStepFEA_RWCurve3dElementProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWCurve3dElementProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWCurve3dElementProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWCurve3dElementProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads curve3delementproperty.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_Curve3dElementProperty

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementProperty_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_Curve3dElementProperty
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementProperty_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes curve3delementproperty.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_Curve3dElementProperty

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementProperty_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurve3dElementProperty
    __del__ = lambda self: None
RWStepFEA_RWCurve3dElementProperty_swigregister = _RWStepFEA.RWStepFEA_RWCurve3dElementProperty_swigregister
RWStepFEA_RWCurve3dElementProperty_swigregister(RWStepFEA_RWCurve3dElementProperty)

class RWStepFEA_RWCurve3dElementRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWCurve3dElementRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWCurve3dElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWCurve3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads curve3delementrepresentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_Curve3dElementRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementRepresentation_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_Curve3dElementRepresentation
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementRepresentation_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes curve3delementrepresentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_Curve3dElementRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementRepresentation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurve3dElementRepresentation
    __del__ = lambda self: None
RWStepFEA_RWCurve3dElementRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWCurve3dElementRepresentation_swigregister
RWStepFEA_RWCurve3dElementRepresentation_swigregister(RWStepFEA_RWCurve3dElementRepresentation)

class RWStepFEA_RWCurveElementEndOffset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWCurveElementEndOffset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWCurveElementEndOffset, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementEndOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads curveelementendoffset.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_CurveElementEndOffset

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndOffset_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_CurveElementEndOffset
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndOffset_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes curveelementendoffset.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_CurveElementEndOffset

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndOffset_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementEndOffset
    __del__ = lambda self: None
RWStepFEA_RWCurveElementEndOffset_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementEndOffset_swigregister
RWStepFEA_RWCurveElementEndOffset_swigregister(RWStepFEA_RWCurveElementEndOffset)

class RWStepFEA_RWCurveElementEndRelease(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWCurveElementEndRelease, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWCurveElementEndRelease, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementEndRelease(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads curveelementendrelease.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_CurveElementEndRelease

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndRelease_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_CurveElementEndRelease
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndRelease_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes curveelementendrelease.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_CurveElementEndRelease

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndRelease_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementEndRelease
    __del__ = lambda self: None
RWStepFEA_RWCurveElementEndRelease_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementEndRelease_swigregister
RWStepFEA_RWCurveElementEndRelease_swigregister(RWStepFEA_RWCurveElementEndRelease)

class RWStepFEA_RWCurveElementInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWCurveElementInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWCurveElementInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementInterval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads curveelementinterval.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_CurveElementInterval

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementInterval_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_CurveElementInterval
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementInterval_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes curveelementinterval.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_CurveElementInterval

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementInterval_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementInterval
    __del__ = lambda self: None
RWStepFEA_RWCurveElementInterval_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementInterval_swigregister
RWStepFEA_RWCurveElementInterval_swigregister(RWStepFEA_RWCurveElementInterval)

class RWStepFEA_RWCurveElementIntervalConstant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWCurveElementIntervalConstant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWCurveElementIntervalConstant, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementIntervalConstant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads curveelementintervalconstant.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_CurveElementIntervalConstant

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalConstant_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_CurveElementIntervalConstant
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalConstant_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes curveelementintervalconstant.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_CurveElementIntervalConstant

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalConstant_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementIntervalConstant
    __del__ = lambda self: None
RWStepFEA_RWCurveElementIntervalConstant_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementIntervalConstant_swigregister
RWStepFEA_RWCurveElementIntervalConstant_swigregister(RWStepFEA_RWCurveElementIntervalConstant)

class RWStepFEA_RWCurveElementIntervalLinearlyVarying(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWCurveElementIntervalLinearlyVarying, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWCurveElementIntervalLinearlyVarying, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementIntervalLinearlyVarying(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads curveelementintervallinearlyvarying.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_CurveElementIntervalLinearlyVarying

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalLinearlyVarying_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_CurveElementIntervalLinearlyVarying
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalLinearlyVarying_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes curveelementintervallinearlyvarying.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_CurveElementIntervalLinearlyVarying

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalLinearlyVarying_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementIntervalLinearlyVarying
    __del__ = lambda self: None
RWStepFEA_RWCurveElementIntervalLinearlyVarying_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementIntervalLinearlyVarying_swigregister
RWStepFEA_RWCurveElementIntervalLinearlyVarying_swigregister(RWStepFEA_RWCurveElementIntervalLinearlyVarying)

class RWStepFEA_RWCurveElementLocation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWCurveElementLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWCurveElementLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads curveelementlocation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_CurveElementLocation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementLocation_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_CurveElementLocation
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementLocation_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes curveelementlocation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_CurveElementLocation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementLocation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementLocation
    __del__ = lambda self: None
RWStepFEA_RWCurveElementLocation_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementLocation_swigregister
RWStepFEA_RWCurveElementLocation_swigregister(RWStepFEA_RWCurveElementLocation)

class RWStepFEA_RWDummyNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWDummyNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWDummyNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWDummyNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads dummynode.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_DummyNode

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWDummyNode_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_DummyNode
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWDummyNode_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes dummynode.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_DummyNode

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWDummyNode_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWDummyNode
    __del__ = lambda self: None
RWStepFEA_RWDummyNode_swigregister = _RWStepFEA.RWStepFEA_RWDummyNode_swigregister
RWStepFEA_RWDummyNode_swigregister(RWStepFEA_RWDummyNode)

class RWStepFEA_RWElementGeometricRelationship(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWElementGeometricRelationship, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWElementGeometricRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWElementGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads elementgeometricrelationship.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_ElementGeometricRelationship

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementGeometricRelationship_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_ElementGeometricRelationship
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementGeometricRelationship_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes elementgeometricrelationship.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_ElementGeometricRelationship

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementGeometricRelationship_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWElementGeometricRelationship
    __del__ = lambda self: None
RWStepFEA_RWElementGeometricRelationship_swigregister = _RWStepFEA.RWStepFEA_RWElementGeometricRelationship_swigregister
RWStepFEA_RWElementGeometricRelationship_swigregister(RWStepFEA_RWElementGeometricRelationship)

class RWStepFEA_RWElementGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWElementGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWElementGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWElementGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads elementgroup.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_ElementGroup

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementGroup_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_ElementGroup
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementGroup_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes elementgroup.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_ElementGroup

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementGroup_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWElementGroup
    __del__ = lambda self: None
RWStepFEA_RWElementGroup_swigregister = _RWStepFEA.RWStepFEA_RWElementGroup_swigregister
RWStepFEA_RWElementGroup_swigregister(RWStepFEA_RWElementGroup)

class RWStepFEA_RWElementRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWElementRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads elementrepresentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_ElementRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementRepresentation_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_ElementRepresentation
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementRepresentation_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes elementrepresentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_ElementRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWElementRepresentation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWElementRepresentation
    __del__ = lambda self: None
RWStepFEA_RWElementRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWElementRepresentation_swigregister
RWStepFEA_RWElementRepresentation_swigregister(RWStepFEA_RWElementRepresentation)

class RWStepFEA_RWFeaAreaDensity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaAreaDensity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaAreaDensity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaAreaDensity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feaareadensity.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaAreaDensity

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaAreaDensity_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaAreaDensity
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaAreaDensity_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feaareadensity.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaAreaDensity

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaAreaDensity_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaAreaDensity
    __del__ = lambda self: None
RWStepFEA_RWFeaAreaDensity_swigregister = _RWStepFEA.RWStepFEA_RWFeaAreaDensity_swigregister
RWStepFEA_RWFeaAreaDensity_swigregister(RWStepFEA_RWFeaAreaDensity)

class RWStepFEA_RWFeaAxis2Placement3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaAxis2Placement3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaAxis2Placement3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaAxis2Placement3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feaaxis2placement3d.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaAxis2Placement3d

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaAxis2Placement3d_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaAxis2Placement3d
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaAxis2Placement3d_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feaaxis2placement3d.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaAxis2Placement3d

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaAxis2Placement3d_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaAxis2Placement3d
    __del__ = lambda self: None
RWStepFEA_RWFeaAxis2Placement3d_swigregister = _RWStepFEA.RWStepFEA_RWFeaAxis2Placement3d_swigregister
RWStepFEA_RWFeaAxis2Placement3d_swigregister(RWStepFEA_RWFeaAxis2Placement3d)

class RWStepFEA_RWFeaCurveSectionGeometricRelationship(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaCurveSectionGeometricRelationship, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaCurveSectionGeometricRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaCurveSectionGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feacurvesectiongeometricrelationship.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaCurveSectionGeometricRelationship

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaCurveSectionGeometricRelationship_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaCurveSectionGeometricRelationship
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaCurveSectionGeometricRelationship_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feacurvesectiongeometricrelationship.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaCurveSectionGeometricRelationship

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaCurveSectionGeometricRelationship_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaCurveSectionGeometricRelationship
    __del__ = lambda self: None
RWStepFEA_RWFeaCurveSectionGeometricRelationship_swigregister = _RWStepFEA.RWStepFEA_RWFeaCurveSectionGeometricRelationship_swigregister
RWStepFEA_RWFeaCurveSectionGeometricRelationship_swigregister(RWStepFEA_RWFeaCurveSectionGeometricRelationship)

class RWStepFEA_RWFeaGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feagroup.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaGroup

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaGroup_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaGroup
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaGroup_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feagroup.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaGroup

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaGroup_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaGroup
    __del__ = lambda self: None
RWStepFEA_RWFeaGroup_swigregister = _RWStepFEA.RWStepFEA_RWFeaGroup_swigregister
RWStepFEA_RWFeaGroup_swigregister(RWStepFEA_RWFeaGroup)

class RWStepFEA_RWFeaLinearElasticity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaLinearElasticity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaLinearElasticity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaLinearElasticity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads fealinearelasticity.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaLinearElasticity

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaLinearElasticity_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaLinearElasticity
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaLinearElasticity_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes fealinearelasticity.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaLinearElasticity

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaLinearElasticity_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaLinearElasticity
    __del__ = lambda self: None
RWStepFEA_RWFeaLinearElasticity_swigregister = _RWStepFEA.RWStepFEA_RWFeaLinearElasticity_swigregister
RWStepFEA_RWFeaLinearElasticity_swigregister(RWStepFEA_RWFeaLinearElasticity)

class RWStepFEA_RWFeaMassDensity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaMassDensity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaMassDensity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaMassDensity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feamassdensity.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaMassDensity

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMassDensity_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaMassDensity
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMassDensity_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feamassdensity.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaMassDensity

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMassDensity_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaMassDensity
    __del__ = lambda self: None
RWStepFEA_RWFeaMassDensity_swigregister = _RWStepFEA.RWStepFEA_RWFeaMassDensity_swigregister
RWStepFEA_RWFeaMassDensity_swigregister(RWStepFEA_RWFeaMassDensity)

class RWStepFEA_RWFeaMaterialPropertyRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaMaterialPropertyRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaMaterialPropertyRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaMaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feamaterialpropertyrepresentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaMaterialPropertyRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentation_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaMaterialPropertyRepresentation
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentation_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feamaterialpropertyrepresentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaMaterialPropertyRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaMaterialPropertyRepresentation
    __del__ = lambda self: None
RWStepFEA_RWFeaMaterialPropertyRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentation_swigregister
RWStepFEA_RWFeaMaterialPropertyRepresentation_swigregister(RWStepFEA_RWFeaMaterialPropertyRepresentation)

class RWStepFEA_RWFeaMaterialPropertyRepresentationItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaMaterialPropertyRepresentationItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaMaterialPropertyRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaMaterialPropertyRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feamaterialpropertyrepresentationitem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaMaterialPropertyRepresentationItem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentationItem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaMaterialPropertyRepresentationItem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentationItem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feamaterialpropertyrepresentationitem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaMaterialPropertyRepresentationItem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentationItem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaMaterialPropertyRepresentationItem
    __del__ = lambda self: None
RWStepFEA_RWFeaMaterialPropertyRepresentationItem_swigregister = _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentationItem_swigregister
RWStepFEA_RWFeaMaterialPropertyRepresentationItem_swigregister(RWStepFEA_RWFeaMaterialPropertyRepresentationItem)

class RWStepFEA_RWFeaModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feamodel.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaModel

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaModel
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feamodel.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaModel

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaModel
    __del__ = lambda self: None
RWStepFEA_RWFeaModel_swigregister = _RWStepFEA.RWStepFEA_RWFeaModel_swigregister
RWStepFEA_RWFeaModel_swigregister(RWStepFEA_RWFeaModel)

class RWStepFEA_RWFeaModel3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaModel3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaModel3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaModel3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feamodel3d.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaModel3d

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel3d_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaModel3d
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel3d_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feamodel3d.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaModel3d

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel3d_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaModel3d
    __del__ = lambda self: None
RWStepFEA_RWFeaModel3d_swigregister = _RWStepFEA.RWStepFEA_RWFeaModel3d_swigregister
RWStepFEA_RWFeaModel3d_swigregister(RWStepFEA_RWFeaModel3d)

class RWStepFEA_RWFeaModelDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaModelDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaModelDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaModelDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feamodeldefinition.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaModelDefinition

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModelDefinition_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaModelDefinition
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModelDefinition_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feamodeldefinition.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaModelDefinition

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaModelDefinition_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaModelDefinition
    __del__ = lambda self: None
RWStepFEA_RWFeaModelDefinition_swigregister = _RWStepFEA.RWStepFEA_RWFeaModelDefinition_swigregister
RWStepFEA_RWFeaModelDefinition_swigregister(RWStepFEA_RWFeaModelDefinition)

class RWStepFEA_RWFeaMoistureAbsorption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaMoistureAbsorption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaMoistureAbsorption, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaMoistureAbsorption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feamoistureabsorption.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaMoistureAbsorption

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMoistureAbsorption_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaMoistureAbsorption
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMoistureAbsorption_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feamoistureabsorption.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaMoistureAbsorption

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaMoistureAbsorption_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaMoistureAbsorption
    __del__ = lambda self: None
RWStepFEA_RWFeaMoistureAbsorption_swigregister = _RWStepFEA.RWStepFEA_RWFeaMoistureAbsorption_swigregister
RWStepFEA_RWFeaMoistureAbsorption_swigregister(RWStepFEA_RWFeaMoistureAbsorption)

class RWStepFEA_RWFeaParametricPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaParametricPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaParametricPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaParametricPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feaparametricpoint.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaParametricPoint

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaParametricPoint_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaParametricPoint
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaParametricPoint_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feaparametricpoint.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaParametricPoint

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaParametricPoint_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaParametricPoint
    __del__ = lambda self: None
RWStepFEA_RWFeaParametricPoint_swigregister = _RWStepFEA.RWStepFEA_RWFeaParametricPoint_swigregister
RWStepFEA_RWFeaParametricPoint_swigregister(RWStepFEA_RWFeaParametricPoint)

class RWStepFEA_RWFeaRepresentationItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaRepresentationItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads fearepresentationitem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaRepresentationItem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaRepresentationItem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaRepresentationItem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaRepresentationItem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes fearepresentationitem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaRepresentationItem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaRepresentationItem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaRepresentationItem
    __del__ = lambda self: None
RWStepFEA_RWFeaRepresentationItem_swigregister = _RWStepFEA.RWStepFEA_RWFeaRepresentationItem_swigregister
RWStepFEA_RWFeaRepresentationItem_swigregister(RWStepFEA_RWFeaRepresentationItem)

class RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feasecantcoefficientoflinearthermalexpansion.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaSecantCoefficientOfLinearThermalExpansion

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaSecantCoefficientOfLinearThermalExpansion
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feasecantcoefficientoflinearthermalexpansion.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaSecantCoefficientOfLinearThermalExpansion

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion
    __del__ = lambda self: None
RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_swigregister = _RWStepFEA.RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_swigregister
RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_swigregister(RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion)

class RWStepFEA_RWFeaShellBendingStiffness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaShellBendingStiffness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaShellBendingStiffness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaShellBendingStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feashellbendingstiffness.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaShellBendingStiffness

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellBendingStiffness_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaShellBendingStiffness
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellBendingStiffness_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feashellbendingstiffness.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaShellBendingStiffness

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellBendingStiffness_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaShellBendingStiffness
    __del__ = lambda self: None
RWStepFEA_RWFeaShellBendingStiffness_swigregister = _RWStepFEA.RWStepFEA_RWFeaShellBendingStiffness_swigregister
RWStepFEA_RWFeaShellBendingStiffness_swigregister(RWStepFEA_RWFeaShellBendingStiffness)

class RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feashellmembranebendingcouplingstiffness.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaShellMembraneBendingCouplingStiffness

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaShellMembraneBendingCouplingStiffness
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feashellmembranebendingcouplingstiffness.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaShellMembraneBendingCouplingStiffness

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness
    __del__ = lambda self: None
RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_swigregister = _RWStepFEA.RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_swigregister
RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_swigregister(RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness)

class RWStepFEA_RWFeaShellMembraneStiffness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaShellMembraneStiffness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaShellMembraneStiffness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaShellMembraneStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feashellmembranestiffness.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaShellMembraneStiffness

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneStiffness_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaShellMembraneStiffness
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneStiffness_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feashellmembranestiffness.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaShellMembraneStiffness

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneStiffness_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaShellMembraneStiffness
    __del__ = lambda self: None
RWStepFEA_RWFeaShellMembraneStiffness_swigregister = _RWStepFEA.RWStepFEA_RWFeaShellMembraneStiffness_swigregister
RWStepFEA_RWFeaShellMembraneStiffness_swigregister(RWStepFEA_RWFeaShellMembraneStiffness)

class RWStepFEA_RWFeaShellShearStiffness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaShellShearStiffness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaShellShearStiffness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaShellShearStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feashellshearstiffness.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaShellShearStiffness

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellShearStiffness_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaShellShearStiffness
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellShearStiffness_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feashellshearstiffness.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaShellShearStiffness

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellShearStiffness_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaShellShearStiffness
    __del__ = lambda self: None
RWStepFEA_RWFeaShellShearStiffness_swigregister = _RWStepFEA.RWStepFEA_RWFeaShellShearStiffness_swigregister
RWStepFEA_RWFeaShellShearStiffness_swigregister(RWStepFEA_RWFeaShellShearStiffness)

class RWStepFEA_RWFeaSurfaceSectionGeometricRelationship(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaSurfaceSectionGeometricRelationship, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaSurfaceSectionGeometricRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaSurfaceSectionGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads feasurfacesectiongeometricrelationship.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaSurfaceSectionGeometricRelationship

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaSurfaceSectionGeometricRelationship
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes feasurfacesectiongeometricrelationship.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaSurfaceSectionGeometricRelationship

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaSurfaceSectionGeometricRelationship
    __del__ = lambda self: None
RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_swigregister = _RWStepFEA.RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_swigregister
RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_swigregister(RWStepFEA_RWFeaSurfaceSectionGeometricRelationship)

class RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads featangentialcoefficientoflinearthermalexpansion.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes featangentialcoefficientoflinearthermalexpansion.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion
    __del__ = lambda self: None
RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_swigregister = _RWStepFEA.RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_swigregister
RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_swigregister(RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion)

class RWStepFEA_RWFreedomAndCoefficient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFreedomAndCoefficient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFreedomAndCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFreedomAndCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads freedomandcoefficient.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FreedomAndCoefficient

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFreedomAndCoefficient_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FreedomAndCoefficient
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFreedomAndCoefficient_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes freedomandcoefficient.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FreedomAndCoefficient

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFreedomAndCoefficient_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFreedomAndCoefficient
    __del__ = lambda self: None
RWStepFEA_RWFreedomAndCoefficient_swigregister = _RWStepFEA.RWStepFEA_RWFreedomAndCoefficient_swigregister
RWStepFEA_RWFreedomAndCoefficient_swigregister(RWStepFEA_RWFreedomAndCoefficient)

class RWStepFEA_RWFreedomsList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWFreedomsList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWFreedomsList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWFreedomsList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads freedomslist.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_FreedomsList

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFreedomsList_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_FreedomsList
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFreedomsList_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes freedomslist.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_FreedomsList

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWFreedomsList_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFreedomsList
    __del__ = lambda self: None
RWStepFEA_RWFreedomsList_swigregister = _RWStepFEA.RWStepFEA_RWFreedomsList_swigregister
RWStepFEA_RWFreedomsList_swigregister(RWStepFEA_RWFreedomsList)

class RWStepFEA_RWGeometricNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWGeometricNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWGeometricNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWGeometricNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads geometricnode.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_GeometricNode

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWGeometricNode_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_GeometricNode
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWGeometricNode_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes geometricnode.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_GeometricNode

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWGeometricNode_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWGeometricNode
    __del__ = lambda self: None
RWStepFEA_RWGeometricNode_swigregister = _RWStepFEA.RWStepFEA_RWGeometricNode_swigregister
RWStepFEA_RWGeometricNode_swigregister(RWStepFEA_RWGeometricNode)

class RWStepFEA_RWNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads node.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_Node

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNode_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_Node
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNode_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes node.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_Node

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNode_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNode
    __del__ = lambda self: None
RWStepFEA_RWNode_swigregister = _RWStepFEA.RWStepFEA_RWNode_swigregister
RWStepFEA_RWNode_swigregister(RWStepFEA_RWNode)

class RWStepFEA_RWNodeDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWNodeDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWNodeDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads nodedefinition.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_NodeDefinition

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeDefinition_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_NodeDefinition
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeDefinition_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes nodedefinition.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_NodeDefinition

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeDefinition_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeDefinition
    __del__ = lambda self: None
RWStepFEA_RWNodeDefinition_swigregister = _RWStepFEA.RWStepFEA_RWNodeDefinition_swigregister
RWStepFEA_RWNodeDefinition_swigregister(RWStepFEA_RWNodeDefinition)

class RWStepFEA_RWNodeGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWNodeGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWNodeGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads nodegroup.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_NodeGroup

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeGroup_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_NodeGroup
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeGroup_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes nodegroup.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_NodeGroup

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeGroup_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeGroup
    __del__ = lambda self: None
RWStepFEA_RWNodeGroup_swigregister = _RWStepFEA.RWStepFEA_RWNodeGroup_swigregister
RWStepFEA_RWNodeGroup_swigregister(RWStepFEA_RWNodeGroup)

class RWStepFEA_RWNodeRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWNodeRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWNodeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads noderepresentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_NodeRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeRepresentation_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_NodeRepresentation
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeRepresentation_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes noderepresentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_NodeRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeRepresentation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeRepresentation
    __del__ = lambda self: None
RWStepFEA_RWNodeRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWNodeRepresentation_swigregister
RWStepFEA_RWNodeRepresentation_swigregister(RWStepFEA_RWNodeRepresentation)

class RWStepFEA_RWNodeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWNodeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWNodeSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads nodeset.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_NodeSet

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeSet_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_NodeSet
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeSet_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes nodeset.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_NodeSet

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeSet_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeSet
    __del__ = lambda self: None
RWStepFEA_RWNodeSet_swigregister = _RWStepFEA.RWStepFEA_RWNodeSet_swigregister
RWStepFEA_RWNodeSet_swigregister(RWStepFEA_RWNodeSet)

class RWStepFEA_RWNodeWithSolutionCoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWNodeWithSolutionCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWNodeWithSolutionCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeWithSolutionCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads nodewithsolutioncoordinatesystem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_NodeWithSolutionCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithSolutionCoordinateSystem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_NodeWithSolutionCoordinateSystem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithSolutionCoordinateSystem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes nodewithsolutioncoordinatesystem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_NodeWithSolutionCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithSolutionCoordinateSystem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeWithSolutionCoordinateSystem
    __del__ = lambda self: None
RWStepFEA_RWNodeWithSolutionCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWNodeWithSolutionCoordinateSystem_swigregister
RWStepFEA_RWNodeWithSolutionCoordinateSystem_swigregister(RWStepFEA_RWNodeWithSolutionCoordinateSystem)

class RWStepFEA_RWNodeWithVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWNodeWithVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWNodeWithVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeWithVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads nodewithvector.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_NodeWithVector

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithVector_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_NodeWithVector
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithVector_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes nodewithvector.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_NodeWithVector

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithVector_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeWithVector
    __del__ = lambda self: None
RWStepFEA_RWNodeWithVector_swigregister = _RWStepFEA.RWStepFEA_RWNodeWithVector_swigregister
RWStepFEA_RWNodeWithVector_swigregister(RWStepFEA_RWNodeWithVector)

class RWStepFEA_RWParametricCurve3dElementCoordinateDirection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWParametricCurve3dElementCoordinateDirection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWParametricCurve3dElementCoordinateDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWParametricCurve3dElementCoordinateDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads parametriccurve3delementcoordinatedirection.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_ParametricCurve3dElementCoordinateDirection

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateDirection_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_ParametricCurve3dElementCoordinateDirection
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateDirection_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes parametriccurve3delementcoordinatedirection.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_ParametricCurve3dElementCoordinateDirection

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateDirection_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWParametricCurve3dElementCoordinateDirection
    __del__ = lambda self: None
RWStepFEA_RWParametricCurve3dElementCoordinateDirection_swigregister = _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateDirection_swigregister
RWStepFEA_RWParametricCurve3dElementCoordinateDirection_swigregister(RWStepFEA_RWParametricCurve3dElementCoordinateDirection)

class RWStepFEA_RWParametricCurve3dElementCoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWParametricCurve3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWParametricCurve3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWParametricCurve3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads parametriccurve3delementcoordinatesystem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_ParametricCurve3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateSystem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_ParametricCurve3dElementCoordinateSystem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateSystem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes parametriccurve3delementcoordinatesystem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_ParametricCurve3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateSystem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWParametricCurve3dElementCoordinateSystem
    __del__ = lambda self: None
RWStepFEA_RWParametricCurve3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateSystem_swigregister
RWStepFEA_RWParametricCurve3dElementCoordinateSystem_swigregister(RWStepFEA_RWParametricCurve3dElementCoordinateSystem)

class RWStepFEA_RWParametricSurface3dElementCoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWParametricSurface3dElementCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWParametricSurface3dElementCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWParametricSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads parametricsurface3delementcoordinatesystem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_ParametricSurface3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricSurface3dElementCoordinateSystem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_ParametricSurface3dElementCoordinateSystem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricSurface3dElementCoordinateSystem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes parametricsurface3delementcoordinatesystem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_ParametricSurface3dElementCoordinateSystem

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWParametricSurface3dElementCoordinateSystem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWParametricSurface3dElementCoordinateSystem
    __del__ = lambda self: None
RWStepFEA_RWParametricSurface3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWParametricSurface3dElementCoordinateSystem_swigregister
RWStepFEA_RWParametricSurface3dElementCoordinateSystem_swigregister(RWStepFEA_RWParametricSurface3dElementCoordinateSystem)

class RWStepFEA_RWSurface3dElementRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWSurface3dElementRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWSurface3dElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWSurface3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads surface3delementrepresentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_Surface3dElementRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWSurface3dElementRepresentation_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_Surface3dElementRepresentation
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWSurface3dElementRepresentation_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes surface3delementrepresentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_Surface3dElementRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWSurface3dElementRepresentation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWSurface3dElementRepresentation
    __del__ = lambda self: None
RWStepFEA_RWSurface3dElementRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWSurface3dElementRepresentation_swigregister
RWStepFEA_RWSurface3dElementRepresentation_swigregister(RWStepFEA_RWSurface3dElementRepresentation)

class RWStepFEA_RWVolume3dElementRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepFEA_RWVolume3dElementRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepFEA_RWVolume3dElementRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepFEA.new_RWStepFEA_RWVolume3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads volume3delementrepresentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepFEA_Volume3dElementRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWVolume3dElementRepresentation_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepFEA_Volume3dElementRepresentation
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWVolume3dElementRepresentation_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes volume3delementrepresentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepFEA_Volume3dElementRepresentation

        Returns
        -------
        None

        """
        return _RWStepFEA.RWStepFEA_RWVolume3dElementRepresentation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWVolume3dElementRepresentation
    __del__ = lambda self: None
RWStepFEA_RWVolume3dElementRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWVolume3dElementRepresentation_swigregister
RWStepFEA_RWVolume3dElementRepresentation_swigregister(RWStepFEA_RWVolume3dElementRepresentation)



# This file is compatible with both classic and new-style classes.


