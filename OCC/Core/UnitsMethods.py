# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
UnitsMethods module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_unitsmethods.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _UnitsMethods
else:
    import _UnitsMethods

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UnitsMethods.delete_SwigPyIterator

    def value(self):
        return _UnitsMethods.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _UnitsMethods.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _UnitsMethods.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _UnitsMethods.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _UnitsMethods.SwigPyIterator_equal(self, x)

    def copy(self):
        return _UnitsMethods.SwigPyIterator_copy(self)

    def next(self):
        return _UnitsMethods.SwigPyIterator_next(self)

    def __next__(self):
        return _UnitsMethods.SwigPyIterator___next__(self)

    def previous(self):
        return _UnitsMethods.SwigPyIterator_previous(self)

    def advance(self, n):
        return _UnitsMethods.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _UnitsMethods.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _UnitsMethods.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _UnitsMethods.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _UnitsMethods.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _UnitsMethods.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _UnitsMethods.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _UnitsMethods:
_UnitsMethods.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _UnitsMethods.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection

from enum import IntEnum
from OCC.Core.Exception import *

UnitsMethods_LengthUnit_Undefined = _UnitsMethods.UnitsMethods_LengthUnit_Undefined
UnitsMethods_LengthUnit_Inch = _UnitsMethods.UnitsMethods_LengthUnit_Inch
UnitsMethods_LengthUnit_Millimeter = _UnitsMethods.UnitsMethods_LengthUnit_Millimeter
UnitsMethods_LengthUnit_Foot = _UnitsMethods.UnitsMethods_LengthUnit_Foot
UnitsMethods_LengthUnit_Mile = _UnitsMethods.UnitsMethods_LengthUnit_Mile
UnitsMethods_LengthUnit_Meter = _UnitsMethods.UnitsMethods_LengthUnit_Meter
UnitsMethods_LengthUnit_Kilometer = _UnitsMethods.UnitsMethods_LengthUnit_Kilometer
UnitsMethods_LengthUnit_Mil = _UnitsMethods.UnitsMethods_LengthUnit_Mil
UnitsMethods_LengthUnit_Micron = _UnitsMethods.UnitsMethods_LengthUnit_Micron
UnitsMethods_LengthUnit_Centimeter = _UnitsMethods.UnitsMethods_LengthUnit_Centimeter
UnitsMethods_LengthUnit_Microinch = _UnitsMethods.UnitsMethods_LengthUnit_Microinch


class UnitsMethods_LengthUnit(IntEnum):
	UnitsMethods_LengthUnit_Undefined = 0
	UnitsMethods_LengthUnit_Inch = 1
	UnitsMethods_LengthUnit_Millimeter = 2
	UnitsMethods_LengthUnit_Foot = 4
	UnitsMethods_LengthUnit_Mile = 5
	UnitsMethods_LengthUnit_Meter = 6
	UnitsMethods_LengthUnit_Kilometer = 7
	UnitsMethods_LengthUnit_Mil = 8
	UnitsMethods_LengthUnit_Micron = 9
	UnitsMethods_LengthUnit_Centimeter = 10
	UnitsMethods_LengthUnit_Microinch = 11
UnitsMethods_LengthUnit_Undefined = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Undefined
UnitsMethods_LengthUnit_Inch = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Inch
UnitsMethods_LengthUnit_Millimeter = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Millimeter
UnitsMethods_LengthUnit_Foot = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Foot
UnitsMethods_LengthUnit_Mile = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Mile
UnitsMethods_LengthUnit_Meter = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Meter
UnitsMethods_LengthUnit_Kilometer = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Kilometer
UnitsMethods_LengthUnit_Mil = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Mil
UnitsMethods_LengthUnit_Micron = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Micron
UnitsMethods_LengthUnit_Centimeter = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Centimeter
UnitsMethods_LengthUnit_Microinch = UnitsMethods_LengthUnit.UnitsMethods_LengthUnit_Microinch

class unitsmethods(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def DumpLengthUnit(*args):
        r"""

        Parameters
        ----------
        theScaleFactor: float
        theBaseUnit: UnitsMethods_LengthUnit (optional, default to UnitsMethods_LengthUnit_Millimeter)

        Return
        -------
        str

        Description
        -----------
        Returns string name for the given scale factor.

        Parameters
        ----------
        theUnit: UnitsMethods_LengthUnit

        Return
        -------
        str

        Description
        -----------
        Returns string for the given value of lengthunit.

        """
        return _UnitsMethods.unitsmethods_DumpLengthUnit(*args)

    @staticmethod
    def GetCasCadeLengthUnit(*args):
        r"""

        Parameters
        ----------
        theBaseUnit: UnitsMethods_LengthUnit (optional, default to UnitsMethods_LengthUnit_Millimeter)

        Return
        -------
        float

        Description
        -----------
        Returns value of current internal unit for cascade in millemeters by default.

        """
        return _UnitsMethods.unitsmethods_GetCasCadeLengthUnit(*args)

    @staticmethod
    def GetLengthFactorValue(*args):
        r"""

        Parameters
        ----------
        theUnit: int

        Return
        -------
        float

        Description
        -----------
        Returns value of unit encoded by parameter theunit (integer value denoting unit, as described in iges standard) in millimeters by default.

        """
        return _UnitsMethods.unitsmethods_GetLengthFactorValue(*args)

    @staticmethod
    def GetLengthUnitByFactorValue(*args):
        r"""

        Parameters
        ----------
        theFactorValue: float
        theBaseUnit: UnitsMethods_LengthUnit (optional, default to UnitsMethods_LengthUnit_Millimeter)

        Return
        -------
        UnitsMethods_LengthUnit

        Description
        -----------
        Returns the enumeration corresponding to the given scale factor.

        """
        return _UnitsMethods.unitsmethods_GetLengthUnitByFactorValue(*args)

    @staticmethod
    def GetLengthUnitScale(*args):
        r"""

        Parameters
        ----------
        theFromUnit: UnitsMethods_LengthUnit
        theToUnit: UnitsMethods_LengthUnit

        Return
        -------
        float

        Description
        -----------
        Returns the scale factor for switch from first given unit to second given unit.

        """
        return _UnitsMethods.unitsmethods_GetLengthUnitScale(*args)

    @staticmethod
    def LengthUnitFromString(*args):
        r"""

        Parameters
        ----------
        theStr: str
        theCaseSensitive: bool

        Return
        -------
        UnitsMethods_LengthUnit

        Description
        -----------
        Make conversion of given string to value of lengthunit.

        """
        return _UnitsMethods.unitsmethods_LengthUnitFromString(*args)

    @staticmethod
    def SetCasCadeLengthUnit(*args):
        r"""

        Parameters
        ----------
        theUnitValue: float
        theBaseUnit: UnitsMethods_LengthUnit (optional, default to UnitsMethods_LengthUnit_Millimeter)

        Return
        -------
        None

        Description
        -----------
        Sets value of current internal unit for cascade.

        Parameters
        ----------
        theUnit: int

        Return
        -------
        None

        Description
        -----------
        Sets value of current internal unit for cascade by parameter theunit (integer value denoting unit, as described in iges standard).

        """
        return _UnitsMethods.unitsmethods_SetCasCadeLengthUnit(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _UnitsMethods.unitsmethods_swiginit(self, _UnitsMethods.new_unitsmethods())
    __swig_destroy__ = _UnitsMethods.delete_unitsmethods

# Register unitsmethods in _UnitsMethods:
_UnitsMethods.unitsmethods_swigregister(unitsmethods)



@deprecated
def unitsmethods_DumpLengthUnit(*args):
	return unitsmethods.DumpLengthUnit(*args)

@deprecated
def unitsmethods_DumpLengthUnit(*args):
	return unitsmethods.DumpLengthUnit(*args)

@deprecated
def unitsmethods_GetCasCadeLengthUnit(*args):
	return unitsmethods.GetCasCadeLengthUnit(*args)

@deprecated
def unitsmethods_GetLengthFactorValue(*args):
	return unitsmethods.GetLengthFactorValue(*args)

@deprecated
def unitsmethods_GetLengthUnitByFactorValue(*args):
	return unitsmethods.GetLengthUnitByFactorValue(*args)

@deprecated
def unitsmethods_GetLengthUnitScale(*args):
	return unitsmethods.GetLengthUnitScale(*args)

@deprecated
def unitsmethods_LengthUnitFromString(*args):
	return unitsmethods.LengthUnitFromString(*args)

@deprecated
def unitsmethods_SetCasCadeLengthUnit(*args):
	return unitsmethods.SetCasCadeLengthUnit(*args)

@deprecated
def unitsmethods_SetCasCadeLengthUnit(*args):
	return unitsmethods.SetCasCadeLengthUnit(*args)



