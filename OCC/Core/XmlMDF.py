# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
XmlMDF module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_xmlmdf.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _XmlMDF
else:
    import _XmlMDF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDF.delete_SwigPyIterator

    def value(self):
        return _XmlMDF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMDF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMDF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMDF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMDF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMDF.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMDF.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMDF.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMDF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMDF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMDF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMDF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMDF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMDF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMDF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMDF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _XmlMDF:
_XmlMDF.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _XmlMDF.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlMDF_ADriver_Create():
    return _XmlMDF.Handle_XmlMDF_ADriver_Create()

def Handle_XmlMDF_ADriver_DownCast(t):
    return _XmlMDF.Handle_XmlMDF_ADriver_DownCast(t)

def Handle_XmlMDF_ADriver_IsNull(t):
    return _XmlMDF.Handle_XmlMDF_ADriver_IsNull(t)

def Handle_XmlMDF_ADriverTable_Create():
    return _XmlMDF.Handle_XmlMDF_ADriverTable_Create()

def Handle_XmlMDF_ADriverTable_DownCast(t):
    return _XmlMDF.Handle_XmlMDF_ADriverTable_DownCast(t)

def Handle_XmlMDF_ADriverTable_IsNull(t):
    return _XmlMDF.Handle_XmlMDF_ADriverTable_IsNull(t)

def Handle_XmlMDF_DerivedDriver_Create():
    return _XmlMDF.Handle_XmlMDF_DerivedDriver_Create()

def Handle_XmlMDF_DerivedDriver_DownCast(t):
    return _XmlMDF.Handle_XmlMDF_DerivedDriver_DownCast(t)

def Handle_XmlMDF_DerivedDriver_IsNull(t):
    return _XmlMDF.Handle_XmlMDF_DerivedDriver_IsNull(t)

def Handle_XmlMDF_ReferenceDriver_Create():
    return _XmlMDF.Handle_XmlMDF_ReferenceDriver_Create()

def Handle_XmlMDF_ReferenceDriver_DownCast(t):
    return _XmlMDF.Handle_XmlMDF_ReferenceDriver_DownCast(t)

def Handle_XmlMDF_ReferenceDriver_IsNull(t):
    return _XmlMDF.Handle_XmlMDF_ReferenceDriver_IsNull(t)

def Handle_XmlMDF_TagSourceDriver_Create():
    return _XmlMDF.Handle_XmlMDF_TagSourceDriver_Create()

def Handle_XmlMDF_TagSourceDriver_DownCast(t):
    return _XmlMDF.Handle_XmlMDF_TagSourceDriver_DownCast(t)

def Handle_XmlMDF_TagSourceDriver_IsNull(t):
    return _XmlMDF.Handle_XmlMDF_TagSourceDriver_IsNull(t)
class XmlMDF_MapOfDriver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _XmlMDF.XmlMDF_MapOfDriver_begin(self)

    def end(self):
        return _XmlMDF.XmlMDF_MapOfDriver_end(self)

    def cbegin(self):
        return _XmlMDF.XmlMDF_MapOfDriver_cbegin(self)

    def cend(self):
        return _XmlMDF.XmlMDF_MapOfDriver_cend(self)

    def __init__(self, *args):
        _XmlMDF.XmlMDF_MapOfDriver_swiginit(self, _XmlMDF.new_XmlMDF_MapOfDriver(*args))

    def Exchange(self, theOther):
        return _XmlMDF.XmlMDF_MapOfDriver_Exchange(self, theOther)

    def Assign(self, theOther):
        return _XmlMDF.XmlMDF_MapOfDriver_Assign(self, theOther)

    def Set(self, theOther):
        return _XmlMDF.XmlMDF_MapOfDriver_Set(self, theOther)

    def ReSize(self, N):
        return _XmlMDF.XmlMDF_MapOfDriver_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _XmlMDF.XmlMDF_MapOfDriver_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _XmlMDF.XmlMDF_MapOfDriver_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _XmlMDF.XmlMDF_MapOfDriver_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _XmlMDF.XmlMDF_MapOfDriver_UnBind(self, theKey)

    def Seek(self, theKey):
        return _XmlMDF.XmlMDF_MapOfDriver_Seek(self, theKey)

    def Find(self, *args):
        return _XmlMDF.XmlMDF_MapOfDriver_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _XmlMDF.XmlMDF_MapOfDriver_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _XmlMDF.XmlMDF_MapOfDriver_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _XmlMDF.XmlMDF_MapOfDriver___call__(self, *args)

    def Clear(self, *args):
        return _XmlMDF.XmlMDF_MapOfDriver_Clear(self, *args)
    __swig_destroy__ = _XmlMDF.delete_XmlMDF_MapOfDriver

    def Size(self):
        return _XmlMDF.XmlMDF_MapOfDriver_Size(self)

# Register XmlMDF_MapOfDriver in _XmlMDF:
_XmlMDF.XmlMDF_MapOfDriver_swigregister(XmlMDF_MapOfDriver)
class XmlMDF_TypeADriverMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _XmlMDF.XmlMDF_TypeADriverMap_begin(self)

    def end(self):
        return _XmlMDF.XmlMDF_TypeADriverMap_end(self)

    def cbegin(self):
        return _XmlMDF.XmlMDF_TypeADriverMap_cbegin(self)

    def cend(self):
        return _XmlMDF.XmlMDF_TypeADriverMap_cend(self)

    def __init__(self, *args):
        _XmlMDF.XmlMDF_TypeADriverMap_swiginit(self, _XmlMDF.new_XmlMDF_TypeADriverMap(*args))

    def Exchange(self, theOther):
        return _XmlMDF.XmlMDF_TypeADriverMap_Exchange(self, theOther)

    def Assign(self, theOther):
        return _XmlMDF.XmlMDF_TypeADriverMap_Assign(self, theOther)

    def Set(self, theOther):
        return _XmlMDF.XmlMDF_TypeADriverMap_Set(self, theOther)

    def ReSize(self, N):
        return _XmlMDF.XmlMDF_TypeADriverMap_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _XmlMDF.XmlMDF_TypeADriverMap_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _XmlMDF.XmlMDF_TypeADriverMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _XmlMDF.XmlMDF_TypeADriverMap_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _XmlMDF.XmlMDF_TypeADriverMap_UnBind(self, theKey)

    def Seek(self, theKey):
        return _XmlMDF.XmlMDF_TypeADriverMap_Seek(self, theKey)

    def Find(self, *args):
        return _XmlMDF.XmlMDF_TypeADriverMap_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _XmlMDF.XmlMDF_TypeADriverMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _XmlMDF.XmlMDF_TypeADriverMap_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _XmlMDF.XmlMDF_TypeADriverMap___call__(self, *args)

    def Clear(self, *args):
        return _XmlMDF.XmlMDF_TypeADriverMap_Clear(self, *args)
    __swig_destroy__ = _XmlMDF.delete_XmlMDF_TypeADriverMap

    def Size(self):
        return _XmlMDF.XmlMDF_TypeADriverMap_Size(self)

# Register XmlMDF_TypeADriverMap in _XmlMDF:
_XmlMDF.XmlMDF_TypeADriverMap_swigregister(XmlMDF_TypeADriverMap)
class xmlmdf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AddDrivers(*args):
        r"""

        Parameters
        ----------
        aDriverTable: XmlMDF_ADriverTable
        theMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        Adds the attribute storage drivers to <adriverseq>.

        """
        return _XmlMDF.xmlmdf_AddDrivers(*args)

    @staticmethod
    def FromTo(*args):
        r"""

        Parameters
        ----------
        aSource: TDF_Data
        aTarget: XmlObjMgt_Element
        aReloc: XmlObjMgt_SRelocationTable
        aDrivers: XmlMDF_ADriverTable
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        Translates a transient <asource> into a persistent <atarget>.

        Parameters
        ----------
        aSource: XmlObjMgt_Element
        aTarget: TDF_Data
        aReloc: XmlObjMgt_RRelocationTable
        aDrivers: XmlMDF_ADriverTable
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Translates a persistent <asource> into a transient <atarget>. returns true if completed successfully (false on error).

        """
        return _XmlMDF.xmlmdf_FromTo(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlMDF.xmlmdf_swiginit(self, _XmlMDF.new_xmlmdf())
    __swig_destroy__ = _XmlMDF.delete_xmlmdf

# Register xmlmdf in _XmlMDF:
_XmlMDF.xmlmdf_swigregister(xmlmdf)
class XmlMDF_ADriver(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MessageDriver(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Message_Messenger>

        Description
        -----------
        Returns the current message driver of this driver.

        """
        return _XmlMDF.XmlMDF_ADriver_MessageDriver(self, *args)

    def Namespace(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns the namespace string.

        """
        return _XmlMDF.XmlMDF_ADriver_Namespace(self, *args)

    def NewEmpty(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TDF_Attribute>

        Description
        -----------
        Creates a new attribute from tdf.

        """
        return _XmlMDF.XmlMDF_ADriver_NewEmpty(self, *args)

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        aSource: XmlObjMgt_Persistent
        aTarget: TDF_Attribute
        aRelocTable: XmlObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        Translate the contents of <asource> and put it into <atarget>, using the relocation table <areloctable> to keep the sharings.

        Parameters
        ----------
        aSource: TDF_Attribute
        aTarget: XmlObjMgt_Persistent
        aRelocTable: XmlObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        Translate the contents of <asource> and put it into <atarget>, using the relocation table <areloctable> to keep the sharings.

        """
        return _XmlMDF.XmlMDF_ADriver_Paste(self, *args)

    def SourceType(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Standard_Type>

        Description
        -----------
        Returns the type of source object, inheriting from attribute from tdf.

        """
        return _XmlMDF.XmlMDF_ADriver_SourceType(self, *args)

    def TypeName(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns the full xml tag name (including ns prefix).

        """
        return _XmlMDF.XmlMDF_ADriver_TypeName(self, *args)

    def VersionNumber(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the version number from which the driver is available.

        """
        return _XmlMDF.XmlMDF_ADriver_VersionNumber(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_ADriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ADriver

# Register XmlMDF_ADriver in _XmlMDF:
_XmlMDF.XmlMDF_ADriver_swigregister(XmlMDF_ADriver)
class XmlMDF_ADriverTable(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a mutable adrivertable from xmlmdf.

        """
        _XmlMDF.XmlMDF_ADriverTable_swiginit(self, _XmlMDF.new_XmlMDF_ADriverTable(*args))

    def AddDerivedDriver(self, *args):
        r"""

        Parameters
        ----------
        theInstance: TDF_Attribute

        Return
        -------
        None

        Description
        -----------
        Adds a translation driver for the derived attribute. the base driver must be already added. @param theinstance is newly created attribute, detached from any label.

        Parameters
        ----------
        theDerivedType: str

        Return
        -------
        opencascade::handle<Standard_Type>

        Description
        -----------
        Adds a translation driver for the derived attribute. the base driver must be already added. @param thederivedtype is registered attribute type using implement_derived_attribute macro.

        """
        return _XmlMDF.XmlMDF_ADriverTable_AddDerivedDriver(self, *args)

    def AddDriver(self, *args):
        r"""

        Parameters
        ----------
        anHDriver: XmlMDF_ADriver

        Return
        -------
        None

        Description
        -----------
        Sets a translation driver: <adriver>.

        """
        return _XmlMDF.XmlMDF_ADriverTable_AddDriver(self, *args)

    def CreateDrvMap(self, *args):
        r"""

        Parameters
        ----------
        theDriverMap: XmlMDF_MapOfDriver

        Return
        -------
        None

        Description
        -----------
        Fills the map by all registered drivers.

        """
        return _XmlMDF.XmlMDF_ADriverTable_CreateDrvMap(self, *args)

    def GetDriver(self, *args):
        r"""

        Parameters
        ----------
        theType: Standard_Type
        theDriver: XmlMDF_ADriver

        Return
        -------
        bool

        Description
        -----------
        Gets a driver <adriver> according to <atype> //! returns true if a driver is found; false otherwise.

        """
        return _XmlMDF.XmlMDF_ADriverTable_GetDriver(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_ADriverTable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ADriverTable

# Register XmlMDF_ADriverTable in _XmlMDF:
_XmlMDF.XmlMDF_ADriverTable_swigregister(XmlMDF_ADriverTable)
class XmlMDF_DerivedDriver(XmlMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theDerivative: TDF_Attribute
        theBaseDriver: XmlMDF_ADriver

        Return
        -------
        None

        Description
        -----------
        Creates a derivative persistence driver for thederivative attribute by reusage of thebasedriver @param thederivative an instance of the attribute, just created, detached from any label @param thebasedriver a driver of the base attribute, called by paste methods.

        """
        _XmlMDF.XmlMDF_DerivedDriver_swiginit(self, _XmlMDF.new_XmlMDF_DerivedDriver(*args))

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        theSource: XmlObjMgt_Persistent
        theTarget: TDF_Attribute
        theRelocTable: XmlObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        Reuses the base driver to read the base fields.

        Parameters
        ----------
        theSource: TDF_Attribute
        theTarget: XmlObjMgt_Persistent
        theRelocTable: XmlObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        Reuses the base driver to store the base fields.

        """
        return _XmlMDF.XmlMDF_DerivedDriver_Paste(self, *args)

    def TypeName(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns the full xml tag name (including ns prefix).

        """
        return _XmlMDF.XmlMDF_DerivedDriver_TypeName(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_DerivedDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_DerivedDriver

# Register XmlMDF_DerivedDriver in _XmlMDF:
_XmlMDF.XmlMDF_DerivedDriver_swigregister(XmlMDF_DerivedDriver)
class XmlMDF_ReferenceDriver(XmlMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlMDF.XmlMDF_ReferenceDriver_swiginit(self, _XmlMDF.new_XmlMDF_ReferenceDriver(*args))

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _XmlMDF.XmlMDF_ReferenceDriver_Paste(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_ReferenceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_ReferenceDriver

# Register XmlMDF_ReferenceDriver in _XmlMDF:
_XmlMDF.XmlMDF_ReferenceDriver_swigregister(XmlMDF_ReferenceDriver)
class XmlMDF_TagSourceDriver(XmlMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlMDF.XmlMDF_TagSourceDriver_swiginit(self, _XmlMDF.new_XmlMDF_TagSourceDriver(*args))

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _XmlMDF.XmlMDF_TagSourceDriver_Paste(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDF_TagSourceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDF.delete_XmlMDF_TagSourceDriver

# Register XmlMDF_TagSourceDriver in _XmlMDF:
_XmlMDF.XmlMDF_TagSourceDriver_swigregister(XmlMDF_TagSourceDriver)



@deprecated
def xmlmdf_AddDrivers(*args):
	return xmlmdf.AddDrivers(*args)

@deprecated
def xmlmdf_FromTo(*args):
	return xmlmdf.FromTo(*args)

@deprecated
def xmlmdf_FromTo(*args):
	return xmlmdf.FromTo(*args)



