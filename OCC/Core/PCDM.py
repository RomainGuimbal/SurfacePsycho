# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
PCDM module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_pcdm.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PCDM')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PCDM')
    _PCDM = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PCDM', [dirname(__file__)])
        except ImportError:
            import _PCDM
            return _PCDM
        try:
            _mod = imp.load_module('_PCDM', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PCDM = swig_import_helper()
    del swig_import_helper
else:
    import _PCDM
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PCDM.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _PCDM.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _PCDM.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _PCDM.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _PCDM.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _PCDM.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _PCDM.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _PCDM.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _PCDM.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _PCDM.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _PCDM.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _PCDM.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _PCDM.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _PCDM.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _PCDM.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _PCDM.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _PCDM.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PCDM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _PCDM.process_exception(error, method_name, class_name)
process_exception = _PCDM.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Storage
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.CDM
import OCC.Core.Resource

from enum import IntEnum
from OCC.Core.Exception import *

PCDM_SS_OK = _PCDM.PCDM_SS_OK
PCDM_SS_DriverFailure = _PCDM.PCDM_SS_DriverFailure
PCDM_SS_WriteFailure = _PCDM.PCDM_SS_WriteFailure
PCDM_SS_Failure = _PCDM.PCDM_SS_Failure
PCDM_SS_Doc_IsNull = _PCDM.PCDM_SS_Doc_IsNull
PCDM_SS_No_Obj = _PCDM.PCDM_SS_No_Obj
PCDM_SS_Info_Section_Error = _PCDM.PCDM_SS_Info_Section_Error
PCDM_SS_UserBreak = _PCDM.PCDM_SS_UserBreak
PCDM_TOFD_File = _PCDM.PCDM_TOFD_File
PCDM_TOFD_CmpFile = _PCDM.PCDM_TOFD_CmpFile
PCDM_TOFD_XmlFile = _PCDM.PCDM_TOFD_XmlFile
PCDM_TOFD_Unknown = _PCDM.PCDM_TOFD_Unknown
PCDM_RS_OK = _PCDM.PCDM_RS_OK
PCDM_RS_NoDriver = _PCDM.PCDM_RS_NoDriver
PCDM_RS_UnknownFileDriver = _PCDM.PCDM_RS_UnknownFileDriver
PCDM_RS_OpenError = _PCDM.PCDM_RS_OpenError
PCDM_RS_NoVersion = _PCDM.PCDM_RS_NoVersion
PCDM_RS_NoSchema = _PCDM.PCDM_RS_NoSchema
PCDM_RS_NoDocument = _PCDM.PCDM_RS_NoDocument
PCDM_RS_ExtensionFailure = _PCDM.PCDM_RS_ExtensionFailure
PCDM_RS_WrongStreamMode = _PCDM.PCDM_RS_WrongStreamMode
PCDM_RS_FormatFailure = _PCDM.PCDM_RS_FormatFailure
PCDM_RS_TypeFailure = _PCDM.PCDM_RS_TypeFailure
PCDM_RS_TypeNotFoundInSchema = _PCDM.PCDM_RS_TypeNotFoundInSchema
PCDM_RS_UnrecognizedFileFormat = _PCDM.PCDM_RS_UnrecognizedFileFormat
PCDM_RS_MakeFailure = _PCDM.PCDM_RS_MakeFailure
PCDM_RS_PermissionDenied = _PCDM.PCDM_RS_PermissionDenied
PCDM_RS_DriverFailure = _PCDM.PCDM_RS_DriverFailure
PCDM_RS_AlreadyRetrievedAndModified = _PCDM.PCDM_RS_AlreadyRetrievedAndModified
PCDM_RS_AlreadyRetrieved = _PCDM.PCDM_RS_AlreadyRetrieved
PCDM_RS_UnknownDocument = _PCDM.PCDM_RS_UnknownDocument
PCDM_RS_WrongResource = _PCDM.PCDM_RS_WrongResource
PCDM_RS_ReaderException = _PCDM.PCDM_RS_ReaderException
PCDM_RS_NoModel = _PCDM.PCDM_RS_NoModel
PCDM_RS_UserBreak = _PCDM.PCDM_RS_UserBreak


class PCDM_StoreStatus(IntEnum):
	PCDM_SS_OK = 0
	PCDM_SS_DriverFailure = 1
	PCDM_SS_WriteFailure = 2
	PCDM_SS_Failure = 3
	PCDM_SS_Doc_IsNull = 4
	PCDM_SS_No_Obj = 5
	PCDM_SS_Info_Section_Error = 6
	PCDM_SS_UserBreak = 7
PCDM_SS_OK = PCDM_StoreStatus.PCDM_SS_OK
PCDM_SS_DriverFailure = PCDM_StoreStatus.PCDM_SS_DriverFailure
PCDM_SS_WriteFailure = PCDM_StoreStatus.PCDM_SS_WriteFailure
PCDM_SS_Failure = PCDM_StoreStatus.PCDM_SS_Failure
PCDM_SS_Doc_IsNull = PCDM_StoreStatus.PCDM_SS_Doc_IsNull
PCDM_SS_No_Obj = PCDM_StoreStatus.PCDM_SS_No_Obj
PCDM_SS_Info_Section_Error = PCDM_StoreStatus.PCDM_SS_Info_Section_Error
PCDM_SS_UserBreak = PCDM_StoreStatus.PCDM_SS_UserBreak

class PCDM_TypeOfFileDriver(IntEnum):
	PCDM_TOFD_File = 0
	PCDM_TOFD_CmpFile = 1
	PCDM_TOFD_XmlFile = 2
	PCDM_TOFD_Unknown = 3
PCDM_TOFD_File = PCDM_TypeOfFileDriver.PCDM_TOFD_File
PCDM_TOFD_CmpFile = PCDM_TypeOfFileDriver.PCDM_TOFD_CmpFile
PCDM_TOFD_XmlFile = PCDM_TypeOfFileDriver.PCDM_TOFD_XmlFile
PCDM_TOFD_Unknown = PCDM_TypeOfFileDriver.PCDM_TOFD_Unknown

class PCDM_ReaderStatus(IntEnum):
	PCDM_RS_OK = 0
	PCDM_RS_NoDriver = 1
	PCDM_RS_UnknownFileDriver = 2
	PCDM_RS_OpenError = 3
	PCDM_RS_NoVersion = 4
	PCDM_RS_NoSchema = 5
	PCDM_RS_NoDocument = 6
	PCDM_RS_ExtensionFailure = 7
	PCDM_RS_WrongStreamMode = 8
	PCDM_RS_FormatFailure = 9
	PCDM_RS_TypeFailure = 10
	PCDM_RS_TypeNotFoundInSchema = 11
	PCDM_RS_UnrecognizedFileFormat = 12
	PCDM_RS_MakeFailure = 13
	PCDM_RS_PermissionDenied = 14
	PCDM_RS_DriverFailure = 15
	PCDM_RS_AlreadyRetrievedAndModified = 16
	PCDM_RS_AlreadyRetrieved = 17
	PCDM_RS_UnknownDocument = 18
	PCDM_RS_WrongResource = 19
	PCDM_RS_ReaderException = 20
	PCDM_RS_NoModel = 21
	PCDM_RS_UserBreak = 22
PCDM_RS_OK = PCDM_ReaderStatus.PCDM_RS_OK
PCDM_RS_NoDriver = PCDM_ReaderStatus.PCDM_RS_NoDriver
PCDM_RS_UnknownFileDriver = PCDM_ReaderStatus.PCDM_RS_UnknownFileDriver
PCDM_RS_OpenError = PCDM_ReaderStatus.PCDM_RS_OpenError
PCDM_RS_NoVersion = PCDM_ReaderStatus.PCDM_RS_NoVersion
PCDM_RS_NoSchema = PCDM_ReaderStatus.PCDM_RS_NoSchema
PCDM_RS_NoDocument = PCDM_ReaderStatus.PCDM_RS_NoDocument
PCDM_RS_ExtensionFailure = PCDM_ReaderStatus.PCDM_RS_ExtensionFailure
PCDM_RS_WrongStreamMode = PCDM_ReaderStatus.PCDM_RS_WrongStreamMode
PCDM_RS_FormatFailure = PCDM_ReaderStatus.PCDM_RS_FormatFailure
PCDM_RS_TypeFailure = PCDM_ReaderStatus.PCDM_RS_TypeFailure
PCDM_RS_TypeNotFoundInSchema = PCDM_ReaderStatus.PCDM_RS_TypeNotFoundInSchema
PCDM_RS_UnrecognizedFileFormat = PCDM_ReaderStatus.PCDM_RS_UnrecognizedFileFormat
PCDM_RS_MakeFailure = PCDM_ReaderStatus.PCDM_RS_MakeFailure
PCDM_RS_PermissionDenied = PCDM_ReaderStatus.PCDM_RS_PermissionDenied
PCDM_RS_DriverFailure = PCDM_ReaderStatus.PCDM_RS_DriverFailure
PCDM_RS_AlreadyRetrievedAndModified = PCDM_ReaderStatus.PCDM_RS_AlreadyRetrievedAndModified
PCDM_RS_AlreadyRetrieved = PCDM_ReaderStatus.PCDM_RS_AlreadyRetrieved
PCDM_RS_UnknownDocument = PCDM_ReaderStatus.PCDM_RS_UnknownDocument
PCDM_RS_WrongResource = PCDM_ReaderStatus.PCDM_RS_WrongResource
PCDM_RS_ReaderException = PCDM_ReaderStatus.PCDM_RS_ReaderException
PCDM_RS_NoModel = PCDM_ReaderStatus.PCDM_RS_NoModel
PCDM_RS_UserBreak = PCDM_ReaderStatus.PCDM_RS_UserBreak


def Handle_PCDM_ReadWriter_Create() -> "opencascade::handle< PCDM_ReadWriter >":
    return _PCDM.Handle_PCDM_ReadWriter_Create()
Handle_PCDM_ReadWriter_Create = _PCDM.Handle_PCDM_ReadWriter_Create

def Handle_PCDM_ReadWriter_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_ReadWriter >":
    return _PCDM.Handle_PCDM_ReadWriter_DownCast(t)
Handle_PCDM_ReadWriter_DownCast = _PCDM.Handle_PCDM_ReadWriter_DownCast

def Handle_PCDM_ReadWriter_IsNull(t: 'opencascade::handle< PCDM_ReadWriter > const &') -> "bool":
    return _PCDM.Handle_PCDM_ReadWriter_IsNull(t)
Handle_PCDM_ReadWriter_IsNull = _PCDM.Handle_PCDM_ReadWriter_IsNull

def Handle_PCDM_Reader_Create() -> "opencascade::handle< PCDM_Reader >":
    return _PCDM.Handle_PCDM_Reader_Create()
Handle_PCDM_Reader_Create = _PCDM.Handle_PCDM_Reader_Create

def Handle_PCDM_Reader_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_Reader >":
    return _PCDM.Handle_PCDM_Reader_DownCast(t)
Handle_PCDM_Reader_DownCast = _PCDM.Handle_PCDM_Reader_DownCast

def Handle_PCDM_Reader_IsNull(t: 'opencascade::handle< PCDM_Reader > const &') -> "bool":
    return _PCDM.Handle_PCDM_Reader_IsNull(t)
Handle_PCDM_Reader_IsNull = _PCDM.Handle_PCDM_Reader_IsNull

def Handle_PCDM_ReferenceIterator_Create() -> "opencascade::handle< PCDM_ReferenceIterator >":
    return _PCDM.Handle_PCDM_ReferenceIterator_Create()
Handle_PCDM_ReferenceIterator_Create = _PCDM.Handle_PCDM_ReferenceIterator_Create

def Handle_PCDM_ReferenceIterator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_ReferenceIterator >":
    return _PCDM.Handle_PCDM_ReferenceIterator_DownCast(t)
Handle_PCDM_ReferenceIterator_DownCast = _PCDM.Handle_PCDM_ReferenceIterator_DownCast

def Handle_PCDM_ReferenceIterator_IsNull(t: 'opencascade::handle< PCDM_ReferenceIterator > const &') -> "bool":
    return _PCDM.Handle_PCDM_ReferenceIterator_IsNull(t)
Handle_PCDM_ReferenceIterator_IsNull = _PCDM.Handle_PCDM_ReferenceIterator_IsNull

def Handle_PCDM_Writer_Create() -> "opencascade::handle< PCDM_Writer >":
    return _PCDM.Handle_PCDM_Writer_Create()
Handle_PCDM_Writer_Create = _PCDM.Handle_PCDM_Writer_Create

def Handle_PCDM_Writer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_Writer >":
    return _PCDM.Handle_PCDM_Writer_DownCast(t)
Handle_PCDM_Writer_DownCast = _PCDM.Handle_PCDM_Writer_DownCast

def Handle_PCDM_Writer_IsNull(t: 'opencascade::handle< PCDM_Writer > const &') -> "bool":
    return _PCDM.Handle_PCDM_Writer_IsNull(t)
Handle_PCDM_Writer_IsNull = _PCDM.Handle_PCDM_Writer_IsNull

def Handle_PCDM_ReadWriter_1_Create() -> "opencascade::handle< PCDM_ReadWriter_1 >":
    return _PCDM.Handle_PCDM_ReadWriter_1_Create()
Handle_PCDM_ReadWriter_1_Create = _PCDM.Handle_PCDM_ReadWriter_1_Create

def Handle_PCDM_ReadWriter_1_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_ReadWriter_1 >":
    return _PCDM.Handle_PCDM_ReadWriter_1_DownCast(t)
Handle_PCDM_ReadWriter_1_DownCast = _PCDM.Handle_PCDM_ReadWriter_1_DownCast

def Handle_PCDM_ReadWriter_1_IsNull(t: 'opencascade::handle< PCDM_ReadWriter_1 > const &') -> "bool":
    return _PCDM.Handle_PCDM_ReadWriter_1_IsNull(t)
Handle_PCDM_ReadWriter_1_IsNull = _PCDM.Handle_PCDM_ReadWriter_1_IsNull

def Handle_PCDM_RetrievalDriver_Create() -> "opencascade::handle< PCDM_RetrievalDriver >":
    return _PCDM.Handle_PCDM_RetrievalDriver_Create()
Handle_PCDM_RetrievalDriver_Create = _PCDM.Handle_PCDM_RetrievalDriver_Create

def Handle_PCDM_RetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_RetrievalDriver >":
    return _PCDM.Handle_PCDM_RetrievalDriver_DownCast(t)
Handle_PCDM_RetrievalDriver_DownCast = _PCDM.Handle_PCDM_RetrievalDriver_DownCast

def Handle_PCDM_RetrievalDriver_IsNull(t: 'opencascade::handle< PCDM_RetrievalDriver > const &') -> "bool":
    return _PCDM.Handle_PCDM_RetrievalDriver_IsNull(t)
Handle_PCDM_RetrievalDriver_IsNull = _PCDM.Handle_PCDM_RetrievalDriver_IsNull

def Handle_PCDM_StorageDriver_Create() -> "opencascade::handle< PCDM_StorageDriver >":
    return _PCDM.Handle_PCDM_StorageDriver_Create()
Handle_PCDM_StorageDriver_Create = _PCDM.Handle_PCDM_StorageDriver_Create

def Handle_PCDM_StorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< PCDM_StorageDriver >":
    return _PCDM.Handle_PCDM_StorageDriver_DownCast(t)
Handle_PCDM_StorageDriver_DownCast = _PCDM.Handle_PCDM_StorageDriver_DownCast

def Handle_PCDM_StorageDriver_IsNull(t: 'opencascade::handle< PCDM_StorageDriver > const &') -> "bool":
    return _PCDM.Handle_PCDM_StorageDriver_IsNull(t)
Handle_PCDM_StorageDriver_IsNull = _PCDM.Handle_PCDM_StorageDriver_IsNull
class PCDM_BaseDriverPointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_BaseDriverPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_BaseDriverPointer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PCDM.new_PCDM_BaseDriverPointer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PCDM.delete_PCDM_BaseDriverPointer
    __del__ = lambda self: None
PCDM_BaseDriverPointer_swigregister = _PCDM.PCDM_BaseDriverPointer_swigregister
PCDM_BaseDriverPointer_swigregister(PCDM_BaseDriverPointer)

class PCDM_SequenceOfDocument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_SequenceOfDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_SequenceOfDocument, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< PCDM_Document > >::iterator":
        return _PCDM.PCDM_SequenceOfDocument_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< PCDM_Document > >::iterator":
        return _PCDM.PCDM_SequenceOfDocument_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< PCDM_Document > >::const_iterator":
        return _PCDM.PCDM_SequenceOfDocument_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< PCDM_Document > >::const_iterator":
        return _PCDM.PCDM_SequenceOfDocument_cend(self)

    def __init__(self, *args):
        this = _PCDM.new_PCDM_SequenceOfDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _PCDM.PCDM_SequenceOfDocument_Size(self)

    def Length(self) -> "Standard_Integer":
        return _PCDM.PCDM_SequenceOfDocument_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _PCDM.PCDM_SequenceOfDocument_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _PCDM.PCDM_SequenceOfDocument_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _PCDM.PCDM_SequenceOfDocument_IsEmpty(self)

    def Reverse(self) -> "void":
        return _PCDM.PCDM_SequenceOfDocument_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _PCDM.PCDM_SequenceOfDocument_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_PCDM.PCDM_SequenceOfDocument_delNode)
    else:
        delNode = _PCDM.PCDM_SequenceOfDocument_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _PCDM.PCDM_SequenceOfDocument_Clear(self, theAllocator)

    def Assign(self, theOther: 'PCDM_SequenceOfDocument') -> "NCollection_Sequence< opencascade::handle< PCDM_Document > > &":
        return _PCDM.PCDM_SequenceOfDocument_Assign(self, theOther)

    def Set(self, theOther: 'PCDM_SequenceOfDocument') -> "NCollection_Sequence< opencascade::handle< PCDM_Document > > &":
        return _PCDM.PCDM_SequenceOfDocument_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfDocument_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfDocument_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfDocument_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfDocument_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfDocument_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'PCDM_SequenceOfDocument') -> "void":
        return _PCDM.PCDM_SequenceOfDocument_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< PCDM_Document > const &":
        return _PCDM.PCDM_SequenceOfDocument_First(self)

    def ChangeFirst(self) -> "opencascade::handle< PCDM_Document > &":
        return _PCDM.PCDM_SequenceOfDocument_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< PCDM_Document > const &":
        return _PCDM.PCDM_SequenceOfDocument_Last(self)

    def ChangeLast(self) -> "opencascade::handle< PCDM_Document > &":
        return _PCDM.PCDM_SequenceOfDocument_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< PCDM_Document > const &":
        return _PCDM.PCDM_SequenceOfDocument_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< PCDM_Document > &":
        return _PCDM.PCDM_SequenceOfDocument_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< PCDM_Document > &":
        return _PCDM.PCDM_SequenceOfDocument___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< PCDM_Document > const &') -> "void":
        return _PCDM.PCDM_SequenceOfDocument_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _PCDM.delete_PCDM_SequenceOfDocument
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

PCDM_SequenceOfDocument_swigregister = _PCDM.PCDM_SequenceOfDocument_swigregister
PCDM_SequenceOfDocument_swigregister(PCDM_SequenceOfDocument)

def PCDM_SequenceOfDocument_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _PCDM.PCDM_SequenceOfDocument_delNode(theNode, theAl)
PCDM_SequenceOfDocument_delNode = _PCDM.PCDM_SequenceOfDocument_delNode

class PCDM_SequenceOfReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_SequenceOfReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_SequenceOfReference, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< PCDM_Reference >::iterator":
        return _PCDM.PCDM_SequenceOfReference_begin(self)

    def end(self) -> "NCollection_Sequence< PCDM_Reference >::iterator":
        return _PCDM.PCDM_SequenceOfReference_end(self)

    def cbegin(self) -> "NCollection_Sequence< PCDM_Reference >::const_iterator":
        return _PCDM.PCDM_SequenceOfReference_cbegin(self)

    def cend(self) -> "NCollection_Sequence< PCDM_Reference >::const_iterator":
        return _PCDM.PCDM_SequenceOfReference_cend(self)

    def __init__(self, *args):
        this = _PCDM.new_PCDM_SequenceOfReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _PCDM.PCDM_SequenceOfReference_Size(self)

    def Length(self) -> "Standard_Integer":
        return _PCDM.PCDM_SequenceOfReference_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _PCDM.PCDM_SequenceOfReference_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _PCDM.PCDM_SequenceOfReference_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _PCDM.PCDM_SequenceOfReference_IsEmpty(self)

    def Reverse(self) -> "void":
        return _PCDM.PCDM_SequenceOfReference_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _PCDM.PCDM_SequenceOfReference_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_PCDM.PCDM_SequenceOfReference_delNode)
    else:
        delNode = _PCDM.PCDM_SequenceOfReference_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _PCDM.PCDM_SequenceOfReference_Clear(self, theAllocator)

    def Assign(self, theOther: 'PCDM_SequenceOfReference') -> "NCollection_Sequence< PCDM_Reference > &":
        return _PCDM.PCDM_SequenceOfReference_Assign(self, theOther)

    def Set(self, theOther: 'PCDM_SequenceOfReference') -> "NCollection_Sequence< PCDM_Reference > &":
        return _PCDM.PCDM_SequenceOfReference_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfReference_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfReference_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfReference_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfReference_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _PCDM.PCDM_SequenceOfReference_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'PCDM_SequenceOfReference') -> "void":
        return _PCDM.PCDM_SequenceOfReference_Split(self, theIndex, theSeq)

    def First(self) -> "PCDM_Reference const &":
        return _PCDM.PCDM_SequenceOfReference_First(self)

    def ChangeFirst(self) -> "PCDM_Reference &":
        return _PCDM.PCDM_SequenceOfReference_ChangeFirst(self)

    def Last(self) -> "PCDM_Reference const &":
        return _PCDM.PCDM_SequenceOfReference_Last(self)

    def ChangeLast(self) -> "PCDM_Reference &":
        return _PCDM.PCDM_SequenceOfReference_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "PCDM_Reference const &":
        return _PCDM.PCDM_SequenceOfReference_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "PCDM_Reference &":
        return _PCDM.PCDM_SequenceOfReference_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "PCDM_Reference &":
        return _PCDM.PCDM_SequenceOfReference___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'PCDM_Reference') -> "void":
        return _PCDM.PCDM_SequenceOfReference_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _PCDM.delete_PCDM_SequenceOfReference
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

PCDM_SequenceOfReference_swigregister = _PCDM.PCDM_SequenceOfReference_swigregister
PCDM_SequenceOfReference_swigregister(PCDM_SequenceOfReference)

def PCDM_SequenceOfReference_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _PCDM.PCDM_SequenceOfReference_delNode(theNode, theAl)
PCDM_SequenceOfReference_delNode = _PCDM.PCDM_SequenceOfReference_delNode

class pcdm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pcdm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pcdm, name)
    __repr__ = _swig_repr

    def FileDriverType(*args) -> "PCDM_TypeOfFileDriver":
        """
        No available documentation.

        Parameters
        ----------
        aFileName: TCollection_AsciiString
        aBaseDriver: Storage_BaseDriver

        Returns
        -------
        PCDM_TypeOfFileDriver

        """
        return _PCDM.pcdm_FileDriverType(*args)

    FileDriverType = staticmethod(FileDriverType)

    __repr__ = _dumps_object


    def __init__(self):
        this = _PCDM.new_pcdm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PCDM.delete_pcdm
    __del__ = lambda self: None
pcdm_swigregister = _PCDM.pcdm_swigregister
pcdm_swigregister(pcdm)

def pcdm_FileDriverType(*args) -> "PCDM_TypeOfFileDriver":
    """
    No available documentation.

    Parameters
    ----------
    aFileName: TCollection_AsciiString
    aBaseDriver: Storage_BaseDriver

    Returns
    -------
    PCDM_TypeOfFileDriver

    """
    return _PCDM.pcdm_FileDriverType(*args)

class PCDM_ReadWriter(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_ReadWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_ReadWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FileFormat(*args) -> "TCollection_ExtendedString":
        """
        Tries to get a format in the file. returns an empty string if the file could not be read or does not have a fileformat information.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString

        Returns
        -------
        TCollection_ExtendedString

        """
        return _PCDM.PCDM_ReadWriter_FileFormat(*args)

    FileFormat = staticmethod(FileFormat)

    def Open(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDriver: Storage_BaseDriver
        aFileName: TCollection_ExtendedString
        anOpenMode: Storage_OpenMode

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReadWriter_Open(*args)

    Open = staticmethod(Open)

    def ReadDocumentVersion(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString
        theMsgDriver: Message_Messenger

        Returns
        -------
        int

        """
        return _PCDM.PCDM_ReadWriter_ReadDocumentVersion(self, *args)


    def ReadExtensions(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString
        theExtensions: TColStd_SequenceOfExtendedString
        theMsgDriver: Message_Messenger

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReadWriter_ReadExtensions(self, *args)


    def ReadReferenceCounter(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        theFileName: TCollection_ExtendedString
        theMsgDriver: Message_Messenger

        Returns
        -------
        int

        """
        return _PCDM.PCDM_ReadWriter_ReadReferenceCounter(self, *args)


    def ReadReferences(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString
        theReferences: PCDM_SequenceOfReference
        theMsgDriver: Message_Messenger

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReadWriter_ReadReferences(self, *args)


    def Reader(*args) -> "opencascade::handle< PCDM_ReadWriter >":
        """
        Returns the convenient reader for a file.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString

        Returns
        -------
        opencascade::handle<PCDM_ReadWriter>

        """
        return _PCDM.PCDM_ReadWriter_Reader(*args)

    Reader = staticmethod(Reader)

    def Version(self, *args) -> "TCollection_AsciiString":
        """
        Returns pcdm_readwriter_1.

        Returns
        -------
        TCollection_AsciiString

        """
        return _PCDM.PCDM_ReadWriter_Version(self, *args)


    def WriteExtensions(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aData: Storage_Data
        aDocument: CDM_Document

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReadWriter_WriteExtensions(self, *args)


    def WriteFileFormat(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aData: Storage_Data
        aDocument: CDM_Document

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReadWriter_WriteFileFormat(*args)

    WriteFileFormat = staticmethod(WriteFileFormat)

    def WriteReferenceCounter(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aData: Storage_Data
        aDocument: CDM_Document

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReadWriter_WriteReferenceCounter(self, *args)


    def WriteReferences(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aData: Storage_Data
        aDocument: CDM_Document
        theReferencerFileName: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReadWriter_WriteReferences(self, *args)


    def WriteVersion(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aData: Storage_Data
        aDocument: CDM_Document

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReadWriter_WriteVersion(self, *args)


    def Writer(*args) -> "opencascade::handle< PCDM_ReadWriter >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<PCDM_ReadWriter>

        """
        return _PCDM.PCDM_ReadWriter_Writer(*args)

    Writer = staticmethod(Writer)


    @staticmethod
    def DownCast(t):
      return Handle_PCDM_ReadWriter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_ReadWriter
    __del__ = lambda self: None
PCDM_ReadWriter_swigregister = _PCDM.PCDM_ReadWriter_swigregister
PCDM_ReadWriter_swigregister(PCDM_ReadWriter)

def PCDM_ReadWriter_FileFormat(*args) -> "TCollection_ExtendedString":
    """
    Tries to get a format in the file. returns an empty string if the file could not be read or does not have a fileformat information.

    Parameters
    ----------
    aFileName: TCollection_ExtendedString

    Returns
    -------
    TCollection_ExtendedString

    """
    return _PCDM.PCDM_ReadWriter_FileFormat(*args)

def PCDM_ReadWriter_Open(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aDriver: Storage_BaseDriver
    aFileName: TCollection_ExtendedString
    anOpenMode: Storage_OpenMode

    Returns
    -------
    None

    """
    return _PCDM.PCDM_ReadWriter_Open(*args)

def PCDM_ReadWriter_Reader(*args) -> "opencascade::handle< PCDM_ReadWriter >":
    """
    Returns the convenient reader for a file.

    Parameters
    ----------
    aFileName: TCollection_ExtendedString

    Returns
    -------
    opencascade::handle<PCDM_ReadWriter>

    """
    return _PCDM.PCDM_ReadWriter_Reader(*args)

def PCDM_ReadWriter_WriteFileFormat(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aData: Storage_Data
    aDocument: CDM_Document

    Returns
    -------
    None

    """
    return _PCDM.PCDM_ReadWriter_WriteFileFormat(*args)

def PCDM_ReadWriter_Writer(*args) -> "opencascade::handle< PCDM_ReadWriter >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<PCDM_ReadWriter>

    """
    return _PCDM.PCDM_ReadWriter_Writer(*args)

class PCDM_Reader(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_Reader, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_Reader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CreateDocument(self, *args) -> "opencascade::handle< CDM_Document >":
        """
        This method is called by the framework before the read method.

        Returns
        -------
        opencascade::handle<CDM_Document>

        """
        return _PCDM.PCDM_Reader_CreateDocument(self, *args)


    def GetStatus(self, *args) -> "PCDM_ReaderStatus":
        """
        No available documentation.

        Returns
        -------
        PCDM_ReaderStatus

        """
        return _PCDM.PCDM_Reader_GetStatus(self, *args)


    def Read(self, *args) -> "void":
        """
        Retrieves the content of the file into a new document.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString
        aNewDocument: CDM_Document
        anApplication: CDM_Application
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _PCDM.PCDM_Reader_Read(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_Reader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_Reader
    __del__ = lambda self: None
PCDM_Reader_swigregister = _PCDM.PCDM_Reader_swigregister
PCDM_Reader_swigregister(PCDM_Reader)

class PCDM_Reference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_Reference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_Reference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aReferenceIdentifier: int
        aFileName: TCollection_ExtendedString
        aDocumentVersion: int

        Returns
        -------
        None

        """
        this = _PCDM.new_PCDM_Reference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DocumentVersion(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _PCDM.PCDM_Reference_DocumentVersion(self, *args)


    def FileName(self, *args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _PCDM.PCDM_Reference_FileName(self, *args)


    def ReferenceIdentifier(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _PCDM.PCDM_Reference_ReferenceIdentifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_Reference
    __del__ = lambda self: None
PCDM_Reference_swigregister = _PCDM.PCDM_Reference_swigregister
PCDM_Reference_swigregister(PCDM_Reference)

class PCDM_ReferenceIterator(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_ReferenceIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_ReferenceIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Warning! the constructor does not initialization.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _PCDM.new_PCDM_ReferenceIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMetaData: CDM_MetaData

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReferenceIterator_Init(self, *args)


    def LoadReferences(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDocument: CDM_Document
        aMetaData: CDM_MetaData
        anApplication: CDM_Application
        UseStorageConfiguration: bool

        Returns
        -------
        None

        """
        return _PCDM.PCDM_ReferenceIterator_LoadReferences(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_ReferenceIterator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_ReferenceIterator
    __del__ = lambda self: None
PCDM_ReferenceIterator_swigregister = _PCDM.PCDM_ReferenceIterator_swigregister
PCDM_ReferenceIterator_swigregister(PCDM_ReferenceIterator)

class PCDM_Writer(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_Writer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_Writer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Write(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDocument: CDM_Document
        aFileName: TCollection_ExtendedString
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _PCDM.PCDM_Writer_Write(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_Writer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_Writer
    __del__ = lambda self: None
PCDM_Writer_swigregister = _PCDM.PCDM_Writer_swigregister
PCDM_Writer_swigregister(PCDM_Writer)

class PCDM_ReadWriter_1(PCDM_ReadWriter):
    __swig_setmethods__ = {}
    for _s in [PCDM_ReadWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_ReadWriter_1, name, value)
    __swig_getmethods__ = {}
    for _s in [PCDM_ReadWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_ReadWriter_1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _PCDM.new_PCDM_ReadWriter_1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_PCDM_ReadWriter_1_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_ReadWriter_1
    __del__ = lambda self: None
PCDM_ReadWriter_1_swigregister = _PCDM.PCDM_ReadWriter_1_swigregister
PCDM_ReadWriter_1_swigregister(PCDM_ReadWriter_1)

class PCDM_RetrievalDriver(PCDM_Reader):
    __swig_setmethods__ = {}
    for _s in [PCDM_Reader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_RetrievalDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [PCDM_Reader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_RetrievalDriver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DocumentVersion(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        theFileName: TCollection_ExtendedString
        theMsgDriver: Message_Messenger

        Returns
        -------
        int

        """
        return _PCDM.PCDM_RetrievalDriver_DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def GetFormat(self, *args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _PCDM.PCDM_RetrievalDriver_GetFormat(self, *args)


    def ReferenceCounter(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        theFileName: TCollection_ExtendedString
        theMsgDriver: Message_Messenger

        Returns
        -------
        int

        """
        return _PCDM.PCDM_RetrievalDriver_ReferenceCounter(*args)

    ReferenceCounter = staticmethod(ReferenceCounter)

    def SetFormat(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aformat: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _PCDM.PCDM_RetrievalDriver_SetFormat(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_RetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _PCDM.delete_PCDM_RetrievalDriver
    __del__ = lambda self: None
PCDM_RetrievalDriver_swigregister = _PCDM.PCDM_RetrievalDriver_swigregister
PCDM_RetrievalDriver_swigregister(PCDM_RetrievalDriver)

def PCDM_RetrievalDriver_DocumentVersion(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    theFileName: TCollection_ExtendedString
    theMsgDriver: Message_Messenger

    Returns
    -------
    int

    """
    return _PCDM.PCDM_RetrievalDriver_DocumentVersion(*args)

def PCDM_RetrievalDriver_ReferenceCounter(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    theFileName: TCollection_ExtendedString
    theMsgDriver: Message_Messenger

    Returns
    -------
    int

    """
    return _PCDM.PCDM_RetrievalDriver_ReferenceCounter(*args)

class PCDM_StorageDriver(PCDM_Writer):
    __swig_setmethods__ = {}
    for _s in [PCDM_Writer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCDM_StorageDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [PCDM_Writer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PCDM_StorageDriver, name)
    __repr__ = _swig_repr

    def GetFormat(self, *args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _PCDM.PCDM_StorageDriver_GetFormat(self, *args)


    def GetStoreStatus(self, *args) -> "PCDM_StoreStatus":
        """
        No available documentation.

        Returns
        -------
        PCDM_StoreStatus

        """
        return _PCDM.PCDM_StorageDriver_GetStoreStatus(self, *args)


    def IsError(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _PCDM.PCDM_StorageDriver_IsError(self, *args)


    def Make(self, *args) -> "void":
        """
        Raises notimplemented.

        Parameters
        ----------
        aDocument: CDM_Document

        Returns
        -------
        opencascade::handle<PCDM_Document>

        By default, puts in the sequence the document returns by the previous make method.

        Parameters
        ----------
        aDocument: CDM_Document
        Documents: PCDM_SequenceOfDocument

        Returns
        -------
        None

        """
        return _PCDM.PCDM_StorageDriver_Make(self, *args)


    def SetFormat(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aformat: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _PCDM.PCDM_StorageDriver_SetFormat(self, *args)


    def SetIsError(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theIsError: bool

        Returns
        -------
        None

        """
        return _PCDM.PCDM_StorageDriver_SetIsError(self, *args)


    def SetStoreStatus(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theStoreStatus: PCDM_StoreStatus

        Returns
        -------
        None

        """
        return _PCDM.PCDM_StorageDriver_SetStoreStatus(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_PCDM_StorageDriver_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _PCDM.new_PCDM_StorageDriver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PCDM.delete_PCDM_StorageDriver
    __del__ = lambda self: None
PCDM_StorageDriver_swigregister = _PCDM.PCDM_StorageDriver_swigregister
PCDM_StorageDriver_swigregister(PCDM_StorageDriver)


@classnotwrapped
class PCDM_DOMHeaderParser:
	pass

@classnotwrapped
class PCDM_Document:
	pass




# This file is compatible with both classic and new-style classes.


