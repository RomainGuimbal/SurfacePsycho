# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepDimTol module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepdimtol.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepDimTol')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepDimTol')
    _StepDimTol = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepDimTol', [dirname(__file__)])
        except ImportError:
            import _StepDimTol
            return _StepDimTol
        try:
            _mod = imp.load_module('_StepDimTol', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepDimTol = swig_import_helper()
    del swig_import_helper
else:
    import _StepDimTol
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepDimTol.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StepDimTol.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepDimTol.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepDimTol.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StepDimTol.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StepDimTol.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StepDimTol.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StepDimTol.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StepDimTol.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StepDimTol.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepDimTol.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StepDimTol.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StepDimTol.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepDimTol.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepDimTol.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepDimTol.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StepDimTol.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepDimTol.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepDimTol.process_exception(error, method_name, class_name)
process_exception = _StepDimTol.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepRepr
import OCC.Core.TCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepBasic
import OCC.Core.StepShape
import OCC.Core.StepGeom

from enum import IntEnum
from OCC.Core.Exception import *

StepDimTol_MaximumMaterialCondition = _StepDimTol.StepDimTol_MaximumMaterialCondition
StepDimTol_LeastMaterialCondition = _StepDimTol.StepDimTol_LeastMaterialCondition
StepDimTol_RegardlessOfFeatureSize = _StepDimTol.StepDimTol_RegardlessOfFeatureSize
StepDimTol_GTTAngularityTolerance = _StepDimTol.StepDimTol_GTTAngularityTolerance
StepDimTol_GTTCircularRunoutTolerance = _StepDimTol.StepDimTol_GTTCircularRunoutTolerance
StepDimTol_GTTCoaxialityTolerance = _StepDimTol.StepDimTol_GTTCoaxialityTolerance
StepDimTol_GTTConcentricityTolerance = _StepDimTol.StepDimTol_GTTConcentricityTolerance
StepDimTol_GTTCylindricityTolerance = _StepDimTol.StepDimTol_GTTCylindricityTolerance
StepDimTol_GTTFlatnessTolerance = _StepDimTol.StepDimTol_GTTFlatnessTolerance
StepDimTol_GTTLineProfileTolerance = _StepDimTol.StepDimTol_GTTLineProfileTolerance
StepDimTol_GTTParallelismTolerance = _StepDimTol.StepDimTol_GTTParallelismTolerance
StepDimTol_GTTPerpendicularityTolerance = _StepDimTol.StepDimTol_GTTPerpendicularityTolerance
StepDimTol_GTTPositionTolerance = _StepDimTol.StepDimTol_GTTPositionTolerance
StepDimTol_GTTRoundnessTolerance = _StepDimTol.StepDimTol_GTTRoundnessTolerance
StepDimTol_GTTStraightnessTolerance = _StepDimTol.StepDimTol_GTTStraightnessTolerance
StepDimTol_GTTSurfaceProfileTolerance = _StepDimTol.StepDimTol_GTTSurfaceProfileTolerance
StepDimTol_GTTSymmetryTolerance = _StepDimTol.StepDimTol_GTTSymmetryTolerance
StepDimTol_GTTTotalRunoutTolerance = _StepDimTol.StepDimTol_GTTTotalRunoutTolerance
StepDimTol_CircularOrCylindrical = _StepDimTol.StepDimTol_CircularOrCylindrical
StepDimTol_Distance = _StepDimTol.StepDimTol_Distance
StepDimTol_Projected = _StepDimTol.StepDimTol_Projected
StepDimTol_Spherical = _StepDimTol.StepDimTol_Spherical
StepDimTol_SDRMAnyCrossSection = _StepDimTol.StepDimTol_SDRMAnyCrossSection
StepDimTol_SDRMAnyLongitudinalSection = _StepDimTol.StepDimTol_SDRMAnyLongitudinalSection
StepDimTol_SDRMBasic = _StepDimTol.StepDimTol_SDRMBasic
StepDimTol_SDRMContactingFeature = _StepDimTol.StepDimTol_SDRMContactingFeature
StepDimTol_SDRMDegreeOfFreedomConstraintU = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintU
StepDimTol_SDRMDegreeOfFreedomConstraintV = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintV
StepDimTol_SDRMDegreeOfFreedomConstraintW = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintW
StepDimTol_SDRMDegreeOfFreedomConstraintX = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintX
StepDimTol_SDRMDegreeOfFreedomConstraintY = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintY
StepDimTol_SDRMDegreeOfFreedomConstraintZ = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintZ
StepDimTol_SDRMDistanceVariable = _StepDimTol.StepDimTol_SDRMDistanceVariable
StepDimTol_SDRMFreeState = _StepDimTol.StepDimTol_SDRMFreeState
StepDimTol_SDRMLeastMaterialRequirement = _StepDimTol.StepDimTol_SDRMLeastMaterialRequirement
StepDimTol_SDRMLine = _StepDimTol.StepDimTol_SDRMLine
StepDimTol_SDRMMajorDiameter = _StepDimTol.StepDimTol_SDRMMajorDiameter
StepDimTol_SDRMMaximumMaterialRequirement = _StepDimTol.StepDimTol_SDRMMaximumMaterialRequirement
StepDimTol_SDRMMinorDiameter = _StepDimTol.StepDimTol_SDRMMinorDiameter
StepDimTol_SDRMOrientation = _StepDimTol.StepDimTol_SDRMOrientation
StepDimTol_SDRMPitchDiameter = _StepDimTol.StepDimTol_SDRMPitchDiameter
StepDimTol_SDRMPlane = _StepDimTol.StepDimTol_SDRMPlane
StepDimTol_SDRMPoint = _StepDimTol.StepDimTol_SDRMPoint
StepDimTol_SDRMTranslation = _StepDimTol.StepDimTol_SDRMTranslation
StepDimTol_Circular = _StepDimTol.StepDimTol_Circular
StepDimTol_Rectangular = _StepDimTol.StepDimTol_Rectangular
StepDimTol_Square = _StepDimTol.StepDimTol_Square
StepDimTol_GTMAnyCrossSection = _StepDimTol.StepDimTol_GTMAnyCrossSection
StepDimTol_GTMCommonZone = _StepDimTol.StepDimTol_GTMCommonZone
StepDimTol_GTMEachRadialElement = _StepDimTol.StepDimTol_GTMEachRadialElement
StepDimTol_GTMFreeState = _StepDimTol.StepDimTol_GTMFreeState
StepDimTol_GTMLeastMaterialRequirement = _StepDimTol.StepDimTol_GTMLeastMaterialRequirement
StepDimTol_GTMLineElement = _StepDimTol.StepDimTol_GTMLineElement
StepDimTol_GTMMajorDiameter = _StepDimTol.StepDimTol_GTMMajorDiameter
StepDimTol_GTMMaximumMaterialRequirement = _StepDimTol.StepDimTol_GTMMaximumMaterialRequirement
StepDimTol_GTMMinorDiameter = _StepDimTol.StepDimTol_GTMMinorDiameter
StepDimTol_GTMNotConvex = _StepDimTol.StepDimTol_GTMNotConvex
StepDimTol_GTMPitchDiameter = _StepDimTol.StepDimTol_GTMPitchDiameter
StepDimTol_GTMReciprocityRequirement = _StepDimTol.StepDimTol_GTMReciprocityRequirement
StepDimTol_GTMSeparateRequirement = _StepDimTol.StepDimTol_GTMSeparateRequirement
StepDimTol_GTMStatisticalTolerance = _StepDimTol.StepDimTol_GTMStatisticalTolerance
StepDimTol_GTMTangentPlane = _StepDimTol.StepDimTol_GTMTangentPlane


class StepDimTol_LimitCondition(IntEnum):
	StepDimTol_MaximumMaterialCondition = 0
	StepDimTol_LeastMaterialCondition = 1
	StepDimTol_RegardlessOfFeatureSize = 2
StepDimTol_MaximumMaterialCondition = StepDimTol_LimitCondition.StepDimTol_MaximumMaterialCondition
StepDimTol_LeastMaterialCondition = StepDimTol_LimitCondition.StepDimTol_LeastMaterialCondition
StepDimTol_RegardlessOfFeatureSize = StepDimTol_LimitCondition.StepDimTol_RegardlessOfFeatureSize

class StepDimTol_GeometricToleranceType(IntEnum):
	StepDimTol_GTTAngularityTolerance = 0
	StepDimTol_GTTCircularRunoutTolerance = 1
	StepDimTol_GTTCoaxialityTolerance = 2
	StepDimTol_GTTConcentricityTolerance = 3
	StepDimTol_GTTCylindricityTolerance = 4
	StepDimTol_GTTFlatnessTolerance = 5
	StepDimTol_GTTLineProfileTolerance = 6
	StepDimTol_GTTParallelismTolerance = 7
	StepDimTol_GTTPerpendicularityTolerance = 8
	StepDimTol_GTTPositionTolerance = 9
	StepDimTol_GTTRoundnessTolerance = 10
	StepDimTol_GTTStraightnessTolerance = 11
	StepDimTol_GTTSurfaceProfileTolerance = 12
	StepDimTol_GTTSymmetryTolerance = 13
	StepDimTol_GTTTotalRunoutTolerance = 14
StepDimTol_GTTAngularityTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTAngularityTolerance
StepDimTol_GTTCircularRunoutTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTCircularRunoutTolerance
StepDimTol_GTTCoaxialityTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTCoaxialityTolerance
StepDimTol_GTTConcentricityTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTConcentricityTolerance
StepDimTol_GTTCylindricityTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTCylindricityTolerance
StepDimTol_GTTFlatnessTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTFlatnessTolerance
StepDimTol_GTTLineProfileTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTLineProfileTolerance
StepDimTol_GTTParallelismTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTParallelismTolerance
StepDimTol_GTTPerpendicularityTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTPerpendicularityTolerance
StepDimTol_GTTPositionTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTPositionTolerance
StepDimTol_GTTRoundnessTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTRoundnessTolerance
StepDimTol_GTTStraightnessTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTStraightnessTolerance
StepDimTol_GTTSurfaceProfileTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTSurfaceProfileTolerance
StepDimTol_GTTSymmetryTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTSymmetryTolerance
StepDimTol_GTTTotalRunoutTolerance = StepDimTol_GeometricToleranceType.StepDimTol_GTTTotalRunoutTolerance

class StepDimTol_DatumReferenceModifierType(IntEnum):
	StepDimTol_CircularOrCylindrical = 0
	StepDimTol_Distance = 1
	StepDimTol_Projected = 2
	StepDimTol_Spherical = 3
StepDimTol_CircularOrCylindrical = StepDimTol_DatumReferenceModifierType.StepDimTol_CircularOrCylindrical
StepDimTol_Distance = StepDimTol_DatumReferenceModifierType.StepDimTol_Distance
StepDimTol_Projected = StepDimTol_DatumReferenceModifierType.StepDimTol_Projected
StepDimTol_Spherical = StepDimTol_DatumReferenceModifierType.StepDimTol_Spherical

class StepDimTol_SimpleDatumReferenceModifier(IntEnum):
	StepDimTol_SDRMAnyCrossSection = 0
	StepDimTol_SDRMAnyLongitudinalSection = 1
	StepDimTol_SDRMBasic = 2
	StepDimTol_SDRMContactingFeature = 3
	StepDimTol_SDRMDegreeOfFreedomConstraintU = 4
	StepDimTol_SDRMDegreeOfFreedomConstraintV = 5
	StepDimTol_SDRMDegreeOfFreedomConstraintW = 6
	StepDimTol_SDRMDegreeOfFreedomConstraintX = 7
	StepDimTol_SDRMDegreeOfFreedomConstraintY = 8
	StepDimTol_SDRMDegreeOfFreedomConstraintZ = 9
	StepDimTol_SDRMDistanceVariable = 10
	StepDimTol_SDRMFreeState = 11
	StepDimTol_SDRMLeastMaterialRequirement = 12
	StepDimTol_SDRMLine = 13
	StepDimTol_SDRMMajorDiameter = 14
	StepDimTol_SDRMMaximumMaterialRequirement = 15
	StepDimTol_SDRMMinorDiameter = 16
	StepDimTol_SDRMOrientation = 17
	StepDimTol_SDRMPitchDiameter = 18
	StepDimTol_SDRMPlane = 19
	StepDimTol_SDRMPoint = 20
	StepDimTol_SDRMTranslation = 21
StepDimTol_SDRMAnyCrossSection = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMAnyCrossSection
StepDimTol_SDRMAnyLongitudinalSection = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMAnyLongitudinalSection
StepDimTol_SDRMBasic = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMBasic
StepDimTol_SDRMContactingFeature = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMContactingFeature
StepDimTol_SDRMDegreeOfFreedomConstraintU = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMDegreeOfFreedomConstraintU
StepDimTol_SDRMDegreeOfFreedomConstraintV = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMDegreeOfFreedomConstraintV
StepDimTol_SDRMDegreeOfFreedomConstraintW = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMDegreeOfFreedomConstraintW
StepDimTol_SDRMDegreeOfFreedomConstraintX = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMDegreeOfFreedomConstraintX
StepDimTol_SDRMDegreeOfFreedomConstraintY = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMDegreeOfFreedomConstraintY
StepDimTol_SDRMDegreeOfFreedomConstraintZ = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMDegreeOfFreedomConstraintZ
StepDimTol_SDRMDistanceVariable = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMDistanceVariable
StepDimTol_SDRMFreeState = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMFreeState
StepDimTol_SDRMLeastMaterialRequirement = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMLeastMaterialRequirement
StepDimTol_SDRMLine = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMLine
StepDimTol_SDRMMajorDiameter = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMMajorDiameter
StepDimTol_SDRMMaximumMaterialRequirement = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMMaximumMaterialRequirement
StepDimTol_SDRMMinorDiameter = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMMinorDiameter
StepDimTol_SDRMOrientation = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMOrientation
StepDimTol_SDRMPitchDiameter = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMPitchDiameter
StepDimTol_SDRMPlane = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMPlane
StepDimTol_SDRMPoint = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMPoint
StepDimTol_SDRMTranslation = StepDimTol_SimpleDatumReferenceModifier.StepDimTol_SDRMTranslation

class StepDimTol_AreaUnitType(IntEnum):
	StepDimTol_Circular = 0
	StepDimTol_Rectangular = 1
	StepDimTol_Square = 2
StepDimTol_Circular = StepDimTol_AreaUnitType.StepDimTol_Circular
StepDimTol_Rectangular = StepDimTol_AreaUnitType.StepDimTol_Rectangular
StepDimTol_Square = StepDimTol_AreaUnitType.StepDimTol_Square

class StepDimTol_GeometricToleranceModifier(IntEnum):
	StepDimTol_GTMAnyCrossSection = 0
	StepDimTol_GTMCommonZone = 1
	StepDimTol_GTMEachRadialElement = 2
	StepDimTol_GTMFreeState = 3
	StepDimTol_GTMLeastMaterialRequirement = 4
	StepDimTol_GTMLineElement = 5
	StepDimTol_GTMMajorDiameter = 6
	StepDimTol_GTMMaximumMaterialRequirement = 7
	StepDimTol_GTMMinorDiameter = 8
	StepDimTol_GTMNotConvex = 9
	StepDimTol_GTMPitchDiameter = 10
	StepDimTol_GTMReciprocityRequirement = 11
	StepDimTol_GTMSeparateRequirement = 12
	StepDimTol_GTMStatisticalTolerance = 13
	StepDimTol_GTMTangentPlane = 14
StepDimTol_GTMAnyCrossSection = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMAnyCrossSection
StepDimTol_GTMCommonZone = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMCommonZone
StepDimTol_GTMEachRadialElement = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMEachRadialElement
StepDimTol_GTMFreeState = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMFreeState
StepDimTol_GTMLeastMaterialRequirement = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMLeastMaterialRequirement
StepDimTol_GTMLineElement = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMLineElement
StepDimTol_GTMMajorDiameter = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMMajorDiameter
StepDimTol_GTMMaximumMaterialRequirement = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMMaximumMaterialRequirement
StepDimTol_GTMMinorDiameter = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMMinorDiameter
StepDimTol_GTMNotConvex = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMNotConvex
StepDimTol_GTMPitchDiameter = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMPitchDiameter
StepDimTol_GTMReciprocityRequirement = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMReciprocityRequirement
StepDimTol_GTMSeparateRequirement = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMSeparateRequirement
StepDimTol_GTMStatisticalTolerance = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMStatisticalTolerance
StepDimTol_GTMTangentPlane = StepDimTol_GeometricToleranceModifier.StepDimTol_GTMTangentPlane


def Handle_StepDimTol_CommonDatum_Create() -> "opencascade::handle< StepDimTol_CommonDatum >":
    return _StepDimTol.Handle_StepDimTol_CommonDatum_Create()
Handle_StepDimTol_CommonDatum_Create = _StepDimTol.Handle_StepDimTol_CommonDatum_Create

def Handle_StepDimTol_CommonDatum_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_CommonDatum >":
    return _StepDimTol.Handle_StepDimTol_CommonDatum_DownCast(t)
Handle_StepDimTol_CommonDatum_DownCast = _StepDimTol.Handle_StepDimTol_CommonDatum_DownCast

def Handle_StepDimTol_CommonDatum_IsNull(t: 'opencascade::handle< StepDimTol_CommonDatum > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_CommonDatum_IsNull(t)
Handle_StepDimTol_CommonDatum_IsNull = _StepDimTol.Handle_StepDimTol_CommonDatum_IsNull

def Handle_StepDimTol_Datum_Create() -> "opencascade::handle< StepDimTol_Datum >":
    return _StepDimTol.Handle_StepDimTol_Datum_Create()
Handle_StepDimTol_Datum_Create = _StepDimTol.Handle_StepDimTol_Datum_Create

def Handle_StepDimTol_Datum_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_Datum >":
    return _StepDimTol.Handle_StepDimTol_Datum_DownCast(t)
Handle_StepDimTol_Datum_DownCast = _StepDimTol.Handle_StepDimTol_Datum_DownCast

def Handle_StepDimTol_Datum_IsNull(t: 'opencascade::handle< StepDimTol_Datum > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_Datum_IsNull(t)
Handle_StepDimTol_Datum_IsNull = _StepDimTol.Handle_StepDimTol_Datum_IsNull

def Handle_StepDimTol_DatumFeature_Create() -> "opencascade::handle< StepDimTol_DatumFeature >":
    return _StepDimTol.Handle_StepDimTol_DatumFeature_Create()
Handle_StepDimTol_DatumFeature_Create = _StepDimTol.Handle_StepDimTol_DatumFeature_Create

def Handle_StepDimTol_DatumFeature_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_DatumFeature >":
    return _StepDimTol.Handle_StepDimTol_DatumFeature_DownCast(t)
Handle_StepDimTol_DatumFeature_DownCast = _StepDimTol.Handle_StepDimTol_DatumFeature_DownCast

def Handle_StepDimTol_DatumFeature_IsNull(t: 'opencascade::handle< StepDimTol_DatumFeature > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_DatumFeature_IsNull(t)
Handle_StepDimTol_DatumFeature_IsNull = _StepDimTol.Handle_StepDimTol_DatumFeature_IsNull

def Handle_StepDimTol_DatumReference_Create() -> "opencascade::handle< StepDimTol_DatumReference >":
    return _StepDimTol.Handle_StepDimTol_DatumReference_Create()
Handle_StepDimTol_DatumReference_Create = _StepDimTol.Handle_StepDimTol_DatumReference_Create

def Handle_StepDimTol_DatumReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_DatumReference >":
    return _StepDimTol.Handle_StepDimTol_DatumReference_DownCast(t)
Handle_StepDimTol_DatumReference_DownCast = _StepDimTol.Handle_StepDimTol_DatumReference_DownCast

def Handle_StepDimTol_DatumReference_IsNull(t: 'opencascade::handle< StepDimTol_DatumReference > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_DatumReference_IsNull(t)
Handle_StepDimTol_DatumReference_IsNull = _StepDimTol.Handle_StepDimTol_DatumReference_IsNull

def Handle_StepDimTol_DatumReferenceModifierWithValue_Create() -> "opencascade::handle< StepDimTol_DatumReferenceModifierWithValue >":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_Create()
Handle_StepDimTol_DatumReferenceModifierWithValue_Create = _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_Create

def Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_DatumReferenceModifierWithValue >":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast(t)
Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast = _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast

def Handle_StepDimTol_DatumReferenceModifierWithValue_IsNull(t: 'opencascade::handle< StepDimTol_DatumReferenceModifierWithValue > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_IsNull(t)
Handle_StepDimTol_DatumReferenceModifierWithValue_IsNull = _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_IsNull

def Handle_StepDimTol_DatumSystem_Create() -> "opencascade::handle< StepDimTol_DatumSystem >":
    return _StepDimTol.Handle_StepDimTol_DatumSystem_Create()
Handle_StepDimTol_DatumSystem_Create = _StepDimTol.Handle_StepDimTol_DatumSystem_Create

def Handle_StepDimTol_DatumSystem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_DatumSystem >":
    return _StepDimTol.Handle_StepDimTol_DatumSystem_DownCast(t)
Handle_StepDimTol_DatumSystem_DownCast = _StepDimTol.Handle_StepDimTol_DatumSystem_DownCast

def Handle_StepDimTol_DatumSystem_IsNull(t: 'opencascade::handle< StepDimTol_DatumSystem > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_DatumSystem_IsNull(t)
Handle_StepDimTol_DatumSystem_IsNull = _StepDimTol.Handle_StepDimTol_DatumSystem_IsNull

def Handle_StepDimTol_DatumTarget_Create() -> "opencascade::handle< StepDimTol_DatumTarget >":
    return _StepDimTol.Handle_StepDimTol_DatumTarget_Create()
Handle_StepDimTol_DatumTarget_Create = _StepDimTol.Handle_StepDimTol_DatumTarget_Create

def Handle_StepDimTol_DatumTarget_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_DatumTarget >":
    return _StepDimTol.Handle_StepDimTol_DatumTarget_DownCast(t)
Handle_StepDimTol_DatumTarget_DownCast = _StepDimTol.Handle_StepDimTol_DatumTarget_DownCast

def Handle_StepDimTol_DatumTarget_IsNull(t: 'opencascade::handle< StepDimTol_DatumTarget > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_DatumTarget_IsNull(t)
Handle_StepDimTol_DatumTarget_IsNull = _StepDimTol.Handle_StepDimTol_DatumTarget_IsNull

def Handle_StepDimTol_GeneralDatumReference_Create() -> "opencascade::handle< StepDimTol_GeneralDatumReference >":
    return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Create()
Handle_StepDimTol_GeneralDatumReference_Create = _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Create

def Handle_StepDimTol_GeneralDatumReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeneralDatumReference >":
    return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_DownCast(t)
Handle_StepDimTol_GeneralDatumReference_DownCast = _StepDimTol.Handle_StepDimTol_GeneralDatumReference_DownCast

def Handle_StepDimTol_GeneralDatumReference_IsNull(t: 'opencascade::handle< StepDimTol_GeneralDatumReference > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_IsNull(t)
Handle_StepDimTol_GeneralDatumReference_IsNull = _StepDimTol.Handle_StepDimTol_GeneralDatumReference_IsNull

def Handle_StepDimTol_GeometricTolerance_Create() -> "opencascade::handle< StepDimTol_GeometricTolerance >":
    return _StepDimTol.Handle_StepDimTol_GeometricTolerance_Create()
Handle_StepDimTol_GeometricTolerance_Create = _StepDimTol.Handle_StepDimTol_GeometricTolerance_Create

def Handle_StepDimTol_GeometricTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeometricTolerance >":
    return _StepDimTol.Handle_StepDimTol_GeometricTolerance_DownCast(t)
Handle_StepDimTol_GeometricTolerance_DownCast = _StepDimTol.Handle_StepDimTol_GeometricTolerance_DownCast

def Handle_StepDimTol_GeometricTolerance_IsNull(t: 'opencascade::handle< StepDimTol_GeometricTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeometricTolerance_IsNull(t)
Handle_StepDimTol_GeometricTolerance_IsNull = _StepDimTol.Handle_StepDimTol_GeometricTolerance_IsNull

def Handle_StepDimTol_GeometricToleranceRelationship_Create() -> "opencascade::handle< StepDimTol_GeometricToleranceRelationship >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_Create()
Handle_StepDimTol_GeometricToleranceRelationship_Create = _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_Create

def Handle_StepDimTol_GeometricToleranceRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeometricToleranceRelationship >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_DownCast(t)
Handle_StepDimTol_GeometricToleranceRelationship_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_DownCast

def Handle_StepDimTol_GeometricToleranceRelationship_IsNull(t: 'opencascade::handle< StepDimTol_GeometricToleranceRelationship > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_IsNull(t)
Handle_StepDimTol_GeometricToleranceRelationship_IsNull = _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_IsNull

def Handle_StepDimTol_RunoutZoneOrientation_Create() -> "opencascade::handle< StepDimTol_RunoutZoneOrientation >":
    return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_Create()
Handle_StepDimTol_RunoutZoneOrientation_Create = _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_Create

def Handle_StepDimTol_RunoutZoneOrientation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_RunoutZoneOrientation >":
    return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_DownCast(t)
Handle_StepDimTol_RunoutZoneOrientation_DownCast = _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_DownCast

def Handle_StepDimTol_RunoutZoneOrientation_IsNull(t: 'opencascade::handle< StepDimTol_RunoutZoneOrientation > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_IsNull(t)
Handle_StepDimTol_RunoutZoneOrientation_IsNull = _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_IsNull

def Handle_StepDimTol_SimpleDatumReferenceModifierMember_Create() -> "opencascade::handle< StepDimTol_SimpleDatumReferenceModifierMember >":
    return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Create()
Handle_StepDimTol_SimpleDatumReferenceModifierMember_Create = _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Create

def Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_SimpleDatumReferenceModifierMember >":
    return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast(t)
Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast = _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast

def Handle_StepDimTol_SimpleDatumReferenceModifierMember_IsNull(t: 'opencascade::handle< StepDimTol_SimpleDatumReferenceModifierMember > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_IsNull(t)
Handle_StepDimTol_SimpleDatumReferenceModifierMember_IsNull = _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_IsNull

def Handle_StepDimTol_ToleranceZone_Create() -> "opencascade::handle< StepDimTol_ToleranceZone >":
    return _StepDimTol.Handle_StepDimTol_ToleranceZone_Create()
Handle_StepDimTol_ToleranceZone_Create = _StepDimTol.Handle_StepDimTol_ToleranceZone_Create

def Handle_StepDimTol_ToleranceZone_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_ToleranceZone >":
    return _StepDimTol.Handle_StepDimTol_ToleranceZone_DownCast(t)
Handle_StepDimTol_ToleranceZone_DownCast = _StepDimTol.Handle_StepDimTol_ToleranceZone_DownCast

def Handle_StepDimTol_ToleranceZone_IsNull(t: 'opencascade::handle< StepDimTol_ToleranceZone > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_ToleranceZone_IsNull(t)
Handle_StepDimTol_ToleranceZone_IsNull = _StepDimTol.Handle_StepDimTol_ToleranceZone_IsNull

def Handle_StepDimTol_ToleranceZoneDefinition_Create() -> "opencascade::handle< StepDimTol_ToleranceZoneDefinition >":
    return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_Create()
Handle_StepDimTol_ToleranceZoneDefinition_Create = _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_Create

def Handle_StepDimTol_ToleranceZoneDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_ToleranceZoneDefinition >":
    return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_DownCast(t)
Handle_StepDimTol_ToleranceZoneDefinition_DownCast = _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_DownCast

def Handle_StepDimTol_ToleranceZoneDefinition_IsNull(t: 'opencascade::handle< StepDimTol_ToleranceZoneDefinition > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_IsNull(t)
Handle_StepDimTol_ToleranceZoneDefinition_IsNull = _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_IsNull

def Handle_StepDimTol_ToleranceZoneForm_Create() -> "opencascade::handle< StepDimTol_ToleranceZoneForm >":
    return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_Create()
Handle_StepDimTol_ToleranceZoneForm_Create = _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_Create

def Handle_StepDimTol_ToleranceZoneForm_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_ToleranceZoneForm >":
    return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_DownCast(t)
Handle_StepDimTol_ToleranceZoneForm_DownCast = _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_DownCast

def Handle_StepDimTol_ToleranceZoneForm_IsNull(t: 'opencascade::handle< StepDimTol_ToleranceZoneForm > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_IsNull(t)
Handle_StepDimTol_ToleranceZoneForm_IsNull = _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_IsNull

def Handle_StepDimTol_CylindricityTolerance_Create() -> "opencascade::handle< StepDimTol_CylindricityTolerance >":
    return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_Create()
Handle_StepDimTol_CylindricityTolerance_Create = _StepDimTol.Handle_StepDimTol_CylindricityTolerance_Create

def Handle_StepDimTol_CylindricityTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_CylindricityTolerance >":
    return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_DownCast(t)
Handle_StepDimTol_CylindricityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_CylindricityTolerance_DownCast

def Handle_StepDimTol_CylindricityTolerance_IsNull(t: 'opencascade::handle< StepDimTol_CylindricityTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_IsNull(t)
Handle_StepDimTol_CylindricityTolerance_IsNull = _StepDimTol.Handle_StepDimTol_CylindricityTolerance_IsNull

def Handle_StepDimTol_DatumReferenceCompartment_Create() -> "opencascade::handle< StepDimTol_DatumReferenceCompartment >":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Create()
Handle_StepDimTol_DatumReferenceCompartment_Create = _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Create

def Handle_StepDimTol_DatumReferenceCompartment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_DatumReferenceCompartment >":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_DownCast(t)
Handle_StepDimTol_DatumReferenceCompartment_DownCast = _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_DownCast

def Handle_StepDimTol_DatumReferenceCompartment_IsNull(t: 'opencascade::handle< StepDimTol_DatumReferenceCompartment > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_IsNull(t)
Handle_StepDimTol_DatumReferenceCompartment_IsNull = _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_IsNull

def Handle_StepDimTol_DatumReferenceElement_Create() -> "opencascade::handle< StepDimTol_DatumReferenceElement >":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Create()
Handle_StepDimTol_DatumReferenceElement_Create = _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Create

def Handle_StepDimTol_DatumReferenceElement_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_DatumReferenceElement >":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_DownCast(t)
Handle_StepDimTol_DatumReferenceElement_DownCast = _StepDimTol.Handle_StepDimTol_DatumReferenceElement_DownCast

def Handle_StepDimTol_DatumReferenceElement_IsNull(t: 'opencascade::handle< StepDimTol_DatumReferenceElement > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_IsNull(t)
Handle_StepDimTol_DatumReferenceElement_IsNull = _StepDimTol.Handle_StepDimTol_DatumReferenceElement_IsNull

def Handle_StepDimTol_FlatnessTolerance_Create() -> "opencascade::handle< StepDimTol_FlatnessTolerance >":
    return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_Create()
Handle_StepDimTol_FlatnessTolerance_Create = _StepDimTol.Handle_StepDimTol_FlatnessTolerance_Create

def Handle_StepDimTol_FlatnessTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_FlatnessTolerance >":
    return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_DownCast(t)
Handle_StepDimTol_FlatnessTolerance_DownCast = _StepDimTol.Handle_StepDimTol_FlatnessTolerance_DownCast

def Handle_StepDimTol_FlatnessTolerance_IsNull(t: 'opencascade::handle< StepDimTol_FlatnessTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_IsNull(t)
Handle_StepDimTol_FlatnessTolerance_IsNull = _StepDimTol.Handle_StepDimTol_FlatnessTolerance_IsNull

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Create() -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRef >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Create()
Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Create = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Create

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRef >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_IsNull(t: 'opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRef > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_IsNull(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_IsNull = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_IsNull

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Create() -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Create()
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Create = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Create

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_IsNull(t: 'opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_IsNull(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_IsNull = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_IsNull

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Create() -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Create()
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Create = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Create

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_IsNull(t: 'opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_IsNull(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_IsNull = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_IsNull

def Handle_StepDimTol_GeoTolAndGeoTolWthMod_Create() -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthMod >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_Create()
Handle_StepDimTol_GeoTolAndGeoTolWthMod_Create = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_Create

def Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthMod >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast(t)
Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast

def Handle_StepDimTol_GeoTolAndGeoTolWthMod_IsNull(t: 'opencascade::handle< StepDimTol_GeoTolAndGeoTolWthMod > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_IsNull(t)
Handle_StepDimTol_GeoTolAndGeoTolWthMod_IsNull = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_IsNull

def Handle_StepDimTol_GeometricToleranceWithDatumReference_Create() -> "opencascade::handle< StepDimTol_GeometricToleranceWithDatumReference >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_Create()
Handle_StepDimTol_GeometricToleranceWithDatumReference_Create = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_Create

def Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeometricToleranceWithDatumReference >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast(t)
Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast

def Handle_StepDimTol_GeometricToleranceWithDatumReference_IsNull(t: 'opencascade::handle< StepDimTol_GeometricToleranceWithDatumReference > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_IsNull(t)
Handle_StepDimTol_GeometricToleranceWithDatumReference_IsNull = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_IsNull

def Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Create() -> "opencascade::handle< StepDimTol_GeometricToleranceWithDefinedUnit >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Create()
Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Create = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Create

def Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeometricToleranceWithDefinedUnit >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast(t)
Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast

def Handle_StepDimTol_GeometricToleranceWithDefinedUnit_IsNull(t: 'opencascade::handle< StepDimTol_GeometricToleranceWithDefinedUnit > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_IsNull(t)
Handle_StepDimTol_GeometricToleranceWithDefinedUnit_IsNull = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_IsNull

def Handle_StepDimTol_GeometricToleranceWithModifiers_Create() -> "opencascade::handle< StepDimTol_GeometricToleranceWithModifiers >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Create()
Handle_StepDimTol_GeometricToleranceWithModifiers_Create = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Create

def Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeometricToleranceWithModifiers >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast(t)
Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast

def Handle_StepDimTol_GeometricToleranceWithModifiers_IsNull(t: 'opencascade::handle< StepDimTol_GeometricToleranceWithModifiers > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_IsNull(t)
Handle_StepDimTol_GeometricToleranceWithModifiers_IsNull = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_IsNull

def Handle_StepDimTol_LineProfileTolerance_Create() -> "opencascade::handle< StepDimTol_LineProfileTolerance >":
    return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_Create()
Handle_StepDimTol_LineProfileTolerance_Create = _StepDimTol.Handle_StepDimTol_LineProfileTolerance_Create

def Handle_StepDimTol_LineProfileTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_LineProfileTolerance >":
    return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_DownCast(t)
Handle_StepDimTol_LineProfileTolerance_DownCast = _StepDimTol.Handle_StepDimTol_LineProfileTolerance_DownCast

def Handle_StepDimTol_LineProfileTolerance_IsNull(t: 'opencascade::handle< StepDimTol_LineProfileTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_IsNull(t)
Handle_StepDimTol_LineProfileTolerance_IsNull = _StepDimTol.Handle_StepDimTol_LineProfileTolerance_IsNull

def Handle_StepDimTol_ModifiedGeometricTolerance_Create() -> "opencascade::handle< StepDimTol_ModifiedGeometricTolerance >":
    return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Create()
Handle_StepDimTol_ModifiedGeometricTolerance_Create = _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Create

def Handle_StepDimTol_ModifiedGeometricTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_ModifiedGeometricTolerance >":
    return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_DownCast(t)
Handle_StepDimTol_ModifiedGeometricTolerance_DownCast = _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_DownCast

def Handle_StepDimTol_ModifiedGeometricTolerance_IsNull(t: 'opencascade::handle< StepDimTol_ModifiedGeometricTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_IsNull(t)
Handle_StepDimTol_ModifiedGeometricTolerance_IsNull = _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_IsNull

def Handle_StepDimTol_NonUniformZoneDefinition_Create() -> "opencascade::handle< StepDimTol_NonUniformZoneDefinition >":
    return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_Create()
Handle_StepDimTol_NonUniformZoneDefinition_Create = _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_Create

def Handle_StepDimTol_NonUniformZoneDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_NonUniformZoneDefinition >":
    return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_DownCast(t)
Handle_StepDimTol_NonUniformZoneDefinition_DownCast = _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_DownCast

def Handle_StepDimTol_NonUniformZoneDefinition_IsNull(t: 'opencascade::handle< StepDimTol_NonUniformZoneDefinition > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_IsNull(t)
Handle_StepDimTol_NonUniformZoneDefinition_IsNull = _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_IsNull

def Handle_StepDimTol_PlacedDatumTargetFeature_Create() -> "opencascade::handle< StepDimTol_PlacedDatumTargetFeature >":
    return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_Create()
Handle_StepDimTol_PlacedDatumTargetFeature_Create = _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_Create

def Handle_StepDimTol_PlacedDatumTargetFeature_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_PlacedDatumTargetFeature >":
    return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_DownCast(t)
Handle_StepDimTol_PlacedDatumTargetFeature_DownCast = _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_DownCast

def Handle_StepDimTol_PlacedDatumTargetFeature_IsNull(t: 'opencascade::handle< StepDimTol_PlacedDatumTargetFeature > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_IsNull(t)
Handle_StepDimTol_PlacedDatumTargetFeature_IsNull = _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_IsNull

def Handle_StepDimTol_PositionTolerance_Create() -> "opencascade::handle< StepDimTol_PositionTolerance >":
    return _StepDimTol.Handle_StepDimTol_PositionTolerance_Create()
Handle_StepDimTol_PositionTolerance_Create = _StepDimTol.Handle_StepDimTol_PositionTolerance_Create

def Handle_StepDimTol_PositionTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_PositionTolerance >":
    return _StepDimTol.Handle_StepDimTol_PositionTolerance_DownCast(t)
Handle_StepDimTol_PositionTolerance_DownCast = _StepDimTol.Handle_StepDimTol_PositionTolerance_DownCast

def Handle_StepDimTol_PositionTolerance_IsNull(t: 'opencascade::handle< StepDimTol_PositionTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_PositionTolerance_IsNull(t)
Handle_StepDimTol_PositionTolerance_IsNull = _StepDimTol.Handle_StepDimTol_PositionTolerance_IsNull

def Handle_StepDimTol_ProjectedZoneDefinition_Create() -> "opencascade::handle< StepDimTol_ProjectedZoneDefinition >":
    return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_Create()
Handle_StepDimTol_ProjectedZoneDefinition_Create = _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_Create

def Handle_StepDimTol_ProjectedZoneDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_ProjectedZoneDefinition >":
    return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_DownCast(t)
Handle_StepDimTol_ProjectedZoneDefinition_DownCast = _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_DownCast

def Handle_StepDimTol_ProjectedZoneDefinition_IsNull(t: 'opencascade::handle< StepDimTol_ProjectedZoneDefinition > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_IsNull(t)
Handle_StepDimTol_ProjectedZoneDefinition_IsNull = _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_IsNull

def Handle_StepDimTol_RoundnessTolerance_Create() -> "opencascade::handle< StepDimTol_RoundnessTolerance >":
    return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_Create()
Handle_StepDimTol_RoundnessTolerance_Create = _StepDimTol.Handle_StepDimTol_RoundnessTolerance_Create

def Handle_StepDimTol_RoundnessTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_RoundnessTolerance >":
    return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_DownCast(t)
Handle_StepDimTol_RoundnessTolerance_DownCast = _StepDimTol.Handle_StepDimTol_RoundnessTolerance_DownCast

def Handle_StepDimTol_RoundnessTolerance_IsNull(t: 'opencascade::handle< StepDimTol_RoundnessTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_IsNull(t)
Handle_StepDimTol_RoundnessTolerance_IsNull = _StepDimTol.Handle_StepDimTol_RoundnessTolerance_IsNull

def Handle_StepDimTol_RunoutZoneDefinition_Create() -> "opencascade::handle< StepDimTol_RunoutZoneDefinition >":
    return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_Create()
Handle_StepDimTol_RunoutZoneDefinition_Create = _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_Create

def Handle_StepDimTol_RunoutZoneDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_RunoutZoneDefinition >":
    return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_DownCast(t)
Handle_StepDimTol_RunoutZoneDefinition_DownCast = _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_DownCast

def Handle_StepDimTol_RunoutZoneDefinition_IsNull(t: 'opencascade::handle< StepDimTol_RunoutZoneDefinition > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_IsNull(t)
Handle_StepDimTol_RunoutZoneDefinition_IsNull = _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_IsNull

def Handle_StepDimTol_StraightnessTolerance_Create() -> "opencascade::handle< StepDimTol_StraightnessTolerance >":
    return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_Create()
Handle_StepDimTol_StraightnessTolerance_Create = _StepDimTol.Handle_StepDimTol_StraightnessTolerance_Create

def Handle_StepDimTol_StraightnessTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_StraightnessTolerance >":
    return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_DownCast(t)
Handle_StepDimTol_StraightnessTolerance_DownCast = _StepDimTol.Handle_StepDimTol_StraightnessTolerance_DownCast

def Handle_StepDimTol_StraightnessTolerance_IsNull(t: 'opencascade::handle< StepDimTol_StraightnessTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_IsNull(t)
Handle_StepDimTol_StraightnessTolerance_IsNull = _StepDimTol.Handle_StepDimTol_StraightnessTolerance_IsNull

def Handle_StepDimTol_SurfaceProfileTolerance_Create() -> "opencascade::handle< StepDimTol_SurfaceProfileTolerance >":
    return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_Create()
Handle_StepDimTol_SurfaceProfileTolerance_Create = _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_Create

def Handle_StepDimTol_SurfaceProfileTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_SurfaceProfileTolerance >":
    return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_DownCast(t)
Handle_StepDimTol_SurfaceProfileTolerance_DownCast = _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_DownCast

def Handle_StepDimTol_SurfaceProfileTolerance_IsNull(t: 'opencascade::handle< StepDimTol_SurfaceProfileTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_IsNull(t)
Handle_StepDimTol_SurfaceProfileTolerance_IsNull = _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_IsNull

def Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Create() -> "opencascade::handle< StepDimTol_UnequallyDisposedGeometricTolerance >":
    return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Create()
Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Create = _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Create

def Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_UnequallyDisposedGeometricTolerance >":
    return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast(t)
Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast = _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast

def Handle_StepDimTol_UnequallyDisposedGeometricTolerance_IsNull(t: 'opencascade::handle< StepDimTol_UnequallyDisposedGeometricTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_IsNull(t)
Handle_StepDimTol_UnequallyDisposedGeometricTolerance_IsNull = _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_IsNull

def Handle_StepDimTol_AngularityTolerance_Create() -> "opencascade::handle< StepDimTol_AngularityTolerance >":
    return _StepDimTol.Handle_StepDimTol_AngularityTolerance_Create()
Handle_StepDimTol_AngularityTolerance_Create = _StepDimTol.Handle_StepDimTol_AngularityTolerance_Create

def Handle_StepDimTol_AngularityTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_AngularityTolerance >":
    return _StepDimTol.Handle_StepDimTol_AngularityTolerance_DownCast(t)
Handle_StepDimTol_AngularityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_AngularityTolerance_DownCast

def Handle_StepDimTol_AngularityTolerance_IsNull(t: 'opencascade::handle< StepDimTol_AngularityTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_AngularityTolerance_IsNull(t)
Handle_StepDimTol_AngularityTolerance_IsNull = _StepDimTol.Handle_StepDimTol_AngularityTolerance_IsNull

def Handle_StepDimTol_CircularRunoutTolerance_Create() -> "opencascade::handle< StepDimTol_CircularRunoutTolerance >":
    return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_Create()
Handle_StepDimTol_CircularRunoutTolerance_Create = _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_Create

def Handle_StepDimTol_CircularRunoutTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_CircularRunoutTolerance >":
    return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DownCast(t)
Handle_StepDimTol_CircularRunoutTolerance_DownCast = _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DownCast

def Handle_StepDimTol_CircularRunoutTolerance_IsNull(t: 'opencascade::handle< StepDimTol_CircularRunoutTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_IsNull(t)
Handle_StepDimTol_CircularRunoutTolerance_IsNull = _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_IsNull

def Handle_StepDimTol_CoaxialityTolerance_Create() -> "opencascade::handle< StepDimTol_CoaxialityTolerance >":
    return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_Create()
Handle_StepDimTol_CoaxialityTolerance_Create = _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_Create

def Handle_StepDimTol_CoaxialityTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_CoaxialityTolerance >":
    return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DownCast(t)
Handle_StepDimTol_CoaxialityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DownCast

def Handle_StepDimTol_CoaxialityTolerance_IsNull(t: 'opencascade::handle< StepDimTol_CoaxialityTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_IsNull(t)
Handle_StepDimTol_CoaxialityTolerance_IsNull = _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_IsNull

def Handle_StepDimTol_ConcentricityTolerance_Create() -> "opencascade::handle< StepDimTol_ConcentricityTolerance >":
    return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_Create()
Handle_StepDimTol_ConcentricityTolerance_Create = _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_Create

def Handle_StepDimTol_ConcentricityTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_ConcentricityTolerance >":
    return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DownCast(t)
Handle_StepDimTol_ConcentricityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DownCast

def Handle_StepDimTol_ConcentricityTolerance_IsNull(t: 'opencascade::handle< StepDimTol_ConcentricityTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_IsNull(t)
Handle_StepDimTol_ConcentricityTolerance_IsNull = _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_IsNull

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Create() -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Create()
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Create = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Create

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_IsNull(t: 'opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_IsNull(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_IsNull = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_IsNull

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Create() -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Create()
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Create = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Create

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_IsNull(t: 'opencascade::handle< StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_IsNull(t)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_IsNull = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_IsNull

def Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Create() -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthMaxTol >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Create()
Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Create = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Create

def Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeoTolAndGeoTolWthMaxTol >":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast(t)
Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast

def Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_IsNull(t: 'opencascade::handle< StepDimTol_GeoTolAndGeoTolWthMaxTol > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_IsNull(t)
Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_IsNull = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_IsNull

def Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Create() -> "opencascade::handle< StepDimTol_GeometricToleranceWithDefinedAreaUnit >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Create()
Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Create = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Create

def Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeometricToleranceWithDefinedAreaUnit >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast(t)
Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast

def Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_IsNull(t: 'opencascade::handle< StepDimTol_GeometricToleranceWithDefinedAreaUnit > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_IsNull(t)
Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_IsNull = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_IsNull

def Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Create() -> "opencascade::handle< StepDimTol_GeometricToleranceWithMaximumTolerance >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Create()
Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Create = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Create

def Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_GeometricToleranceWithMaximumTolerance >":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast(t)
Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast

def Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_IsNull(t: 'opencascade::handle< StepDimTol_GeometricToleranceWithMaximumTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_IsNull(t)
Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_IsNull = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_IsNull

def Handle_StepDimTol_ParallelismTolerance_Create() -> "opencascade::handle< StepDimTol_ParallelismTolerance >":
    return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_Create()
Handle_StepDimTol_ParallelismTolerance_Create = _StepDimTol.Handle_StepDimTol_ParallelismTolerance_Create

def Handle_StepDimTol_ParallelismTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_ParallelismTolerance >":
    return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_DownCast(t)
Handle_StepDimTol_ParallelismTolerance_DownCast = _StepDimTol.Handle_StepDimTol_ParallelismTolerance_DownCast

def Handle_StepDimTol_ParallelismTolerance_IsNull(t: 'opencascade::handle< StepDimTol_ParallelismTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_IsNull(t)
Handle_StepDimTol_ParallelismTolerance_IsNull = _StepDimTol.Handle_StepDimTol_ParallelismTolerance_IsNull

def Handle_StepDimTol_PerpendicularityTolerance_Create() -> "opencascade::handle< StepDimTol_PerpendicularityTolerance >":
    return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_Create()
Handle_StepDimTol_PerpendicularityTolerance_Create = _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_Create

def Handle_StepDimTol_PerpendicularityTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_PerpendicularityTolerance >":
    return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DownCast(t)
Handle_StepDimTol_PerpendicularityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DownCast

def Handle_StepDimTol_PerpendicularityTolerance_IsNull(t: 'opencascade::handle< StepDimTol_PerpendicularityTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_IsNull(t)
Handle_StepDimTol_PerpendicularityTolerance_IsNull = _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_IsNull

def Handle_StepDimTol_SymmetryTolerance_Create() -> "opencascade::handle< StepDimTol_SymmetryTolerance >":
    return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_Create()
Handle_StepDimTol_SymmetryTolerance_Create = _StepDimTol.Handle_StepDimTol_SymmetryTolerance_Create

def Handle_StepDimTol_SymmetryTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_SymmetryTolerance >":
    return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_DownCast(t)
Handle_StepDimTol_SymmetryTolerance_DownCast = _StepDimTol.Handle_StepDimTol_SymmetryTolerance_DownCast

def Handle_StepDimTol_SymmetryTolerance_IsNull(t: 'opencascade::handle< StepDimTol_SymmetryTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_IsNull(t)
Handle_StepDimTol_SymmetryTolerance_IsNull = _StepDimTol.Handle_StepDimTol_SymmetryTolerance_IsNull

def Handle_StepDimTol_TotalRunoutTolerance_Create() -> "opencascade::handle< StepDimTol_TotalRunoutTolerance >":
    return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_Create()
Handle_StepDimTol_TotalRunoutTolerance_Create = _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_Create

def Handle_StepDimTol_TotalRunoutTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_TotalRunoutTolerance >":
    return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DownCast(t)
Handle_StepDimTol_TotalRunoutTolerance_DownCast = _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DownCast

def Handle_StepDimTol_TotalRunoutTolerance_IsNull(t: 'opencascade::handle< StepDimTol_TotalRunoutTolerance > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_IsNull(t)
Handle_StepDimTol_TotalRunoutTolerance_IsNull = _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_IsNull

def Handle_StepDimTol_HArray1OfToleranceZoneTarget_Create() -> "opencascade::handle< StepDimTol_HArray1OfToleranceZoneTarget >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_Create()
Handle_StepDimTol_HArray1OfToleranceZoneTarget_Create = _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_Create

def Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_HArray1OfToleranceZoneTarget >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast(t)
Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast

def Handle_StepDimTol_HArray1OfToleranceZoneTarget_IsNull(t: 'opencascade::handle< StepDimTol_HArray1OfToleranceZoneTarget > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_IsNull(t)
Handle_StepDimTol_HArray1OfToleranceZoneTarget_IsNull = _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_IsNull

def Handle_StepDimTol_HArray1OfDatumReference_Create() -> "opencascade::handle< StepDimTol_HArray1OfDatumReference >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_Create()
Handle_StepDimTol_HArray1OfDatumReference_Create = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_Create

def Handle_StepDimTol_HArray1OfDatumReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_HArray1OfDatumReference >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_DownCast(t)
Handle_StepDimTol_HArray1OfDatumReference_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_DownCast

def Handle_StepDimTol_HArray1OfDatumReference_IsNull(t: 'opencascade::handle< StepDimTol_HArray1OfDatumReference > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_IsNull(t)
Handle_StepDimTol_HArray1OfDatumReference_IsNull = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_IsNull

def Handle_StepDimTol_HArray1OfDatumReferenceElement_Create() -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceElement >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_Create()
Handle_StepDimTol_HArray1OfDatumReferenceElement_Create = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_Create

def Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceElement >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast(t)
Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast

def Handle_StepDimTol_HArray1OfDatumReferenceElement_IsNull(t: 'opencascade::handle< StepDimTol_HArray1OfDatumReferenceElement > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_IsNull(t)
Handle_StepDimTol_HArray1OfDatumReferenceElement_IsNull = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_IsNull

def Handle_StepDimTol_HArray1OfDatumSystemOrReference_Create() -> "opencascade::handle< StepDimTol_HArray1OfDatumSystemOrReference >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_Create()
Handle_StepDimTol_HArray1OfDatumSystemOrReference_Create = _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_Create

def Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_HArray1OfDatumSystemOrReference >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast(t)
Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast

def Handle_StepDimTol_HArray1OfDatumSystemOrReference_IsNull(t: 'opencascade::handle< StepDimTol_HArray1OfDatumSystemOrReference > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_IsNull(t)
Handle_StepDimTol_HArray1OfDatumSystemOrReference_IsNull = _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_IsNull

def Handle_StepDimTol_HArray1OfDatumReferenceCompartment_Create() -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceCompartment >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_Create()
Handle_StepDimTol_HArray1OfDatumReferenceCompartment_Create = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_Create

def Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceCompartment >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast(t)
Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast

def Handle_StepDimTol_HArray1OfDatumReferenceCompartment_IsNull(t: 'opencascade::handle< StepDimTol_HArray1OfDatumReferenceCompartment > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_IsNull(t)
Handle_StepDimTol_HArray1OfDatumReferenceCompartment_IsNull = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_IsNull

def Handle_StepDimTol_HArray1OfDatumReferenceModifier_Create() -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceModifier >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_Create()
Handle_StepDimTol_HArray1OfDatumReferenceModifier_Create = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_Create

def Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceModifier >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast(t)
Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast

def Handle_StepDimTol_HArray1OfDatumReferenceModifier_IsNull(t: 'opencascade::handle< StepDimTol_HArray1OfDatumReferenceModifier > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_IsNull(t)
Handle_StepDimTol_HArray1OfDatumReferenceModifier_IsNull = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_IsNull

def Handle_StepDimTol_HArray1OfGeometricToleranceModifier_Create() -> "opencascade::handle< StepDimTol_HArray1OfGeometricToleranceModifier >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_Create()
Handle_StepDimTol_HArray1OfGeometricToleranceModifier_Create = _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_Create

def Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepDimTol_HArray1OfGeometricToleranceModifier >":
    return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast(t)
Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast

def Handle_StepDimTol_HArray1OfGeometricToleranceModifier_IsNull(t: 'opencascade::handle< StepDimTol_HArray1OfGeometricToleranceModifier > const &') -> "bool":
    return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_IsNull(t)
Handle_StepDimTol_HArray1OfGeometricToleranceModifier_IsNull = _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_IsNull
class StepDimTol_Array1OfDatumReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_Array1OfDatumReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_Array1OfDatumReference, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_cend(self)

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_Array1OfDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepDimTol_DatumReference > const &') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_IsAllocated(self)

    def Assign(self, theOther: 'StepDimTol_Array1OfDatumReference') -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Assign(self, theOther)

    def Move(self, theOther: 'StepDimTol_Array1OfDatumReference') -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Set(self, *args)

    def First(self) -> "opencascade::handle< StepDimTol_DatumReference > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepDimTol_DatumReference > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepDimTol_DatumReference > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepDimTol_DatumReference > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepDimTol_DatumReference > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepDimTol_DatumReference > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepDimTol_DatumReference > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReference___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepDimTol_DatumReference > const &') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReference_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Array1OfDatumReference
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepDimTol_Array1OfDatumReference_swigregister = _StepDimTol.StepDimTol_Array1OfDatumReference_swigregister
StepDimTol_Array1OfDatumReference_swigregister(StepDimTol_Array1OfDatumReference)

class StepDimTol_Array1OfDatumReferenceCompartment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_Array1OfDatumReferenceCompartment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_Array1OfDatumReferenceCompartment, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_cend(self)

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_Array1OfDatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepDimTol_DatumReferenceCompartment > const &') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_IsAllocated(self)

    def Assign(self, theOther: 'StepDimTol_Array1OfDatumReferenceCompartment') -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Assign(self, theOther)

    def Move(self, theOther: 'StepDimTol_Array1OfDatumReferenceCompartment') -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Set(self, *args)

    def First(self) -> "opencascade::handle< StepDimTol_DatumReferenceCompartment > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepDimTol_DatumReferenceCompartment > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepDimTol_DatumReferenceCompartment > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepDimTol_DatumReferenceCompartment > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepDimTol_DatumReferenceCompartment > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepDimTol_DatumReferenceCompartment > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepDimTol_DatumReferenceCompartment > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepDimTol_DatumReferenceCompartment > const &') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Array1OfDatumReferenceCompartment
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepDimTol_Array1OfDatumReferenceCompartment_swigregister = _StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment_swigregister
StepDimTol_Array1OfDatumReferenceCompartment_swigregister(StepDimTol_Array1OfDatumReferenceCompartment)

class StepDimTol_Array1OfDatumReferenceElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_Array1OfDatumReferenceElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_Array1OfDatumReferenceElement, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_cend(self)

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_Array1OfDatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepDimTol_DatumReferenceElement > const &') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_IsAllocated(self)

    def Assign(self, theOther: 'StepDimTol_Array1OfDatumReferenceElement') -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Assign(self, theOther)

    def Move(self, theOther: 'StepDimTol_Array1OfDatumReferenceElement') -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Set(self, *args)

    def First(self) -> "opencascade::handle< StepDimTol_DatumReferenceElement > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepDimTol_DatumReferenceElement > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepDimTol_DatumReferenceElement > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepDimTol_DatumReferenceElement > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepDimTol_DatumReferenceElement > const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepDimTol_DatumReferenceElement > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepDimTol_DatumReferenceElement > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepDimTol_DatumReferenceElement > const &') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Array1OfDatumReferenceElement
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepDimTol_Array1OfDatumReferenceElement_swigregister = _StepDimTol.StepDimTol_Array1OfDatumReferenceElement_swigregister
StepDimTol_Array1OfDatumReferenceElement_swigregister(StepDimTol_Array1OfDatumReferenceElement)

class StepDimTol_Array1OfDatumReferenceModifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_Array1OfDatumReferenceModifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_Array1OfDatumReferenceModifier, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepDimTol_DatumReferenceModifier >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_begin(self)

    def end(self) -> "NCollection_Array1< StepDimTol_DatumReferenceModifier >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_end(self)

    def cbegin(self) -> "NCollection_Array1< StepDimTol_DatumReferenceModifier >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepDimTol_DatumReferenceModifier >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_cend(self)

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_Array1OfDatumReferenceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepDimTol_DatumReferenceModifier') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_IsAllocated(self)

    def Assign(self, theOther: 'StepDimTol_Array1OfDatumReferenceModifier') -> "NCollection_Array1< StepDimTol_DatumReferenceModifier > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Assign(self, theOther)

    def Move(self, theOther: 'StepDimTol_Array1OfDatumReferenceModifier') -> "NCollection_Array1< StepDimTol_DatumReferenceModifier > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepDimTol_DatumReferenceModifier > &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Set(self, *args)

    def First(self) -> "StepDimTol_DatumReferenceModifier const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_First(self)

    def ChangeFirst(self) -> "StepDimTol_DatumReferenceModifier &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_ChangeFirst(self)

    def Last(self) -> "StepDimTol_DatumReferenceModifier const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Last(self)

    def ChangeLast(self) -> "StepDimTol_DatumReferenceModifier &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepDimTol_DatumReferenceModifier const &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepDimTol_DatumReferenceModifier &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepDimTol_DatumReferenceModifier &":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepDimTol_DatumReferenceModifier') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Array1OfDatumReferenceModifier
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepDimTol_Array1OfDatumReferenceModifier_swigregister = _StepDimTol.StepDimTol_Array1OfDatumReferenceModifier_swigregister
StepDimTol_Array1OfDatumReferenceModifier_swigregister(StepDimTol_Array1OfDatumReferenceModifier)

class StepDimTol_Array1OfDatumSystemOrReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_Array1OfDatumSystemOrReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_Array1OfDatumSystemOrReference, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepDimTol_DatumSystemOrReference >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_begin(self)

    def end(self) -> "NCollection_Array1< StepDimTol_DatumSystemOrReference >::iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_end(self)

    def cbegin(self) -> "NCollection_Array1< StepDimTol_DatumSystemOrReference >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepDimTol_DatumSystemOrReference >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_cend(self)

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_Array1OfDatumSystemOrReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepDimTol_DatumSystemOrReference') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_IsAllocated(self)

    def Assign(self, theOther: 'StepDimTol_Array1OfDatumSystemOrReference') -> "NCollection_Array1< StepDimTol_DatumSystemOrReference > &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Assign(self, theOther)

    def Move(self, theOther: 'StepDimTol_Array1OfDatumSystemOrReference') -> "NCollection_Array1< StepDimTol_DatumSystemOrReference > &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepDimTol_DatumSystemOrReference > &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Set(self, *args)

    def First(self) -> "StepDimTol_DatumSystemOrReference const &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_First(self)

    def ChangeFirst(self) -> "StepDimTol_DatumSystemOrReference &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_ChangeFirst(self)

    def Last(self) -> "StepDimTol_DatumSystemOrReference const &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Last(self)

    def ChangeLast(self) -> "StepDimTol_DatumSystemOrReference &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepDimTol_DatumSystemOrReference const &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepDimTol_DatumSystemOrReference &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepDimTol_DatumSystemOrReference &":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepDimTol_DatumSystemOrReference') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Array1OfDatumSystemOrReference
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepDimTol_Array1OfDatumSystemOrReference_swigregister = _StepDimTol.StepDimTol_Array1OfDatumSystemOrReference_swigregister
StepDimTol_Array1OfDatumSystemOrReference_swigregister(StepDimTol_Array1OfDatumSystemOrReference)

class StepDimTol_Array1OfGeometricToleranceModifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_Array1OfGeometricToleranceModifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_Array1OfGeometricToleranceModifier, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< enum StepDimTol_GeometricToleranceModifier >::iterator":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_begin(self)

    def end(self) -> "NCollection_Array1< enum StepDimTol_GeometricToleranceModifier >::iterator":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_end(self)

    def cbegin(self) -> "NCollection_Array1< enum StepDimTol_GeometricToleranceModifier >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_cbegin(self)

    def cend(self) -> "NCollection_Array1< enum StepDimTol_GeometricToleranceModifier >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_cend(self)

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_Array1OfGeometricToleranceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepDimTol_GeometricToleranceModifier const &') -> "void":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_IsAllocated(self)

    def Assign(self, theOther: 'StepDimTol_Array1OfGeometricToleranceModifier') -> "NCollection_Array1< StepDimTol_GeometricToleranceModifier > &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Assign(self, theOther)

    def Move(self, theOther: 'StepDimTol_Array1OfGeometricToleranceModifier') -> "NCollection_Array1< StepDimTol_GeometricToleranceModifier > &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepDimTol_GeometricToleranceModifier > &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Set(self, *args)

    def First(self) -> "StepDimTol_GeometricToleranceModifier const &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_First(self)

    def ChangeFirst(self) -> "StepDimTol_GeometricToleranceModifier &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_ChangeFirst(self)

    def Last(self) -> "StepDimTol_GeometricToleranceModifier const &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Last(self)

    def ChangeLast(self) -> "StepDimTol_GeometricToleranceModifier &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepDimTol_GeometricToleranceModifier const &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepDimTol_GeometricToleranceModifier &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepDimTol_GeometricToleranceModifier &":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepDimTol_GeometricToleranceModifier const &') -> "void":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Array1OfGeometricToleranceModifier
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepDimTol_Array1OfGeometricToleranceModifier_swigregister = _StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier_swigregister
StepDimTol_Array1OfGeometricToleranceModifier_swigregister(StepDimTol_Array1OfGeometricToleranceModifier)

class StepDimTol_Array1OfToleranceZoneTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_Array1OfToleranceZoneTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_Array1OfToleranceZoneTarget, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepDimTol_ToleranceZoneTarget >::iterator":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_begin(self)

    def end(self) -> "NCollection_Array1< StepDimTol_ToleranceZoneTarget >::iterator":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_end(self)

    def cbegin(self) -> "NCollection_Array1< StepDimTol_ToleranceZoneTarget >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepDimTol_ToleranceZoneTarget >::const_iterator":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_cend(self)

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_Array1OfToleranceZoneTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepDimTol_ToleranceZoneTarget') -> "void":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_IsAllocated(self)

    def Assign(self, theOther: 'StepDimTol_Array1OfToleranceZoneTarget') -> "NCollection_Array1< StepDimTol_ToleranceZoneTarget > &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Assign(self, theOther)

    def Move(self, theOther: 'StepDimTol_Array1OfToleranceZoneTarget') -> "NCollection_Array1< StepDimTol_ToleranceZoneTarget > &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepDimTol_ToleranceZoneTarget > &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Set(self, *args)

    def First(self) -> "StepDimTol_ToleranceZoneTarget const &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_First(self)

    def ChangeFirst(self) -> "StepDimTol_ToleranceZoneTarget &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_ChangeFirst(self)

    def Last(self) -> "StepDimTol_ToleranceZoneTarget const &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Last(self)

    def ChangeLast(self) -> "StepDimTol_ToleranceZoneTarget &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepDimTol_ToleranceZoneTarget const &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepDimTol_ToleranceZoneTarget &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepDimTol_ToleranceZoneTarget &":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepDimTol_ToleranceZoneTarget') -> "void":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Array1OfToleranceZoneTarget
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepDimTol_Array1OfToleranceZoneTarget_swigregister = _StepDimTol.StepDimTol_Array1OfToleranceZoneTarget_swigregister
StepDimTol_Array1OfToleranceZoneTarget_swigregister(StepDimTol_Array1OfToleranceZoneTarget)

class StepDimTol_CommonDatum(OCC.Core.StepRepr.StepRepr_CompositeShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_CompositeShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_CommonDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_CompositeShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_CommonDatum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_CommonDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Datum(self, *args) -> "opencascade::handle< StepDimTol_Datum >":
        """
        Returns data for supertype datum.

        Returns
        -------
        opencascade::handle<StepDimTol_Datum>

        """
        return _StepDimTol.StepDimTol_CommonDatum_Datum(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theShapeAspect_Name: TCollection_HAsciiString
        theShapeAspect_Description: TCollection_HAsciiString
        theShapeAspect_OfShape: StepRepr_ProductDefinitionShape
        theShapeAspect_ProductDefinitional: StepData_Logical
        theDatum_Name: TCollection_HAsciiString
        theDatum_Description: TCollection_HAsciiString
        theDatum_OfShape: StepRepr_ProductDefinitionShape
        theDatum_ProductDefinitional: StepData_Logical
        theDatum_Identification: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_CommonDatum_Init(self, *args)


    def SetDatum(self, *args) -> "void":
        """
        Set data for supertype datum.

        Parameters
        ----------
        theDatum: StepDimTol_Datum

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_CommonDatum_SetDatum(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_CommonDatum_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_CommonDatum
    __del__ = lambda self: None
StepDimTol_CommonDatum_swigregister = _StepDimTol.StepDimTol_CommonDatum_swigregister
StepDimTol_CommonDatum_swigregister(StepDimTol_CommonDatum)

class StepDimTol_Datum(OCC.Core.StepRepr.StepRepr_ShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_Datum, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_Datum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_Datum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Identification(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field identification.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepDimTol.StepDimTol_Datum_Identification(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theShapeAspect_Name: TCollection_HAsciiString
        theShapeAspect_Description: TCollection_HAsciiString
        theShapeAspect_OfShape: StepRepr_ProductDefinitionShape
        theShapeAspect_ProductDefinitional: StepData_Logical
        theIdentification: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_Datum_Init(self, *args)


    def SetIdentification(self, *args) -> "void":
        """
        Set field identification.

        Parameters
        ----------
        theIdentification: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_Datum_SetIdentification(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_Datum_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Datum
    __del__ = lambda self: None
StepDimTol_Datum_swigregister = _StepDimTol.StepDimTol_Datum_swigregister
StepDimTol_Datum_swigregister(StepDimTol_Datum)

class StepDimTol_DatumFeature(OCC.Core.StepRepr.StepRepr_ShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_DatumFeature_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumFeature
    __del__ = lambda self: None
StepDimTol_DatumFeature_swigregister = _StepDimTol.StepDimTol_DatumFeature_swigregister
StepDimTol_DatumFeature_swigregister(StepDimTol_DatumFeature)

class StepDimTol_DatumOrCommonDatum(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumOrCommonDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumOrCommonDatum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a datumorcommondatum select type.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumOrCommonDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CommonDatumList(self, *args) -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceElement >":
        """
        Returns value as a commondatumlist (null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_HArray1OfDatumReferenceElement>

        """
        return _StepDimTol.StepDimTol_DatumOrCommonDatum_CommonDatumList(self, *args)


    def Datum(self, *args) -> "opencascade::handle< StepDimTol_Datum >":
        """
        Returns value as a datum (null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_Datum>

        """
        return _StepDimTol.StepDimTol_DatumOrCommonDatum_Datum(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumOrCommonDatum
    __del__ = lambda self: None
StepDimTol_DatumOrCommonDatum_swigregister = _StepDimTol.StepDimTol_DatumOrCommonDatum_swigregister
StepDimTol_DatumOrCommonDatum_swigregister(StepDimTol_DatumOrCommonDatum)

class StepDimTol_DatumReference(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumReference, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        thePrecedence: int
        theReferencedDatum: StepDimTol_Datum

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumReference_Init(self, *args)


    def Precedence(self, *args) -> "Standard_Integer":
        """
        Returns field precedence.

        Returns
        -------
        int

        """
        return _StepDimTol.StepDimTol_DatumReference_Precedence(self, *args)


    def ReferencedDatum(self, *args) -> "opencascade::handle< StepDimTol_Datum >":
        """
        Returns field referenceddatum.

        Returns
        -------
        opencascade::handle<StepDimTol_Datum>

        """
        return _StepDimTol.StepDimTol_DatumReference_ReferencedDatum(self, *args)


    def SetPrecedence(self, *args) -> "void":
        """
        Set field precedence.

        Parameters
        ----------
        thePrecedence: int

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumReference_SetPrecedence(self, *args)


    def SetReferencedDatum(self, *args) -> "void":
        """
        Set field referenceddatum.

        Parameters
        ----------
        theReferencedDatum: StepDimTol_Datum

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumReference_SetReferencedDatum(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_DatumReference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReference
    __del__ = lambda self: None
StepDimTol_DatumReference_swigregister = _StepDimTol.StepDimTol_DatumReference_swigregister
StepDimTol_DatumReference_swigregister(StepDimTol_DatumReference)

class StepDimTol_DatumReferenceModifier(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumReferenceModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumReferenceModifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a datumreferencemodifier select type.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumReferenceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DatumReferenceModifierWithValue(self, *args) -> "opencascade::handle< StepDimTol_DatumReferenceModifierWithValue >":
        """
        Returns value as a datumreferencemodifierwithvalue (null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_DatumReferenceModifierWithValue>

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifier_DatumReferenceModifierWithValue(self, *args)


    def SimpleDatumReferenceModifierMember(self, *args) -> "opencascade::handle< StepDimTol_SimpleDatumReferenceModifierMember >":
        """
        Returns value as a simpledatumreferencemodifiermember (null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_SimpleDatumReferenceModifierMember>

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifier_SimpleDatumReferenceModifierMember(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReferenceModifier
    __del__ = lambda self: None
StepDimTol_DatumReferenceModifier_swigregister = _StepDimTol.StepDimTol_DatumReferenceModifier_swigregister
StepDimTol_DatumReferenceModifier_swigregister(StepDimTol_DatumReferenceModifier)

class StepDimTol_DatumReferenceModifierWithValue(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumReferenceModifierWithValue, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumReferenceModifierWithValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumReferenceModifierWithValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theModifierType: StepDimTol_DatumReferenceModifierType
        theModifierValue: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_Init(self, *args)


    def ModifierType(self, *args) -> "StepDimTol_DatumReferenceModifierType":
        """
        Returns field modifiertype.

        Returns
        -------
        StepDimTol_DatumReferenceModifierType

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_ModifierType(self, *args)


    def ModifierValue(self, *args) -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
        """
        Returns field modifiervalue.

        Returns
        -------
        opencascade::handle<StepBasic_LengthMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_ModifierValue(self, *args)


    def SetModifierType(self, *args) -> "void":
        """
        Set field modifiertype.

        Parameters
        ----------
        theModifierType: StepDimTol_DatumReferenceModifierType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_SetModifierType(self, *args)


    def SetModifierValue(self, *args) -> "void":
        """
        Set field modifiervalue.

        Parameters
        ----------
        theModifierValue: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_SetModifierValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReferenceModifierWithValue
    __del__ = lambda self: None
StepDimTol_DatumReferenceModifierWithValue_swigregister = _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_swigregister
StepDimTol_DatumReferenceModifierWithValue_swigregister(StepDimTol_DatumReferenceModifierWithValue)

class StepDimTol_DatumSystem(OCC.Core.StepRepr.StepRepr_ShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Constituents(self, *args) -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceCompartment >":
        """
        Returns field constituents.

        Returns
        -------
        opencascade::handle<StepDimTol_HArray1OfDatumReferenceCompartment>

        """
        return _StepDimTol.StepDimTol_DatumSystem_Constituents(self, *args)


    def ConstituentsValue(self, *args) -> "void":
        """
        Returns constituents with the given number.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepDimTol_DatumReferenceCompartment>

        Sets constituents with given number.

        Parameters
        ----------
        num: int
        theItem: StepDimTol_DatumReferenceCompartment

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumSystem_ConstituentsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theOfShape: StepRepr_ProductDefinitionShape
        theProductDefinitional: StepData_Logical
        theConstituents: StepDimTol_HArray1OfDatumReferenceCompartment

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumSystem_Init(self, *args)


    def NbConstituents(self, *args) -> "Standard_Integer":
        """
        Returns number of constituents.

        Returns
        -------
        int

        """
        return _StepDimTol.StepDimTol_DatumSystem_NbConstituents(self, *args)


    def SetConstituents(self, *args) -> "void":
        """
        Set field constituents.

        Parameters
        ----------
        theConstituents: StepDimTol_HArray1OfDatumReferenceCompartment

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumSystem_SetConstituents(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_DatumSystem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumSystem
    __del__ = lambda self: None
StepDimTol_DatumSystem_swigregister = _StepDimTol.StepDimTol_DatumSystem_swigregister
StepDimTol_DatumSystem_swigregister(StepDimTol_DatumSystem)

class StepDimTol_DatumSystemOrReference(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumSystemOrReference, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumSystemOrReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a datumsystemorreference select type.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumSystemOrReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DatumReference(self, *args) -> "opencascade::handle< StepDimTol_DatumReference >":
        """
        Returns value as a datumreference (null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_DatumReference>

        """
        return _StepDimTol.StepDimTol_DatumSystemOrReference_DatumReference(self, *args)


    def DatumSystem(self, *args) -> "opencascade::handle< StepDimTol_DatumSystem >":
        """
        Returns value as a datumsystem (null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_DatumSystem>

        """
        return _StepDimTol.StepDimTol_DatumSystemOrReference_DatumSystem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumSystemOrReference
    __del__ = lambda self: None
StepDimTol_DatumSystemOrReference_swigregister = _StepDimTol.StepDimTol_DatumSystemOrReference_swigregister
StepDimTol_DatumSystemOrReference_swigregister(StepDimTol_DatumSystemOrReference)

class StepDimTol_DatumTarget(OCC.Core.StepRepr.StepRepr_ShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumTarget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theShapeAspect_Name: TCollection_HAsciiString
        theShapeAspect_Description: TCollection_HAsciiString
        theShapeAspect_OfShape: StepRepr_ProductDefinitionShape
        theShapeAspect_ProductDefinitional: StepData_Logical
        theTargetId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumTarget_Init(self, *args)


    def SetTargetId(self, *args) -> "void":
        """
        Set field targetid.

        Parameters
        ----------
        theTargetId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_DatumTarget_SetTargetId(self, *args)


    def TargetId(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field targetid.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepDimTol.StepDimTol_DatumTarget_TargetId(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_DatumTarget_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumTarget
    __del__ = lambda self: None
StepDimTol_DatumTarget_swigregister = _StepDimTol.StepDimTol_DatumTarget_swigregister
StepDimTol_DatumTarget_swigregister(StepDimTol_DatumTarget)

class StepDimTol_GeneralDatumReference(OCC.Core.StepRepr.StepRepr_ShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeneralDatumReference, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeneralDatumReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeneralDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Base(self, *args) -> "StepDimTol_DatumOrCommonDatum":
        """
        Returns field base.

        Returns
        -------
        StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_Base(self, *args)


    def HasModifiers(self, *args) -> "Standard_Boolean":
        """
        Indicates is field modifiers exist.

        Returns
        -------
        bool

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_HasModifiers(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theOfShape: StepRepr_ProductDefinitionShape
        theProductDefinitional: StepData_Logical
        theBase: StepDimTol_DatumOrCommonDatum
        theHasModifiers: bool
        theModifiers: StepDimTol_HArray1OfDatumReferenceModifier

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_Init(self, *args)


    def Modifiers(self, *args) -> "opencascade::handle< StepDimTol_HArray1OfDatumReferenceModifier >":
        """
        Returns field modifiers.

        Returns
        -------
        opencascade::handle<StepDimTol_HArray1OfDatumReferenceModifier>

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_Modifiers(self, *args)


    def ModifiersValue(self, *args) -> "void":
        """
        Returns modifiers with the given number.

        Parameters
        ----------
        theNum: int

        Returns
        -------
        StepDimTol_DatumReferenceModifier

        Sets modifiers with given number.

        Parameters
        ----------
        theNum: int
        theItem: StepDimTol_DatumReferenceModifier

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_ModifiersValue(self, *args)


    def NbModifiers(self, *args) -> "Standard_Integer":
        """
        Returns number of modifiers.

        Returns
        -------
        int

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_NbModifiers(self, *args)


    def SetBase(self, *args) -> "void":
        """
        Set field base.

        Parameters
        ----------
        theBase: StepDimTol_DatumOrCommonDatum

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_SetBase(self, *args)


    def SetModifiers(self, *args) -> "void":
        """
        Set field modifiers.

        Parameters
        ----------
        theModifiers: StepDimTol_HArray1OfDatumReferenceModifier

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_SetModifiers(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeneralDatumReference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeneralDatumReference
    __del__ = lambda self: None
StepDimTol_GeneralDatumReference_swigregister = _StepDimTol.StepDimTol_GeneralDatumReference_swigregister
StepDimTol_GeneralDatumReference_swigregister(StepDimTol_GeneralDatumReference)

class StepDimTol_GeometricTolerance(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeometricTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeometricTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited) ap214.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepRepr_ShapeAspect

        Returns
        -------
        None

        Initialize all fields (own and inherited) ap242.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_Init(self, *args)


    def Magnitude(self, *args) -> "opencascade::handle< StepBasic_MeasureWithUnit >":
        """
        Returns field magnitude.

        Returns
        -------
        opencascade::handle<StepBasic_MeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_Magnitude(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        theDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_SetDescription(self, *args)


    def SetMagnitude(self, *args) -> "void":
        """
        Set field magnitude.

        Parameters
        ----------
        theMagnitude: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_SetMagnitude(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        theName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_SetName(self, *args)


    def SetTolerancedShapeAspect(self, *args) -> "void":
        """
        Set field tolerancedshapeaspect ap214.

        Parameters
        ----------
        theTolerancedShapeAspect: StepRepr_ShapeAspect

        Returns
        -------
        None

        Set field tolerancedshapeaspect ap242.

        Parameters
        ----------
        theTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_SetTolerancedShapeAspect(self, *args)


    def TolerancedShapeAspect(self, *args) -> "StepDimTol_GeometricToleranceTarget":
        """
        Returns field tolerancedshapeaspect note: in ap214(203) type of this attribute can be only steprepr_shapeaspect.

        Returns
        -------
        StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_TolerancedShapeAspect(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeometricTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricTolerance
    __del__ = lambda self: None
StepDimTol_GeometricTolerance_swigregister = _StepDimTol.StepDimTol_GeometricTolerance_swigregister
StepDimTol_GeometricTolerance_swigregister(StepDimTol_GeometricTolerance)

class StepDimTol_GeometricToleranceRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeometricToleranceRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeometricToleranceRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theRelatingGeometricTolerance: StepDimTol_GeometricTolerance
        theRelatedGeometricTolerance: StepDimTol_GeometricTolerance

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_Name(self, *args)


    def RelatedGeometricTolerance(self, *args) -> "opencascade::handle< StepDimTol_GeometricTolerance >":
        """
        Returns field relatedgeometrictolerance.

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricTolerance>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_RelatedGeometricTolerance(self, *args)


    def RelatingGeometricTolerance(self, *args) -> "opencascade::handle< StepDimTol_GeometricTolerance >":
        """
        Returns field relatinggeometrictolerance.

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricTolerance>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_RelatingGeometricTolerance(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        theDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        theName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_SetName(self, *args)


    def SetRelatedGeometricTolerance(self, *args) -> "void":
        """
        Set field relatedgeometrictolerance.

        Parameters
        ----------
        theRelatedGeometricTolerance: StepDimTol_GeometricTolerance

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_SetRelatedGeometricTolerance(self, *args)


    def SetRelatingGeometricTolerance(self, *args) -> "void":
        """
        Set field relatinggeometrictolerance.

        Parameters
        ----------
        theRelatingGeometricTolerance: StepDimTol_GeometricTolerance

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_SetRelatingGeometricTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeometricToleranceRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceRelationship
    __del__ = lambda self: None
StepDimTol_GeometricToleranceRelationship_swigregister = _StepDimTol.StepDimTol_GeometricToleranceRelationship_swigregister
StepDimTol_GeometricToleranceRelationship_swigregister(StepDimTol_GeometricToleranceRelationship)

class StepDimTol_GeometricToleranceTarget(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeometricToleranceTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeometricToleranceTarget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a geometrictolerancetarget select type.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DimensionalLocation(self, *args) -> "opencascade::handle< StepShape_DimensionalLocation >":
        """
        Returns value as a dimensionallocation (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_DimensionalLocation>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_DimensionalLocation(self, *args)


    def DimensionalSize(self, *args) -> "opencascade::handle< StepShape_DimensionalSize >":
        """
        Returns value as a dimensionalsize (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_DimensionalSize>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_DimensionalSize(self, *args)


    def ProductDefinitionShape(self, *args) -> "opencascade::handle< StepRepr_ProductDefinitionShape >":
        """
        Returns value as a productdefinitionshape (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_ProductDefinitionShape>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_ProductDefinitionShape(self, *args)


    def ShapeAspect(self, *args) -> "opencascade::handle< StepRepr_ShapeAspect >":
        """
        Returns value as a shapeaspect (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_ShapeAspect>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_ShapeAspect(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceTarget
    __del__ = lambda self: None
StepDimTol_GeometricToleranceTarget_swigregister = _StepDimTol.StepDimTol_GeometricToleranceTarget_swigregister
StepDimTol_GeometricToleranceTarget_swigregister(StepDimTol_GeometricToleranceTarget)

class StepDimTol_RunoutZoneOrientation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_RunoutZoneOrientation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_RunoutZoneOrientation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_RunoutZoneOrientation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angle(self, *args) -> "opencascade::handle< StepBasic_PlaneAngleMeasureWithUnit >":
        """
        Returns field angle.

        Returns
        -------
        opencascade::handle<StepBasic_PlaneAngleMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_RunoutZoneOrientation_Angle(self, *args)


    def Init(self, *args) -> "void":
        """
        Init all field own and inherited.

        Parameters
        ----------
        theAngle: StepBasic_PlaneAngleMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_RunoutZoneOrientation_Init(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        Set field angle.

        Parameters
        ----------
        theAngle: StepBasic_PlaneAngleMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_RunoutZoneOrientation_SetAngle(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_RunoutZoneOrientation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_RunoutZoneOrientation
    __del__ = lambda self: None
StepDimTol_RunoutZoneOrientation_swigregister = _StepDimTol.StepDimTol_RunoutZoneOrientation_swigregister
StepDimTol_RunoutZoneOrientation_swigregister(StepDimTol_RunoutZoneOrientation)

class StepDimTol_ShapeToleranceSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ShapeToleranceSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ShapeToleranceSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ShapeToleranceSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GeometricTolerance(self, *args) -> "opencascade::handle< StepDimTol_GeometricTolerance >":
        """
        Returns value as geometrictolerance (or null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricTolerance>

        """
        return _StepDimTol.StepDimTol_ShapeToleranceSelect_GeometricTolerance(self, *args)


    def PlusMinusTolerance(self, *args) -> "opencascade::handle< StepShape_PlusMinusTolerance >":
        """
        Returns value as plusminustolerance (or null if another type).

        Returns
        -------
        opencascade::handle<StepShape_PlusMinusTolerance>

        """
        return _StepDimTol.StepDimTol_ShapeToleranceSelect_PlusMinusTolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ShapeToleranceSelect
    __del__ = lambda self: None
StepDimTol_ShapeToleranceSelect_swigregister = _StepDimTol.StepDimTol_ShapeToleranceSelect_swigregister
StepDimTol_ShapeToleranceSelect_swigregister(StepDimTol_ShapeToleranceSelect)

class StepDimTol_SimpleDatumReferenceModifierMember(OCC.Core.StepData.StepData_SelectInt):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectInt]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_SimpleDatumReferenceModifierMember, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectInt]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_SimpleDatumReferenceModifierMember, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_SimpleDatumReferenceModifierMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetName(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Standard_CString: 

        Returns
        -------
        bool

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_SetName(self, *args)


    def SetValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theValue: StepDimTol_SimpleDatumReferenceModifier

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_SetValue(self, *args)


    def Value(self, *args) -> "StepDimTol_SimpleDatumReferenceModifier":
        """
        No available documentation.

        Returns
        -------
        StepDimTol_SimpleDatumReferenceModifier

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_SimpleDatumReferenceModifierMember
    __del__ = lambda self: None
StepDimTol_SimpleDatumReferenceModifierMember_swigregister = _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_swigregister
StepDimTol_SimpleDatumReferenceModifierMember_swigregister(StepDimTol_SimpleDatumReferenceModifierMember)

class StepDimTol_ToleranceZone(OCC.Core.StepRepr.StepRepr_ShapeAspect):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ToleranceZone, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspect]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ToleranceZone, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ToleranceZone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DefiningTolerance(self, *args) -> "opencascade::handle< StepDimTol_HArray1OfToleranceZoneTarget >":
        """
        Returns field definingtolerance.

        Returns
        -------
        opencascade::handle<StepDimTol_HArray1OfToleranceZoneTarget>

        """
        return _StepDimTol.StepDimTol_ToleranceZone_DefiningTolerance(self, *args)


    def DefiningToleranceValue(self, *args) -> "StepDimTol_ToleranceZoneTarget":
        """
        Returns defining tolerance with the given number.

        Parameters
        ----------
        theNum: int

        Returns
        -------
        StepDimTol_ToleranceZoneTarget

        """
        return _StepDimTol.StepDimTol_ToleranceZone_DefiningToleranceValue(self, *args)


    def Form(self, *args) -> "opencascade::handle< StepDimTol_ToleranceZoneForm >":
        """
        Returns field form.

        Returns
        -------
        opencascade::handle<StepDimTol_ToleranceZoneForm>

        """
        return _StepDimTol.StepDimTol_ToleranceZone_Form(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theOfShape: StepRepr_ProductDefinitionShape
        theProductDefinitional: StepData_Logical
        theDefiningTolerance: StepDimTol_HArray1OfToleranceZoneTarget
        theForm: StepDimTol_ToleranceZoneForm

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZone_Init(self, *args)


    def NbDefiningTolerances(self, *args) -> "Standard_Integer":
        """
        Returns number of defining tolerances.

        Returns
        -------
        int

        """
        return _StepDimTol.StepDimTol_ToleranceZone_NbDefiningTolerances(self, *args)


    def SetDefiningTolerance(self, *args) -> "void":
        """
        Set field definingtolerance.

        Parameters
        ----------
        theDefiningTolerance: StepDimTol_HArray1OfToleranceZoneTarget

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZone_SetDefiningTolerance(self, *args)


    def SetDefiningToleranceValue(self, *args) -> "void":
        """
        Sets defining tolerance with given number.

        Parameters
        ----------
        theNum: int
        theItem: StepDimTol_ToleranceZoneTarget

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZone_SetDefiningToleranceValue(self, *args)


    def SetForm(self, *args) -> "void":
        """
        Set field form.

        Parameters
        ----------
        theForm: StepDimTol_ToleranceZoneForm

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZone_SetForm(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_ToleranceZone_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ToleranceZone
    __del__ = lambda self: None
StepDimTol_ToleranceZone_swigregister = _StepDimTol.StepDimTol_ToleranceZone_swigregister
StepDimTol_ToleranceZone_swigregister(StepDimTol_ToleranceZone)

class StepDimTol_ToleranceZoneDefinition(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ToleranceZoneDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ToleranceZoneDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ToleranceZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Boundaries(self, *args) -> "opencascade::handle< StepRepr_HArray1OfShapeAspect >":
        """
        Returns field boundaries.

        Returns
        -------
        opencascade::handle<StepRepr_HArray1OfShapeAspect>

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_Boundaries(self, *args)


    def BoundariesValue(self, *args) -> "opencascade::handle< StepRepr_ShapeAspect >":
        """
        Returns boundaries with the given number.

        Parameters
        ----------
        theNum: int

        Returns
        -------
        opencascade::handle<StepRepr_ShapeAspect>

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_BoundariesValue(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theZone: StepDimTol_ToleranceZone
        theBoundaries: StepRepr_HArray1OfShapeAspect

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_Init(self, *args)


    def NbBoundaries(self, *args) -> "Standard_Integer":
        """
        Returns number of boundaries.

        Returns
        -------
        int

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_NbBoundaries(self, *args)


    def SetBoundaries(self, *args) -> "void":
        """
        Set field boundaries.

        Parameters
        ----------
        theBoundaries: StepRepr_HArray1OfShapeAspect

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_SetBoundaries(self, *args)


    def SetBoundariesValue(self, *args) -> "void":
        """
        Sets boundaries with given number.

        Parameters
        ----------
        theNum: int
        theItem: StepRepr_ShapeAspect

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_SetBoundariesValue(self, *args)


    def SetZone(self, *args) -> "void":
        """
        Set field zone.

        Parameters
        ----------
        theZone: StepDimTol_ToleranceZone

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_SetZone(self, *args)


    def Zone(self, *args) -> "opencascade::handle< StepDimTol_ToleranceZone >":
        """
        Returns field zone.

        Returns
        -------
        opencascade::handle<StepDimTol_ToleranceZone>

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_Zone(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_ToleranceZoneDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ToleranceZoneDefinition
    __del__ = lambda self: None
StepDimTol_ToleranceZoneDefinition_swigregister = _StepDimTol.StepDimTol_ToleranceZoneDefinition_swigregister
StepDimTol_ToleranceZoneDefinition_swigregister(StepDimTol_ToleranceZoneDefinition)

class StepDimTol_ToleranceZoneForm(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ToleranceZoneForm, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ToleranceZoneForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ToleranceZoneForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Init all field own and inherited.

        Parameters
        ----------
        theName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZoneForm_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepDimTol.StepDimTol_ToleranceZoneForm_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        theName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ToleranceZoneForm_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_ToleranceZoneForm_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ToleranceZoneForm
    __del__ = lambda self: None
StepDimTol_ToleranceZoneForm_swigregister = _StepDimTol.StepDimTol_ToleranceZoneForm_swigregister
StepDimTol_ToleranceZoneForm_swigregister(StepDimTol_ToleranceZoneForm)

class StepDimTol_ToleranceZoneTarget(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ToleranceZoneTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ToleranceZoneTarget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a tolerancezonetarget select type.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ToleranceZoneTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DimensionalLocation(self, *args) -> "opencascade::handle< StepShape_DimensionalLocation >":
        """
        Returns value as a dimensionallocation (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_DimensionalLocation>

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_DimensionalLocation(self, *args)


    def DimensionalSize(self, *args) -> "opencascade::handle< StepShape_DimensionalSize >":
        """
        Returns value as a dimensionalsize (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_DimensionalSize>

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_DimensionalSize(self, *args)


    def GeneralDatumReference(self, *args) -> "opencascade::handle< StepDimTol_GeneralDatumReference >":
        """
        Returns value as a generaldatumreference (null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_GeneralDatumReference>

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_GeneralDatumReference(self, *args)


    def GeometricTolerance(self, *args) -> "opencascade::handle< StepDimTol_GeometricTolerance >":
        """
        Returns value as a geometrictolerance (null if another type).

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricTolerance>

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_GeometricTolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ToleranceZoneTarget
    __del__ = lambda self: None
StepDimTol_ToleranceZoneTarget_swigregister = _StepDimTol.StepDimTol_ToleranceZoneTarget_swigregister
StepDimTol_ToleranceZoneTarget_swigregister(StepDimTol_ToleranceZoneTarget)

class StepDimTol_CylindricityTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_CylindricityTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_CylindricityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_CylindricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_CylindricityTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_CylindricityTolerance
    __del__ = lambda self: None
StepDimTol_CylindricityTolerance_swigregister = _StepDimTol.StepDimTol_CylindricityTolerance_swigregister
StepDimTol_CylindricityTolerance_swigregister(StepDimTol_CylindricityTolerance)

class StepDimTol_DatumReferenceCompartment(StepDimTol_GeneralDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeneralDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumReferenceCompartment, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeneralDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumReferenceCompartment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_DatumReferenceCompartment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReferenceCompartment
    __del__ = lambda self: None
StepDimTol_DatumReferenceCompartment_swigregister = _StepDimTol.StepDimTol_DatumReferenceCompartment_swigregister
StepDimTol_DatumReferenceCompartment_swigregister(StepDimTol_DatumReferenceCompartment)

class StepDimTol_DatumReferenceElement(StepDimTol_GeneralDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeneralDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_DatumReferenceElement, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeneralDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_DatumReferenceElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_DatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_DatumReferenceElement_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReferenceElement
    __del__ = lambda self: None
StepDimTol_DatumReferenceElement_swigregister = _StepDimTol.StepDimTol_DatumReferenceElement_swigregister
StepDimTol_DatumReferenceElement_swigregister(StepDimTol_DatumReferenceElement)

class StepDimTol_FlatnessTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_FlatnessTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_FlatnessTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_FlatnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_FlatnessTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_FlatnessTolerance
    __del__ = lambda self: None
StepDimTol_FlatnessTolerance_swigregister = _StepDimTol.StepDimTol_FlatnessTolerance_swigregister
StepDimTol_FlatnessTolerance_swigregister(StepDimTol_FlatnessTolerance)

class StepDimTol_GeoTolAndGeoTolWthDatRef(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeoTolAndGeoTolWthDatRef, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeoTolAndGeoTolWthDatRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetGeometricToleranceWithDatumReference(self, *args) -> "opencascade::handle< StepDimTol_GeometricToleranceWithDatumReference >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricToleranceWithDatumReference>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_GetGeometricToleranceWithDatumReference(self, *args)


    def GetToleranceType(self, *args) -> "StepDimTol_GeometricToleranceType":
        """
        No available documentation.

        Returns
        -------
        StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_GetToleranceType(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepRepr_ShapeAspect
        theGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aMagnitude: StepBasic_MeasureWithUnit
        aTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        aGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_Init(self, *args)


    def SetGeometricToleranceType(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_SetGeometricToleranceType(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theGTWDR: StepDimTol_GeometricToleranceWithDatumReference

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_SetGeometricToleranceWithDatumReference(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRef
    __del__ = lambda self: None
StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRef)

class StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetGeometricToleranceWithDatumReference(self, *args) -> "opencascade::handle< StepDimTol_GeometricToleranceWithDatumReference >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricToleranceWithDatumReference>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithModifiers(self, *args) -> "opencascade::handle< StepDimTol_GeometricToleranceWithModifiers >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricToleranceWithModifiers>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetGeometricToleranceWithModifiers(self, *args)


    def GetToleranceType(self, *args) -> "StepDimTol_GeometricToleranceType":
        """
        No available documentation.

        Returns
        -------
        StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetToleranceType(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepRepr_ShapeAspect
        theGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        theGTWM: StepDimTol_GeometricToleranceWithModifiers
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aMagnitude: StepBasic_MeasureWithUnit
        aTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        aGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        aGTWM: StepDimTol_GeometricToleranceWithModifiers
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Init(self, *args)


    def SetGeometricToleranceType(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceType(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theGTWDR: StepDimTol_GeometricToleranceWithDatumReference

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceWithDatumReference(self, *args)


    def SetGeometricToleranceWithModifiers(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theGTWM: StepDimTol_GeometricToleranceWithModifiers

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceWithModifiers(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
    __del__ = lambda self: None
StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod)

class StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetGeometricToleranceWithDatumReference(self, *args) -> "opencascade::handle< StepDimTol_GeometricToleranceWithDatumReference >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricToleranceWithDatumReference>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetGeometricToleranceWithDatumReference(self, *args)


    def GetModifiedGeometricTolerance(self, *args) -> "opencascade::handle< StepDimTol_ModifiedGeometricTolerance >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepDimTol_ModifiedGeometricTolerance>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetModifiedGeometricTolerance(self, *args)


    def GetPositionTolerance(self, *args) -> "opencascade::handle< StepDimTol_PositionTolerance >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepDimTol_PositionTolerance>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetPositionTolerance(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aMagnitude: StepBasic_MeasureWithUnit
        aTolerancedShapeAspect: StepRepr_ShapeAspect
        aGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        aMGT: StepDimTol_ModifiedGeometricTolerance

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aMagnitude: StepBasic_MeasureWithUnit
        aTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        aGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        aMGT: StepDimTol_ModifiedGeometricTolerance

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Init(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aGTWDR: StepDimTol_GeometricToleranceWithDatumReference

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetGeometricToleranceWithDatumReference(self, *args)


    def SetModifiedGeometricTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMGT: StepDimTol_ModifiedGeometricTolerance

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetModifiedGeometricTolerance(self, *args)


    def SetPositionTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPT: StepDimTol_PositionTolerance

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetPositionTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
    __del__ = lambda self: None
StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol)

class StepDimTol_GeoTolAndGeoTolWthMod(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeoTolAndGeoTolWthMod, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeoTolAndGeoTolWthMod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetGeometricToleranceWithModifiers(self, *args) -> "opencascade::handle< StepDimTol_GeometricToleranceWithModifiers >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepDimTol_GeometricToleranceWithModifiers>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_GetGeometricToleranceWithModifiers(self, *args)


    def GetToleranceType(self, *args) -> "StepDimTol_GeometricToleranceType":
        """
        No available documentation.

        Returns
        -------
        StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_GetToleranceType(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepRepr_ShapeAspect
        theGTWM: StepDimTol_GeometricToleranceWithModifiers
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aMagnitude: StepBasic_MeasureWithUnit
        aTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        aGTWM: StepDimTol_GeometricToleranceWithModifiers
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_Init(self, *args)


    def SetGeometricToleranceType(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_SetGeometricToleranceType(self, *args)


    def SetGeometricToleranceWithModifiers(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theGTWM: StepDimTol_GeometricToleranceWithModifiers

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_SetGeometricToleranceWithModifiers(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthMod
    __del__ = lambda self: None
StepDimTol_GeoTolAndGeoTolWthMod_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_swigregister
StepDimTol_GeoTolAndGeoTolWthMod_swigregister(StepDimTol_GeoTolAndGeoTolWthMod)

class StepDimTol_GeometricToleranceWithDatumReference(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeometricToleranceWithDatumReference, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeometricToleranceWithDatumReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DatumSystem(self, *args) -> "opencascade::handle< StepDimTol_HArray1OfDatumReference >":
        """
        Returns field datumsystem ap214.

        Returns
        -------
        opencascade::handle<StepDimTol_HArray1OfDatumReference>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args) -> "opencascade::handle< StepDimTol_HArray1OfDatumSystemOrReference >":
        """
        Returns field datumsystem ap242.

        Returns
        -------
        opencascade::handle<StepDimTol_HArray1OfDatumSystemOrReference>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_DatumSystemAP242(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited) ap214.

        Parameters
        ----------
        theGeometricTolerance_Name: TCollection_HAsciiString
        theGeometricTolerance_Description: TCollection_HAsciiString
        theGeometricTolerance_Magnitude: StepBasic_MeasureWithUnit
        theGeometricTolerance_TolerancedShapeAspect: StepRepr_ShapeAspect
        theDatumSystem: StepDimTol_HArray1OfDatumReference

        Returns
        -------
        None

        Initialize all fields (own and inherited) ap242.

        Parameters
        ----------
        theGeometricTolerance_Name: TCollection_HAsciiString
        theGeometricTolerance_Description: TCollection_HAsciiString
        theGeometricTolerance_Magnitude: StepBasic_MeasureWithUnit
        theGeometricTolerance_TolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        theDatumSystem: StepDimTol_HArray1OfDatumSystemOrReference

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_Init(self, *args)


    def SetDatumSystem(self, *args) -> "void":
        """
        Set field datumsystem ap214.

        Parameters
        ----------
        theDatumSystem: StepDimTol_HArray1OfDatumReference

        Returns
        -------
        None

        Set field datumsystem ap242.

        Parameters
        ----------
        theDatumSystem: StepDimTol_HArray1OfDatumSystemOrReference

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_SetDatumSystem(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithDatumReference
    __del__ = lambda self: None
StepDimTol_GeometricToleranceWithDatumReference_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_swigregister
StepDimTol_GeometricToleranceWithDatumReference_swigregister(StepDimTol_GeometricToleranceWithDatumReference)

class StepDimTol_GeometricToleranceWithDefinedUnit(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeometricToleranceWithDefinedUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeometricToleranceWithDefinedUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithDefinedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited) ap214.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepRepr_ShapeAspect
        theUnitSize: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        Initialize all fields (own and inherited) ap242.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        theUnitSize: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_Init(self, *args)


    def SetUnitSize(self, *args) -> "void":
        """
        Set field unitsize.

        Parameters
        ----------
        theUnitSize: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_SetUnitSize(self, *args)


    def UnitSize(self, *args) -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
        """
        Returns field unitsize.

        Returns
        -------
        opencascade::handle<StepBasic_LengthMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_UnitSize(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithDefinedUnit
    __del__ = lambda self: None
StepDimTol_GeometricToleranceWithDefinedUnit_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_swigregister
StepDimTol_GeometricToleranceWithDefinedUnit_swigregister(StepDimTol_GeometricToleranceWithDefinedUnit)

class StepDimTol_GeometricToleranceWithModifiers(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeometricToleranceWithModifiers, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeometricToleranceWithModifiers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithModifiers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        theModifiers: StepDimTol_HArray1OfGeometricToleranceModifier

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_Init(self, *args)


    def ModifierValue(self, *args) -> "StepDimTol_GeometricToleranceModifier":
        """
        Returns modifier with the given number.

        Parameters
        ----------
        theNum: int

        Returns
        -------
        StepDimTol_GeometricToleranceModifier

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_ModifierValue(self, *args)


    def Modifiers(self, *args) -> "opencascade::handle< StepDimTol_HArray1OfGeometricToleranceModifier >":
        """
        Returns field modifiers.

        Returns
        -------
        opencascade::handle<StepDimTol_HArray1OfGeometricToleranceModifier>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_Modifiers(self, *args)


    def NbModifiers(self, *args) -> "Standard_Integer":
        """
        Returns number of modifiers.

        Returns
        -------
        int

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_NbModifiers(self, *args)


    def SetModifierValue(self, *args) -> "void":
        """
        Sets modifier with given number.

        Parameters
        ----------
        theNum: int
        theItem: StepDimTol_GeometricToleranceModifier

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_SetModifierValue(self, *args)


    def SetModifiers(self, *args) -> "void":
        """
        Set field modifiers.

        Parameters
        ----------
        theModifiers: StepDimTol_HArray1OfGeometricToleranceModifier

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_SetModifiers(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithModifiers
    __del__ = lambda self: None
StepDimTol_GeometricToleranceWithModifiers_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_swigregister
StepDimTol_GeometricToleranceWithModifiers_swigregister(StepDimTol_GeometricToleranceWithModifiers)

class StepDimTol_LineProfileTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_LineProfileTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_LineProfileTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_LineProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_LineProfileTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_LineProfileTolerance
    __del__ = lambda self: None
StepDimTol_LineProfileTolerance_swigregister = _StepDimTol.StepDimTol_LineProfileTolerance_swigregister
StepDimTol_LineProfileTolerance_swigregister(StepDimTol_LineProfileTolerance)

class StepDimTol_ModifiedGeometricTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ModifiedGeometricTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ModifiedGeometricTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ModifiedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited) ap214.

        Parameters
        ----------
        theGeometricTolerance_Name: TCollection_HAsciiString
        theGeometricTolerance_Description: TCollection_HAsciiString
        theGeometricTolerance_Magnitude: StepBasic_MeasureWithUnit
        theGeometricTolerance_TolerancedShapeAspect: StepRepr_ShapeAspect
        theModifier: StepDimTol_LimitCondition

        Returns
        -------
        None

        Initialize all fields (own and inherited) ap242.

        Parameters
        ----------
        theGeometricTolerance_Name: TCollection_HAsciiString
        theGeometricTolerance_Description: TCollection_HAsciiString
        theGeometricTolerance_Magnitude: StepBasic_MeasureWithUnit
        theGeometricTolerance_TolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        theModifier: StepDimTol_LimitCondition

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_Init(self, *args)


    def Modifier(self, *args) -> "StepDimTol_LimitCondition":
        """
        Returns field modifier.

        Returns
        -------
        StepDimTol_LimitCondition

        """
        return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_Modifier(self, *args)


    def SetModifier(self, *args) -> "void":
        """
        Set field modifier.

        Parameters
        ----------
        theModifier: StepDimTol_LimitCondition

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_SetModifier(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_ModifiedGeometricTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ModifiedGeometricTolerance
    __del__ = lambda self: None
StepDimTol_ModifiedGeometricTolerance_swigregister = _StepDimTol.StepDimTol_ModifiedGeometricTolerance_swigregister
StepDimTol_ModifiedGeometricTolerance_swigregister(StepDimTol_ModifiedGeometricTolerance)

class StepDimTol_NonUniformZoneDefinition(StepDimTol_ToleranceZoneDefinition):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_ToleranceZoneDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_NonUniformZoneDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_ToleranceZoneDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_NonUniformZoneDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_NonUniformZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_NonUniformZoneDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_NonUniformZoneDefinition
    __del__ = lambda self: None
StepDimTol_NonUniformZoneDefinition_swigregister = _StepDimTol.StepDimTol_NonUniformZoneDefinition_swigregister
StepDimTol_NonUniformZoneDefinition_swigregister(StepDimTol_NonUniformZoneDefinition)

class StepDimTol_PlacedDatumTargetFeature(StepDimTol_DatumTarget):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_DatumTarget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_PlacedDatumTargetFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_DatumTarget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_PlacedDatumTargetFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_PlacedDatumTargetFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_PlacedDatumTargetFeature_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_PlacedDatumTargetFeature
    __del__ = lambda self: None
StepDimTol_PlacedDatumTargetFeature_swigregister = _StepDimTol.StepDimTol_PlacedDatumTargetFeature_swigregister
StepDimTol_PlacedDatumTargetFeature_swigregister(StepDimTol_PlacedDatumTargetFeature)

class StepDimTol_PositionTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_PositionTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_PositionTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_PositionTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_PositionTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_PositionTolerance
    __del__ = lambda self: None
StepDimTol_PositionTolerance_swigregister = _StepDimTol.StepDimTol_PositionTolerance_swigregister
StepDimTol_PositionTolerance_swigregister(StepDimTol_PositionTolerance)

class StepDimTol_ProjectedZoneDefinition(StepDimTol_ToleranceZoneDefinition):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_ToleranceZoneDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ProjectedZoneDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_ToleranceZoneDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ProjectedZoneDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ProjectedZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theZone: StepDimTol_ToleranceZone
        theBoundaries: StepRepr_HArray1OfShapeAspect
        theProjectionEnd: StepRepr_ShapeAspect
        theProjectionLength: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_Init(self, *args)


    def ProjectionEnd(self, *args) -> "opencascade::handle< StepRepr_ShapeAspect >":
        """
        Returns field projectionend.

        Returns
        -------
        opencascade::handle<StepRepr_ShapeAspect>

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_ProjectionEnd(self, *args)


    def ProjectionLength(self, *args) -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
        """
        Returns field projectionlength.

        Returns
        -------
        opencascade::handle<StepBasic_LengthMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_ProjectionLength(self, *args)


    def SetProjectionEnd(self, *args) -> "void":
        """
        Set field projectionend.

        Parameters
        ----------
        theProjectionEnd: StepRepr_ShapeAspect

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_SetProjectionEnd(self, *args)


    def SetProjectionLength(self, *args) -> "void":
        """
        Set field projectionlength.

        Parameters
        ----------
        theProjectionLength: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_SetProjectionLength(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_ProjectedZoneDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ProjectedZoneDefinition
    __del__ = lambda self: None
StepDimTol_ProjectedZoneDefinition_swigregister = _StepDimTol.StepDimTol_ProjectedZoneDefinition_swigregister
StepDimTol_ProjectedZoneDefinition_swigregister(StepDimTol_ProjectedZoneDefinition)

class StepDimTol_RoundnessTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_RoundnessTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_RoundnessTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_RoundnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_RoundnessTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_RoundnessTolerance
    __del__ = lambda self: None
StepDimTol_RoundnessTolerance_swigregister = _StepDimTol.StepDimTol_RoundnessTolerance_swigregister
StepDimTol_RoundnessTolerance_swigregister(StepDimTol_RoundnessTolerance)

class StepDimTol_RunoutZoneDefinition(StepDimTol_ToleranceZoneDefinition):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_ToleranceZoneDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_RunoutZoneDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_ToleranceZoneDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_RunoutZoneDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_RunoutZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theZone: StepDimTol_ToleranceZone
        theBoundaries: StepRepr_HArray1OfShapeAspect
        theOrientation: StepDimTol_RunoutZoneOrientation

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_RunoutZoneDefinition_Init(self, *args)


    def Orientation(self, *args) -> "opencascade::handle< StepDimTol_RunoutZoneOrientation >":
        """
        Returns field orientation.

        Returns
        -------
        opencascade::handle<StepDimTol_RunoutZoneOrientation>

        """
        return _StepDimTol.StepDimTol_RunoutZoneDefinition_Orientation(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        Set field orientation.

        Parameters
        ----------
        theOrientation: StepDimTol_RunoutZoneOrientation

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_RunoutZoneDefinition_SetOrientation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_RunoutZoneDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_RunoutZoneDefinition
    __del__ = lambda self: None
StepDimTol_RunoutZoneDefinition_swigregister = _StepDimTol.StepDimTol_RunoutZoneDefinition_swigregister
StepDimTol_RunoutZoneDefinition_swigregister(StepDimTol_RunoutZoneDefinition)

class StepDimTol_StraightnessTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_StraightnessTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_StraightnessTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_StraightnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_StraightnessTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_StraightnessTolerance
    __del__ = lambda self: None
StepDimTol_StraightnessTolerance_swigregister = _StepDimTol.StepDimTol_StraightnessTolerance_swigregister
StepDimTol_StraightnessTolerance_swigregister(StepDimTol_StraightnessTolerance)

class StepDimTol_SurfaceProfileTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_SurfaceProfileTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_SurfaceProfileTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_SurfaceProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_SurfaceProfileTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_SurfaceProfileTolerance
    __del__ = lambda self: None
StepDimTol_SurfaceProfileTolerance_swigregister = _StepDimTol.StepDimTol_SurfaceProfileTolerance_swigregister
StepDimTol_SurfaceProfileTolerance_swigregister(StepDimTol_SurfaceProfileTolerance)

class StepDimTol_UnequallyDisposedGeometricTolerance(StepDimTol_GeometricTolerance):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_UnequallyDisposedGeometricTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricTolerance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_UnequallyDisposedGeometricTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_UnequallyDisposedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Displacement(self, *args) -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
        """
        Returns field displacement.

        Returns
        -------
        opencascade::handle<StepBasic_LengthMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_Displacement(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        theDisplacement: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_Init(self, *args)


    def SetDisplacement(self, *args) -> "void":
        """
        Set field displacement.

        Parameters
        ----------
        theDisplacement: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_SetDisplacement(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_UnequallyDisposedGeometricTolerance
    __del__ = lambda self: None
StepDimTol_UnequallyDisposedGeometricTolerance_swigregister = _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_swigregister
StepDimTol_UnequallyDisposedGeometricTolerance_swigregister(StepDimTol_UnequallyDisposedGeometricTolerance)

class StepDimTol_AngularityTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_AngularityTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_AngularityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_AngularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_AngularityTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_AngularityTolerance
    __del__ = lambda self: None
StepDimTol_AngularityTolerance_swigregister = _StepDimTol.StepDimTol_AngularityTolerance_swigregister
StepDimTol_AngularityTolerance_swigregister(StepDimTol_AngularityTolerance)

class StepDimTol_CircularRunoutTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_CircularRunoutTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_CircularRunoutTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_CircularRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_CircularRunoutTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_CircularRunoutTolerance
    __del__ = lambda self: None
StepDimTol_CircularRunoutTolerance_swigregister = _StepDimTol.StepDimTol_CircularRunoutTolerance_swigregister
StepDimTol_CircularRunoutTolerance_swigregister(StepDimTol_CircularRunoutTolerance)

class StepDimTol_CoaxialityTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_CoaxialityTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_CoaxialityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_CoaxialityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_CoaxialityTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_CoaxialityTolerance
    __del__ = lambda self: None
StepDimTol_CoaxialityTolerance_swigregister = _StepDimTol.StepDimTol_CoaxialityTolerance_swigregister
StepDimTol_CoaxialityTolerance_swigregister(StepDimTol_CoaxialityTolerance)

class StepDimTol_ConcentricityTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ConcentricityTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ConcentricityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ConcentricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_ConcentricityTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ConcentricityTolerance
    __del__ = lambda self: None
StepDimTol_ConcentricityTolerance_swigregister = _StepDimTol.StepDimTol_ConcentricityTolerance_swigregister
StepDimTol_ConcentricityTolerance_swigregister(StepDimTol_ConcentricityTolerance)

class StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetMaxTolerance(self, *args) -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_LengthMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_GetMaxTolerance(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepRepr_ShapeAspect
        theGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        theGTWM: StepDimTol_GeometricToleranceWithModifiers
        theMaxTol: StepBasic_LengthMeasureWithUnit
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aMagnitude: StepBasic_MeasureWithUnit
        aTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        aGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        aGTWM: StepDimTol_GeometricToleranceWithModifiers
        theMaxTol: StepBasic_LengthMeasureWithUnit
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Init(self, *args)


    def SetMaxTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theMaxTol: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetMaxTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
    __del__ = lambda self: None
StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol)

class StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(StepDimTol_GeoTolAndGeoTolWthDatRef):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeoTolAndGeoTolWthDatRef]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeoTolAndGeoTolWthDatRef]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetUnequallyDisposedGeometricTolerance(self, *args) -> "opencascade::handle< StepDimTol_UnequallyDisposedGeometricTolerance >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepDimTol_UnequallyDisposedGeometricTolerance>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_GetUnequallyDisposedGeometricTolerance(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepRepr_ShapeAspect
        theGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        theType: StepDimTol_GeometricToleranceType
        theUDGT: StepDimTol_UnequallyDisposedGeometricTolerance

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aMagnitude: StepBasic_MeasureWithUnit
        aTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        aGTWDR: StepDimTol_GeometricToleranceWithDatumReference
        theType: StepDimTol_GeometricToleranceType
        theUDGT: StepDimTol_UnequallyDisposedGeometricTolerance

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Init(self, *args)


    def SetUnequallyDisposedGeometricTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theUDGT: StepDimTol_UnequallyDisposedGeometricTolerance

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetUnequallyDisposedGeometricTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
    __del__ = lambda self: None
StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol)

class StepDimTol_GeoTolAndGeoTolWthMaxTol(StepDimTol_GeoTolAndGeoTolWthMod):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeoTolAndGeoTolWthMod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeoTolAndGeoTolWthMaxTol, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeoTolAndGeoTolWthMod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeoTolAndGeoTolWthMaxTol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetMaxTolerance(self, *args) -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_LengthMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_GetMaxTolerance(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepRepr_ShapeAspect
        theGTWM: StepDimTol_GeometricToleranceWithModifiers
        theMaxTol: StepBasic_LengthMeasureWithUnit
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aMagnitude: StepBasic_MeasureWithUnit
        aTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        aGTWM: StepDimTol_GeometricToleranceWithModifiers
        theMaxTol: StepBasic_LengthMeasureWithUnit
        theType: StepDimTol_GeometricToleranceType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_Init(self, *args)


    def SetMaxTolerance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theMaxTol: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_SetMaxTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthMaxTol
    __del__ = lambda self: None
StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister
StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister(StepDimTol_GeoTolAndGeoTolWthMaxTol)

class StepDimTol_GeometricToleranceWithDefinedAreaUnit(StepDimTol_GeometricToleranceWithDefinedUnit):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDefinedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeometricToleranceWithDefinedAreaUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDefinedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeometricToleranceWithDefinedAreaUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithDefinedAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AreaType(self, *args) -> "StepDimTol_AreaUnitType":
        """
        Returns field areatype.

        Returns
        -------
        StepDimTol_AreaUnitType

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_AreaType(self, *args)


    def HasSecondUnitSize(self, *args) -> "Standard_Boolean":
        """
        Indicates if secondunitsize field exist.

        Returns
        -------
        bool

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_HasSecondUnitSize(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        theUnitSize: StepBasic_LengthMeasureWithUnit
        theAreaType: StepDimTol_AreaUnitType
        theHasSecondUnitSize: bool
        theSecondUnitSize: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_Init(self, *args)


    def SecondUnitSize(self, *args) -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
        """
        Returns field secondunitsize.

        Returns
        -------
        opencascade::handle<StepBasic_LengthMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_SecondUnitSize(self, *args)


    def SetAreaType(self, *args) -> "void":
        """
        Set field areatype.

        Parameters
        ----------
        theAreaType: StepDimTol_AreaUnitType

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetAreaType(self, *args)


    def SetSecondUnitSize(self, *args) -> "void":
        """
        Set field secondunitsize.

        Parameters
        ----------
        theSecondUnitSize: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetSecondUnitSize(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithDefinedAreaUnit
    __del__ = lambda self: None
StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister
StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister(StepDimTol_GeometricToleranceWithDefinedAreaUnit)

class StepDimTol_GeometricToleranceWithMaximumTolerance(StepDimTol_GeometricToleranceWithModifiers):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithModifiers]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_GeometricToleranceWithMaximumTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithModifiers]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_GeometricToleranceWithMaximumTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithMaximumTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theMagnitude: StepBasic_MeasureWithUnit
        theTolerancedShapeAspect: StepDimTol_GeometricToleranceTarget
        theModifiers: StepDimTol_HArray1OfGeometricToleranceModifier
        theUnitSize: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_Init(self, *args)


    def MaximumUpperTolerance(self, *args) -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
        """
        Returns field maximumuppertolerance.

        Returns
        -------
        opencascade::handle<StepBasic_LengthMeasureWithUnit>

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_MaximumUpperTolerance(self, *args)


    def SetMaximumUpperTolerance(self, *args) -> "void":
        """
        Set field maximumuppertolerance.

        Parameters
        ----------
        theMaximumUpperTolerance: StepBasic_LengthMeasureWithUnit

        Returns
        -------
        None

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_SetMaximumUpperTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithMaximumTolerance
    __del__ = lambda self: None
StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister
StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister(StepDimTol_GeometricToleranceWithMaximumTolerance)

class StepDimTol_ParallelismTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_ParallelismTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_ParallelismTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_ParallelismTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_ParallelismTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ParallelismTolerance
    __del__ = lambda self: None
StepDimTol_ParallelismTolerance_swigregister = _StepDimTol.StepDimTol_ParallelismTolerance_swigregister
StepDimTol_ParallelismTolerance_swigregister(StepDimTol_ParallelismTolerance)

class StepDimTol_PerpendicularityTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_PerpendicularityTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_PerpendicularityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_PerpendicularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_PerpendicularityTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_PerpendicularityTolerance
    __del__ = lambda self: None
StepDimTol_PerpendicularityTolerance_swigregister = _StepDimTol.StepDimTol_PerpendicularityTolerance_swigregister
StepDimTol_PerpendicularityTolerance_swigregister(StepDimTol_PerpendicularityTolerance)

class StepDimTol_SymmetryTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_SymmetryTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_SymmetryTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_SymmetryTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_SymmetryTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_SymmetryTolerance
    __del__ = lambda self: None
StepDimTol_SymmetryTolerance_swigregister = _StepDimTol.StepDimTol_SymmetryTolerance_swigregister
StepDimTol_SymmetryTolerance_swigregister(StepDimTol_SymmetryTolerance)

class StepDimTol_TotalRunoutTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_TotalRunoutTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_GeometricToleranceWithDatumReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_TotalRunoutTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepDimTol.new_StepDimTol_TotalRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_TotalRunoutTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_TotalRunoutTolerance
    __del__ = lambda self: None
StepDimTol_TotalRunoutTolerance_swigregister = _StepDimTol.StepDimTol_TotalRunoutTolerance_swigregister
StepDimTol_TotalRunoutTolerance_swigregister(StepDimTol_TotalRunoutTolerance)

class StepDimTol_HArray1OfToleranceZoneTarget(StepDimTol_Array1OfToleranceZoneTarget, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_Array1OfToleranceZoneTarget, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_HArray1OfToleranceZoneTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_Array1OfToleranceZoneTarget, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_HArray1OfToleranceZoneTarget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_HArray1OfToleranceZoneTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepDimTol_Array1OfToleranceZoneTarget const &":
        return _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_Array1(self)

    def ChangeArray1(self) -> "StepDimTol_Array1OfToleranceZoneTarget &":
        return _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast(t)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfToleranceZoneTarget
    __del__ = lambda self: None
StepDimTol_HArray1OfToleranceZoneTarget_swigregister = _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_swigregister
StepDimTol_HArray1OfToleranceZoneTarget_swigregister(StepDimTol_HArray1OfToleranceZoneTarget)

class StepDimTol_HArray1OfDatumReference(StepDimTol_Array1OfDatumReference, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumReference, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_HArray1OfDatumReference, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumReference, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_HArray1OfDatumReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepDimTol_Array1OfDatumReference const &":
        return _StepDimTol.StepDimTol_HArray1OfDatumReference_Array1(self)

    def ChangeArray1(self) -> "StepDimTol_Array1OfDatumReference &":
        return _StepDimTol.StepDimTol_HArray1OfDatumReference_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_HArray1OfDatumReference_DownCast(t)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumReference
    __del__ = lambda self: None
StepDimTol_HArray1OfDatumReference_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumReference_swigregister
StepDimTol_HArray1OfDatumReference_swigregister(StepDimTol_HArray1OfDatumReference)

class StepDimTol_HArray1OfDatumReferenceElement(StepDimTol_Array1OfDatumReferenceElement, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumReferenceElement, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_HArray1OfDatumReferenceElement, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumReferenceElement, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_HArray1OfDatumReferenceElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepDimTol_Array1OfDatumReferenceElement const &":
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_Array1(self)

    def ChangeArray1(self) -> "StepDimTol_Array1OfDatumReferenceElement &":
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast(t)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumReferenceElement
    __del__ = lambda self: None
StepDimTol_HArray1OfDatumReferenceElement_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_swigregister
StepDimTol_HArray1OfDatumReferenceElement_swigregister(StepDimTol_HArray1OfDatumReferenceElement)

class StepDimTol_HArray1OfDatumSystemOrReference(StepDimTol_Array1OfDatumSystemOrReference, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumSystemOrReference, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_HArray1OfDatumSystemOrReference, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumSystemOrReference, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_HArray1OfDatumSystemOrReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumSystemOrReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepDimTol_Array1OfDatumSystemOrReference const &":
        return _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_Array1(self)

    def ChangeArray1(self) -> "StepDimTol_Array1OfDatumSystemOrReference &":
        return _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast(t)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumSystemOrReference
    __del__ = lambda self: None
StepDimTol_HArray1OfDatumSystemOrReference_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_swigregister
StepDimTol_HArray1OfDatumSystemOrReference_swigregister(StepDimTol_HArray1OfDatumSystemOrReference)

class StepDimTol_HArray1OfDatumReferenceCompartment(StepDimTol_Array1OfDatumReferenceCompartment, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumReferenceCompartment, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_HArray1OfDatumReferenceCompartment, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumReferenceCompartment, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_HArray1OfDatumReferenceCompartment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepDimTol_Array1OfDatumReferenceCompartment const &":
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_Array1(self)

    def ChangeArray1(self) -> "StepDimTol_Array1OfDatumReferenceCompartment &":
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast(t)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumReferenceCompartment
    __del__ = lambda self: None
StepDimTol_HArray1OfDatumReferenceCompartment_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_swigregister
StepDimTol_HArray1OfDatumReferenceCompartment_swigregister(StepDimTol_HArray1OfDatumReferenceCompartment)

class StepDimTol_HArray1OfDatumReferenceModifier(StepDimTol_Array1OfDatumReferenceModifier, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumReferenceModifier, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_HArray1OfDatumReferenceModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_Array1OfDatumReferenceModifier, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_HArray1OfDatumReferenceModifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumReferenceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepDimTol_Array1OfDatumReferenceModifier const &":
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_Array1(self)

    def ChangeArray1(self) -> "StepDimTol_Array1OfDatumReferenceModifier &":
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast(t)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumReferenceModifier
    __del__ = lambda self: None
StepDimTol_HArray1OfDatumReferenceModifier_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_swigregister
StepDimTol_HArray1OfDatumReferenceModifier_swigregister(StepDimTol_HArray1OfDatumReferenceModifier)

class StepDimTol_HArray1OfGeometricToleranceModifier(StepDimTol_Array1OfGeometricToleranceModifier, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepDimTol_Array1OfGeometricToleranceModifier, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepDimTol_HArray1OfGeometricToleranceModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [StepDimTol_Array1OfGeometricToleranceModifier, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepDimTol_HArray1OfGeometricToleranceModifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepDimTol.new_StepDimTol_HArray1OfGeometricToleranceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepDimTol_Array1OfGeometricToleranceModifier const &":
        return _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_Array1(self)

    def ChangeArray1(self) -> "StepDimTol_Array1OfGeometricToleranceModifier &":
        return _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast(t)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfGeometricToleranceModifier
    __del__ = lambda self: None
StepDimTol_HArray1OfGeometricToleranceModifier_swigregister = _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_swigregister
StepDimTol_HArray1OfGeometricToleranceModifier_swigregister(StepDimTol_HArray1OfGeometricToleranceModifier)



# This file is compatible with both classic and new-style classes.


