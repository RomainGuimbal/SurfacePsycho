# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
V3d module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_v3d.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _V3d
else:
    import _V3d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _V3d.delete_SwigPyIterator

    def value(self):
        return _V3d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _V3d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _V3d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _V3d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _V3d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _V3d.SwigPyIterator_copy(self)

    def next(self):
        return _V3d.SwigPyIterator_next(self)

    def __next__(self):
        return _V3d.SwigPyIterator___next__(self)

    def previous(self):
        return _V3d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _V3d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _V3d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _V3d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _V3d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _V3d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _V3d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _V3d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _V3d:
_V3d.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _V3d.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.Aspect
import OCC.Core.Image
import OCC.Core.TopLoc
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.OSD
import OCC.Core.Media
import OCC.Core.Prs3d
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.GeomAbs

from enum import IntEnum
from OCC.Core.Exception import *

V3d_SDO_MONO = _V3d.V3d_SDO_MONO
V3d_SDO_LEFT_EYE = _V3d.V3d_SDO_LEFT_EYE
V3d_SDO_RIGHT_EYE = _V3d.V3d_SDO_RIGHT_EYE
V3d_SDO_BLENDED = _V3d.V3d_SDO_BLENDED
V3d_X = _V3d.V3d_X
V3d_Y = _V3d.V3d_Y
V3d_Z = _V3d.V3d_Z
V3d_Xpos = _V3d.V3d_Xpos
V3d_Ypos = _V3d.V3d_Ypos
V3d_Zpos = _V3d.V3d_Zpos
V3d_Xneg = _V3d.V3d_Xneg
V3d_Yneg = _V3d.V3d_Yneg
V3d_Zneg = _V3d.V3d_Zneg
V3d_XposYpos = _V3d.V3d_XposYpos
V3d_XposZpos = _V3d.V3d_XposZpos
V3d_YposZpos = _V3d.V3d_YposZpos
V3d_XnegYneg = _V3d.V3d_XnegYneg
V3d_XnegYpos = _V3d.V3d_XnegYpos
V3d_XnegZneg = _V3d.V3d_XnegZneg
V3d_XnegZpos = _V3d.V3d_XnegZpos
V3d_YnegZneg = _V3d.V3d_YnegZneg
V3d_YnegZpos = _V3d.V3d_YnegZpos
V3d_XposYneg = _V3d.V3d_XposYneg
V3d_XposZneg = _V3d.V3d_XposZneg
V3d_YposZneg = _V3d.V3d_YposZneg
V3d_XposYposZpos = _V3d.V3d_XposYposZpos
V3d_XposYnegZpos = _V3d.V3d_XposYnegZpos
V3d_XposYposZneg = _V3d.V3d_XposYposZneg
V3d_XnegYposZpos = _V3d.V3d_XnegYposZpos
V3d_XposYnegZneg = _V3d.V3d_XposYnegZneg
V3d_XnegYposZneg = _V3d.V3d_XnegYposZneg
V3d_XnegYnegZpos = _V3d.V3d_XnegYnegZpos
V3d_XnegYnegZneg = _V3d.V3d_XnegYnegZneg
V3d_TypeOfOrientation_Zup_AxoLeft = _V3d.V3d_TypeOfOrientation_Zup_AxoLeft
V3d_TypeOfOrientation_Zup_AxoRight = _V3d.V3d_TypeOfOrientation_Zup_AxoRight
V3d_TypeOfOrientation_Zup_Front = _V3d.V3d_TypeOfOrientation_Zup_Front
V3d_TypeOfOrientation_Zup_Back = _V3d.V3d_TypeOfOrientation_Zup_Back
V3d_TypeOfOrientation_Zup_Top = _V3d.V3d_TypeOfOrientation_Zup_Top
V3d_TypeOfOrientation_Zup_Bottom = _V3d.V3d_TypeOfOrientation_Zup_Bottom
V3d_TypeOfOrientation_Zup_Left = _V3d.V3d_TypeOfOrientation_Zup_Left
V3d_TypeOfOrientation_Zup_Right = _V3d.V3d_TypeOfOrientation_Zup_Right
V3d_TypeOfOrientation_Yup_AxoLeft = _V3d.V3d_TypeOfOrientation_Yup_AxoLeft
V3d_TypeOfOrientation_Yup_AxoRight = _V3d.V3d_TypeOfOrientation_Yup_AxoRight
V3d_TypeOfOrientation_Yup_Front = _V3d.V3d_TypeOfOrientation_Yup_Front
V3d_TypeOfOrientation_Yup_Back = _V3d.V3d_TypeOfOrientation_Yup_Back
V3d_TypeOfOrientation_Yup_Top = _V3d.V3d_TypeOfOrientation_Yup_Top
V3d_TypeOfOrientation_Yup_Bottom = _V3d.V3d_TypeOfOrientation_Yup_Bottom
V3d_TypeOfOrientation_Yup_Left = _V3d.V3d_TypeOfOrientation_Yup_Left
V3d_TypeOfOrientation_Yup_Right = _V3d.V3d_TypeOfOrientation_Yup_Right
V3d_ORTHOGRAPHIC = _V3d.V3d_ORTHOGRAPHIC
V3d_PERSPECTIVE = _V3d.V3d_PERSPECTIVE
V3d_WIREFRAME = _V3d.V3d_WIREFRAME
V3d_ZBUFFER = _V3d.V3d_ZBUFFER


class V3d_StereoDumpOptions(IntEnum):
	V3d_SDO_MONO = 0
	V3d_SDO_LEFT_EYE = 1
	V3d_SDO_RIGHT_EYE = 2
	V3d_SDO_BLENDED = 3
V3d_SDO_MONO = V3d_StereoDumpOptions.V3d_SDO_MONO
V3d_SDO_LEFT_EYE = V3d_StereoDumpOptions.V3d_SDO_LEFT_EYE
V3d_SDO_RIGHT_EYE = V3d_StereoDumpOptions.V3d_SDO_RIGHT_EYE
V3d_SDO_BLENDED = V3d_StereoDumpOptions.V3d_SDO_BLENDED

class V3d_TypeOfAxe(IntEnum):
	V3d_X = 0
	V3d_Y = 1
	V3d_Z = 2
V3d_X = V3d_TypeOfAxe.V3d_X
V3d_Y = V3d_TypeOfAxe.V3d_Y
V3d_Z = V3d_TypeOfAxe.V3d_Z

class V3d_TypeOfOrientation(IntEnum):
	V3d_Xpos = 0
	V3d_Ypos = 1
	V3d_Zpos = 2
	V3d_Xneg = 3
	V3d_Yneg = 4
	V3d_Zneg = 5
	V3d_XposYpos = 6
	V3d_XposZpos = 7
	V3d_YposZpos = 8
	V3d_XnegYneg = 9
	V3d_XnegYpos = 10
	V3d_XnegZneg = 11
	V3d_XnegZpos = 12
	V3d_YnegZneg = 13
	V3d_YnegZpos = 14
	V3d_XposYneg = 15
	V3d_XposZneg = 16
	V3d_YposZneg = 17
	V3d_XposYposZpos = 18
	V3d_XposYnegZpos = 19
	V3d_XposYposZneg = 20
	V3d_XnegYposZpos = 21
	V3d_XposYnegZneg = 22
	V3d_XnegYposZneg = 23
	V3d_XnegYnegZpos = 24
	V3d_XnegYnegZneg = 25
	V3d_TypeOfOrientation_Zup_AxoLeft = V3d_XnegYnegZpos
	V3d_TypeOfOrientation_Zup_AxoRight = V3d_XposYnegZpos
	V3d_TypeOfOrientation_Zup_Front = V3d_Yneg
	V3d_TypeOfOrientation_Zup_Back = V3d_Ypos
	V3d_TypeOfOrientation_Zup_Top = V3d_Zpos
	V3d_TypeOfOrientation_Zup_Bottom = V3d_Zneg
	V3d_TypeOfOrientation_Zup_Left = V3d_Xneg
	V3d_TypeOfOrientation_Zup_Right = V3d_Xpos
	V3d_TypeOfOrientation_Yup_AxoLeft = V3d_XnegYposZpos
	V3d_TypeOfOrientation_Yup_AxoRight = V3d_XposYposZpos
	V3d_TypeOfOrientation_Yup_Front = V3d_Zpos
	V3d_TypeOfOrientation_Yup_Back = V3d_Zneg
	V3d_TypeOfOrientation_Yup_Top = V3d_Ypos
	V3d_TypeOfOrientation_Yup_Bottom = V3d_Yneg
	V3d_TypeOfOrientation_Yup_Left = V3d_Xpos
	V3d_TypeOfOrientation_Yup_Right = V3d_Xneg
V3d_Xpos = V3d_TypeOfOrientation.V3d_Xpos
V3d_Ypos = V3d_TypeOfOrientation.V3d_Ypos
V3d_Zpos = V3d_TypeOfOrientation.V3d_Zpos
V3d_Xneg = V3d_TypeOfOrientation.V3d_Xneg
V3d_Yneg = V3d_TypeOfOrientation.V3d_Yneg
V3d_Zneg = V3d_TypeOfOrientation.V3d_Zneg
V3d_XposYpos = V3d_TypeOfOrientation.V3d_XposYpos
V3d_XposZpos = V3d_TypeOfOrientation.V3d_XposZpos
V3d_YposZpos = V3d_TypeOfOrientation.V3d_YposZpos
V3d_XnegYneg = V3d_TypeOfOrientation.V3d_XnegYneg
V3d_XnegYpos = V3d_TypeOfOrientation.V3d_XnegYpos
V3d_XnegZneg = V3d_TypeOfOrientation.V3d_XnegZneg
V3d_XnegZpos = V3d_TypeOfOrientation.V3d_XnegZpos
V3d_YnegZneg = V3d_TypeOfOrientation.V3d_YnegZneg
V3d_YnegZpos = V3d_TypeOfOrientation.V3d_YnegZpos
V3d_XposYneg = V3d_TypeOfOrientation.V3d_XposYneg
V3d_XposZneg = V3d_TypeOfOrientation.V3d_XposZneg
V3d_YposZneg = V3d_TypeOfOrientation.V3d_YposZneg
V3d_XposYposZpos = V3d_TypeOfOrientation.V3d_XposYposZpos
V3d_XposYnegZpos = V3d_TypeOfOrientation.V3d_XposYnegZpos
V3d_XposYposZneg = V3d_TypeOfOrientation.V3d_XposYposZneg
V3d_XnegYposZpos = V3d_TypeOfOrientation.V3d_XnegYposZpos
V3d_XposYnegZneg = V3d_TypeOfOrientation.V3d_XposYnegZneg
V3d_XnegYposZneg = V3d_TypeOfOrientation.V3d_XnegYposZneg
V3d_XnegYnegZpos = V3d_TypeOfOrientation.V3d_XnegYnegZpos
V3d_XnegYnegZneg = V3d_TypeOfOrientation.V3d_XnegYnegZneg
V3d_TypeOfOrientation_Zup_AxoLeft = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Zup_AxoLeft
V3d_TypeOfOrientation_Zup_AxoRight = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Zup_AxoRight
V3d_TypeOfOrientation_Zup_Front = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Zup_Front
V3d_TypeOfOrientation_Zup_Back = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Zup_Back
V3d_TypeOfOrientation_Zup_Top = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Zup_Top
V3d_TypeOfOrientation_Zup_Bottom = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Zup_Bottom
V3d_TypeOfOrientation_Zup_Left = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Zup_Left
V3d_TypeOfOrientation_Zup_Right = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Zup_Right
V3d_TypeOfOrientation_Yup_AxoLeft = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Yup_AxoLeft
V3d_TypeOfOrientation_Yup_AxoRight = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Yup_AxoRight
V3d_TypeOfOrientation_Yup_Front = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Yup_Front
V3d_TypeOfOrientation_Yup_Back = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Yup_Back
V3d_TypeOfOrientation_Yup_Top = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Yup_Top
V3d_TypeOfOrientation_Yup_Bottom = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Yup_Bottom
V3d_TypeOfOrientation_Yup_Left = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Yup_Left
V3d_TypeOfOrientation_Yup_Right = V3d_TypeOfOrientation.V3d_TypeOfOrientation_Yup_Right

class V3d_TypeOfView(IntEnum):
	V3d_ORTHOGRAPHIC = 0
	V3d_PERSPECTIVE = 1
V3d_ORTHOGRAPHIC = V3d_TypeOfView.V3d_ORTHOGRAPHIC
V3d_PERSPECTIVE = V3d_TypeOfView.V3d_PERSPECTIVE

class V3d_TypeOfVisualization(IntEnum):
	V3d_WIREFRAME = 0
	V3d_ZBUFFER = 1
V3d_WIREFRAME = V3d_TypeOfVisualization.V3d_WIREFRAME
V3d_ZBUFFER = V3d_TypeOfVisualization.V3d_ZBUFFER


def Handle_V3d_AmbientLight_Create():
    return _V3d.Handle_V3d_AmbientLight_Create()

def Handle_V3d_AmbientLight_DownCast(t):
    return _V3d.Handle_V3d_AmbientLight_DownCast(t)

def Handle_V3d_AmbientLight_IsNull(t):
    return _V3d.Handle_V3d_AmbientLight_IsNull(t)

def Handle_V3d_CircularGrid_Create():
    return _V3d.Handle_V3d_CircularGrid_Create()

def Handle_V3d_CircularGrid_DownCast(t):
    return _V3d.Handle_V3d_CircularGrid_DownCast(t)

def Handle_V3d_CircularGrid_IsNull(t):
    return _V3d.Handle_V3d_CircularGrid_IsNull(t)

def Handle_V3d_Plane_Create():
    return _V3d.Handle_V3d_Plane_Create()

def Handle_V3d_Plane_DownCast(t):
    return _V3d.Handle_V3d_Plane_DownCast(t)

def Handle_V3d_Plane_IsNull(t):
    return _V3d.Handle_V3d_Plane_IsNull(t)

def Handle_V3d_PositionLight_Create():
    return _V3d.Handle_V3d_PositionLight_Create()

def Handle_V3d_PositionLight_DownCast(t):
    return _V3d.Handle_V3d_PositionLight_DownCast(t)

def Handle_V3d_PositionLight_IsNull(t):
    return _V3d.Handle_V3d_PositionLight_IsNull(t)

def Handle_V3d_RectangularGrid_Create():
    return _V3d.Handle_V3d_RectangularGrid_Create()

def Handle_V3d_RectangularGrid_DownCast(t):
    return _V3d.Handle_V3d_RectangularGrid_DownCast(t)

def Handle_V3d_RectangularGrid_IsNull(t):
    return _V3d.Handle_V3d_RectangularGrid_IsNull(t)

def Handle_V3d_Trihedron_Create():
    return _V3d.Handle_V3d_Trihedron_Create()

def Handle_V3d_Trihedron_DownCast(t):
    return _V3d.Handle_V3d_Trihedron_DownCast(t)

def Handle_V3d_Trihedron_IsNull(t):
    return _V3d.Handle_V3d_Trihedron_IsNull(t)

def Handle_V3d_View_Create():
    return _V3d.Handle_V3d_View_Create()

def Handle_V3d_View_DownCast(t):
    return _V3d.Handle_V3d_View_DownCast(t)

def Handle_V3d_View_IsNull(t):
    return _V3d.Handle_V3d_View_IsNull(t)

def Handle_V3d_Viewer_Create():
    return _V3d.Handle_V3d_Viewer_Create()

def Handle_V3d_Viewer_DownCast(t):
    return _V3d.Handle_V3d_Viewer_DownCast(t)

def Handle_V3d_Viewer_IsNull(t):
    return _V3d.Handle_V3d_Viewer_IsNull(t)

def Handle_V3d_DirectionalLight_Create():
    return _V3d.Handle_V3d_DirectionalLight_Create()

def Handle_V3d_DirectionalLight_DownCast(t):
    return _V3d.Handle_V3d_DirectionalLight_DownCast(t)

def Handle_V3d_DirectionalLight_IsNull(t):
    return _V3d.Handle_V3d_DirectionalLight_IsNull(t)

def Handle_V3d_PositionalLight_Create():
    return _V3d.Handle_V3d_PositionalLight_Create()

def Handle_V3d_PositionalLight_DownCast(t):
    return _V3d.Handle_V3d_PositionalLight_DownCast(t)

def Handle_V3d_PositionalLight_IsNull(t):
    return _V3d.Handle_V3d_PositionalLight_IsNull(t)

def Handle_V3d_SpotLight_Create():
    return _V3d.Handle_V3d_SpotLight_Create()

def Handle_V3d_SpotLight_DownCast(t):
    return _V3d.Handle_V3d_SpotLight_DownCast(t)

def Handle_V3d_SpotLight_IsNull(t):
    return _V3d.Handle_V3d_SpotLight_IsNull(t)
class V3d_ListOfLight(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _V3d.V3d_ListOfLight_begin(self)

    def end(self):
        return _V3d.V3d_ListOfLight_end(self)

    def cbegin(self):
        return _V3d.V3d_ListOfLight_cbegin(self)

    def cend(self):
        return _V3d.V3d_ListOfLight_cend(self)

    def __init__(self, *args):
        _V3d.V3d_ListOfLight_swiginit(self, _V3d.new_V3d_ListOfLight(*args))

    def Size(self):
        return _V3d.V3d_ListOfLight_Size(self)

    def Assign(self, theOther):
        return _V3d.V3d_ListOfLight_Assign(self, theOther)

    def Set(self, theOther):
        return _V3d.V3d_ListOfLight_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _V3d.V3d_ListOfLight_Clear(self, theAllocator)

    def First(self):
        return _V3d.V3d_ListOfLight_First(self)

    def Last(self):
        return _V3d.V3d_ListOfLight_Last(self)

    def Append(self, *args):
        return _V3d.V3d_ListOfLight_Append(self, *args)

    def Prepend(self, *args):
        return _V3d.V3d_ListOfLight_Prepend(self, *args)

    def RemoveFirst(self):
        return _V3d.V3d_ListOfLight_RemoveFirst(self)

    def Remove(self, theIter):
        return _V3d.V3d_ListOfLight_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _V3d.V3d_ListOfLight_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _V3d.V3d_ListOfLight_InsertAfter(self, *args)

    def Reverse(self):
        return _V3d.V3d_ListOfLight_Reverse(self)
    __swig_destroy__ = _V3d.delete_V3d_ListOfLight

    def __len__(self):
        return self.Size()


# Register V3d_ListOfLight in _V3d:
_V3d.V3d_ListOfLight_swigregister(V3d_ListOfLight)
class V3d_ListOfView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _V3d.V3d_ListOfView_begin(self)

    def end(self):
        return _V3d.V3d_ListOfView_end(self)

    def cbegin(self):
        return _V3d.V3d_ListOfView_cbegin(self)

    def cend(self):
        return _V3d.V3d_ListOfView_cend(self)

    def __init__(self, *args):
        _V3d.V3d_ListOfView_swiginit(self, _V3d.new_V3d_ListOfView(*args))

    def Size(self):
        return _V3d.V3d_ListOfView_Size(self)

    def Assign(self, theOther):
        return _V3d.V3d_ListOfView_Assign(self, theOther)

    def Set(self, theOther):
        return _V3d.V3d_ListOfView_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _V3d.V3d_ListOfView_Clear(self, theAllocator)

    def First(self):
        return _V3d.V3d_ListOfView_First(self)

    def Last(self):
        return _V3d.V3d_ListOfView_Last(self)

    def Append(self, *args):
        return _V3d.V3d_ListOfView_Append(self, *args)

    def Prepend(self, *args):
        return _V3d.V3d_ListOfView_Prepend(self, *args)

    def RemoveFirst(self):
        return _V3d.V3d_ListOfView_RemoveFirst(self)

    def Remove(self, theIter):
        return _V3d.V3d_ListOfView_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _V3d.V3d_ListOfView_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _V3d.V3d_ListOfView_InsertAfter(self, *args)

    def Reverse(self):
        return _V3d.V3d_ListOfView_Reverse(self)
    __swig_destroy__ = _V3d.delete_V3d_ListOfView

    def __len__(self):
        return self.Size()


# Register V3d_ListOfView in _V3d:
_V3d.V3d_ListOfView_swigregister(V3d_ListOfView)
class v3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ArrowOfRadius(*args):
        r"""

        Parameters
        ----------
        garrow: Graphic3d_Group
        X0: float
        Y0: float
        Z0: float
        DX: float
        DY: float
        DZ: float
        Alpha: float
        Lng: float

        Return
        -------
        None

        Description
        -----------
        Compute the graphic structure of arrow. x0,y0,z0: coordinate of the arrow. dx,dy,dz: direction of the arrow. alpha: angle of arrow. lng: length of arrow.

        """
        return _V3d.v3d_ArrowOfRadius(*args)

    @staticmethod
    def CircleInPlane(*args):
        r"""

        Parameters
        ----------
        gcircle: Graphic3d_Group
        X0: float
        Y0: float
        Z0: float
        VX: float
        VY: float
        VZ: float
        Radius: float

        Return
        -------
        None

        Description
        -----------
        Compute the graphic structure of circle. x0,y0,z0: center of circle. vx,vy,vz: axis of circle. radius: radius of circle.

        """
        return _V3d.v3d_CircleInPlane(*args)

    @staticmethod
    def GetProjAxis(*args):
        r"""

        Parameters
        ----------
        theOrientation: V3d_TypeOfOrientation

        Return
        -------
        gp_Dir

        Description
        -----------
        Determines the orientation vector corresponding to the predefined orientation type.

        """
        return _V3d.v3d_GetProjAxis(*args)

    @staticmethod
    def SwitchViewsinWindow(*args):
        r"""

        Parameters
        ----------
        aPreviousView: V3d_View
        aNextView: V3d_View

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.v3d_SwitchViewsinWindow(*args)

    @staticmethod
    def TypeOfOrientationFromString(*args):
        r"""

        Parameters
        ----------
        theTypeString: str

        Return
        -------
        V3d_TypeOfOrientation

        Description
        -----------
        Returns the orientation type from the given string identifier (using case-insensitive comparison). @param thetypestring string identifier return orientation type or v3d_typeoforientation if string identifier is invalid.

        Parameters
        ----------
        theTypeString: str

        Return
        -------
        theType: V3d_TypeOfOrientation

        Description
        -----------
        Determines the shape type from the given string identifier (using case-insensitive comparison). @param thetypestring string identifier @param thetype detected shape type return true if string identifier is known.

        """
        return _V3d.v3d_TypeOfOrientationFromString(*args)

    @staticmethod
    def TypeOfOrientationToString(*args):
        r"""

        Parameters
        ----------
        theType: V3d_TypeOfOrientation

        Return
        -------
        str

        Description
        -----------
        Returns the string name for a given orientation type. @param thetype orientation type return string identifier from the list xpos, ypos, zpos and others.

        """
        return _V3d.v3d_TypeOfOrientationToString(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _V3d.v3d_swiginit(self, _V3d.new_v3d())
    __swig_destroy__ = _V3d.delete_v3d

# Register v3d in _V3d:
_V3d.v3d_swigregister(v3d)
class V3d_AmbientLight(OCC.Core.Graphic3d.Graphic3d_CLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color (optional, default to Quantity_NOC_WHITE)

        Return
        -------
        None

        Description
        -----------
        Constructs an ambient light source in the viewer. the default color of this light source is white.

        """
        _V3d.V3d_AmbientLight_swiginit(self, _V3d.new_V3d_AmbientLight(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_AmbientLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_AmbientLight

# Register V3d_AmbientLight in _V3d:
_V3d.V3d_AmbientLight_swigregister(V3d_AmbientLight)
class V3d_CircularGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aViewer: V3d_ViewerPointer
        aColor: Quantity_Color
        aTenthColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _V3d.V3d_CircularGrid_swiginit(self, _V3d.new_V3d_CircularGrid(*args))

    def Display(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_CircularGrid_Display(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _V3d.V3d_CircularGrid_DumpJsonToString(self, depth)

    def Erase(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_CircularGrid_Erase(self, *args)

    def GraphicValues(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        Radius: float
        OffSet: float

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_CircularGrid_GraphicValues(self, *args)

    def IsDisplayed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_CircularGrid_IsDisplayed(self, *args)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        aColor: Quantity_Color
        aTenthColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_CircularGrid_SetColors(self, *args)

    def SetGraphicValues(self, *args):
        r"""

        Parameters
        ----------
        Radius: float
        OffSet: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_CircularGrid_SetGraphicValues(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_CircularGrid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_CircularGrid

# Register V3d_CircularGrid in _V3d:
_V3d.V3d_CircularGrid_swigregister(V3d_CircularGrid)
class V3d_ImageDumpOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Width = property(_V3d.V3d_ImageDumpOptions_Width_get, _V3d.V3d_ImageDumpOptions_Width_set)
    Height = property(_V3d.V3d_ImageDumpOptions_Height_get, _V3d.V3d_ImageDumpOptions_Height_set)
    BufferType = property(_V3d.V3d_ImageDumpOptions_BufferType_get, _V3d.V3d_ImageDumpOptions_BufferType_set)
    StereoOptions = property(_V3d.V3d_ImageDumpOptions_StereoOptions_get, _V3d.V3d_ImageDumpOptions_StereoOptions_set)
    TileSize = property(_V3d.V3d_ImageDumpOptions_TileSize_get, _V3d.V3d_ImageDumpOptions_TileSize_set)
    ToAdjustAspect = property(_V3d.V3d_ImageDumpOptions_ToAdjustAspect_get, _V3d.V3d_ImageDumpOptions_ToAdjustAspect_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Default constructor.

        """
        _V3d.V3d_ImageDumpOptions_swiginit(self, _V3d.new_V3d_ImageDumpOptions(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_ImageDumpOptions

# Register V3d_ImageDumpOptions in _V3d:
_V3d.V3d_ImageDumpOptions_swigregister(V3d_ImageDumpOptions)
class V3d_Plane(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theA: float (optional, default to 0.0)
        theB: float (optional, default to 0.0)
        theC: float (optional, default to 1.0)
        theD: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Creates a clipping plane from plane coefficients.

        """
        _V3d.V3d_Plane_swiginit(self, _V3d.new_V3d_Plane(*args))

    def ClipPlane(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_ClipPlane>

        Description
        -----------
        Use this method to pass clipping plane implementation for standard clipping workflow. return clipping plane implementation handle.

        """
        return _V3d.V3d_Plane_ClipPlane(self, *args)

    def Display(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        theColor: Quantity_Color (optional, default to Quantity_NOC_GRAY)

        Return
        -------
        None

        Description
        -----------
        Display the plane representation in the chosen view.

        """
        return _V3d.V3d_Plane_Display(self, *args)

    def Erase(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Erase the plane representation.

        """
        return _V3d.V3d_Plane_Erase(self, *args)

    def IsDisplayed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when the plane representation is displayed.

        """
        return _V3d.V3d_Plane_IsDisplayed(self, *args)

    def Plane(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theA: float
        theB: float
        theC: float
        theD: float

        Description
        -----------
        Returns the parameters of the plane.

        """
        return _V3d.V3d_Plane_Plane(self, *args)

    def SetPlane(self, *args):
        r"""

        Parameters
        ----------
        theA: float
        theB: float
        theC: float
        theD: float

        Return
        -------
        None

        Description
        -----------
        Change plane equation.

        """
        return _V3d.V3d_Plane_SetPlane(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_Plane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_Plane

# Register V3d_Plane in _V3d:
_V3d.V3d_Plane_swigregister(V3d_Plane)
class V3d_PositionLight(OCC.Core.Graphic3d.Graphic3d_CLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_V3d_PositionLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_PositionLight

# Register V3d_PositionLight in _V3d:
_V3d.V3d_PositionLight_swigregister(V3d_PositionLight)
class V3d_RectangularGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aViewer: V3d_ViewerPointer
        aColor: Quantity_Color
        aTenthColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _V3d.V3d_RectangularGrid_swiginit(self, _V3d.new_V3d_RectangularGrid(*args))

    def Display(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_RectangularGrid_Display(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _V3d.V3d_RectangularGrid_DumpJsonToString(self, depth)

    def Erase(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_RectangularGrid_Erase(self, *args)

    def GraphicValues(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        XSize: float
        YSize: float
        OffSet: float

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_RectangularGrid_GraphicValues(self, *args)

    def IsDisplayed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_RectangularGrid_IsDisplayed(self, *args)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        aColor: Quantity_Color
        aTenthColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_RectangularGrid_SetColors(self, *args)

    def SetGraphicValues(self, *args):
        r"""

        Parameters
        ----------
        XSize: float
        YSize: float
        OffSet: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_RectangularGrid_SetGraphicValues(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_RectangularGrid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_RectangularGrid

# Register V3d_RectangularGrid in _V3d:
_V3d.V3d_RectangularGrid_swigregister(V3d_RectangularGrid)
class V3d_Trihedron(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a default trihedron.

        """
        _V3d.V3d_Trihedron_swiginit(self, _V3d.new_V3d_Trihedron(*args))

    def ArrowAspect(self, *args):
        r"""

        Parameters
        ----------
        theAxis: V3d_TypeOfAxe

        Return
        -------
        opencascade::handle<Prs3d_ShadingAspect>

        Description
        -----------
        Return shading aspect for specified axis. @param theaxis [in] axis index return shading aspect.

        """
        return _V3d.V3d_Trihedron_ArrowAspect(self, *args)

    def ArrowDiameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return arrow diameter.

        """
        return _V3d.V3d_Trihedron_ArrowDiameter(self, *args)

    def Display(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Display trihedron.

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Display trihedron.

        """
        return _V3d.V3d_Trihedron_Display(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _V3d.V3d_Trihedron_DumpJsonToString(self, depth)

    def Erase(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Erase trihedron.

        """
        return _V3d.V3d_Trihedron_Erase(self, *args)

    def IsWireframe(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if wireframe presentation is set; false by default.

        """
        return _V3d.V3d_Trihedron_IsWireframe(self, *args)

    def Label(self, *args):
        r"""

        Parameters
        ----------
        theAxis: V3d_TypeOfAxe

        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Return axis text. @param theaxis [in] axis index return text of the label.

        """
        return _V3d.V3d_Trihedron_Label(self, *args)

    def LabelAspect(self, *args):
        r"""

        Parameters
        ----------
        theAxis: V3d_TypeOfAxe

        Return
        -------
        opencascade::handle<Prs3d_TextAspect>

        Description
        -----------
        Return text aspect for specified axis. @param theaxis [in] axis index return text aspect.

        """
        return _V3d.V3d_Trihedron_LabelAspect(self, *args)

    def NbFacets(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Return number of facets for tessellation.

        """
        return _V3d.V3d_Trihedron_NbFacets(self, *args)

    def OriginAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_ShadingAspect>

        Description
        -----------
        Return shading aspect of origin sphere.

        """
        return _V3d.V3d_Trihedron_OriginAspect(self, *args)

    def Scale(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return scale factor.

        """
        return _V3d.V3d_Trihedron_Scale(self, *args)

    def SetArrowDiameter(self, *args):
        r"""

        Parameters
        ----------
        theDiam: float

        Return
        -------
        None

        Description
        -----------
        Setup the arrow diameter.

        """
        return _V3d.V3d_Trihedron_SetArrowDiameter(self, *args)

    def SetArrowsColor(self, *args):
        r"""

        Parameters
        ----------
        theXColor: Quantity_Color
        theYColor: Quantity_Color
        theZColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Setup colors of arrows.

        """
        return _V3d.V3d_Trihedron_SetArrowsColor(self, *args)

    def SetLabels(self, *args):
        r"""

        Parameters
        ----------
        theX: str
        theY: str
        theZ: str

        Return
        -------
        None

        Description
        -----------
        Setup per-axis text.

        """
        return _V3d.V3d_Trihedron_SetLabels(self, *args)

    def SetLabelsColor(self, *args):
        r"""

        Parameters
        ----------
        theXColor: Quantity_Color
        theYColor: Quantity_Color
        theZColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Setup per-label color.

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Setup color of text labels.

        """
        return _V3d.V3d_Trihedron_SetLabelsColor(self, *args)

    def SetNbFacets(self, *args):
        r"""

        Parameters
        ----------
        theNbFacets: int

        Return
        -------
        None

        Description
        -----------
        Setup the number of facets for tessellation.

        """
        return _V3d.V3d_Trihedron_SetNbFacets(self, *args)

    def SetPosition(self, *args):
        r"""

        Parameters
        ----------
        thePosition: Aspect_TypeOfTriedronPosition

        Return
        -------
        None

        Description
        -----------
        Setup the corner to draw the trihedron.

        """
        return _V3d.V3d_Trihedron_SetPosition(self, *args)

    def SetScale(self, *args):
        r"""

        Parameters
        ----------
        theScale: float

        Return
        -------
        None

        Description
        -----------
        Setup the scale factor.

        """
        return _V3d.V3d_Trihedron_SetScale(self, *args)

    def SetSizeRatio(self, *args):
        r"""

        Parameters
        ----------
        theRatio: float

        Return
        -------
        None

        Description
        -----------
        Setup the size ratio factor.

        """
        return _V3d.V3d_Trihedron_SetSizeRatio(self, *args)

    def SetWireframe(self, *args):
        r"""

        Parameters
        ----------
        theAsWireframe: bool

        Return
        -------
        None

        Description
        -----------
        Switch wireframe / shaded trihedron.

        """
        return _V3d.V3d_Trihedron_SetWireframe(self, *args)

    def SizeRatio(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return size ratio factor.

        """
        return _V3d.V3d_Trihedron_SizeRatio(self, *args)

    def TransformPersistence(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_TransformPers>

        Description
        -----------
        Return trihedron position.

        """
        return _V3d.V3d_Trihedron_TransformPersistence(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_Trihedron_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_Trihedron

# Register V3d_Trihedron in _V3d:
_V3d.V3d_Trihedron_swigregister(V3d_Trihedron)
class V3d_View(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theViewer: V3d_Viewer
        theType: V3d_TypeOfView (optional, default to V3d_ORTHOGRAPHIC)

        Return
        -------
        None

        Description
        -----------
        Initializes the view.

        Parameters
        ----------
        theViewer: V3d_Viewer
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Initializes the view by copying.

        """
        _V3d.V3d_View_swiginit(self, _V3d.new_V3d_View(*args))

    def ActiveLight(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_Light>

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_View_ActiveLight(self, *args)

    def ActiveLightIterator(self, *args):
        r"""
        Return
        -------
        V3d_ListOfLightIterator

        Description
        -----------
        Return iterator for defined lights.

        """
        return _V3d.V3d_View_ActiveLightIterator(self, *args)

    def ActiveLights(self, *args):
        r"""
        Return
        -------
        V3d_ListOfLight

        Description
        -----------
        Returns a list of active lights.

        """
        return _V3d.V3d_View_ActiveLights(self, *args)

    def AddClipPlane(self, *args):
        r"""

        Parameters
        ----------
        thePlane: Graphic3d_ClipPlane

        Return
        -------
        None

        Description
        -----------
        Adds clip plane to the view. the composition of clip planes truncates the rendering space to convex volume. number of supported clip planes can be consulted by planelimit method of associated graphic3d_graphicdriver. please be aware that the planes which exceed the limit are ignored during rendering. @param theplane [in] the clip plane to be added to view.

        """
        return _V3d.V3d_View_AddClipPlane(self, *args)

    def AddSubview(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Add subview to the list.

        """
        return _V3d.V3d_View_AddSubview(self, *args)

    def At(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        X: float
        Y: float
        Z: float

        Description
        -----------
        Returns the position of the view point.

        """
        return _V3d.V3d_View_At(self, *args)

    def AutoZFit(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        If automatic z-range fitting is turned on, adjusts z-min and z-max projection volume planes with call to zfitall.

        """
        return _V3d.V3d_View_AutoZFit(self, *args)

    def AutoZFitMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if automatic z-fit mode is turned on.

        """
        return _V3d.V3d_View_AutoZFitMode(self, *args)

    def AutoZFitScaleFactor(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns scale factor parameter of automatic z-fit mode.

        """
        return _V3d.V3d_View_AutoZFitScaleFactor(self, *args)

    def AxialScale(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        Sx: float
        Sy: float
        Sz: float

        Description
        -----------
        Returns the current values of the anisotropic (axial) scale factors.

        Parameters
        ----------
        Dx: int
        Dy: int
        Axis: V3d_TypeOfAxe

        Return
        -------
        None

        Description
        -----------
        Performs anisotropic scaling of <self> view along the given <axis>. the scale factor is calculated on a basis of the mouse pointer displacement <dx,dy>. the calculated scale factor is then passed to setaxialscale(sx, sy, sz) method.

        """
        return _V3d.V3d_View_AxialScale(self, *args)

    def BackFacingModel(self, *args):
        r"""
        Return
        -------
        Graphic3d_TypeOfBackfacingModel

        Description
        -----------
        Returns current state of the back faces display; graphic3d_typeofbackfacingmodel_auto by default, which means that backface culling is defined by each presentation.

        """
        return _V3d.V3d_View_BackFacingModel(self, *args)

    def BackgroundColor(self, *args):
        r"""

        Parameters
        ----------
        Type: Quantity_TypeOfColor

        Return
        -------
        V1: float
        V2: float
        V3: float

        Description
        -----------
        Returns the background color values of the view depending of the color type.
        Return
        -------
        Quantity_Color

        Description
        -----------
        Returns the background color object of the view.

        """
        return _V3d.V3d_View_BackgroundColor(self, *args)

    def BackgroundSkydome(self, *args):
        r"""
        Return
        -------
        Aspect_SkydomeBackground

        Description
        -----------
        Returns skydome aspect;.

        """
        return _V3d.V3d_View_BackgroundSkydome(self, *args)

    def Camera(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_Camera>

        Description
        -----------
        Returns camera object of the view. return: handle to camera object, or null if 3d view does not use the camera approach.

        """
        return _V3d.V3d_View_Camera(self, *args)

    def ChangeRenderingParams(self, *args):
        r"""
        Return
        -------
        Graphic3d_RenderingParams

        Description
        -----------
        Returns reference to current rendering parameters and effect settings.

        """
        return _V3d.V3d_View_ChangeRenderingParams(self, *args)

    def ClearPBREnvironment(self, *args):
        r"""

        Parameters
        ----------
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Disables ibl from background cubemap; fills pbr specular probe and irradiance map with white color.

        """
        return _V3d.V3d_View_ClearPBREnvironment(self, *args)

    def ClipPlanes(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_SequenceOfHClipPlane>

        Description
        -----------
        Get clip planes. return sequence clip planes that have been set for the view.

        """
        return _V3d.V3d_View_ClipPlanes(self, *args)

    def ComputedMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the computed hlr mode state.

        """
        return _V3d.V3d_View_ComputedMode(self, *args)

    def Convert(self, *args):
        r"""

        Parameters
        ----------
        Vp: int

        Return
        -------
        float

        Description
        -----------
        Converts the pixel value to a value in the projection plane.

        Parameters
        ----------
        Xp: int
        Yp: int

        Return
        -------
        Xv: float
        Yv: float

        Description
        -----------
        Converts the point pixel into a point projected in the reference frame of the projection plane.

        Parameters
        ----------
        Vv: float

        Return
        -------
        int

        Description
        -----------
        Converts tha value of the projection plane into a pixel value.

        Parameters
        ----------
        Xv: float
        Yv: float

        Return
        -------
        Xp: int
        Yp: int

        Description
        -----------
        Converts the point defined in the reference frame of the projection plane into a point pixel.

        Parameters
        ----------
        Xp: int
        Yp: int

        Return
        -------
        X: float
        Y: float
        Z: float

        Description
        -----------
        Converts the projected point into a point in the reference frame of the view corresponding to the intersection with the projection plane of the eye/view point vector.

        Parameters
        ----------
        X: float
        Y: float
        Z: float

        Return
        -------
        Xp: int
        Yp: int

        Description
        -----------
        Projects the point defined in the reference frame of the view into the projected point in the associated window.

        """
        return _V3d.V3d_View_Convert(self, *args)

    def ConvertToGrid(self, *args):
        r"""

        Parameters
        ----------
        Xp: int
        Yp: int

        Return
        -------
        Xg: float
        Yg: float
        Zg: float

        Description
        -----------
        Converts the projected point into the nearest grid point in the reference frame of the view corresponding to the intersection with the projection plane of the eye/view point vector and display the grid marker. warning: when the grid is not active the result is identical to the above convert() method. how to use: 1) enable the grid echo display myviewer->setgridecho(standard_true); 2) when application receive a move event: 2.1) check if any object is detected if( myinteractivecontext->moveto(x,y) == ais_sod_nothing ) { 2.2) check if the grid is active if( myviewer->grid()->isactive() ) { 2.3) display the grid echo and gets the grid point myview->converttogrid(x,y,x,y,z); myview->viewer()->showgridecho (myview, graphic3d_vertex (x,y,z)); myview->redrawimmediate(); 2.4) else this is the standard case } else myview->convert(x,y,x,y,z);.

        Parameters
        ----------
        X: float
        Y: float
        Z: float

        Return
        -------
        Xg: float
        Yg: float
        Zg: float

        Description
        -----------
        Converts the point into the nearest grid point and display the grid marker.

        """
        return _V3d.V3d_View_ConvertToGrid(self, *args)

    def ConvertWithProj(self, *args):
        r"""

        Parameters
        ----------
        Xp: int
        Yp: int

        Return
        -------
        X: float
        Y: float
        Z: float
        Vx: float
        Vy: float
        Vz: float

        Description
        -----------
        Converts the projected point into a point in the reference frame of the view corresponding to the intersection with the projection plane of the eye/view point vector and returns the projection ray for further computations.

        """
        return _V3d.V3d_View_ConvertWithProj(self, *args)

    def DefaultCamera(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_Camera>

        Description
        -----------
        Return default camera.

        """
        return _V3d.V3d_View_DefaultCamera(self, *args)

    def Depth(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the distance between the eye and view point.

        """
        return _V3d.V3d_View_Depth(self, *args)

    def DepthFitAll(self, *args):
        r"""

        Parameters
        ----------
        Aspect: float (optional, default to 0.01)
        Margin: float (optional, default to 0.01)

        Return
        -------
        None

        Description
        -----------
        Adjusts the viewing volume so as not to clip the displayed objects by front and back and back clipping planes. also sets depth value automatically depending on the calculated z size and aspect parameter. note than the original xy size of the view is not modified .

        """
        return _V3d.V3d_View_DepthFitAll(self, *args)

    def DiagnosticInformation(self, *args):
        r"""

        Parameters
        ----------
        theDict: TColStd_IndexedDataMapOfStringString
        theFlags: Graphic3d_DiagnosticInfo

        Return
        -------
        None

        Description
        -----------
        Fill in the dictionary with diagnostic info. should be called within rendering thread. //! this api should be used only for user output or for creating automated reports. the format of returned information (e.g. key-value layout) is not part of this api and can be changed at any time. thus application should not parse returned information to weed out specific parameters. @param thedict destination map for information @param theflags defines the information to be retrieved.

        """
        return _V3d.V3d_View_DiagnosticInformation(self, *args)

    def DoMapping(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Must be called when the window supporting the view is mapped or unmapped.

        """
        return _V3d.V3d_View_DoMapping(self, *args)

    def Dump(self, *args):
        r"""

        Parameters
        ----------
        theFile: str
        theBufferType: Graphic3d_BufferType (optional, default to Graphic3d_BT_RGB)

        Return
        -------
        bool

        Description
        -----------
        Dumps the full contents of the view into the image file. this is an alias for topixmap() with image_alienpixmap. @param thefile destination image file (image format is determined by file extension like .png, .bmp, .jpg) @param thebuffertype buffer to dump return false when the dump has failed.

        """
        return _V3d.V3d_View_Dump(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _V3d.V3d_View_DumpJsonToString(self, depth)

    def Eye(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        X: float
        Y: float
        Z: float

        Description
        -----------
        Returns the position of the eye.

        """
        return _V3d.V3d_View_Eye(self, *args)

    def FitAll(self, *args):
        r"""

        Parameters
        ----------
        theMargin: float (optional, default to 0.01)
        theToUpdate: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Adjust view parameters to fit the displayed scene, respecting height / width ratio. the z clipping range (depth range) is fitted if autozfit flag is true. throws program error exception if margin coefficient is < 0 or >= 1. updates the view. @param themargin [in] the margin coefficient for view borders. @param thetoupdate [in] flag to perform view update.

        Parameters
        ----------
        theBox: Bnd_Box
        theMargin: float (optional, default to 0.01)
        theToUpdate: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Adjust view parameters to fit the displayed scene, respecting height / width ratio according to the custom bounding box given. throws program error exception if margin coefficient is < 0 or >= 1. updates the view. @param thebox [in] the custom bounding box to fit. @param themargin [in] the margin coefficient for view borders. @param thetoupdate [in] flag to perform view update.

        Parameters
        ----------
        theMinXv: float
        theMinYv: float
        theMaxXv: float
        theMaxYv: float

        Return
        -------
        None

        Description
        -----------
        Centers the defined projection window so that it occupies the maximum space while respecting the initial height/width ratio. note than the original z size of the view is not modified .

        """
        return _V3d.V3d_View_FitAll(self, *args)

    def FitMinMax(self, *args):
        r"""

        Parameters
        ----------
        theCamera: Graphic3d_Camera
        theBox: Bnd_Box
        theMargin: float
        theResolution: float (optional, default to 0.0)
        theToEnlargeIfLine: bool (optional, default to Standard_True)

        Return
        -------
        bool

        Description
        -----------
        Transform camera eye, center and scale to fit in the passed bounding box specified in wcs. @param thecamera [in] the camera @param thebox [in] the bounding box @param themargin [in] the margin coefficient for view borders @param theresolution [in] the minimum size of projection of bounding box in xv or yv direction when it considered to be a thin plane or point (without a volume);  in this case only the center of camera is adjusted @param thetoenlargeifline [in] when true - in cases when the whole bounding box projected into thin line going along z-axis of screen,  the view plane is enlarged such thatwe see the whole line on rotation, otherwise only the center of camera is adjusted. return true if the fit all operation can be done.

        """
        return _V3d.V3d_View_FitMinMax(self, *args)

    def FocalReferencePoint(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        X: float
        Y: float
        Z: float

        Description
        -----------
        Returns the position of point which emanating the projections.

        """
        return _V3d.V3d_View_FocalReferencePoint(self, *args)

    def Focale(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the view plane distance for perspective views.

        """
        return _V3d.V3d_View_Focale(self, *args)

    def GeneratePBREnvironment(self, *args):
        r"""

        Parameters
        ----------
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Activates ibl from background cubemap.

        """
        return _V3d.V3d_View_GeneratePBREnvironment(self, *args)

    def GetGraduatedTrihedron(self, *args):
        r"""
        Return
        -------
        Graphic3d_GraduatedTrihedron

        Description
        -----------
        Returns data of a graduated trihedron.

        """
        return _V3d.V3d_View_GetGraduatedTrihedron(self, *args)

    def GradientBackground(self, *args):
        r"""
        Return
        -------
        Aspect_GradientBackground

        Description
        -----------
        Returns the gradient background of the view.

        """
        return _V3d.V3d_View_GradientBackground(self, *args)

    def GradientBackgroundColors(self, *args):
        r"""

        Parameters
        ----------
        theColor1: Quantity_Color
        theColor2: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Returns the gradient background colors of the view.

        """
        return _V3d.V3d_View_GradientBackgroundColors(self, *args)

    def GraduatedTrihedronDisplay(self, *args):
        r"""

        Parameters
        ----------
        theTrihedronData: Graphic3d_GraduatedTrihedron

        Return
        -------
        None

        Description
        -----------
        Displays a graduated trihedron.

        """
        return _V3d.V3d_View_GraduatedTrihedronDisplay(self, *args)

    def GraduatedTrihedronErase(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Erases a graduated trihedron from the view.

        """
        return _V3d.V3d_View_GraduatedTrihedronErase(self, *args)

    def GravityPoint(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the objects number and the gravity center of all viewable points in the view.

        """
        return _V3d.V3d_View_GravityPoint(self, *args)

    def IfMoreLights(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if one light more can be activated in this view.

        """
        return _V3d.V3d_View_IfMoreLights(self, *args)

    def IfWindow(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if myview is associated with a window .

        """
        return _V3d.V3d_View_IfWindow(self, *args)

    def InitActiveLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes an iteration on the active lights.

        """
        return _V3d.V3d_View_InitActiveLights(self, *args)

    def Invalidate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Invalidates view content but does not redraw it.

        """
        return _V3d.V3d_View_Invalidate(self, *args)

    def InvalidateImmediate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Invalidates view content within immediate layer but does not redraw it.

        """
        return _V3d.V3d_View_InvalidateImmediate(self, *args)

    def IsActiveLight(self, *args):
        r"""

        Parameters
        ----------
        theLight: V3d_Light

        Return
        -------
        bool

        Description
        -----------
        Returns true when the light is active in this view.

        """
        return _V3d.V3d_View_IsActiveLight(self, *args)

    def IsCullingEnabled(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return flag value of objects culling mechanism.

        """
        return _V3d.V3d_View_IsCullingEnabled(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the status of the view regarding the displayed structures inside returns true is the view is empty.

        """
        return _V3d.V3d_View_IsEmpty(self, *args)

    def IsImageBasedLighting(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if ibl (image based lighting) from background cubemap is enabled.

        """
        return _V3d.V3d_View_IsImageBasedLighting(self, *args)

    def IsInvalidated(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if cached view content has been invalidated.

        """
        return _V3d.V3d_View_IsInvalidated(self, *args)

    def IsInvalidatedImmediate(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if immediate layer content has been invalidated.

        """
        return _V3d.V3d_View_IsInvalidatedImmediate(self, *args)

    def IsSubview(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if this is a subview of another view.

        """
        return _V3d.V3d_View_IsSubview(self, *args)

    def LightLimit(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the max number of light associated to the view.

        """
        return _V3d.V3d_View_LightLimit(self, *args)

    def MoreActiveLights(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are more active light(s) to return.

        """
        return _V3d.V3d_View_MoreActiveLights(self, *args)

    def Move(self, *args):
        r"""

        Parameters
        ----------
        Dx: float
        Dy: float
        Dz: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Movement of the eye parallel to the coordinate system of reference of the screen a distance relative to the initial position expressed by start = standard_true.

        Parameters
        ----------
        Axe: V3d_TypeOfAxe
        Length: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Movement of the eye parallel to one of the axes of the coordinate system of reference of the view a distance relative to the initial position expressed by start = standard_true.

        Parameters
        ----------
        Length: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Movement of the eye parllel to the current axis a distance relative to the initial position expressed by start = standard_true.

        """
        return _V3d.V3d_View_Move(self, *args)

    def MustBeResized(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Must be called when the window supporting the view changes size. if the view is not mapped on a window. warning: the view is centered and resized to preserve the height/width ratio of the window.

        """
        return _V3d.V3d_View_MustBeResized(self, *args)

    def NextActiveLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Go to the next active light (if there is not, activelight will raise an exception).

        """
        return _V3d.V3d_View_NextActiveLights(self, *args)

    def Pan(self, *args):
        r"""

        Parameters
        ----------
        theDXp: int
        theDYp: int
        theZoomFactor: float (optional, default to 1)
        theToStart: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Translates the center of the view along 'x' and 'y' axes of view projection. can be used to perform interactive panning operation. in that case the dxp, dxp parameters specify panning relative to the point where the operation is started. @param thedxp [in] the relative panning on 'x' axis of view projection, in pixels. @param thedyp [in] the relative panning on 'y' axis of view projection, in pixels. @param thezoomfactor [in] the zooming factor. @param thetostart [in] pass true when starting panning to remember view state prior to panning for relative arguments. passing 0 for relative panning parameter should return view panning to initial state. performs update of view.

        """
        return _V3d.V3d_View_Pan(self, *args)

    def Panning(self, *args):
        r"""

        Parameters
        ----------
        theDXv: float
        theDYv: float
        theZoomFactor: float (optional, default to 1)
        theToStart: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Translates the center of the view along 'x' and 'y' axes of view projection. can be used to perform interactive panning operation. in that case the dxv, dxy parameters specify panning relative to the point where the operation is started. @param thedxv [in] the relative panning on 'x' axis of view projection, in view space coordinates. @param thedyv [in] the relative panning on 'y' axis of view projection, in view space coordinates. @param thezoomfactor [in] the zooming factor. @param thetostart [in] pass true when starting panning to remember view state prior to panning for relative arguments. if panning is started, passing {0, 0} for {thedxv, thedyv} will return view to initial state. performs update of view.

        """
        return _V3d.V3d_View_Panning(self, *args)

    def ParentView(self, *args):
        r"""
        Return
        -------
        V3d_View *

        Description
        -----------
        Return parent view or null if this is not a subview.

        """
        return _V3d.V3d_View_ParentView(self, *args)

    def PickSubview(self, *args):
        r"""

        Parameters
        ----------
        thePnt: Graphic3d_Vec2i

        Return
        -------
        opencascade::handle<V3d_View>

        Description
        -----------
        Pick subview from the given 2d point.

        """
        return _V3d.V3d_View_PickSubview(self, *args)

    def Place(self, *args):
        r"""

        Parameters
        ----------
        theXp: int
        theYp: int
        theZoomFactor: float (optional, default to 1)

        Return
        -------
        None

        Description
        -----------
        Places the point of the view corresponding at the pixel position x,y at the center of the window and updates the view.

        """
        return _V3d.V3d_View_Place(self, *args)

    def PlaneLimit(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the max number of clipping planes associated to the view.

        """
        return _V3d.V3d_View_PlaneLimit(self, *args)

    def Proj(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        Vx: float
        Vy: float
        Vz: float

        Description
        -----------
        Returns the projection vector.

        """
        return _V3d.V3d_View_Proj(self, *args)

    def ProjReferenceAxe(self, *args):
        r"""

        Parameters
        ----------
        Xpix: int
        Ypix: int

        Return
        -------
        XP: float
        YP: float
        ZP: float
        VX: float
        VY: float
        VZ: float

        Description
        -----------
        Returns the coordinate of the point (xpix,ypix) in the view (xp,yp,zp), and the projection vector of the view passing by the point (for perspectiveview).

        """
        return _V3d.V3d_View_ProjReferenceAxe(self, *args)

    def Project(self, *args):
        r"""

        Parameters
        ----------
        theX: float
        theY: float
        theZ: float

        Return
        -------
        theXp: float
        theYp: float

        Description
        -----------
        Converts the point defined in the user space of the view to the projection plane at the depth relative to thez.

        Parameters
        ----------
        theX: float
        theY: float
        theZ: float

        Return
        -------
        theXp: float
        theYp: float
        theZp: float

        Description
        -----------
        Converts the point defined in the user space of the view to the projection plane at the depth relative to thez.

        """
        return _V3d.V3d_View_Project(self, *args)

    def Redraw(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Redisplays the view even if there has not been any modification. must be called if the view is shown. (ex: deiconification ) .

        """
        return _V3d.V3d_View_Redraw(self, *args)

    def RedrawImmediate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Updates layer of immediate presentations.

        """
        return _V3d.V3d_View_RedrawImmediate(self, *args)

    def Remove(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Destroys the view.

        """
        return _V3d.V3d_View_Remove(self, *args)

    def RemoveClipPlane(self, *args):
        r"""

        Parameters
        ----------
        thePlane: Graphic3d_ClipPlane

        Return
        -------
        None

        Description
        -----------
        Removes clip plane from the view. @param theplane [in] the clip plane to be removed from view.

        """
        return _V3d.V3d_View_RemoveClipPlane(self, *args)

    def RemoveSubview(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View *

        Return
        -------
        bool

        Description
        -----------
        Remove subview from the list.

        """
        return _V3d.V3d_View_RemoveSubview(self, *args)

    def RenderingParams(self, *args):
        r"""
        Return
        -------
        Graphic3d_RenderingParams

        Description
        -----------
        Returns current rendering parameters and effect settings. by default it returns default parameters of current viewer. to define view-specific settings use method v3d_view::changerenderingparams(). @sa v3d_viewer::defaultrenderingparams().

        """
        return _V3d.V3d_View_RenderingParams(self, *args)

    def Reset(self, *args):
        r"""

        Parameters
        ----------
        theToUpdate: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Resets the centering and the orientation of the view.

        """
        return _V3d.V3d_View_Reset(self, *args)

    def ResetViewMapping(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets the centering of the view. updates the view.

        """
        return _V3d.V3d_View_ResetViewMapping(self, *args)

    def ResetViewOrientation(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets the orientation of the view. updates the view.

        """
        return _V3d.V3d_View_ResetViewOrientation(self, *args)

    def Rotate(self, *args):
        r"""

        Parameters
        ----------
        Ax: float
        Ay: float
        Az: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Rotates the eye about the coordinate system of reference of the screen for which the origin is the view point of the projection, with a relative angular value in radians with respect to the initial position expressed by start = standard_true warning! raises badvalue from v3d if the eye, the view point, or the high point are aligned or confused.

        Parameters
        ----------
        Ax: float
        Ay: float
        Az: float
        X: float
        Y: float
        Z: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Rotates the eye about the coordinate system of reference of the screen for which the origin is gravity point {x,y,z}, with a relative angular value in radians with respect to the initial position expressed by start = standard_true if the eye, the view point, or the high point are aligned or confused.

        Parameters
        ----------
        Axe: V3d_TypeOfAxe
        Angle: float
        X: float
        Y: float
        Z: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Rotates the eye about one of the coordinate axes of of the view for which the origin is the gravity point{x,y,z} with an relative angular value in radians with respect to the initial position expressed by start = standard_true.

        Parameters
        ----------
        Axe: V3d_TypeOfAxe
        Angle: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Rotates the eye about one of the coordinate axes of of the view for which the origin is the view point of the projection with an relative angular value in radians with respect to the initial position expressed by start = standard_true.

        Parameters
        ----------
        Angle: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Rotates the eye around the current axis a relative angular value in radians with respect to the initial position expressed by start = standard_true.

        """
        return _V3d.V3d_View_Rotate(self, *args)

    def Rotation(self, *args):
        r"""

        Parameters
        ----------
        X: int
        Y: int

        Return
        -------
        None

        Description
        -----------
        Continues the rotation of the view with an angle computed from the last and new mouse position <x,y>.

        """
        return _V3d.V3d_View_Rotation(self, *args)

    def Scale(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the current value of the zoom expressed with respect to setviewmappingdefault().

        """
        return _V3d.V3d_View_Scale(self, *args)

    def SetAt(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float
        Z: float

        Return
        -------
        None

        Description
        -----------
        Defines the position of the view point.

        """
        return _V3d.V3d_View_SetAt(self, *args)

    def SetAutoZFitMode(self, *args):
        r"""

        Parameters
        ----------
        theIsOn: bool
        theScaleFactor: float (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        Sets the automatic z-fit mode and its parameters. the auto z-fit has extra parameters which can controlled from application level to ensure that the size of viewing volume will be sufficiently large to cover the depth of unmanaged objects, for example, transformation persistent ones. @param thescalefactor [in] the scale factor for z-range. the range between z-min, z-max projection volume planes evaluated by z fitting method will be scaled using this coefficient. program error exception is thrown if negative or zero value is passed.

        """
        return _V3d.V3d_View_SetAutoZFitMode(self, *args)

    def SetAxialScale(self, *args):
        r"""

        Parameters
        ----------
        Sx: float
        Sy: float
        Sz: float

        Return
        -------
        None

        Description
        -----------
        Sets anisotropic (axial) scale factors <sx>, <sy>, <sz> for view <self>. anisotropic scaling operation is performed through multiplying the current view orientation matrix by a scaling matrix: || sx 0 0 0 || || 0 sy 0 0 || || 0 0 sz 0 || || 0 0 0 1 || updates the view.

        """
        return _V3d.V3d_View_SetAxialScale(self, *args)

    def SetAxis(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float
        Z: float
        Vx: float
        Vy: float
        Vz: float

        Return
        -------
        None

        Description
        -----------
        Definition of an axis from its origin and its orientation . this will be the current axis for rotations and movements. warning! raises badvalue from v3d if the vector normal is null. .

        """
        return _V3d.V3d_View_SetAxis(self, *args)

    def SetBackFacingModel(self, *args):
        r"""

        Parameters
        ----------
        theModel: Graphic3d_TypeOfBackfacingModel (optional, default to Graphic3d_TypeOfBackfacingModel_Auto)

        Return
        -------
        None

        Description
        -----------
        Manages display of the back faces.

        """
        return _V3d.V3d_View_SetBackFacingModel(self, *args)

    def SetBackgroundColor(self, *args):
        r"""

        Parameters
        ----------
        theType: Quantity_TypeOfColor
        theV1: float
        theV2: float
        theV3: float

        Return
        -------
        None

        Description
        -----------
        Defines the background color of the view by the color definition type and the three corresponding values.

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Defines the background color of the view.

        """
        return _V3d.V3d_View_SetBackgroundColor(self, *args)

    def SetBackgroundCubeMap(self, *args):
        r"""

        Parameters
        ----------
        theCubeMap: Graphic3d_CubeMap
        theToUpdatePBREnv: bool (optional, default to Standard_True)
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Sets environment cubemap as background. @param thecubemap cubemap source to be set as background @param thetoupdatepbrenv defines whether ibl maps will be generated or not (see 'generatepbrenvironment').

        """
        return _V3d.V3d_View_SetBackgroundCubeMap(self, *args)

    def SetBackgroundImage(self, *args):
        r"""

        Parameters
        ----------
        theFileName: str
        theFillStyle: Aspect_FillMethod (optional, default to Aspect_FM_CENTERED)
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Defines the background texture of the view by supplying the texture image file name and fill method (centered by default).

        Parameters
        ----------
        theTexture: Graphic3d_Texture2D
        theFillStyle: Aspect_FillMethod (optional, default to Aspect_FM_CENTERED)
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Defines the background texture of the view by supplying the texture and fill method (centered by default).

        """
        return _V3d.V3d_View_SetBackgroundImage(self, *args)

    def SetBackgroundSkydome(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Aspect_SkydomeBackground
        theToUpdatePBREnv: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Sets skydome aspect @param theaspect cubemap generation parameters @param thetoupdatepbrenv defines whether ibl maps will be generated or not.

        """
        return _V3d.V3d_View_SetBackgroundSkydome(self, *args)

    def SetBgGradientColors(self, *args):
        r"""

        Parameters
        ----------
        theColor1: Quantity_Color
        theColor2: Quantity_Color
        theFillStyle: Aspect_GradientFillMethod (optional, default to Aspect_GradientFillMethod_Horizontal)
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Defines the gradient background colors of the view by supplying the colors and the fill method (horizontal by default).

        """
        return _V3d.V3d_View_SetBgGradientColors(self, *args)

    def SetBgGradientStyle(self, *args):
        r"""

        Parameters
        ----------
        theMethod: Aspect_GradientFillMethod (optional, default to Aspect_GradientFillMethod_Horizontal)
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Defines the gradient background fill method of the view.

        """
        return _V3d.V3d_View_SetBgGradientStyle(self, *args)

    def SetBgImageStyle(self, *args):
        r"""

        Parameters
        ----------
        theFillStyle: Aspect_FillMethod
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Defines the textured background fill method of the view.

        """
        return _V3d.V3d_View_SetBgImageStyle(self, *args)

    def SetCamera(self, *args):
        r"""

        Parameters
        ----------
        theCamera: Graphic3d_Camera

        Return
        -------
        None

        Description
        -----------
        Change camera used by view.

        """
        return _V3d.V3d_View_SetCamera(self, *args)

    def SetCenter(self, *args):
        r"""

        Parameters
        ----------
        theXp: int
        theYp: int

        Return
        -------
        None

        Description
        -----------
        Relocates center of screen to the point, determined by {xp, yp} pixel coordinates relative to the bottom-left corner of screen. to calculate pixel coordinates for any point from world coordinate space, it can be projected using 'project'. @param thexp [in] the x coordinate. @param theyp [in] the y coordinate.

        """
        return _V3d.V3d_View_SetCenter(self, *args)

    def SetClipPlanes(self, *args):
        r"""

        Parameters
        ----------
        thePlanes: Graphic3d_SequenceOfHClipPlane

        Return
        -------
        None

        Description
        -----------
        Sets sequence of clip planes to the view. the planes that have been set before are removed from the view. the composition of clip planes truncates the rendering space to convex volume. number of supported clip planes can be consulted by inquireplanelimit method of graphic3d_graphicdriver. please be aware that the planes that exceed the limit are ignored during rendering. @param theplanes [in] the clip planes to set.

        """
        return _V3d.V3d_View_SetClipPlanes(self, *args)

    def SetComputedMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: bool

        Return
        -------
        None

        Description
        -----------
        Switches computed hlr mode in the view.

        """
        return _V3d.V3d_View_SetComputedMode(self, *args)

    def SetDepth(self, *args):
        r"""

        Parameters
        ----------
        Depth: float

        Return
        -------
        None

        Description
        -----------
        Defines the depth of the eye from the view point without update the projection .

        """
        return _V3d.V3d_View_SetDepth(self, *args)

    def SetEye(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float
        Z: float

        Return
        -------
        None

        Description
        -----------
        Defines the position of the eye..

        """
        return _V3d.V3d_View_SetEye(self, *args)

    def SetFocale(self, *args):
        r"""

        Parameters
        ----------
        Focale: float

        Return
        -------
        None

        Description
        -----------
        Change view plane distance for perspective views warning! raises typemismatch from standard if the view is not a perspective view.

        """
        return _V3d.V3d_View_SetFocale(self, *args)

    def SetFront(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Modify the projection of the view perpendicularly to the privileged plane of the viewer.

        """
        return _V3d.V3d_View_SetFront(self, *args)

    def SetFrustumCulling(self, *args):
        r"""

        Parameters
        ----------
        theMode: bool

        Return
        -------
        None

        Description
        -----------
        Turn on/off automatic culling of objects outside frustum (on by default).

        """
        return _V3d.V3d_View_SetFrustumCulling(self, *args)

    def SetGrid(self, *args):
        r"""

        Parameters
        ----------
        aPlane: gp_Ax3
        aGrid: Aspect_Grid

        Return
        -------
        None

        Description
        -----------
        Defines or updates the definition of the grid in <self>.

        """
        return _V3d.V3d_View_SetGrid(self, *args)

    def SetGridActivity(self, *args):
        r"""

        Parameters
        ----------
        aFlag: bool

        Return
        -------
        None

        Description
        -----------
        Defines or updates the activity of the grid in <self>.

        """
        return _V3d.V3d_View_SetGridActivity(self, *args)

    def SetImageBasedLighting(self, *args):
        r"""

        Parameters
        ----------
        theToEnableIBL: bool
        theToUpdate: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Enables or disables ibl (image based lighting) from background cubemap. has no effect if pbr is not used. @param[in] thetoenableibl enable or disable ibl from background cubemap @param[in] thetoupdate redraw the view.

        """
        return _V3d.V3d_View_SetImageBasedLighting(self, *args)

    def SetImmediateUpdate(self, *args):
        r"""

        Parameters
        ----------
        theImmediateUpdate: bool

        Return
        -------
        bool

        Description
        -----------
        Sets the immediate update mode and returns the previous one.

        """
        return _V3d.V3d_View_SetImmediateUpdate(self, *args)

    def SetLightOff(self, *args):
        r"""

        Parameters
        ----------
        theLight: V3d_Light

        Return
        -------
        None

        Description
        -----------
        Deactivate thelight in this view.
        Return
        -------
        None

        Description
        -----------
        Deactivate all the lights defined in this view.

        """
        return _V3d.V3d_View_SetLightOff(self, *args)

    def SetLightOn(self, *args):
        r"""

        Parameters
        ----------
        theLight: V3d_Light

        Return
        -------
        None

        Description
        -----------
        Activates thelight in the view.
        Return
        -------
        None

        Description
        -----------
        Activates all the lights defined in this view.

        """
        return _V3d.V3d_View_SetLightOn(self, *args)

    def SetMagnify(self, *args):
        r"""

        Parameters
        ----------
        theWindow: Aspect_Window
        thePreviousView: V3d_View
        theX1: int
        theY1: int
        theX2: int
        theY2: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_View_SetMagnify(self, *args)

    def SetProj(self, *args):
        r"""

        Parameters
        ----------
        Vx: float
        Vy: float
        Vz: float

        Return
        -------
        None

        Description
        -----------
        Defines the orientation of the projection.

        Parameters
        ----------
        theOrientation: V3d_TypeOfOrientation
        theIsYup: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Defines the orientation of the projection . @param theorientation camera direction @param theisyup flag indicating y-up (true) or z-up (false) convention.

        """
        return _V3d.V3d_View_SetProj(self, *args)

    def SetScale(self, *args):
        r"""

        Parameters
        ----------
        Coef: float

        Return
        -------
        None

        Description
        -----------
        Zooms the view by a factor relative to the value initialised by setviewmappingdefault(). updates the view.

        """
        return _V3d.V3d_View_SetScale(self, *args)

    def SetShadingModel(self, *args):
        r"""

        Parameters
        ----------
        theShadingModel: Graphic3d_TypeOfShadingModel

        Return
        -------
        None

        Description
        -----------
        Defines the shading model for the visualization.

        """
        return _V3d.V3d_View_SetShadingModel(self, *args)

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: float

        Return
        -------
        None

        Description
        -----------
        Defines the view projection size in its maximum dimension, keeping the initial height/width ratio unchanged.

        """
        return _V3d.V3d_View_SetSize(self, *args)

    def SetTextureEnv(self, *args):
        r"""

        Parameters
        ----------
        theTexture: Graphic3d_TextureEnv

        Return
        -------
        None

        Description
        -----------
        Sets the environment texture to use. no environment texture by default.

        """
        return _V3d.V3d_View_SetTextureEnv(self, *args)

    def SetTwist(self, *args):
        r"""

        Parameters
        ----------
        Angle: float

        Return
        -------
        None

        Description
        -----------
        Defines the angular position of the high point of the reference frame of the view with respect to the y screen axis with an absolute angular value in radians.

        """
        return _V3d.V3d_View_SetTwist(self, *args)

    def SetUp(self, *args):
        r"""

        Parameters
        ----------
        Vx: float
        Vy: float
        Vz: float

        Return
        -------
        None

        Description
        -----------
        Defines the orientation of the high point.

        Parameters
        ----------
        Orientation: V3d_TypeOfOrientation

        Return
        -------
        None

        Description
        -----------
        Defines the orientation(so) of the high point.

        """
        return _V3d.V3d_View_SetUp(self, *args)

    def SetViewMappingDefault(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Saves the current view mapping. this will be the state returned from resetviewmapping.

        """
        return _V3d.V3d_View_SetViewMappingDefault(self, *args)

    def SetViewOrientationDefault(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Saves the current state of the orientation of the view which will be the return state at resetvieworientation.

        """
        return _V3d.V3d_View_SetViewOrientationDefault(self, *args)

    def SetVisualization(self, *args):
        r"""

        Parameters
        ----------
        theType: V3d_TypeOfVisualization

        Return
        -------
        None

        Description
        -----------
        Defines the visualization type in the view.

        """
        return _V3d.V3d_View_SetVisualization(self, *args)

    def SetWindow(self, *args):
        r"""

        Parameters
        ----------
        theWindow: Aspect_Window
        theContext: Aspect_RenderingContext (optional, default to NULL)

        Return
        -------
        None

        Description
        -----------
        Activates the view in the specified window if <acontext> is not null the graphic context is used to draw something in this view. otherwise an internal graphic context is created. warning: the view is centered and resized to preserve the height/width ratio of the window.

        Parameters
        ----------
        theParentView: V3d_View
        theSize: Graphic3d_Vec2d
        theCorner: Aspect_TypeOfTriedronPosition (optional, default to Aspect_TOTP_LEFT_UPPER)
        theOffset: Graphic3d_Vec2d (optional, default to Graphic3d_Vec2d())
        theMargins: Graphic3d_Vec2i (optional, default to Graphic3d_Vec2i())

        Return
        -------
        None

        Description
        -----------
        Activates the view as subview of another view. @param[in] theparentview parent view to put subview into @param[in] thesize subview dimensions;  values >= 2 define size in pixels,  values <= 1.0 define size as a fraction of parent view @param[in] thecorner corner within parent view @param[in] theoffset offset from the corner;  values >= 1 define offset in pixels,  values < 1.0 define offset as a fraction of parent view @param[in] themargins subview margins in pixels //! example: to split parent view horizontally into 2 subview, define one subview with size=(0.5,1.0),offset=(0.0,0.0), and 2nd with size=(0.5,1.0),offset=(5.0,0.0);.

        """
        return _V3d.V3d_View_SetWindow(self, *args)

    def SetZSize(self, *args):
        r"""

        Parameters
        ----------
        SetZSize: float

        Return
        -------
        None

        Description
        -----------
        Defines the depth size of the view front plane will be set to size/2. back plane will be set to -size/2. any object located above the front plane or behind the back plane will be clipped . note than the xy size of the view is not modified .

        """
        return _V3d.V3d_View_SetZSize(self, *args)

    def SetZoom(self, *args):
        r"""

        Parameters
        ----------
        Coef: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Zooms the view by a factor relative to the initial value expressed by start = standard_true updates the view.

        """
        return _V3d.V3d_View_SetZoom(self, *args)

    def ShadingModel(self, *args):
        r"""
        Return
        -------
        Graphic3d_TypeOfShadingModel

        Description
        -----------
        Returns the current shading model; graphic3d_typeofshadingmodel_phong by default.

        """
        return _V3d.V3d_View_ShadingModel(self, *args)

    def Size(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        Width: float
        Height: float

        Description
        -----------
        Returns the height and width of the view.

        """
        return _V3d.V3d_View_Size(self, *args)

    def StartRotation(self, *args):
        r"""

        Parameters
        ----------
        X: int
        Y: int
        zRotationThreshold: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Begin the rotation of the view around the screen axis according to the mouse position <x,y>. warning: enable rotation around the z screen axis when <zrotationthreshold> factor is > 0 soon the distance from the start point and the center of the view is > (medium viewsize * <zrotationthreshold> ). generally a value of 0.4 is usable to rotate around xy screen axis inside the circular threshold area and to rotate around z screen axis outside this area.

        """
        return _V3d.V3d_View_StartRotation(self, *args)

    def StartZoomAtPoint(self, *args):
        r"""

        Parameters
        ----------
        theXp: int
        theYp: int

        Return
        -------
        None

        Description
        -----------
        Defines starting point for zoomatpoint view operation. @param thexp [in] the x mouse coordinate, in pixels. @param theyp [in] the y mouse coordinate, in pixels.

        """
        return _V3d.V3d_View_StartZoomAtPoint(self, *args)

    def StatisticInformation(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns string with statistic performance info.

        Parameters
        ----------
        theDict: TColStd_IndexedDataMapOfStringString

        Return
        -------
        None

        Description
        -----------
        Fills in the dictionary with statistic performance info.

        """
        return _V3d.V3d_View_StatisticInformation(self, *args)

    def Subviews(self, *args):
        r"""
        Return
        -------
        NCollection_Sequence<opencascade::handle<V3d_View>>

        Description
        -----------
        Return subview list.

        """
        return _V3d.V3d_View_Subviews(self, *args)

    def TextureEnv(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_TextureEnv>

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_View_TextureEnv(self, *args)

    def ToPixMap(self, *args):
        r"""

        Parameters
        ----------
        theImage: Image_PixMap
        theParams: V3d_ImageDumpOptions

        Return
        -------
        bool

        Description
        -----------
        Dumps the full contents of the view to a pixmap with specified parameters. internally this method calls redraw() with an offscreen render buffer of requested target size (thewidth x theheight), so that there is no need resizing a window control for making a dump of different size.

        Parameters
        ----------
        theImage: Image_PixMap
        theWidth: int
        theHeight: int
        theBufferType: Graphic3d_BufferType (optional, default to Graphic3d_BT_RGB)
        theToAdjustAspect: bool (optional, default to Standard_True)
        theStereoOptions: V3d_StereoDumpOptions (optional, default to V3d_SDO_MONO)

        Return
        -------
        bool

        Description
        -----------
        Dumps the full contents of the view to a pixmap. internally this method calls redraw() with an offscreen render buffer of requested target size (thewidth x theheight), so that there is no need resizing a window control for making a dump of different size. @param theimage target image, will be re-allocated to match thewidth x theheight @param thewidth target image width @param theheight target image height @param thebuffertype type of the view buffer to dump (color / depth) @param thetoadjustaspect when true, active view aspect ratio will be overridden by (thewidth / theheight) @param thestereooptions how to dump stereographic camera.

        """
        return _V3d.V3d_View_ToPixMap(self, *args)

    def Translate(self, *args):
        r"""

        Parameters
        ----------
        Dx: float
        Dy: float
        Dz: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Movement of the ye and the view point parallel to the frame of reference of the screen a distance relative to the initial position expressed by start = standard_true.

        Parameters
        ----------
        Axe: V3d_TypeOfAxe
        Length: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Movement of the eye and the view point parallel to one of the axes of the fame of reference of the view a distance relative to the initial position expressed by start = standard_true.

        Parameters
        ----------
        Length: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Movement of the eye and view point parallel to the current axis a distance relative to the initial position expressed by start = standard_true.

        """
        return _V3d.V3d_View_Translate(self, *args)

    def TriedronDisplay(self, *args):
        r"""

        Parameters
        ----------
        thePosition: Aspect_TypeOfTriedronPosition (optional, default to Aspect_TOTP_CENTER)
        theColor: Quantity_Color (optional, default to Quantity_NOC_WHITE)
        theScale: float (optional, default to 0.02)
        theMode: V3d_TypeOfVisualization (optional, default to V3d_WIREFRAME)

        Return
        -------
        None

        Description
        -----------
        Display of the triedron. initialize position, color and length of triedron axes. the scale is a percent of the window width.

        """
        return _V3d.V3d_View_TriedronDisplay(self, *args)

    def TriedronErase(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Erases the triedron.

        """
        return _V3d.V3d_View_TriedronErase(self, *args)

    def Trihedron(self, *args):
        r"""

        Parameters
        ----------
        theToCreate: bool (optional, default to true)

        Return
        -------
        opencascade::handle<V3d_Trihedron>

        Description
        -----------
        Returns trihedron object.

        """
        return _V3d.V3d_View_Trihedron(self, *args)

    def Turn(self, *args):
        r"""

        Parameters
        ----------
        Ax: float
        Ay: float
        Az: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Rotation of the view point around the frame of reference of the screen for which the origin is the eye of the projection with a relative angular value in radians with respect to the initial position expressed by start = standard_true.

        Parameters
        ----------
        Axe: V3d_TypeOfAxe
        Angle: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Rotation of the view point around one of the axes of the frame of reference of the view for which the origin is the eye of the projection with an angular value in radians relative to the initial position expressed by start = standard_true.

        Parameters
        ----------
        Angle: float
        Start: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Rotation of the view point around the current axis an angular value in radians relative to the initial position expressed by start = standard_true.

        """
        return _V3d.V3d_View_Turn(self, *args)

    def Twist(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns in radians the orientation of the view around the visual axis measured from the y axis of the screen.

        """
        return _V3d.V3d_View_Twist(self, *args)

    def Type(self, *args):
        r"""
        Return
        -------
        V3d_TypeOfView

        Description
        -----------
        Returns the type of the view.

        """
        return _V3d.V3d_View_Type(self, *args)

    def Up(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        Vx: float
        Vy: float
        Vz: float

        Description
        -----------
        Returns the vector giving the position of the high point.

        """
        return _V3d.V3d_View_Up(self, *args)

    def Update(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Deprecated, redraw() should be used instead.

        """
        return _V3d.V3d_View_Update(self, *args)

    def UpdateLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Updates the lights of the view.

        """
        return _V3d.V3d_View_UpdateLights(self, *args)

    def View(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_CView>

        Description
        -----------
        Returns the associated graphic3d view.

        """
        return _V3d.V3d_View_View(self, *args)

    def Viewer(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_Viewer>

        Description
        -----------
        Returns the viewer in which the view has been created.

        """
        return _V3d.V3d_View_Viewer(self, *args)

    def Visualization(self, *args):
        r"""
        Return
        -------
        V3d_TypeOfVisualization

        Description
        -----------
        Returns the current visualisation mode.

        """
        return _V3d.V3d_View_Visualization(self, *args)

    def Window(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Aspect_Window>

        Description
        -----------
        Returns the aspect window associated with the view.

        """
        return _V3d.V3d_View_Window(self, *args)

    def WindowFit(self, *args):
        r"""

        Parameters
        ----------
        theMinXp: int
        theMinYp: int
        theMaxXp: int
        theMaxYp: int

        Return
        -------
        None

        Description
        -----------
        Centers the defined pixel window so that it occupies the maximum space while respecting the initial height/width ratio. note than the original z size of the view is not modified. @param theminxp [in] pixel coordinates of minimal corner on x screen axis. @param theminyp [in] pixel coordinates of minimal corner on y screen axis. @param themaxxp [in] pixel coordinates of maximal corner on x screen axis. @param themaxyp [in] pixel coordinates of maximal corner on y screen axis.

        """
        return _V3d.V3d_View_WindowFit(self, *args)

    def WindowFitAll(self, *args):
        r"""

        Parameters
        ----------
        Xmin: int
        Ymin: int
        Xmax: int
        Ymax: int

        Return
        -------
        None

        Description
        -----------
        Idem than windowfit.

        """
        return _V3d.V3d_View_WindowFitAll(self, *args)

    def ZBufferTriedronSetup(self, *args):
        r"""

        Parameters
        ----------
        theXColor: Quantity_Color (optional, default to Quantity_NOC_RED)
        theYColor: Quantity_Color (optional, default to Quantity_NOC_GREEN)
        theZColor: Quantity_Color (optional, default to Quantity_NOC_BLUE1)
        theSizeRatio: float (optional, default to 0.8)
        theAxisDiametr: float (optional, default to 0.05)
        theNbFacettes: int (optional, default to 12)

        Return
        -------
        None

        Description
        -----------
        Customization of the zbuffer triedron. xcolor,ycolor,zcolor - colors of axis sizeratio - ratio of decreasing of the trihedron size when its physical position comes out of the view axisdiametr - diameter relatively to axis length nbfacettes - number of facets of cylinders and cones.

        """
        return _V3d.V3d_View_ZBufferTriedronSetup(self, *args)

    def ZFitAll(self, *args):
        r"""

        Parameters
        ----------
        theScaleFactor: float (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        Change z-min and z-max planes of projection volume to match the displayed objects.

        """
        return _V3d.V3d_View_ZFitAll(self, *args)

    def ZSize(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the depth of the view .

        """
        return _V3d.V3d_View_ZSize(self, *args)

    def Zoom(self, *args):
        r"""

        Parameters
        ----------
        theXp1: int
        theYp1: int
        theXp2: int
        theYp2: int

        Return
        -------
        None

        Description
        -----------
        Zoom the view according to a zoom factor computed from the distance between the 2 mouse position. @param thexp1 [in] the x coordinate of first mouse position, in pixels. @param theyp1 [in] the y coordinate of first mouse position, in pixels. @param thexp2 [in] the x coordinate of second mouse position, in pixels. @param theyp2 [in] the y coordinate of second mouse position, in pixels.

        """
        return _V3d.V3d_View_Zoom(self, *args)

    def ZoomAtPoint(self, *args):
        r"""

        Parameters
        ----------
        theMouseStartX: int
        theMouseStartY: int
        theMouseEndX: int
        theMouseEndY: int

        Return
        -------
        None

        Description
        -----------
        Zooms the model at a pixel defined by the method startzoomatpoint().

        """
        return _V3d.V3d_View_ZoomAtPoint(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_View_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Print(self):
    	pass

    __swig_destroy__ = _V3d.delete_V3d_View

# Register V3d_View in _V3d:
_V3d.V3d_View_swigregister(V3d_View)
class V3d_Viewer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theDriver: Graphic3d_GraphicDriver

        Return
        -------
        None

        Description
        -----------
        Create a viewer with the given graphic driver and with default parameters: - view orientation: v3d_xposynegzpos - view background: quantity_noc_gray30 - shading model: v3d_gouraud.

        """
        _V3d.V3d_Viewer_swiginit(self, _V3d.new_V3d_Viewer(*args))

    def ActivateGrid(self, *args):
        r"""

        Parameters
        ----------
        aGridType: Aspect_GridType
        aGridDrawMode: Aspect_GridDrawMode

        Return
        -------
        None

        Description
        -----------
        Activates the grid in all views of <self>.

        """
        return _V3d.V3d_Viewer_ActivateGrid(self, *args)

    def ActiveLight(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_Light>

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_Viewer_ActiveLight(self, *args)

    def ActiveLightIterator(self, *args):
        r"""
        Return
        -------
        V3d_ListOfLightIterator

        Description
        -----------
        Return an iterator for defined lights.

        """
        return _V3d.V3d_Viewer_ActiveLightIterator(self, *args)

    def ActiveLights(self, *args):
        r"""
        Return
        -------
        V3d_ListOfLight

        Description
        -----------
        Return a list of active lights.

        """
        return _V3d.V3d_Viewer_ActiveLights(self, *args)

    def ActiveView(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_View>

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_Viewer_ActiveView(self, *args)

    def ActiveViewIterator(self, *args):
        r"""
        Return
        -------
        V3d_ListOfViewIterator

        Description
        -----------
        Return an iterator for active views.

        """
        return _V3d.V3d_Viewer_ActiveViewIterator(self, *args)

    def ActiveViews(self, *args):
        r"""
        Return
        -------
        V3d_ListOfView

        Description
        -----------
        Return a list of active views.

        """
        return _V3d.V3d_Viewer_ActiveViews(self, *args)

    def AddLight(self, *args):
        r"""

        Parameters
        ----------
        theLight: V3d_Light

        Return
        -------
        None

        Description
        -----------
        Adds light in sequence of lights.

        """
        return _V3d.V3d_Viewer_AddLight(self, *args)

    def AddZLayer(self, *args):
        r"""

        Parameters
        ----------
        theLayerId: int OutValue
        theSettings: Graphic3d_ZLayerSettings (optional, default to Graphic3d_ZLayerSettings())

        Return
        -------
        bool

        Description
        -----------
        Add a new top-level z layer to all managed views and get its id as <thelayerid> value. the z layers are controlled entirely by viewer, it is not possible to add a layer to a particular view. custom layers will be inserted before graphic3d_zlayerid_top (e.g. between graphic3d_zlayerid_default and before graphic3d_zlayerid_top). @param thelayerid [out] id of created layer @param thesettings [in] new layer settings return false if the layer can not be created.

        """
        return _V3d.V3d_Viewer_AddZLayer(self, *args)

    def CircularGridGraphicValues(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theRadius: float
        theOffSet: float

        Description
        -----------
        Returns the location and the size of the grid.

        """
        return _V3d.V3d_Viewer_CircularGridGraphicValues(self, *args)

    def CircularGridValues(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theXOrigin: float
        theYOrigin: float
        theRadiusStep: float
        theDivisionNumber: int
        theRotationAngle: float

        Description
        -----------
        Returns the definition of the circular grid.

        """
        return _V3d.V3d_Viewer_CircularGridValues(self, *args)

    def ComputedMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the computed mode can be used.

        """
        return _V3d.V3d_Viewer_ComputedMode(self, *args)

    def CreateView(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_View>

        Description
        -----------
        Creates a view in the viewer according to its default parameters.

        """
        return _V3d.V3d_Viewer_CreateView(self, *args)

    def DeactivateGrid(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Deactivates the grid in all views of <self>.

        """
        return _V3d.V3d_Viewer_DeactivateGrid(self, *args)

    def DefaultBackgroundColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Returns the default background colour object.

        """
        return _V3d.V3d_Viewer_DefaultBackgroundColor(self, *args)

    def DefaultBgGradientColors(self, *args):
        r"""

        Parameters
        ----------
        theColor1: Quantity_Color
        theColor2: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Returns the gradient background colour objects of the view.

        """
        return _V3d.V3d_Viewer_DefaultBgGradientColors(self, *args)

    def DefaultComputedMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if by default the computed mode must be used.

        """
        return _V3d.V3d_Viewer_DefaultComputedMode(self, *args)

    def DefaultRenderingParams(self, *args):
        r"""
        Return
        -------
        Graphic3d_RenderingParams

        Description
        -----------
        Return default rendering parameters. by default these parameters are set in a new v3d_view.

        """
        return _V3d.V3d_Viewer_DefaultRenderingParams(self, *args)

    def DefaultShadingModel(self, *args):
        r"""
        Return
        -------
        Graphic3d_TypeOfShadingModel

        Description
        -----------
        Returns the default type of shading; graphic3d_typeofshadingmodel_phong by default.

        """
        return _V3d.V3d_Viewer_DefaultShadingModel(self, *args)

    def DefaultTypeOfView(self, *args):
        r"""
        Return
        -------
        V3d_TypeOfView

        Description
        -----------
        Returns the default type of view (orthographic or perspective projection) to be returned by createview() method.

        """
        return _V3d.V3d_Viewer_DefaultTypeOfView(self, *args)

    def DefaultViewProj(self, *args):
        r"""
        Return
        -------
        V3d_TypeOfOrientation

        Description
        -----------
        Returns the default projection.

        """
        return _V3d.V3d_Viewer_DefaultViewProj(self, *args)

    def DefaultViewSize(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the default size of the view.

        """
        return _V3d.V3d_Viewer_DefaultViewSize(self, *args)

    def DefaultVisualization(self, *args):
        r"""
        Return
        -------
        V3d_TypeOfVisualization

        Description
        -----------
        Returns the default type of visualization.

        """
        return _V3d.V3d_Viewer_DefaultVisualization(self, *args)

    def DefinedLight(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_Light>

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_Viewer_DefinedLight(self, *args)

    def DefinedLightIterator(self, *args):
        r"""
        Return
        -------
        V3d_ListOfLightIterator

        Description
        -----------
        Return an iterator for defined lights.

        """
        return _V3d.V3d_Viewer_DefinedLightIterator(self, *args)

    def DefinedLights(self, *args):
        r"""
        Return
        -------
        V3d_ListOfLight

        Description
        -----------
        Return a list of defined lights.

        """
        return _V3d.V3d_Viewer_DefinedLights(self, *args)

    def DefinedView(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_View>

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_Viewer_DefinedView(self, *args)

    def DefinedViewIterator(self, *args):
        r"""
        Return
        -------
        V3d_ListOfViewIterator

        Description
        -----------
        Return an iterator for defined views.

        """
        return _V3d.V3d_Viewer_DefinedViewIterator(self, *args)

    def DefinedViews(self, *args):
        r"""
        Return
        -------
        V3d_ListOfView

        Description
        -----------
        Return a list of defined views.

        """
        return _V3d.V3d_Viewer_DefinedViews(self, *args)

    def DelLight(self, *args):
        r"""

        Parameters
        ----------
        theLight: V3d_Light

        Return
        -------
        None

        Description
        -----------
        Delete light in sequence of lights.

        """
        return _V3d.V3d_Viewer_DelLight(self, *args)

    def DisplayPrivilegedPlane(self, *args):
        r"""

        Parameters
        ----------
        theOnOff: bool
        theSize: float (optional, default to 1)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_Viewer_DisplayPrivilegedPlane(self, *args)

    def Driver(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_GraphicDriver>

        Description
        -----------
        Return graphic driver instance.

        """
        return _V3d.V3d_Viewer_Driver(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _V3d.V3d_Viewer_DumpJsonToString(self, depth)

    def Erase(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Erase all objects in all the views.

        """
        return _V3d.V3d_Viewer_Erase(self, *args)

    def GetAllZLayers(self, *args):
        r"""

        Parameters
        ----------
        theLayerSeq: TColStd_SequenceOfInteger

        Return
        -------
        None

        Description
        -----------
        Return all z layer ids in sequence ordered by overlay level from lowest layer to highest ( foreground ). the first layer id in sequence is the default layer that can't be removed.

        """
        return _V3d.V3d_Viewer_GetAllZLayers(self, *args)

    def GetGradientBackground(self, *args):
        r"""
        Return
        -------
        Aspect_GradientBackground

        Description
        -----------
        Returns the gradient background of the view.

        """
        return _V3d.V3d_Viewer_GetGradientBackground(self, *args)

    def Grid(self, *args):
        r"""

        Parameters
        ----------
        theToCreate: bool (optional, default to true)

        Return
        -------
        opencascade::handle<Aspect_Grid>

        Description
        -----------
        Returns the defined grid in <self>.

        Parameters
        ----------
        theGridType: Aspect_GridType
        theToCreate: bool (optional, default to true)

        Return
        -------
        opencascade::handle<Aspect_Grid>

        Description
        -----------
        Returns the defined grid in <self>.

        """
        return _V3d.V3d_Viewer_Grid(self, *args)

    def GridDrawMode(self, *args):
        r"""
        Return
        -------
        Aspect_GridDrawMode

        Description
        -----------
        Returns the current grid draw mode defined in <self>.

        """
        return _V3d.V3d_Viewer_GridDrawMode(self, *args)

    def GridEcho(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when grid echo must be displayed at hit point.

        """
        return _V3d.V3d_Viewer_GridEcho(self, *args)

    def GridType(self, *args):
        r"""
        Return
        -------
        Aspect_GridType

        Description
        -----------
        Returns the current grid type defined in <self>.

        """
        return _V3d.V3d_Viewer_GridType(self, *args)

    def HideGridEcho(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Temporarly hide grid echo.

        """
        return _V3d.V3d_Viewer_HideGridEcho(self, *args)

    def IfMoreViews(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if one view more can be defined in this viewer.

        """
        return _V3d.V3d_Viewer_IfMoreViews(self, *args)

    def InitActiveLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes an internal iteratator on the active lights.

        """
        return _V3d.V3d_Viewer_InitActiveLights(self, *args)

    def InitActiveViews(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes an internal iterator on the active views.

        """
        return _V3d.V3d_Viewer_InitActiveViews(self, *args)

    def InitDefinedLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes an internal iterattor on the defined lights.

        """
        return _V3d.V3d_Viewer_InitDefinedLights(self, *args)

    def InitDefinedViews(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes an internal iterator on the defined views.

        """
        return _V3d.V3d_Viewer_InitDefinedViews(self, *args)

    def InsertLayerAfter(self, *args):
        r"""

        Parameters
        ----------
        theNewLayerId: int OutValue
        theSettings: Graphic3d_ZLayerSettings
        theLayerBefore: int

        Return
        -------
        bool

        Description
        -----------
        Add a new top-level z layer to all managed views and get its id as <thelayerid> value. the z layers are controlled entirely by viewer, it is not possible to add a layer to a particular view. layer rendering order is defined by its position in list (altered by thelayerafter) and isimmediate() flag (all layers with isimmediate() flag are drawn afterwards); @param thenewlayerid [out] id of created layer; layer id is arbitrary and does not depend on layer position in the list @param thesettings [in] new layer settings @param thelayerbefore [in] id of layer to append new layer after return false if the layer can not be created.

        """
        return _V3d.V3d_Viewer_InsertLayerAfter(self, *args)

    def InsertLayerBefore(self, *args):
        r"""

        Parameters
        ----------
        theNewLayerId: int OutValue
        theSettings: Graphic3d_ZLayerSettings
        theLayerAfter: int

        Return
        -------
        bool

        Description
        -----------
        Add a new top-level z layer to all managed views and get its id as <thelayerid> value. the z layers are controlled entirely by viewer, it is not possible to add a layer to a particular view. layer rendering order is defined by its position in list (altered by thelayerafter) and isimmediate() flag (all layers with isimmediate() flag are drawn afterwards); @param thenewlayerid [out] id of created layer; layer id is arbitrary and does not depend on layer position in the list @param thesettings [in] new layer settings @param thelayerafter [in] id of layer to append new layer before return false if the layer can not be created.

        """
        return _V3d.V3d_Viewer_InsertLayerBefore(self, *args)

    def Invalidate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Invalidates viewer content but does not redraw it.

        """
        return _V3d.V3d_Viewer_Invalidate(self, *args)

    def IsActive(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns standard_true if a grid is activated in <self>.

        """
        return _V3d.V3d_Viewer_IsActive(self, *args)

    def IsGlobalLight(self, *args):
        r"""

        Parameters
        ----------
        TheLight: V3d_Light

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_Viewer_IsGlobalLight(self, *args)

    def IsGridActive(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns standard_true if a grid is activated in <self>.

        """
        return _V3d.V3d_Viewer_IsGridActive(self, *args)

    def LastActiveView(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is only one active view.

        """
        return _V3d.V3d_Viewer_LastActiveView(self, *args)

    def MoreActiveLights(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are more active light(s) to return.

        """
        return _V3d.V3d_Viewer_MoreActiveLights(self, *args)

    def MoreActiveViews(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are more active view(s) to return.

        """
        return _V3d.V3d_Viewer_MoreActiveViews(self, *args)

    def MoreDefinedLights(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are more defined light(s) to return.

        """
        return _V3d.V3d_Viewer_MoreDefinedLights(self, *args)

    def MoreDefinedViews(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are more defined view(s) to return.

        """
        return _V3d.V3d_Viewer_MoreDefinedViews(self, *args)

    def NextActiveLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Go to the next active light (if there is not, activelight() will raise an exception).

        """
        return _V3d.V3d_Viewer_NextActiveLights(self, *args)

    def NextActiveViews(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Go to the next active view (if there is not, activeview will raise an exception).

        """
        return _V3d.V3d_Viewer_NextActiveViews(self, *args)

    def NextDefinedLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Go to the next defined light (if there is not, definedlight() will raise an exception).

        """
        return _V3d.V3d_Viewer_NextDefinedLights(self, *args)

    def NextDefinedViews(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Go to the next defined view (if there is not, definedview will raise an exception).

        """
        return _V3d.V3d_Viewer_NextDefinedViews(self, *args)

    def PrivilegedPlane(self, *args):
        r"""
        Return
        -------
        gp_Ax3

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_Viewer_PrivilegedPlane(self, *args)

    def RectangularGridGraphicValues(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theXSize: float
        theYSize: float
        theOffSet: float

        Description
        -----------
        Returns the location and the size of the grid.

        """
        return _V3d.V3d_Viewer_RectangularGridGraphicValues(self, *args)

    def RectangularGridValues(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theXOrigin: float
        theYOrigin: float
        theXStep: float
        theYStep: float
        theRotationAngle: float

        Description
        -----------
        Returns the definition of the rectangular grid.

        """
        return _V3d.V3d_Viewer_RectangularGridValues(self, *args)

    def Redraw(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Redraws all the views of the viewer even if no modification has taken place. must be called if all the views of the viewer are exposed, as for example in a global deiconification.

        """
        return _V3d.V3d_Viewer_Redraw(self, *args)

    def RedrawImmediate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Updates layer of immediate presentations.

        """
        return _V3d.V3d_Viewer_RedrawImmediate(self, *args)

    def Remove(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Suppresses the viewer.

        """
        return _V3d.V3d_Viewer_Remove(self, *args)

    def RemoveZLayer(self, *args):
        r"""

        Parameters
        ----------
        theLayerId: int

        Return
        -------
        bool

        Description
        -----------
        Remove z layer with id <thelayerid>. method returns standard_false if the layer can not be removed or doesn't exists. by default, there are always default bottom-level layer that can't be removed.

        """
        return _V3d.V3d_Viewer_RemoveZLayer(self, *args)

    def SetCircularGridGraphicValues(self, *args):
        r"""

        Parameters
        ----------
        Radius: float
        OffSet: float

        Return
        -------
        None

        Description
        -----------
        Sets the location and the size of the grid. <xsize> defines the width of the grid. <ysize> defines the height of the grid. <offset> defines the displacement along the plane normal.

        """
        return _V3d.V3d_Viewer_SetCircularGridGraphicValues(self, *args)

    def SetCircularGridValues(self, *args):
        r"""

        Parameters
        ----------
        XOrigin: float
        YOrigin: float
        RadiusStep: float
        DivisionNumber: int
        RotationAngle: float

        Return
        -------
        None

        Description
        -----------
        Sets the definition of the circular grid. <xorigin>, <yorigin> defines the origin of the grid. <radiusstep> defines the interval between 2 circles. <divisionnumber> defines the section number of one half circle. <rotationangle> defines the rotation angle of the grid.

        """
        return _V3d.V3d_Viewer_SetCircularGridValues(self, *args)

    def SetComputedMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: bool

        Return
        -------
        None

        Description
        -----------
        Set if the computed mode can be used.

        """
        return _V3d.V3d_Viewer_SetComputedMode(self, *args)

    def SetDefaultBackgroundColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Defines the default background colour of views attached to the viewer by supplying the color object.

        """
        return _V3d.V3d_Viewer_SetDefaultBackgroundColor(self, *args)

    def SetDefaultBgGradientColors(self, *args):
        r"""

        Parameters
        ----------
        theColor1: Quantity_Color
        theColor2: Quantity_Color
        theFillStyle: Aspect_GradientFillMethod (optional, default to Aspect_GradientFillMethod_Horizontal)

        Return
        -------
        None

        Description
        -----------
        Defines the default gradient background colours of views attached to the viewer by supplying the colour objects.

        """
        return _V3d.V3d_Viewer_SetDefaultBgGradientColors(self, *args)

    def SetDefaultComputedMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: bool

        Return
        -------
        None

        Description
        -----------
        Set if by default the computed mode must be used.

        """
        return _V3d.V3d_Viewer_SetDefaultComputedMode(self, *args)

    def SetDefaultLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Defines default lights: positional-light 0.3 0. 0. directional-light v3d_xnegyposzpos directional-light v3d_xnegyneg ambient-light.

        """
        return _V3d.V3d_Viewer_SetDefaultLights(self, *args)

    def SetDefaultRenderingParams(self, *args):
        r"""

        Parameters
        ----------
        theParams: Graphic3d_RenderingParams

        Return
        -------
        None

        Description
        -----------
        Set default rendering parameters.

        """
        return _V3d.V3d_Viewer_SetDefaultRenderingParams(self, *args)

    def SetDefaultShadingModel(self, *args):
        r"""

        Parameters
        ----------
        theType: Graphic3d_TypeOfShadingModel

        Return
        -------
        None

        Description
        -----------
        Gives the default type of shading.

        """
        return _V3d.V3d_Viewer_SetDefaultShadingModel(self, *args)

    def SetDefaultTypeOfView(self, *args):
        r"""

        Parameters
        ----------
        theType: V3d_TypeOfView

        Return
        -------
        None

        Description
        -----------
        Set the default type of view (orthographic or perspective projection) to be returned by createview() method.

        """
        return _V3d.V3d_Viewer_SetDefaultTypeOfView(self, *args)

    def SetDefaultViewProj(self, *args):
        r"""

        Parameters
        ----------
        theOrientation: V3d_TypeOfOrientation

        Return
        -------
        None

        Description
        -----------
        Sets the default projection for creating views in the viewer.

        """
        return _V3d.V3d_Viewer_SetDefaultViewProj(self, *args)

    def SetDefaultViewSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: float

        Return
        -------
        None

        Description
        -----------
        Gives a default size for the creation of views of the viewer.

        """
        return _V3d.V3d_Viewer_SetDefaultViewSize(self, *args)

    def SetDefaultVisualization(self, *args):
        r"""

        Parameters
        ----------
        theType: V3d_TypeOfVisualization

        Return
        -------
        None

        Description
        -----------
        Gives the default visualization mode.

        """
        return _V3d.V3d_Viewer_SetDefaultVisualization(self, *args)

    def SetGridEcho(self, *args):
        r"""

        Parameters
        ----------
        showGrid: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Show/don't show grid echo to the hit point. if true,the grid echo will be shown at converttogrid() time.

        Parameters
        ----------
        aMarker: Graphic3d_AspectMarker3d

        Return
        -------
        None

        Description
        -----------
        Show grid echo <amarker> to the hit point. warning: when the grid echo marker is not set, a default marker is build with the attributes: marker type: aspect_tom_star marker color: quantity_noc_gray90 marker size: 3.0.

        """
        return _V3d.V3d_Viewer_SetGridEcho(self, *args)

    def SetLightOff(self, *args):
        r"""

        Parameters
        ----------
        theLight: V3d_Light

        Return
        -------
        None

        Description
        -----------
        Deactivates mylight in this viewer.
        Return
        -------
        None

        Description
        -----------
        Deactivate all the lights defined in this viewer.

        """
        return _V3d.V3d_Viewer_SetLightOff(self, *args)

    def SetLightOn(self, *args):
        r"""

        Parameters
        ----------
        theLight: V3d_Light

        Return
        -------
        None

        Description
        -----------
        Activates mylight in the viewer.
        Return
        -------
        None

        Description
        -----------
        Activates all the lights defined in this viewer.

        """
        return _V3d.V3d_Viewer_SetLightOn(self, *args)

    def SetPrivilegedPlane(self, *args):
        r"""

        Parameters
        ----------
        thePlane: gp_Ax3

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _V3d.V3d_Viewer_SetPrivilegedPlane(self, *args)

    def SetRectangularGridGraphicValues(self, *args):
        r"""

        Parameters
        ----------
        XSize: float
        YSize: float
        OffSet: float

        Return
        -------
        None

        Description
        -----------
        Sets the location and the size of the grid. <xsize> defines the width of the grid. <ysize> defines the height of the grid. <offset> defines the displacement along the plane normal.

        """
        return _V3d.V3d_Viewer_SetRectangularGridGraphicValues(self, *args)

    def SetRectangularGridValues(self, *args):
        r"""

        Parameters
        ----------
        XOrigin: float
        YOrigin: float
        XStep: float
        YStep: float
        RotationAngle: float

        Return
        -------
        None

        Description
        -----------
        Sets the definition of the rectangular grid. <xorigin>, <yorigin> defines the origin of the grid. <xstep> defines the interval between 2 vertical lines. <ystep> defines the interval between 2 horizontal lines. <rotationangle> defines the rotation angle of the grid.

        """
        return _V3d.V3d_Viewer_SetRectangularGridValues(self, *args)

    def SetViewOff(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Deactivates all the views of a viewer attached to a window.

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Deactivates a particular view in the viewer. must be call if the window attached to the view has been iconified .

        """
        return _V3d.V3d_Viewer_SetViewOff(self, *args)

    def SetViewOn(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Activates all of the views of a viewer attached to a window.

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Activates a particular view in the viewer. must be call if the window attached to the view has been deiconified.

        """
        return _V3d.V3d_Viewer_SetViewOn(self, *args)

    def SetZLayerSettings(self, *args):
        r"""

        Parameters
        ----------
        theLayerId: int
        theSettings: Graphic3d_ZLayerSettings

        Return
        -------
        None

        Description
        -----------
        Sets the settings for a single z layer.

        """
        return _V3d.V3d_Viewer_SetZLayerSettings(self, *args)

    def ShowGridEcho(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        thePoint: Graphic3d_Vertex

        Return
        -------
        None

        Description
        -----------
        Display grid echo at requested point in the view.

        """
        return _V3d.V3d_Viewer_ShowGridEcho(self, *args)

    def StructureManager(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_StructureManager>

        Description
        -----------
        Returns the structure manager associated to this viewer.

        """
        return _V3d.V3d_Viewer_StructureManager(self, *args)

    def UnHighlight(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Unhighlight all objects in all the views.

        """
        return _V3d.V3d_Viewer_UnHighlight(self, *args)

    def Update(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Deprecated, redraw() should be used instead.

        """
        return _V3d.V3d_Viewer_Update(self, *args)

    def UpdateLights(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Updates the lights of all the views of a viewer.

        """
        return _V3d.V3d_Viewer_UpdateLights(self, *args)

    def ZLayerSettings(self, *args):
        r"""

        Parameters
        ----------
        theLayerId: int

        Return
        -------
        Graphic3d_ZLayerSettings

        Description
        -----------
        Returns the settings of a single z layer.

        """
        return _V3d.V3d_Viewer_ZLayerSettings(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_Viewer_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Print(self):
    	pass

    __swig_destroy__ = _V3d.delete_V3d_Viewer

# Register V3d_Viewer in _V3d:
_V3d.V3d_Viewer_swigregister(V3d_Viewer)
class V3d_DirectionalLight(V3d_PositionLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theDirection: V3d_TypeOfOrientation (optional, default to V3d_XposYposZpos)
        theColor: Quantity_Color (optional, default to Quantity_NOC_WHITE)
        theIsHeadlight: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Creates a directional light source in the viewer.

        Parameters
        ----------
        theDirection: gp_Dir
        theColor: Quantity_Color (optional, default to Quantity_NOC_WHITE)
        theIsHeadlight: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Creates a directional light source in the viewer.

        """
        _V3d.V3d_DirectionalLight_swiginit(self, _V3d.new_V3d_DirectionalLight(*args))

    def SetDirection(self, *args):
        r"""

        Parameters
        ----------
        theDirection: V3d_TypeOfOrientation

        Return
        -------
        None

        Description
        -----------
        Defines the direction of the light source by a predefined orientation.

        """
        return _V3d.V3d_DirectionalLight_SetDirection(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_DirectionalLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_DirectionalLight

# Register V3d_DirectionalLight in _V3d:
_V3d.V3d_DirectionalLight_swigregister(V3d_DirectionalLight)
class V3d_PositionalLight(V3d_PositionLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        thePos: gp_Pnt
        theColor: Quantity_Color (optional, default to Quantity_NOC_WHITE)

        Return
        -------
        None

        Description
        -----------
        Creates an isolated light source in the viewer with default attenuation factors (1.0, 0.0).

        """
        _V3d.V3d_PositionalLight_swiginit(self, _V3d.new_V3d_PositionalLight(*args))


    @staticmethod
    def DownCast(t):
      return Handle_V3d_PositionalLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_PositionalLight

# Register V3d_PositionalLight in _V3d:
_V3d.V3d_PositionalLight_swigregister(V3d_PositionalLight)
class V3d_SpotLight(V3d_PositionLight):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        thePos: gp_Pnt
        theDirection: V3d_TypeOfOrientation (optional, default to V3d_XnegYnegZpos)
        theColor: Quantity_Color (optional, default to Quantity_NOC_WHITE)

        Return
        -------
        None

        Description
        -----------
        Creates a light source of the spot type in the viewer with default attenuation factors (1.0, 0.0), concentration factor 1.0 and spot angle 30 degrees.

        Parameters
        ----------
        thePos: gp_Pnt
        theDirection: gp_Dir
        theColor: Quantity_Color (optional, default to Quantity_NOC_WHITE)

        Return
        -------
        None

        Description
        -----------
        Creates a light source of the spot type in the viewer with default attenuation factors (1.0, 0.0), concentration factor 1.0 and spot angle 30 degrees.

        """
        _V3d.V3d_SpotLight_swiginit(self, _V3d.new_V3d_SpotLight(*args))

    def SetDirection(self, *args):
        r"""

        Parameters
        ----------
        theOrientation: V3d_TypeOfOrientation

        Return
        -------
        None

        Description
        -----------
        Defines the direction of the light source according to a predefined directional vector.

        """
        return _V3d.V3d_SpotLight_SetDirection(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_V3d_SpotLight_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _V3d.delete_V3d_SpotLight

# Register V3d_SpotLight in _V3d:
_V3d.V3d_SpotLight_swigregister(V3d_SpotLight)

V3d_Light=OCC.Core.Graphic3d.Graphic3d_CLight
V3d_TypeOfBackfacingModel=OCC.Core.Graphic3d.Graphic3d_TypeOfBackfacingModel
V3d_TypeOfLight=OCC.Core.Graphic3d.Graphic3d_TypeOfLightSource
V3d_TypeOfShadingModel=OCC.Core.Graphic3d.Graphic3d_TypeOfShadingModel


@deprecated
def v3d_ArrowOfRadius(*args):
	return v3d.ArrowOfRadius(*args)

@deprecated
def v3d_CircleInPlane(*args):
	return v3d.CircleInPlane(*args)

@deprecated
def v3d_GetProjAxis(*args):
	return v3d.GetProjAxis(*args)

@deprecated
def v3d_SwitchViewsinWindow(*args):
	return v3d.SwitchViewsinWindow(*args)

@deprecated
def v3d_TypeOfOrientationFromString(*args):
	return v3d.TypeOfOrientationFromString(*args)

@deprecated
def v3d_TypeOfOrientationFromString(*args):
	return v3d.TypeOfOrientationFromString(*args)

@deprecated
def v3d_TypeOfOrientationToString(*args):
	return v3d.TypeOfOrientationToString(*args)



