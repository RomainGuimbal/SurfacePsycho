# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
STEPEdit module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepedit.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_STEPEdit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_STEPEdit')
    _STEPEdit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_STEPEdit', [dirname(__file__)])
        except ImportError:
            import _STEPEdit
            return _STEPEdit
        try:
            _mod = imp.load_module('_STEPEdit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _STEPEdit = swig_import_helper()
    del swig_import_helper
else:
    import _STEPEdit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STEPEdit.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _STEPEdit.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _STEPEdit.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _STEPEdit.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _STEPEdit.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _STEPEdit.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _STEPEdit.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _STEPEdit.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _STEPEdit.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _STEPEdit.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _STEPEdit.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _STEPEdit.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _STEPEdit.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _STEPEdit.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _STEPEdit.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _STEPEdit.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _STEPEdit.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _STEPEdit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _STEPEdit.process_exception(error, method_name, class_name)
process_exception = _STEPEdit.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.IFSelect

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_STEPEdit_EditContext_Create() -> "opencascade::handle< STEPEdit_EditContext >":
    return _STEPEdit.Handle_STEPEdit_EditContext_Create()
Handle_STEPEdit_EditContext_Create = _STEPEdit.Handle_STEPEdit_EditContext_Create

def Handle_STEPEdit_EditContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPEdit_EditContext >":
    return _STEPEdit.Handle_STEPEdit_EditContext_DownCast(t)
Handle_STEPEdit_EditContext_DownCast = _STEPEdit.Handle_STEPEdit_EditContext_DownCast

def Handle_STEPEdit_EditContext_IsNull(t: 'opencascade::handle< STEPEdit_EditContext > const &') -> "bool":
    return _STEPEdit.Handle_STEPEdit_EditContext_IsNull(t)
Handle_STEPEdit_EditContext_IsNull = _STEPEdit.Handle_STEPEdit_EditContext_IsNull

def Handle_STEPEdit_EditSDR_Create() -> "opencascade::handle< STEPEdit_EditSDR >":
    return _STEPEdit.Handle_STEPEdit_EditSDR_Create()
Handle_STEPEdit_EditSDR_Create = _STEPEdit.Handle_STEPEdit_EditSDR_Create

def Handle_STEPEdit_EditSDR_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< STEPEdit_EditSDR >":
    return _STEPEdit.Handle_STEPEdit_EditSDR_DownCast(t)
Handle_STEPEdit_EditSDR_DownCast = _STEPEdit.Handle_STEPEdit_EditSDR_DownCast

def Handle_STEPEdit_EditSDR_IsNull(t: 'opencascade::handle< STEPEdit_EditSDR > const &') -> "bool":
    return _STEPEdit.Handle_STEPEdit_EditSDR_IsNull(t)
Handle_STEPEdit_EditSDR_IsNull = _STEPEdit.Handle_STEPEdit_EditSDR_IsNull
class stepedit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stepedit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stepedit, name)
    __repr__ = _swig_repr

    def NewModel(*args) -> "opencascade::handle< StepData_StepModel >":
        """
        Returns a new empty stepmodel fit for step i.e. with its header determined from protocol.

        Returns
        -------
        opencascade::handle<StepData_StepModel>

        """
        return _STEPEdit.stepedit_NewModel(*args)

    NewModel = staticmethod(NewModel)

    def NewSelectPlacedItem(*args) -> "opencascade::handle< IFSelect_SelectSignature >":
        """
        Creates a selection for placed items, i.e. mappeditem or contextdependentshaperepresentation, which itself refers to a representationrelationship with possible subtypes (shape... and/or ...withtransformation) by default in the whole stepmodel.

        Returns
        -------
        opencascade::handle<IFSelect_SelectSignature>

        """
        return _STEPEdit.stepedit_NewSelectPlacedItem(*args)

    NewSelectPlacedItem = staticmethod(NewSelectPlacedItem)

    def NewSelectSDR(*args) -> "opencascade::handle< IFSelect_SelectSignature >":
        """
        Creates a selection for shapedefinitionrepresentation by default searches among root entities.

        Returns
        -------
        opencascade::handle<IFSelect_SelectSignature>

        """
        return _STEPEdit.stepedit_NewSelectSDR(*args)

    NewSelectSDR = staticmethod(NewSelectSDR)

    def NewSelectShapeRepr(*args) -> "opencascade::handle< IFSelect_SelectSignature >":
        """
        Creates a selection for shaperepresentation and its sub-types, plus contextdependentshaperepresentation (which is not a sub-type of shaperepresentation) by default in the whole stepmodel.

        Returns
        -------
        opencascade::handle<IFSelect_SelectSignature>

        """
        return _STEPEdit.stepedit_NewSelectShapeRepr(*args)

    NewSelectShapeRepr = staticmethod(NewSelectShapeRepr)

    def Protocol(*args) -> "opencascade::handle< Interface_Protocol >":
        """
        Returns a protocol fit for step (creates the first time).

        Returns
        -------
        opencascade::handle<Interface_Protocol>

        """
        return _STEPEdit.stepedit_Protocol(*args)

    Protocol = staticmethod(Protocol)

    def SignType(*args) -> "opencascade::handle< IFSelect_Signature >":
        """
        Returns a signtype fit for step (creates the first time).

        Returns
        -------
        opencascade::handle<IFSelect_Signature>

        """
        return _STEPEdit.stepedit_SignType(*args)

    SignType = staticmethod(SignType)

    __repr__ = _dumps_object


    def __init__(self):
        this = _STEPEdit.new_stepedit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _STEPEdit.delete_stepedit
    __del__ = lambda self: None
stepedit_swigregister = _STEPEdit.stepedit_swigregister
stepedit_swigregister(stepedit)

def stepedit_NewModel(*args) -> "opencascade::handle< StepData_StepModel >":
    """
    Returns a new empty stepmodel fit for step i.e. with its header determined from protocol.

    Returns
    -------
    opencascade::handle<StepData_StepModel>

    """
    return _STEPEdit.stepedit_NewModel(*args)

def stepedit_NewSelectPlacedItem(*args) -> "opencascade::handle< IFSelect_SelectSignature >":
    """
    Creates a selection for placed items, i.e. mappeditem or contextdependentshaperepresentation, which itself refers to a representationrelationship with possible subtypes (shape... and/or ...withtransformation) by default in the whole stepmodel.

    Returns
    -------
    opencascade::handle<IFSelect_SelectSignature>

    """
    return _STEPEdit.stepedit_NewSelectPlacedItem(*args)

def stepedit_NewSelectSDR(*args) -> "opencascade::handle< IFSelect_SelectSignature >":
    """
    Creates a selection for shapedefinitionrepresentation by default searches among root entities.

    Returns
    -------
    opencascade::handle<IFSelect_SelectSignature>

    """
    return _STEPEdit.stepedit_NewSelectSDR(*args)

def stepedit_NewSelectShapeRepr(*args) -> "opencascade::handle< IFSelect_SelectSignature >":
    """
    Creates a selection for shaperepresentation and its sub-types, plus contextdependentshaperepresentation (which is not a sub-type of shaperepresentation) by default in the whole stepmodel.

    Returns
    -------
    opencascade::handle<IFSelect_SelectSignature>

    """
    return _STEPEdit.stepedit_NewSelectShapeRepr(*args)

def stepedit_Protocol(*args) -> "opencascade::handle< Interface_Protocol >":
    """
    Returns a protocol fit for step (creates the first time).

    Returns
    -------
    opencascade::handle<Interface_Protocol>

    """
    return _STEPEdit.stepedit_Protocol(*args)

def stepedit_SignType(*args) -> "opencascade::handle< IFSelect_Signature >":
    """
    Returns a signtype fit for step (creates the first time).

    Returns
    -------
    opencascade::handle<IFSelect_Signature>

    """
    return _STEPEdit.stepedit_SignType(*args)

class STEPEdit_EditContext(OCC.Core.IFSelect.IFSelect_Editor):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IFSelect.IFSelect_Editor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, STEPEdit_EditContext, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IFSelect.IFSelect_Editor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, STEPEdit_EditContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _STEPEdit.new_STEPEdit_EditContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_STEPEdit_EditContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPEdit.delete_STEPEdit_EditContext
    __del__ = lambda self: None
STEPEdit_EditContext_swigregister = _STEPEdit.STEPEdit_EditContext_swigregister
STEPEdit_EditContext_swigregister(STEPEdit_EditContext)

class STEPEdit_EditSDR(OCC.Core.IFSelect.IFSelect_Editor):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IFSelect.IFSelect_Editor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, STEPEdit_EditSDR, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IFSelect.IFSelect_Editor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, STEPEdit_EditSDR, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _STEPEdit.new_STEPEdit_EditSDR(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_STEPEdit_EditSDR_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _STEPEdit.delete_STEPEdit_EditSDR
    __del__ = lambda self: None
STEPEdit_EditSDR_swigregister = _STEPEdit.STEPEdit_EditSDR_swigregister
STEPEdit_EditSDR_swigregister(STEPEdit_EditSDR)



# This file is compatible with both classic and new-style classes.


