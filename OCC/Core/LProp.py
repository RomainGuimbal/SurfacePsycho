# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
LProp module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_lprop.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LProp
else:
    import _LProp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LProp.delete_SwigPyIterator

    def value(self):
        return _LProp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LProp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LProp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LProp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LProp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LProp.SwigPyIterator_copy(self)

    def next(self):
        return _LProp.SwigPyIterator_next(self)

    def __next__(self):
        return _LProp.SwigPyIterator___next__(self)

    def previous(self):
        return _LProp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LProp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LProp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LProp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LProp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LProp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LProp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LProp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LProp:
_LProp.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _LProp.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.GeomAbs

from enum import IntEnum
from OCC.Core.Exception import *

LProp_Inflection = _LProp.LProp_Inflection
LProp_MinCur = _LProp.LProp_MinCur
LProp_MaxCur = _LProp.LProp_MaxCur
LProp_Undecided = _LProp.LProp_Undecided
LProp_Undefined = _LProp.LProp_Undefined
LProp_Defined = _LProp.LProp_Defined
LProp_Computed = _LProp.LProp_Computed


class LProp_CIType(IntEnum):
	LProp_Inflection = 0
	LProp_MinCur = 1
	LProp_MaxCur = 2
LProp_Inflection = LProp_CIType.LProp_Inflection
LProp_MinCur = LProp_CIType.LProp_MinCur
LProp_MaxCur = LProp_CIType.LProp_MaxCur

class LProp_Status(IntEnum):
	LProp_Undecided = 0
	LProp_Undefined = 1
	LProp_Defined = 2
	LProp_Computed = 3
LProp_Undecided = LProp_Status.LProp_Undecided
LProp_Undefined = LProp_Status.LProp_Undefined
LProp_Defined = LProp_Status.LProp_Defined
LProp_Computed = LProp_Status.LProp_Computed

class LProp_SequenceOfCIType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _LProp.LProp_SequenceOfCIType_begin(self)

    def end(self):
        return _LProp.LProp_SequenceOfCIType_end(self)

    def cbegin(self):
        return _LProp.LProp_SequenceOfCIType_cbegin(self)

    def cend(self):
        return _LProp.LProp_SequenceOfCIType_cend(self)

    def __init__(self, *args):
        _LProp.LProp_SequenceOfCIType_swiginit(self, _LProp.new_LProp_SequenceOfCIType(*args))

    def Size(self):
        return _LProp.LProp_SequenceOfCIType_Size(self)

    def Length(self):
        return _LProp.LProp_SequenceOfCIType_Length(self)

    def Lower(self):
        return _LProp.LProp_SequenceOfCIType_Lower(self)

    def Upper(self):
        return _LProp.LProp_SequenceOfCIType_Upper(self)

    def IsEmpty(self):
        return _LProp.LProp_SequenceOfCIType_IsEmpty(self)

    def Reverse(self):
        return _LProp.LProp_SequenceOfCIType_Reverse(self)

    def Exchange(self, I, J):
        return _LProp.LProp_SequenceOfCIType_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _LProp.LProp_SequenceOfCIType_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _LProp.LProp_SequenceOfCIType_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _LProp.LProp_SequenceOfCIType_Assign(self, theOther)

    def Set(self, theOther):
        return _LProp.LProp_SequenceOfCIType_Set(self, theOther)

    def Remove(self, *args):
        return _LProp.LProp_SequenceOfCIType_Remove(self, *args)

    def Append(self, *args):
        return _LProp.LProp_SequenceOfCIType_Append(self, *args)

    def Prepend(self, *args):
        return _LProp.LProp_SequenceOfCIType_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _LProp.LProp_SequenceOfCIType_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _LProp.LProp_SequenceOfCIType_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _LProp.LProp_SequenceOfCIType_Split(self, theIndex, theSeq)

    def First(self):
        return _LProp.LProp_SequenceOfCIType_First(self)

    def ChangeFirst(self):
        return _LProp.LProp_SequenceOfCIType_ChangeFirst(self)

    def Last(self):
        return _LProp.LProp_SequenceOfCIType_Last(self)

    def ChangeLast(self):
        return _LProp.LProp_SequenceOfCIType_ChangeLast(self)

    def Value(self, theIndex):
        return _LProp.LProp_SequenceOfCIType_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _LProp.LProp_SequenceOfCIType_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _LProp.LProp_SequenceOfCIType___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _LProp.LProp_SequenceOfCIType_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _LProp.delete_LProp_SequenceOfCIType

    def __len__(self):
        return self.Size()


# Register LProp_SequenceOfCIType in _LProp:
_LProp.LProp_SequenceOfCIType_swigregister(LProp_SequenceOfCIType)
class LProp_AnalyticCurInf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _LProp.LProp_AnalyticCurInf_swiginit(self, _LProp.new_LProp_AnalyticCurInf(*args))

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        T: GeomAbs_CurveType
        UFirst: float
        ULast: float
        Result: LProp_CurAndInf

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _LProp.LProp_AnalyticCurInf_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _LProp.delete_LProp_AnalyticCurInf

# Register LProp_AnalyticCurInf in _LProp:
_LProp.LProp_AnalyticCurInf_swigregister(LProp_AnalyticCurInf)
class LProp_CurAndInf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _LProp.LProp_CurAndInf_swiginit(self, _LProp.new_LProp_CurAndInf(*args))

    def AddExtCur(self, *args):
        r"""

        Parameters
        ----------
        Param: float
        IsMin: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _LProp.LProp_CurAndInf_AddExtCur(self, *args)

    def AddInflection(self, *args):
        r"""

        Parameters
        ----------
        Param: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _LProp.LProp_CurAndInf_AddInflection(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _LProp.LProp_CurAndInf_Clear(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _LProp.LProp_CurAndInf_IsEmpty(self, *args)

    def NbPoints(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of points. the points are stored to increasing parameter.

        """
        return _LProp.LProp_CurAndInf_NbPoints(self, *args)

    def Parameter(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        float

        Description
        -----------
        Returns the parameter of the nth point. raises if n not in the range [1,nbpoints()].

        """
        return _LProp.LProp_CurAndInf_Parameter(self, *args)

    def Type(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        LProp_CIType

        Description
        -----------
        Returns - mincur if the nth parameter corresponds to a minimum of the radius of curvature. - maxcur if the nth parameter corresponds to a maximum of the radius of curvature. - inflection if the parameter corresponds to a point of inflection. raises if n not in the range [1,nbpoints()].

        """
        return _LProp.LProp_CurAndInf_Type(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _LProp.delete_LProp_CurAndInf

# Register LProp_CurAndInf in _LProp:
_LProp.LProp_CurAndInf_swigregister(LProp_CurAndInf)



