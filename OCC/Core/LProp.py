# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
LProp module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_lprop.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_LProp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_LProp')
    _LProp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LProp', [dirname(__file__)])
        except ImportError:
            import _LProp
            return _LProp
        try:
            _mod = imp.load_module('_LProp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _LProp = swig_import_helper()
    del swig_import_helper
else:
    import _LProp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LProp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _LProp.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _LProp.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _LProp.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _LProp.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _LProp.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _LProp.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _LProp.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _LProp.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _LProp.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _LProp.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _LProp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _LProp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _LProp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _LProp.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _LProp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _LProp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _LProp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _LProp.process_exception(error, method_name, class_name)
process_exception = _LProp.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.GeomAbs

from enum import IntEnum
from OCC.Core.Exception import *

LProp_Undecided = _LProp.LProp_Undecided
LProp_Undefined = _LProp.LProp_Undefined
LProp_Defined = _LProp.LProp_Defined
LProp_Computed = _LProp.LProp_Computed
LProp_Inflection = _LProp.LProp_Inflection
LProp_MinCur = _LProp.LProp_MinCur
LProp_MaxCur = _LProp.LProp_MaxCur


class LProp_Status(IntEnum):
	LProp_Undecided = 0
	LProp_Undefined = 1
	LProp_Defined = 2
	LProp_Computed = 3
LProp_Undecided = LProp_Status.LProp_Undecided
LProp_Undefined = LProp_Status.LProp_Undefined
LProp_Defined = LProp_Status.LProp_Defined
LProp_Computed = LProp_Status.LProp_Computed

class LProp_CIType(IntEnum):
	LProp_Inflection = 0
	LProp_MinCur = 1
	LProp_MaxCur = 2
LProp_Inflection = LProp_CIType.LProp_Inflection
LProp_MinCur = LProp_CIType.LProp_MinCur
LProp_MaxCur = LProp_CIType.LProp_MaxCur

class LProp_SequenceOfCIType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LProp_SequenceOfCIType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LProp_SequenceOfCIType, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< enum LProp_CIType >::iterator":
        return _LProp.LProp_SequenceOfCIType_begin(self)

    def end(self) -> "NCollection_Sequence< enum LProp_CIType >::iterator":
        return _LProp.LProp_SequenceOfCIType_end(self)

    def cbegin(self) -> "NCollection_Sequence< enum LProp_CIType >::const_iterator":
        return _LProp.LProp_SequenceOfCIType_cbegin(self)

    def cend(self) -> "NCollection_Sequence< enum LProp_CIType >::const_iterator":
        return _LProp.LProp_SequenceOfCIType_cend(self)

    def __init__(self, *args):
        this = _LProp.new_LProp_SequenceOfCIType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _LProp.LProp_SequenceOfCIType_Size(self)

    def Length(self) -> "Standard_Integer":
        return _LProp.LProp_SequenceOfCIType_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _LProp.LProp_SequenceOfCIType_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _LProp.LProp_SequenceOfCIType_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _LProp.LProp_SequenceOfCIType_IsEmpty(self)

    def Reverse(self) -> "void":
        return _LProp.LProp_SequenceOfCIType_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _LProp.LProp_SequenceOfCIType_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_LProp.LProp_SequenceOfCIType_delNode)
    else:
        delNode = _LProp.LProp_SequenceOfCIType_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _LProp.LProp_SequenceOfCIType_Clear(self, theAllocator)

    def Assign(self, theOther: 'LProp_SequenceOfCIType') -> "NCollection_Sequence< LProp_CIType > &":
        return _LProp.LProp_SequenceOfCIType_Assign(self, theOther)

    def Set(self, theOther: 'LProp_SequenceOfCIType') -> "NCollection_Sequence< LProp_CIType > &":
        return _LProp.LProp_SequenceOfCIType_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _LProp.LProp_SequenceOfCIType_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _LProp.LProp_SequenceOfCIType_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _LProp.LProp_SequenceOfCIType_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _LProp.LProp_SequenceOfCIType_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _LProp.LProp_SequenceOfCIType_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'LProp_SequenceOfCIType') -> "void":
        return _LProp.LProp_SequenceOfCIType_Split(self, theIndex, theSeq)

    def First(self) -> "LProp_CIType const &":
        return _LProp.LProp_SequenceOfCIType_First(self)

    def ChangeFirst(self) -> "LProp_CIType &":
        return _LProp.LProp_SequenceOfCIType_ChangeFirst(self)

    def Last(self) -> "LProp_CIType const &":
        return _LProp.LProp_SequenceOfCIType_Last(self)

    def ChangeLast(self) -> "LProp_CIType &":
        return _LProp.LProp_SequenceOfCIType_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "LProp_CIType const &":
        return _LProp.LProp_SequenceOfCIType_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "LProp_CIType &":
        return _LProp.LProp_SequenceOfCIType_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "LProp_CIType &":
        return _LProp.LProp_SequenceOfCIType___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'LProp_CIType const &') -> "void":
        return _LProp.LProp_SequenceOfCIType_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _LProp.delete_LProp_SequenceOfCIType
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

LProp_SequenceOfCIType_swigregister = _LProp.LProp_SequenceOfCIType_swigregister
LProp_SequenceOfCIType_swigregister(LProp_SequenceOfCIType)

def LProp_SequenceOfCIType_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _LProp.LProp_SequenceOfCIType_delNode(theNode, theAl)
LProp_SequenceOfCIType_delNode = _LProp.LProp_SequenceOfCIType_delNode

class LProp_AnalyticCurInf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LProp_AnalyticCurInf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LProp_AnalyticCurInf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _LProp.new_LProp_AnalyticCurInf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        T: GeomAbs_CurveType
        UFirst: float
        ULast: float
        Result: LProp_CurAndInf

        Returns
        -------
        None

        """
        return _LProp.LProp_AnalyticCurInf_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LProp.delete_LProp_AnalyticCurInf
    __del__ = lambda self: None
LProp_AnalyticCurInf_swigregister = _LProp.LProp_AnalyticCurInf_swigregister
LProp_AnalyticCurInf_swigregister(LProp_AnalyticCurInf)

class LProp_CurAndInf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LProp_CurAndInf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LProp_CurAndInf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _LProp.new_LProp_CurAndInf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddExtCur(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float
        IsMin: bool

        Returns
        -------
        None

        """
        return _LProp.LProp_CurAndInf_AddExtCur(self, *args)


    def AddInflection(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        """
        return _LProp.LProp_CurAndInf_AddInflection(self, *args)


    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _LProp.LProp_CurAndInf_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _LProp.LProp_CurAndInf_IsEmpty(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of points. the points are stored to increasing parameter.

        Returns
        -------
        int

        """
        return _LProp.LProp_CurAndInf_NbPoints(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        Returns the parameter of the nth point. raises if n not in the range [1,nbpoints()].

        Parameters
        ----------
        N: int

        Returns
        -------
        float

        """
        return _LProp.LProp_CurAndInf_Parameter(self, *args)


    def Type(self, *args) -> "LProp_CIType":
        """
        Returns - mincur if the nth parameter corresponds to a minimum of the radius of curvature. - maxcur if the nth parameter corresponds to a maximum of the radius of curvature. - inflection if the parameter corresponds to a point of inflection. raises if n not in the range [1,nbpoints()].

        Parameters
        ----------
        N: int

        Returns
        -------
        LProp_CIType

        """
        return _LProp.LProp_CurAndInf_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LProp.delete_LProp_CurAndInf
    __del__ = lambda self: None
LProp_CurAndInf_swigregister = _LProp.LProp_CurAndInf_swigregister
LProp_CurAndInf_swigregister(LProp_CurAndInf)



# This file is compatible with both classic and new-style classes.


