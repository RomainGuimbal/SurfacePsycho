# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
XBRepMesh module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_xbrepmesh.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _XBRepMesh
else:
    import _XBRepMesh

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XBRepMesh.delete_SwigPyIterator

    def value(self):
        return _XBRepMesh.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XBRepMesh.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XBRepMesh.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XBRepMesh.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XBRepMesh.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XBRepMesh.SwigPyIterator_copy(self)

    def next(self):
        return _XBRepMesh.SwigPyIterator_next(self)

    def __next__(self):
        return _XBRepMesh.SwigPyIterator___next__(self)

    def previous(self):
        return _XBRepMesh.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XBRepMesh.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XBRepMesh.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XBRepMesh.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XBRepMesh.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XBRepMesh.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XBRepMesh.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XBRepMesh.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _XBRepMesh:
_XBRepMesh.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _XBRepMesh.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRepMesh
import OCC.Core.IMeshTools
import OCC.Core.IMeshData
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.Poly
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TShort

from enum import IntEnum
from OCC.Core.Exception import *



class xbrepmesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Discret(*args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theDeflection: float
        theAngle: float
        theAlgo: BRepMesh_DiscretRoot *

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _XBRepMesh.xbrepmesh_Discret(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _XBRepMesh.xbrepmesh_swiginit(self, _XBRepMesh.new_xbrepmesh())
    __swig_destroy__ = _XBRepMesh.delete_xbrepmesh

# Register xbrepmesh in _XBRepMesh:
_XBRepMesh.xbrepmesh_swigregister(xbrepmesh)



@deprecated
def xbrepmesh_Discret(*args):
	return xbrepmesh.Discret(*args)



