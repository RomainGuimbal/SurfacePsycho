# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TDF module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tdf.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TDF')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TDF')
    _TDF = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDF', [dirname(__file__)])
        except ImportError:
            import _TDF
            return _TDF
        try:
            _mod = imp.load_module('_TDF', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TDF = swig_import_helper()
    del swig_import_helper
else:
    import _TDF
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDF.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TDF.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TDF.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TDF.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TDF.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TDF.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TDF.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TDF.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TDF.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TDF.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TDF.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TDF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TDF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TDF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TDF.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TDF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TDF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TDF.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TDF.process_exception(error, method_name, class_name)
process_exception = _TDF.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.TColStd

from enum import IntEnum
from OCC.Core.Exception import *

TDF_LabelNodeImportMsk = _TDF.TDF_LabelNodeImportMsk
TDF_LabelNodeAttModMsk = _TDF.TDF_LabelNodeAttModMsk
TDF_LabelNodeMayModMsk = _TDF.TDF_LabelNodeMayModMsk
TDF_LabelNodeFlagsMsk = _TDF.TDF_LabelNodeFlagsMsk



def Handle_TDF_Attribute_Create() -> "opencascade::handle< TDF_Attribute >":
    return _TDF.Handle_TDF_Attribute_Create()
Handle_TDF_Attribute_Create = _TDF.Handle_TDF_Attribute_Create

def Handle_TDF_Attribute_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_Attribute >":
    return _TDF.Handle_TDF_Attribute_DownCast(t)
Handle_TDF_Attribute_DownCast = _TDF.Handle_TDF_Attribute_DownCast

def Handle_TDF_Attribute_IsNull(t: 'opencascade::handle< TDF_Attribute > const &') -> "bool":
    return _TDF.Handle_TDF_Attribute_IsNull(t)
Handle_TDF_Attribute_IsNull = _TDF.Handle_TDF_Attribute_IsNull

def Handle_TDF_AttributeDelta_Create() -> "opencascade::handle< TDF_AttributeDelta >":
    return _TDF.Handle_TDF_AttributeDelta_Create()
Handle_TDF_AttributeDelta_Create = _TDF.Handle_TDF_AttributeDelta_Create

def Handle_TDF_AttributeDelta_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_AttributeDelta >":
    return _TDF.Handle_TDF_AttributeDelta_DownCast(t)
Handle_TDF_AttributeDelta_DownCast = _TDF.Handle_TDF_AttributeDelta_DownCast

def Handle_TDF_AttributeDelta_IsNull(t: 'opencascade::handle< TDF_AttributeDelta > const &') -> "bool":
    return _TDF.Handle_TDF_AttributeDelta_IsNull(t)
Handle_TDF_AttributeDelta_IsNull = _TDF.Handle_TDF_AttributeDelta_IsNull

def Handle_TDF_Data_Create() -> "opencascade::handle< TDF_Data >":
    return _TDF.Handle_TDF_Data_Create()
Handle_TDF_Data_Create = _TDF.Handle_TDF_Data_Create

def Handle_TDF_Data_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_Data >":
    return _TDF.Handle_TDF_Data_DownCast(t)
Handle_TDF_Data_DownCast = _TDF.Handle_TDF_Data_DownCast

def Handle_TDF_Data_IsNull(t: 'opencascade::handle< TDF_Data > const &') -> "bool":
    return _TDF.Handle_TDF_Data_IsNull(t)
Handle_TDF_Data_IsNull = _TDF.Handle_TDF_Data_IsNull

def Handle_TDF_DataSet_Create() -> "opencascade::handle< TDF_DataSet >":
    return _TDF.Handle_TDF_DataSet_Create()
Handle_TDF_DataSet_Create = _TDF.Handle_TDF_DataSet_Create

def Handle_TDF_DataSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_DataSet >":
    return _TDF.Handle_TDF_DataSet_DownCast(t)
Handle_TDF_DataSet_DownCast = _TDF.Handle_TDF_DataSet_DownCast

def Handle_TDF_DataSet_IsNull(t: 'opencascade::handle< TDF_DataSet > const &') -> "bool":
    return _TDF.Handle_TDF_DataSet_IsNull(t)
Handle_TDF_DataSet_IsNull = _TDF.Handle_TDF_DataSet_IsNull

def Handle_TDF_Delta_Create() -> "opencascade::handle< TDF_Delta >":
    return _TDF.Handle_TDF_Delta_Create()
Handle_TDF_Delta_Create = _TDF.Handle_TDF_Delta_Create

def Handle_TDF_Delta_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_Delta >":
    return _TDF.Handle_TDF_Delta_DownCast(t)
Handle_TDF_Delta_DownCast = _TDF.Handle_TDF_Delta_DownCast

def Handle_TDF_Delta_IsNull(t: 'opencascade::handle< TDF_Delta > const &') -> "bool":
    return _TDF.Handle_TDF_Delta_IsNull(t)
Handle_TDF_Delta_IsNull = _TDF.Handle_TDF_Delta_IsNull

def Handle_TDF_RelocationTable_Create() -> "opencascade::handle< TDF_RelocationTable >":
    return _TDF.Handle_TDF_RelocationTable_Create()
Handle_TDF_RelocationTable_Create = _TDF.Handle_TDF_RelocationTable_Create

def Handle_TDF_RelocationTable_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_RelocationTable >":
    return _TDF.Handle_TDF_RelocationTable_DownCast(t)
Handle_TDF_RelocationTable_DownCast = _TDF.Handle_TDF_RelocationTable_DownCast

def Handle_TDF_RelocationTable_IsNull(t: 'opencascade::handle< TDF_RelocationTable > const &') -> "bool":
    return _TDF.Handle_TDF_RelocationTable_IsNull(t)
Handle_TDF_RelocationTable_IsNull = _TDF.Handle_TDF_RelocationTable_IsNull

def Handle_TDF_DeltaOnAddition_Create() -> "opencascade::handle< TDF_DeltaOnAddition >":
    return _TDF.Handle_TDF_DeltaOnAddition_Create()
Handle_TDF_DeltaOnAddition_Create = _TDF.Handle_TDF_DeltaOnAddition_Create

def Handle_TDF_DeltaOnAddition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_DeltaOnAddition >":
    return _TDF.Handle_TDF_DeltaOnAddition_DownCast(t)
Handle_TDF_DeltaOnAddition_DownCast = _TDF.Handle_TDF_DeltaOnAddition_DownCast

def Handle_TDF_DeltaOnAddition_IsNull(t: 'opencascade::handle< TDF_DeltaOnAddition > const &') -> "bool":
    return _TDF.Handle_TDF_DeltaOnAddition_IsNull(t)
Handle_TDF_DeltaOnAddition_IsNull = _TDF.Handle_TDF_DeltaOnAddition_IsNull

def Handle_TDF_DeltaOnForget_Create() -> "opencascade::handle< TDF_DeltaOnForget >":
    return _TDF.Handle_TDF_DeltaOnForget_Create()
Handle_TDF_DeltaOnForget_Create = _TDF.Handle_TDF_DeltaOnForget_Create

def Handle_TDF_DeltaOnForget_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_DeltaOnForget >":
    return _TDF.Handle_TDF_DeltaOnForget_DownCast(t)
Handle_TDF_DeltaOnForget_DownCast = _TDF.Handle_TDF_DeltaOnForget_DownCast

def Handle_TDF_DeltaOnForget_IsNull(t: 'opencascade::handle< TDF_DeltaOnForget > const &') -> "bool":
    return _TDF.Handle_TDF_DeltaOnForget_IsNull(t)
Handle_TDF_DeltaOnForget_IsNull = _TDF.Handle_TDF_DeltaOnForget_IsNull

def Handle_TDF_DeltaOnModification_Create() -> "opencascade::handle< TDF_DeltaOnModification >":
    return _TDF.Handle_TDF_DeltaOnModification_Create()
Handle_TDF_DeltaOnModification_Create = _TDF.Handle_TDF_DeltaOnModification_Create

def Handle_TDF_DeltaOnModification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_DeltaOnModification >":
    return _TDF.Handle_TDF_DeltaOnModification_DownCast(t)
Handle_TDF_DeltaOnModification_DownCast = _TDF.Handle_TDF_DeltaOnModification_DownCast

def Handle_TDF_DeltaOnModification_IsNull(t: 'opencascade::handle< TDF_DeltaOnModification > const &') -> "bool":
    return _TDF.Handle_TDF_DeltaOnModification_IsNull(t)
Handle_TDF_DeltaOnModification_IsNull = _TDF.Handle_TDF_DeltaOnModification_IsNull

def Handle_TDF_DeltaOnRemoval_Create() -> "opencascade::handle< TDF_DeltaOnRemoval >":
    return _TDF.Handle_TDF_DeltaOnRemoval_Create()
Handle_TDF_DeltaOnRemoval_Create = _TDF.Handle_TDF_DeltaOnRemoval_Create

def Handle_TDF_DeltaOnRemoval_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_DeltaOnRemoval >":
    return _TDF.Handle_TDF_DeltaOnRemoval_DownCast(t)
Handle_TDF_DeltaOnRemoval_DownCast = _TDF.Handle_TDF_DeltaOnRemoval_DownCast

def Handle_TDF_DeltaOnRemoval_IsNull(t: 'opencascade::handle< TDF_DeltaOnRemoval > const &') -> "bool":
    return _TDF.Handle_TDF_DeltaOnRemoval_IsNull(t)
Handle_TDF_DeltaOnRemoval_IsNull = _TDF.Handle_TDF_DeltaOnRemoval_IsNull

def Handle_TDF_DeltaOnResume_Create() -> "opencascade::handle< TDF_DeltaOnResume >":
    return _TDF.Handle_TDF_DeltaOnResume_Create()
Handle_TDF_DeltaOnResume_Create = _TDF.Handle_TDF_DeltaOnResume_Create

def Handle_TDF_DeltaOnResume_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_DeltaOnResume >":
    return _TDF.Handle_TDF_DeltaOnResume_DownCast(t)
Handle_TDF_DeltaOnResume_DownCast = _TDF.Handle_TDF_DeltaOnResume_DownCast

def Handle_TDF_DeltaOnResume_IsNull(t: 'opencascade::handle< TDF_DeltaOnResume > const &') -> "bool":
    return _TDF.Handle_TDF_DeltaOnResume_IsNull(t)
Handle_TDF_DeltaOnResume_IsNull = _TDF.Handle_TDF_DeltaOnResume_IsNull

def Handle_TDF_Reference_Create() -> "opencascade::handle< TDF_Reference >":
    return _TDF.Handle_TDF_Reference_Create()
Handle_TDF_Reference_Create = _TDF.Handle_TDF_Reference_Create

def Handle_TDF_Reference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_Reference >":
    return _TDF.Handle_TDF_Reference_DownCast(t)
Handle_TDF_Reference_DownCast = _TDF.Handle_TDF_Reference_DownCast

def Handle_TDF_Reference_IsNull(t: 'opencascade::handle< TDF_Reference > const &') -> "bool":
    return _TDF.Handle_TDF_Reference_IsNull(t)
Handle_TDF_Reference_IsNull = _TDF.Handle_TDF_Reference_IsNull

def Handle_TDF_TagSource_Create() -> "opencascade::handle< TDF_TagSource >":
    return _TDF.Handle_TDF_TagSource_Create()
Handle_TDF_TagSource_Create = _TDF.Handle_TDF_TagSource_Create

def Handle_TDF_TagSource_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_TagSource >":
    return _TDF.Handle_TDF_TagSource_DownCast(t)
Handle_TDF_TagSource_DownCast = _TDF.Handle_TDF_TagSource_DownCast

def Handle_TDF_TagSource_IsNull(t: 'opencascade::handle< TDF_TagSource > const &') -> "bool":
    return _TDF.Handle_TDF_TagSource_IsNull(t)
Handle_TDF_TagSource_IsNull = _TDF.Handle_TDF_TagSource_IsNull

def Handle_TDF_DefaultDeltaOnModification_Create() -> "opencascade::handle< TDF_DefaultDeltaOnModification >":
    return _TDF.Handle_TDF_DefaultDeltaOnModification_Create()
Handle_TDF_DefaultDeltaOnModification_Create = _TDF.Handle_TDF_DefaultDeltaOnModification_Create

def Handle_TDF_DefaultDeltaOnModification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_DefaultDeltaOnModification >":
    return _TDF.Handle_TDF_DefaultDeltaOnModification_DownCast(t)
Handle_TDF_DefaultDeltaOnModification_DownCast = _TDF.Handle_TDF_DefaultDeltaOnModification_DownCast

def Handle_TDF_DefaultDeltaOnModification_IsNull(t: 'opencascade::handle< TDF_DefaultDeltaOnModification > const &') -> "bool":
    return _TDF.Handle_TDF_DefaultDeltaOnModification_IsNull(t)
Handle_TDF_DefaultDeltaOnModification_IsNull = _TDF.Handle_TDF_DefaultDeltaOnModification_IsNull

def Handle_TDF_DefaultDeltaOnRemoval_Create() -> "opencascade::handle< TDF_DefaultDeltaOnRemoval >":
    return _TDF.Handle_TDF_DefaultDeltaOnRemoval_Create()
Handle_TDF_DefaultDeltaOnRemoval_Create = _TDF.Handle_TDF_DefaultDeltaOnRemoval_Create

def Handle_TDF_DefaultDeltaOnRemoval_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_DefaultDeltaOnRemoval >":
    return _TDF.Handle_TDF_DefaultDeltaOnRemoval_DownCast(t)
Handle_TDF_DefaultDeltaOnRemoval_DownCast = _TDF.Handle_TDF_DefaultDeltaOnRemoval_DownCast

def Handle_TDF_DefaultDeltaOnRemoval_IsNull(t: 'opencascade::handle< TDF_DefaultDeltaOnRemoval > const &') -> "bool":
    return _TDF.Handle_TDF_DefaultDeltaOnRemoval_IsNull(t)
Handle_TDF_DefaultDeltaOnRemoval_IsNull = _TDF.Handle_TDF_DefaultDeltaOnRemoval_IsNull

def Handle_TDF_HAttributeArray1_Create() -> "opencascade::handle< TDF_HAttributeArray1 >":
    return _TDF.Handle_TDF_HAttributeArray1_Create()
Handle_TDF_HAttributeArray1_Create = _TDF.Handle_TDF_HAttributeArray1_Create

def Handle_TDF_HAttributeArray1_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TDF_HAttributeArray1 >":
    return _TDF.Handle_TDF_HAttributeArray1_DownCast(t)
Handle_TDF_HAttributeArray1_DownCast = _TDF.Handle_TDF_HAttributeArray1_DownCast

def Handle_TDF_HAttributeArray1_IsNull(t: 'opencascade::handle< TDF_HAttributeArray1 > const &') -> "bool":
    return _TDF.Handle_TDF_HAttributeArray1_IsNull(t)
Handle_TDF_HAttributeArray1_IsNull = _TDF.Handle_TDF_HAttributeArray1_IsNull
class TDF_AttributeArray1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeArray1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeArray1, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< TDF_Attribute > >::iterator":
        return _TDF.TDF_AttributeArray1_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< TDF_Attribute > >::iterator":
        return _TDF.TDF_AttributeArray1_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< TDF_Attribute > >::const_iterator":
        return _TDF.TDF_AttributeArray1_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< TDF_Attribute > >::const_iterator":
        return _TDF.TDF_AttributeArray1_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_AttributeArray1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< TDF_Attribute > const &') -> "void":
        return _TDF.TDF_AttributeArray1_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeArray1_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeArray1_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TDF.TDF_AttributeArray1_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeArray1_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeArray1_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TDF.TDF_AttributeArray1_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TDF.TDF_AttributeArray1_IsAllocated(self)

    def Assign(self, theOther: 'TDF_AttributeArray1') -> "NCollection_Array1< opencascade::handle< TDF_Attribute > > &":
        return _TDF.TDF_AttributeArray1_Assign(self, theOther)

    def Move(self, theOther: 'TDF_AttributeArray1') -> "NCollection_Array1< opencascade::handle< TDF_Attribute > > &":
        return _TDF.TDF_AttributeArray1_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< TDF_Attribute > > &":
        return _TDF.TDF_AttributeArray1_Set(self, *args)

    def First(self) -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeArray1_First(self)

    def ChangeFirst(self) -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeArray1_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeArray1_Last(self)

    def ChangeLast(self) -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeArray1_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeArray1_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeArray1_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeArray1___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< TDF_Attribute > const &') -> "void":
        return _TDF.TDF_AttributeArray1_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TDF.TDF_AttributeArray1_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TDF.delete_TDF_AttributeArray1
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TDF_AttributeArray1_swigregister = _TDF.TDF_AttributeArray1_swigregister
TDF_AttributeArray1_swigregister(TDF_AttributeArray1)

class TDF_AttributeDataMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeDataMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeDataMap, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< opencascade::handle< TDF_Attribute >,opencascade::handle< TDF_Attribute >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _TDF.TDF_AttributeDataMap_begin(self)

    def end(self) -> "NCollection_DataMap< opencascade::handle< TDF_Attribute >,opencascade::handle< TDF_Attribute >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _TDF.TDF_AttributeDataMap_end(self)

    def cbegin(self) -> "NCollection_DataMap< opencascade::handle< TDF_Attribute >,opencascade::handle< TDF_Attribute >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _TDF.TDF_AttributeDataMap_cbegin(self)

    def cend(self) -> "NCollection_DataMap< opencascade::handle< TDF_Attribute >,opencascade::handle< TDF_Attribute >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _TDF.TDF_AttributeDataMap_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_AttributeDataMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_AttributeDataMap') -> "void":
        return _TDF.TDF_AttributeDataMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_AttributeDataMap') -> "NCollection_DataMap< opencascade::handle< TDF_Attribute >,opencascade::handle< TDF_Attribute >,TColStd_MapTransientHasher > &":
        return _TDF.TDF_AttributeDataMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_AttributeDataMap') -> "NCollection_DataMap< opencascade::handle< TDF_Attribute >,opencascade::handle< TDF_Attribute >,TColStd_MapTransientHasher > &":
        return _TDF.TDF_AttributeDataMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_AttributeDataMap_ReSize(self, N)

    def Bind(self, theKey: 'opencascade::handle< TDF_Attribute > const &', theItem: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeDataMap_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'opencascade::handle< TDF_Attribute > const &', theItem: 'opencascade::handle< TDF_Attribute > const &') -> "opencascade::handle< TDF_Attribute > *":
        return _TDF.TDF_AttributeDataMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeDataMap_IsBound(self, theKey)

    def UnBind(self, theKey: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeDataMap_UnBind(self, theKey)

    def Seek(self, theKey: 'opencascade::handle< TDF_Attribute > const &') -> "opencascade::handle< TDF_Attribute > const *":
        return _TDF.TDF_AttributeDataMap_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_AttributeDataMap_Find(self, *args)

    def ChangeSeek(self, theKey: 'opencascade::handle< TDF_Attribute > const &') -> "opencascade::handle< TDF_Attribute > *":
        return _TDF.TDF_AttributeDataMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'opencascade::handle< TDF_Attribute > const &') -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeDataMap_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeDataMap___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_AttributeDataMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_AttributeDataMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeDataMap_Size(self)
TDF_AttributeDataMap_swigregister = _TDF.TDF_AttributeDataMap_swigregister
TDF_AttributeDataMap_swigregister(TDF_AttributeDataMap)

class TDF_AttributeDeltaList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeDeltaList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeDeltaList, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< TDF_AttributeDelta > >::iterator":
        return _TDF.TDF_AttributeDeltaList_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< TDF_AttributeDelta > >::iterator":
        return _TDF.TDF_AttributeDeltaList_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< TDF_AttributeDelta > >::const_iterator":
        return _TDF.TDF_AttributeDeltaList_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< TDF_AttributeDelta > >::const_iterator":
        return _TDF.TDF_AttributeDeltaList_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_AttributeDeltaList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeDeltaList_Size(self)

    def Assign(self, theOther: 'TDF_AttributeDeltaList') -> "NCollection_List< opencascade::handle< TDF_AttributeDelta > > &":
        return _TDF.TDF_AttributeDeltaList_Assign(self, theOther)

    def Set(self, theOther: 'TDF_AttributeDeltaList') -> "NCollection_List< opencascade::handle< TDF_AttributeDelta > > &":
        return _TDF.TDF_AttributeDeltaList_Set(self, theOther)

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDF.TDF_AttributeDeltaList_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< TDF_AttributeDelta > const &":
        return _TDF.TDF_AttributeDeltaList_First(self)

    def Last(self) -> "opencascade::handle< TDF_AttributeDelta > const &":
        return _TDF.TDF_AttributeDeltaList_Last(self)

    def Append(self, *args) -> "void":
        return _TDF.TDF_AttributeDeltaList_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDF.TDF_AttributeDeltaList_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TDF.TDF_AttributeDeltaList_RemoveFirst(self)

    def Remove(self, theIter: 'TDF_ListIteratorOfAttributeDeltaList') -> "void":
        return _TDF.TDF_AttributeDeltaList_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TDF.TDF_AttributeDeltaList_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDF.TDF_AttributeDeltaList_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TDF.TDF_AttributeDeltaList_Reverse(self)
    __swig_destroy__ = _TDF.delete_TDF_AttributeDeltaList
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDF_AttributeDeltaList_swigregister = _TDF.TDF_AttributeDeltaList_swigregister
TDF_AttributeDeltaList_swigregister(TDF_AttributeDeltaList)

class TDF_AttributeDoubleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeDoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeDoubleMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_AttributeDoubleMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_AttributeDoubleMap') -> "void":
        return _TDF.TDF_AttributeDoubleMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_AttributeDoubleMap') -> "NCollection_DoubleMap< opencascade::handle< TDF_Attribute >,opencascade::handle< TDF_Attribute >,TColStd_MapTransientHasher,TColStd_MapTransientHasher > &":
        return _TDF.TDF_AttributeDoubleMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_AttributeDoubleMap') -> "NCollection_DoubleMap< opencascade::handle< TDF_Attribute >,opencascade::handle< TDF_Attribute >,TColStd_MapTransientHasher,TColStd_MapTransientHasher > &":
        return _TDF.TDF_AttributeDoubleMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_AttributeDoubleMap_ReSize(self, N)

    def Bind(self, theKey1: 'opencascade::handle< TDF_Attribute > const &', theKey2: 'opencascade::handle< TDF_Attribute > const &') -> "void":
        return _TDF.TDF_AttributeDoubleMap_Bind(self, theKey1, theKey2)

    def AreBound(self, theKey1: 'opencascade::handle< TDF_Attribute > const &', theKey2: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeDoubleMap_AreBound(self, theKey1, theKey2)

    def IsBound1(self, theKey1: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeDoubleMap_IsBound1(self, theKey1)

    def IsBound2(self, theKey2: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeDoubleMap_IsBound2(self, theKey2)

    def UnBind1(self, theKey1: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeDoubleMap_UnBind1(self, theKey1)

    def UnBind2(self, theKey2: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeDoubleMap_UnBind2(self, theKey2)

    def Find1(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_AttributeDoubleMap_Find1(self, *args)

    def Seek1(self, theKey1: 'opencascade::handle< TDF_Attribute > const &') -> "opencascade::handle< TDF_Attribute > const *":
        return _TDF.TDF_AttributeDoubleMap_Seek1(self, theKey1)

    def Find2(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_AttributeDoubleMap_Find2(self, *args)

    def Seek2(self, theKey2: 'opencascade::handle< TDF_Attribute > const &') -> "opencascade::handle< TDF_Attribute > const *":
        return _TDF.TDF_AttributeDoubleMap_Seek2(self, theKey2)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_AttributeDoubleMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_AttributeDoubleMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeDoubleMap_Size(self)
TDF_AttributeDoubleMap_swigregister = _TDF.TDF_AttributeDoubleMap_swigregister
TDF_AttributeDoubleMap_swigregister(TDF_AttributeDoubleMap)

class TDF_AttributeIndexedMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeIndexedMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeIndexedMap, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< opencascade::handle< TDF_Attribute >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _TDF.TDF_AttributeIndexedMap_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< opencascade::handle< TDF_Attribute >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _TDF.TDF_AttributeIndexedMap_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_AttributeIndexedMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_AttributeIndexedMap') -> "void":
        return _TDF.TDF_AttributeIndexedMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_AttributeIndexedMap') -> "NCollection_IndexedMap< opencascade::handle< TDF_Attribute >,TColStd_MapTransientHasher > &":
        return _TDF.TDF_AttributeIndexedMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_AttributeIndexedMap') -> "NCollection_IndexedMap< opencascade::handle< TDF_Attribute >,TColStd_MapTransientHasher > &":
        return _TDF.TDF_AttributeIndexedMap_Set(self, theOther)

    def ReSize(self, theExtent: 'Standard_Integer const') -> "void":
        return _TDF.TDF_AttributeIndexedMap_ReSize(self, theExtent)

    def Add(self, theKey1: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Integer":
        return _TDF.TDF_AttributeIndexedMap_Add(self, theKey1)

    def Contains(self, theKey1: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeIndexedMap_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'opencascade::handle< TDF_Attribute > const &') -> "void":
        return _TDF.TDF_AttributeIndexedMap_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TDF.TDF_AttributeIndexedMap_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TDF.TDF_AttributeIndexedMap_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TDF.TDF_AttributeIndexedMap_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeIndexedMap_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeIndexedMap_FindKey(self, theIndex)

    def __call__(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeIndexedMap___call__(self, theIndex)

    def FindIndex(self, theKey1: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Integer":
        return _TDF.TDF_AttributeIndexedMap_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_AttributeIndexedMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_AttributeIndexedMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeIndexedMap_Size(self)
TDF_AttributeIndexedMap_swigregister = _TDF.TDF_AttributeIndexedMap_swigregister
TDF_AttributeIndexedMap_swigregister(TDF_AttributeIndexedMap)

class TDF_AttributeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeList, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< TDF_Attribute > >::iterator":
        return _TDF.TDF_AttributeList_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< TDF_Attribute > >::iterator":
        return _TDF.TDF_AttributeList_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< TDF_Attribute > >::const_iterator":
        return _TDF.TDF_AttributeList_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< TDF_Attribute > >::const_iterator":
        return _TDF.TDF_AttributeList_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_AttributeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeList_Size(self)

    def Assign(self, theOther: 'TDF_AttributeList') -> "NCollection_List< opencascade::handle< TDF_Attribute > > &":
        return _TDF.TDF_AttributeList_Assign(self, theOther)

    def Set(self, theOther: 'TDF_AttributeList') -> "NCollection_List< opencascade::handle< TDF_Attribute > > &":
        return _TDF.TDF_AttributeList_Set(self, theOther)

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDF.TDF_AttributeList_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeList_First(self)

    def Last(self) -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeList_Last(self)

    def Append(self, *args) -> "void":
        return _TDF.TDF_AttributeList_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDF.TDF_AttributeList_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TDF.TDF_AttributeList_RemoveFirst(self)

    def Remove(self, theIter: 'TDF_ListIteratorOfAttributeList') -> "void":
        return _TDF.TDF_AttributeList_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TDF.TDF_AttributeList_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDF.TDF_AttributeList_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TDF.TDF_AttributeList_Reverse(self)
    __swig_destroy__ = _TDF.delete_TDF_AttributeList
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDF_AttributeList_swigregister = _TDF.TDF_AttributeList_swigregister
TDF_AttributeList_swigregister(TDF_AttributeList)

class TDF_AttributeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeMap, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< opencascade::handle< TDF_Attribute >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _TDF.TDF_AttributeMap_cbegin(self)

    def cend(self) -> "NCollection_Map< opencascade::handle< TDF_Attribute >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _TDF.TDF_AttributeMap_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_AttributeMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_AttributeMap') -> "void":
        return _TDF.TDF_AttributeMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_AttributeMap') -> "NCollection_Map< opencascade::handle< TDF_Attribute >,TColStd_MapTransientHasher > &":
        return _TDF.TDF_AttributeMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_AttributeMap') -> "NCollection_Map< opencascade::handle< TDF_Attribute >,TColStd_MapTransientHasher > &":
        return _TDF.TDF_AttributeMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_AttributeMap_ReSize(self, N)

    def Add(self, K: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_Add(self, K)

    def Added(self, K: 'opencascade::handle< TDF_Attribute > const &') -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeMap_Added(self, K)

    def Remove(self, K: 'opencascade::handle< TDF_Attribute > const &') -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_AttributeMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_AttributeMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeMap_Size(self)

    def IsEqual(self, theOther: 'TDF_AttributeMap') -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_Contains(self, *args)

    def Union(self, theLeft: 'TDF_AttributeMap', theRight: 'TDF_AttributeMap') -> "void":
        return _TDF.TDF_AttributeMap_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TDF_AttributeMap') -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TDF_AttributeMap') -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TDF_AttributeMap', theRight: 'TDF_AttributeMap') -> "void":
        return _TDF.TDF_AttributeMap_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TDF_AttributeMap') -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TDF_AttributeMap', theRight: 'TDF_AttributeMap') -> "void":
        return _TDF.TDF_AttributeMap_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TDF_AttributeMap') -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_Subtract(self, theOther)

    def Difference(self, theLeft: 'TDF_AttributeMap', theRight: 'TDF_AttributeMap') -> "void":
        return _TDF.TDF_AttributeMap_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TDF_AttributeMap') -> "Standard_Boolean":
        return _TDF.TDF_AttributeMap_Differ(self, theOther)
TDF_AttributeMap_swigregister = _TDF.TDF_AttributeMap_swigregister
TDF_AttributeMap_swigregister(TDF_AttributeMap)

class TDF_AttributeSequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeSequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeSequence, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< TDF_Attribute > >::iterator":
        return _TDF.TDF_AttributeSequence_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< TDF_Attribute > >::iterator":
        return _TDF.TDF_AttributeSequence_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< TDF_Attribute > >::const_iterator":
        return _TDF.TDF_AttributeSequence_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< TDF_Attribute > >::const_iterator":
        return _TDF.TDF_AttributeSequence_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_AttributeSequence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeSequence_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeSequence_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeSequence_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TDF.TDF_AttributeSequence_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TDF.TDF_AttributeSequence_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TDF.TDF_AttributeSequence_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TDF.TDF_AttributeSequence_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TDF.TDF_AttributeSequence_delNode)
    else:
        delNode = _TDF.TDF_AttributeSequence_delNode

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDF.TDF_AttributeSequence_Clear(self, theAllocator)

    def Assign(self, theOther: 'TDF_AttributeSequence') -> "NCollection_Sequence< opencascade::handle< TDF_Attribute > > &":
        return _TDF.TDF_AttributeSequence_Assign(self, theOther)

    def Set(self, theOther: 'TDF_AttributeSequence') -> "NCollection_Sequence< opencascade::handle< TDF_Attribute > > &":
        return _TDF.TDF_AttributeSequence_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TDF.TDF_AttributeSequence_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TDF.TDF_AttributeSequence_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDF.TDF_AttributeSequence_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TDF.TDF_AttributeSequence_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDF.TDF_AttributeSequence_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TDF_AttributeSequence') -> "void":
        return _TDF.TDF_AttributeSequence_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeSequence_First(self)

    def ChangeFirst(self) -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeSequence_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeSequence_Last(self)

    def ChangeLast(self) -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeSequence_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_AttributeSequence_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeSequence_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_AttributeSequence___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< TDF_Attribute > const &') -> "void":
        return _TDF.TDF_AttributeSequence_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TDF.delete_TDF_AttributeSequence
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDF_AttributeSequence_swigregister = _TDF.TDF_AttributeSequence_swigregister
TDF_AttributeSequence_swigregister(TDF_AttributeSequence)

def TDF_AttributeSequence_delNode(theNode: 'NCollection_SeqNode *', theAl: 'TDF_HAllocator') -> "void":
    return _TDF.TDF_AttributeSequence_delNode(theNode, theAl)
TDF_AttributeSequence_delNode = _TDF.TDF_AttributeSequence_delNode

class TDF_DeltaList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DeltaList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DeltaList, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< TDF_Delta > >::iterator":
        return _TDF.TDF_DeltaList_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< TDF_Delta > >::iterator":
        return _TDF.TDF_DeltaList_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< TDF_Delta > >::const_iterator":
        return _TDF.TDF_DeltaList_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< TDF_Delta > >::const_iterator":
        return _TDF.TDF_DeltaList_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_DeltaList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_DeltaList_Size(self)

    def Assign(self, theOther: 'TDF_DeltaList') -> "NCollection_List< opencascade::handle< TDF_Delta > > &":
        return _TDF.TDF_DeltaList_Assign(self, theOther)

    def Set(self, theOther: 'TDF_DeltaList') -> "NCollection_List< opencascade::handle< TDF_Delta > > &":
        return _TDF.TDF_DeltaList_Set(self, theOther)

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDF.TDF_DeltaList_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< TDF_Delta > const &":
        return _TDF.TDF_DeltaList_First(self)

    def Last(self) -> "opencascade::handle< TDF_Delta > const &":
        return _TDF.TDF_DeltaList_Last(self)

    def Append(self, *args) -> "void":
        return _TDF.TDF_DeltaList_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDF.TDF_DeltaList_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TDF.TDF_DeltaList_RemoveFirst(self)

    def Remove(self, theIter: 'TDF_ListIteratorOfDeltaList') -> "void":
        return _TDF.TDF_DeltaList_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TDF.TDF_DeltaList_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDF.TDF_DeltaList_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TDF.TDF_DeltaList_Reverse(self)
    __swig_destroy__ = _TDF.delete_TDF_DeltaList
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDF_DeltaList_swigregister = _TDF.TDF_DeltaList_swigregister
TDF_DeltaList_swigregister(TDF_DeltaList)

class TDF_GUIDProgIDMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_GUIDProgIDMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_GUIDProgIDMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_GUIDProgIDMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_GUIDProgIDMap') -> "void":
        return _TDF.TDF_GUIDProgIDMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_GUIDProgIDMap') -> "NCollection_DoubleMap< Standard_GUID,TCollection_ExtendedString,Standard_GUID,TCollection_ExtendedString > &":
        return _TDF.TDF_GUIDProgIDMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_GUIDProgIDMap') -> "NCollection_DoubleMap< Standard_GUID,TCollection_ExtendedString,Standard_GUID,TCollection_ExtendedString > &":
        return _TDF.TDF_GUIDProgIDMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_GUIDProgIDMap_ReSize(self, N)

    def Bind(self, theKey1: 'Standard_GUID', theKey2: 'TCollection_ExtendedString') -> "void":
        return _TDF.TDF_GUIDProgIDMap_Bind(self, theKey1, theKey2)

    def AreBound(self, theKey1: 'Standard_GUID', theKey2: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDF.TDF_GUIDProgIDMap_AreBound(self, theKey1, theKey2)

    def IsBound1(self, theKey1: 'Standard_GUID') -> "Standard_Boolean":
        return _TDF.TDF_GUIDProgIDMap_IsBound1(self, theKey1)

    def IsBound2(self, theKey2: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDF.TDF_GUIDProgIDMap_IsBound2(self, theKey2)

    def UnBind1(self, theKey1: 'Standard_GUID') -> "Standard_Boolean":
        return _TDF.TDF_GUIDProgIDMap_UnBind1(self, theKey1)

    def UnBind2(self, theKey2: 'TCollection_ExtendedString') -> "Standard_Boolean":
        return _TDF.TDF_GUIDProgIDMap_UnBind2(self, theKey2)

    def Find1(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_GUIDProgIDMap_Find1(self, *args)

    def Seek1(self, theKey1: 'Standard_GUID') -> "TCollection_ExtendedString const *":
        return _TDF.TDF_GUIDProgIDMap_Seek1(self, theKey1)

    def Find2(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_GUIDProgIDMap_Find2(self, *args)

    def Seek2(self, theKey2: 'TCollection_ExtendedString') -> "Standard_GUID const *":
        return _TDF.TDF_GUIDProgIDMap_Seek2(self, theKey2)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_GUIDProgIDMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_GUIDProgIDMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_GUIDProgIDMap_Size(self)
TDF_GUIDProgIDMap_swigregister = _TDF.TDF_GUIDProgIDMap_swigregister
TDF_GUIDProgIDMap_swigregister(TDF_GUIDProgIDMap)

class TDF_HAllocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_HAllocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_HAllocator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _TDF.new_TDF_HAllocator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDF.delete_TDF_HAllocator
    __del__ = lambda self: None
TDF_HAllocator_swigregister = _TDF.TDF_HAllocator_swigregister
TDF_HAllocator_swigregister(TDF_HAllocator)

class TDF_IDList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_IDList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_IDList, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< Standard_GUID >::iterator":
        return _TDF.TDF_IDList_begin(self)

    def end(self) -> "NCollection_List< Standard_GUID >::iterator":
        return _TDF.TDF_IDList_end(self)

    def cbegin(self) -> "NCollection_List< Standard_GUID >::const_iterator":
        return _TDF.TDF_IDList_cbegin(self)

    def cend(self) -> "NCollection_List< Standard_GUID >::const_iterator":
        return _TDF.TDF_IDList_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_IDList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_IDList_Size(self)

    def Assign(self, theOther: 'TDF_IDList') -> "NCollection_List< Standard_GUID > &":
        return _TDF.TDF_IDList_Assign(self, theOther)

    def Set(self, theOther: 'TDF_IDList') -> "NCollection_List< Standard_GUID > &":
        return _TDF.TDF_IDList_Set(self, theOther)

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDF.TDF_IDList_Clear(self, theAllocator)

    def First(self) -> "Standard_GUID const &":
        return _TDF.TDF_IDList_First(self)

    def Last(self) -> "Standard_GUID const &":
        return _TDF.TDF_IDList_Last(self)

    def Append(self, *args) -> "void":
        return _TDF.TDF_IDList_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDF.TDF_IDList_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TDF.TDF_IDList_RemoveFirst(self)

    def Remove(self, theIter: 'TDF_ListIteratorOfIDList') -> "void":
        return _TDF.TDF_IDList_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TDF.TDF_IDList_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDF.TDF_IDList_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TDF.TDF_IDList_Reverse(self)
    __swig_destroy__ = _TDF.delete_TDF_IDList
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDF_IDList_swigregister = _TDF.TDF_IDList_swigregister
TDF_IDList_swigregister(TDF_IDList)

class TDF_IDMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_IDMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_IDMap, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< Standard_GUID,Standard_GUID >::const_iterator":
        return _TDF.TDF_IDMap_cbegin(self)

    def cend(self) -> "NCollection_Map< Standard_GUID,Standard_GUID >::const_iterator":
        return _TDF.TDF_IDMap_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_IDMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_IDMap') -> "void":
        return _TDF.TDF_IDMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_IDMap') -> "NCollection_Map< Standard_GUID,Standard_GUID > &":
        return _TDF.TDF_IDMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_IDMap') -> "NCollection_Map< Standard_GUID,Standard_GUID > &":
        return _TDF.TDF_IDMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_IDMap_ReSize(self, N)

    def Add(self, K: 'Standard_GUID') -> "Standard_Boolean":
        return _TDF.TDF_IDMap_Add(self, K)

    def Added(self, K: 'Standard_GUID') -> "Standard_GUID const &":
        return _TDF.TDF_IDMap_Added(self, K)

    def Remove(self, K: 'Standard_GUID') -> "Standard_Boolean":
        return _TDF.TDF_IDMap_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_IDMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_IDMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_IDMap_Size(self)

    def IsEqual(self, theOther: 'TDF_IDMap') -> "Standard_Boolean":
        return _TDF.TDF_IDMap_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_IDMap_Contains(self, *args)

    def Union(self, theLeft: 'TDF_IDMap', theRight: 'TDF_IDMap') -> "void":
        return _TDF.TDF_IDMap_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TDF_IDMap') -> "Standard_Boolean":
        return _TDF.TDF_IDMap_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TDF_IDMap') -> "Standard_Boolean":
        return _TDF.TDF_IDMap_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TDF_IDMap', theRight: 'TDF_IDMap') -> "void":
        return _TDF.TDF_IDMap_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TDF_IDMap') -> "Standard_Boolean":
        return _TDF.TDF_IDMap_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TDF_IDMap', theRight: 'TDF_IDMap') -> "void":
        return _TDF.TDF_IDMap_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TDF_IDMap') -> "Standard_Boolean":
        return _TDF.TDF_IDMap_Subtract(self, theOther)

    def Difference(self, theLeft: 'TDF_IDMap', theRight: 'TDF_IDMap') -> "void":
        return _TDF.TDF_IDMap_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TDF_IDMap') -> "Standard_Boolean":
        return _TDF.TDF_IDMap_Differ(self, theOther)
TDF_IDMap_swigregister = _TDF.TDF_IDMap_swigregister
TDF_IDMap_swigregister(TDF_IDMap)

class TDF_LabelDataMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_LabelDataMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_LabelDataMap, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TDF_Label,TDF_Label,TDF_LabelMapHasher >::iterator":
        return _TDF.TDF_LabelDataMap_begin(self)

    def end(self) -> "NCollection_DataMap< TDF_Label,TDF_Label,TDF_LabelMapHasher >::iterator":
        return _TDF.TDF_LabelDataMap_end(self)

    def cbegin(self) -> "NCollection_DataMap< TDF_Label,TDF_Label,TDF_LabelMapHasher >::const_iterator":
        return _TDF.TDF_LabelDataMap_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TDF_Label,TDF_Label,TDF_LabelMapHasher >::const_iterator":
        return _TDF.TDF_LabelDataMap_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_LabelDataMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_LabelDataMap') -> "void":
        return _TDF.TDF_LabelDataMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_LabelDataMap') -> "NCollection_DataMap< TDF_Label,TDF_Label,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelDataMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_LabelDataMap') -> "NCollection_DataMap< TDF_Label,TDF_Label,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelDataMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_LabelDataMap_ReSize(self, N)

    def Bind(self, theKey: 'TDF_Label', theItem: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelDataMap_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TDF_Label', theItem: 'TDF_Label') -> "TDF_Label *":
        return _TDF.TDF_LabelDataMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelDataMap_IsBound(self, theKey)

    def UnBind(self, theKey: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelDataMap_UnBind(self, theKey)

    def Seek(self, theKey: 'TDF_Label') -> "TDF_Label const *":
        return _TDF.TDF_LabelDataMap_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_LabelDataMap_Find(self, *args)

    def ChangeSeek(self, theKey: 'TDF_Label') -> "TDF_Label *":
        return _TDF.TDF_LabelDataMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TDF_Label') -> "TDF_Label &":
        return _TDF.TDF_LabelDataMap_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TDF_Label &":
        return _TDF.TDF_LabelDataMap___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_LabelDataMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_LabelDataMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_LabelDataMap_Size(self)
TDF_LabelDataMap_swigregister = _TDF.TDF_LabelDataMap_swigregister
TDF_LabelDataMap_swigregister(TDF_LabelDataMap)

class TDF_LabelDoubleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_LabelDoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_LabelDoubleMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_LabelDoubleMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_LabelDoubleMap') -> "void":
        return _TDF.TDF_LabelDoubleMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_LabelDoubleMap') -> "NCollection_DoubleMap< TDF_Label,TDF_Label,TDF_LabelMapHasher,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelDoubleMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_LabelDoubleMap') -> "NCollection_DoubleMap< TDF_Label,TDF_Label,TDF_LabelMapHasher,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelDoubleMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_LabelDoubleMap_ReSize(self, N)

    def Bind(self, theKey1: 'TDF_Label', theKey2: 'TDF_Label') -> "void":
        return _TDF.TDF_LabelDoubleMap_Bind(self, theKey1, theKey2)

    def AreBound(self, theKey1: 'TDF_Label', theKey2: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelDoubleMap_AreBound(self, theKey1, theKey2)

    def IsBound1(self, theKey1: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelDoubleMap_IsBound1(self, theKey1)

    def IsBound2(self, theKey2: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelDoubleMap_IsBound2(self, theKey2)

    def UnBind1(self, theKey1: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelDoubleMap_UnBind1(self, theKey1)

    def UnBind2(self, theKey2: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelDoubleMap_UnBind2(self, theKey2)

    def Find1(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_LabelDoubleMap_Find1(self, *args)

    def Seek1(self, theKey1: 'TDF_Label') -> "TDF_Label const *":
        return _TDF.TDF_LabelDoubleMap_Seek1(self, theKey1)

    def Find2(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_LabelDoubleMap_Find2(self, *args)

    def Seek2(self, theKey2: 'TDF_Label') -> "TDF_Label const *":
        return _TDF.TDF_LabelDoubleMap_Seek2(self, theKey2)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_LabelDoubleMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_LabelDoubleMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_LabelDoubleMap_Size(self)
TDF_LabelDoubleMap_swigregister = _TDF.TDF_LabelDoubleMap_swigregister
TDF_LabelDoubleMap_swigregister(TDF_LabelDoubleMap)

class TDF_LabelIndexedMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_LabelIndexedMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_LabelIndexedMap, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< TDF_Label,TDF_LabelMapHasher >::const_iterator":
        return _TDF.TDF_LabelIndexedMap_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< TDF_Label,TDF_LabelMapHasher >::const_iterator":
        return _TDF.TDF_LabelIndexedMap_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_LabelIndexedMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_LabelIndexedMap') -> "void":
        return _TDF.TDF_LabelIndexedMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_LabelIndexedMap') -> "NCollection_IndexedMap< TDF_Label,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelIndexedMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_LabelIndexedMap') -> "NCollection_IndexedMap< TDF_Label,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelIndexedMap_Set(self, theOther)

    def ReSize(self, theExtent: 'Standard_Integer const') -> "void":
        return _TDF.TDF_LabelIndexedMap_ReSize(self, theExtent)

    def Add(self, theKey1: 'TDF_Label') -> "Standard_Integer":
        return _TDF.TDF_LabelIndexedMap_Add(self, theKey1)

    def Contains(self, theKey1: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelIndexedMap_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TDF_Label') -> "void":
        return _TDF.TDF_LabelIndexedMap_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TDF.TDF_LabelIndexedMap_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TDF.TDF_LabelIndexedMap_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TDF.TDF_LabelIndexedMap_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelIndexedMap_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TDF_Label const &":
        return _TDF.TDF_LabelIndexedMap_FindKey(self, theIndex)

    def __call__(self, theIndex: 'Standard_Integer const') -> "TDF_Label const &":
        return _TDF.TDF_LabelIndexedMap___call__(self, theIndex)

    def FindIndex(self, theKey1: 'TDF_Label') -> "Standard_Integer":
        return _TDF.TDF_LabelIndexedMap_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_LabelIndexedMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_LabelIndexedMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_LabelIndexedMap_Size(self)
TDF_LabelIndexedMap_swigregister = _TDF.TDF_LabelIndexedMap_swigregister
TDF_LabelIndexedMap_swigregister(TDF_LabelIndexedMap)

class TDF_LabelIntegerMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_LabelIntegerMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_LabelIntegerMap, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TDF_Label,int,TDF_LabelMapHasher >::iterator":
        return _TDF.TDF_LabelIntegerMap_begin(self)

    def end(self) -> "NCollection_DataMap< TDF_Label,int,TDF_LabelMapHasher >::iterator":
        return _TDF.TDF_LabelIntegerMap_end(self)

    def cbegin(self) -> "NCollection_DataMap< TDF_Label,int,TDF_LabelMapHasher >::const_iterator":
        return _TDF.TDF_LabelIntegerMap_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TDF_Label,int,TDF_LabelMapHasher >::const_iterator":
        return _TDF.TDF_LabelIntegerMap_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_LabelIntegerMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_LabelIntegerMap') -> "void":
        return _TDF.TDF_LabelIntegerMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_LabelIntegerMap') -> "NCollection_DataMap< TDF_Label,Standard_Integer,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelIntegerMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_LabelIntegerMap') -> "NCollection_DataMap< TDF_Label,Standard_Integer,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelIntegerMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_LabelIntegerMap_ReSize(self, N)

    def Bind(self, theKey: 'TDF_Label', theItem: 'int const &') -> "Standard_Boolean":
        return _TDF.TDF_LabelIntegerMap_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TDF_Label', theItem: 'int const &') -> "int *":
        return _TDF.TDF_LabelIntegerMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelIntegerMap_IsBound(self, theKey)

    def UnBind(self, theKey: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelIntegerMap_UnBind(self, theKey)

    def Seek(self, theKey: 'TDF_Label') -> "int const *":
        return _TDF.TDF_LabelIntegerMap_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_LabelIntegerMap_Find(self, *args)

    def ChangeSeek(self, theKey: 'TDF_Label') -> "int *":
        return _TDF.TDF_LabelIntegerMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TDF_Label') -> "int &":
        return _TDF.TDF_LabelIntegerMap_ChangeFind(self, theKey)

    def __call__(self, *args) -> "int &":
        return _TDF.TDF_LabelIntegerMap___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_LabelIntegerMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_LabelIntegerMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_LabelIntegerMap_Size(self)
TDF_LabelIntegerMap_swigregister = _TDF.TDF_LabelIntegerMap_swigregister
TDF_LabelIntegerMap_swigregister(TDF_LabelIntegerMap)

class TDF_LabelList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_LabelList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_LabelList, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< TDF_Label >::iterator":
        return _TDF.TDF_LabelList_begin(self)

    def end(self) -> "NCollection_List< TDF_Label >::iterator":
        return _TDF.TDF_LabelList_end(self)

    def cbegin(self) -> "NCollection_List< TDF_Label >::const_iterator":
        return _TDF.TDF_LabelList_cbegin(self)

    def cend(self) -> "NCollection_List< TDF_Label >::const_iterator":
        return _TDF.TDF_LabelList_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_LabelList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_LabelList_Size(self)

    def Assign(self, theOther: 'TDF_LabelList') -> "NCollection_List< TDF_Label > &":
        return _TDF.TDF_LabelList_Assign(self, theOther)

    def Set(self, theOther: 'TDF_LabelList') -> "NCollection_List< TDF_Label > &":
        return _TDF.TDF_LabelList_Set(self, theOther)

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDF.TDF_LabelList_Clear(self, theAllocator)

    def First(self) -> "TDF_Label const &":
        return _TDF.TDF_LabelList_First(self)

    def Last(self) -> "TDF_Label const &":
        return _TDF.TDF_LabelList_Last(self)

    def Append(self, *args) -> "void":
        return _TDF.TDF_LabelList_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDF.TDF_LabelList_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TDF.TDF_LabelList_RemoveFirst(self)

    def Remove(self, theIter: 'TDF_ListIteratorOfLabelList') -> "void":
        return _TDF.TDF_LabelList_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TDF.TDF_LabelList_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDF.TDF_LabelList_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TDF.TDF_LabelList_Reverse(self)
    __swig_destroy__ = _TDF.delete_TDF_LabelList
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDF_LabelList_swigregister = _TDF.TDF_LabelList_swigregister
TDF_LabelList_swigregister(TDF_LabelList)

class TDF_LabelMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_LabelMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_LabelMap, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< TDF_Label,TDF_LabelMapHasher >::const_iterator":
        return _TDF.TDF_LabelMap_cbegin(self)

    def cend(self) -> "NCollection_Map< TDF_Label,TDF_LabelMapHasher >::const_iterator":
        return _TDF.TDF_LabelMap_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_LabelMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TDF_LabelMap') -> "void":
        return _TDF.TDF_LabelMap_Exchange(self, theOther)

    def Assign(self, theOther: 'TDF_LabelMap') -> "NCollection_Map< TDF_Label,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelMap_Assign(self, theOther)

    def Set(self, theOther: 'TDF_LabelMap') -> "NCollection_Map< TDF_Label,TDF_LabelMapHasher > &":
        return _TDF.TDF_LabelMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TDF.TDF_LabelMap_ReSize(self, N)

    def Add(self, K: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_Add(self, K)

    def Added(self, K: 'TDF_Label') -> "TDF_Label const &":
        return _TDF.TDF_LabelMap_Added(self, K)

    def Remove(self, K: 'TDF_Label') -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TDF.TDF_LabelMap_Clear(self, *args)
    __swig_destroy__ = _TDF.delete_TDF_LabelMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_LabelMap_Size(self)

    def IsEqual(self, theOther: 'TDF_LabelMap') -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_Contains(self, *args)

    def Union(self, theLeft: 'TDF_LabelMap', theRight: 'TDF_LabelMap') -> "void":
        return _TDF.TDF_LabelMap_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TDF_LabelMap') -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TDF_LabelMap') -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TDF_LabelMap', theRight: 'TDF_LabelMap') -> "void":
        return _TDF.TDF_LabelMap_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TDF_LabelMap') -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TDF_LabelMap', theRight: 'TDF_LabelMap') -> "void":
        return _TDF.TDF_LabelMap_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TDF_LabelMap') -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_Subtract(self, theOther)

    def Difference(self, theLeft: 'TDF_LabelMap', theRight: 'TDF_LabelMap') -> "void":
        return _TDF.TDF_LabelMap_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TDF_LabelMap') -> "Standard_Boolean":
        return _TDF.TDF_LabelMap_Differ(self, theOther)
TDF_LabelMap_swigregister = _TDF.TDF_LabelMap_swigregister
TDF_LabelMap_swigregister(TDF_LabelMap)

class TDF_LabelSequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_LabelSequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_LabelSequence, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< TDF_Label >::iterator":
        return _TDF.TDF_LabelSequence_begin(self)

    def end(self) -> "NCollection_Sequence< TDF_Label >::iterator":
        return _TDF.TDF_LabelSequence_end(self)

    def cbegin(self) -> "NCollection_Sequence< TDF_Label >::const_iterator":
        return _TDF.TDF_LabelSequence_cbegin(self)

    def cend(self) -> "NCollection_Sequence< TDF_Label >::const_iterator":
        return _TDF.TDF_LabelSequence_cend(self)

    def __init__(self, *args):
        this = _TDF.new_TDF_LabelSequence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TDF.TDF_LabelSequence_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TDF.TDF_LabelSequence_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TDF.TDF_LabelSequence_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TDF.TDF_LabelSequence_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TDF.TDF_LabelSequence_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TDF.TDF_LabelSequence_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TDF.TDF_LabelSequence_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TDF.TDF_LabelSequence_delNode)
    else:
        delNode = _TDF.TDF_LabelSequence_delNode

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _TDF.TDF_LabelSequence_Clear(self, theAllocator)

    def Assign(self, theOther: 'TDF_LabelSequence') -> "NCollection_Sequence< TDF_Label > &":
        return _TDF.TDF_LabelSequence_Assign(self, theOther)

    def Set(self, theOther: 'TDF_LabelSequence') -> "NCollection_Sequence< TDF_Label > &":
        return _TDF.TDF_LabelSequence_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TDF.TDF_LabelSequence_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TDF.TDF_LabelSequence_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TDF.TDF_LabelSequence_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TDF.TDF_LabelSequence_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TDF.TDF_LabelSequence_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TDF_LabelSequence') -> "void":
        return _TDF.TDF_LabelSequence_Split(self, theIndex, theSeq)

    def First(self) -> "TDF_Label const &":
        return _TDF.TDF_LabelSequence_First(self)

    def ChangeFirst(self) -> "TDF_Label &":
        return _TDF.TDF_LabelSequence_ChangeFirst(self)

    def Last(self) -> "TDF_Label const &":
        return _TDF.TDF_LabelSequence_Last(self)

    def ChangeLast(self) -> "TDF_Label &":
        return _TDF.TDF_LabelSequence_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TDF_Label const &":
        return _TDF.TDF_LabelSequence_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TDF_Label &":
        return _TDF.TDF_LabelSequence_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TDF_Label &":
        return _TDF.TDF_LabelSequence___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TDF_Label') -> "void":
        return _TDF.TDF_LabelSequence_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TDF.delete_TDF_LabelSequence
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TDF_LabelSequence_swigregister = _TDF.TDF_LabelSequence_swigregister
TDF_LabelSequence_swigregister(TDF_LabelSequence)

def TDF_LabelSequence_delNode(theNode: 'NCollection_SeqNode *', theAl: 'TDF_HAllocator') -> "void":
    return _TDF.TDF_LabelSequence_delNode(theNode, theAl)
TDF_LabelSequence_delNode = _TDF.TDF_LabelSequence_delNode

class TDF_ListIteratorOfAttributeDeltaList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ListIteratorOfAttributeDeltaList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ListIteratorOfAttributeDeltaList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_ListIteratorOfAttributeDeltaList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TDF.TDF_ListIteratorOfAttributeDeltaList_More(self)

    def Next(self) -> "void":
        return _TDF.TDF_ListIteratorOfAttributeDeltaList_Next(self)

    def Value(self) -> "opencascade::handle< TDF_AttributeDelta > const &":
        return _TDF.TDF_ListIteratorOfAttributeDeltaList_Value(self)

    def ChangeValue(self) -> "opencascade::handle< TDF_AttributeDelta > &":
        return _TDF.TDF_ListIteratorOfAttributeDeltaList_ChangeValue(self)
    __swig_destroy__ = _TDF.delete_TDF_ListIteratorOfAttributeDeltaList
    __del__ = lambda self: None
TDF_ListIteratorOfAttributeDeltaList_swigregister = _TDF.TDF_ListIteratorOfAttributeDeltaList_swigregister
TDF_ListIteratorOfAttributeDeltaList_swigregister(TDF_ListIteratorOfAttributeDeltaList)

class TDF_ListIteratorOfAttributeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ListIteratorOfAttributeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ListIteratorOfAttributeList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_ListIteratorOfAttributeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TDF.TDF_ListIteratorOfAttributeList_More(self)

    def Next(self) -> "void":
        return _TDF.TDF_ListIteratorOfAttributeList_Next(self)

    def Value(self) -> "opencascade::handle< TDF_Attribute > const &":
        return _TDF.TDF_ListIteratorOfAttributeList_Value(self)

    def ChangeValue(self) -> "opencascade::handle< TDF_Attribute > &":
        return _TDF.TDF_ListIteratorOfAttributeList_ChangeValue(self)
    __swig_destroy__ = _TDF.delete_TDF_ListIteratorOfAttributeList
    __del__ = lambda self: None
TDF_ListIteratorOfAttributeList_swigregister = _TDF.TDF_ListIteratorOfAttributeList_swigregister
TDF_ListIteratorOfAttributeList_swigregister(TDF_ListIteratorOfAttributeList)

class TDF_ListIteratorOfDeltaList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ListIteratorOfDeltaList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ListIteratorOfDeltaList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_ListIteratorOfDeltaList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TDF.TDF_ListIteratorOfDeltaList_More(self)

    def Next(self) -> "void":
        return _TDF.TDF_ListIteratorOfDeltaList_Next(self)

    def Value(self) -> "opencascade::handle< TDF_Delta > const &":
        return _TDF.TDF_ListIteratorOfDeltaList_Value(self)

    def ChangeValue(self) -> "opencascade::handle< TDF_Delta > &":
        return _TDF.TDF_ListIteratorOfDeltaList_ChangeValue(self)
    __swig_destroy__ = _TDF.delete_TDF_ListIteratorOfDeltaList
    __del__ = lambda self: None
TDF_ListIteratorOfDeltaList_swigregister = _TDF.TDF_ListIteratorOfDeltaList_swigregister
TDF_ListIteratorOfDeltaList_swigregister(TDF_ListIteratorOfDeltaList)

class TDF_ListIteratorOfIDList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ListIteratorOfIDList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ListIteratorOfIDList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_ListIteratorOfIDList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TDF.TDF_ListIteratorOfIDList_More(self)

    def Next(self) -> "void":
        return _TDF.TDF_ListIteratorOfIDList_Next(self)

    def Value(self) -> "Standard_GUID const &":
        return _TDF.TDF_ListIteratorOfIDList_Value(self)

    def ChangeValue(self) -> "Standard_GUID &":
        return _TDF.TDF_ListIteratorOfIDList_ChangeValue(self)
    __swig_destroy__ = _TDF.delete_TDF_ListIteratorOfIDList
    __del__ = lambda self: None
TDF_ListIteratorOfIDList_swigregister = _TDF.TDF_ListIteratorOfIDList_swigregister
TDF_ListIteratorOfIDList_swigregister(TDF_ListIteratorOfIDList)

class TDF_ListIteratorOfLabelList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ListIteratorOfLabelList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ListIteratorOfLabelList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_ListIteratorOfLabelList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TDF.TDF_ListIteratorOfLabelList_More(self)

    def Next(self) -> "void":
        return _TDF.TDF_ListIteratorOfLabelList_Next(self)

    def Value(self) -> "TDF_Label const &":
        return _TDF.TDF_ListIteratorOfLabelList_Value(self)

    def ChangeValue(self) -> "TDF_Label &":
        return _TDF.TDF_ListIteratorOfLabelList_ChangeValue(self)
    __swig_destroy__ = _TDF.delete_TDF_ListIteratorOfLabelList
    __del__ = lambda self: None
TDF_ListIteratorOfLabelList_swigregister = _TDF.TDF_ListIteratorOfLabelList_swigregister
TDF_ListIteratorOfLabelList_swigregister(TDF_ListIteratorOfLabelList)

class tdf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tdf, name)
    __repr__ = _swig_repr

    def AddLinkGUIDToProgID(*args) -> "void":
        """
        Sets link between guid and progid in hidden datamap.

        Parameters
        ----------
        ID: Standard_GUID
        ProgID: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDF.tdf_AddLinkGUIDToProgID(*args)

    AddLinkGUIDToProgID = staticmethod(AddLinkGUIDToProgID)

    def GUIDFromProgID(*args) -> "Standard_Boolean":
        """
        Returns true if there is guid for given <progid> then guid is returned in <id>.

        Parameters
        ----------
        ProgID: TCollection_ExtendedString
        ID: Standard_GUID

        Returns
        -------
        bool

        """
        return _TDF.tdf_GUIDFromProgID(*args)

    GUIDFromProgID = staticmethod(GUIDFromProgID)

    def LowestID(*args) -> "Standard_GUID const &":
        """
        Returns id '00000000-0000-0000-0000-000000000000', sometimes used as null id.

        Returns
        -------
        Standard_GUID

        """
        return _TDF.tdf_LowestID(*args)

    LowestID = staticmethod(LowestID)

    def ProgIDFromGUID(*args) -> "Standard_Boolean":
        """
        Returns true if there is progid for given <id> then progid is returned in <progid>.

        Parameters
        ----------
        ID: Standard_GUID
        ProgID: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _TDF.tdf_ProgIDFromGUID(*args)

    ProgIDFromGUID = staticmethod(ProgIDFromGUID)

    def UppestID(*args) -> "Standard_GUID const &":
        """
        Returns id 'ffffffff-ffff-ffff-ffff-ffffffffffff'.

        Returns
        -------
        Standard_GUID

        """
        return _TDF.tdf_UppestID(*args)

    UppestID = staticmethod(UppestID)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TDF.new_tdf()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDF.delete_tdf
    __del__ = lambda self: None
tdf_swigregister = _TDF.tdf_swigregister
tdf_swigregister(tdf)

def tdf_AddLinkGUIDToProgID(*args) -> "void":
    """
    Sets link between guid and progid in hidden datamap.

    Parameters
    ----------
    ID: Standard_GUID
    ProgID: TCollection_ExtendedString

    Returns
    -------
    None

    """
    return _TDF.tdf_AddLinkGUIDToProgID(*args)

def tdf_GUIDFromProgID(*args) -> "Standard_Boolean":
    """
    Returns true if there is guid for given <progid> then guid is returned in <id>.

    Parameters
    ----------
    ProgID: TCollection_ExtendedString
    ID: Standard_GUID

    Returns
    -------
    bool

    """
    return _TDF.tdf_GUIDFromProgID(*args)

def tdf_LowestID(*args) -> "Standard_GUID const &":
    """
    Returns id '00000000-0000-0000-0000-000000000000', sometimes used as null id.

    Returns
    -------
    Standard_GUID

    """
    return _TDF.tdf_LowestID(*args)

def tdf_ProgIDFromGUID(*args) -> "Standard_Boolean":
    """
    Returns true if there is progid for given <id> then progid is returned in <progid>.

    Parameters
    ----------
    ID: Standard_GUID
    ProgID: TCollection_ExtendedString

    Returns
    -------
    bool

    """
    return _TDF.tdf_ProgIDFromGUID(*args)

def tdf_UppestID(*args) -> "Standard_GUID const &":
    """
    Returns id 'ffffffff-ffff-ffff-ffff-ffffffffffff'.

    Returns
    -------
    Standard_GUID

    """
    return _TDF.tdf_UppestID(*args)

class TDF_Attribute(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_Attribute, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_Attribute, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddAttribute(self, *args) -> "void":
        """
        Adds an attribute <other> to the label of <self>.raises if there is already one of the same guid fhan <other>.

        Parameters
        ----------
        other: TDF_Attribute

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_AddAttribute(self, *args)


    def AfterAddition(self, *args) -> "void":
        """
        Something to do after adding an attribute to a label.

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_AfterAddition(self, *args)


    def AfterResume(self, *args) -> "void":
        """
        Something to do after resuming an attribute from a label.

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_AfterResume(self, *args)


    def AfterRetrieval(self, *args) -> "Standard_Boolean":
        """
        Something to do after creation of an attribute by persistent-transient translation. the returned status says if afterundo has been performed (true) or if this callback must be called once again further (false). if <forceit> is set to true, the method must perform and return true. does nothing by default and returns true.

        Parameters
        ----------
        forceIt: bool,optional
        	default value is Standard_False

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_AfterRetrieval(self, *args)


    def AfterUndo(self, *args) -> "Standard_Boolean":
        """
        Something to do after applying <anattdelta>. the returned status says if afterundo has been performed (true) or if this callback must be called once again further (false). if <forceit> is set to true, the method must perform and return true. does nothing by default and returns true.

        Parameters
        ----------
        anAttDelta: TDF_AttributeDelta
        forceIt: bool,optional
        	default value is Standard_False

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_AfterUndo(self, *args)


    def Backup(self, *args) -> "void":
        """
        Backups the attribute. the backuped attribute is flagged 'backuped' and not 'valid'. //! the method does nothing: //! 1) if the attribute transaction number is equal to the current transaction number (the attribute has already been backuped). //! 2) if the attribute is not attached to a label.

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_Backup(self, *args)


    def BackupCopy(self, *args) -> "opencascade::handle< TDF_Attribute >":
        """
        Copies the attribute contents into a new other attribute. it is used by backup().

        Returns
        -------
        opencascade::handle<TDF_Attribute>

        """
        return _TDF.TDF_Attribute_BackupCopy(self, *args)


    def BeforeCommitTransaction(self, *args) -> "void":
        """
        A callback. by default does nothing. it is called by tdf_data::committransaction() method.

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_BeforeCommitTransaction(self, *args)


    def BeforeForget(self, *args) -> "void":
        """
        Something to do before forgetting an attribute to a label.

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_BeforeForget(self, *args)


    def BeforeRemoval(self, *args) -> "void":
        """
        Something to do before removing an attribute from a label.

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_BeforeRemoval(self, *args)


    def BeforeUndo(self, *args) -> "Standard_Boolean":
        """
        Something to do before applying <anattdelta>. the returned status says if afterundo has been performed (true) or if this callback must be called once again further (false). if <forceit> is set to true, the method must perform and return true. does nothing by default and returns true.

        Parameters
        ----------
        anAttDelta: TDF_AttributeDelta
        forceIt: bool,optional
        	default value is Standard_False

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_BeforeUndo(self, *args)


    def DeltaOnAddition(self, *args) -> "opencascade::handle< TDF_DeltaOnAddition >":
        """
        Makes an attributedelta because <self> appeared. the only known use of a redefinition of this method is to return a null handle (no delta).

        Returns
        -------
        opencascade::handle<TDF_DeltaOnAddition>

        """
        return _TDF.TDF_Attribute_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args) -> "opencascade::handle< TDF_DeltaOnForget >":
        """
        Makes an attributedelta because <self> has been forgotten.

        Returns
        -------
        opencascade::handle<TDF_DeltaOnForget>

        """
        return _TDF.TDF_Attribute_DeltaOnForget(self, *args)


    def DeltaOnModification(self, *args) -> "void":
        """
        Makes a deltaonmodification between <self> and <anoldattribute.

        Parameters
        ----------
        anOldAttribute: TDF_Attribute

        Returns
        -------
        opencascade::handle<TDF_DeltaOnModification>

        Applies a deltaonmodification to <self>.

        Parameters
        ----------
        aDelta: TDF_DeltaOnModification

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_DeltaOnModification(self, *args)


    def DeltaOnRemoval(self, *args) -> "opencascade::handle< TDF_DeltaOnRemoval >":
        """
        Makes a deltaonremoval on <self> because <self> has disappeared from the ds.

        Returns
        -------
        opencascade::handle<TDF_DeltaOnRemoval>

        """
        return _TDF.TDF_Attribute_DeltaOnRemoval(self, *args)


    def DeltaOnResume(self, *args) -> "opencascade::handle< TDF_DeltaOnResume >":
        """
        Makes an attributedelta because <self> has been resumed.

        Returns
        -------
        opencascade::handle<TDF_DeltaOnResume>

        """
        return _TDF.TDF_Attribute_DeltaOnResume(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDF_Attribute self) -> std::string"""
        return _TDF.TDF_Attribute_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDF_Attribute self, int depth=-1) -> std::string
        DumpJsonToString(TDF_Attribute self) -> std::string
        """
        return _TDF.TDF_Attribute_DumpJsonToString(self, depth)


    def FindAttribute(self, *args) -> "Standard_Boolean":
        """
        Finds an associated attribute of <self>, according to <anid>. the returned <anattribute> is a valid one. the method returns true if found, false otherwise. a removed attribute cannot be found using this method.

        Parameters
        ----------
        anID: Standard_GUID
        anAttribute: TDF_Attribute

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_FindAttribute(self, *args)


    def Forget(self, *args) -> "void":
        """
        Forgets the attribute. <atransaction> is the current transaction in which the forget is done. a forgotten attribute is also flagged not 'valid'. //! a forgotten attribute is invisible. set also the 'valid' status to false. obvioulsy, df cannot empty an attribute (this has a semantic signification), but can remove it from the structure. so, a forgotten attribute is not an empty one, but a soon dead one. //! should be private.

        Parameters
        ----------
        aTransaction: int

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_Forget(self, *args)


    def ForgetAllAttributes(self, *args) -> "void":
        """
        Forgets all the attributes attached to the label of <self>. does it on the sub-labels if <clearchildren> is set to true. of course, this method is compatible with transaction & delta mecanisms. be carefull that if <self> will have a null label after this call.

        Parameters
        ----------
        clearChildren: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_ForgetAllAttributes(self, *args)


    def ForgetAttribute(self, *args) -> "Standard_Boolean":
        """
        Forgets the attribute of guid <aguid> associated to the label of <self>. be carefull that if <self> is the attribute of <guid>, <self> will have a null label after this call. if the attribute doesn't exist returns false. otherwise returns true.

        Parameters
        ----------
        aguid: Standard_GUID

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_ForgetAttribute(self, *args)


    def ID(self, *args) -> "Standard_GUID const &":
        """
        Returns the id of the attribute.

        Returns
        -------
        Standard_GUID

        """
        return _TDF.TDF_Attribute_ID(self, *args)


    def IsAttribute(self, *args) -> "Standard_Boolean":
        """
        Returns true if it exists an associated attribute of <self> with <anid> as id.

        Parameters
        ----------
        anID: Standard_GUID

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_IsAttribute(self, *args)


    def IsBackuped(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute backup status is set. this status is set/unset by the backup() method.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_IsBackuped(self, *args)


    def IsForgotten(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute forgotten status is set. //! shortcut methods concerning associated attributes =================================================.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_IsForgotten(self, *args)


    def IsNew(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute has no backup.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_IsNew(self, *args)


    def IsValid(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attribute is valid; i.e. not a backuped or removed one.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Attribute_IsValid(self, *args)


    def Label(self, *args) -> "TDF_Label const":
        """
        Returns the label to which the attribute is attached. if the label is not included in a df, the label is null. see label. warning if the label is not included in a data framework, it is null. this function should not be redefined inline.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_Attribute_Label(self, *args)


    def NewEmpty(self, *args) -> "opencascade::handle< TDF_Attribute >":
        """
        Returns an new empty attribute from the good end type. it is used by the copy algorithm.

        Returns
        -------
        opencascade::handle<TDF_Attribute>

        """
        return _TDF.TDF_Attribute_NewEmpty(self, *args)


    def Paste(self, *args) -> "void":
        """
        This method is different from the 'copy' one, because it is used when copying an attribute from a source structure into a target structure. this method may paste the contents of <self> into <intoattribute>. //! the given pasted attribute can be full or empty of its contents. but don't make a new! just set the contents! //! it is possible to use <arelocationtable> to get/set the relocation value of a source attribute.

        Parameters
        ----------
        intoAttribute: TDF_Attribute
        aRelocationTable: TDF_RelocationTable

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_Paste(self, *args)


    def References(self, *args) -> "void":
        """
        Adds the first level referenced attributes and labels to <adataset>. //! for this, use the addlabel or addattribute of dataset. //! if there is none, do not implement the method.

        Parameters
        ----------
        aDataSet: TDF_DataSet

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_References(self, *args)


    def Restore(self, *args) -> "void":
        """
        Restores the backuped contents from <anattribute> into this one. it is used when aborting a transaction.

        Parameters
        ----------
        anAttribute: TDF_Attribute

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_Restore(self, *args)


    def SetID(self, *args) -> "void":
        """
        Sets specific id of the attribute (supports several attributes of one type at the same label feature).

        Parameters
        ----------
        &: Standard_GUID

        Returns
        -------
        None

        Sets default id defined in nested class (to be used for attributes having user id feature).

        Returns
        -------
        None

        """
        return _TDF.TDF_Attribute_SetID(self, *args)


    def Transaction(self, *args) -> "Standard_Integer":
        """
        Returns the transaction index in which the attribute has been created or modified.

        Returns
        -------
        int

        """
        return _TDF.TDF_Attribute_Transaction(self, *args)


    def UntilTransaction(self, *args) -> "Standard_Integer":
        """
        Returns the upper transaction index until which the attribute is/was valid. this number may vary. a removed attribute validity range is reduced to its transaction index.

        Returns
        -------
        int

        """
        return _TDF.TDF_Attribute_UntilTransaction(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_Attribute_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_Attribute
    __del__ = lambda self: None
TDF_Attribute_swigregister = _TDF.TDF_Attribute_swigregister
TDF_Attribute_swigregister(TDF_Attribute)

class TDF_AttributeDelta(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeDelta, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeDelta, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Apply(self, *args) -> "void":
        """
        Applies the delta to the attribute.

        Returns
        -------
        None

        """
        return _TDF.TDF_AttributeDelta_Apply(self, *args)


    def Attribute(self, *args) -> "opencascade::handle< TDF_Attribute >":
        """
        Returns the reference attribute.

        Returns
        -------
        opencascade::handle<TDF_Attribute>

        """
        return _TDF.TDF_AttributeDelta_Attribute(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDF_AttributeDelta self) -> std::string"""
        return _TDF.TDF_AttributeDelta_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDF_AttributeDelta self, int depth=-1) -> std::string
        DumpJsonToString(TDF_AttributeDelta self) -> std::string
        """
        return _TDF.TDF_AttributeDelta_DumpJsonToString(self, depth)


    def ID(self, *args) -> "Standard_GUID":
        """
        Returns the id of the attribute concerned by <self>.

        Returns
        -------
        Standard_GUID

        """
        return _TDF.TDF_AttributeDelta_ID(self, *args)


    def Label(self, *args) -> "TDF_Label":
        """
        Returns the label concerned by <self>.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_AttributeDelta_Label(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_AttributeDelta_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_AttributeDelta
    __del__ = lambda self: None
TDF_AttributeDelta_swigregister = _TDF.TDF_AttributeDelta_swigregister
TDF_AttributeDelta_swigregister(TDF_AttributeDelta)

class TDF_AttributeIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_AttributeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_AttributeIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aLabel: TDF_Label
        withoutForgotten: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aLabelNode: TDF_LabelNodePtr
        withoutForgotten: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_AttributeIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLabel: TDF_Label
        withoutForgotten: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDF.TDF_AttributeIterator_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDF.TDF_AttributeIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TDF.TDF_AttributeIterator_Next(self, *args)


    def PtrValue(self, *args) -> "TDF_Attribute const *":
        """
        Provides an access to the internal pointer of the current attribute. the method has better performance as not-creating handle.

        Returns
        -------
        TDF_Attribute *

        """
        return _TDF.TDF_AttributeIterator_PtrValue(self, *args)


    def Value(self, *args) -> "opencascade::handle< TDF_Attribute >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TDF_Attribute>

        """
        return _TDF.TDF_AttributeIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_AttributeIterator
    __del__ = lambda self: None
TDF_AttributeIterator_swigregister = _TDF.TDF_AttributeIterator_swigregister
TDF_AttributeIterator_swigregister(TDF_AttributeIterator)

class TDF_ChildIDIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ChildIDIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ChildIDIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty iterator.

        Returns
        -------
        None

        Iterates on the children of the given label. if <alllevels> option is set to true, it explores not only the first, but all the sub label levels.

        Parameters
        ----------
        aLabel: TDF_Label
        anID: Standard_GUID
        allLevels: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_ChildIDIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args) -> "void":
        """
        Initializes the iteration on the children of the given label. if <alllevels> option is set to true, it explores not only the first, but all the sub label levels.

        Parameters
        ----------
        aLabel: TDF_Label
        anID: Standard_GUID
        allLevels: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TDF.TDF_ChildIDIterator_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a current item in the iteration.

        Returns
        -------
        bool

        """
        return _TDF.TDF_ChildIDIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Move to the next item.

        Returns
        -------
        None

        """
        return _TDF.TDF_ChildIDIterator_Next(self, *args)


    def NextBrother(self, *args) -> "void":
        """
        Move to the next brother. if there is none, go up etc. this method is interesting only with 'alllevels' behavior, because it avoids to explore the current label children.

        Returns
        -------
        None

        """
        return _TDF.TDF_ChildIDIterator_NextBrother(self, *args)


    def Value(self, *args) -> "opencascade::handle< TDF_Attribute >":
        """
        Returns the current item; a null handle if there is none.

        Returns
        -------
        opencascade::handle<TDF_Attribute>

        """
        return _TDF.TDF_ChildIDIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_ChildIDIterator
    __del__ = lambda self: None
TDF_ChildIDIterator_swigregister = _TDF.TDF_ChildIDIterator_swigregister
TDF_ChildIDIterator_swigregister(TDF_ChildIDIterator)

class TDF_ChildIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ChildIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ChildIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty iterator object to explore the children of a label.

        Returns
        -------
        None

        Constructs the iterator object defined by the label alabel. iterates on the children of the given label. if <alllevels> option is set to true, it explores not only the first, but all the sub label levels.

        Parameters
        ----------
        aLabel: TDF_Label
        allLevels: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_ChildIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args) -> "void":
        """
        Initializes the iteration on the children of the given label. if <alllevels> option is set to true, it explores not only the first, but all the sub label levels. if alllevels is false, only the first level of child labels is explored. in the example below, the label is iterated using initialize, more and next and its child labels dumped using tdf_tool::entry. example void dumpchildren(const tdf_label& alabel) { tdf_childiterator it; tcollection_asciistring es; for (it.initialize(alabel,standard_true); it.more(); it.next()){ tdf_tool::entry(it.value(),es); std::cout << as.tocstring() << std::endl; } }.

        Parameters
        ----------
        aLabel: TDF_Label
        allLevels: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TDF.TDF_ChildIterator_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Returns true if a current label is found in the iteration process.

        Returns
        -------
        bool

        """
        return _TDF.TDF_ChildIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Move the current iteration to the next item.

        Returns
        -------
        None

        """
        return _TDF.TDF_ChildIterator_Next(self, *args)


    def NextBrother(self, *args) -> "void":
        """
        Moves this iteration to the next brother label. a brother label is one with the same father as an initial label. use this function when the non-empty constructor or initialize has alllevels set to true. the result is that the iteration does not explore the children of the current label. this method is interesting only with 'alllevels' behavior, because it avoids to explore the current label children.

        Returns
        -------
        None

        """
        return _TDF.TDF_ChildIterator_NextBrother(self, *args)


    def Value(self, *args) -> "TDF_Label const":
        """
        Returns the current label; or, if there is none, a null label.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_ChildIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_ChildIterator
    __del__ = lambda self: None
TDF_ChildIterator_swigregister = _TDF.TDF_ChildIterator_swigregister
TDF_ChildIterator_swigregister(TDF_ChildIterator)

class TDF_ClosureMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ClosureMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ClosureMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an objet with all modes set to <amode>.

        Parameters
        ----------
        aMode: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_ClosureMode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Descendants(self, *args) -> "Standard_Boolean":
        """
        Sets the mode 'descendants' to <astatus>. //! 'descendants' mode means we add to the data set the children labels of each user given label. we do not do that with the labels found applying uptofirstlevel option.

        Parameters
        ----------
        aStatus: bool

        Returns
        -------
        None

        Returns true if the mode 'descendants' is set.

        Returns
        -------
        bool

        """
        return _TDF.TDF_ClosureMode_Descendants(self, *args)


    def References(self, *args) -> "Standard_Boolean":
        """
        Sets the mode 'references' to <astatus>. //! 'references' mode means we add to the data set the descendants of an attribute, by calling the attribute method descendants().

        Parameters
        ----------
        aStatus: bool

        Returns
        -------
        None

        Returns true if the mode 'references' is set.

        Returns
        -------
        bool

        """
        return _TDF.TDF_ClosureMode_References(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_ClosureMode
    __del__ = lambda self: None
TDF_ClosureMode_swigregister = _TDF.TDF_ClosureMode_swigregister
TDF_ClosureMode_swigregister(TDF_ClosureMode)

class TDF_ClosureTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ClosureTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ClosureTool, name)
    __repr__ = _swig_repr

    def Closure(*args) -> "void":
        """
        Builds the transitive closure of label and attribute sets into <adataset>.

        Parameters
        ----------
        aDataSet: TDF_DataSet

        Returns
        -------
        None

        Builds the transitive closure of label and attribute sets into <adataset>. uses <afilter> to determine if an attribute has to be taken in account or not. uses <amode> for various way of closing.

        Parameters
        ----------
        aDataSet: TDF_DataSet
        aFilter: TDF_IDFilter
        aMode: TDF_ClosureMode

        Returns
        -------
        None

        Builds the transitive closure of <alabel>.

        Parameters
        ----------
        aLabel: TDF_Label
        aLabMap: TDF_LabelMap
        anAttMap: TDF_AttributeMap
        aFilter: TDF_IDFilter
        aMode: TDF_ClosureMode

        Returns
        -------
        None

        """
        return _TDF.TDF_ClosureTool_Closure(*args)

    Closure = staticmethod(Closure)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TDF.new_TDF_ClosureTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDF.delete_TDF_ClosureTool
    __del__ = lambda self: None
TDF_ClosureTool_swigregister = _TDF.TDF_ClosureTool_swigregister
TDF_ClosureTool_swigregister(TDF_ClosureTool)

def TDF_ClosureTool_Closure(*args) -> "void":
    """
    Builds the transitive closure of label and attribute sets into <adataset>.

    Parameters
    ----------
    aDataSet: TDF_DataSet

    Returns
    -------
    None

    Builds the transitive closure of label and attribute sets into <adataset>. uses <afilter> to determine if an attribute has to be taken in account or not. uses <amode> for various way of closing.

    Parameters
    ----------
    aDataSet: TDF_DataSet
    aFilter: TDF_IDFilter
    aMode: TDF_ClosureMode

    Returns
    -------
    None

    Builds the transitive closure of <alabel>.

    Parameters
    ----------
    aLabel: TDF_Label
    aLabMap: TDF_LabelMap
    anAttMap: TDF_AttributeMap
    aFilter: TDF_IDFilter
    aMode: TDF_ClosureMode

    Returns
    -------
    None

    """
    return _TDF.TDF_ClosureTool_Closure(*args)

class TDF_ComparisonTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_ComparisonTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_ComparisonTool, name)
    __repr__ = _swig_repr

    def Compare(*args) -> "void":
        """
        Compares <asourcedataset> with <atargetdataset>, updating <arelocationtable> with labels and attributes found in both sets.

        Parameters
        ----------
        aSourceDataSet: TDF_DataSet
        aTargetDataSet: TDF_DataSet
        aFilter: TDF_IDFilter
        aRelocationTable: TDF_RelocationTable

        Returns
        -------
        None

        """
        return _TDF.TDF_ComparisonTool_Compare(*args)

    Compare = staticmethod(Compare)

    def Cut(*args) -> "void":
        """
        Removes attributes from <adataset>.

        Parameters
        ----------
        aDataSet: TDF_DataSet

        Returns
        -------
        None

        """
        return _TDF.TDF_ComparisonTool_Cut(*args)

    Cut = staticmethod(Cut)

    def IsSelfContained(*args) -> "Standard_Boolean":
        """
        Returns true if all the labels of <adataset> are descendant of <alabel>.

        Parameters
        ----------
        aLabel: TDF_Label
        aDataSet: TDF_DataSet

        Returns
        -------
        bool

        """
        return _TDF.TDF_ComparisonTool_IsSelfContained(*args)

    IsSelfContained = staticmethod(IsSelfContained)

    def SourceUnbound(*args) -> "Standard_Boolean":
        """
        Finds from <arefdataset> all the keys not bound into <arelocationtable> and put them into <adiffdataset>. returns true if the difference contains at least one key. (a key is a source object). //! <anoption> may take the following values: 1 : labels treatment only; 2 : attributes treatment only (default value); 3 : both labels & attributes treatment.

        Parameters
        ----------
        aRefDataSet: TDF_DataSet
        aRelocationTable: TDF_RelocationTable
        aFilter: TDF_IDFilter
        aDiffDataSet: TDF_DataSet
        anOption: int,optional
        	default value is 2

        Returns
        -------
        bool

        """
        return _TDF.TDF_ComparisonTool_SourceUnbound(*args)

    SourceUnbound = staticmethod(SourceUnbound)

    def TargetUnbound(*args) -> "Standard_Boolean":
        """
        Substracts from <arefdataset> all the items bound into <arelocationtable>. the result is put into <adiffdataset>. returns true if the difference contains at least one item. (an item is a target object). //! <anoption> may take the following values: 1 : labels treatment only; 2 : attributes treatment only(default value); 3 : both labels & attributes treatment.

        Parameters
        ----------
        aRefDataSet: TDF_DataSet
        aRelocationTable: TDF_RelocationTable
        aFilter: TDF_IDFilter
        aDiffDataSet: TDF_DataSet
        anOption: int,optional
        	default value is 2

        Returns
        -------
        bool

        """
        return _TDF.TDF_ComparisonTool_TargetUnbound(*args)

    TargetUnbound = staticmethod(TargetUnbound)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TDF.new_TDF_ComparisonTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDF.delete_TDF_ComparisonTool
    __del__ = lambda self: None
TDF_ComparisonTool_swigregister = _TDF.TDF_ComparisonTool_swigregister
TDF_ComparisonTool_swigregister(TDF_ComparisonTool)

def TDF_ComparisonTool_Compare(*args) -> "void":
    """
    Compares <asourcedataset> with <atargetdataset>, updating <arelocationtable> with labels and attributes found in both sets.

    Parameters
    ----------
    aSourceDataSet: TDF_DataSet
    aTargetDataSet: TDF_DataSet
    aFilter: TDF_IDFilter
    aRelocationTable: TDF_RelocationTable

    Returns
    -------
    None

    """
    return _TDF.TDF_ComparisonTool_Compare(*args)

def TDF_ComparisonTool_Cut(*args) -> "void":
    """
    Removes attributes from <adataset>.

    Parameters
    ----------
    aDataSet: TDF_DataSet

    Returns
    -------
    None

    """
    return _TDF.TDF_ComparisonTool_Cut(*args)

def TDF_ComparisonTool_IsSelfContained(*args) -> "Standard_Boolean":
    """
    Returns true if all the labels of <adataset> are descendant of <alabel>.

    Parameters
    ----------
    aLabel: TDF_Label
    aDataSet: TDF_DataSet

    Returns
    -------
    bool

    """
    return _TDF.TDF_ComparisonTool_IsSelfContained(*args)

def TDF_ComparisonTool_SourceUnbound(*args) -> "Standard_Boolean":
    """
    Finds from <arefdataset> all the keys not bound into <arelocationtable> and put them into <adiffdataset>. returns true if the difference contains at least one key. (a key is a source object). //! <anoption> may take the following values: 1 : labels treatment only; 2 : attributes treatment only (default value); 3 : both labels & attributes treatment.

    Parameters
    ----------
    aRefDataSet: TDF_DataSet
    aRelocationTable: TDF_RelocationTable
    aFilter: TDF_IDFilter
    aDiffDataSet: TDF_DataSet
    anOption: int,optional
    	default value is 2

    Returns
    -------
    bool

    """
    return _TDF.TDF_ComparisonTool_SourceUnbound(*args)

def TDF_ComparisonTool_TargetUnbound(*args) -> "Standard_Boolean":
    """
    Substracts from <arefdataset> all the items bound into <arelocationtable>. the result is put into <adiffdataset>. returns true if the difference contains at least one item. (an item is a target object). //! <anoption> may take the following values: 1 : labels treatment only; 2 : attributes treatment only(default value); 3 : both labels & attributes treatment.

    Parameters
    ----------
    aRefDataSet: TDF_DataSet
    aRelocationTable: TDF_RelocationTable
    aFilter: TDF_IDFilter
    aDiffDataSet: TDF_DataSet
    anOption: int,optional
    	default value is 2

    Returns
    -------
    bool

    """
    return _TDF.TDF_ComparisonTool_TargetUnbound(*args)

class TDF_CopyLabel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_CopyLabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_CopyLabel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        Copytool.

        Parameters
        ----------
        aSource: TDF_Label
        aTarget: TDF_Label

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_CopyLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ExternalReferences(*args) -> "void":
        """
        Check external references and if exist fills the aexternals map.

        Parameters
        ----------
        Lab: TDF_Label
        aExternals: TDF_AttributeMap
        aFilter: TDF_IDFilter

        Returns
        -------
        bool

        Check external references and if exist fills the aexternals map.

        Parameters
        ----------
        aRefLab: TDF_Label
        Lab: TDF_Label
        aExternals: TDF_AttributeMap
        aFilter: TDF_IDFilter
        aDataSet: TDF_DataSet

        Returns
        -------
        None

        """
        return _TDF.TDF_CopyLabel_ExternalReferences(*args)

    ExternalReferences = staticmethod(ExternalReferences)

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDF.TDF_CopyLabel_IsDone(self, *args)


    def Load(self, *args) -> "void":
        """
        Loads src and tgt labels.

        Parameters
        ----------
        aSource: TDF_Label
        aTarget: TDF_Label

        Returns
        -------
        None

        """
        return _TDF.TDF_CopyLabel_Load(self, *args)


    def Perform(self, *args) -> "void":
        """
        Performs algorithm of selfcontained copy.

        Returns
        -------
        None

        """
        return _TDF.TDF_CopyLabel_Perform(self, *args)


    def RelocationTable(self, *args) -> "opencascade::handle< TDF_RelocationTable > const &":
        """
        Returns relocation table.

        Returns
        -------
        opencascade::handle<TDF_RelocationTable>

        """
        return _TDF.TDF_CopyLabel_RelocationTable(self, *args)


    def UseFilter(self, *args) -> "void":
        """
        Sets filter.

        Parameters
        ----------
        aFilter: TDF_IDFilter

        Returns
        -------
        None

        """
        return _TDF.TDF_CopyLabel_UseFilter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_CopyLabel
    __del__ = lambda self: None
TDF_CopyLabel_swigregister = _TDF.TDF_CopyLabel_swigregister
TDF_CopyLabel_swigregister(TDF_CopyLabel)

def TDF_CopyLabel_ExternalReferences(*args) -> "void":
    """
    Check external references and if exist fills the aexternals map.

    Parameters
    ----------
    Lab: TDF_Label
    aExternals: TDF_AttributeMap
    aFilter: TDF_IDFilter

    Returns
    -------
    bool

    Check external references and if exist fills the aexternals map.

    Parameters
    ----------
    aRefLab: TDF_Label
    Lab: TDF_Label
    aExternals: TDF_AttributeMap
    aFilter: TDF_IDFilter
    aDataSet: TDF_DataSet

    Returns
    -------
    None

    """
    return _TDF.TDF_CopyLabel_ExternalReferences(*args)

class TDF_CopyTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_CopyTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_CopyTool, name)
    __repr__ = _swig_repr

    def Copy(*args) -> "void":
        """
        Copy <asourcedataset> with using and updating <arelocationtable>. this method ignores target attributes privilege over source ones.

        Parameters
        ----------
        aSourceDataSet: TDF_DataSet
        aRelocationTable: TDF_RelocationTable

        Returns
        -------
        None

        Copy <asourcedataset> using and updating <arelocationtable>. use <aprivilegefilter> to give a list of ids for which the target attribute prevails over the source one.

        Parameters
        ----------
        aSourceDataSet: TDF_DataSet
        aRelocationTable: TDF_RelocationTable
        aPrivilegeFilter: TDF_IDFilter

        Returns
        -------
        None

        Copy <asourcedataset> using and updating <arelocationtable>. use <aprivilegefilter> to give a list of ids for which the target attribute prevails over the source one. if <setselfcontained> is set to true, every tdf_reference will be replaced by the referenced structure according to <areffilter>. //! nb: <areffilter> is used only if <setselfcontained> is true. internal root label copy recursive method.

        Parameters
        ----------
        aSourceDataSet: TDF_DataSet
        aRelocationTable: TDF_RelocationTable
        aPrivilegeFilter: TDF_IDFilter
        aRefFilter: TDF_IDFilter
        setSelfContained: bool

        Returns
        -------
        None

        """
        return _TDF.TDF_CopyTool_Copy(*args)

    Copy = staticmethod(Copy)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TDF.new_TDF_CopyTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDF.delete_TDF_CopyTool
    __del__ = lambda self: None
TDF_CopyTool_swigregister = _TDF.TDF_CopyTool_swigregister
TDF_CopyTool_swigregister(TDF_CopyTool)

def TDF_CopyTool_Copy(*args) -> "void":
    """
    Copy <asourcedataset> with using and updating <arelocationtable>. this method ignores target attributes privilege over source ones.

    Parameters
    ----------
    aSourceDataSet: TDF_DataSet
    aRelocationTable: TDF_RelocationTable

    Returns
    -------
    None

    Copy <asourcedataset> using and updating <arelocationtable>. use <aprivilegefilter> to give a list of ids for which the target attribute prevails over the source one.

    Parameters
    ----------
    aSourceDataSet: TDF_DataSet
    aRelocationTable: TDF_RelocationTable
    aPrivilegeFilter: TDF_IDFilter

    Returns
    -------
    None

    Copy <asourcedataset> using and updating <arelocationtable>. use <aprivilegefilter> to give a list of ids for which the target attribute prevails over the source one. if <setselfcontained> is set to true, every tdf_reference will be replaced by the referenced structure according to <areffilter>. //! nb: <areffilter> is used only if <setselfcontained> is true. internal root label copy recursive method.

    Parameters
    ----------
    aSourceDataSet: TDF_DataSet
    aRelocationTable: TDF_RelocationTable
    aPrivilegeFilter: TDF_IDFilter
    aRefFilter: TDF_IDFilter
    setSelfContained: bool

    Returns
    -------
    None

    """
    return _TDF.TDF_CopyTool_Copy(*args)

class TDF_Data(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_Data, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_Data, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        A new and empty data structure.

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_Data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AllowModification(self, *args) -> "void":
        """
        Sets modification mode.

        Parameters
        ----------
        isAllowed: bool

        Returns
        -------
        None

        """
        return _TDF.TDF_Data_AllowModification(self, *args)


    def Destroy(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TDF.TDF_Data_Destroy(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDF_Data self) -> std::string"""
        return _TDF.TDF_Data_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDF_Data self, int depth=-1) -> std::string
        DumpJsonToString(TDF_Data self) -> std::string
        """
        return _TDF.TDF_Data_DumpJsonToString(self, depth)


    def IsApplicable(self, *args) -> "Standard_Boolean":
        """
        Returns true if <adelta> is applicable here and now.

        Parameters
        ----------
        aDelta: TDF_Delta

        Returns
        -------
        bool

        """
        return _TDF.TDF_Data_IsApplicable(self, *args)


    def IsModificationAllowed(self, *args) -> "Standard_Boolean":
        """
        Returns modification mode.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Data_IsModificationAllowed(self, *args)


    def LabelNodeAllocator(self, *args) -> "TDF_HAllocator const &":
        """
        Returns tdf_hallocator, which is an incremental allocator used by tdf_labelnode. this allocator is used to manage tdf_labelnode objects, but it can also be used for allocating memory to application-specific data (be careful because this allocator does not release the memory). the benefits of this allocation scheme are noticeable when dealing with large ocaf documents, due to: 1. very quick allocation of objects (memory heap is not used, the algorithm that replaces it is very simple). 2. very quick destruction of objects (memory is released not by destructors of tdf_labelnode, but rather by the destructor of tdf_data). 3. tdf_labelnode objects do not fragmentize the memory; they are kept compactly in a number of arrays of 16k each. 4. swapping is reduced on large data, because each document now occupies a smaller number of memory pages.

        Returns
        -------
        TDF_HAllocator

        """
        return _TDF.TDF_Data_LabelNodeAllocator(self, *args)


    def NotUndoMode(self, *args) -> "Standard_Boolean":
        """
        Returns the undo mode status.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Data_NotUndoMode(self, *args)


    def Root(self, *args) -> "TDF_Label const":
        """
        Returns the root label of the data structure.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_Data_Root(self, *args)


    def Time(self, *args) -> "Standard_Integer":
        """
        Returns the current tick. it is incremented each commit.

        Returns
        -------
        int

        """
        return _TDF.TDF_Data_Time(self, *args)


    def Transaction(self, *args) -> "Standard_Integer":
        """
        Returns the current transaction number.

        Returns
        -------
        int

        """
        return _TDF.TDF_Data_Transaction(self, *args)


    def Undo(self, *args) -> "opencascade::handle< TDF_Delta >":
        """
        Apply <adelta> to undo a set of attribute modifications. //! optionnal <withdelta> set to true indiquates a delta set must be generated. (see above).

        Parameters
        ----------
        aDelta: TDF_Delta
        withDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDF_Delta>

        """
        return _TDF.TDF_Data_Undo(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_Data_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_Data
    __del__ = lambda self: None
TDF_Data_swigregister = _TDF.TDF_Data_swigregister
TDF_Data_swigregister(TDF_Data)

class TDF_DataSet(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DataSet, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DataSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty dataset object.

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_DataSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddAttribute(self, *args) -> "void":
        """
        Adds <anattribute> into the current data set.

        Parameters
        ----------
        anAttribute: TDF_Attribute

        Returns
        -------
        None

        """
        return _TDF.TDF_DataSet_AddAttribute(self, *args)


    def AddLabel(self, *args) -> "void":
        """
        Adds <alabel> in the current data set.

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        None

        """
        return _TDF.TDF_DataSet_AddLabel(self, *args)


    def AddRoot(self, *args) -> "void":
        """
        Adds a root label to <myrootlabels>.

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        None

        """
        return _TDF.TDF_DataSet_AddRoot(self, *args)


    def Attributes(self, *args) -> "TDF_AttributeMap &":
        """
        Returns the map of attributes in the current data set. this map can be used directly, or updated.

        Returns
        -------
        TDF_AttributeMap

        """
        return _TDF.TDF_DataSet_Attributes(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears all information.

        Returns
        -------
        None

        """
        return _TDF.TDF_DataSet_Clear(self, *args)


    def ContainsAttribute(self, *args) -> "Standard_Boolean":
        """
        Returns true if <anattribute> is in the data set.

        Parameters
        ----------
        anAttribute: TDF_Attribute

        Returns
        -------
        bool

        """
        return _TDF.TDF_DataSet_ContainsAttribute(self, *args)


    def ContainsLabel(self, *args) -> "Standard_Boolean":
        """
        Returns true if the label <alabel> is in the data set.

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        bool

        """
        return _TDF.TDF_DataSet_ContainsLabel(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDF_DataSet self) -> std::string"""
        return _TDF.TDF_DataSet_DumpToString(self)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is at least one label or one attribute.

        Returns
        -------
        bool

        """
        return _TDF.TDF_DataSet_IsEmpty(self, *args)


    def Labels(self, *args) -> "TDF_LabelMap &":
        """
        Returns the map of labels in this data set. this map can be used directly, or updated.

        Returns
        -------
        TDF_LabelMap

        """
        return _TDF.TDF_DataSet_Labels(self, *args)


    def Roots(self, *args) -> "TDF_LabelList &":
        """
        Returns <myrootlabels> to be used or updated.

        Returns
        -------
        TDF_LabelList

        """
        return _TDF.TDF_DataSet_Roots(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_DataSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_DataSet
    __del__ = lambda self: None
TDF_DataSet_swigregister = _TDF.TDF_DataSet_swigregister
TDF_DataSet_swigregister(TDF_DataSet)

class TDF_Delta(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_Delta, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_Delta, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a delta.

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_Delta(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AttributeDeltas(self, *args) -> "TDF_AttributeDeltaList const &":
        """
        Returns the field <myattdeltalist>.

        Returns
        -------
        TDF_AttributeDeltaList

        """
        return _TDF.TDF_Delta_AttributeDeltas(self, *args)


    def BeginTime(self, *args) -> "Standard_Integer":
        """
        Returns the field <mybegintime>.

        Returns
        -------
        int

        """
        return _TDF.TDF_Delta_BeginTime(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDF_Delta self) -> std::string"""
        return _TDF.TDF_Delta_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDF_Delta self, int depth=-1) -> std::string
        DumpJsonToString(TDF_Delta self) -> std::string
        """
        return _TDF.TDF_Delta_DumpJsonToString(self, depth)


    def EndTime(self, *args) -> "Standard_Integer":
        """
        Returns the field <myendtime>.

        Returns
        -------
        int

        """
        return _TDF.TDF_Delta_EndTime(self, *args)


    def IsApplicable(self, *args) -> "Standard_Boolean":
        """
        Returns true if the undo action of <self> is applicable at <acurrenttime>.

        Parameters
        ----------
        aCurrentTime: int

        Returns
        -------
        bool

        """
        return _TDF.TDF_Delta_IsApplicable(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is nothing to undo.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Delta_IsEmpty(self, *args)


    def Labels(self, *args) -> "void":
        """
        Adds in <alabellist> the labels of the attribute deltas. caution: <alabellist> is not cleared before use.

        Parameters
        ----------
        aLabelList: TDF_LabelList

        Returns
        -------
        None

        """
        return _TDF.TDF_Delta_Labels(self, *args)


    def Name(self, *args) -> "TCollection_ExtendedString":
        """
        Returns a name associated with this delta.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _TDF.TDF_Delta_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        Associates a name <thename> with this delta.

        Parameters
        ----------
        theName: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _TDF.TDF_Delta_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_Delta_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_Delta
    __del__ = lambda self: None
TDF_Delta_swigregister = _TDF.TDF_Delta_swigregister
TDF_Delta_swigregister(TDF_Delta)

class TDF_IDFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_IDFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_IDFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an id/attribute filter based on an id list. the default mode is 'ignore all but...'. //! this filter has 2 working mode: keep and ignore. //! ignore/exclusive mode: all ids are ignored except these set to be kept, using keep(). of course, it is possible set an kept id to be ignored using ignore(). //! keep/inclusive mode: all ids are kept except these set to be ignored, using ignore(). of course, it is possible set an ignored id to be kept using keep().

        Parameters
        ----------
        ignoreMode: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_IDFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Assign(self, *args) -> "void":
        """
        Assignment.

        Parameters
        ----------
        theFilter: TDF_IDFilter

        Returns
        -------
        None

        """
        return _TDF.TDF_IDFilter_Assign(self, *args)


    def Copy(self, *args) -> "void":
        """
        Copies into <self> the contents of <fromfilter>. <self> is cleared before copy.

        Parameters
        ----------
        fromFilter: TDF_IDFilter

        Returns
        -------
        None

        """
        return _TDF.TDF_IDFilter_Copy(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDF_IDFilter self) -> std::string"""
        return _TDF.TDF_IDFilter_DumpToString(self)


    def IDList(self, *args) -> "void":
        """
        Copies the list of id to be kept or ignored in <anidlist>. <anidlist> is cleared before use.

        Parameters
        ----------
        anIDList: TDF_IDList

        Returns
        -------
        None

        """
        return _TDF.TDF_IDFilter_IDList(self, *args)


    def Ignore(self, *args) -> "void":
        """
        An attribute with <anid> as id is to be ignored and the filter will answer false to the question iskept(<anid>).

        Parameters
        ----------
        anID: Standard_GUID

        Returns
        -------
        None

        Attributes with id owned by <anidlist> are to be ignored and the filter will answer false to the question iskept(<anid>) with id from <anidlist>.

        Parameters
        ----------
        anIDList: TDF_IDList

        Returns
        -------
        None

        """
        return _TDF.TDF_IDFilter_Ignore(self, *args)


    def IgnoreAll(self, *args) -> "Standard_Boolean":
        """
        The list of id is cleared and the filter mode is set to ignore mode if <keep> is true; false otherwise.

        Parameters
        ----------
        ignore: bool

        Returns
        -------
        None

        Returns true is the mode is set to 'ignore all but...'.

        Returns
        -------
        bool

        """
        return _TDF.TDF_IDFilter_IgnoreAll(self, *args)


    def IsIgnored(self, *args) -> "Standard_Boolean":
        """
        Returns true if the id is to be ignored.

        Parameters
        ----------
        anID: Standard_GUID

        Returns
        -------
        bool

        Returns true if the attribute is to be ignored.

        Parameters
        ----------
        anAtt: TDF_Attribute

        Returns
        -------
        bool

        """
        return _TDF.TDF_IDFilter_IsIgnored(self, *args)


    def IsKept(self, *args) -> "Standard_Boolean":
        """
        Returns true if the id is to be kept.

        Parameters
        ----------
        anID: Standard_GUID

        Returns
        -------
        bool

        Returns true if the attribute is to be kept.

        Parameters
        ----------
        anAtt: TDF_Attribute

        Returns
        -------
        bool

        """
        return _TDF.TDF_IDFilter_IsKept(self, *args)


    def Keep(self, *args) -> "void":
        """
        An attribute with <anid> as id is to be kept and the filter will answer true to the question iskept(<anid>).

        Parameters
        ----------
        anID: Standard_GUID

        Returns
        -------
        None

        Attributes with id owned by <anidlist> are to be kept and the filter will answer true to the question iskept(<anid>) with id from <anidlist>.

        Parameters
        ----------
        anIDList: TDF_IDList

        Returns
        -------
        None

        """
        return _TDF.TDF_IDFilter_Keep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_IDFilter
    __del__ = lambda self: None
TDF_IDFilter_swigregister = _TDF.TDF_IDFilter_swigregister
TDF_IDFilter_swigregister(TDF_IDFilter)

class TDF_Label(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_Label, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_Label, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty label object.

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_Label(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddAttribute(self, *args) -> "void":
        """
        Adds an attribute to the current label. raises if there is already one.

        Parameters
        ----------
        anAttribute: TDF_Attribute
        append: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDF.TDF_Label_AddAttribute(self, *args)


    def AttributesModified(self, *args) -> "Standard_Boolean":
        """
        Returns true if <self> owns attributes not yet available in transaction 0. it means at least one attribute is new, modified or deleted.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_AttributesModified(self, *args)


    def Data(self, *args) -> "opencascade::handle< TDF_Data >":
        """
        Returns the data owning <self>.

        Returns
        -------
        opencascade::handle<TDF_Data>

        """
        return _TDF.TDF_Label_Data(self, *args)


    def Depth(self, *args) -> "Standard_Integer":
        """
        Returns the depth of the label in the data framework. this corresponds to the number of fathers which this label has, and is used in determining whether a label is root, null or equivalent to another label. exceptions: standard_nullobject if this label is null. this is because a null object can have no depth.

        Returns
        -------
        int

        """
        return _TDF.TDF_Label_Depth(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TDF_Label self) -> std::string"""
        return _TDF.TDF_Label_DumpToString(self)


    def EntryDumpToString(self) -> "std::string":
        """EntryDumpToString(TDF_Label self) -> std::string"""
        return _TDF.TDF_Label_EntryDumpToString(self)


    def Father(self, *args) -> "TDF_Label const":
        """
        Returns the label father. this label may be null if the label is root.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_Label_Father(self, *args)


    def FindAttribute(self, *args) -> "Standard_Boolean":
        """
        Finds an attribute of the current label, according to <anid>. if anattribute is not a valid one, false is returned. //! the method returns true if found, false otherwise. //! a removed attribute cannot be found.

        Parameters
        ----------
        anID: Standard_GUID
        anAttribute: TDF_Attribute

        Returns
        -------
        bool

        Finds an attribute of the current label, according to <anid> and <atransaction>. this attribute has/had to be a valid one for the given transaction index . so, this attribute is not necessary a valid one. //! the method returns true if found, false otherwise. //! a removed attribute cannot be found nor a backuped attribute of a removed one.

        Parameters
        ----------
        anID: Standard_GUID
        aTransaction: int
        anAttribute: TDF_Attribute

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_FindAttribute(self, *args)


    def FindChild(self, *args) -> "TDF_Label":
        """
        Finds a child label having <atag> as tag. creates the tag atag identifies the label which will be the parent. if create is true and no child label is found, a new one is created. example: //creating a label with tag 10 at root tdf_label lab1 = adf->root().findchild(10); //creating labels 7 and 2 on label 10 tdf_label lab2 = lab1.findchild(7); tdf_label lab3 = lab1.findchild(2);.

        Parameters
        ----------
        aTag: int
        create: bool,optional
        	default value is Standard_True

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_Label_FindChild(self, *args)


    def ForgetAllAttributes(self, *args) -> "void":
        """
        Forgets all the attributes. does it on also on the sub-labels if <clearchildren> is set to true. of course, this method is compatible with transaction & delta mecanisms.

        Parameters
        ----------
        clearChildren: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TDF.TDF_Label_ForgetAllAttributes(self, *args)


    def ForgetAttribute(self, *args) -> "Standard_Boolean":
        """
        Forgets an attribute from the current label, setting its forgotten status true and its valid status false. raises if the attribute is not in the structure.

        Parameters
        ----------
        anAttribute: TDF_Attribute

        Returns
        -------
        None

        Forgets the attribute of guid <aguid> from the current label . if the attribute doesn't exist returns false. otherwise returns true.

        Parameters
        ----------
        aguid: Standard_GUID

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_ForgetAttribute(self, *args)


    def HasAttribute(self, *args) -> "Standard_Boolean":
        """
        Returns true if this label has at least one attribute.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_HasAttribute(self, *args)


    def HasChild(self, *args) -> "Standard_Boolean":
        """
        Returns true if this label has at least one child.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_HasChild(self, *args)


    def HasGreaterNode(self, *args) -> "Standard_Boolean":
        """
        Returns true if node address of <self> is greater than <otherlabel> one. used to quickly sort labels (not on entry criterion). //! -c++: inline.

        Parameters
        ----------
        otherLabel: TDF_Label

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_HasGreaterNode(self, *args)


    def HasLowerNode(self, *args) -> "Standard_Boolean":
        """
        Returns true if node address of <self> is lower than <otherlabel> one. used to quickly sort labels (not on entry criterion). //! -c++: inline.

        Parameters
        ----------
        otherLabel: TDF_Label

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_HasLowerNode(self, *args)


    def Imported(self, *args) -> "void":
        """
        Sets or unsets <self> and all its descendants as imported label, according to <astatus>.

        Parameters
        ----------
        aStatus: bool

        Returns
        -------
        None

        """
        return _TDF.TDF_Label_Imported(self, *args)


    def IsAttribute(self, *args) -> "Standard_Boolean":
        """
        Returns true if <self> owns an attribute with <anid> as id.

        Parameters
        ----------
        anID: Standard_GUID

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_IsAttribute(self, *args)


    def IsDescendant(self, *args) -> "Standard_Boolean":
        """
        Returns true if <self> is a descendant of <alabel>. attention: every label is its own descendant.

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_IsDescendant(self, *args)


    def IsDifferent(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_IsDifferent(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        Returns true if the <alabel> is equal to me (same labelnode*).

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_IsEqual(self, *args)


    def IsImported(self, *args) -> "Standard_Boolean":
        """
        Returns true if the <alabel> is imported.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_IsImported(self, *args)


    def IsNull(self, *args) -> "Standard_Boolean":
        """
        Returns true if the <alabel> is null, i.e. it has not been included in the data framework.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_IsNull(self, *args)


    def IsRoot(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_IsRoot(self, *args)


    def MayBeModified(self, *args) -> "Standard_Boolean":
        """
        Returns true if <self> or a descendant of <self> owns attributes not yet available in transaction 0. it means at least one of their attributes is new, modified or deleted.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Label_MayBeModified(self, *args)


    def NbAttributes(self, *args) -> "Standard_Integer":
        """
        Returns the number of attributes.

        Returns
        -------
        int

        """
        return _TDF.TDF_Label_NbAttributes(self, *args)


    def NbChildren(self, *args) -> "Standard_Integer":
        """
        Returns the number of children.

        Returns
        -------
        int

        """
        return _TDF.TDF_Label_NbChildren(self, *args)


    def NewChild(self, *args) -> "TDF_Label":
        """
        Create a new child label of me using autoamtic delivery tags provided by tagsource.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_Label_NewChild(self, *args)


    def Nullify(self, *args) -> "void":
        """
        Nullifies the label.

        Returns
        -------
        None

        """
        return _TDF.TDF_Label_Nullify(self, *args)


    def ResumeAttribute(self, *args) -> "void":
        """
        Undo forget action, setting its forgotten status false and its valid status true. raises if the attribute is not in the structure.

        Parameters
        ----------
        anAttribute: TDF_Attribute

        Returns
        -------
        None

        """
        return _TDF.TDF_Label_ResumeAttribute(self, *args)


    def Root(self, *args) -> "TDF_Label const":
        """
        Returns the root label root of the data structure. this has a depth of 0. exceptions: standard_nullobject if this label is null. this is because a null object can have no depth.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_Label_Root(self, *args)


    def Tag(self, *args) -> "Standard_Integer":
        """
        Returns the tag of the label. this is the integer assigned randomly to a label in a data framework. this integer is used to identify this label in an entry.

        Returns
        -------
        int

        """
        return _TDF.TDF_Label_Tag(self, *args)


    def Transaction(self, *args) -> "Standard_Integer":
        """
        Returns the current transaction index.

        Returns
        -------
        int

        """
        return _TDF.TDF_Label_Transaction(self, *args)


    def __ne_wrapper__(self, other: 'TDF_Label') -> "bool":
        """__ne_wrapper__(TDF_Label self, TDF_Label other) -> bool"""
        return _TDF.TDF_Label___ne_wrapper__(self, other)


    def __ne__(self, right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def __eq_wrapper__(self, other: 'TDF_Label') -> "bool":
        """__eq_wrapper__(TDF_Label self, TDF_Label other) -> bool"""
        return _TDF.TDF_Label___eq_wrapper__(self, other)


    def __eq__(self, right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def GetLabelName(self) -> "std::string":
        """Returns the label name"""
        return _TDF.TDF_Label_GetLabelName(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_Label
    __del__ = lambda self: None
TDF_Label_swigregister = _TDF.TDF_Label_swigregister
TDF_Label_swigregister(TDF_Label)

class TDF_LabelMapHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_LabelMapHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_LabelMapHasher, name)
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        Computes a hash code for the given label, in the range [1, theupperbound] @param thelabel the label which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

        Parameters
        ----------
        theLabel: TDF_Label
        theUpperBound: int

        Returns
        -------
        int

        """
        return _TDF.TDF_LabelMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        Returns true when the two keys are the same. two same keys must have the same hashcode, the contrary is not necessary.

        Parameters
        ----------
        aLab1: TDF_Label
        aLab2: TDF_Label

        Returns
        -------
        bool

        """
        return _TDF.TDF_LabelMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TDF.new_TDF_LabelMapHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDF.delete_TDF_LabelMapHasher
    __del__ = lambda self: None
TDF_LabelMapHasher_swigregister = _TDF.TDF_LabelMapHasher_swigregister
TDF_LabelMapHasher_swigregister(TDF_LabelMapHasher)

def TDF_LabelMapHasher_HashCode(*args) -> "Standard_Integer":
    """
    Computes a hash code for the given label, in the range [1, theupperbound] @param thelabel the label which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

    Parameters
    ----------
    theLabel: TDF_Label
    theUpperBound: int

    Returns
    -------
    int

    """
    return _TDF.TDF_LabelMapHasher_HashCode(*args)

def TDF_LabelMapHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    Returns true when the two keys are the same. two same keys must have the same hashcode, the contrary is not necessary.

    Parameters
    ----------
    aLab1: TDF_Label
    aLab2: TDF_Label

    Returns
    -------
    bool

    """
    return _TDF.TDF_LabelMapHasher_IsEqual(*args)

class TDF_RelocationTable(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_RelocationTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_RelocationTable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an relocation table. <selfrelocate> says if a value without explicit relocation is its own relocation.

        Parameters
        ----------
        selfRelocate: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_RelocationTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AfterRelocate(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        afterRelocate: bool

        Returns
        -------
        None

        Returns <myafterrelocate>.

        Returns
        -------
        bool

        """
        return _TDF.TDF_RelocationTable_AfterRelocate(self, *args)


    def AttributeTable(self, *args) -> "TDF_AttributeDataMap &":
        """
        Returns <myattributetable> to be used or updated.

        Returns
        -------
        TDF_AttributeDataMap

        """
        return _TDF.TDF_RelocationTable_AttributeTable(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the relocation dictionnary, but lets the self relocation flag to its current value.

        Returns
        -------
        None

        """
        return _TDF.TDF_RelocationTable_Clear(self, *args)


    def HasRelocation(self, *args) -> "Standard_Boolean":
        """
        Finds the relocation value of <asourcelabel> and returns it into <atargetlabel>. //! (see above selfrelocate method for more explanation about the method behavior).

        Parameters
        ----------
        aSourceLabel: TDF_Label
        aTargetLabel: TDF_Label

        Returns
        -------
        bool

        Finds the relocation value of <asourceattribute> and returns it into <atargetattribute>. //! (see above selfrelocate method for more explanation about the method behavior).

        Parameters
        ----------
        aSourceAttribute: TDF_Attribute
        aTargetAttribute: TDF_Attribute

        Returns
        -------
        bool

        """
        return _TDF.TDF_RelocationTable_HasRelocation(self, *args)


    def HasTransientRelocation(self, *args) -> "Standard_Boolean":
        """
        Finds the relocation value of <asourcetransient> and returns it into <atargettransient>. //! (see above selfrelocate method for more explanation about the method behavior).

        Parameters
        ----------
        aSourceTransient: Standard_Transient
        aTargetTransient: Standard_Transient

        Returns
        -------
        bool

        """
        return _TDF.TDF_RelocationTable_HasTransientRelocation(self, *args)


    def LabelTable(self, *args) -> "TDF_LabelDataMap &":
        """
        Returns <mylabeltable> to be used or updated.

        Returns
        -------
        TDF_LabelDataMap

        """
        return _TDF.TDF_RelocationTable_LabelTable(self, *args)


    def SelfRelocate(self, *args) -> "Standard_Boolean":
        """
        Sets <myselfrelocate> to <selfrelocate>. //! this flag affects the hasrelocation method behavior like this: //! <myselfrelocate> == false: //! if no relocation object is found in the map, a null object is returned //! <myselfrelocate> == true: //! if no relocation object is found in the map, the method assumes the source object is relocation value; so the source object is returned as target object.

        Parameters
        ----------
        selfRelocate: bool

        Returns
        -------
        None

        Returns <myselfrelocate>.

        Returns
        -------
        bool

        """
        return _TDF.TDF_RelocationTable_SelfRelocate(self, *args)


    def SetRelocation(self, *args) -> "void":
        """
        Sets the relocation value of <asourcelabel> to <atargetlabel>.

        Parameters
        ----------
        aSourceLabel: TDF_Label
        aTargetLabel: TDF_Label

        Returns
        -------
        None

        Sets the relocation value of <asourceattribute> to <atargetattribute>.

        Parameters
        ----------
        aSourceAttribute: TDF_Attribute
        aTargetAttribute: TDF_Attribute

        Returns
        -------
        None

        """
        return _TDF.TDF_RelocationTable_SetRelocation(self, *args)


    def SetTransientRelocation(self, *args) -> "void":
        """
        Sets the relocation value of <asourcetransient> to <atargettransient>.

        Parameters
        ----------
        aSourceTransient: Standard_Transient
        aTargetTransient: Standard_Transient

        Returns
        -------
        None

        """
        return _TDF.TDF_RelocationTable_SetTransientRelocation(self, *args)


    def TargetAttributeMap(self, *args) -> "void":
        """
        Fills <anattributemap> with target relocation attributes. <anattributemap> is not cleared before use.

        Parameters
        ----------
        anAttributeMap: TDF_AttributeMap

        Returns
        -------
        None

        """
        return _TDF.TDF_RelocationTable_TargetAttributeMap(self, *args)


    def TargetLabelMap(self, *args) -> "void":
        """
        Fills <alabelmap> with target relocation labels. <alabelmap> is not cleared before use.

        Parameters
        ----------
        aLabelMap: TDF_LabelMap

        Returns
        -------
        None

        """
        return _TDF.TDF_RelocationTable_TargetLabelMap(self, *args)


    def TransientTable(self, *args) -> "TColStd_IndexedDataMapOfTransientTransient &":
        """
        Returns <mytransienttable> to be used or updated.

        Returns
        -------
        TColStd_IndexedDataMapOfTransientTransient

        """
        return _TDF.TDF_RelocationTable_TransientTable(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_RelocationTable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_RelocationTable
    __del__ = lambda self: None
TDF_RelocationTable_swigregister = _TDF.TDF_RelocationTable_swigregister
TDF_RelocationTable_swigregister(TDF_RelocationTable)

class TDF_Tool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_Tool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_Tool, name)
    __repr__ = _swig_repr

    def CountLabels(*args) -> "void":
        """
        Adds the labels of <alabellist> to <alabelmap> if they are unbound, or increases their reference counters. at the end of the process, <alabellist> contains only the added labels.

        Parameters
        ----------
        aLabelList: TDF_LabelList
        aLabelMap: TDF_LabelIntegerMap

        Returns
        -------
        None

        """
        return _TDF.TDF_Tool_CountLabels(*args)

    CountLabels = staticmethod(CountLabels)

    def DeductLabels(*args) -> "void":
        """
        Decreases the reference counters of the labels of <alabellist> to <alabelmap>, and removes labels with null counter. at the end of the process, <alabellist> contains only the suppressed labels.

        Parameters
        ----------
        aLabelList: TDF_LabelList
        aLabelMap: TDF_LabelIntegerMap

        Returns
        -------
        None

        """
        return _TDF.TDF_Tool_DeductLabels(*args)

    DeductLabels = staticmethod(DeductLabels)

    def Entry(*args) -> "void":
        """
        Returns the entry for the label alabel in the form of the ascii character string anentry containing the tag list for alabel.

        Parameters
        ----------
        aLabel: TDF_Label
        anEntry: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _TDF.TDF_Tool_Entry(*args)

    Entry = staticmethod(Entry)

    def IsSelfContained(*args) -> "Standard_Boolean":
        """
        Returns true if <alabel> and its descendants reference only attributes or labels attached to themselves.

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        bool

        Returns true if <alabel> and its descendants reference only attributes or labels attached to themselves and kept by <afilter>.

        Parameters
        ----------
        aLabel: TDF_Label
        aFilter: TDF_IDFilter

        Returns
        -------
        bool

        """
        return _TDF.TDF_Tool_IsSelfContained(*args)

    IsSelfContained = staticmethod(IsSelfContained)

    def Label(*args) -> "void":
        """
        Returns the label expressed by <anentry>; creates the label if it does not exist and if <create> is true.

        Parameters
        ----------
        aDF: TDF_Data
        anEntry: TCollection_AsciiString
        aLabel: TDF_Label
        create: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        Returns the label expressed by <anentry>; creates the label if it does not exist and if <create> is true.

        Parameters
        ----------
        aDF: TDF_Data
        anEntry: char *
        aLabel: TDF_Label
        create: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        Returns the label expressed by <anentry>; creates the label if it does not exist and if <create> is true.

        Parameters
        ----------
        aDF: TDF_Data
        aTagList: TColStd_ListOfInteger
        aLabel: TDF_Label
        create: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TDF.TDF_Tool_Label(*args)

    Label = staticmethod(Label)

    def NbAttributes(*args) -> "Standard_Integer":
        """
        Returns the total number of attributes attached to the labels dependent on the label alabel. the attributes of alabel are also included in this figure. this information is useful in setting the size of an array.

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        int

        Returns the number of attributes of the tree, selected by a<filter>, including those of <alabel>.

        Parameters
        ----------
        aLabel: TDF_Label
        aFilter: TDF_IDFilter

        Returns
        -------
        int

        """
        return _TDF.TDF_Tool_NbAttributes(*args)

    NbAttributes = staticmethod(NbAttributes)

    def NbLabels(*args) -> "Standard_Integer":
        """
        Returns the number of labels of the tree, including <alabel>. alabel is also included in this figure. this information is useful in setting the size of an array.

        Parameters
        ----------
        aLabel: TDF_Label

        Returns
        -------
        int

        """
        return _TDF.TDF_Tool_NbLabels(*args)

    NbLabels = staticmethod(NbLabels)

    def OutReferences(*args) -> "void":
        """
        Returns in <atts> the referenced attributes. caution: <atts> is not cleared before use!.

        Parameters
        ----------
        aLabel: TDF_Label
        atts: TDF_AttributeMap

        Returns
        -------
        None

        Returns in <atts> the referenced attributes and kept by <afilterforreferences>. it considers only the referers kept by <afilterforreferers>. caution: <atts> is not cleared before use!.

        Parameters
        ----------
        aLabel: TDF_Label
        aFilterForReferers: TDF_IDFilter
        aFilterForReferences: TDF_IDFilter
        atts: TDF_AttributeMap

        Returns
        -------
        None

        """
        return _TDF.TDF_Tool_OutReferences(*args)

    OutReferences = staticmethod(OutReferences)

    def OutReferers(*args) -> "void":
        """
        Returns in <theatts> the attributes having out references. //! caution: <theatts> is not cleared before use!.

        Parameters
        ----------
        theLabel: TDF_Label
        theAtts: TDF_AttributeMap

        Returns
        -------
        None

        Returns in <atts> the attributes having out references and kept by <afilterforreferers>. it considers only the references kept by <afilterforreferences>. caution: <atts> is not cleared before use!.

        Parameters
        ----------
        aLabel: TDF_Label
        aFilterForReferers: TDF_IDFilter
        aFilterForReferences: TDF_IDFilter
        atts: TDF_AttributeMap

        Returns
        -------
        None

        """
        return _TDF.TDF_Tool_OutReferers(*args)

    OutReferers = staticmethod(OutReferers)

    def RelocateLabel(*args) -> "void":
        """
        Returns the label having the same sub-entry as <alabel> but located as descendant as <toroot> instead of <fromroot>. //! exemple : //! alabel = 0:3:24:7:2:7 fromroot = 0:3:24 toroot = 0:5 returned label = 0:5:7:2:7.

        Parameters
        ----------
        aSourceLabel: TDF_Label
        fromRoot: TDF_Label
        toRoot: TDF_Label
        aTargetLabel: TDF_Label
        create: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TDF.TDF_Tool_RelocateLabel(*args)

    RelocateLabel = staticmethod(RelocateLabel)

    def TagList(*args) -> "void":
        """
        Returns the entry of <alabel> as list of integers in <ataglist>.

        Parameters
        ----------
        aLabel: TDF_Label
        aTagList: TColStd_ListOfInteger

        Returns
        -------
        None

        Returns the entry expressed by <anentry> as list of integers in <ataglist>.

        Parameters
        ----------
        anEntry: TCollection_AsciiString
        aTagList: TColStd_ListOfInteger

        Returns
        -------
        None

        """
        return _TDF.TDF_Tool_TagList(*args)

    TagList = staticmethod(TagList)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TDF.new_TDF_Tool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDF.delete_TDF_Tool
    __del__ = lambda self: None
TDF_Tool_swigregister = _TDF.TDF_Tool_swigregister
TDF_Tool_swigregister(TDF_Tool)

def TDF_Tool_CountLabels(*args) -> "void":
    """
    Adds the labels of <alabellist> to <alabelmap> if they are unbound, or increases their reference counters. at the end of the process, <alabellist> contains only the added labels.

    Parameters
    ----------
    aLabelList: TDF_LabelList
    aLabelMap: TDF_LabelIntegerMap

    Returns
    -------
    None

    """
    return _TDF.TDF_Tool_CountLabels(*args)

def TDF_Tool_DeductLabels(*args) -> "void":
    """
    Decreases the reference counters of the labels of <alabellist> to <alabelmap>, and removes labels with null counter. at the end of the process, <alabellist> contains only the suppressed labels.

    Parameters
    ----------
    aLabelList: TDF_LabelList
    aLabelMap: TDF_LabelIntegerMap

    Returns
    -------
    None

    """
    return _TDF.TDF_Tool_DeductLabels(*args)

def TDF_Tool_Entry(*args) -> "void":
    """
    Returns the entry for the label alabel in the form of the ascii character string anentry containing the tag list for alabel.

    Parameters
    ----------
    aLabel: TDF_Label
    anEntry: TCollection_AsciiString

    Returns
    -------
    None

    """
    return _TDF.TDF_Tool_Entry(*args)

def TDF_Tool_IsSelfContained(*args) -> "Standard_Boolean":
    """
    Returns true if <alabel> and its descendants reference only attributes or labels attached to themselves.

    Parameters
    ----------
    aLabel: TDF_Label

    Returns
    -------
    bool

    Returns true if <alabel> and its descendants reference only attributes or labels attached to themselves and kept by <afilter>.

    Parameters
    ----------
    aLabel: TDF_Label
    aFilter: TDF_IDFilter

    Returns
    -------
    bool

    """
    return _TDF.TDF_Tool_IsSelfContained(*args)

def TDF_Tool_Label(*args) -> "void":
    """
    Returns the label expressed by <anentry>; creates the label if it does not exist and if <create> is true.

    Parameters
    ----------
    aDF: TDF_Data
    anEntry: TCollection_AsciiString
    aLabel: TDF_Label
    create: bool,optional
    	default value is Standard_False

    Returns
    -------
    None

    Returns the label expressed by <anentry>; creates the label if it does not exist and if <create> is true.

    Parameters
    ----------
    aDF: TDF_Data
    anEntry: char *
    aLabel: TDF_Label
    create: bool,optional
    	default value is Standard_False

    Returns
    -------
    None

    Returns the label expressed by <anentry>; creates the label if it does not exist and if <create> is true.

    Parameters
    ----------
    aDF: TDF_Data
    aTagList: TColStd_ListOfInteger
    aLabel: TDF_Label
    create: bool,optional
    	default value is Standard_False

    Returns
    -------
    None

    """
    return _TDF.TDF_Tool_Label(*args)

def TDF_Tool_NbAttributes(*args) -> "Standard_Integer":
    """
    Returns the total number of attributes attached to the labels dependent on the label alabel. the attributes of alabel are also included in this figure. this information is useful in setting the size of an array.

    Parameters
    ----------
    aLabel: TDF_Label

    Returns
    -------
    int

    Returns the number of attributes of the tree, selected by a<filter>, including those of <alabel>.

    Parameters
    ----------
    aLabel: TDF_Label
    aFilter: TDF_IDFilter

    Returns
    -------
    int

    """
    return _TDF.TDF_Tool_NbAttributes(*args)

def TDF_Tool_NbLabels(*args) -> "Standard_Integer":
    """
    Returns the number of labels of the tree, including <alabel>. alabel is also included in this figure. this information is useful in setting the size of an array.

    Parameters
    ----------
    aLabel: TDF_Label

    Returns
    -------
    int

    """
    return _TDF.TDF_Tool_NbLabels(*args)

def TDF_Tool_OutReferences(*args) -> "void":
    """
    Returns in <atts> the referenced attributes. caution: <atts> is not cleared before use!.

    Parameters
    ----------
    aLabel: TDF_Label
    atts: TDF_AttributeMap

    Returns
    -------
    None

    Returns in <atts> the referenced attributes and kept by <afilterforreferences>. it considers only the referers kept by <afilterforreferers>. caution: <atts> is not cleared before use!.

    Parameters
    ----------
    aLabel: TDF_Label
    aFilterForReferers: TDF_IDFilter
    aFilterForReferences: TDF_IDFilter
    atts: TDF_AttributeMap

    Returns
    -------
    None

    """
    return _TDF.TDF_Tool_OutReferences(*args)

def TDF_Tool_OutReferers(*args) -> "void":
    """
    Returns in <theatts> the attributes having out references. //! caution: <theatts> is not cleared before use!.

    Parameters
    ----------
    theLabel: TDF_Label
    theAtts: TDF_AttributeMap

    Returns
    -------
    None

    Returns in <atts> the attributes having out references and kept by <afilterforreferers>. it considers only the references kept by <afilterforreferences>. caution: <atts> is not cleared before use!.

    Parameters
    ----------
    aLabel: TDF_Label
    aFilterForReferers: TDF_IDFilter
    aFilterForReferences: TDF_IDFilter
    atts: TDF_AttributeMap

    Returns
    -------
    None

    """
    return _TDF.TDF_Tool_OutReferers(*args)

def TDF_Tool_RelocateLabel(*args) -> "void":
    """
    Returns the label having the same sub-entry as <alabel> but located as descendant as <toroot> instead of <fromroot>. //! exemple : //! alabel = 0:3:24:7:2:7 fromroot = 0:3:24 toroot = 0:5 returned label = 0:5:7:2:7.

    Parameters
    ----------
    aSourceLabel: TDF_Label
    fromRoot: TDF_Label
    toRoot: TDF_Label
    aTargetLabel: TDF_Label
    create: bool,optional
    	default value is Standard_False

    Returns
    -------
    None

    """
    return _TDF.TDF_Tool_RelocateLabel(*args)

def TDF_Tool_TagList(*args) -> "void":
    """
    Returns the entry of <alabel> as list of integers in <ataglist>.

    Parameters
    ----------
    aLabel: TDF_Label
    aTagList: TColStd_ListOfInteger

    Returns
    -------
    None

    Returns the entry expressed by <anentry> as list of integers in <ataglist>.

    Parameters
    ----------
    anEntry: TCollection_AsciiString
    aTagList: TColStd_ListOfInteger

    Returns
    -------
    None

    """
    return _TDF.TDF_Tool_TagList(*args)

class TDF_Transaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_Transaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_Transaction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty transaction context, unable to be opened.

        Parameters
        ----------
        aName: TCollection_AsciiString,optional
        	default value is 

        Returns
        -------
        None

        Creates a transaction context on <adf>, ready to be opened.

        Parameters
        ----------
        aDF: TDF_Data
        aName: TCollection_AsciiString,optional
        	default value is 

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_Transaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Abort(self, *args) -> "void":
        """
        Aborts the transactions until and including the current opened one.

        Returns
        -------
        None

        """
        return _TDF.TDF_Transaction_Abort(self, *args)


    def Commit(self, *args) -> "opencascade::handle< TDF_Delta >":
        """
        Commits the transactions until and including the current opened one.

        Parameters
        ----------
        withDelta: bool,optional
        	default value is Standard_False

        Returns
        -------
        opencascade::handle<TDF_Delta>

        """
        return _TDF.TDF_Transaction_Commit(self, *args)


    def Data(self, *args) -> "opencascade::handle< TDF_Data >":
        """
        Returns the data from tdf.

        Returns
        -------
        opencascade::handle<TDF_Data>

        """
        return _TDF.TDF_Transaction_Data(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDF_Transaction self, int depth=-1) -> std::string
        DumpJsonToString(TDF_Transaction self) -> std::string
        """
        return _TDF.TDF_Transaction_DumpJsonToString(self, depth)


    def Initialize(self, *args) -> "void":
        """
        Aborts all the transactions on <mydf> and sets <adf> to build a transaction context on <adf>, ready to be opened.

        Parameters
        ----------
        aDF: TDF_Data

        Returns
        -------
        None

        """
        return _TDF.TDF_Transaction_Initialize(self, *args)


    def IsOpen(self, *args) -> "Standard_Boolean":
        """
        Returns true if the transaction is open.

        Returns
        -------
        bool

        """
        return _TDF.TDF_Transaction_IsOpen(self, *args)


    def Name(self, *args) -> "TCollection_AsciiString const &":
        """
        Returns the transaction name.

        Returns
        -------
        TCollection_AsciiString

        """
        return _TDF.TDF_Transaction_Name(self, *args)


    def Open(self, *args) -> "Standard_Integer":
        """
        If not yet done, opens a new transaction on <mydf>. returns the index of the just opened transaction. //! it raises domainerror if the transaction is already open, and nullobject if there is no current data framework.

        Returns
        -------
        int

        """
        return _TDF.TDF_Transaction_Open(self, *args)


    def Transaction(self, *args) -> "Standard_Integer":
        """
        Returns the number of the transaction opened by <self>.

        Returns
        -------
        int

        """
        return _TDF.TDF_Transaction_Transaction(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_Transaction
    __del__ = lambda self: None
TDF_Transaction_swigregister = _TDF.TDF_Transaction_swigregister
TDF_Transaction_swigregister(TDF_Transaction)

class TDF_DeltaOnAddition(TDF_AttributeDelta):
    __swig_setmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DeltaOnAddition, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DeltaOnAddition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tdf_deltaonaddition.

        Parameters
        ----------
        anAtt: TDF_Attribute

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_DeltaOnAddition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDF_DeltaOnAddition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_DeltaOnAddition
    __del__ = lambda self: None
TDF_DeltaOnAddition_swigregister = _TDF.TDF_DeltaOnAddition_swigregister
TDF_DeltaOnAddition_swigregister(TDF_DeltaOnAddition)

class TDF_DeltaOnForget(TDF_AttributeDelta):
    __swig_setmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DeltaOnForget, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DeltaOnForget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tdf_deltaonforget.

        Parameters
        ----------
        anAtt: TDF_Attribute

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_DeltaOnForget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDF_DeltaOnForget_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_DeltaOnForget
    __del__ = lambda self: None
TDF_DeltaOnForget_swigregister = _TDF.TDF_DeltaOnForget_swigregister
TDF_DeltaOnForget_swigregister(TDF_DeltaOnForget)

class TDF_DeltaOnModification(TDF_AttributeDelta):
    __swig_setmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DeltaOnModification, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DeltaOnModification, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_TDF_DeltaOnModification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_DeltaOnModification
    __del__ = lambda self: None
TDF_DeltaOnModification_swigregister = _TDF.TDF_DeltaOnModification_swigregister
TDF_DeltaOnModification_swigregister(TDF_DeltaOnModification)

class TDF_DeltaOnRemoval(TDF_AttributeDelta):
    __swig_setmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DeltaOnRemoval, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DeltaOnRemoval, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_TDF_DeltaOnRemoval_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_DeltaOnRemoval
    __del__ = lambda self: None
TDF_DeltaOnRemoval_swigregister = _TDF.TDF_DeltaOnRemoval_swigregister
TDF_DeltaOnRemoval_swigregister(TDF_DeltaOnRemoval)

class TDF_DeltaOnResume(TDF_AttributeDelta):
    __swig_setmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DeltaOnResume, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_AttributeDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DeltaOnResume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tdf_deltaonresume.

        Parameters
        ----------
        anAtt: TDF_Attribute

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_DeltaOnResume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDF_DeltaOnResume self, int depth=-1) -> std::string
        DumpJsonToString(TDF_DeltaOnResume self) -> std::string
        """
        return _TDF.TDF_DeltaOnResume_DumpJsonToString(self, depth)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_DeltaOnResume_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_DeltaOnResume
    __del__ = lambda self: None
TDF_DeltaOnResume_swigregister = _TDF.TDF_DeltaOnResume_swigregister
TDF_DeltaOnResume_swigregister(TDF_DeltaOnResume)

class TDF_Reference(TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_Reference, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_Reference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_Reference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpToString(self) -> "std::string":
        """DumpToString(TDF_Reference self) -> std::string"""
        return _TDF.TDF_Reference_DumpToString(self)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDF_Reference self, int depth=-1) -> std::string
        DumpJsonToString(TDF_Reference self) -> std::string
        """
        return _TDF.TDF_Reference_DumpJsonToString(self, depth)


    def Get(self, *args) -> "TDF_Label":
        """
        No available documentation.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_Reference_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        No available documentation.

        Returns
        -------
        Standard_GUID

        """
        return _TDF.TDF_Reference_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        I: TDF_Label
        Origin: TDF_Label

        Returns
        -------
        opencascade::handle<TDF_Reference>

        No available documentation.

        Parameters
        ----------
        Origin: TDF_Label

        Returns
        -------
        None

        """
        return _TDF.TDF_Reference_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_Reference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_Reference
    __del__ = lambda self: None
TDF_Reference_swigregister = _TDF.TDF_Reference_swigregister
TDF_Reference_swigregister(TDF_Reference)

def TDF_Reference_GetID(*args) -> "Standard_GUID const &":
    """
    No available documentation.

    Returns
    -------
    Standard_GUID

    """
    return _TDF.TDF_Reference_GetID(*args)

class TDF_TagSource(TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_TagSource, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_TagSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_TagSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(TDF_TagSource self, int depth=-1) -> std::string
        DumpJsonToString(TDF_TagSource self) -> std::string
        """
        return _TDF.TDF_TagSource_DumpJsonToString(self, depth)


    def Get(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDF.TDF_TagSource_Get(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods =============.

        Returns
        -------
        Standard_GUID

        """
        return _TDF.TDF_TagSource_GetID(*args)

    GetID = staticmethod(GetID)

    def NewChild(self, *args) -> "TDF_Label":
        """
        Find (or create) a tagsource attribute located at <l> and make a new child label. tagsource methods =================.

        Parameters
        ----------
        L: TDF_Label

        Returns
        -------
        TDF_Label

        No available documentation.

        Returns
        -------
        TDF_Label

        """
        return _TDF.TDF_TagSource_NewChild(self, *args)


    def NewTag(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TDF.TDF_TagSource_NewTag(self, *args)


    def Set(self, *args) -> "void":
        """
        Find, or create, a tagsource attribute. the tagsource attribute is returned.

        Parameters
        ----------
        label: TDF_Label

        Returns
        -------
        opencascade::handle<TDF_TagSource>

        Tdf_attribute methods =====================.

        Parameters
        ----------
        T: int

        Returns
        -------
        None

        """
        return _TDF.TDF_TagSource_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TDF_TagSource_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_TagSource
    __del__ = lambda self: None
TDF_TagSource_swigregister = _TDF.TDF_TagSource_swigregister
TDF_TagSource_swigregister(TDF_TagSource)

def TDF_TagSource_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods =============.

    Returns
    -------
    Standard_GUID

    """
    return _TDF.TDF_TagSource_GetID(*args)

class TDF_DefaultDeltaOnModification(TDF_DeltaOnModification):
    __swig_setmethods__ = {}
    for _s in [TDF_DeltaOnModification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DefaultDeltaOnModification, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_DeltaOnModification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DefaultDeltaOnModification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tdf_defaultdeltaonmodification. <anattribute> must be the backup copy.

        Parameters
        ----------
        anAttribute: TDF_Attribute

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_DefaultDeltaOnModification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDF_DefaultDeltaOnModification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_DefaultDeltaOnModification
    __del__ = lambda self: None
TDF_DefaultDeltaOnModification_swigregister = _TDF.TDF_DefaultDeltaOnModification_swigregister
TDF_DefaultDeltaOnModification_swigregister(TDF_DefaultDeltaOnModification)

class TDF_DefaultDeltaOnRemoval(TDF_DeltaOnRemoval):
    __swig_setmethods__ = {}
    for _s in [TDF_DeltaOnRemoval]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_DefaultDeltaOnRemoval, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_DeltaOnRemoval]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_DefaultDeltaOnRemoval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tdf_defaultdeltaonremoval.

        Parameters
        ----------
        anAttribute: TDF_Attribute

        Returns
        -------
        None

        """
        this = _TDF.new_TDF_DefaultDeltaOnRemoval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TDF_DefaultDeltaOnRemoval_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDF.delete_TDF_DefaultDeltaOnRemoval
    __del__ = lambda self: None
TDF_DefaultDeltaOnRemoval_swigregister = _TDF.TDF_DefaultDeltaOnRemoval_swigregister
TDF_DefaultDeltaOnRemoval_swigregister(TDF_DefaultDeltaOnRemoval)


@classnotwrapped
class TDF_LabelNode:
	pass

@classnotwrapped
class TDF_DerivedAttribute:
	pass


class TDF_HAttributeArray1(TDF_AttributeArray1, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TDF_AttributeArray1, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDF_HAttributeArray1, name, value)
    __swig_getmethods__ = {}
    for _s in [TDF_AttributeArray1, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDF_HAttributeArray1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TDF.new_TDF_HAttributeArray1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TDF_AttributeArray1 const &":
        return _TDF.TDF_HAttributeArray1_Array1(self)

    def ChangeArray1(self) -> "TDF_AttributeArray1 &":
        return _TDF.TDF_HAttributeArray1_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TDF_HAttributeArray1_DownCast(t)

    __swig_destroy__ = _TDF.delete_TDF_HAttributeArray1
    __del__ = lambda self: None
TDF_HAttributeArray1_swigregister = _TDF.TDF_HAttributeArray1_swigregister
TDF_HAttributeArray1_swigregister(TDF_HAttributeArray1)



# This file is compatible with both classic and new-style classes.


