# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GProp module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_gprop.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GProp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GProp')
    _GProp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GProp', [dirname(__file__)])
        except ImportError:
            import _GProp
            return _GProp
        try:
            _mod = imp.load_module('_GProp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GProp = swig_import_helper()
    del swig_import_helper
else:
    import _GProp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GProp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _GProp.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GProp.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GProp.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _GProp.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _GProp.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _GProp.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _GProp.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _GProp.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _GProp.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GProp.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _GProp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _GProp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GProp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GProp.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GProp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _GProp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GProp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GProp.process_exception(error, method_name, class_name)
process_exception = _GProp.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *

GProp_Plane = _GProp.GProp_Plane
GProp_Line = _GProp.GProp_Line
GProp_Point = _GProp.GProp_Point
GProp_Space = _GProp.GProp_Space
GProp_None = _GProp.GProp_None
GProp_Mass = _GProp.GProp_Mass
GProp_CenterMassX = _GProp.GProp_CenterMassX
GProp_CenterMassY = _GProp.GProp_CenterMassY
GProp_CenterMassZ = _GProp.GProp_CenterMassZ
GProp_InertiaXX = _GProp.GProp_InertiaXX
GProp_InertiaYY = _GProp.GProp_InertiaYY
GProp_InertiaZZ = _GProp.GProp_InertiaZZ
GProp_InertiaXY = _GProp.GProp_InertiaXY
GProp_InertiaXZ = _GProp.GProp_InertiaXZ
GProp_InertiaYZ = _GProp.GProp_InertiaYZ
GProp_Unknown = _GProp.GProp_Unknown


class GProp_EquaType(IntEnum):
	GProp_Plane = 0
	GProp_Line = 1
	GProp_Point = 2
	GProp_Space = 3
	GProp_None = 4
GProp_Plane = GProp_EquaType.GProp_Plane
GProp_Line = GProp_EquaType.GProp_Line
GProp_Point = GProp_EquaType.GProp_Point
GProp_Space = GProp_EquaType.GProp_Space
GProp_None = GProp_EquaType.GProp_None

class GProp_ValueType(IntEnum):
	GProp_Mass = 0
	GProp_CenterMassX = 1
	GProp_CenterMassY = 2
	GProp_CenterMassZ = 3
	GProp_InertiaXX = 4
	GProp_InertiaYY = 5
	GProp_InertiaZZ = 6
	GProp_InertiaXY = 7
	GProp_InertiaXZ = 8
	GProp_InertiaYZ = 9
	GProp_Unknown = 10
GProp_Mass = GProp_ValueType.GProp_Mass
GProp_CenterMassX = GProp_ValueType.GProp_CenterMassX
GProp_CenterMassY = GProp_ValueType.GProp_CenterMassY
GProp_CenterMassZ = GProp_ValueType.GProp_CenterMassZ
GProp_InertiaXX = GProp_ValueType.GProp_InertiaXX
GProp_InertiaYY = GProp_ValueType.GProp_InertiaYY
GProp_InertiaZZ = GProp_ValueType.GProp_InertiaZZ
GProp_InertiaXY = GProp_ValueType.GProp_InertiaXY
GProp_InertiaXZ = GProp_ValueType.GProp_InertiaXZ
GProp_InertiaYZ = GProp_ValueType.GProp_InertiaYZ
GProp_Unknown = GProp_ValueType.GProp_Unknown

class gprop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gprop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gprop, name)
    __repr__ = _swig_repr

    def HOperator(*args) -> "void":
        """
        Methods of package computes the matrix operator, referred to as the 'huyghens operator' of a geometric system at the point q of the space, using the following data : - mass, i.e. the mass of the system, - g, the center of mass of the system. the 'huyghens operator' is used to compute inertia/q, the matrix of inertia of the system at the point q using huyghens' theorem : inertia/q = inertia/g + hoperator (q, g, mass) where inertia/g is the matrix of inertia of the system relative to its center of mass as returned by the function matrixofinertia on any gprop_gprops object.

        Parameters
        ----------
        G: gp_Pnt
        Q: gp_Pnt
        Mass: float
        Operator: gp_Mat

        Returns
        -------
        None

        """
        return _GProp.gprop_HOperator(*args)

    HOperator = staticmethod(HOperator)

    __repr__ = _dumps_object


    def __init__(self):
        this = _GProp.new_gprop()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GProp.delete_gprop
    __del__ = lambda self: None
gprop_swigregister = _GProp.gprop_swigregister
gprop_swigregister(gprop)

def gprop_HOperator(*args) -> "void":
    """
    Methods of package computes the matrix operator, referred to as the 'huyghens operator' of a geometric system at the point q of the space, using the following data : - mass, i.e. the mass of the system, - g, the center of mass of the system. the 'huyghens operator' is used to compute inertia/q, the matrix of inertia of the system at the point q using huyghens' theorem : inertia/q = inertia/g + hoperator (q, g, mass) where inertia/g is the matrix of inertia of the system relative to its center of mass as returned by the function matrixofinertia on any gprop_gprops object.

    Parameters
    ----------
    G: gp_Pnt
    Q: gp_Pnt
    Mass: float
    Operator: gp_Mat

    Returns
    -------
    None

    """
    return _GProp.gprop_HOperator(*args)

class GProp_GProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GProp_GProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GProp_GProps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        The origin (0, 0, 0) of the absolute cartesian coordinate system is used to compute the global properties.

        Returns
        -------
        None

        The point systemlocation is used to compute the gobal properties of the system. for more accuracy it is better to define this point closed to the location of the system. for example it could be a point around the centre of mass of the system. this point is referred to as the reference point for this framework. for greater accuracy it is better for the reference point to be close to the location of the system. it can, for example, be a point near the center of mass of the system. at initialization, the framework is empty; i.e. it retains no dimensional information such as mass, or inertia. however, it is now able to bring together global properties of various other systems, whose global properties have already been computed using another framework. to do this, use the function add to define the components of the system. use it once per component of the system, and then use the interrogation functions available to access the computed values.

        Parameters
        ----------
        SystemLocation: gp_Pnt

        Returns
        -------
        None

        """
        this = _GProp.new_GProp_GProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "void":
        """
        Either - initializes the global properties retained by this framework from those retained by the framework item, or - brings together the global properties still retained by this framework with those retained by the framework item. the value density, which is 1.0 by default, is used as the density of the system analysed by item. sometimes the density will have already been given at the time of construction of the framework item. this may be the case for example, if item is a gprop_pgprops framework built to compute the global properties of a set of points ; or another gprop_gprops object which already retains composite global properties. in these cases the real density was perhaps already taken into account at the time of construction of item. note that this is not checked: if the density of parts of the system is taken into account two or more times, results of the computation will be false. notes : - the point relative to which the inertia of item is computed (i.e. the reference point of item) may be different from the reference point in this framework. huygens' theorem is applied automatically to transfer inertia values to the reference point in this framework. - the function add is used once per component of the system. after that, you use the interrogation functions available to access values computed for the system. - the system whose global properties are already brought together by this framework is referred to as the current system. however, the current system is not retained by this framework, which maintains only its global properties. exceptions standard_domainerror if density is less than or equal to gp::resolution().

        Parameters
        ----------
        Item: GProp_GProps
        Density: float,optional
        	default value is 1.0

        Returns
        -------
        None

        """
        return _GProp.GProp_GProps_Add(self, *args)


    def CentreOfMass(self, *args) -> "gp_Pnt":
        """
        Returns the center of mass of the current system. if the gravitational field is uniform, it is the center of gravity. the coordinates returned for the center of mass are expressed in the absolute cartesian coordinate system.

        Returns
        -------
        gp_Pnt

        """
        return _GProp.GProp_GProps_CentreOfMass(self, *args)


    def Mass(self, *args) -> "Standard_Real":
        """
        Returns the mass of the current system. if no density is attached to the components of the current system the returned value corresponds to : - the total length of the edges of the current system if this framework retains only linear properties, as is the case for example, when using only the linearproperties function to combine properties of lines from shapes, or - the total area of the faces of the current system if this framework retains only surface properties, as is the case for example, when using only the surfaceproperties function to combine properties of surfaces from shapes, or - the total volume of the solids of the current system if this framework retains only volume properties, as is the case for example, when using only the volumeproperties function to combine properties of volumes from solids. warning a length, an area, or a volume is computed in the current data unit system. the mass of a single object is obtained by multiplying its length, its area or its volume by the given density. you must be consistent with respect to the units used.

        Returns
        -------
        float

        """
        return _GProp.GProp_GProps_Mass(self, *args)


    def MatrixOfInertia(self, *args) -> "gp_Mat":
        """
        Returns the matrix of inertia. it is a symmetrical matrix. the coefficients of the matrix are the quadratic moments of inertia. //! | ixx ixy ixz | matrix = | ixy iyy iyz | | ixz iyz izz | //! the moments of inertia are denoted by ixx, iyy, izz. the products of inertia are denoted by ixy, ixz, iyz. the matrix of inertia is returned in the central coordinate system (g, gx, gy, gz) where g is the centre of mass of the system and gx, gy, gz the directions parallel to the x(1,0,0) y(0,1,0) z(0,0,1) directions of the absolute cartesian coordinate system. it is possible to compute the matrix of inertia at another location point using the huyghens theorem (you can use the method of package gprop : hoperator).

        Returns
        -------
        gp_Mat

        """
        return _GProp.GProp_GProps_MatrixOfInertia(self, *args)


    def MomentOfInertia(self, *args) -> "Standard_Real":
        """
        Computes the moment of inertia of the material system about the axis a.

        Parameters
        ----------
        A: gp_Ax1

        Returns
        -------
        float

        """
        return _GProp.GProp_GProps_MomentOfInertia(self, *args)


    def PrincipalProperties(self, *args) -> "GProp_PrincipalProps":
        """
        Computes the principal properties of inertia of the current system. there is always a set of axes for which the products of inertia of a geometric system are equal to 0; i.e. the matrix of inertia of the system is diagonal. these axes are the principal axes of inertia. their origin is coincident with the center of mass of the system. the associated moments are called the principal moments of inertia. this function computes the eigen values and the eigen vectors of the matrix of inertia of the system. results are stored by using a presentation framework of principal properties of inertia (gprop_principalprops object) which may be queried to access the value sought.

        Returns
        -------
        GProp_PrincipalProps

        """
        return _GProp.GProp_GProps_PrincipalProperties(self, *args)


    def RadiusOfGyration(self, *args) -> "Standard_Real":
        """
        Returns the radius of gyration of the current system about the axis a.

        Parameters
        ----------
        A: gp_Ax1

        Returns
        -------
        float

        """
        return _GProp.GProp_GProps_RadiusOfGyration(self, *args)


    def StaticMoments(self, *args) -> "void":
        """
        Returns ix, iy, iz, the static moments of inertia of the current system; i.e. the moments of inertia about the three axes of the cartesian coordinate system.

        Parameters
        ----------

        Returns
        -------
        Ix: float
        Iy: float
        Iz: float

        """
        return _GProp.GProp_GProps_StaticMoments(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GProp.delete_GProp_GProps
    __del__ = lambda self: None
GProp_GProps_swigregister = _GProp.GProp_GProps_swigregister
GProp_GProps_swigregister(GProp_GProps)

class GProp_PEquation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GProp_PEquation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GProp_PEquation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a framework to analyze the collection of points pnts and computes: - the mean point if the points in question are considered to be coincident within the precision tol, or - the mean line if they are considered to be collinear within the precision tol, or - the mean plane if they are considered to be coplanar within the precision tol, or - the minimal box which contains all the points. use : - the functions ispoint, islinear, isplanar and isspace to find the result of the analysis, and - the function point, line, plane or box to access the computed result.

        Parameters
        ----------
        Pnts: TColgp_Array1OfPnt
        Tol: float

        Returns
        -------
        None

        """
        this = _GProp.new_GProp_PEquation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Box(self, *args) -> "void":
        """
        Returns the definition of the smallest box which contains all the points analyzed by this framework if, according to the given precision value, the points are considered to be neither coincident, nor collinear and nor coplanar. this box is centered on the barycenter p of the collection of points. its sides are parallel to the three vectors v1, v2 and v3, the length of which is the length of the box in the corresponding direction. note: vectors v1, v2 and v3 are parallel to the three axes of principal inertia of the system composed of the collection of points where each point is of equal mass. exceptions standard_nosuchobject if, according to the given precision, the points analyzed by this framework are considered to be coincident, collinear or coplanar.

        Parameters
        ----------
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _GProp.GProp_PEquation_Box(self, *args)


    def IsLinear(self, *args) -> "Standard_Boolean":
        """
        Returns true if, according to the given tolerance, the points analyzed by this framework are colinear. use the function line to access the computed result.

        Returns
        -------
        bool

        """
        return _GProp.GProp_PEquation_IsLinear(self, *args)


    def IsPlanar(self, *args) -> "Standard_Boolean":
        """
        Returns true if, according to the given tolerance, the points analyzed by this framework are coplanar. use the function plane to access the computed result.

        Returns
        -------
        bool

        """
        return _GProp.GProp_PEquation_IsPlanar(self, *args)


    def IsPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if, according to the given tolerance, the points analyzed by this framework are coincident. use the function point to access the computed result.

        Returns
        -------
        bool

        """
        return _GProp.GProp_PEquation_IsPoint(self, *args)


    def IsSpace(self, *args) -> "Standard_Boolean":
        """
        Returns true if, according to the given tolerance value, the points analyzed by this framework are neither coincident, nor collinear, nor coplanar. use the function box to query the smallest box that includes the collection of points.

        Returns
        -------
        bool

        """
        return _GProp.GProp_PEquation_IsSpace(self, *args)


    def Line(self, *args) -> "gp_Lin":
        """
        Returns the mean line passing near all the points analyzed by this framework if, according to the given precision value, the points are considered to be collinear. exceptions standard_nosuchobject if, according to the given precision, the points analyzed by this framework are considered to be: - coincident, or - not collinear.

        Returns
        -------
        gp_Lin

        """
        return _GProp.GProp_PEquation_Line(self, *args)


    def Plane(self, *args) -> "gp_Pln":
        """
        Returns the mean plane passing near all the points analyzed by this framework if, according to the given precision, the points are considered to be coplanar. exceptions standard_nosuchobject if, according to the given precision value, the points analyzed by this framework are considered to be: - coincident, or - collinear, or - not coplanar.

        Returns
        -------
        gp_Pln

        """
        return _GProp.GProp_PEquation_Plane(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        Returns the mean point of all the points analyzed by this framework if, according to the given precision, the points are considered to be coincident. exceptions standard_nosuchobject if, according to the given precision, the points analyzed by this framework are not considered to be coincident.

        Returns
        -------
        gp_Pnt

        """
        return _GProp.GProp_PEquation_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GProp.delete_GProp_PEquation
    __del__ = lambda self: None
GProp_PEquation_swigregister = _GProp.GProp_PEquation_swigregister
GProp_PEquation_swigregister(GProp_PEquation)

class GProp_PrincipalProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GProp_PrincipalProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GProp_PrincipalProps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an undefined principalprops.

        Returns
        -------
        None

        """
        this = _GProp.new_GProp_PrincipalProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FirstAxisOfInertia(self, *args) -> "gp_Vec const":
        """
        Returns the first axis of inertia. //! if the system has a point of symmetry there is an infinity of solutions. it is not possible to defines the three axis of inertia.

        Returns
        -------
        gp_Vec

        """
        return _GProp.GProp_PrincipalProps_FirstAxisOfInertia(self, *args)


    def HasSymmetryAxis(self, *args) -> "Standard_Boolean":
        """
        Returns true if the geometric system has an axis of symmetry. for comparing moments relative tolerance 1.e-10 is used. usually it is enough for objects, restricted by faces with analitycal geometry.

        Returns
        -------
        bool

        Returns true if the geometric system has an axis of symmetry. atol is relative tolerance for cheking equality of moments if atol == 0, relative tolerance is ~ 1.e-16 (epsilon(i)).

        Parameters
        ----------
        aTol: float

        Returns
        -------
        bool

        """
        return _GProp.GProp_PrincipalProps_HasSymmetryAxis(self, *args)


    def HasSymmetryPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if the geometric system has a point of symmetry. for comparing moments relative tolerance 1.e-10 is used. usually it is enough for objects, restricted by faces with analitycal geometry.

        Returns
        -------
        bool

        Returns true if the geometric system has a point of symmetry. atol is relative tolerance for cheking equality of moments if atol == 0, relative tolerance is ~ 1.e-16 (epsilon(i)).

        Parameters
        ----------
        aTol: float

        Returns
        -------
        bool

        """
        return _GProp.GProp_PrincipalProps_HasSymmetryPoint(self, *args)


    def Moments(self, *args) -> "void":
        """
        Ixx, iyy and izz return the principal moments of inertia in the current system. notes : - if the current system has an axis of symmetry, two of the three values ixx, iyy and izz are equal. they indicate which eigen vectors define an infinity of axes of principal inertia. - if the current system has a center of symmetry, ixx, iyy and izz are equal.

        Parameters
        ----------

        Returns
        -------
        Ixx: float
        Iyy: float
        Izz: float

        """
        return _GProp.GProp_PrincipalProps_Moments(self, *args)


    def RadiusOfGyration(self, *args) -> "void":
        """
        Returns the principal radii of gyration rxx, ryy and rzz are the radii of gyration of the current system about its three principal axes of inertia. note that: - if the current system has an axis of symmetry, two of the three values rxx, ryy and rzz are equal. - if the current system has a center of symmetry, rxx, ryy and rzz are equal.

        Parameters
        ----------

        Returns
        -------
        Rxx: float
        Ryy: float
        Rzz: float

        """
        return _GProp.GProp_PrincipalProps_RadiusOfGyration(self, *args)


    def SecondAxisOfInertia(self, *args) -> "gp_Vec const":
        """
        Returns the second axis of inertia. //! if the system has a point of symmetry or an axis of symmetry the second and the third axis of symmetry are undefined.

        Returns
        -------
        gp_Vec

        """
        return _GProp.GProp_PrincipalProps_SecondAxisOfInertia(self, *args)


    def ThirdAxisOfInertia(self, *args) -> "gp_Vec const":
        """
        Returns the third axis of inertia. this and the above functions return the first, second or third eigen vector of the matrix of inertia of the current system. the first, second and third principal axis of inertia pass through the center of mass of the current system. they are respectively parallel to these three eigen vectors. note that: - if the current system has an axis of symmetry, any axis is an axis of principal inertia if it passes through the center of mass of the system, and runs parallel to a linear combination of the two eigen vectors of the matrix of inertia, corresponding to the two eigen values which are equal. if the current system has a center of symmetry, any axis passing through the center of mass of the system is an axis of principal inertia. use the functions hassymmetryaxis and hassymmetrypoint to check these particular cases, where the returned eigen vectors define an infinity of principal axis of inertia. - the moments function can be used to know which of the three eigen vectors corresponds to the two eigen values which are equal. //! if the system has a point of symmetry or an axis of symmetry the second and the third axis of symmetry are undefined.

        Returns
        -------
        gp_Vec

        """
        return _GProp.GProp_PrincipalProps_ThirdAxisOfInertia(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GProp.delete_GProp_PrincipalProps
    __del__ = lambda self: None
GProp_PrincipalProps_swigregister = _GProp.GProp_PrincipalProps_swigregister
GProp_PrincipalProps_swigregister(GProp_PrincipalProps)

class GProp_CelGProps(GProp_GProps):
    __swig_setmethods__ = {}
    for _s in [GProp_GProps]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GProp_CelGProps, name, value)
    __swig_getmethods__ = {}
    for _s in [GProp_GProps]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GProp_CelGProps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Circ
        CLocation: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Circ
        U1: float
        U2: float
        CLocation: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Lin
        U1: float
        U2: float
        CLocation: gp_Pnt

        Returns
        -------
        None

        """
        this = _GProp.new_GProp_CelGProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        C: gp_Circ
        U1: float
        U2: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Lin
        U1: float
        U2: float

        Returns
        -------
        None

        """
        return _GProp.GProp_CelGProps_Perform(self, *args)


    def SetLocation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        CLocation: gp_Pnt

        Returns
        -------
        None

        """
        return _GProp.GProp_CelGProps_SetLocation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GProp.delete_GProp_CelGProps
    __del__ = lambda self: None
GProp_CelGProps_swigregister = _GProp.GProp_CelGProps_swigregister
GProp_CelGProps_swigregister(GProp_CelGProps)

class GProp_PGProps(GProp_GProps):
    __swig_setmethods__ = {}
    for _s in [GProp_GProps]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GProp_PGProps, name, value)
    __swig_getmethods__ = {}
    for _s in [GProp_GProps]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GProp_PGProps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initializes a framework to compute global properties on a set of points. the point relative to which the inertia of the system is computed will be the origin (0, 0, 0) of the absolute cartesian coordinate system. at initialization, the framework is empty, i.e. it retains no dimensional information such as mass and inertia. it is, however, now able to keep global properties of a set of points while new points are added using the addpoint function. the set of points whose global properties are brought together by this framework will then be referred to as the current system. the current system is, however, not kept by this framework, which only keeps that system's global properties. note that the current system may be more complex than a set of points.

        Returns
        -------
        None

        Computes the global properties of the system of points pnts. the density of the points are defaulted to all being 1.

        Parameters
        ----------
        Pnts: TColgp_Array1OfPnt

        Returns
        -------
        None

        Computes the global properties of the system of points pnts. the density of the points are defaulted to all being 1.

        Parameters
        ----------
        Pnts: TColgp_Array2OfPnt

        Returns
        -------
        None

        Computes the global properties of the system of points pnts. a density is associated with each point. //! raises if a density is lower or equal to resolution from package gp. //! raises if the length of pnts and the length of density is not the same.

        Parameters
        ----------
        Pnts: TColgp_Array1OfPnt
        Density: TColStd_Array1OfReal

        Returns
        -------
        None

        Computes the global properties of the system of points pnts. a density is associated with each point. //! raised if a density is lower or equal to resolution from package gp. //! raised if the length of pnts and the length of density is not the same.

        Parameters
        ----------
        Pnts: TColgp_Array2OfPnt
        Density: TColStd_Array2OfReal

        Returns
        -------
        None

        """
        this = _GProp.new_GProp_PGProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddPoint(self, *args) -> "void":
        """
        Brings together the global properties already retained by this framework with those induced by the point pnt. pnt may be the first point of the current system. a point mass is attached to the point pnt, it is either equal to 1. or to density.

        Parameters
        ----------
        P: gp_Pnt

        Returns
        -------
        None

        Adds a new point p with its density in the system of points exceptions standard_domainerror if the mass value density is less than gp::resolution().

        Parameters
        ----------
        P: gp_Pnt
        Density: float

        Returns
        -------
        None

        """
        return _GProp.GProp_PGProps_AddPoint(self, *args)


    def Barycentre(*args) -> "Standard_Real &":
        """
        Computes the barycentre of a set of points. the density of the points is defaulted to 1.

        Parameters
        ----------
        Pnts: TColgp_Array1OfPnt

        Returns
        -------
        gp_Pnt

        Computes the barycentre of a set of points. the density of the points is defaulted to 1.

        Parameters
        ----------
        Pnts: TColgp_Array2OfPnt

        Returns
        -------
        gp_Pnt

        Computes the barycentre of a set of points. a density is associated with each point. //! raises if a density is lower or equal to resolution from package gp. //! raised if the length of pnts and the length of density is not the same.

        Parameters
        ----------
        Pnts: TColgp_Array1OfPnt
        Density: TColStd_Array1OfReal
        G: gp_Pnt

        Returns
        -------
        Mass: float

        Computes the barycentre of a set of points. a density is associated with each point. //! raised if a density is lower or equal to resolution from package gp. //! raised if the length of pnts and the length of density is not the same.

        Parameters
        ----------
        Pnts: TColgp_Array2OfPnt
        Density: TColStd_Array2OfReal
        G: gp_Pnt

        Returns
        -------
        Mass: float

        """
        return _GProp.GProp_PGProps_Barycentre(*args)

    Barycentre = staticmethod(Barycentre)

    __repr__ = _dumps_object

    __swig_destroy__ = _GProp.delete_GProp_PGProps
    __del__ = lambda self: None
GProp_PGProps_swigregister = _GProp.GProp_PGProps_swigregister
GProp_PGProps_swigregister(GProp_PGProps)

def GProp_PGProps_Barycentre(*args) -> "Standard_Real &":
    """
    Computes the barycentre of a set of points. the density of the points is defaulted to 1.

    Parameters
    ----------
    Pnts: TColgp_Array1OfPnt

    Returns
    -------
    gp_Pnt

    Computes the barycentre of a set of points. the density of the points is defaulted to 1.

    Parameters
    ----------
    Pnts: TColgp_Array2OfPnt

    Returns
    -------
    gp_Pnt

    Computes the barycentre of a set of points. a density is associated with each point. //! raises if a density is lower or equal to resolution from package gp. //! raised if the length of pnts and the length of density is not the same.

    Parameters
    ----------
    Pnts: TColgp_Array1OfPnt
    Density: TColStd_Array1OfReal
    G: gp_Pnt

    Returns
    -------
    Mass: float

    Computes the barycentre of a set of points. a density is associated with each point. //! raised if a density is lower or equal to resolution from package gp. //! raised if the length of pnts and the length of density is not the same.

    Parameters
    ----------
    Pnts: TColgp_Array2OfPnt
    Density: TColStd_Array2OfReal
    G: gp_Pnt

    Returns
    -------
    Mass: float

    """
    return _GProp.GProp_PGProps_Barycentre(*args)

class GProp_SelGProps(GProp_GProps):
    __swig_setmethods__ = {}
    for _s in [GProp_GProps]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GProp_SelGProps, name, value)
    __swig_getmethods__ = {}
    for _s in [GProp_GProps]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GProp_SelGProps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Cylinder
        Alpha1: float
        Alpha2: float
        Z1: float
        Z2: float
        SLocation: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Cone
        Alpha1: float
        Alpha2: float
        Z1: float
        Z2: float
        SLocation: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Sphere
        Teta1: float
        Teta2: float
        Alpha1: float
        Alpha2: float
        SLocation: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Torus
        Teta1: float
        Teta2: float
        Alpha1: float
        Alpha2: float
        SLocation: gp_Pnt

        Returns
        -------
        None

        """
        this = _GProp.new_GProp_SelGProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: gp_Cylinder
        Alpha1: float
        Alpha2: float
        Z1: float
        Z2: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Cone
        Alpha1: float
        Alpha2: float
        Z1: float
        Z2: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Sphere
        Teta1: float
        Teta2: float
        Alpha1: float
        Alpha2: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Torus
        Teta1: float
        Teta2: float
        Alpha1: float
        Alpha2: float

        Returns
        -------
        None

        """
        return _GProp.GProp_SelGProps_Perform(self, *args)


    def SetLocation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SLocation: gp_Pnt

        Returns
        -------
        None

        """
        return _GProp.GProp_SelGProps_SetLocation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GProp.delete_GProp_SelGProps
    __del__ = lambda self: None
GProp_SelGProps_swigregister = _GProp.GProp_SelGProps_swigregister
GProp_SelGProps_swigregister(GProp_SelGProps)

class GProp_VelGProps(GProp_GProps):
    __swig_setmethods__ = {}
    for _s in [GProp_GProps]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GProp_VelGProps, name, value)
    __swig_getmethods__ = {}
    for _s in [GProp_GProps]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GProp_VelGProps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Cylinder
        Alpha1: float
        Alpha2: float
        Z1: float
        Z2: float
        VLocation: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Cone
        Alpha1: float
        Alpha2: float
        Z1: float
        Z2: float
        VLocation: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Sphere
        Teta1: float
        Teta2: float
        Alpha1: float
        Alpha2: float
        VLocation: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Torus
        Teta1: float
        Teta2: float
        Alpha1: float
        Alpha2: float
        VLocation: gp_Pnt

        Returns
        -------
        None

        """
        this = _GProp.new_GProp_VelGProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: gp_Cylinder
        Alpha1: float
        Alpha2: float
        Z1: float
        Z2: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Cone
        Alpha1: float
        Alpha2: float
        Z1: float
        Z2: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Sphere
        Teta1: float
        Teta2: float
        Alpha1: float
        Alpha2: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Torus
        Teta1: float
        Teta2: float
        Alpha1: float
        Alpha2: float

        Returns
        -------
        None

        """
        return _GProp.GProp_VelGProps_Perform(self, *args)


    def SetLocation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        VLocation: gp_Pnt

        Returns
        -------
        None

        """
        return _GProp.GProp_VelGProps_SetLocation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GProp.delete_GProp_VelGProps
    __del__ = lambda self: None
GProp_VelGProps_swigregister = _GProp.GProp_VelGProps_swigregister
GProp_VelGProps_swigregister(GProp_VelGProps)



# This file is compatible with both classic and new-style classes.


