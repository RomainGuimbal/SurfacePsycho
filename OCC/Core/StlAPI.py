# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StlAPI module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stlapi.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StlAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StlAPI')
    _StlAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StlAPI', [dirname(__file__)])
        except ImportError:
            import _StlAPI
            return _StlAPI
        try:
            _mod = imp.load_module('_StlAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StlAPI = swig_import_helper()
    del swig_import_helper
else:
    import _StlAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StlAPI.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StlAPI.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StlAPI.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StlAPI.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StlAPI.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StlAPI.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StlAPI.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StlAPI.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StlAPI.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StlAPI.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StlAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StlAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StlAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StlAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StlAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StlAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StlAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StlAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StlAPI.process_exception(error, method_name, class_name)
process_exception = _StlAPI.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp

from enum import IntEnum
from OCC.Core.Exception import *



class stlapi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stlapi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stlapi, name)
    __repr__ = _swig_repr

    def Read(*args) -> "Standard_Boolean":
        """
        Legacy interface. read stl file and create a shape composed of triangular faces, one per facet. this approach is very inefficient, especially for large files. consider reading stl file to poly_triangulation object instead (see class rwstl).

        Parameters
        ----------
        theShape: TopoDS_Shape
        aFile: char *

        Returns
        -------
        bool

        """
        return _StlAPI.stlapi_Read(*args)

    Read = staticmethod(Read)

    def Write(*args) -> "Standard_Boolean":
        """
        Convert and write shape to stl format. file is written in binary if aasciimode is false otherwise it is written in ascii (by default).

        Parameters
        ----------
        theShape: TopoDS_Shape
        theFile: char *
        theAsciiMode: bool,optional
        	default value is Standard_True

        Returns
        -------
        bool

        """
        return _StlAPI.stlapi_Write(*args)

    Write = staticmethod(Write)

    __repr__ = _dumps_object


    def __init__(self):
        this = _StlAPI.new_stlapi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StlAPI.delete_stlapi
    __del__ = lambda self: None
stlapi_swigregister = _StlAPI.stlapi_swigregister
stlapi_swigregister(stlapi)

def stlapi_Read(*args) -> "Standard_Boolean":
    """
    Legacy interface. read stl file and create a shape composed of triangular faces, one per facet. this approach is very inefficient, especially for large files. consider reading stl file to poly_triangulation object instead (see class rwstl).

    Parameters
    ----------
    theShape: TopoDS_Shape
    aFile: char *

    Returns
    -------
    bool

    """
    return _StlAPI.stlapi_Read(*args)

def stlapi_Write(*args) -> "Standard_Boolean":
    """
    Convert and write shape to stl format. file is written in binary if aasciimode is false otherwise it is written in ascii (by default).

    Parameters
    ----------
    theShape: TopoDS_Shape
    theFile: char *
    theAsciiMode: bool,optional
    	default value is Standard_True

    Returns
    -------
    bool

    """
    return _StlAPI.stlapi_Write(*args)

class StlAPI_Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StlAPI_Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StlAPI_Reader, name)
    __repr__ = _swig_repr

    def Read(self, *args) -> "Standard_Boolean":
        """
        Reads stl file to the topods_shape (each triangle is converted to the face). returns true if reading is successful.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theFileName: char *

        Returns
        -------
        bool

        """
        return _StlAPI.StlAPI_Reader_Read(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StlAPI.new_StlAPI_Reader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StlAPI.delete_StlAPI_Reader
    __del__ = lambda self: None
StlAPI_Reader_swigregister = _StlAPI.StlAPI_Reader_swigregister
StlAPI_Reader_swigregister(StlAPI_Reader)

class StlAPI_Writer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StlAPI_Writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StlAPI_Writer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a writer object with default parameters: asciimode.

        Returns
        -------
        None

        """
        this = _StlAPI.new_StlAPI_Writer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetASCIIMode(self) -> "Standard_Boolean":
        """GetASCIIMode(StlAPI_Writer self) -> Standard_Boolean"""
        return _StlAPI.StlAPI_Writer_GetASCIIMode(self)


    def SetASCIIMode(self, value: 'Standard_Boolean') -> "void":
        """SetASCIIMode(StlAPI_Writer self, Standard_Boolean value)"""
        return _StlAPI.StlAPI_Writer_SetASCIIMode(self, value)


    def Write(self, *args) -> "Standard_Boolean":
        """
        Converts a given shape to stl format and writes it to file with a given filename. eturn the error state.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theFileName: char *
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        bool

        """
        return _StlAPI.StlAPI_Writer_Write(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StlAPI.delete_StlAPI_Writer
    __del__ = lambda self: None
StlAPI_Writer_swigregister = _StlAPI.StlAPI_Writer_swigregister
StlAPI_Writer_swigregister(StlAPI_Writer)



# This file is compatible with both classic and new-style classes.


