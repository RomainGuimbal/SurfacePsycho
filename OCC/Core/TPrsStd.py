# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TPrsStd module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tprsstd.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TPrsStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TPrsStd')
    _TPrsStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TPrsStd', [dirname(__file__)])
        except ImportError:
            import _TPrsStd
            return _TPrsStd
        try:
            _mod = imp.load_module('_TPrsStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TPrsStd = swig_import_helper()
    del swig_import_helper
else:
    import _TPrsStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TPrsStd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TPrsStd.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TPrsStd.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TPrsStd.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TPrsStd.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TPrsStd.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TPrsStd.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TPrsStd.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TPrsStd.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TPrsStd.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TPrsStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TPrsStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TPrsStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TPrsStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TPrsStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TPrsStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TPrsStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TPrsStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TPrsStd.process_exception(error, method_name, class_name)
process_exception = _TPrsStd.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.Quantity
import OCC.Core.AIS
import OCC.Core.SelectMgr
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.gp
import OCC.Core.Aspect
import OCC.Core.Image
import OCC.Core.TopLoc
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.OSD
import OCC.Core.Media
import OCC.Core.Select3D
import OCC.Core.SelectBasics
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.V3d
import OCC.Core.TopAbs
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.StdSelect
import OCC.Core.TDataXtd
import OCC.Core.TDataStd
import OCC.Core.TNaming
import OCC.Core.TopTools

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_TPrsStd_AISPresentation_Create() -> "opencascade::handle< TPrsStd_AISPresentation >":
    return _TPrsStd.Handle_TPrsStd_AISPresentation_Create()
Handle_TPrsStd_AISPresentation_Create = _TPrsStd.Handle_TPrsStd_AISPresentation_Create

def Handle_TPrsStd_AISPresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_AISPresentation >":
    return _TPrsStd.Handle_TPrsStd_AISPresentation_DownCast(t)
Handle_TPrsStd_AISPresentation_DownCast = _TPrsStd.Handle_TPrsStd_AISPresentation_DownCast

def Handle_TPrsStd_AISPresentation_IsNull(t: 'opencascade::handle< TPrsStd_AISPresentation > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_AISPresentation_IsNull(t)
Handle_TPrsStd_AISPresentation_IsNull = _TPrsStd.Handle_TPrsStd_AISPresentation_IsNull

def Handle_TPrsStd_AISViewer_Create() -> "opencascade::handle< TPrsStd_AISViewer >":
    return _TPrsStd.Handle_TPrsStd_AISViewer_Create()
Handle_TPrsStd_AISViewer_Create = _TPrsStd.Handle_TPrsStd_AISViewer_Create

def Handle_TPrsStd_AISViewer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_AISViewer >":
    return _TPrsStd.Handle_TPrsStd_AISViewer_DownCast(t)
Handle_TPrsStd_AISViewer_DownCast = _TPrsStd.Handle_TPrsStd_AISViewer_DownCast

def Handle_TPrsStd_AISViewer_IsNull(t: 'opencascade::handle< TPrsStd_AISViewer > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_AISViewer_IsNull(t)
Handle_TPrsStd_AISViewer_IsNull = _TPrsStd.Handle_TPrsStd_AISViewer_IsNull

def Handle_TPrsStd_Driver_Create() -> "opencascade::handle< TPrsStd_Driver >":
    return _TPrsStd.Handle_TPrsStd_Driver_Create()
Handle_TPrsStd_Driver_Create = _TPrsStd.Handle_TPrsStd_Driver_Create

def Handle_TPrsStd_Driver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_Driver >":
    return _TPrsStd.Handle_TPrsStd_Driver_DownCast(t)
Handle_TPrsStd_Driver_DownCast = _TPrsStd.Handle_TPrsStd_Driver_DownCast

def Handle_TPrsStd_Driver_IsNull(t: 'opencascade::handle< TPrsStd_Driver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_Driver_IsNull(t)
Handle_TPrsStd_Driver_IsNull = _TPrsStd.Handle_TPrsStd_Driver_IsNull

def Handle_TPrsStd_DriverTable_Create() -> "opencascade::handle< TPrsStd_DriverTable >":
    return _TPrsStd.Handle_TPrsStd_DriverTable_Create()
Handle_TPrsStd_DriverTable_Create = _TPrsStd.Handle_TPrsStd_DriverTable_Create

def Handle_TPrsStd_DriverTable_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_DriverTable >":
    return _TPrsStd.Handle_TPrsStd_DriverTable_DownCast(t)
Handle_TPrsStd_DriverTable_DownCast = _TPrsStd.Handle_TPrsStd_DriverTable_DownCast

def Handle_TPrsStd_DriverTable_IsNull(t: 'opencascade::handle< TPrsStd_DriverTable > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_DriverTable_IsNull(t)
Handle_TPrsStd_DriverTable_IsNull = _TPrsStd.Handle_TPrsStd_DriverTable_IsNull

def Handle_TPrsStd_AxisDriver_Create() -> "opencascade::handle< TPrsStd_AxisDriver >":
    return _TPrsStd.Handle_TPrsStd_AxisDriver_Create()
Handle_TPrsStd_AxisDriver_Create = _TPrsStd.Handle_TPrsStd_AxisDriver_Create

def Handle_TPrsStd_AxisDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_AxisDriver >":
    return _TPrsStd.Handle_TPrsStd_AxisDriver_DownCast(t)
Handle_TPrsStd_AxisDriver_DownCast = _TPrsStd.Handle_TPrsStd_AxisDriver_DownCast

def Handle_TPrsStd_AxisDriver_IsNull(t: 'opencascade::handle< TPrsStd_AxisDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_AxisDriver_IsNull(t)
Handle_TPrsStd_AxisDriver_IsNull = _TPrsStd.Handle_TPrsStd_AxisDriver_IsNull

def Handle_TPrsStd_ConstraintDriver_Create() -> "opencascade::handle< TPrsStd_ConstraintDriver >":
    return _TPrsStd.Handle_TPrsStd_ConstraintDriver_Create()
Handle_TPrsStd_ConstraintDriver_Create = _TPrsStd.Handle_TPrsStd_ConstraintDriver_Create

def Handle_TPrsStd_ConstraintDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_ConstraintDriver >":
    return _TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast(t)
Handle_TPrsStd_ConstraintDriver_DownCast = _TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast

def Handle_TPrsStd_ConstraintDriver_IsNull(t: 'opencascade::handle< TPrsStd_ConstraintDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_ConstraintDriver_IsNull(t)
Handle_TPrsStd_ConstraintDriver_IsNull = _TPrsStd.Handle_TPrsStd_ConstraintDriver_IsNull

def Handle_TPrsStd_GeometryDriver_Create() -> "opencascade::handle< TPrsStd_GeometryDriver >":
    return _TPrsStd.Handle_TPrsStd_GeometryDriver_Create()
Handle_TPrsStd_GeometryDriver_Create = _TPrsStd.Handle_TPrsStd_GeometryDriver_Create

def Handle_TPrsStd_GeometryDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_GeometryDriver >":
    return _TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast(t)
Handle_TPrsStd_GeometryDriver_DownCast = _TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast

def Handle_TPrsStd_GeometryDriver_IsNull(t: 'opencascade::handle< TPrsStd_GeometryDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_GeometryDriver_IsNull(t)
Handle_TPrsStd_GeometryDriver_IsNull = _TPrsStd.Handle_TPrsStd_GeometryDriver_IsNull

def Handle_TPrsStd_NamedShapeDriver_Create() -> "opencascade::handle< TPrsStd_NamedShapeDriver >":
    return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_Create()
Handle_TPrsStd_NamedShapeDriver_Create = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_Create

def Handle_TPrsStd_NamedShapeDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_NamedShapeDriver >":
    return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast(t)
Handle_TPrsStd_NamedShapeDriver_DownCast = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast

def Handle_TPrsStd_NamedShapeDriver_IsNull(t: 'opencascade::handle< TPrsStd_NamedShapeDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_IsNull(t)
Handle_TPrsStd_NamedShapeDriver_IsNull = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_IsNull

def Handle_TPrsStd_PlaneDriver_Create() -> "opencascade::handle< TPrsStd_PlaneDriver >":
    return _TPrsStd.Handle_TPrsStd_PlaneDriver_Create()
Handle_TPrsStd_PlaneDriver_Create = _TPrsStd.Handle_TPrsStd_PlaneDriver_Create

def Handle_TPrsStd_PlaneDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_PlaneDriver >":
    return _TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast(t)
Handle_TPrsStd_PlaneDriver_DownCast = _TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast

def Handle_TPrsStd_PlaneDriver_IsNull(t: 'opencascade::handle< TPrsStd_PlaneDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_PlaneDriver_IsNull(t)
Handle_TPrsStd_PlaneDriver_IsNull = _TPrsStd.Handle_TPrsStd_PlaneDriver_IsNull

def Handle_TPrsStd_PointDriver_Create() -> "opencascade::handle< TPrsStd_PointDriver >":
    return _TPrsStd.Handle_TPrsStd_PointDriver_Create()
Handle_TPrsStd_PointDriver_Create = _TPrsStd.Handle_TPrsStd_PointDriver_Create

def Handle_TPrsStd_PointDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TPrsStd_PointDriver >":
    return _TPrsStd.Handle_TPrsStd_PointDriver_DownCast(t)
Handle_TPrsStd_PointDriver_DownCast = _TPrsStd.Handle_TPrsStd_PointDriver_DownCast

def Handle_TPrsStd_PointDriver_IsNull(t: 'opencascade::handle< TPrsStd_PointDriver > const &') -> "bool":
    return _TPrsStd.Handle_TPrsStd_PointDriver_IsNull(t)
Handle_TPrsStd_PointDriver_IsNull = _TPrsStd.Handle_TPrsStd_PointDriver_IsNull
class TPrsStd_DataMapOfGUIDDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_DataMapOfGUIDDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_DataMapOfGUIDDriver, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID >::iterator":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_begin(self)

    def end(self) -> "NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID >::iterator":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_end(self)

    def cbegin(self) -> "NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID >::const_iterator":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_cbegin(self)

    def cend(self) -> "NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID >::const_iterator":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_cend(self)

    def __init__(self, *args):
        this = _TPrsStd.new_TPrsStd_DataMapOfGUIDDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TPrsStd_DataMapOfGUIDDriver') -> "void":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Exchange(self, theOther)

    def Assign(self, theOther: 'TPrsStd_DataMapOfGUIDDriver') -> "NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID > &":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Assign(self, theOther)

    def Set(self, theOther: 'TPrsStd_DataMapOfGUIDDriver') -> "NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID > &":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_ReSize(self, N)

    def Bind(self, theKey: 'Standard_GUID', theItem: 'opencascade::handle< TPrsStd_Driver > const &') -> "Standard_Boolean":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'Standard_GUID', theItem: 'opencascade::handle< TPrsStd_Driver > const &') -> "opencascade::handle< TPrsStd_Driver > *":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'Standard_GUID') -> "Standard_Boolean":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_IsBound(self, theKey)

    def UnBind(self, theKey: 'Standard_GUID') -> "Standard_Boolean":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_UnBind(self, theKey)

    def Seek(self, theKey: 'Standard_GUID') -> "opencascade::handle< TPrsStd_Driver > const *":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Find(self, *args)

    def ChangeSeek(self, theKey: 'Standard_GUID') -> "opencascade::handle< TPrsStd_Driver > *":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'Standard_GUID') -> "opencascade::handle< TPrsStd_Driver > &":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< TPrsStd_Driver > &":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Clear(self, *args)
    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DataMapOfGUIDDriver
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TPrsStd.TPrsStd_DataMapOfGUIDDriver_Size(self)
TPrsStd_DataMapOfGUIDDriver_swigregister = _TPrsStd.TPrsStd_DataMapOfGUIDDriver_swigregister
TPrsStd_DataMapOfGUIDDriver_swigregister(TPrsStd_DataMapOfGUIDDriver)

class TPrsStd_AISPresentation(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_AISPresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_AISPresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_AISPresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddSelectionMode(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theSelectionMode: int
        theTransaction: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_AddSelectionMode(self, *args)


    def Color(self, *args) -> "Quantity_NameOfColor":
        """
        No available documentation.

        Returns
        -------
        Quantity_NameOfColor

        """
        return _TPrsStd.TPrsStd_AISPresentation_Color(self, *args)


    def Display(self, *args) -> "void":
        """
        Display presentation of object in ais viewer. if <update> = true then aisobject is recomputed and all the visualization settings are applied.

        Parameters
        ----------
        update: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_Display(self, *args)


    def Erase(self, *args) -> "void":
        """
        Removes the presentation of this ais presentation attribute from the tprsstd_aisviewer. if remove is true, this ais presentation attribute is removed from the interactive context.

        Parameters
        ----------
        remove: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_Erase(self, *args)


    def GetAIS(self, *args) -> "opencascade::handle< AIS_InteractiveObject >":
        """
        Returns ais_interactiveobject stored in the presentation attribute.

        Returns
        -------
        opencascade::handle<AIS_InteractiveObject>

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetAIS(self, *args)


    def GetDriverGUID(self, *args) -> "Standard_GUID":
        """
        No available documentation.

        Returns
        -------
        Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetDriverGUID(self, *args)


    def GetID(*args) -> "Standard_GUID const &":
        """
        Returns the guid for tprsstd_aispresentation attributes.

        Returns
        -------
        Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetID(*args)

    GetID = staticmethod(GetID)

    def GetNbSelectionModes(self, *args) -> "Standard_Integer":
        """
        Returns selection mode(s) of the attribute. it starts with 1 .. getnbselectionmodes().

        Returns
        -------
        int

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetNbSelectionModes(self, *args)


    def HasOwnColor(self, *args) -> "Standard_Boolean":
        """
        Returns true if this presentation attribute already has a color setting.

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnColor(self, *args)


    def HasOwnMaterial(self, *args) -> "Standard_Boolean":
        """
        Returns true if this presentation attribute already has a material setting.

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnMaterial(self, *args)


    def HasOwnMode(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnMode(self, *args)


    def HasOwnSelectionMode(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnSelectionMode(self, *args)


    def HasOwnTransparency(self, *args) -> "Standard_Boolean":
        """
        Returns true if this presentation attribute already has a transparency setting.

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnTransparency(self, *args)


    def HasOwnWidth(self, *args) -> "Standard_Boolean":
        """
        Returns true if this presentation attribute already has a width setting.

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnWidth(self, *args)


    def IsDisplayed(self, *args) -> "Standard_Boolean":
        """
        Returns true if this ais presentation attribute is displayed.

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_IsDisplayed(self, *args)


    def Material(self, *args) -> "Graphic3d_NameOfMaterial":
        """
        Returns the material setting for this presentation attribute.

        Returns
        -------
        Graphic3d_NameOfMaterial

        """
        return _TPrsStd.TPrsStd_AISPresentation_Material(self, *args)


    def Mode(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _TPrsStd.TPrsStd_AISPresentation_Mode(self, *args)


    def SelectionMode(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        index: int,optional
        	default value is 1

        Returns
        -------
        int

        """
        return _TPrsStd.TPrsStd_AISPresentation_SelectionMode(self, *args)


    def Set(*args) -> "opencascade::handle< TPrsStd_AISPresentation >":
        """
        Creates or retrieves the presentation attribute on the label l, and sets the guid driver.

        Parameters
        ----------
        L: TDF_Label
        driver: Standard_GUID

        Returns
        -------
        opencascade::handle<TPrsStd_AISPresentation>

        Creates or retrieves the aispresentation attribute attached to master. the guid of the driver will be the guid of master. master is the attribute you want to display.

        Parameters
        ----------
        master: TDF_Attribute

        Returns
        -------
        opencascade::handle<TPrsStd_AISPresentation>

        """
        return _TPrsStd.TPrsStd_AISPresentation_Set(*args)

    Set = staticmethod(Set)

    def SetColor(self, *args) -> "void":
        """
        Sets the color acolor for this presentation attribute.

        Parameters
        ----------
        aColor: Quantity_NameOfColor

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetColor(self, *args)


    def SetDisplayed(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetDisplayed(self, *args)


    def SetDriverGUID(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        guid: Standard_GUID

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetDriverGUID(self, *args)


    def SetMaterial(self, *args) -> "void":
        """
        Sets the material aname for this presentation attribute.

        Parameters
        ----------
        aName: Graphic3d_NameOfMaterial

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetMaterial(self, *args)


    def SetMode(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theMode: int

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetMode(self, *args)


    def SetSelectionMode(self, *args) -> "void":
        """
        Sets selection mode. if 'thetransaction' flag is off, modification of the attribute doesn't influence the transaction mechanism (the attribute doesn't participate in undo/redo because of this modification). certainly, if any other data of the attribute is modified (display mode, color, ...), the attribute will be included into undo/redo.

        Parameters
        ----------
        theSelectionMode: int
        theTransaction: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetSelectionMode(self, *args)


    def SetTransparency(self, *args) -> "void":
        """
        Sets the transparency value avalue for this presentation attribute. this value is 0.6 by default.

        Parameters
        ----------
        aValue: float,optional
        	default value is 0.6

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetTransparency(self, *args)


    def SetWidth(self, *args) -> "void":
        """
        Sets the width awidth for this presentation attribute.

        Parameters
        ----------
        aWidth: float

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetWidth(self, *args)


    def Transparency(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _TPrsStd.TPrsStd_AISPresentation_Transparency(self, *args)


    def Unset(*args) -> "void":
        """
        Delete (if exist) the presentation attribute associated to the label <l>.

        Parameters
        ----------
        L: TDF_Label

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_Unset(*args)

    Unset = staticmethod(Unset)

    def UnsetColor(self, *args) -> "void":
        """
        Removes the color setting from this presentation attribute.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetColor(self, *args)


    def UnsetMaterial(self, *args) -> "void":
        """
        Removes the material setting from this presentation attribute.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetMaterial(self, *args)


    def UnsetMode(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetMode(self, *args)


    def UnsetSelectionMode(self, *args) -> "void":
        """
        Clears all selection modes of the attribute.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetSelectionMode(self, *args)


    def UnsetTransparency(self, *args) -> "void":
        """
        Removes the transparency setting from this presentation attribute.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetTransparency(self, *args)


    def UnsetWidth(self, *args) -> "void":
        """
        Removes the width setting from this presentation attribute.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetWidth(self, *args)


    def Update(self, *args) -> "void":
        """
        Recompute presentation of object and apply the visualization settings.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISPresentation_Update(self, *args)


    def Width(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _TPrsStd.TPrsStd_AISPresentation_Width(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_AISPresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AISPresentation
    __del__ = lambda self: None
TPrsStd_AISPresentation_swigregister = _TPrsStd.TPrsStd_AISPresentation_swigregister
TPrsStd_AISPresentation_swigregister(TPrsStd_AISPresentation)

def TPrsStd_AISPresentation_GetID(*args) -> "Standard_GUID const &":
    """
    Returns the guid for tprsstd_aispresentation attributes.

    Returns
    -------
    Standard_GUID

    """
    return _TPrsStd.TPrsStd_AISPresentation_GetID(*args)

def TPrsStd_AISPresentation_Set(*args) -> "opencascade::handle< TPrsStd_AISPresentation >":
    """
    Creates or retrieves the presentation attribute on the label l, and sets the guid driver.

    Parameters
    ----------
    L: TDF_Label
    driver: Standard_GUID

    Returns
    -------
    opencascade::handle<TPrsStd_AISPresentation>

    Creates or retrieves the aispresentation attribute attached to master. the guid of the driver will be the guid of master. master is the attribute you want to display.

    Parameters
    ----------
    master: TDF_Attribute

    Returns
    -------
    opencascade::handle<TPrsStd_AISPresentation>

    """
    return _TPrsStd.TPrsStd_AISPresentation_Set(*args)

def TPrsStd_AISPresentation_Unset(*args) -> "void":
    """
    Delete (if exist) the presentation attribute associated to the label <l>.

    Parameters
    ----------
    L: TDF_Label

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_AISPresentation_Unset(*args)

class TPrsStd_AISViewer(OCC.Core.TDF.TDF_Attribute):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_AISViewer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TDF.TDF_Attribute]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_AISViewer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_AISViewer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Find(*args) -> "Standard_Boolean":
        """
        Finds the viewer attribute at the label access, the root of the data framework. calling this function can be used to initialize an ais viewer.

        Parameters
        ----------
        acces: TDF_Label
        A: TPrsStd_AISViewer

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        acces: TDF_Label
        IC: AIS_InteractiveContext

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        acces: TDF_Label
        V: V3d_Viewer

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISViewer_Find(*args)

    Find = staticmethod(Find)

    def GetID(*args) -> "Standard_GUID const &":
        """
        Class methods =============.

        Returns
        -------
        Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISViewer_GetID(*args)

    GetID = staticmethod(GetID)

    def GetInteractiveContext(self, *args) -> "opencascade::handle< AIS_InteractiveContext >":
        """
        Returns the interactive context in this attribute.

        Returns
        -------
        opencascade::handle<AIS_InteractiveContext>

        """
        return _TPrsStd.TPrsStd_AISViewer_GetInteractiveContext(self, *args)


    def Has(*args) -> "Standard_Boolean":
        """
        Returns true if there is an aisviewer attribute in <acces> data framework.

        Parameters
        ----------
        acces: TDF_Label

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_AISViewer_Has(*args)

    Has = staticmethod(Has)

    def New(*args) -> "opencascade::handle< TPrsStd_AISViewer >":
        """
        Create and set an aisviewer at. raise an exception if has.

        Parameters
        ----------
        access: TDF_Label
        selector: AIS_InteractiveContext

        Returns
        -------
        opencascade::handle<TPrsStd_AISViewer>

        Create and set an aisattribute at root label. the interactive context is build. raise an exception if has.

        Parameters
        ----------
        acces: TDF_Label
        viewer: V3d_Viewer

        Returns
        -------
        opencascade::handle<TPrsStd_AISViewer>

        """
        return _TPrsStd.TPrsStd_AISViewer_New(*args)

    New = staticmethod(New)

    def SetInteractiveContext(self, *args) -> "void":
        """
        Sets the interactive context ctx for this attribute.

        Parameters
        ----------
        ctx: AIS_InteractiveContext

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISViewer_SetInteractiveContext(self, *args)


    def Update(self, *args) -> "void":
        """
        Aisviewer methods =================.

        Parameters
        ----------
        acces: TDF_Label

        Returns
        -------
        None

        Updates the viewer at the label access. access is the root of the data framework.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_AISViewer_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_AISViewer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AISViewer
    __del__ = lambda self: None
TPrsStd_AISViewer_swigregister = _TPrsStd.TPrsStd_AISViewer_swigregister
TPrsStd_AISViewer_swigregister(TPrsStd_AISViewer)

def TPrsStd_AISViewer_Find(*args) -> "Standard_Boolean":
    """
    Finds the viewer attribute at the label access, the root of the data framework. calling this function can be used to initialize an ais viewer.

    Parameters
    ----------
    acces: TDF_Label
    A: TPrsStd_AISViewer

    Returns
    -------
    bool

    No available documentation.

    Parameters
    ----------
    acces: TDF_Label
    IC: AIS_InteractiveContext

    Returns
    -------
    bool

    No available documentation.

    Parameters
    ----------
    acces: TDF_Label
    V: V3d_Viewer

    Returns
    -------
    bool

    """
    return _TPrsStd.TPrsStd_AISViewer_Find(*args)

def TPrsStd_AISViewer_GetID(*args) -> "Standard_GUID const &":
    """
    Class methods =============.

    Returns
    -------
    Standard_GUID

    """
    return _TPrsStd.TPrsStd_AISViewer_GetID(*args)

def TPrsStd_AISViewer_Has(*args) -> "Standard_Boolean":
    """
    Returns true if there is an aisviewer attribute in <acces> data framework.

    Parameters
    ----------
    acces: TDF_Label

    Returns
    -------
    bool

    """
    return _TPrsStd.TPrsStd_AISViewer_Has(*args)

def TPrsStd_AISViewer_New(*args) -> "opencascade::handle< TPrsStd_AISViewer >":
    """
    Create and set an aisviewer at. raise an exception if has.

    Parameters
    ----------
    access: TDF_Label
    selector: AIS_InteractiveContext

    Returns
    -------
    opencascade::handle<TPrsStd_AISViewer>

    Create and set an aisattribute at root label. the interactive context is build. raise an exception if has.

    Parameters
    ----------
    acces: TDF_Label
    viewer: V3d_Viewer

    Returns
    -------
    opencascade::handle<TPrsStd_AISViewer>

    """
    return _TPrsStd.TPrsStd_AISViewer_New(*args)

class TPrsStd_ConstraintTools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_ConstraintTools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_ConstraintTools, name)
    __repr__ = _swig_repr

    def ComputeAngle(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngle(*args)

    ComputeAngle = staticmethod(ComputeAngle)

    def ComputeAngleForOneFace(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args)

    ComputeAngleForOneFace = staticmethod(ComputeAngleForOneFace)

    def ComputeCoincident(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeCoincident(*args)

    ComputeCoincident = staticmethod(ComputeCoincident)

    def ComputeConcentric(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeConcentric(*args)

    ComputeConcentric = staticmethod(ComputeConcentric)

    def ComputeDiameter(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeDiameter(*args)

    ComputeDiameter = staticmethod(ComputeDiameter)

    def ComputeDistance(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeDistance(*args)

    ComputeDistance = staticmethod(ComputeDistance)

    def ComputeEqualDistance(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualDistance(*args)

    ComputeEqualDistance = staticmethod(ComputeEqualDistance)

    def ComputeEqualRadius(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualRadius(*args)

    ComputeEqualRadius = staticmethod(ComputeEqualRadius)

    def ComputeFix(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeFix(*args)

    ComputeFix = staticmethod(ComputeFix)

    def ComputeMaxRadius(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMaxRadius(*args)

    ComputeMaxRadius = staticmethod(ComputeMaxRadius)

    def ComputeMidPoint(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMidPoint(*args)

    ComputeMidPoint = staticmethod(ComputeMidPoint)

    def ComputeMinRadius(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMinRadius(*args)

    ComputeMinRadius = staticmethod(ComputeMinRadius)

    def ComputeOffset(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeOffset(*args)

    ComputeOffset = staticmethod(ComputeOffset)

    def ComputeOthers(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeOthers(*args)

    ComputeOthers = staticmethod(ComputeOthers)

    def ComputeParallel(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeParallel(*args)

    ComputeParallel = staticmethod(ComputeParallel)

    def ComputePerpendicular(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputePerpendicular(*args)

    ComputePerpendicular = staticmethod(ComputePerpendicular)

    def ComputePlacement(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputePlacement(*args)

    ComputePlacement = staticmethod(ComputePlacement)

    def ComputeRadius(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeRadius(*args)

    ComputeRadius = staticmethod(ComputeRadius)

    def ComputeRound(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeRound(*args)

    ComputeRound = staticmethod(ComputeRound)

    def ComputeSymmetry(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeSymmetry(*args)

    ComputeSymmetry = staticmethod(ComputeSymmetry)

    def ComputeTangent(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeTangent(*args)

    ComputeTangent = staticmethod(ComputeTangent)

    def ComputeTextAndValue(*args) -> "Standard_Real &":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        aText: TCollection_ExtendedString
        anIsAngle: bool

        Returns
        -------
        aValue: float

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeTextAndValue(*args)

    ComputeTextAndValue = staticmethod(ComputeTextAndValue)

    def UpdateOnlyValue(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConst: TDataXtd_Constraint
        anAIS: AIS_InteractiveObject

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_ConstraintTools_UpdateOnlyValue(*args)

    UpdateOnlyValue = staticmethod(UpdateOnlyValue)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TPrsStd.new_TPrsStd_ConstraintTools()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TPrsStd.delete_TPrsStd_ConstraintTools
    __del__ = lambda self: None
TPrsStd_ConstraintTools_swigregister = _TPrsStd.TPrsStd_ConstraintTools_swigregister
TPrsStd_ConstraintTools_swigregister(TPrsStd_ConstraintTools)

def TPrsStd_ConstraintTools_ComputeAngle(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngle(*args)

def TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args)

def TPrsStd_ConstraintTools_ComputeCoincident(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeCoincident(*args)

def TPrsStd_ConstraintTools_ComputeConcentric(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeConcentric(*args)

def TPrsStd_ConstraintTools_ComputeDiameter(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeDiameter(*args)

def TPrsStd_ConstraintTools_ComputeDistance(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeDistance(*args)

def TPrsStd_ConstraintTools_ComputeEqualDistance(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualDistance(*args)

def TPrsStd_ConstraintTools_ComputeEqualRadius(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualRadius(*args)

def TPrsStd_ConstraintTools_ComputeFix(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeFix(*args)

def TPrsStd_ConstraintTools_ComputeMaxRadius(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMaxRadius(*args)

def TPrsStd_ConstraintTools_ComputeMidPoint(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMidPoint(*args)

def TPrsStd_ConstraintTools_ComputeMinRadius(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMinRadius(*args)

def TPrsStd_ConstraintTools_ComputeOffset(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeOffset(*args)

def TPrsStd_ConstraintTools_ComputeOthers(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeOthers(*args)

def TPrsStd_ConstraintTools_ComputeParallel(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeParallel(*args)

def TPrsStd_ConstraintTools_ComputePerpendicular(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputePerpendicular(*args)

def TPrsStd_ConstraintTools_ComputePlacement(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputePlacement(*args)

def TPrsStd_ConstraintTools_ComputeRadius(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeRadius(*args)

def TPrsStd_ConstraintTools_ComputeRound(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeRound(*args)

def TPrsStd_ConstraintTools_ComputeSymmetry(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeSymmetry(*args)

def TPrsStd_ConstraintTools_ComputeTangent(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeTangent(*args)

def TPrsStd_ConstraintTools_ComputeTextAndValue(*args) -> "Standard_Real &":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    aText: TCollection_ExtendedString
    anIsAngle: bool

    Returns
    -------
    aValue: float

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeTextAndValue(*args)

def TPrsStd_ConstraintTools_UpdateOnlyValue(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aConst: TDataXtd_Constraint
    anAIS: AIS_InteractiveObject

    Returns
    -------
    None

    """
    return _TPrsStd.TPrsStd_ConstraintTools_UpdateOnlyValue(*args)

class TPrsStd_Driver(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_Driver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_Driver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Update(self, *args) -> "Standard_Boolean":
        """
        Updates the interactive object ais with information found on the attributes associated with the label l.

        Parameters
        ----------
        L: TDF_Label
        ais: AIS_InteractiveObject

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_Driver_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_Driver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_Driver
    __del__ = lambda self: None
TPrsStd_Driver_swigregister = _TPrsStd.TPrsStd_Driver_swigregister
TPrsStd_Driver_swigregister(TPrsStd_Driver)

class TPrsStd_DriverTable(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_DriverTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_DriverTable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Default constructor.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_DriverTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddDriver(self, *args) -> "Standard_Boolean":
        """
        Returns true if the driver has been added successfully to the driver table.

        Parameters
        ----------
        guid: Standard_GUID
        driver: TPrsStd_Driver

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_DriverTable_AddDriver(self, *args)


    def Clear(self, *args) -> "void":
        """
        Removes all drivers. returns true if the driver has been removed successfully. if this method is used, the initstandarddrivers method should be called to fill the table with standard drivers.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_DriverTable_Clear(self, *args)


    def FindDriver(self, *args) -> "Standard_Boolean":
        """
        Returns true if the driver was found.

        Parameters
        ----------
        guid: Standard_GUID
        driver: TPrsStd_Driver

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_DriverTable_FindDriver(self, *args)


    def Get(*args) -> "opencascade::handle< TPrsStd_DriverTable >":
        """
        Returns the static table. if it does not exist, creates it and fills it with standard drivers.

        Returns
        -------
        opencascade::handle<TPrsStd_DriverTable>

        """
        return _TPrsStd.TPrsStd_DriverTable_Get(*args)

    Get = staticmethod(Get)

    def InitStandardDrivers(self, *args) -> "void":
        """
        Fills the table with standard drivers.

        Returns
        -------
        None

        """
        return _TPrsStd.TPrsStd_DriverTable_InitStandardDrivers(self, *args)


    def RemoveDriver(self, *args) -> "Standard_Boolean":
        """
        Removes a driver with the given guid. returns true if the driver has been removed successfully.

        Parameters
        ----------
        guid: Standard_GUID

        Returns
        -------
        bool

        """
        return _TPrsStd.TPrsStd_DriverTable_RemoveDriver(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_DriverTable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DriverTable
    __del__ = lambda self: None
TPrsStd_DriverTable_swigregister = _TPrsStd.TPrsStd_DriverTable_swigregister
TPrsStd_DriverTable_swigregister(TPrsStd_DriverTable)

def TPrsStd_DriverTable_Get(*args) -> "opencascade::handle< TPrsStd_DriverTable >":
    """
    Returns the static table. if it does not exist, creates it and fills it with standard drivers.

    Returns
    -------
    opencascade::handle<TPrsStd_DriverTable>

    """
    return _TPrsStd.TPrsStd_DriverTable_Get(*args)

class TPrsStd_AxisDriver(TPrsStd_Driver):
    __swig_setmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_AxisDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_AxisDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty axis driver.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_AxisDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_AxisDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AxisDriver
    __del__ = lambda self: None
TPrsStd_AxisDriver_swigregister = _TPrsStd.TPrsStd_AxisDriver_swigregister
TPrsStd_AxisDriver_swigregister(TPrsStd_AxisDriver)

class TPrsStd_ConstraintDriver(TPrsStd_Driver):
    __swig_setmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_ConstraintDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_ConstraintDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty constraint driver.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_ConstraintDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_ConstraintDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_ConstraintDriver
    __del__ = lambda self: None
TPrsStd_ConstraintDriver_swigregister = _TPrsStd.TPrsStd_ConstraintDriver_swigregister
TPrsStd_ConstraintDriver_swigregister(TPrsStd_ConstraintDriver)

class TPrsStd_GeometryDriver(TPrsStd_Driver):
    __swig_setmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_GeometryDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_GeometryDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty geometry driver.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_GeometryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_GeometryDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_GeometryDriver
    __del__ = lambda self: None
TPrsStd_GeometryDriver_swigregister = _TPrsStd.TPrsStd_GeometryDriver_swigregister
TPrsStd_GeometryDriver_swigregister(TPrsStd_GeometryDriver)

class TPrsStd_NamedShapeDriver(TPrsStd_Driver):
    __swig_setmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_NamedShapeDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_NamedShapeDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty named shape driver.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_NamedShapeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_NamedShapeDriver
    __del__ = lambda self: None
TPrsStd_NamedShapeDriver_swigregister = _TPrsStd.TPrsStd_NamedShapeDriver_swigregister
TPrsStd_NamedShapeDriver_swigregister(TPrsStd_NamedShapeDriver)

class TPrsStd_PlaneDriver(TPrsStd_Driver):
    __swig_setmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_PlaneDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_PlaneDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty plane driver.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_PlaneDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_PlaneDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_PlaneDriver
    __del__ = lambda self: None
TPrsStd_PlaneDriver_swigregister = _TPrsStd.TPrsStd_PlaneDriver_swigregister
TPrsStd_PlaneDriver_swigregister(TPrsStd_PlaneDriver)

class TPrsStd_PointDriver(TPrsStd_Driver):
    __swig_setmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPrsStd_PointDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [TPrsStd_Driver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPrsStd_PointDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty point driver.

        Returns
        -------
        None

        """
        this = _TPrsStd.new_TPrsStd_PointDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_TPrsStd_PointDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TPrsStd.delete_TPrsStd_PointDriver
    __del__ = lambda self: None
TPrsStd_PointDriver_swigregister = _TPrsStd.TPrsStd_PointDriver_swigregister
TPrsStd_PointDriver_swigregister(TPrsStd_PointDriver)



# This file is compatible with both classic and new-style classes.


