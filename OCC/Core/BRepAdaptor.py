# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
BRepAdaptor module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_brepadaptor.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepAdaptor
else:
    import _BRepAdaptor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepAdaptor.delete_SwigPyIterator

    def value(self):
        return _BRepAdaptor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepAdaptor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepAdaptor.SwigPyIterator_copy(self)

    def next(self):
        return _BRepAdaptor.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepAdaptor.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepAdaptor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepAdaptor:
_BRepAdaptor.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BRepAdaptor.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _BRepAdaptor.ios_base_erase_event
    imbue_event = _BRepAdaptor.ios_base_imbue_event
    copyfmt_event = _BRepAdaptor.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _BRepAdaptor.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _BRepAdaptor.ios_base_flags(self, *args)

    def setf(self, *args):
        return _BRepAdaptor.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _BRepAdaptor.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _BRepAdaptor.ios_base_precision(self, *args)

    def width(self, *args):
        return _BRepAdaptor.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _BRepAdaptor.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _BRepAdaptor.ios_base_imbue(self, __loc)

    def getloc(self):
        return _BRepAdaptor.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _BRepAdaptor.ios_base_xalloc()

    def iword(self, __ix):
        return _BRepAdaptor.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _BRepAdaptor.ios_base_pword(self, __ix)
    __swig_destroy__ = _BRepAdaptor.delete_ios_base

# Register ios_base in _BRepAdaptor:
_BRepAdaptor.ios_base_swigregister(ios_base)
cvar = _BRepAdaptor.cvar
ios_base.boolalpha = _BRepAdaptor.cvar.ios_base_boolalpha
ios_base.dec = _BRepAdaptor.cvar.ios_base_dec
ios_base.fixed = _BRepAdaptor.cvar.ios_base_fixed
ios_base.hex = _BRepAdaptor.cvar.ios_base_hex
ios_base.internal = _BRepAdaptor.cvar.ios_base_internal
ios_base.left = _BRepAdaptor.cvar.ios_base_left
ios_base.oct = _BRepAdaptor.cvar.ios_base_oct
ios_base.right = _BRepAdaptor.cvar.ios_base_right
ios_base.scientific = _BRepAdaptor.cvar.ios_base_scientific
ios_base.showbase = _BRepAdaptor.cvar.ios_base_showbase
ios_base.showpoint = _BRepAdaptor.cvar.ios_base_showpoint
ios_base.showpos = _BRepAdaptor.cvar.ios_base_showpos
ios_base.skipws = _BRepAdaptor.cvar.ios_base_skipws
ios_base.unitbuf = _BRepAdaptor.cvar.ios_base_unitbuf
ios_base.uppercase = _BRepAdaptor.cvar.ios_base_uppercase
ios_base.adjustfield = _BRepAdaptor.cvar.ios_base_adjustfield
ios_base.basefield = _BRepAdaptor.cvar.ios_base_basefield
ios_base.floatfield = _BRepAdaptor.cvar.ios_base_floatfield
ios_base.badbit = _BRepAdaptor.cvar.ios_base_badbit
ios_base.eofbit = _BRepAdaptor.cvar.ios_base_eofbit
ios_base.failbit = _BRepAdaptor.cvar.ios_base_failbit
ios_base.goodbit = _BRepAdaptor.cvar.ios_base_goodbit
ios_base.app = _BRepAdaptor.cvar.ios_base_app
ios_base.ate = _BRepAdaptor.cvar.ios_base_ate
ios_base.binary = _BRepAdaptor.cvar.ios_base_binary
ios_base.ios_base_in = _BRepAdaptor.cvar.ios_base_ios_base_in
ios_base.out = _BRepAdaptor.cvar.ios_base_out
ios_base.trunc = _BRepAdaptor.cvar.ios_base_trunc
ios_base.beg = _BRepAdaptor.cvar.ios_base_beg
ios_base.cur = _BRepAdaptor.cvar.ios_base_cur
ios_base.end = _BRepAdaptor.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _BRepAdaptor.ios_rdstate(self)

    def clear(self, *args):
        return _BRepAdaptor.ios_clear(self, *args)

    def setstate(self, __state):
        return _BRepAdaptor.ios_setstate(self, __state)

    def good(self):
        return _BRepAdaptor.ios_good(self)

    def eof(self):
        return _BRepAdaptor.ios_eof(self)

    def fail(self):
        return _BRepAdaptor.ios_fail(self)

    def bad(self):
        return _BRepAdaptor.ios_bad(self)

    def exceptions(self, *args):
        return _BRepAdaptor.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _BRepAdaptor.ios_swiginit(self, _BRepAdaptor.new_ios(__sb))
    __swig_destroy__ = _BRepAdaptor.delete_ios

    def tie(self, *args):
        return _BRepAdaptor.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _BRepAdaptor.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _BRepAdaptor.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _BRepAdaptor.ios_fill(self, *args)

    def imbue(self, __loc):
        return _BRepAdaptor.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _BRepAdaptor.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _BRepAdaptor.ios_widen(self, __c)

# Register ios in _BRepAdaptor:
_BRepAdaptor.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _BRepAdaptor.ostream_swiginit(self, _BRepAdaptor.new_ostream(__sb))
    __swig_destroy__ = _BRepAdaptor.delete_ostream

    def __lshift__(self, *args):
        return _BRepAdaptor.ostream___lshift__(self, *args)

    def put(self, __c):
        return _BRepAdaptor.ostream_put(self, __c)

    def write(self, __s, __n):
        return _BRepAdaptor.ostream_write(self, __s, __n)

    def flush(self):
        return _BRepAdaptor.ostream_flush(self)

    def tellp(self):
        return _BRepAdaptor.ostream_tellp(self)

    def seekp(self, *args):
        return _BRepAdaptor.ostream_seekp(self, *args)

# Register ostream in _BRepAdaptor:
_BRepAdaptor.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _BRepAdaptor.istream_swiginit(self, _BRepAdaptor.new_istream(__sb))
    __swig_destroy__ = _BRepAdaptor.delete_istream

    def __rshift__(self, *args):
        return _BRepAdaptor.istream___rshift__(self, *args)

    def gcount(self):
        return _BRepAdaptor.istream_gcount(self)

    def get(self, *args):
        return _BRepAdaptor.istream_get(self, *args)

    def getline(self, *args):
        return _BRepAdaptor.istream_getline(self, *args)

    def ignore(self, *args):
        return _BRepAdaptor.istream_ignore(self, *args)

    def peek(self):
        return _BRepAdaptor.istream_peek(self)

    def read(self, __s, __n):
        return _BRepAdaptor.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _BRepAdaptor.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _BRepAdaptor.istream_putback(self, __c)

    def unget(self):
        return _BRepAdaptor.istream_unget(self)

    def sync(self):
        return _BRepAdaptor.istream_sync(self)

    def tellg(self):
        return _BRepAdaptor.istream_tellg(self)

    def seekg(self, *args):
        return _BRepAdaptor.istream_seekg(self, *args)

# Register istream in _BRepAdaptor:
_BRepAdaptor.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _BRepAdaptor.iostream_swiginit(self, _BRepAdaptor.new_iostream(__sb))
    __swig_destroy__ = _BRepAdaptor.delete_iostream

# Register iostream in _BRepAdaptor:
_BRepAdaptor.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _BRepAdaptor.endl_cb_ptr
endl = _BRepAdaptor.endl
ends_cb_ptr = _BRepAdaptor.ends_cb_ptr
ends = _BRepAdaptor.ends
flush_cb_ptr = _BRepAdaptor.flush_cb_ptr
flush = _BRepAdaptor.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopoDS
import OCC.Core.TopLoc
import OCC.Core.Geom2dAdaptor
import OCC.Core.GeomAdaptor

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BRepAdaptor_CompCurve_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_CompCurve_Create()

def Handle_BRepAdaptor_CompCurve_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_CompCurve_DownCast(t)

def Handle_BRepAdaptor_CompCurve_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_CompCurve_IsNull(t)

def Handle_BRepAdaptor_Curve_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_Curve_Create()

def Handle_BRepAdaptor_Curve_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Curve_DownCast(t)

def Handle_BRepAdaptor_Curve_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Curve_IsNull(t)

def Handle_BRepAdaptor_Curve2d_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_Curve2d_Create()

def Handle_BRepAdaptor_Curve2d_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Curve2d_DownCast(t)

def Handle_BRepAdaptor_Curve2d_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Curve2d_IsNull(t)

def Handle_BRepAdaptor_Surface_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_Surface_Create()

def Handle_BRepAdaptor_Surface_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Surface_DownCast(t)

def Handle_BRepAdaptor_Surface_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Surface_IsNull(t)

def Handle_BRepAdaptor_HArray1OfCurve_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_Create()

def Handle_BRepAdaptor_HArray1OfCurve_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_DownCast(t)

def Handle_BRepAdaptor_HArray1OfCurve_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_IsNull(t)
class BRepAdaptor_Array1OfCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_begin(self, *args)

    def cbegin(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_cbegin(self)

    def end(self, *args):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_end(self, *args)

    def cend(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_cend(self)

    def __init__(self, *args):
        _BRepAdaptor.BRepAdaptor_Array1OfCurve_swiginit(self, _BRepAdaptor.new_BRepAdaptor_Array1OfCurve(*args))
    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Array1OfCurve

    def Init(self, theValue):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Init(self, theValue)

    def Size(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Size(self)

    def Length(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Length(self)

    def IsEmpty(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_IsEmpty(self)

    def Lower(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Lower(self)

    def Upper(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Upper(self)

    def Assign(self, theOther):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Assign(self, theOther)

    def Move(self, *args):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Move(self, *args)

    def Set(self, *args):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Set(self, *args)

    def First(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_First(self)

    def ChangeFirst(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_ChangeFirst(self)

    def Last(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Last(self)

    def ChangeLast(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve___call__(self, *args)

    def SetValue(self, *args):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_SetValue(self, *args)

    def UpdateLowerBound(self, theLower):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_UpdateLowerBound(self, theLower)

    def UpdateUpperBound(self, theUpper):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_UpdateUpperBound(self, theUpper)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Resize(self, theLower, theUpper, theToCopyData)

    def IsDeletable(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_IsDeletable(self)

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register BRepAdaptor_Array1OfCurve in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_Array1OfCurve_swigregister(BRepAdaptor_Array1OfCurve)
class BRepAdaptor_CompCurve(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an undefined curve with no wire loaded.

        Parameters
        ----------
        W: TopoDS_Wire
        KnotByCurvilinearAbcissa: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        W: TopoDS_Wire
        KnotByCurvilinearAbcissa: bool
        First: float
        Last: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Creates a curve to access the geometry of edge <w>.

        """
        _BRepAdaptor.BRepAdaptor_CompCurve_swiginit(self, _BRepAdaptor.new_BRepAdaptor_CompCurve(*args))

    def Edge(self, *args):
        r"""

        Parameters
        ----------
        U: float
        E: TopoDS_Edge

        Return
        -------
        UonE: float

        Description
        -----------
        Returns an edge and one parameter on them corresponding to the parameter u.

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Edge(self, *args)

    def Initialize(self, *args):
        r"""

        Parameters
        ----------
        W: TopoDS_Wire
        KnotByCurvilinearAbcissa: bool

        Return
        -------
        None

        Description
        -----------
        Sets the wire <w>.

        Parameters
        ----------
        W: TopoDS_Wire
        KnotByCurvilinearAbcissa: bool
        First: float
        Last: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Sets wire <w> and trimmed parameter.

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Initialize(self, *args)

    def Wire(self, *args):
        r"""
        Return
        -------
        TopoDS_Wire

        Description
        -----------
        Returns the wire.

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Wire(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_CompCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_CompCurve

# Register BRepAdaptor_CompCurve in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_CompCurve_swigregister(BRepAdaptor_CompCurve)
class BRepAdaptor_Curve(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an undefined curve with no edge loaded.

        Parameters
        ----------
        E: TopoDS_Edge

        Return
        -------
        None

        Description
        -----------
        Creates a curve to access the geometry of edge <e>.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        Creates a curve to access the geometry of edge <e>. the geometry will be computed using the parametric curve of <e> on the face <f>. an error is raised if the edge does not have a pcurve on the face.

        """
        _BRepAdaptor.BRepAdaptor_Curve_swiginit(self, _BRepAdaptor.new_BRepAdaptor_Curve(*args))

    def Curve(self, *args):
        r"""
        Return
        -------
        GeomAdaptor_Curve

        Description
        -----------
        Returns the curve of the edge.

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Curve(self, *args)

    def CurveOnSurface(self, *args):
        r"""
        Return
        -------
        Adaptor3d_CurveOnSurface

        Description
        -----------
        Returns the curveonsurface of the edge.

        """
        return _BRepAdaptor.BRepAdaptor_Curve_CurveOnSurface(self, *args)

    def Edge(self, *args):
        r"""
        Return
        -------
        TopoDS_Edge

        Description
        -----------
        Returns the edge.

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Edge(self, *args)

    def Initialize(self, *args):
        r"""

        Parameters
        ----------
        E: TopoDS_Edge

        Return
        -------
        None

        Description
        -----------
        Sets the curve <self> to access the geometry of edge <e>.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        Sets the curve <self> to access the geometry of edge <e>. the geometry will be computed using the parametric curve of <e> on the face <f>. an error is raised if the edge does not have a pcurve on the face.

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Initialize(self, *args)

    def Is3DCurve(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the edge geometry is computed from a 3d curve.

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Is3DCurve(self, *args)

    def IsCurveOnSurface(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the edge geometry is computed from a pcurve on a surface.

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsCurveOnSurface(self, *args)

    def Reset(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset currently loaded curve (undone load()).

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Reset(self, *args)

    def Tolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the edge tolerance.

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Tolerance(self, *args)

    def Trsf(self, *args):
        r"""
        Return
        -------
        gp_Trsf

        Description
        -----------
        Returns the coordinate system of the curve.

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Trsf(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Curve

# Register BRepAdaptor_Curve in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_Curve_swigregister(BRepAdaptor_Curve)
class BRepAdaptor_Curve2d(OCC.Core.Geom2dAdaptor.Geom2dAdaptor_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an uninitialized curve2d.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        Creates with the pcurve of <e> on <f>.

        """
        _BRepAdaptor.BRepAdaptor_Curve2d_swiginit(self, _BRepAdaptor.new_BRepAdaptor_Curve2d(*args))

    def Edge(self, *args):
        r"""
        Return
        -------
        TopoDS_Edge

        Description
        -----------
        Returns the edge.

        """
        return _BRepAdaptor.BRepAdaptor_Curve2d_Edge(self, *args)

    def Face(self, *args):
        r"""
        Return
        -------
        TopoDS_Face

        Description
        -----------
        Returns the face.

        """
        return _BRepAdaptor.BRepAdaptor_Curve2d_Face(self, *args)

    def Initialize(self, *args):
        r"""

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        Initialize with the pcurve of <e> on <f>.

        """
        return _BRepAdaptor.BRepAdaptor_Curve2d_Initialize(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_Curve2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Curve2d

# Register BRepAdaptor_Curve2d in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_Curve2d_swigregister(BRepAdaptor_Curve2d)
class BRepAdaptor_Surface(OCC.Core.Adaptor3d.Adaptor3d_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an undefined surface with no face loaded.

        Parameters
        ----------
        F: TopoDS_Face
        R: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Creates a surface to access the geometry of <f>. if <restriction> is true the parameter range is the parameter range in the uv space of the restriction.

        """
        _BRepAdaptor.BRepAdaptor_Surface_swiginit(self, _BRepAdaptor.new_BRepAdaptor_Surface(*args))

    def ChangeSurface(self, *args):
        r"""
        Return
        -------
        GeomAdaptor_Surface

        Description
        -----------
        Returns the surface.

        """
        return _BRepAdaptor.BRepAdaptor_Surface_ChangeSurface(self, *args)

    def Face(self, *args):
        r"""
        Return
        -------
        TopoDS_Face

        Description
        -----------
        Returns the face.

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Face(self, *args)

    def Initialize(self, *args):
        r"""

        Parameters
        ----------
        F: TopoDS_Face
        Restriction: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Sets the surface to the geometry of <f>.

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Initialize(self, *args)

    def Surface(self, *args):
        r"""
        Return
        -------
        GeomAdaptor_Surface

        Description
        -----------
        Returns the surface.

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Surface(self, *args)

    def Tolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the face tolerance.

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Tolerance(self, *args)

    def Trsf(self, *args):
        r"""
        Return
        -------
        gp_Trsf

        Description
        -----------
        Returns the surface coordinate system.

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Trsf(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Surface

# Register BRepAdaptor_Surface in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_Surface_swigregister(BRepAdaptor_Surface)
class BRepAdaptor_HArray1OfCurve(BRepAdaptor_Array1OfCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepAdaptor.BRepAdaptor_HArray1OfCurve_swiginit(self, _BRepAdaptor.new_BRepAdaptor_HArray1OfCurve(*args))

    def Array1(self):
        return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_Array1(self)

    def ChangeArray1(self):
        return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_HArray1OfCurve_DownCast(t)

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_HArray1OfCurve

# Register BRepAdaptor_HArray1OfCurve in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_HArray1OfCurve_swigregister(BRepAdaptor_HArray1OfCurve)



