# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
HLRAppli module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_hlrappli.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HLRAppli
else:
    import _HLRAppli

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRAppli.delete_SwigPyIterator

    def value(self):
        return _HLRAppli.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HLRAppli.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HLRAppli.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HLRAppli.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HLRAppli.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HLRAppli.SwigPyIterator_copy(self)

    def next(self):
        return _HLRAppli.SwigPyIterator_next(self)

    def __next__(self):
        return _HLRAppli.SwigPyIterator___next__(self)

    def previous(self):
        return _HLRAppli.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HLRAppli.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HLRAppli.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HLRAppli.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HLRAppli.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HLRAppli.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HLRAppli.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HLRAppli.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HLRAppli:
_HLRAppli.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _HLRAppli.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.HLRBRep
import OCC.Core.HLRAlgo
import OCC.Core.TColgp
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.IntRes2d
import OCC.Core.TopTools
import OCC.Core.BRepTopAdaptor
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.HLRTopoBRep
import OCC.Core.Contap
import OCC.Core.IntCurve
import OCC.Core.Extrema

from enum import IntEnum
from OCC.Core.Exception import *



class HLRAppli_ReflectLines(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _HLRAppli.HLRAppli_ReflectLines_swiginit(self, _HLRAppli.new_HLRAppli_ReflectLines(*args))

    def GetCompoundOf3dEdges(self, *args):
        r"""

        Parameters
        ----------
        type: HLRBRep_TypeOfResultingEdge
        visible: bool
        In3d: bool

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns resulting compound of lines of specified type and visibility represented by edges in 3d or 2d.

        """
        return _HLRAppli.HLRAppli_ReflectLines_GetCompoundOf3dEdges(self, *args)

    def GetResult(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns resulting compound of reflect lines represented by edges in 3d.

        """
        return _HLRAppli.HLRAppli_ReflectLines_GetResult(self, *args)

    def Perform(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRAppli.HLRAppli_ReflectLines_Perform(self, *args)

    def SetAxes(self, *args):
        r"""

        Parameters
        ----------
        Nx: float
        Ny: float
        Nz: float
        XAt: float
        YAt: float
        ZAt: float
        XUp: float
        YUp: float
        ZUp: float

        Return
        -------
        None

        Description
        -----------
        Sets the normal to the plane of visualisation, the coordinates of the view point and the coordinates of the vertical direction vector.

        """
        return _HLRAppli.HLRAppli_ReflectLines_SetAxes(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAppli.delete_HLRAppli_ReflectLines

# Register HLRAppli_ReflectLines in _HLRAppli:
_HLRAppli.HLRAppli_ReflectLines_swigregister(HLRAppli_ReflectLines)



