# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
Hatch module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_hatch.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Hatch
else:
    import _Hatch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Hatch.delete_SwigPyIterator

    def value(self):
        return _Hatch.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Hatch.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Hatch.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Hatch.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Hatch.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Hatch.SwigPyIterator_copy(self)

    def next(self):
        return _Hatch.SwigPyIterator_next(self)

    def __next__(self):
        return _Hatch.SwigPyIterator___next__(self)

    def previous(self):
        return _Hatch.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Hatch.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Hatch.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Hatch.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Hatch.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Hatch.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Hatch.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Hatch.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Hatch:
_Hatch.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _Hatch.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *

Hatch_XLINE = _Hatch.Hatch_XLINE
Hatch_YLINE = _Hatch.Hatch_YLINE
Hatch_ANYLINE = _Hatch.Hatch_ANYLINE


class Hatch_LineForm(IntEnum):
	Hatch_XLINE = 0
	Hatch_YLINE = 1
	Hatch_ANYLINE = 2
Hatch_XLINE = Hatch_LineForm.Hatch_XLINE
Hatch_YLINE = Hatch_LineForm.Hatch_YLINE
Hatch_ANYLINE = Hatch_LineForm.Hatch_ANYLINE

class Hatch_SequenceOfLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _Hatch.Hatch_SequenceOfLine_begin(self)

    def end(self):
        return _Hatch.Hatch_SequenceOfLine_end(self)

    def cbegin(self):
        return _Hatch.Hatch_SequenceOfLine_cbegin(self)

    def cend(self):
        return _Hatch.Hatch_SequenceOfLine_cend(self)

    def __init__(self, *args):
        _Hatch.Hatch_SequenceOfLine_swiginit(self, _Hatch.new_Hatch_SequenceOfLine(*args))

    def Size(self):
        return _Hatch.Hatch_SequenceOfLine_Size(self)

    def Length(self):
        return _Hatch.Hatch_SequenceOfLine_Length(self)

    def Lower(self):
        return _Hatch.Hatch_SequenceOfLine_Lower(self)

    def Upper(self):
        return _Hatch.Hatch_SequenceOfLine_Upper(self)

    def IsEmpty(self):
        return _Hatch.Hatch_SequenceOfLine_IsEmpty(self)

    def Reverse(self):
        return _Hatch.Hatch_SequenceOfLine_Reverse(self)

    def Exchange(self, I, J):
        return _Hatch.Hatch_SequenceOfLine_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _Hatch.Hatch_SequenceOfLine_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _Hatch.Hatch_SequenceOfLine_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _Hatch.Hatch_SequenceOfLine_Assign(self, theOther)

    def Set(self, theOther):
        return _Hatch.Hatch_SequenceOfLine_Set(self, theOther)

    def Remove(self, *args):
        return _Hatch.Hatch_SequenceOfLine_Remove(self, *args)

    def Append(self, *args):
        return _Hatch.Hatch_SequenceOfLine_Append(self, *args)

    def Prepend(self, *args):
        return _Hatch.Hatch_SequenceOfLine_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _Hatch.Hatch_SequenceOfLine_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _Hatch.Hatch_SequenceOfLine_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _Hatch.Hatch_SequenceOfLine_Split(self, theIndex, theSeq)

    def First(self):
        return _Hatch.Hatch_SequenceOfLine_First(self)

    def ChangeFirst(self):
        return _Hatch.Hatch_SequenceOfLine_ChangeFirst(self)

    def Last(self):
        return _Hatch.Hatch_SequenceOfLine_Last(self)

    def ChangeLast(self):
        return _Hatch.Hatch_SequenceOfLine_ChangeLast(self)

    def Value(self, theIndex):
        return _Hatch.Hatch_SequenceOfLine_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _Hatch.Hatch_SequenceOfLine_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _Hatch.Hatch_SequenceOfLine___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _Hatch.Hatch_SequenceOfLine_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Hatch.delete_Hatch_SequenceOfLine

    def __len__(self):
        return self.Size()


# Register Hatch_SequenceOfLine in _Hatch:
_Hatch.Hatch_SequenceOfLine_swigregister(Hatch_SequenceOfLine)
class Hatch_SequenceOfParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _Hatch.Hatch_SequenceOfParameter_begin(self)

    def end(self):
        return _Hatch.Hatch_SequenceOfParameter_end(self)

    def cbegin(self):
        return _Hatch.Hatch_SequenceOfParameter_cbegin(self)

    def cend(self):
        return _Hatch.Hatch_SequenceOfParameter_cend(self)

    def __init__(self, *args):
        _Hatch.Hatch_SequenceOfParameter_swiginit(self, _Hatch.new_Hatch_SequenceOfParameter(*args))

    def Size(self):
        return _Hatch.Hatch_SequenceOfParameter_Size(self)

    def Length(self):
        return _Hatch.Hatch_SequenceOfParameter_Length(self)

    def Lower(self):
        return _Hatch.Hatch_SequenceOfParameter_Lower(self)

    def Upper(self):
        return _Hatch.Hatch_SequenceOfParameter_Upper(self)

    def IsEmpty(self):
        return _Hatch.Hatch_SequenceOfParameter_IsEmpty(self)

    def Reverse(self):
        return _Hatch.Hatch_SequenceOfParameter_Reverse(self)

    def Exchange(self, I, J):
        return _Hatch.Hatch_SequenceOfParameter_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _Hatch.Hatch_SequenceOfParameter_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _Hatch.Hatch_SequenceOfParameter_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _Hatch.Hatch_SequenceOfParameter_Assign(self, theOther)

    def Set(self, theOther):
        return _Hatch.Hatch_SequenceOfParameter_Set(self, theOther)

    def Remove(self, *args):
        return _Hatch.Hatch_SequenceOfParameter_Remove(self, *args)

    def Append(self, *args):
        return _Hatch.Hatch_SequenceOfParameter_Append(self, *args)

    def Prepend(self, *args):
        return _Hatch.Hatch_SequenceOfParameter_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _Hatch.Hatch_SequenceOfParameter_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _Hatch.Hatch_SequenceOfParameter_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _Hatch.Hatch_SequenceOfParameter_Split(self, theIndex, theSeq)

    def First(self):
        return _Hatch.Hatch_SequenceOfParameter_First(self)

    def ChangeFirst(self):
        return _Hatch.Hatch_SequenceOfParameter_ChangeFirst(self)

    def Last(self):
        return _Hatch.Hatch_SequenceOfParameter_Last(self)

    def ChangeLast(self):
        return _Hatch.Hatch_SequenceOfParameter_ChangeLast(self)

    def Value(self, theIndex):
        return _Hatch.Hatch_SequenceOfParameter_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _Hatch.Hatch_SequenceOfParameter_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _Hatch.Hatch_SequenceOfParameter___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _Hatch.Hatch_SequenceOfParameter_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Hatch.delete_Hatch_SequenceOfParameter

    def __len__(self):
        return self.Size()


# Register Hatch_SequenceOfParameter in _Hatch:
_Hatch.Hatch_SequenceOfParameter_swigregister(Hatch_SequenceOfParameter)
class Hatch_Hatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Tol: float
        Oriented: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Returns a empty hatcher. <tol> is the tolerance for intersections.

        """
        _Hatch.Hatch_Hatcher_swiginit(self, _Hatch.new_Hatch_Hatcher(*args))

    def AddLine(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin2d
        T: Hatch_LineForm (optional, default to Hatch_ANYLINE)

        Return
        -------
        None

        Description
        -----------
        Add a line <l> to be trimmed. <t> the type is only kept from information. it is not used in the computation.

        Parameters
        ----------
        D: gp_Dir2d
        Dist: float

        Return
        -------
        None

        Description
        -----------
        Add an infinite line on direction <d> at distance <dist> from the origin to be trimmed. <dist> may be negative. //! if o is the origin of the 2d plane, and v the vector perpendicular to d (in the direct direction). //! a point p is on the line if: op dot v = dist the parameter of p on the line is op dot d.

        """
        return _Hatch.Hatch_Hatcher_AddLine(self, *args)

    def AddXLine(self, *args):
        r"""

        Parameters
        ----------
        X: float

        Return
        -------
        None

        Description
        -----------
        Add an infinite line parallel to the y-axis at abciss <x>.

        """
        return _Hatch.Hatch_Hatcher_AddXLine(self, *args)

    def AddYLine(self, *args):
        r"""

        Parameters
        ----------
        Y: float

        Return
        -------
        None

        Description
        -----------
        Add an infinite line parallel to the x-axis at ordinate <y>.

        """
        return _Hatch.Hatch_Hatcher_AddYLine(self, *args)

    def Coordinate(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Returns the x or y coordinate of the line of index <i> if it is a x or a y line.

        """
        return _Hatch.Hatch_Hatcher_Coordinate(self, *args)

    def End(self, *args):
        r"""

        Parameters
        ----------
        I: int
        J: int

        Return
        -------
        float

        Description
        -----------
        Returns the last parameter of interval <j> on line <i>.

        """
        return _Hatch.Hatch_Hatcher_End(self, *args)

    def EndIndex(self, *args):
        r"""

        Parameters
        ----------
        I: int
        J: int

        Return
        -------
        Index: int
        Par2: float

        Description
        -----------
        Returns the last index and par2 of interval <j> on line <i>.

        """
        return _Hatch.Hatch_Hatcher_EndIndex(self, *args)

    def IsXLine(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        bool

        Description
        -----------
        Returns true if the line of index <i> has a constant x value.

        """
        return _Hatch.Hatch_Hatcher_IsXLine(self, *args)

    def IsYLine(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        bool

        Description
        -----------
        Returns true if the line of index <i> has a constant y value.

        """
        return _Hatch.Hatch_Hatcher_IsYLine(self, *args)

    def Line(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        gp_Lin2d

        Description
        -----------
        Returns the line of index <i>.

        """
        return _Hatch.Hatch_Hatcher_Line(self, *args)

    def LineForm(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        Hatch_LineForm

        Description
        -----------
        Returns the type of the line of index <i>.

        """
        return _Hatch.Hatch_Hatcher_LineForm(self, *args)

    def NbIntervals(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the total number of intervals on all the lines.

        Parameters
        ----------
        I: int

        Return
        -------
        int

        Description
        -----------
        Returns the number of intervals on line of index <i>.

        """
        return _Hatch.Hatch_Hatcher_NbIntervals(self, *args)

    def NbLines(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of lines.

        """
        return _Hatch.Hatch_Hatcher_NbLines(self, *args)

    def Start(self, *args):
        r"""

        Parameters
        ----------
        I: int
        J: int

        Return
        -------
        float

        Description
        -----------
        Returns the first parameter of interval <j> on line <i>.

        """
        return _Hatch.Hatch_Hatcher_Start(self, *args)

    def StartIndex(self, *args):
        r"""

        Parameters
        ----------
        I: int
        J: int

        Return
        -------
        Index: int
        Par2: float

        Description
        -----------
        Returns the first index and par2 of interval <j> on line <i>.

        """
        return _Hatch.Hatch_Hatcher_StartIndex(self, *args)

    def Tolerance(self, *args):
        r"""

        Parameters
        ----------
        Tol: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _Hatch.Hatch_Hatcher_Tolerance(self, *args)

    def Trim(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin2d
        Index: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Trims the lines at intersections with <l>.

        Parameters
        ----------
        L: gp_Lin2d
        Start: float
        End: float
        Index: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Trims the lines at intersections with <l> in the parameter range <start>, <end>.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d
        Index: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Trims the line at intersection with the oriented segment p1,p2.

        """
        return _Hatch.Hatch_Hatcher_Trim(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Hatcher

# Register Hatch_Hatcher in _Hatch:
_Hatch.Hatch_Hatcher_swigregister(Hatch_Hatcher)
class Hatch_Line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        L: gp_Lin2d
        T: Hatch_LineForm

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _Hatch.Hatch_Line_swiginit(self, _Hatch.new_Hatch_Line(*args))

    def AddIntersection(self, *args):
        r"""

        Parameters
        ----------
        Par1: float
        Start: bool
        Index: int
        Par2: float
        theToler: float

        Return
        -------
        None

        Description
        -----------
        Insert a new intersection in the sorted list.

        """
        return _Hatch.Hatch_Line_AddIntersection(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Line

# Register Hatch_Line in _Hatch:
_Hatch.Hatch_Line_swigregister(Hatch_Line)
class Hatch_Parameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Par1: float
        Start: bool
        Index: int (optional, default to 0)
        Par2: float (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _Hatch.Hatch_Parameter_swiginit(self, _Hatch.new_Hatch_Parameter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Parameter

# Register Hatch_Parameter in _Hatch:
_Hatch.Hatch_Parameter_swigregister(Hatch_Parameter)



