# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Hatch module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hatch.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Hatch')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Hatch')
    _Hatch = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Hatch', [dirname(__file__)])
        except ImportError:
            import _Hatch
            return _Hatch
        try:
            _mod = imp.load_module('_Hatch', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Hatch = swig_import_helper()
    del swig_import_helper
else:
    import _Hatch
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Hatch.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Hatch.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Hatch.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Hatch.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Hatch.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Hatch.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Hatch.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Hatch.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Hatch.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Hatch.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Hatch.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Hatch.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Hatch.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Hatch.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Hatch.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Hatch.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Hatch.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Hatch.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Hatch.process_exception(error, method_name, class_name)
process_exception = _Hatch.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *

Hatch_XLINE = _Hatch.Hatch_XLINE
Hatch_YLINE = _Hatch.Hatch_YLINE
Hatch_ANYLINE = _Hatch.Hatch_ANYLINE


class Hatch_LineForm(IntEnum):
	Hatch_XLINE = 0
	Hatch_YLINE = 1
	Hatch_ANYLINE = 2
Hatch_XLINE = Hatch_LineForm.Hatch_XLINE
Hatch_YLINE = Hatch_LineForm.Hatch_YLINE
Hatch_ANYLINE = Hatch_LineForm.Hatch_ANYLINE

class Hatch_SequenceOfLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hatch_SequenceOfLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hatch_SequenceOfLine, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Hatch_Line >::iterator":
        return _Hatch.Hatch_SequenceOfLine_begin(self)

    def end(self) -> "NCollection_Sequence< Hatch_Line >::iterator":
        return _Hatch.Hatch_SequenceOfLine_end(self)

    def cbegin(self) -> "NCollection_Sequence< Hatch_Line >::const_iterator":
        return _Hatch.Hatch_SequenceOfLine_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Hatch_Line >::const_iterator":
        return _Hatch.Hatch_SequenceOfLine_cend(self)

    def __init__(self, *args):
        this = _Hatch.new_Hatch_SequenceOfLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Hatch.Hatch_SequenceOfLine_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Hatch.Hatch_SequenceOfLine_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Hatch.Hatch_SequenceOfLine_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Hatch.Hatch_SequenceOfLine_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Hatch.Hatch_SequenceOfLine_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Hatch.Hatch_SequenceOfLine_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Hatch.Hatch_SequenceOfLine_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Hatch.Hatch_SequenceOfLine_delNode)
    else:
        delNode = _Hatch.Hatch_SequenceOfLine_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _Hatch.Hatch_SequenceOfLine_Clear(self, theAllocator)

    def Assign(self, theOther: 'Hatch_SequenceOfLine') -> "NCollection_Sequence< Hatch_Line > &":
        return _Hatch.Hatch_SequenceOfLine_Assign(self, theOther)

    def Set(self, theOther: 'Hatch_SequenceOfLine') -> "NCollection_Sequence< Hatch_Line > &":
        return _Hatch.Hatch_SequenceOfLine_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfLine_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfLine_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfLine_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfLine_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfLine_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Hatch_SequenceOfLine') -> "void":
        return _Hatch.Hatch_SequenceOfLine_Split(self, theIndex, theSeq)

    def First(self) -> "Hatch_Line const &":
        return _Hatch.Hatch_SequenceOfLine_First(self)

    def ChangeFirst(self) -> "Hatch_Line &":
        return _Hatch.Hatch_SequenceOfLine_ChangeFirst(self)

    def Last(self) -> "Hatch_Line const &":
        return _Hatch.Hatch_SequenceOfLine_Last(self)

    def ChangeLast(self) -> "Hatch_Line &":
        return _Hatch.Hatch_SequenceOfLine_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Hatch_Line const &":
        return _Hatch.Hatch_SequenceOfLine_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Hatch_Line &":
        return _Hatch.Hatch_SequenceOfLine_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Hatch_Line &":
        return _Hatch.Hatch_SequenceOfLine___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Hatch_Line') -> "void":
        return _Hatch.Hatch_SequenceOfLine_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Hatch.delete_Hatch_SequenceOfLine
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Hatch_SequenceOfLine_swigregister = _Hatch.Hatch_SequenceOfLine_swigregister
Hatch_SequenceOfLine_swigregister(Hatch_SequenceOfLine)

def Hatch_SequenceOfLine_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Hatch.Hatch_SequenceOfLine_delNode(theNode, theAl)
Hatch_SequenceOfLine_delNode = _Hatch.Hatch_SequenceOfLine_delNode

class Hatch_SequenceOfParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hatch_SequenceOfParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hatch_SequenceOfParameter, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Hatch_Parameter >::iterator":
        return _Hatch.Hatch_SequenceOfParameter_begin(self)

    def end(self) -> "NCollection_Sequence< Hatch_Parameter >::iterator":
        return _Hatch.Hatch_SequenceOfParameter_end(self)

    def cbegin(self) -> "NCollection_Sequence< Hatch_Parameter >::const_iterator":
        return _Hatch.Hatch_SequenceOfParameter_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Hatch_Parameter >::const_iterator":
        return _Hatch.Hatch_SequenceOfParameter_cend(self)

    def __init__(self, *args):
        this = _Hatch.new_Hatch_SequenceOfParameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Hatch.Hatch_SequenceOfParameter_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Hatch.Hatch_SequenceOfParameter_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Hatch.Hatch_SequenceOfParameter_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Hatch.Hatch_SequenceOfParameter_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Hatch.Hatch_SequenceOfParameter_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Hatch.Hatch_SequenceOfParameter_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Hatch.Hatch_SequenceOfParameter_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Hatch.Hatch_SequenceOfParameter_delNode)
    else:
        delNode = _Hatch.Hatch_SequenceOfParameter_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _Hatch.Hatch_SequenceOfParameter_Clear(self, theAllocator)

    def Assign(self, theOther: 'Hatch_SequenceOfParameter') -> "NCollection_Sequence< Hatch_Parameter > &":
        return _Hatch.Hatch_SequenceOfParameter_Assign(self, theOther)

    def Set(self, theOther: 'Hatch_SequenceOfParameter') -> "NCollection_Sequence< Hatch_Parameter > &":
        return _Hatch.Hatch_SequenceOfParameter_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfParameter_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfParameter_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfParameter_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfParameter_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Hatch.Hatch_SequenceOfParameter_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Hatch_SequenceOfParameter') -> "void":
        return _Hatch.Hatch_SequenceOfParameter_Split(self, theIndex, theSeq)

    def First(self) -> "Hatch_Parameter const &":
        return _Hatch.Hatch_SequenceOfParameter_First(self)

    def ChangeFirst(self) -> "Hatch_Parameter &":
        return _Hatch.Hatch_SequenceOfParameter_ChangeFirst(self)

    def Last(self) -> "Hatch_Parameter const &":
        return _Hatch.Hatch_SequenceOfParameter_Last(self)

    def ChangeLast(self) -> "Hatch_Parameter &":
        return _Hatch.Hatch_SequenceOfParameter_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Hatch_Parameter const &":
        return _Hatch.Hatch_SequenceOfParameter_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Hatch_Parameter &":
        return _Hatch.Hatch_SequenceOfParameter_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Hatch_Parameter &":
        return _Hatch.Hatch_SequenceOfParameter___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Hatch_Parameter') -> "void":
        return _Hatch.Hatch_SequenceOfParameter_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Hatch.delete_Hatch_SequenceOfParameter
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Hatch_SequenceOfParameter_swigregister = _Hatch.Hatch_SequenceOfParameter_swigregister
Hatch_SequenceOfParameter_swigregister(Hatch_SequenceOfParameter)

def Hatch_SequenceOfParameter_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Hatch.Hatch_SequenceOfParameter_delNode(theNode, theAl)
Hatch_SequenceOfParameter_delNode = _Hatch.Hatch_SequenceOfParameter_delNode

class Hatch_Hatcher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hatch_Hatcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hatch_Hatcher, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a empty hatcher. <tol> is the tolerance for intersections.

        Parameters
        ----------
        Tol: float
        Oriented: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _Hatch.new_Hatch_Hatcher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddLine(self, *args) -> "void":
        """
        Add a line <l> to be trimmed. <t> the type is only kept from information. it is not used in the computation.

        Parameters
        ----------
        L: gp_Lin2d
        T: Hatch_LineForm,optional
        	default value is Hatch_ANYLINE

        Returns
        -------
        None

        Add an infinite line on direction <d> at distance <dist> from the origin to be trimmed. <dist> may be negative. //! if o is the origin of the 2d plane, and v the vector perpendicular to d (in the direct direction). //! a point p is on the line if : op dot v = dist the parameter of p on the line is op dot d.

        Parameters
        ----------
        D: gp_Dir2d
        Dist: float

        Returns
        -------
        None

        """
        return _Hatch.Hatch_Hatcher_AddLine(self, *args)


    def AddXLine(self, *args) -> "void":
        """
        Add an infinite line parallel to the y-axis at abciss <x>.

        Parameters
        ----------
        X: float

        Returns
        -------
        None

        """
        return _Hatch.Hatch_Hatcher_AddXLine(self, *args)


    def AddYLine(self, *args) -> "void":
        """
        Add an infinite line parallel to the x-axis at ordinate <y>.

        Parameters
        ----------
        Y: float

        Returns
        -------
        None

        """
        return _Hatch.Hatch_Hatcher_AddYLine(self, *args)


    def Coordinate(self, *args) -> "Standard_Real":
        """
        Returns the x or y coordinate of the line of index <i> if it is a x or a y line.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _Hatch.Hatch_Hatcher_Coordinate(self, *args)


    def End(self, *args) -> "Standard_Real":
        """
        Returns the last parameter of interval <j> on line <i>.

        Parameters
        ----------
        I: int
        J: int

        Returns
        -------
        float

        """
        return _Hatch.Hatch_Hatcher_End(self, *args)


    def EndIndex(self, *args) -> "void":
        """
        Returns the last index and par2 of interval <j> on line <i>.

        Parameters
        ----------
        I: int
        J: int

        Returns
        -------
        Index: int
        Par2: float

        """
        return _Hatch.Hatch_Hatcher_EndIndex(self, *args)


    def IsXLine(self, *args) -> "Standard_Boolean":
        """
        Returns true if the line of index <i> has a constant x value.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        """
        return _Hatch.Hatch_Hatcher_IsXLine(self, *args)


    def IsYLine(self, *args) -> "Standard_Boolean":
        """
        Returns true if the line of index <i> has a constant y value.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        """
        return _Hatch.Hatch_Hatcher_IsYLine(self, *args)


    def Line(self, *args) -> "gp_Lin2d const":
        """
        Returns the line of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        gp_Lin2d

        """
        return _Hatch.Hatch_Hatcher_Line(self, *args)


    def LineForm(self, *args) -> "Hatch_LineForm":
        """
        Returns the type of the line of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        Hatch_LineForm

        """
        return _Hatch.Hatch_Hatcher_LineForm(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        Returns the total number of intervals on all the lines.

        Returns
        -------
        int

        Returns the number of intervals on line of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        int

        """
        return _Hatch.Hatch_Hatcher_NbIntervals(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """
        Returns the number of lines.

        Returns
        -------
        int

        """
        return _Hatch.Hatch_Hatcher_NbLines(self, *args)


    def Start(self, *args) -> "Standard_Real":
        """
        Returns the first parameter of interval <j> on line <i>.

        Parameters
        ----------
        I: int
        J: int

        Returns
        -------
        float

        """
        return _Hatch.Hatch_Hatcher_Start(self, *args)


    def StartIndex(self, *args) -> "void":
        """
        Returns the first index and par2 of interval <j> on line <i>.

        Parameters
        ----------
        I: int
        J: int

        Returns
        -------
        Index: int
        Par2: float

        """
        return _Hatch.Hatch_Hatcher_StartIndex(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Tol: float

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        float

        """
        return _Hatch.Hatch_Hatcher_Tolerance(self, *args)


    def Trim(self, *args) -> "void":
        """
        Trims the lines at intersections with <l>.

        Parameters
        ----------
        L: gp_Lin2d
        Index: int,optional
        	default value is 0

        Returns
        -------
        None

        Trims the lines at intersections with <l> in the parameter range <start>, <end>.

        Parameters
        ----------
        L: gp_Lin2d
        Start: float
        End: float
        Index: int,optional
        	default value is 0

        Returns
        -------
        None

        Trims the line at intersection with the oriented segment p1,p2.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d
        Index: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _Hatch.Hatch_Hatcher_Trim(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Hatcher
    __del__ = lambda self: None
Hatch_Hatcher_swigregister = _Hatch.Hatch_Hatcher_swigregister
Hatch_Hatcher_swigregister(Hatch_Hatcher)

class Hatch_Line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hatch_Line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hatch_Line, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        L: gp_Lin2d
        T: Hatch_LineForm

        Returns
        -------
        None

        """
        this = _Hatch.new_Hatch_Line(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddIntersection(self, *args) -> "void":
        """
        Insert a new intersection in the sorted list.

        Parameters
        ----------
        Par1: float
        Start: bool
        Index: int
        Par2: float
        theToler: float

        Returns
        -------
        None

        """
        return _Hatch.Hatch_Line_AddIntersection(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Line
    __del__ = lambda self: None
Hatch_Line_swigregister = _Hatch.Hatch_Line_swigregister
Hatch_Line_swigregister(Hatch_Line)

class Hatch_Parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hatch_Parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hatch_Parameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Par1: float
        Start: bool
        Index: int,optional
        	default value is 0
        Par2: float,optional
        	default value is 0

        Returns
        -------
        None

        """
        this = _Hatch.new_Hatch_Parameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _Hatch.delete_Hatch_Parameter
    __del__ = lambda self: None
Hatch_Parameter_swigregister = _Hatch.Hatch_Parameter_swigregister
Hatch_Parameter_swigregister(Hatch_Parameter)



# This file is compatible with both classic and new-style classes.


