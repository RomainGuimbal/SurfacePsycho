# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomAdaptor module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomadaptor.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomAdaptor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomAdaptor')
    _GeomAdaptor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomAdaptor', [dirname(__file__)])
        except ImportError:
            import _GeomAdaptor
            return _GeomAdaptor
        try:
            _mod = imp.load_module('_GeomAdaptor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomAdaptor = swig_import_helper()
    del swig_import_helper
else:
    import _GeomAdaptor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomAdaptor.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _GeomAdaptor.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GeomAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GeomAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _GeomAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _GeomAdaptor.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _GeomAdaptor.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _GeomAdaptor.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _GeomAdaptor.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _GeomAdaptor.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GeomAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _GeomAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _GeomAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GeomAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GeomAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GeomAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _GeomAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomAdaptor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomAdaptor.process_exception(error, method_name, class_name)
process_exception = _GeomAdaptor.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_GeomAdaptor_GHCurve_Create() -> "opencascade::handle< GeomAdaptor_GHCurve >":
    return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Create()
Handle_GeomAdaptor_GHCurve_Create = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Create

def Handle_GeomAdaptor_GHCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_GHCurve >":
    return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DownCast(t)
Handle_GeomAdaptor_GHCurve_DownCast = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DownCast

def Handle_GeomAdaptor_GHCurve_IsNull(t: 'opencascade::handle< GeomAdaptor_GHCurve > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsNull(t)
Handle_GeomAdaptor_GHCurve_IsNull = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsNull

def Handle_GeomAdaptor_GHSurface_Create() -> "opencascade::handle< GeomAdaptor_GHSurface >":
    return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Create()
Handle_GeomAdaptor_GHSurface_Create = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Create

def Handle_GeomAdaptor_GHSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_GHSurface >":
    return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DownCast(t)
Handle_GeomAdaptor_GHSurface_DownCast = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DownCast

def Handle_GeomAdaptor_GHSurface_IsNull(t: 'opencascade::handle< GeomAdaptor_GHSurface > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsNull(t)
Handle_GeomAdaptor_GHSurface_IsNull = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsNull

def Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Create() -> "opencascade::handle< GeomAdaptor_HSurfaceOfLinearExtrusion >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Create()
Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Create = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Create

def Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_HSurfaceOfLinearExtrusion >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast(t)
Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast

def Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull(t: 'opencascade::handle< GeomAdaptor_HSurfaceOfLinearExtrusion > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull(t)
Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull

def Handle_GeomAdaptor_HSurfaceOfRevolution_Create() -> "opencascade::handle< GeomAdaptor_HSurfaceOfRevolution >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Create()
Handle_GeomAdaptor_HSurfaceOfRevolution_Create = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Create

def Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_HSurfaceOfRevolution >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast(t)
Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast

def Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull(t: 'opencascade::handle< GeomAdaptor_HSurfaceOfRevolution > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull(t)
Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull

def Handle_GeomAdaptor_HCurve_Create() -> "opencascade::handle< GeomAdaptor_HCurve >":
    return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Create()
Handle_GeomAdaptor_HCurve_Create = _GeomAdaptor.Handle_GeomAdaptor_HCurve_Create

def Handle_GeomAdaptor_HCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_HCurve >":
    return _GeomAdaptor.Handle_GeomAdaptor_HCurve_DownCast(t)
Handle_GeomAdaptor_HCurve_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HCurve_DownCast

def Handle_GeomAdaptor_HCurve_IsNull(t: 'opencascade::handle< GeomAdaptor_HCurve > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsNull(t)
Handle_GeomAdaptor_HCurve_IsNull = _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsNull

def Handle_GeomAdaptor_HSurface_Create() -> "opencascade::handle< GeomAdaptor_HSurface >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Create()
Handle_GeomAdaptor_HSurface_Create = _GeomAdaptor.Handle_GeomAdaptor_HSurface_Create

def Handle_GeomAdaptor_HSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GeomAdaptor_HSurface >":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurface_DownCast(t)
Handle_GeomAdaptor_HSurface_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurface_DownCast

def Handle_GeomAdaptor_HSurface_IsNull(t: 'opencascade::handle< GeomAdaptor_HSurface > const &') -> "bool":
    return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsNull(t)
Handle_GeomAdaptor_HSurface_IsNull = _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsNull
class geomadaptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, geomadaptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, geomadaptor, name)
    __repr__ = _swig_repr

    def MakeCurve(*args) -> "opencascade::handle< Geom_Curve >":
        """
        Inherited from ghcurve. provides a curve handled by reference. build a geom_curve using the informations from the curve from adaptor3d.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _GeomAdaptor.geomadaptor_MakeCurve(*args)

    MakeCurve = staticmethod(MakeCurve)

    def MakeSurface(*args) -> "opencascade::handle< Geom_Surface >":
        """
        Build a geom_surface using the informations from the surface from adaptor3d @param thes - surface adaptor to convert. @param thetrimflag - true if perform trim surface values by adaptor and false otherwise.

        Parameters
        ----------
        theS: Adaptor3d_Surface
        theTrimFlag: bool,optional
        	default value is Standard_True

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _GeomAdaptor.geomadaptor_MakeSurface(*args)

    MakeSurface = staticmethod(MakeSurface)

    __repr__ = _dumps_object


    def __init__(self):
        this = _GeomAdaptor.new_geomadaptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomAdaptor.delete_geomadaptor
    __del__ = lambda self: None
geomadaptor_swigregister = _GeomAdaptor.geomadaptor_swigregister
geomadaptor_swigregister(geomadaptor)

def geomadaptor_MakeCurve(*args) -> "opencascade::handle< Geom_Curve >":
    """
    Inherited from ghcurve. provides a curve handled by reference. build a geom_curve using the informations from the curve from adaptor3d.

    Parameters
    ----------
    C: Adaptor3d_Curve

    Returns
    -------
    opencascade::handle<Geom_Curve>

    """
    return _GeomAdaptor.geomadaptor_MakeCurve(*args)

def geomadaptor_MakeSurface(*args) -> "opencascade::handle< Geom_Surface >":
    """
    Build a geom_surface using the informations from the surface from adaptor3d @param thes - surface adaptor to convert. @param thetrimflag - true if perform trim surface values by adaptor and false otherwise.

    Parameters
    ----------
    theS: Adaptor3d_Surface
    theTrimFlag: bool,optional
    	default value is Standard_True

    Returns
    -------
    opencascade::handle<Geom_Surface>

    """
    return _GeomAdaptor.geomadaptor_MakeSurface(*args)

class GeomAdaptor_Curve(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_Curve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        None

        Constructionerror is raised if ufirst>ulast.

        Parameters
        ----------
        C: Geom_Curve
        UFirst: float
        ULast: float

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Curve(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        Provides a curve inherited from hcurve from adaptor. this is inherited to provide easy to use constructors.

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Curve(self, *args)


    def Load(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        None

        Constructionerror is raised if ufirst>ulast.

        Parameters
        ----------
        C: Geom_Curve
        UFirst: float
        ULast: float

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Load(self, *args)


    def Reset(self, *args) -> "void":
        """
        Reset currently loaded curve (undone load()).

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Reset(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Curve
    __del__ = lambda self: None
GeomAdaptor_Curve_swigregister = _GeomAdaptor.GeomAdaptor_Curve_swigregister
GeomAdaptor_Curve_swigregister(GeomAdaptor_Curve)

class GeomAdaptor_GHCurve(OCC.Core.Adaptor3d.Adaptor3d_HCurve):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_GHCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_GHCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty genhcurve.

        Returns
        -------
        None

        Creates a genhcurve from a curve.

        Parameters
        ----------
        C: GeomAdaptor_Curve

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_GHCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeCurve(self, *args) -> "GeomAdaptor_Curve &":
        """
        Returns the curve used to create the genhcurve.

        Returns
        -------
        GeomAdaptor_Curve

        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_ChangeCurve(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the field of the genhcurve.

        Parameters
        ----------
        C: GeomAdaptor_Curve

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_GHCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_GHCurve
    __del__ = lambda self: None
GeomAdaptor_GHCurve_swigregister = _GeomAdaptor.GeomAdaptor_GHCurve_swigregister
GeomAdaptor_GHCurve_swigregister(GeomAdaptor_GHCurve)

class GeomAdaptor_GHSurface(OCC.Core.Adaptor3d.Adaptor3d_HSurface):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_GHSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_GHSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty genhsurface.

        Returns
        -------
        None

        Creates a genhsurface from a surface.

        Parameters
        ----------
        S: GeomAdaptor_Surface

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_GHSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeSurface(self, *args) -> "GeomAdaptor_Surface &":
        """
        Returns the surface used to create the genhsurface.

        Returns
        -------
        GeomAdaptor_Surface

        """
        return _GeomAdaptor.GeomAdaptor_GHSurface_ChangeSurface(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the field of the genhsurface.

        Parameters
        ----------
        S: GeomAdaptor_Surface

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_GHSurface_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_GHSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_GHSurface
    __del__ = lambda self: None
GeomAdaptor_GHSurface_swigregister = _GeomAdaptor.GeomAdaptor_GHSurface_swigregister
GeomAdaptor_GHSurface_swigregister(GeomAdaptor_GHSurface)

class GeomAdaptor_HSurfaceOfLinearExtrusion(OCC.Core.Adaptor3d.Adaptor3d_HSurface):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_HSurfaceOfLinearExtrusion, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_HSurfaceOfLinearExtrusion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty genhsurface.

        Returns
        -------
        None

        Creates a genhsurface from a surface.

        Parameters
        ----------
        S: GeomAdaptor_SurfaceOfLinearExtrusion

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_HSurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeSurface(self, *args) -> "GeomAdaptor_SurfaceOfLinearExtrusion &":
        """
        Returns the surface used to create the genhsurface.

        Returns
        -------
        GeomAdaptor_SurfaceOfLinearExtrusion

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_ChangeSurface(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the field of the genhsurface.

        Parameters
        ----------
        S: GeomAdaptor_SurfaceOfLinearExtrusion

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurfaceOfLinearExtrusion
    __del__ = lambda self: None
GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister = _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister
GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister(GeomAdaptor_HSurfaceOfLinearExtrusion)

class GeomAdaptor_HSurfaceOfRevolution(OCC.Core.Adaptor3d.Adaptor3d_HSurface):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_HSurfaceOfRevolution, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_HSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_HSurfaceOfRevolution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty genhsurface.

        Returns
        -------
        None

        Creates a genhsurface from a surface.

        Parameters
        ----------
        S: GeomAdaptor_SurfaceOfRevolution

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_HSurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeSurface(self, *args) -> "GeomAdaptor_SurfaceOfRevolution &":
        """
        Returns the surface used to create the genhsurface.

        Returns
        -------
        GeomAdaptor_SurfaceOfRevolution

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_ChangeSurface(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the field of the genhsurface.

        Parameters
        ----------
        S: GeomAdaptor_SurfaceOfRevolution

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurfaceOfRevolution
    __del__ = lambda self: None
GeomAdaptor_HSurfaceOfRevolution_swigregister = _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_swigregister
GeomAdaptor_HSurfaceOfRevolution_swigregister(GeomAdaptor_HSurfaceOfRevolution)

class GeomAdaptor_Surface(OCC.Core.Adaptor3d.Adaptor3d_Surface):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_Surface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_Surface, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Adaptor3d.Adaptor3d_Surface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_Surface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        None

        Constructionerror is raised if ufirst>ulast or vfirst>vlast.

        Parameters
        ----------
        S: Geom_Surface
        UFirst: float
        ULast: float
        VFirst: float
        VLast: float
        TolU: float,optional
        	default value is 0.0
        TolV: float,optional
        	default value is 0.0

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        None

        Constructionerror is raised if ufirst>ulast or vfirst>vlast.

        Parameters
        ----------
        S: Geom_Surface
        UFirst: float
        ULast: float
        VFirst: float
        VLast: float
        TolU: float,optional
        	default value is 0.0
        TolV: float,optional
        	default value is 0.0

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Load(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Surface
    __del__ = lambda self: None
GeomAdaptor_Surface_swigregister = _GeomAdaptor.GeomAdaptor_Surface_swigregister
GeomAdaptor_Surface_swigregister(GeomAdaptor_Surface)

class GeomAdaptor_HCurve(GeomAdaptor_GHCurve):
    __swig_setmethods__ = {}
    for _s in [GeomAdaptor_GHCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_HCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomAdaptor_GHCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_HCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        AS: GeomAdaptor_Curve

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: Geom_Curve

        Returns
        -------
        None

        Constructionerror is raised if ufirst>ulast or vfirst>vlast.

        Parameters
        ----------
        S: Geom_Curve
        UFirst: float
        ULast: float

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_HCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HCurve
    __del__ = lambda self: None
GeomAdaptor_HCurve_swigregister = _GeomAdaptor.GeomAdaptor_HCurve_swigregister
GeomAdaptor_HCurve_swigregister(GeomAdaptor_HCurve)

class GeomAdaptor_HSurface(GeomAdaptor_GHSurface):
    __swig_setmethods__ = {}
    for _s in [GeomAdaptor_GHSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_HSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomAdaptor_GHSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_HSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        AS: GeomAdaptor_Surface

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        None

        Constructionerror is raised if ufirst>ulast or vfirst>vlast.

        Parameters
        ----------
        S: Geom_Surface
        UFirst: float
        ULast: float
        VFirst: float
        VLast: float
        TolU: float,optional
        	default value is 0.0
        TolV: float,optional
        	default value is 0.0

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_HSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_HSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurface
    __del__ = lambda self: None
GeomAdaptor_HSurface_swigregister = _GeomAdaptor.GeomAdaptor_HSurface_swigregister
GeomAdaptor_HSurface_swigregister(GeomAdaptor_HSurface)

class GeomAdaptor_SurfaceOfLinearExtrusion(GeomAdaptor_Surface):
    __swig_setmethods__ = {}
    for _s in [GeomAdaptor_Surface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_SurfaceOfLinearExtrusion, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomAdaptor_Surface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_SurfaceOfLinearExtrusion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        The curve is loaded.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        Thew curve and the direction are loaded.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        V: gp_Dir

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_SurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args) -> "void":
        """
        Changes the curve.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        Changes the direction.

        Parameters
        ----------
        V: gp_Dir

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Load(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfLinearExtrusion
    __del__ = lambda self: None
GeomAdaptor_SurfaceOfLinearExtrusion_swigregister = _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_swigregister
GeomAdaptor_SurfaceOfLinearExtrusion_swigregister(GeomAdaptor_SurfaceOfLinearExtrusion)

class GeomAdaptor_SurfaceOfRevolution(GeomAdaptor_Surface):
    __swig_setmethods__ = {}
    for _s in [GeomAdaptor_Surface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomAdaptor_SurfaceOfRevolution, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomAdaptor_Surface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomAdaptor_SurfaceOfRevolution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        The curve is loaded.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        The curve and the direction are loaded.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        V: gp_Ax1

        Returns
        -------
        None

        """
        this = _GeomAdaptor.new_GeomAdaptor_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Axis(self, *args) -> "gp_Ax3 const":
        """
        No available documentation.

        Returns
        -------
        gp_Ax3

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Axis(self, *args)


    def Load(self, *args) -> "void":
        """
        Changes the curve.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        Changes the direction.

        Parameters
        ----------
        V: gp_Ax1

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Load(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfRevolution
    __del__ = lambda self: None
GeomAdaptor_SurfaceOfRevolution_swigregister = _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_swigregister
GeomAdaptor_SurfaceOfRevolution_swigregister(GeomAdaptor_SurfaceOfRevolution)



# This file is compatible with both classic and new-style classes.


