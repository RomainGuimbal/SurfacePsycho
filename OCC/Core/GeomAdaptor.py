# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
GeomAdaptor module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_geomadaptor.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GeomAdaptor
else:
    import _GeomAdaptor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomAdaptor.delete_SwigPyIterator

    def value(self):
        return _GeomAdaptor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomAdaptor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomAdaptor.SwigPyIterator_copy(self)

    def next(self):
        return _GeomAdaptor.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomAdaptor.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomAdaptor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GeomAdaptor:
_GeomAdaptor.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _GeomAdaptor.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _GeomAdaptor.ios_base_erase_event
    imbue_event = _GeomAdaptor.ios_base_imbue_event
    copyfmt_event = _GeomAdaptor.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _GeomAdaptor.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _GeomAdaptor.ios_base_flags(self, *args)

    def setf(self, *args):
        return _GeomAdaptor.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _GeomAdaptor.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _GeomAdaptor.ios_base_precision(self, *args)

    def width(self, *args):
        return _GeomAdaptor.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _GeomAdaptor.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _GeomAdaptor.ios_base_imbue(self, __loc)

    def getloc(self):
        return _GeomAdaptor.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _GeomAdaptor.ios_base_xalloc()

    def iword(self, __ix):
        return _GeomAdaptor.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _GeomAdaptor.ios_base_pword(self, __ix)
    __swig_destroy__ = _GeomAdaptor.delete_ios_base

# Register ios_base in _GeomAdaptor:
_GeomAdaptor.ios_base_swigregister(ios_base)
cvar = _GeomAdaptor.cvar
ios_base.boolalpha = _GeomAdaptor.cvar.ios_base_boolalpha
ios_base.dec = _GeomAdaptor.cvar.ios_base_dec
ios_base.fixed = _GeomAdaptor.cvar.ios_base_fixed
ios_base.hex = _GeomAdaptor.cvar.ios_base_hex
ios_base.internal = _GeomAdaptor.cvar.ios_base_internal
ios_base.left = _GeomAdaptor.cvar.ios_base_left
ios_base.oct = _GeomAdaptor.cvar.ios_base_oct
ios_base.right = _GeomAdaptor.cvar.ios_base_right
ios_base.scientific = _GeomAdaptor.cvar.ios_base_scientific
ios_base.showbase = _GeomAdaptor.cvar.ios_base_showbase
ios_base.showpoint = _GeomAdaptor.cvar.ios_base_showpoint
ios_base.showpos = _GeomAdaptor.cvar.ios_base_showpos
ios_base.skipws = _GeomAdaptor.cvar.ios_base_skipws
ios_base.unitbuf = _GeomAdaptor.cvar.ios_base_unitbuf
ios_base.uppercase = _GeomAdaptor.cvar.ios_base_uppercase
ios_base.adjustfield = _GeomAdaptor.cvar.ios_base_adjustfield
ios_base.basefield = _GeomAdaptor.cvar.ios_base_basefield
ios_base.floatfield = _GeomAdaptor.cvar.ios_base_floatfield
ios_base.badbit = _GeomAdaptor.cvar.ios_base_badbit
ios_base.eofbit = _GeomAdaptor.cvar.ios_base_eofbit
ios_base.failbit = _GeomAdaptor.cvar.ios_base_failbit
ios_base.goodbit = _GeomAdaptor.cvar.ios_base_goodbit
ios_base.app = _GeomAdaptor.cvar.ios_base_app
ios_base.ate = _GeomAdaptor.cvar.ios_base_ate
ios_base.binary = _GeomAdaptor.cvar.ios_base_binary
ios_base.ios_base_in = _GeomAdaptor.cvar.ios_base_ios_base_in
ios_base.out = _GeomAdaptor.cvar.ios_base_out
ios_base.trunc = _GeomAdaptor.cvar.ios_base_trunc
ios_base.beg = _GeomAdaptor.cvar.ios_base_beg
ios_base.cur = _GeomAdaptor.cvar.ios_base_cur
ios_base.end = _GeomAdaptor.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _GeomAdaptor.ios_rdstate(self)

    def clear(self, *args):
        return _GeomAdaptor.ios_clear(self, *args)

    def setstate(self, __state):
        return _GeomAdaptor.ios_setstate(self, __state)

    def good(self):
        return _GeomAdaptor.ios_good(self)

    def eof(self):
        return _GeomAdaptor.ios_eof(self)

    def fail(self):
        return _GeomAdaptor.ios_fail(self)

    def bad(self):
        return _GeomAdaptor.ios_bad(self)

    def exceptions(self, *args):
        return _GeomAdaptor.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _GeomAdaptor.ios_swiginit(self, _GeomAdaptor.new_ios(__sb))
    __swig_destroy__ = _GeomAdaptor.delete_ios

    def tie(self, *args):
        return _GeomAdaptor.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _GeomAdaptor.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _GeomAdaptor.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _GeomAdaptor.ios_fill(self, *args)

    def imbue(self, __loc):
        return _GeomAdaptor.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _GeomAdaptor.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _GeomAdaptor.ios_widen(self, __c)

# Register ios in _GeomAdaptor:
_GeomAdaptor.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _GeomAdaptor.ostream_swiginit(self, _GeomAdaptor.new_ostream(__sb))
    __swig_destroy__ = _GeomAdaptor.delete_ostream

    def __lshift__(self, *args):
        return _GeomAdaptor.ostream___lshift__(self, *args)

    def put(self, __c):
        return _GeomAdaptor.ostream_put(self, __c)

    def write(self, __s, __n):
        return _GeomAdaptor.ostream_write(self, __s, __n)

    def flush(self):
        return _GeomAdaptor.ostream_flush(self)

    def tellp(self):
        return _GeomAdaptor.ostream_tellp(self)

    def seekp(self, *args):
        return _GeomAdaptor.ostream_seekp(self, *args)

# Register ostream in _GeomAdaptor:
_GeomAdaptor.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _GeomAdaptor.istream_swiginit(self, _GeomAdaptor.new_istream(__sb))
    __swig_destroy__ = _GeomAdaptor.delete_istream

    def __rshift__(self, *args):
        return _GeomAdaptor.istream___rshift__(self, *args)

    def gcount(self):
        return _GeomAdaptor.istream_gcount(self)

    def get(self, *args):
        return _GeomAdaptor.istream_get(self, *args)

    def getline(self, *args):
        return _GeomAdaptor.istream_getline(self, *args)

    def ignore(self, *args):
        return _GeomAdaptor.istream_ignore(self, *args)

    def peek(self):
        return _GeomAdaptor.istream_peek(self)

    def read(self, __s, __n):
        return _GeomAdaptor.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _GeomAdaptor.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _GeomAdaptor.istream_putback(self, __c)

    def unget(self):
        return _GeomAdaptor.istream_unget(self)

    def sync(self):
        return _GeomAdaptor.istream_sync(self)

    def tellg(self):
        return _GeomAdaptor.istream_tellg(self)

    def seekg(self, *args):
        return _GeomAdaptor.istream_seekg(self, *args)

# Register istream in _GeomAdaptor:
_GeomAdaptor.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _GeomAdaptor.iostream_swiginit(self, _GeomAdaptor.new_iostream(__sb))
    __swig_destroy__ = _GeomAdaptor.delete_iostream

# Register iostream in _GeomAdaptor:
_GeomAdaptor.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _GeomAdaptor.endl_cb_ptr
endl = _GeomAdaptor.endl
ends_cb_ptr = _GeomAdaptor.ends_cb_ptr
ends = _GeomAdaptor.ends
flush_cb_ptr = _GeomAdaptor.flush_cb_ptr
flush = _GeomAdaptor.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_GeomAdaptor_Curve_Create():
    return _GeomAdaptor.Handle_GeomAdaptor_Curve_Create()

def Handle_GeomAdaptor_Curve_DownCast(t):
    return _GeomAdaptor.Handle_GeomAdaptor_Curve_DownCast(t)

def Handle_GeomAdaptor_Curve_IsNull(t):
    return _GeomAdaptor.Handle_GeomAdaptor_Curve_IsNull(t)

def Handle_GeomAdaptor_Surface_Create():
    return _GeomAdaptor.Handle_GeomAdaptor_Surface_Create()

def Handle_GeomAdaptor_Surface_DownCast(t):
    return _GeomAdaptor.Handle_GeomAdaptor_Surface_DownCast(t)

def Handle_GeomAdaptor_Surface_IsNull(t):
    return _GeomAdaptor.Handle_GeomAdaptor_Surface_IsNull(t)

def Handle_GeomAdaptor_SurfaceOfLinearExtrusion_Create():
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfLinearExtrusion_Create()

def Handle_GeomAdaptor_SurfaceOfLinearExtrusion_DownCast(t):
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfLinearExtrusion_DownCast(t)

def Handle_GeomAdaptor_SurfaceOfLinearExtrusion_IsNull(t):
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfLinearExtrusion_IsNull(t)

def Handle_GeomAdaptor_SurfaceOfRevolution_Create():
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfRevolution_Create()

def Handle_GeomAdaptor_SurfaceOfRevolution_DownCast(t):
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfRevolution_DownCast(t)

def Handle_GeomAdaptor_SurfaceOfRevolution_IsNull(t):
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfRevolution_IsNull(t)
class geomadaptor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def MakeCurve(*args):
        r"""

        Parameters
        ----------
        C: Adaptor3d_Curve

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        Inherited from ghcurve. provides a curve handled by reference. build a geom_curve using the information from the curve from adaptor3d.

        """
        return _GeomAdaptor.geomadaptor_MakeCurve(*args)

    @staticmethod
    def MakeSurface(*args):
        r"""

        Parameters
        ----------
        theS: Adaptor3d_Surface
        theTrimFlag: bool (optional, default to Standard_True)

        Return
        -------
        opencascade::handle<Geom_Surface>

        Description
        -----------
        Build a geom_surface using the information from the surface from adaptor3d @param thes - surface adaptor to convert. @param thetrimflag - true if perform trim surface values by adaptor and false otherwise.

        """
        return _GeomAdaptor.geomadaptor_MakeSurface(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomAdaptor.geomadaptor_swiginit(self, _GeomAdaptor.new_geomadaptor())
    __swig_destroy__ = _GeomAdaptor.delete_geomadaptor

# Register geomadaptor in _GeomAdaptor:
_GeomAdaptor.geomadaptor_swigregister(geomadaptor)
class GeomAdaptor_Curve(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theCurve: Geom_Curve

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theCurve: Geom_Curve
        theUFirst: float
        theULast: float

        Return
        -------
        None

        Description
        -----------
        Standard_constructionerror is raised if theufirst>theulast.

        """
        _GeomAdaptor.GeomAdaptor_Curve_swiginit(self, _GeomAdaptor.new_GeomAdaptor_Curve(*args))

    def Curve(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        Provides a curve inherited from hcurve from adaptor. this is inherited to provide easy to use constructors.

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Curve(self, *args)

    def Load(self, *args):
        r"""

        Parameters
        ----------
        theCurve: Geom_Curve

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theCurve: Geom_Curve
        theUFirst: float
        theULast: float

        Return
        -------
        None

        Description
        -----------
        Standard_constructionerror is raised if theufirst>theulast.

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Load(self, *args)

    def Reset(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset currently loaded curve (undone load()).

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Reset(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Curve

# Register GeomAdaptor_Curve in _GeomAdaptor:
_GeomAdaptor.GeomAdaptor_Curve_swigregister(GeomAdaptor_Curve)
class GeomAdaptor_Surface(OCC.Core.Adaptor3d.Adaptor3d_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theSurf: Geom_Surface

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theSurf: Geom_Surface
        theUFirst: float
        theULast: float
        theVFirst: float
        theVLast: float
        theTolU: float (optional, default to 0.0)
        theTolV: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Standard_constructionerror is raised if ufirst>ulast or vfirst>vlast.

        """
        _GeomAdaptor.GeomAdaptor_Surface_swiginit(self, _GeomAdaptor.new_GeomAdaptor_Surface(*args))

    def Load(self, *args):
        r"""

        Parameters
        ----------
        theSurf: Geom_Surface

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theSurf: Geom_Surface
        theUFirst: float
        theULast: float
        theVFirst: float
        theVLast: float
        theTolU: float (optional, default to 0.0)
        theTolV: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Standard_constructionerror is raised if theufirst>theulast or thevfirst>thevlast.

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Load(self, *args)

    def Surface(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Surface>

        Description
        -----------
        No available documentation.

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Surface(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Surface

# Register GeomAdaptor_Surface in _GeomAdaptor:
_GeomAdaptor.GeomAdaptor_Surface_swigregister(GeomAdaptor_Surface)
class GeomAdaptor_SurfaceOfLinearExtrusion(GeomAdaptor_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Return
        -------
        None

        Description
        -----------
        The curve is loaded.

        Parameters
        ----------
        C: Adaptor3d_Curve
        V: gp_Dir

        Return
        -------
        None

        Description
        -----------
        Thew curve and the direction are loaded.

        """
        _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_swiginit(self, _GeomAdaptor.new_GeomAdaptor_SurfaceOfLinearExtrusion(*args))

    def Load(self, *args):
        r"""

        Parameters
        ----------
        C: Adaptor3d_Curve

        Return
        -------
        None

        Description
        -----------
        Changes the curve.

        Parameters
        ----------
        V: gp_Dir

        Return
        -------
        None

        Description
        -----------
        Changes the direction.

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Load(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_SurfaceOfLinearExtrusion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfLinearExtrusion

# Register GeomAdaptor_SurfaceOfLinearExtrusion in _GeomAdaptor:
_GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_swigregister(GeomAdaptor_SurfaceOfLinearExtrusion)
class GeomAdaptor_SurfaceOfRevolution(GeomAdaptor_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Return
        -------
        None

        Description
        -----------
        The curve is loaded.

        Parameters
        ----------
        C: Adaptor3d_Curve
        V: gp_Ax1

        Return
        -------
        None

        Description
        -----------
        The curve and the direction are loaded.

        """
        _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_swiginit(self, _GeomAdaptor.new_GeomAdaptor_SurfaceOfRevolution(*args))

    def Axis(self, *args):
        r"""
        Return
        -------
        gp_Ax3

        Description
        -----------
        No available documentation.

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Axis(self, *args)

    def Load(self, *args):
        r"""

        Parameters
        ----------
        C: Adaptor3d_Curve

        Return
        -------
        None

        Description
        -----------
        Changes the curve.

        Parameters
        ----------
        V: gp_Ax1

        Return
        -------
        None

        Description
        -----------
        Changes the direction.

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Load(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_SurfaceOfRevolution_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfRevolution

# Register GeomAdaptor_SurfaceOfRevolution in _GeomAdaptor:
_GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_swigregister(GeomAdaptor_SurfaceOfRevolution)



@deprecated
def geomadaptor_MakeCurve(*args):
	return geomadaptor.MakeCurve(*args)

@deprecated
def geomadaptor_MakeSurface(*args):
	return geomadaptor.MakeSurface(*args)



