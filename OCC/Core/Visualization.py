# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Visualization
else:
    import _Visualization

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def process_exception(error, method_name, class_name):
    return _Visualization.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Visualization.delete_SwigPyIterator

    def value(self):
        return _Visualization.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Visualization.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Visualization.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Visualization.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Visualization.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Visualization.SwigPyIterator_copy(self)

    def next(self):
        return _Visualization.SwigPyIterator_next(self)

    def __next__(self):
        return _Visualization.SwigPyIterator___next__(self)

    def previous(self):
        return _Visualization.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Visualization.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Visualization.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Visualization.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Visualization.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Visualization.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Visualization.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Visualization.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Visualization:
_Visualization.SwigPyIterator_swigregister(SwigPyIterator)

def Handle_AIS_InteractiveContext_Create():
    return _Visualization.Handle_AIS_InteractiveContext_Create()

def Handle_AIS_InteractiveContext_DownCast(t):
    return _Visualization.Handle_AIS_InteractiveContext_DownCast(t)

def Handle_AIS_InteractiveContext_IsNull(t):
    return _Visualization.Handle_AIS_InteractiveContext_IsNull(t)

def Handle_V3d_View_Create():
    return _Visualization.Handle_V3d_View_Create()

def Handle_V3d_View_DownCast(t):
    return _Visualization.Handle_V3d_View_DownCast(t)

def Handle_V3d_View_IsNull(t):
    return _Visualization.Handle_V3d_View_IsNull(t)

def Handle_V3d_Viewer_Create():
    return _Visualization.Handle_V3d_Viewer_Create()

def Handle_V3d_Viewer_DownCast(t):
    return _Visualization.Handle_V3d_Viewer_DownCast(t)

def Handle_V3d_Viewer_IsNull(t):
    return _Visualization.Handle_V3d_Viewer_IsNull(t)

def Handle_Graphic3d_Camera_Create():
    return _Visualization.Handle_Graphic3d_Camera_Create()

def Handle_Graphic3d_Camera_DownCast(t):
    return _Visualization.Handle_Graphic3d_Camera_DownCast(t)

def Handle_Graphic3d_Camera_IsNull(t):
    return _Visualization.Handle_Graphic3d_Camera_IsNull(t)

def Handle_Graphic3d_StructureManager_Create():
    return _Visualization.Handle_Graphic3d_StructureManager_Create()

def Handle_Graphic3d_StructureManager_DownCast(t):
    return _Visualization.Handle_Graphic3d_StructureManager_DownCast(t)

def Handle_Graphic3d_StructureManager_IsNull(t):
    return _Visualization.Handle_Graphic3d_StructureManager_IsNull(t)
class Display3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Display3d self) -> Display3d"""
        _Visualization.Display3d_swiginit(self, _Visualization.new_Display3d())
    __swig_destroy__ = _Visualization.delete_Display3d

    def Init(self, handle):
        r"""Init(Display3d self, long const handle)"""
        return _Visualization.Display3d_Init(self, handle)

    def SetAnaglyphMode(self, mode):
        r"""SetAnaglyphMode(Display3d self, int mode)"""
        return _Visualization.Display3d_SetAnaglyphMode(self, mode)

    def SetNbMsaaSample(self, nb):
        r"""SetNbMsaaSample(Display3d self, int nb)"""
        return _Visualization.Display3d_SetNbMsaaSample(self, nb)

    def ChangeRenderingParams(self, Method, RaytracingDepth, IsShadowEnabled, IsReflectionEnabled, IsAntialiasingEnabled, IsTransparentShadowEnabled, StereoMode, AnaglyphFilter, ToReverseStere):
        r"""ChangeRenderingParams(Display3d self, int Method, int RaytracingDepth, bool IsShadowEnabled, bool IsReflectionEnabled, bool IsAntialiasingEnabled, bool IsTransparentShadowEnabled, int StereoMode, int AnaglyphFilter, bool ToReverseStere)"""
        return _Visualization.Display3d_ChangeRenderingParams(self, Method, RaytracingDepth, IsShadowEnabled, IsReflectionEnabled, IsAntialiasingEnabled, IsTransparentShadowEnabled, StereoMode, AnaglyphFilter, ToReverseStere)

    def EnableVBO(self):
        r"""EnableVBO(Display3d self)"""
        return _Visualization.Display3d_EnableVBO(self)

    def DisableVBO(self):
        r"""DisableVBO(Display3d self)"""
        return _Visualization.Display3d_DisableVBO(self)

    def GetView(self):
        r"""GetView(Display3d self) -> Handle_V3d_View &"""
        return _Visualization.Display3d_GetView(self)

    def GetViewer(self):
        r"""GetViewer(Display3d self) -> Handle_V3d_Viewer &"""
        return _Visualization.Display3d_GetViewer(self)

    def GetCamera(self):
        r"""GetCamera(Display3d self) -> Handle_Graphic3d_Camera &"""
        return _Visualization.Display3d_GetCamera(self)

    def GetContext(self):
        r"""GetContext(Display3d self) -> Handle_AIS_InteractiveContext &"""
        return _Visualization.Display3d_GetContext(self)

    def GetStructureManager(self):
        r"""GetStructureManager(Display3d self) -> Handle_Graphic3d_StructureManager &"""
        return _Visualization.Display3d_GetStructureManager(self)

    def Test(self):
        r"""Test(Display3d self)"""
        return _Visualization.Display3d_Test(self)

    def GlInfo(self):
        r"""GlInfo(Display3d self)"""
        return _Visualization.Display3d_GlInfo(self)

    def InitOffscreen(self, size_x, size_y):
        r"""InitOffscreen(Display3d self, int size_x, int size_y) -> bool"""
        return _Visualization.Display3d_InitOffscreen(self, size_x, size_y)

    def SetSize(self, size_x, size_y):
        r"""SetSize(Display3d self, int size_x, int size_y) -> bool"""
        return _Visualization.Display3d_SetSize(self, size_x, size_y)

    def IsOffscreen(self):
        r"""IsOffscreen(Display3d self) -> bool"""
        return _Visualization.Display3d_IsOffscreen(self)

    def GetImageData(self, width, height, bufType=0):
        r"""GetImageData(Display3d self, int width, int height, int bufType=0) -> PyObject"""
        return _Visualization.Display3d_GetImageData(self, width, height, bufType)

    def GetSize(self):
        r"""GetSize(Display3d self) -> PyObject *"""
        return _Visualization.Display3d_GetSize(self)

# Register Display3d in _Visualization:
_Visualization.Display3d_swigregister(Display3d)

