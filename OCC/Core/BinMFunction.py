# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinMFunction module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_binmfunction.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMFunction')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMFunction')
    _BinMFunction = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMFunction', [dirname(__file__)])
        except ImportError:
            import _BinMFunction
            return _BinMFunction
        try:
            _mod = imp.load_module('_BinMFunction', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMFunction = swig_import_helper()
    del swig_import_helper
else:
    import _BinMFunction
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMFunction.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BinMFunction.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinMFunction.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinMFunction.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BinMFunction.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BinMFunction.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BinMFunction.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BinMFunction.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BinMFunction.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BinMFunction.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinMFunction.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BinMFunction.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BinMFunction.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinMFunction.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinMFunction.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinMFunction.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BinMFunction.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMFunction.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinMFunction.process_exception(error, method_name, class_name)
process_exception = _BinMFunction.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BinMDF
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BinMFunction_FunctionDriver_Create() -> "opencascade::handle< BinMFunction_FunctionDriver >":
    return _BinMFunction.Handle_BinMFunction_FunctionDriver_Create()
Handle_BinMFunction_FunctionDriver_Create = _BinMFunction.Handle_BinMFunction_FunctionDriver_Create

def Handle_BinMFunction_FunctionDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMFunction_FunctionDriver >":
    return _BinMFunction.Handle_BinMFunction_FunctionDriver_DownCast(t)
Handle_BinMFunction_FunctionDriver_DownCast = _BinMFunction.Handle_BinMFunction_FunctionDriver_DownCast

def Handle_BinMFunction_FunctionDriver_IsNull(t: 'opencascade::handle< BinMFunction_FunctionDriver > const &') -> "bool":
    return _BinMFunction.Handle_BinMFunction_FunctionDriver_IsNull(t)
Handle_BinMFunction_FunctionDriver_IsNull = _BinMFunction.Handle_BinMFunction_FunctionDriver_IsNull

def Handle_BinMFunction_GraphNodeDriver_Create() -> "opencascade::handle< BinMFunction_GraphNodeDriver >":
    return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_Create()
Handle_BinMFunction_GraphNodeDriver_Create = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_Create

def Handle_BinMFunction_GraphNodeDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMFunction_GraphNodeDriver >":
    return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_DownCast(t)
Handle_BinMFunction_GraphNodeDriver_DownCast = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_DownCast

def Handle_BinMFunction_GraphNodeDriver_IsNull(t: 'opencascade::handle< BinMFunction_GraphNodeDriver > const &') -> "bool":
    return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_IsNull(t)
Handle_BinMFunction_GraphNodeDriver_IsNull = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_IsNull

def Handle_BinMFunction_ScopeDriver_Create() -> "opencascade::handle< BinMFunction_ScopeDriver >":
    return _BinMFunction.Handle_BinMFunction_ScopeDriver_Create()
Handle_BinMFunction_ScopeDriver_Create = _BinMFunction.Handle_BinMFunction_ScopeDriver_Create

def Handle_BinMFunction_ScopeDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMFunction_ScopeDriver >":
    return _BinMFunction.Handle_BinMFunction_ScopeDriver_DownCast(t)
Handle_BinMFunction_ScopeDriver_DownCast = _BinMFunction.Handle_BinMFunction_ScopeDriver_DownCast

def Handle_BinMFunction_ScopeDriver_IsNull(t: 'opencascade::handle< BinMFunction_ScopeDriver > const &') -> "bool":
    return _BinMFunction.Handle_BinMFunction_ScopeDriver_IsNull(t)
Handle_BinMFunction_ScopeDriver_IsNull = _BinMFunction.Handle_BinMFunction_ScopeDriver_IsNull
class binmfunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, binmfunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, binmfunction, name)
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        Adds the attribute drivers to <thedrivertable>.

        Parameters
        ----------
        theDriverTable: BinMDF_ADriverTable
        aMsgDrv: Message_Messenger

        Returns
        -------
        None

        """
        return _BinMFunction.binmfunction_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    __repr__ = _dumps_object


    def __init__(self):
        this = _BinMFunction.new_binmfunction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMFunction.delete_binmfunction
    __del__ = lambda self: None
binmfunction_swigregister = _BinMFunction.binmfunction_swigregister
binmfunction_swigregister(binmfunction)

def binmfunction_AddDrivers(*args) -> "void":
    """
    Adds the attribute drivers to <thedrivertable>.

    Parameters
    ----------
    theDriverTable: BinMDF_ADriverTable
    aMsgDrv: Message_Messenger

    Returns
    -------
    None

    """
    return _BinMFunction.binmfunction_AddDrivers(*args)

class BinMFunction_FunctionDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMFunction_FunctionDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMFunction_FunctionDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _BinMFunction.new_BinMFunction_FunctionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMFunction.BinMFunction_FunctionDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMFunction_FunctionDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMFunction.delete_BinMFunction_FunctionDriver
    __del__ = lambda self: None
BinMFunction_FunctionDriver_swigregister = _BinMFunction.BinMFunction_FunctionDriver_swigregister
BinMFunction_FunctionDriver_swigregister(BinMFunction_FunctionDriver)

class BinMFunction_GraphNodeDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMFunction_GraphNodeDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMFunction_GraphNodeDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _BinMFunction.new_BinMFunction_GraphNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMFunction.BinMFunction_GraphNodeDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMFunction_GraphNodeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMFunction.delete_BinMFunction_GraphNodeDriver
    __del__ = lambda self: None
BinMFunction_GraphNodeDriver_swigregister = _BinMFunction.BinMFunction_GraphNodeDriver_swigregister
BinMFunction_GraphNodeDriver_swigregister(BinMFunction_GraphNodeDriver)

class BinMFunction_ScopeDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMFunction_ScopeDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMFunction_ScopeDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _BinMFunction.new_BinMFunction_ScopeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMFunction.BinMFunction_ScopeDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMFunction_ScopeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMFunction.delete_BinMFunction_ScopeDriver
    __del__ = lambda self: None
BinMFunction_ScopeDriver_swigregister = _BinMFunction.BinMFunction_ScopeDriver_swigregister
BinMFunction_ScopeDriver_swigregister(BinMFunction_ScopeDriver)



# This file is compatible with both classic and new-style classes.


