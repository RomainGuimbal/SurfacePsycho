# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
UTL module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_utl.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_UTL')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UTL')
    _UTL = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UTL', [dirname(__file__)])
        except ImportError:
            import _UTL
            return _UTL
        try:
            _mod = imp.load_module('_UTL', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UTL = swig_import_helper()
    del swig_import_helper
else:
    import _UTL
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UTL.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _UTL.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _UTL.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _UTL.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _UTL.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _UTL.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _UTL.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _UTL.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _UTL.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _UTL.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _UTL.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _UTL.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _UTL.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _UTL.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _UTL.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _UTL.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _UTL.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _UTL.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _UTL.process_exception(error, method_name, class_name)
process_exception = _UTL.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Storage
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.Resource

from enum import IntEnum
from OCC.Core.Exception import *



class utl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, utl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, utl, name)
    __repr__ = _swig_repr

    def AddToUserInfo(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aData: Storage_Data
        anInfo: TCollection_ExtendedString

        Returns
        -------
        None

        """
        return _UTL.utl_AddToUserInfo(*args)

    AddToUserInfo = staticmethod(AddToUserInfo)

    def CString(*args) -> "char const *":
        """
        No available documentation.

        Parameters
        ----------
        anExtendedString: TCollection_ExtendedString

        Returns
        -------
        char *

        """
        return _UTL.utl_CString(*args)

    CString = staticmethod(CString)

    def Disk(*args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Parameters
        ----------
        aPath: OSD_Path

        Returns
        -------
        TCollection_ExtendedString

        """
        return _UTL.utl_Disk(*args)

    Disk = staticmethod(Disk)

    def ExtendedString(*args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Parameters
        ----------
        anAsciiString: TCollection_AsciiString

        Returns
        -------
        TCollection_ExtendedString

        """
        return _UTL.utl_ExtendedString(*args)

    ExtendedString = staticmethod(ExtendedString)

    def Extension(*args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Parameters
        ----------
        aPath: OSD_Path

        Returns
        -------
        TCollection_ExtendedString

        No available documentation.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString

        Returns
        -------
        TCollection_ExtendedString

        """
        return _UTL.utl_Extension(*args)

    Extension = staticmethod(Extension)

    def FileIterator(*args) -> "OSD_FileIterator":
        """
        No available documentation.

        Parameters
        ----------
        aPath: OSD_Path
        aMask: TCollection_ExtendedString

        Returns
        -------
        OSD_FileIterator

        """
        return _UTL.utl_FileIterator(*args)

    FileIterator = staticmethod(FileIterator)

    def Find(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        aResourceManager: Resource_Manager
        aResourceName: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _UTL.utl_Find(*args)

    Find = staticmethod(Find)

    def GUID(*args) -> "Standard_GUID":
        """
        No available documentation.

        Parameters
        ----------
        anXString: TCollection_ExtendedString

        Returns
        -------
        Standard_GUID

        """
        return _UTL.utl_GUID(*args)

    GUID = staticmethod(GUID)

    def IntegerValue(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        anExtendedString: TCollection_ExtendedString

        Returns
        -------
        int

        """
        return _UTL.utl_IntegerValue(*args)

    IntegerValue = staticmethod(IntegerValue)

    def IsReadOnly(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _UTL.utl_IsReadOnly(*args)

    IsReadOnly = staticmethod(IsReadOnly)

    def LocalHost(*args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Returns
        -------
        TCollection_ExtendedString

        """
        return _UTL.utl_LocalHost(*args)

    LocalHost = staticmethod(LocalHost)

    def Name(*args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Parameters
        ----------
        aPath: OSD_Path

        Returns
        -------
        TCollection_ExtendedString

        """
        return _UTL.utl_Name(*args)

    Name = staticmethod(Name)

    def OpenFile(*args) -> "Storage_Error":
        """
        No available documentation.

        Parameters
        ----------
        aFile: Storage_BaseDriver
        aName: TCollection_ExtendedString
        aMode: Storage_OpenMode

        Returns
        -------
        Storage_Error

        """
        return _UTL.utl_OpenFile(*args)

    OpenFile = staticmethod(OpenFile)

    def Path(*args) -> "OSD_Path":
        """
        No available documentation.

        Parameters
        ----------
        aFileName: TCollection_ExtendedString

        Returns
        -------
        OSD_Path

        """
        return _UTL.utl_Path(*args)

    Path = staticmethod(Path)

    def Trek(*args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Parameters
        ----------
        aPath: OSD_Path

        Returns
        -------
        TCollection_ExtendedString

        """
        return _UTL.utl_Trek(*args)

    Trek = staticmethod(Trek)

    def Value(*args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Parameters
        ----------
        aResourceManager: Resource_Manager
        aResourceName: TCollection_ExtendedString

        Returns
        -------
        TCollection_ExtendedString

        """
        return _UTL.utl_Value(*args)

    Value = staticmethod(Value)

    def xgetenv(*args) -> "TCollection_ExtendedString":
        """
        No available documentation.

        Parameters
        ----------
        aCString: char *

        Returns
        -------
        TCollection_ExtendedString

        """
        return _UTL.utl_xgetenv(*args)

    xgetenv = staticmethod(xgetenv)

    __repr__ = _dumps_object


    def __init__(self):
        this = _UTL.new_utl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UTL.delete_utl
    __del__ = lambda self: None
utl_swigregister = _UTL.utl_swigregister
utl_swigregister(utl)

def utl_AddToUserInfo(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aData: Storage_Data
    anInfo: TCollection_ExtendedString

    Returns
    -------
    None

    """
    return _UTL.utl_AddToUserInfo(*args)

def utl_CString(*args) -> "char const *":
    """
    No available documentation.

    Parameters
    ----------
    anExtendedString: TCollection_ExtendedString

    Returns
    -------
    char *

    """
    return _UTL.utl_CString(*args)

def utl_Disk(*args) -> "TCollection_ExtendedString":
    """
    No available documentation.

    Parameters
    ----------
    aPath: OSD_Path

    Returns
    -------
    TCollection_ExtendedString

    """
    return _UTL.utl_Disk(*args)

def utl_ExtendedString(*args) -> "TCollection_ExtendedString":
    """
    No available documentation.

    Parameters
    ----------
    anAsciiString: TCollection_AsciiString

    Returns
    -------
    TCollection_ExtendedString

    """
    return _UTL.utl_ExtendedString(*args)

def utl_Extension(*args) -> "TCollection_ExtendedString":
    """
    No available documentation.

    Parameters
    ----------
    aPath: OSD_Path

    Returns
    -------
    TCollection_ExtendedString

    No available documentation.

    Parameters
    ----------
    aFileName: TCollection_ExtendedString

    Returns
    -------
    TCollection_ExtendedString

    """
    return _UTL.utl_Extension(*args)

def utl_FileIterator(*args) -> "OSD_FileIterator":
    """
    No available documentation.

    Parameters
    ----------
    aPath: OSD_Path
    aMask: TCollection_ExtendedString

    Returns
    -------
    OSD_FileIterator

    """
    return _UTL.utl_FileIterator(*args)

def utl_Find(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    aResourceManager: Resource_Manager
    aResourceName: TCollection_ExtendedString

    Returns
    -------
    bool

    """
    return _UTL.utl_Find(*args)

def utl_GUID(*args) -> "Standard_GUID":
    """
    No available documentation.

    Parameters
    ----------
    anXString: TCollection_ExtendedString

    Returns
    -------
    Standard_GUID

    """
    return _UTL.utl_GUID(*args)

def utl_IntegerValue(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    anExtendedString: TCollection_ExtendedString

    Returns
    -------
    int

    """
    return _UTL.utl_IntegerValue(*args)

def utl_IsReadOnly(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    aFileName: TCollection_ExtendedString

    Returns
    -------
    bool

    """
    return _UTL.utl_IsReadOnly(*args)

def utl_LocalHost(*args) -> "TCollection_ExtendedString":
    """
    No available documentation.

    Returns
    -------
    TCollection_ExtendedString

    """
    return _UTL.utl_LocalHost(*args)

def utl_Name(*args) -> "TCollection_ExtendedString":
    """
    No available documentation.

    Parameters
    ----------
    aPath: OSD_Path

    Returns
    -------
    TCollection_ExtendedString

    """
    return _UTL.utl_Name(*args)

def utl_OpenFile(*args) -> "Storage_Error":
    """
    No available documentation.

    Parameters
    ----------
    aFile: Storage_BaseDriver
    aName: TCollection_ExtendedString
    aMode: Storage_OpenMode

    Returns
    -------
    Storage_Error

    """
    return _UTL.utl_OpenFile(*args)

def utl_Path(*args) -> "OSD_Path":
    """
    No available documentation.

    Parameters
    ----------
    aFileName: TCollection_ExtendedString

    Returns
    -------
    OSD_Path

    """
    return _UTL.utl_Path(*args)

def utl_Trek(*args) -> "TCollection_ExtendedString":
    """
    No available documentation.

    Parameters
    ----------
    aPath: OSD_Path

    Returns
    -------
    TCollection_ExtendedString

    """
    return _UTL.utl_Trek(*args)

def utl_Value(*args) -> "TCollection_ExtendedString":
    """
    No available documentation.

    Parameters
    ----------
    aResourceManager: Resource_Manager
    aResourceName: TCollection_ExtendedString

    Returns
    -------
    TCollection_ExtendedString

    """
    return _UTL.utl_Value(*args)

def utl_xgetenv(*args) -> "TCollection_ExtendedString":
    """
    No available documentation.

    Parameters
    ----------
    aCString: char *

    Returns
    -------
    TCollection_ExtendedString

    """
    return _UTL.utl_xgetenv(*args)



# This file is compatible with both classic and new-style classes.


