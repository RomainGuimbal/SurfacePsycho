# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
Image module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_image.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Image
else:
    import _Image

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Image.delete_SwigPyIterator

    def value(self):
        return _Image.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Image.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Image.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Image.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Image.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Image.SwigPyIterator_copy(self)

    def next(self):
        return _Image.SwigPyIterator_next(self)

    def __next__(self):
        return _Image.SwigPyIterator___next__(self)

    def previous(self):
        return _Image.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Image.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Image.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Image.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Image.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Image.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Image.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Image.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Image:
_Image.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _Image.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection

from enum import IntEnum
from OCC.Core.Exception import *

Image_Format_NB = _Image.Image_Format_NB
Image_CompressedFormat_UNKNOWN = _Image.Image_CompressedFormat_UNKNOWN
Image_CompressedFormat_RGB_S3TC_DXT1 = _Image.Image_CompressedFormat_RGB_S3TC_DXT1
Image_CompressedFormat_RGBA_S3TC_DXT1 = _Image.Image_CompressedFormat_RGBA_S3TC_DXT1
Image_CompressedFormat_RGBA_S3TC_DXT3 = _Image.Image_CompressedFormat_RGBA_S3TC_DXT3
Image_CompressedFormat_RGBA_S3TC_DXT5 = _Image.Image_CompressedFormat_RGBA_S3TC_DXT5
Image_Format_UNKNOWN = _Image.Image_Format_UNKNOWN
Image_Format_Gray = _Image.Image_Format_Gray
Image_Format_Alpha = _Image.Image_Format_Alpha
Image_Format_RGB = _Image.Image_Format_RGB
Image_Format_BGR = _Image.Image_Format_BGR
Image_Format_RGB32 = _Image.Image_Format_RGB32
Image_Format_BGR32 = _Image.Image_Format_BGR32
Image_Format_RGBA = _Image.Image_Format_RGBA
Image_Format_BGRA = _Image.Image_Format_BGRA
Image_Format_GrayF = _Image.Image_Format_GrayF
Image_Format_AlphaF = _Image.Image_Format_AlphaF
Image_Format_RGF = _Image.Image_Format_RGF
Image_Format_RGBF = _Image.Image_Format_RGBF
Image_Format_BGRF = _Image.Image_Format_BGRF
Image_Format_RGBAF = _Image.Image_Format_RGBAF
Image_Format_BGRAF = _Image.Image_Format_BGRAF
Image_Format_GrayF_half = _Image.Image_Format_GrayF_half
Image_Format_RGF_half = _Image.Image_Format_RGF_half
Image_Format_RGBAF_half = _Image.Image_Format_RGBAF_half
Image_Format_Gray16 = _Image.Image_Format_Gray16


class Image_CompressedFormat(IntEnum):
	Image_CompressedFormat_UNKNOWN = Image_Format_UNKNOWN
	Image_CompressedFormat_RGB_S3TC_DXT1 = Image_Format_NB
	Image_CompressedFormat_RGBA_S3TC_DXT1 = 2
	Image_CompressedFormat_RGBA_S3TC_DXT3 = 3
	Image_CompressedFormat_RGBA_S3TC_DXT5 = 4
Image_CompressedFormat_UNKNOWN = Image_CompressedFormat.Image_CompressedFormat_UNKNOWN
Image_CompressedFormat_RGB_S3TC_DXT1 = Image_CompressedFormat.Image_CompressedFormat_RGB_S3TC_DXT1
Image_CompressedFormat_RGBA_S3TC_DXT1 = Image_CompressedFormat.Image_CompressedFormat_RGBA_S3TC_DXT1
Image_CompressedFormat_RGBA_S3TC_DXT3 = Image_CompressedFormat.Image_CompressedFormat_RGBA_S3TC_DXT3
Image_CompressedFormat_RGBA_S3TC_DXT5 = Image_CompressedFormat.Image_CompressedFormat_RGBA_S3TC_DXT5

class Image_Format(IntEnum):
	Image_Format_UNKNOWN = 0
	Image_Format_Gray = 1
	Image_Format_Alpha = 2
	Image_Format_RGB = 3
	Image_Format_BGR = 4
	Image_Format_RGB32 = 5
	Image_Format_BGR32 = 6
	Image_Format_RGBA = 7
	Image_Format_BGRA = 8
	Image_Format_GrayF = 9
	Image_Format_AlphaF = 10
	Image_Format_RGF = 11
	Image_Format_RGBF = 12
	Image_Format_BGRF = 13
	Image_Format_RGBAF = 14
	Image_Format_BGRAF = 15
	Image_Format_GrayF_half = 16
	Image_Format_RGF_half = 17
	Image_Format_RGBAF_half = 18
	Image_Format_Gray16 = 19
Image_Format_UNKNOWN = Image_Format.Image_Format_UNKNOWN
Image_Format_Gray = Image_Format.Image_Format_Gray
Image_Format_Alpha = Image_Format.Image_Format_Alpha
Image_Format_RGB = Image_Format.Image_Format_RGB
Image_Format_BGR = Image_Format.Image_Format_BGR
Image_Format_RGB32 = Image_Format.Image_Format_RGB32
Image_Format_BGR32 = Image_Format.Image_Format_BGR32
Image_Format_RGBA = Image_Format.Image_Format_RGBA
Image_Format_BGRA = Image_Format.Image_Format_BGRA
Image_Format_GrayF = Image_Format.Image_Format_GrayF
Image_Format_AlphaF = Image_Format.Image_Format_AlphaF
Image_Format_RGF = Image_Format.Image_Format_RGF
Image_Format_RGBF = Image_Format.Image_Format_RGBF
Image_Format_BGRF = Image_Format.Image_Format_BGRF
Image_Format_RGBAF = Image_Format.Image_Format_RGBAF
Image_Format_BGRAF = Image_Format.Image_Format_BGRAF
Image_Format_GrayF_half = Image_Format.Image_Format_GrayF_half
Image_Format_RGF_half = Image_Format.Image_Format_RGF_half
Image_Format_RGBAF_half = Image_Format.Image_Format_RGBAF_half
Image_Format_Gray16 = Image_Format.Image_Format_Gray16


@classnotwrapped
class Image_Texture:
	pass

@classnotwrapped
class Image_SupportedFormats:
	pass

@classnotwrapped
class Image_CompressedPixMap:
	pass

@classnotwrapped
class Image_PixMapData:
	pass

@classnotwrapped
class Image_Diff:
	pass

@classnotwrapped
class Image_PixMap:
	pass

@classnotwrapped
class Image_VideoParams:
	pass

@classnotwrapped
class Image_VideoRecorder:
	pass

@classnotwrapped
class Image_DDSParser:
	pass

@classnotwrapped
class Image_PixMapTypedData:
	pass

@classnotwrapped
class Image_ColorRGB:
	pass

@classnotwrapped
class Image_ColorRGB32:
	pass

@classnotwrapped
class Image_ColorRGBA:
	pass

@classnotwrapped
class Image_ColorBGR:
	pass

@classnotwrapped
class Image_ColorBGR32:
	pass

@classnotwrapped
class Image_ColorBGRA:
	pass

@classnotwrapped
class Image_ColorRGF:
	pass

@classnotwrapped
class Image_ColorRGBF:
	pass

@classnotwrapped
class Image_ColorBGRF:
	pass

@classnotwrapped
class Image_ColorRGBAF:
	pass

@classnotwrapped
class Image_ColorBGRAF:
	pass

@classnotwrapped
class Image_AlienPixMap:
	pass





