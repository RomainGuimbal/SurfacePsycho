# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomAbs module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomabs.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomAbs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomAbs')
    _GeomAbs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomAbs', [dirname(__file__)])
        except ImportError:
            import _GeomAbs
            return _GeomAbs
        try:
            _mod = imp.load_module('_GeomAbs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomAbs = swig_import_helper()
    del swig_import_helper
else:
    import _GeomAbs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomAbs.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _GeomAbs.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GeomAbs.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GeomAbs.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _GeomAbs.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _GeomAbs.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _GeomAbs.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _GeomAbs.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _GeomAbs.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _GeomAbs.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GeomAbs.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _GeomAbs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _GeomAbs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GeomAbs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GeomAbs.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GeomAbs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _GeomAbs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomAbs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomAbs.process_exception(error, method_name, class_name)
process_exception = _GeomAbs.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection

from enum import IntEnum
from OCC.Core.Exception import *

GeomAbs_IsoU = _GeomAbs.GeomAbs_IsoU
GeomAbs_IsoV = _GeomAbs.GeomAbs_IsoV
GeomAbs_NoneIso = _GeomAbs.GeomAbs_NoneIso
GeomAbs_Arc = _GeomAbs.GeomAbs_Arc
GeomAbs_Tangent = _GeomAbs.GeomAbs_Tangent
GeomAbs_Intersection = _GeomAbs.GeomAbs_Intersection
GeomAbs_Plane = _GeomAbs.GeomAbs_Plane
GeomAbs_Cylinder = _GeomAbs.GeomAbs_Cylinder
GeomAbs_Cone = _GeomAbs.GeomAbs_Cone
GeomAbs_Sphere = _GeomAbs.GeomAbs_Sphere
GeomAbs_Torus = _GeomAbs.GeomAbs_Torus
GeomAbs_BezierSurface = _GeomAbs.GeomAbs_BezierSurface
GeomAbs_BSplineSurface = _GeomAbs.GeomAbs_BSplineSurface
GeomAbs_SurfaceOfRevolution = _GeomAbs.GeomAbs_SurfaceOfRevolution
GeomAbs_SurfaceOfExtrusion = _GeomAbs.GeomAbs_SurfaceOfExtrusion
GeomAbs_OffsetSurface = _GeomAbs.GeomAbs_OffsetSurface
GeomAbs_OtherSurface = _GeomAbs.GeomAbs_OtherSurface
GeomAbs_Line = _GeomAbs.GeomAbs_Line
GeomAbs_Circle = _GeomAbs.GeomAbs_Circle
GeomAbs_Ellipse = _GeomAbs.GeomAbs_Ellipse
GeomAbs_Hyperbola = _GeomAbs.GeomAbs_Hyperbola
GeomAbs_Parabola = _GeomAbs.GeomAbs_Parabola
GeomAbs_BezierCurve = _GeomAbs.GeomAbs_BezierCurve
GeomAbs_BSplineCurve = _GeomAbs.GeomAbs_BSplineCurve
GeomAbs_OffsetCurve = _GeomAbs.GeomAbs_OffsetCurve
GeomAbs_OtherCurve = _GeomAbs.GeomAbs_OtherCurve
GeomAbs_C0 = _GeomAbs.GeomAbs_C0
GeomAbs_G1 = _GeomAbs.GeomAbs_G1
GeomAbs_C1 = _GeomAbs.GeomAbs_C1
GeomAbs_G2 = _GeomAbs.GeomAbs_G2
GeomAbs_C2 = _GeomAbs.GeomAbs_C2
GeomAbs_C3 = _GeomAbs.GeomAbs_C3
GeomAbs_CN = _GeomAbs.GeomAbs_CN
GeomAbs_NonUniform = _GeomAbs.GeomAbs_NonUniform
GeomAbs_Uniform = _GeomAbs.GeomAbs_Uniform
GeomAbs_QuasiUniform = _GeomAbs.GeomAbs_QuasiUniform
GeomAbs_PiecewiseBezier = _GeomAbs.GeomAbs_PiecewiseBezier


class GeomAbs_IsoType(IntEnum):
	GeomAbs_IsoU = 0
	GeomAbs_IsoV = 1
	GeomAbs_NoneIso = 2
GeomAbs_IsoU = GeomAbs_IsoType.GeomAbs_IsoU
GeomAbs_IsoV = GeomAbs_IsoType.GeomAbs_IsoV
GeomAbs_NoneIso = GeomAbs_IsoType.GeomAbs_NoneIso

class GeomAbs_JoinType(IntEnum):
	GeomAbs_Arc = 0
	GeomAbs_Tangent = 1
	GeomAbs_Intersection = 2
GeomAbs_Arc = GeomAbs_JoinType.GeomAbs_Arc
GeomAbs_Tangent = GeomAbs_JoinType.GeomAbs_Tangent
GeomAbs_Intersection = GeomAbs_JoinType.GeomAbs_Intersection

class GeomAbs_SurfaceType(IntEnum):
	GeomAbs_Plane = 0
	GeomAbs_Cylinder = 1
	GeomAbs_Cone = 2
	GeomAbs_Sphere = 3
	GeomAbs_Torus = 4
	GeomAbs_BezierSurface = 5
	GeomAbs_BSplineSurface = 6
	GeomAbs_SurfaceOfRevolution = 7
	GeomAbs_SurfaceOfExtrusion = 8
	GeomAbs_OffsetSurface = 9
	GeomAbs_OtherSurface = 10
GeomAbs_Plane = GeomAbs_SurfaceType.GeomAbs_Plane
GeomAbs_Cylinder = GeomAbs_SurfaceType.GeomAbs_Cylinder
GeomAbs_Cone = GeomAbs_SurfaceType.GeomAbs_Cone
GeomAbs_Sphere = GeomAbs_SurfaceType.GeomAbs_Sphere
GeomAbs_Torus = GeomAbs_SurfaceType.GeomAbs_Torus
GeomAbs_BezierSurface = GeomAbs_SurfaceType.GeomAbs_BezierSurface
GeomAbs_BSplineSurface = GeomAbs_SurfaceType.GeomAbs_BSplineSurface
GeomAbs_SurfaceOfRevolution = GeomAbs_SurfaceType.GeomAbs_SurfaceOfRevolution
GeomAbs_SurfaceOfExtrusion = GeomAbs_SurfaceType.GeomAbs_SurfaceOfExtrusion
GeomAbs_OffsetSurface = GeomAbs_SurfaceType.GeomAbs_OffsetSurface
GeomAbs_OtherSurface = GeomAbs_SurfaceType.GeomAbs_OtherSurface

class GeomAbs_CurveType(IntEnum):
	GeomAbs_Line = 0
	GeomAbs_Circle = 1
	GeomAbs_Ellipse = 2
	GeomAbs_Hyperbola = 3
	GeomAbs_Parabola = 4
	GeomAbs_BezierCurve = 5
	GeomAbs_BSplineCurve = 6
	GeomAbs_OffsetCurve = 7
	GeomAbs_OtherCurve = 8
GeomAbs_Line = GeomAbs_CurveType.GeomAbs_Line
GeomAbs_Circle = GeomAbs_CurveType.GeomAbs_Circle
GeomAbs_Ellipse = GeomAbs_CurveType.GeomAbs_Ellipse
GeomAbs_Hyperbola = GeomAbs_CurveType.GeomAbs_Hyperbola
GeomAbs_Parabola = GeomAbs_CurveType.GeomAbs_Parabola
GeomAbs_BezierCurve = GeomAbs_CurveType.GeomAbs_BezierCurve
GeomAbs_BSplineCurve = GeomAbs_CurveType.GeomAbs_BSplineCurve
GeomAbs_OffsetCurve = GeomAbs_CurveType.GeomAbs_OffsetCurve
GeomAbs_OtherCurve = GeomAbs_CurveType.GeomAbs_OtherCurve

class GeomAbs_Shape(IntEnum):
	GeomAbs_C0 = 0
	GeomAbs_G1 = 1
	GeomAbs_C1 = 2
	GeomAbs_G2 = 3
	GeomAbs_C2 = 4
	GeomAbs_C3 = 5
	GeomAbs_CN = 6
GeomAbs_C0 = GeomAbs_Shape.GeomAbs_C0
GeomAbs_G1 = GeomAbs_Shape.GeomAbs_G1
GeomAbs_C1 = GeomAbs_Shape.GeomAbs_C1
GeomAbs_G2 = GeomAbs_Shape.GeomAbs_G2
GeomAbs_C2 = GeomAbs_Shape.GeomAbs_C2
GeomAbs_C3 = GeomAbs_Shape.GeomAbs_C3
GeomAbs_CN = GeomAbs_Shape.GeomAbs_CN

class GeomAbs_BSplKnotDistribution(IntEnum):
	GeomAbs_NonUniform = 0
	GeomAbs_Uniform = 1
	GeomAbs_QuasiUniform = 2
	GeomAbs_PiecewiseBezier = 3
GeomAbs_NonUniform = GeomAbs_BSplKnotDistribution.GeomAbs_NonUniform
GeomAbs_Uniform = GeomAbs_BSplKnotDistribution.GeomAbs_Uniform
GeomAbs_QuasiUniform = GeomAbs_BSplKnotDistribution.GeomAbs_QuasiUniform
GeomAbs_PiecewiseBezier = GeomAbs_BSplKnotDistribution.GeomAbs_PiecewiseBezier



# This file is compatible with both classic and new-style classes.


