# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
CDF module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_cdf.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CDF
else:
    import _CDF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CDF.delete_SwigPyIterator

    def value(self):
        return _CDF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CDF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CDF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CDF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CDF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CDF.SwigPyIterator_copy(self)

    def next(self):
        return _CDF.SwigPyIterator_next(self)

    def __next__(self):
        return _CDF.SwigPyIterator___next__(self)

    def previous(self):
        return _CDF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CDF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CDF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CDF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CDF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CDF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CDF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CDF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CDF:
_CDF.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _CDF.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.CDM
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *

CDF_SSNS_OK = _CDF.CDF_SSNS_OK
CDF_SSNS_ReplacingAnExistentDocument = _CDF.CDF_SSNS_ReplacingAnExistentDocument
CDF_SSNS_OpenDocument = _CDF.CDF_SSNS_OpenDocument
CDF_SCS_Consistent = _CDF.CDF_SCS_Consistent
CDF_SCS_Unconsistent = _CDF.CDF_SCS_Unconsistent
CDF_SCS_Stored = _CDF.CDF_SCS_Stored
CDF_SCS_Modified = _CDF.CDF_SCS_Modified
CDF_TS_OK = _CDF.CDF_TS_OK
CDF_TS_NoCurrentDocument = _CDF.CDF_TS_NoCurrentDocument
CDF_TS_NoDriver = _CDF.CDF_TS_NoDriver
CDF_TS_NoSubComponentDriver = _CDF.CDF_TS_NoSubComponentDriver
CDF_TOA_New = _CDF.CDF_TOA_New
CDF_TOA_Modified = _CDF.CDF_TOA_Modified
CDF_TOA_Unchanged = _CDF.CDF_TOA_Unchanged


class CDF_StoreSetNameStatus(IntEnum):
	CDF_SSNS_OK = 0
	CDF_SSNS_ReplacingAnExistentDocument = 1
	CDF_SSNS_OpenDocument = 2
CDF_SSNS_OK = CDF_StoreSetNameStatus.CDF_SSNS_OK
CDF_SSNS_ReplacingAnExistentDocument = CDF_StoreSetNameStatus.CDF_SSNS_ReplacingAnExistentDocument
CDF_SSNS_OpenDocument = CDF_StoreSetNameStatus.CDF_SSNS_OpenDocument

class CDF_SubComponentStatus(IntEnum):
	CDF_SCS_Consistent = 0
	CDF_SCS_Unconsistent = 1
	CDF_SCS_Stored = 2
	CDF_SCS_Modified = 3
CDF_SCS_Consistent = CDF_SubComponentStatus.CDF_SCS_Consistent
CDF_SCS_Unconsistent = CDF_SubComponentStatus.CDF_SCS_Unconsistent
CDF_SCS_Stored = CDF_SubComponentStatus.CDF_SCS_Stored
CDF_SCS_Modified = CDF_SubComponentStatus.CDF_SCS_Modified

class CDF_TryStoreStatus(IntEnum):
	CDF_TS_OK = 0
	CDF_TS_NoCurrentDocument = 1
	CDF_TS_NoDriver = 2
	CDF_TS_NoSubComponentDriver = 3
CDF_TS_OK = CDF_TryStoreStatus.CDF_TS_OK
CDF_TS_NoCurrentDocument = CDF_TryStoreStatus.CDF_TS_NoCurrentDocument
CDF_TS_NoDriver = CDF_TryStoreStatus.CDF_TS_NoDriver
CDF_TS_NoSubComponentDriver = CDF_TryStoreStatus.CDF_TS_NoSubComponentDriver

class CDF_TypeOfActivation(IntEnum):
	CDF_TOA_New = 0
	CDF_TOA_Modified = 1
	CDF_TOA_Unchanged = 2
CDF_TOA_New = CDF_TypeOfActivation.CDF_TOA_New
CDF_TOA_Modified = CDF_TypeOfActivation.CDF_TOA_Modified
CDF_TOA_Unchanged = CDF_TypeOfActivation.CDF_TOA_Unchanged


def Handle_CDF_Application_Create():
    return _CDF.Handle_CDF_Application_Create()

def Handle_CDF_Application_DownCast(t):
    return _CDF.Handle_CDF_Application_DownCast(t)

def Handle_CDF_Application_IsNull(t):
    return _CDF.Handle_CDF_Application_IsNull(t)

def Handle_CDF_Directory_Create():
    return _CDF.Handle_CDF_Directory_Create()

def Handle_CDF_Directory_DownCast(t):
    return _CDF.Handle_CDF_Directory_DownCast(t)

def Handle_CDF_Directory_IsNull(t):
    return _CDF.Handle_CDF_Directory_IsNull(t)

def Handle_CDF_MetaDataDriver_Create():
    return _CDF.Handle_CDF_MetaDataDriver_Create()

def Handle_CDF_MetaDataDriver_DownCast(t):
    return _CDF.Handle_CDF_MetaDataDriver_DownCast(t)

def Handle_CDF_MetaDataDriver_IsNull(t):
    return _CDF.Handle_CDF_MetaDataDriver_IsNull(t)

def Handle_CDF_MetaDataDriverFactory_Create():
    return _CDF.Handle_CDF_MetaDataDriverFactory_Create()

def Handle_CDF_MetaDataDriverFactory_DownCast(t):
    return _CDF.Handle_CDF_MetaDataDriverFactory_DownCast(t)

def Handle_CDF_MetaDataDriverFactory_IsNull(t):
    return _CDF.Handle_CDF_MetaDataDriverFactory_IsNull(t)

def Handle_CDF_StoreList_Create():
    return _CDF.Handle_CDF_StoreList_Create()

def Handle_CDF_StoreList_DownCast(t):
    return _CDF.Handle_CDF_StoreList_DownCast(t)

def Handle_CDF_StoreList_IsNull(t):
    return _CDF.Handle_CDF_StoreList_IsNull(t)

def Handle_CDF_FWOSDriver_Create():
    return _CDF.Handle_CDF_FWOSDriver_Create()

def Handle_CDF_FWOSDriver_DownCast(t):
    return _CDF.Handle_CDF_FWOSDriver_DownCast(t)

def Handle_CDF_FWOSDriver_IsNull(t):
    return _CDF.Handle_CDF_FWOSDriver_IsNull(t)
class CDF_Application(OCC.Core.CDM.CDM_Application):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    myMetaDataDriver = property(_CDF.CDF_Application_myMetaDataDriver_get, _CDF.CDF_Application_myMetaDataDriver_set, doc=r"""Json string serializer.""")
    myDirectory = property(_CDF.CDF_Application_myDirectory_get, _CDF.CDF_Application_myDirectory_set, doc=r"""Json string serializer.""")

    def CanClose(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        CDM_CanCloseStatus

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Application_CanClose(self, *args)

    def CanRetrieve(self, *args):
        r"""

        Parameters
        ----------
        theFolder: str
        theName: str
        theAppendMode: bool

        Return
        -------
        PCDM_ReaderStatus

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theFolder: str
        theName: str
        theVersion: str
        theAppendMode: bool

        Return
        -------
        PCDM_ReaderStatus

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Application_CanRetrieve(self, *args)

    def Close(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        None

        Description
        -----------
        Removes the document of the current session directory and closes the document;.

        """
        return _CDF.CDF_Application_Close(self, *args)

    def DefaultFolder(self, *args):
        r"""
        Return
        -------
        Standard_ExtString

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Application_DefaultFolder(self, *args)

    def Format(self, *args):
        r"""

        Parameters
        ----------
        aFileName: str
        theFormat: str

        Return
        -------
        bool

        Description
        -----------
        Try to retrieve a format directly in the file or in application resource by using extension. returns true if found;.

        """
        return _CDF.CDF_Application_Format(self, *args)

    def GetRetrieveStatus(self, *args):
        r"""
        Return
        -------
        PCDM_ReaderStatus

        Description
        -----------
        Checks status after retrieve.

        """
        return _CDF.CDF_Application_GetRetrieveStatus(self, *args)

    def InitDocument(self, *args):
        r"""

        Parameters
        ----------
        theDoc: CDM_Document

        Return
        -------
        None

        Description
        -----------
        Initialize a document for the applicative session. this virtual function is called by newdocument and should be redefined for each specific application.

        """
        return _CDF.CDF_Application_InitDocument(self, *args)

    @staticmethod
    def Load(*args):
        r"""

        Parameters
        ----------
        aGUID: Standard_GUID

        Return
        -------
        opencascade::handle<CDF_Application>

        Description
        -----------
        Plugs an application. //! open is used - for opening a document that has been created in an application - for opening a document from the database - for opening a document from a file. the open methods always add the document in the session directory and calls the virtual activate method. the document is considered to be opened until close is used. to be storable, a document must be opened by an application since the application resources are needed to store it.

        """
        return _CDF.CDF_Application_Load(*args)

    def MetaDataDriver(self, *args):
        r"""
        Return
        -------
        opencascade::handle<CDF_MetaDataDriver>

        Description
        -----------
        Returns metadatddriver of this application.

        """
        return _CDF.CDF_Application_MetaDataDriver(self, *args)

    def NewDocument(self, *args):
        r"""

        Parameters
        ----------
        theFormat: str
        theDoc: CDM_Document

        Return
        -------
        None

        Description
        -----------
        Constructs an new empty document. this document will have the specified format. if initdocument() is redefined for a specific application, the new document is handled by the applicative session.

        """
        return _CDF.CDF_Application_NewDocument(self, *args)

    def Open(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        None

        Description
        -----------
        Puts the document in the current session directory and calls the virtual method activate on it.

        """
        return _CDF.CDF_Application_Open(self, *args)

    def ReaderFromFormat(self, *args):
        r"""

        Parameters
        ----------
        aFormat: str

        Return
        -------
        opencascade::handle<PCDM_Reader>

        Description
        -----------
        Returns instance of read driver for specified format. //! default implementation uses plugin mechanism to load reader dynamically. for this to work, application resources should define guid of the plugin as value of [format].retrievalplugin, and 'plugin' resource should define name of plugin library to be loaded as value of [guid].location. plugin library should provide method pluginfactory returning instance of the reader for the same guid (see plugin_macro.hxx). //! in case if reader is not available, will raise standard_nosuchobject or other exception if raised by plugin loader.

        """
        return _CDF.CDF_Application_ReaderFromFormat(self, *args)

    def Retrieve(self, *args):
        r"""

        Parameters
        ----------
        aFolder: str
        aName: str
        UseStorageConfiguration: bool (optional, default to Standard_True)
        theFilter: PCDM_ReaderFilter (optional, default to opencascade::handle<PCDM_ReaderFilter>())
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        opencascade::handle<CDM_Document>

        Description
        -----------
        This method retrieves a document from the database. if the document references other documents which have been updated, the latest version of these documents will be used if {usestorageconfiguration} is standard_true. the content of {afolder}, {aname} and {aversion} depends on the database manager system. if the dbms is only based on the os, {afolder} is a directory and {aname} is the name of a file. in this case the use of the syntax with {aversion} has no sense. for example: //! opencascade::handle<cdm_document> thedocument=myapplication->retrieve('/home/cascade','box.dsg'); if the dbms is euclid/design manager, {afolder}, {aname} have the form they have in euclid/design manager. for example: //! opencascade::handle<cdm_document> thedocument=myapplication->retrieve('|user|cascade','box'); //! since the version is not specified in this syntax, the latest will be used. a link is kept with the database through an instance of cdm_metadata.

        Parameters
        ----------
        aFolder: str
        aName: str
        aVersion: str
        UseStorageConfiguration: bool (optional, default to Standard_True)
        theFilter: PCDM_ReaderFilter (optional, default to opencascade::handle<PCDM_ReaderFilter>())
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        opencascade::handle<CDM_Document>

        Description
        -----------
        This method retrieves a document from the database. if the document references other documents which have been updated, the latest version of these documents will be used if {usestorageconfiguration} is standard_true. -- if the dbms is only based on the os, this syntax should not be used. //! if the dbms is euclid/design manager, {afolder}, {aname} and {aversion} have the form they have in euclid/design manager. for example: //! opencascade::handle<cdm_document> thedocument=myapplication->retrieve('|user|cascade','box','2'); a link is kept with the database through an instance of cdm_metadata.

        """
        return _CDF.CDF_Application_Retrieve(self, *args)

    def SetDefaultFolder(self, *args):
        r"""

        Parameters
        ----------
        aFolder: Standard_ExtString

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Application_SetDefaultFolder(self, *args)

    def WriterFromFormat(self, *args):
        r"""

        Parameters
        ----------
        aFormat: str

        Return
        -------
        opencascade::handle<PCDM_StorageDriver>

        Description
        -----------
        Returns instance of storage driver for specified format. //! default implementation uses plugin mechanism to load driver dynamically. for this to work, application resources should define guid of the plugin as value of [format].storageplugin, and 'plugin' resource should define name of plugin library to be loaded as value of [guid].location. plugin library should provide method pluginfactory returning instance of the reader for the same guid (see plugin_macro.hxx). //! in case if driver is not available, will raise standard_nosuchobject or other exception if raised by plugin loader.

        """
        return _CDF.CDF_Application_WriterFromFormat(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_CDF_Application_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDF.delete_CDF_Application

# Register CDF_Application in _CDF:
_CDF.CDF_Application_swigregister(CDF_Application)
class CDF_Directory(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an empty directory.

        """
        _CDF.CDF_Directory_swiginit(self, _CDF.new_CDF_Directory(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        None

        Description
        -----------
        Adds a document into the directory.

        """
        return _CDF.CDF_Directory_Add(self, *args)

    def Contains(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        bool

        Description
        -----------
        Returns true if the document adocument is in the directory.

        """
        return _CDF.CDF_Directory_Contains(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the directory is empty.

        """
        return _CDF.CDF_Directory_IsEmpty(self, *args)

    def Last(self, *args):
        r"""
        Return
        -------
        opencascade::handle<CDM_Document>

        Description
        -----------
        Returns the last document (if any) which has been added in the directory.

        """
        return _CDF.CDF_Directory_Last(self, *args)

    def Length(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of documents of the directory.

        """
        return _CDF.CDF_Directory_Length(self, *args)

    def Remove(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        None

        Description
        -----------
        Removes the document.

        """
        return _CDF.CDF_Directory_Remove(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_CDF_Directory_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDF.delete_CDF_Directory

# Register CDF_Directory in _CDF:
_CDF.CDF_Directory_swigregister(CDF_Directory)
class CDF_MetaDataDriver(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BuildFileName(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        TCollection_ExtendedString

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_MetaDataDriver_BuildFileName(self, *args)

    def CreateDependsOn(self, *args):
        r"""

        Parameters
        ----------
        aFirstData: CDM_MetaData
        aSecondData: CDM_MetaData

        Return
        -------
        None

        Description
        -----------
        Creates a 'depends on' relation between two datas. by default does nothing.

        """
        return _CDF.CDF_MetaDataDriver_CreateDependsOn(self, *args)

    def CreateMetaData(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document
        aFileName: str

        Return
        -------
        opencascade::handle<CDM_MetaData>

        Description
        -----------
        Should create meta-data corresponding to adata and maintaining a meta-link between these meta-data and afilename createmetadata is called by createdata if the metadata-driver has version capabilities, version must be set in the returned data.

        """
        return _CDF.CDF_MetaDataDriver_CreateMetaData(self, *args)

    def CreateReference(self, *args):
        r"""

        Parameters
        ----------
        aFrom: CDM_MetaData
        aTo: CDM_MetaData
        aReferenceIdentifier: int
        aToDocumentVersion: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_MetaDataDriver_CreateReference(self, *args)

    def DefaultFolder(self, *args):
        r"""
        Return
        -------
        TCollection_ExtendedString

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_MetaDataDriver_DefaultFolder(self, *args)

    def Find(self, *args):
        r"""

        Parameters
        ----------
        aFolder: str
        aName: str
        aVersion: str

        Return
        -------
        bool

        Description
        -----------
        Should indicate whether meta-data exist in the dbms corresponding to the data. aversion may be null;.

        Parameters
        ----------
        aFolder: str
        aName: str

        Return
        -------
        bool

        Description
        -----------
        Calls find with an empty version.

        """
        return _CDF.CDF_MetaDataDriver_Find(self, *args)

    def FindFolder(self, *args):
        r"""

        Parameters
        ----------
        aFolder: str

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_MetaDataDriver_FindFolder(self, *args)

    def HasReadPermission(self, *args):
        r"""

        Parameters
        ----------
        aFolder: str
        aName: str
        aVersion: str

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_MetaDataDriver_HasReadPermission(self, *args)

    def HasVersion(self, *args):
        r"""

        Parameters
        ----------
        aFolder: str
        aName: str

        Return
        -------
        bool

        Description
        -----------
        By default return standard_true.

        """
        return _CDF.CDF_MetaDataDriver_HasVersion(self, *args)

    def HasVersionCapability(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the metadatadriver can manage different versions of a data. by default, returns standard_false.

        """
        return _CDF.CDF_MetaDataDriver_HasVersionCapability(self, *args)

    def LastVersion(self, *args):
        r"""

        Parameters
        ----------
        aMetaData: CDM_MetaData

        Return
        -------
        opencascade::handle<CDM_MetaData>

        Description
        -----------
        By default returns ametadata should return the metadata stored in the dbms with the meta-data corresponding to the path. if the metadatadriver has version management capabilities the version has to be set in the returned metadata. metadata is called by getmetadata if the version is not included in the path , metadata should return the last version of the metadata is deferred;.

        """
        return _CDF.CDF_MetaDataDriver_LastVersion(self, *args)

    def MetaData(self, *args):
        r"""

        Parameters
        ----------
        aFolder: str
        aName: str
        aVersion: str

        Return
        -------
        opencascade::handle<CDM_MetaData>

        Description
        -----------
        Should return the metadata stored in the dbms with the meta-data corresponding to the data. if the metadatadriver has version management capabilities the version has to be set in the returned metadata. aversion may be null metadata is called by getmetadata if the version is set to null, metadata should return the last version of the metadata.

        Parameters
        ----------
        aFolder: str
        aName: str

        Return
        -------
        opencascade::handle<CDM_MetaData>

        Description
        -----------
        Calls metadata with an empty version.

        """
        return _CDF.CDF_MetaDataDriver_MetaData(self, *args)

    def ReferenceIterator(self, *args):
        r"""

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Return
        -------
        opencascade::handle<PCDM_ReferenceIterator>

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_MetaDataDriver_ReferenceIterator(self, *args)

    def SetName(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document
        aName: str

        Return
        -------
        TCollection_ExtendedString

        Description
        -----------
        This method is useful if the name of an object -- depends on the metadatadriver. for example a driver -- based on the operating system can choose to add the extension of file to create to the object.

        """
        return _CDF.CDF_MetaDataDriver_SetName(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_CDF_MetaDataDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDF.delete_CDF_MetaDataDriver

# Register CDF_MetaDataDriver in _CDF:
_CDF.CDF_MetaDataDriver_swigregister(CDF_MetaDataDriver)
class CDF_MetaDataDriverFactory(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Build(self, *args):
        r"""
        Return
        -------
        opencascade::handle<CDF_MetaDataDriver>

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_MetaDataDriverFactory_Build(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_CDF_MetaDataDriverFactory_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDF.delete_CDF_MetaDataDriverFactory

# Register CDF_MetaDataDriverFactory in _CDF:
_CDF.CDF_MetaDataDriverFactory_swigregister(CDF_MetaDataDriverFactory)
class CDF_Store(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        None

        Description
        -----------
        Creates a store list from the document of the current selection.

        """
        _CDF.CDF_Store_swiginit(self, _CDF.new_CDF_Store(*args))

    def AssociatedStatusText(self, *args):
        r"""
        Return
        -------
        Standard_ExtString

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_AssociatedStatusText(self, *args)

    def Comment(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TCollection_HExtendedString>

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_Comment(self, *args)

    def CurrentIsConsistent(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_CurrentIsConsistent(self, *args)

    def Description(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TCollection_HExtendedString>

        Description
        -----------
        Returns the description of the format of the main object.

        """
        return _CDF.CDF_Store_Description(self, *args)

    def Folder(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TCollection_HExtendedString>

        Description
        -----------
        Returns the folder in which the current document will be stored.

        """
        return _CDF.CDF_Store_Folder(self, *args)

    def HasAPreviousVersion(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_HasAPreviousVersion(self, *args)

    def IsConsistent(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_IsConsistent(self, *args)

    def IsMainDocument(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the currentdocument is the main one, ie the document of the current selection.

        """
        return _CDF.CDF_Store_IsMainDocument(self, *args)

    def IsModified(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_IsModified(self, *args)

    def IsStored(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current document is already stored.

        """
        return _CDF.CDF_Store_IsStored(self, *args)

    def MetaDataPath(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TCollection_HExtendedString>

        Description
        -----------
        Returns the path of the previous store is the object is already stored, otherwise an empty string;.

        """
        return _CDF.CDF_Store_MetaDataPath(self, *args)

    def Name(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TCollection_HExtendedString>

        Description
        -----------
        Returns the name under which the current document will be stored.

        """
        return _CDF.CDF_Store_Name(self, *args)

    def Path(self, *args):
        r"""
        Return
        -------
        Standard_ExtString

        Description
        -----------
        Returns the complete path of the created meta-data.

        """
        return _CDF.CDF_Store_Path(self, *args)

    def PreviousVersion(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TCollection_HExtendedString>

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_PreviousVersion(self, *args)

    def Realize(self, *args):
        r"""

        Parameters
        ----------
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_Realize(self, *args)

    def RecheckName(self, *args):
        r"""
        Return
        -------
        CDF_StoreSetNameStatus

        Description
        -----------
        Defines the name under which the document should be stored. uses for example after modification of the folder.

        """
        return _CDF.CDF_Store_RecheckName(self, *args)

    def SetComment(self, *args):
        r"""

        Parameters
        ----------
        aComment: Standard_ExtString

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_SetComment(self, *args)

    def SetCurrent(self, *args):
        r"""

        Parameters
        ----------
        aPresentation: Standard_ExtString

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_SetCurrent(self, *args)

    def SetFolder(self, *args):
        r"""

        Parameters
        ----------
        aFolder: str

        Return
        -------
        bool

        Description
        -----------
        Defines the folder in which the document should be stored. returns standard_true if the folder exists, standard_false otherwise.

        Parameters
        ----------
        aFolder: Standard_ExtString

        Return
        -------
        bool

        Description
        -----------
        Defines the folder in which the document should be stored. returns standard_true if the folder exists, standard_false otherwise.

        """
        return _CDF.CDF_Store_SetFolder(self, *args)

    def SetMain(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        The two following methods can be used just after realize or import -- method to know if thes methods worked correctly, and if not why.

        """
        return _CDF.CDF_Store_SetMain(self, *args)

    def SetName(self, *args):
        r"""

        Parameters
        ----------
        aName: Standard_ExtString

        Return
        -------
        CDF_StoreSetNameStatus

        Description
        -----------
        Defines the name under which the document should be stored.

        Parameters
        ----------
        aName: str

        Return
        -------
        CDF_StoreSetNameStatus

        Description
        -----------
        Defines the name under which the document should be stored.

        """
        return _CDF.CDF_Store_SetName(self, *args)

    def SetPreviousVersion(self, *args):
        r"""

        Parameters
        ----------
        aPreviousVersion: Standard_ExtString

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_SetPreviousVersion(self, *args)

    def StoreStatus(self, *args):
        r"""
        Return
        -------
        PCDM_StoreStatus

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_Store_StoreStatus(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _CDF.delete_CDF_Store

# Register CDF_Store in _CDF:
_CDF.CDF_Store_swigregister(CDF_Store)
class CDF_StoreList(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aDocument: CDM_Document

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _CDF.CDF_StoreList_swiginit(self, _CDF.new_CDF_StoreList(*args))

    def Init(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_StoreList_Init(self, *args)

    def IsConsistent(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_StoreList_IsConsistent(self, *args)

    def More(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_StoreList_More(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_StoreList_Next(self, *args)

    def Store(self, *args):
        r"""

        Parameters
        ----------
        aMetaData: CDM_MetaData
        aStatusAssociatedText: str
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        PCDM_StoreStatus

        Description
        -----------
        Stores each object of the storelist in the reverse order of which they had been added.

        """
        return _CDF.CDF_StoreList_Store(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        opencascade::handle<CDM_Document>

        Description
        -----------
        No available documentation.

        """
        return _CDF.CDF_StoreList_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_CDF_StoreList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDF.delete_CDF_StoreList

# Register CDF_StoreList in _CDF:
_CDF.CDF_StoreList_swigregister(CDF_StoreList)
class CDF_FWOSDriver(CDF_MetaDataDriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theLookUpTable: CDM_MetaDataLookUpTable

        Return
        -------
        None

        Description
        -----------
        Initializes the metadatadriver connected to specified look-up table. note that the created driver will keep reference to the table, thus it must have life time longer than this object.

        """
        _CDF.CDF_FWOSDriver_swiginit(self, _CDF.new_CDF_FWOSDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_CDF_FWOSDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _CDF.delete_CDF_FWOSDriver

# Register CDF_FWOSDriver in _CDF:
_CDF.CDF_FWOSDriver_swigregister(CDF_FWOSDriver)

@classnotwrapped
class CDF_DirectoryIterator:
	pass





@deprecated
def CDF_Application_Load(*args):
	return CDF_Application.Load(*args)



