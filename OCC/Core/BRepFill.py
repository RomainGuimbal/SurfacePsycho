# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
BRepFill module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_brepfill.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepFill
else:
    import _BRepFill

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepFill.delete_SwigPyIterator

    def value(self):
        return _BRepFill.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepFill.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepFill.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepFill.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepFill.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepFill.SwigPyIterator_copy(self)

    def next(self):
        return _BRepFill.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepFill.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepFill.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepFill.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepFill.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepFill.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepFill.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepFill.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepFill.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepFill.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepFill:
_BRepFill.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BRepFill.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.MAT
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.AppParCurves
import OCC.Core.math
import OCC.Core.GeomPlate
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.TColGeom2d
import OCC.Core.GeomLProp
import OCC.Core.Law
import OCC.Core.AdvApp2Var
import OCC.Core.AdvApprox
import OCC.Core.PLib
import OCC.Core.Plate
import OCC.Core.GeomFill
import OCC.Core.Convert
import OCC.Core.AppBlend
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.TColGeom
import OCC.Core.BRepMAT2d
import OCC.Core.Bisector
import OCC.Core.IntRes2d

from enum import IntEnum
from OCC.Core.Exception import *

BRepFill_ThruSectionErrorStatus_Done = _BRepFill.BRepFill_ThruSectionErrorStatus_Done
BRepFill_ThruSectionErrorStatus_NotDone = _BRepFill.BRepFill_ThruSectionErrorStatus_NotDone
BRepFill_ThruSectionErrorStatus_NotSameTopology = _BRepFill.BRepFill_ThruSectionErrorStatus_NotSameTopology
BRepFill_ThruSectionErrorStatus_ProfilesInconsistent = _BRepFill.BRepFill_ThruSectionErrorStatus_ProfilesInconsistent
BRepFill_ThruSectionErrorStatus_WrongUsage = _BRepFill.BRepFill_ThruSectionErrorStatus_WrongUsage
BRepFill_ThruSectionErrorStatus_Null3DCurve = _BRepFill.BRepFill_ThruSectionErrorStatus_Null3DCurve
BRepFill_ThruSectionErrorStatus_Failed = _BRepFill.BRepFill_ThruSectionErrorStatus_Failed
BRepFill_Modified = _BRepFill.BRepFill_Modified
BRepFill_Right = _BRepFill.BRepFill_Right
BRepFill_Round = _BRepFill.BRepFill_Round
BRepFill_NoContact = _BRepFill.BRepFill_NoContact
BRepFill_Contact = _BRepFill.BRepFill_Contact
BRepFill_ContactOnBorder = _BRepFill.BRepFill_ContactOnBorder


class BRepFill_ThruSectionErrorStatus(IntEnum):
	BRepFill_ThruSectionErrorStatus_Done = 0
	BRepFill_ThruSectionErrorStatus_NotDone = 1
	BRepFill_ThruSectionErrorStatus_NotSameTopology = 2
	BRepFill_ThruSectionErrorStatus_ProfilesInconsistent = 3
	BRepFill_ThruSectionErrorStatus_WrongUsage = 4
	BRepFill_ThruSectionErrorStatus_Null3DCurve = 5
	BRepFill_ThruSectionErrorStatus_Failed = 6
BRepFill_ThruSectionErrorStatus_Done = BRepFill_ThruSectionErrorStatus.BRepFill_ThruSectionErrorStatus_Done
BRepFill_ThruSectionErrorStatus_NotDone = BRepFill_ThruSectionErrorStatus.BRepFill_ThruSectionErrorStatus_NotDone
BRepFill_ThruSectionErrorStatus_NotSameTopology = BRepFill_ThruSectionErrorStatus.BRepFill_ThruSectionErrorStatus_NotSameTopology
BRepFill_ThruSectionErrorStatus_ProfilesInconsistent = BRepFill_ThruSectionErrorStatus.BRepFill_ThruSectionErrorStatus_ProfilesInconsistent
BRepFill_ThruSectionErrorStatus_WrongUsage = BRepFill_ThruSectionErrorStatus.BRepFill_ThruSectionErrorStatus_WrongUsage
BRepFill_ThruSectionErrorStatus_Null3DCurve = BRepFill_ThruSectionErrorStatus.BRepFill_ThruSectionErrorStatus_Null3DCurve
BRepFill_ThruSectionErrorStatus_Failed = BRepFill_ThruSectionErrorStatus.BRepFill_ThruSectionErrorStatus_Failed

class BRepFill_TransitionStyle(IntEnum):
	BRepFill_Modified = 0
	BRepFill_Right = 1
	BRepFill_Round = 2
BRepFill_Modified = BRepFill_TransitionStyle.BRepFill_Modified
BRepFill_Right = BRepFill_TransitionStyle.BRepFill_Right
BRepFill_Round = BRepFill_TransitionStyle.BRepFill_Round

class BRepFill_TypeOfContact(IntEnum):
	BRepFill_NoContact = 0
	BRepFill_Contact = 1
	BRepFill_ContactOnBorder = 2
BRepFill_NoContact = BRepFill_TypeOfContact.BRepFill_NoContact
BRepFill_Contact = BRepFill_TypeOfContact.BRepFill_Contact
BRepFill_ContactOnBorder = BRepFill_TypeOfContact.BRepFill_ContactOnBorder


def Handle_BRepFill_CurveConstraint_Create():
    return _BRepFill.Handle_BRepFill_CurveConstraint_Create()

def Handle_BRepFill_CurveConstraint_DownCast(t):
    return _BRepFill.Handle_BRepFill_CurveConstraint_DownCast(t)

def Handle_BRepFill_CurveConstraint_IsNull(t):
    return _BRepFill.Handle_BRepFill_CurveConstraint_IsNull(t)

def Handle_BRepFill_LocationLaw_Create():
    return _BRepFill.Handle_BRepFill_LocationLaw_Create()

def Handle_BRepFill_LocationLaw_DownCast(t):
    return _BRepFill.Handle_BRepFill_LocationLaw_DownCast(t)

def Handle_BRepFill_LocationLaw_IsNull(t):
    return _BRepFill.Handle_BRepFill_LocationLaw_IsNull(t)

def Handle_BRepFill_PipeShell_Create():
    return _BRepFill.Handle_BRepFill_PipeShell_Create()

def Handle_BRepFill_PipeShell_DownCast(t):
    return _BRepFill.Handle_BRepFill_PipeShell_DownCast(t)

def Handle_BRepFill_PipeShell_IsNull(t):
    return _BRepFill.Handle_BRepFill_PipeShell_IsNull(t)

def Handle_BRepFill_SectionLaw_Create():
    return _BRepFill.Handle_BRepFill_SectionLaw_Create()

def Handle_BRepFill_SectionLaw_DownCast(t):
    return _BRepFill.Handle_BRepFill_SectionLaw_DownCast(t)

def Handle_BRepFill_SectionLaw_IsNull(t):
    return _BRepFill.Handle_BRepFill_SectionLaw_IsNull(t)

def Handle_BRepFill_ACRLaw_Create():
    return _BRepFill.Handle_BRepFill_ACRLaw_Create()

def Handle_BRepFill_ACRLaw_DownCast(t):
    return _BRepFill.Handle_BRepFill_ACRLaw_DownCast(t)

def Handle_BRepFill_ACRLaw_IsNull(t):
    return _BRepFill.Handle_BRepFill_ACRLaw_IsNull(t)

def Handle_BRepFill_Edge3DLaw_Create():
    return _BRepFill.Handle_BRepFill_Edge3DLaw_Create()

def Handle_BRepFill_Edge3DLaw_DownCast(t):
    return _BRepFill.Handle_BRepFill_Edge3DLaw_DownCast(t)

def Handle_BRepFill_Edge3DLaw_IsNull(t):
    return _BRepFill.Handle_BRepFill_Edge3DLaw_IsNull(t)

def Handle_BRepFill_EdgeOnSurfLaw_Create():
    return _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_Create()

def Handle_BRepFill_EdgeOnSurfLaw_DownCast(t):
    return _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_DownCast(t)

def Handle_BRepFill_EdgeOnSurfLaw_IsNull(t):
    return _BRepFill.Handle_BRepFill_EdgeOnSurfLaw_IsNull(t)

def Handle_BRepFill_NSections_Create():
    return _BRepFill.Handle_BRepFill_NSections_Create()

def Handle_BRepFill_NSections_DownCast(t):
    return _BRepFill.Handle_BRepFill_NSections_DownCast(t)

def Handle_BRepFill_NSections_IsNull(t):
    return _BRepFill.Handle_BRepFill_NSections_IsNull(t)

def Handle_BRepFill_ShapeLaw_Create():
    return _BRepFill.Handle_BRepFill_ShapeLaw_Create()

def Handle_BRepFill_ShapeLaw_DownCast(t):
    return _BRepFill.Handle_BRepFill_ShapeLaw_DownCast(t)

def Handle_BRepFill_ShapeLaw_IsNull(t):
    return _BRepFill.Handle_BRepFill_ShapeLaw_IsNull(t)

def Handle_BRepFill_DraftLaw_Create():
    return _BRepFill.Handle_BRepFill_DraftLaw_Create()

def Handle_BRepFill_DraftLaw_DownCast(t):
    return _BRepFill.Handle_BRepFill_DraftLaw_DownCast(t)

def Handle_BRepFill_DraftLaw_IsNull(t):
    return _BRepFill.Handle_BRepFill_DraftLaw_IsNull(t)
class BRepFill_DataMapOfNodeDataMapOfShapeShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_begin(self)

    def end(self):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfNodeDataMapOfShapeShape(*args))

    def Exchange(self, theOther):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Set(self, theOther)

    def ReSize(self, N):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Seek(self, theKey)

    def Find(self, *args):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape___call__(self, *args)

    def Clear(self, *args):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Clear(self, *args)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfNodeDataMapOfShapeShape

    def Size(self):
        return _BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_Size(self)

# Register BRepFill_DataMapOfNodeDataMapOfShapeShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfNodeDataMapOfShapeShape_swigregister(BRepFill_DataMapOfNodeDataMapOfShapeShape)
class BRepFill_DataMapOfNodeShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_DataMapOfNodeShape_begin(self)

    def end(self):
        return _BRepFill.BRepFill_DataMapOfNodeShape_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_DataMapOfNodeShape_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_DataMapOfNodeShape_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfNodeShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfNodeShape(*args))

    def Exchange(self, theOther):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Set(self, theOther)

    def ReSize(self, N):
        return _BRepFill.BRepFill_DataMapOfNodeShape_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeShape_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeShape_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Seek(self, theKey)

    def Find(self, *args):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfNodeShape_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepFill.BRepFill_DataMapOfNodeShape___call__(self, *args)

    def Clear(self, *args):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Clear(self, *args)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfNodeShape

    def Size(self):
        return _BRepFill.BRepFill_DataMapOfNodeShape_Size(self)

# Register BRepFill_DataMapOfNodeShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfNodeShape_swigregister(BRepFill_DataMapOfNodeShape)
class BRepFill_DataMapOfOrientedShapeListOfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_begin(self)

    def end(self):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfOrientedShapeListOfShape(*args))

    def Exchange(self, theOther):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Set(self, theOther)

    def ReSize(self, N):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Seek(self, theKey)

    def Find(self, *args):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape___call__(self, *args)

    def Clear(self, *args):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Clear(self, *args)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfOrientedShapeListOfShape

    def Size(self):
        return _BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_Size(self)

# Register BRepFill_DataMapOfOrientedShapeListOfShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfOrientedShapeListOfShape_swigregister(BRepFill_DataMapOfOrientedShapeListOfShape)
class BRepFill_DataMapOfShapeDataMapOfShapeListOfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_begin(self)

    def end(self):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeDataMapOfShapeListOfShape(*args))

    def Exchange(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Set(self, theOther)

    def ReSize(self, N):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Seek(self, theKey)

    def Find(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape___call__(self, *args)

    def Clear(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Clear(self, *args)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeDataMapOfShapeListOfShape

    def Size(self):
        return _BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_Size(self)

# Register BRepFill_DataMapOfShapeDataMapOfShapeListOfShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfShapeDataMapOfShapeListOfShape_swigregister(BRepFill_DataMapOfShapeDataMapOfShapeListOfShape)
class BRepFill_DataMapOfShapeHArray2OfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_begin(self)

    def end(self):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeHArray2OfShape(*args))

    def Exchange(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Set(self, theOther)

    def ReSize(self, N):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Seek(self, theKey)

    def Find(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape___call__(self, *args)

    def Clear(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Clear(self, *args)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeHArray2OfShape

    def Size(self):
        return _BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_Size(self)

# Register BRepFill_DataMapOfShapeHArray2OfShape in _BRepFill:
_BRepFill.BRepFill_DataMapOfShapeHArray2OfShape_swigregister(BRepFill_DataMapOfShapeHArray2OfShape)
class BRepFill_DataMapOfShapeSequenceOfPnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_begin(self)

    def end(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeSequenceOfPnt(*args))

    def Exchange(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Set(self, theOther)

    def ReSize(self, N):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Seek(self, theKey)

    def Find(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt___call__(self, *args)

    def Clear(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Clear(self, *args)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeSequenceOfPnt

    def Size(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_Size(self)

# Register BRepFill_DataMapOfShapeSequenceOfPnt in _BRepFill:
_BRepFill.BRepFill_DataMapOfShapeSequenceOfPnt_swigregister(BRepFill_DataMapOfShapeSequenceOfPnt)
class BRepFill_DataMapOfShapeSequenceOfReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_begin(self)

    def end(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_swiginit(self, _BRepFill.new_BRepFill_DataMapOfShapeSequenceOfReal(*args))

    def Exchange(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Set(self, theOther)

    def ReSize(self, N):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Seek(self, theKey)

    def Find(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal___call__(self, *args)

    def Clear(self, *args):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Clear(self, *args)
    __swig_destroy__ = _BRepFill.delete_BRepFill_DataMapOfShapeSequenceOfReal

    def Size(self):
        return _BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_Size(self)

# Register BRepFill_DataMapOfShapeSequenceOfReal in _BRepFill:
_BRepFill.BRepFill_DataMapOfShapeSequenceOfReal_swigregister(BRepFill_DataMapOfShapeSequenceOfReal)
class BRepFill_IndexedDataMapOfOrientedShapeListOfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_begin(self)

    def end(self):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swiginit(self, _BRepFill.new_BRepFill_IndexedDataMapOfOrientedShapeListOfShape(*args))

    def Exchange(self, theOther):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Set(self, theOther)

    def ReSize(self, N):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ReSize(self, N)

    def Add(self, theKey1, theItem):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Add(self, theKey1, theItem)

    def Contains(self, theKey1):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Contains(self, theKey1)

    def Substitute(self, theIndex, theKey1, theItem):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1, theIndex2):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveLast(self)

    def RemoveFromIndex(self, theIndex):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_RemoveKey(self, theKey1)

    def FindKey(self, theIndex):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromIndex(self, theIndex)

    def __call__(self, *args):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape___call__(self, *args)

    def FindIndex(self, theKey1):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Seek(self, theKey1)

    def ChangeSeek(self, theKey1):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_FindFromKey(self, *args)

    def Clear(self, *args):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Clear(self, *args)
    __swig_destroy__ = _BRepFill.delete_BRepFill_IndexedDataMapOfOrientedShapeListOfShape

    def Size(self):
        return _BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_Size(self)

# Register BRepFill_IndexedDataMapOfOrientedShapeListOfShape in _BRepFill:
_BRepFill.BRepFill_IndexedDataMapOfOrientedShapeListOfShape_swigregister(BRepFill_IndexedDataMapOfOrientedShapeListOfShape)
class BRepFill_ListIteratorOfListOfOffsetWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListIteratorOfListOfOffsetWire(*args))

    def More(self):
        return _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_More(self)

    def Next(self):
        return _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Next(self)

    def Value(self):
        return _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_Value(self)

    def ChangeValue(self):
        return _BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_ChangeValue(self)
    __swig_destroy__ = _BRepFill.delete_BRepFill_ListIteratorOfListOfOffsetWire

# Register BRepFill_ListIteratorOfListOfOffsetWire in _BRepFill:
_BRepFill.BRepFill_ListIteratorOfListOfOffsetWire_swigregister(BRepFill_ListIteratorOfListOfOffsetWire)
class BRepFill_ListOfOffsetWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_begin(self)

    def end(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_ListOfOffsetWire_swiginit(self, _BRepFill.new_BRepFill_ListOfOffsetWire(*args))

    def Size(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_Size(self)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_ListOfOffsetWire_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_ListOfOffsetWire_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _BRepFill.BRepFill_ListOfOffsetWire_Clear(self, theAllocator)

    def First(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_First(self)

    def Last(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_Last(self)

    def Append(self, *args):
        return _BRepFill.BRepFill_ListOfOffsetWire_Append(self, *args)

    def Prepend(self, *args):
        return _BRepFill.BRepFill_ListOfOffsetWire_Prepend(self, *args)

    def RemoveFirst(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_RemoveFirst(self)

    def Remove(self, theIter):
        return _BRepFill.BRepFill_ListOfOffsetWire_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _BRepFill.BRepFill_ListOfOffsetWire_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _BRepFill.BRepFill_ListOfOffsetWire_InsertAfter(self, *args)

    def Reverse(self):
        return _BRepFill.BRepFill_ListOfOffsetWire_Reverse(self)
    __swig_destroy__ = _BRepFill.delete_BRepFill_ListOfOffsetWire

    def __len__(self):
        return self.Size()


# Register BRepFill_ListOfOffsetWire in _BRepFill:
_BRepFill.BRepFill_ListOfOffsetWire_swigregister(BRepFill_ListOfOffsetWire)
class BRepFill_SequenceOfEdgeFaceAndOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_begin(self)

    def end(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceOfEdgeFaceAndOrder(*args))

    def Size(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Size(self)

    def Length(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Length(self)

    def Lower(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Lower(self)

    def Upper(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Upper(self)

    def IsEmpty(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_IsEmpty(self)

    def Reverse(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Reverse(self)

    def Exchange(self, I, J):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Set(self, theOther)

    def Remove(self, *args):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Remove(self, *args)

    def Append(self, *args):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Append(self, *args)

    def Prepend(self, *args):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Split(self, theIndex, theSeq)

    def First(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_First(self)

    def ChangeFirst(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeFirst(self)

    def Last(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Last(self)

    def ChangeLast(self):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeLast(self)

    def Value(self, theIndex):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfEdgeFaceAndOrder

    def __len__(self):
        return self.Size()


# Register BRepFill_SequenceOfEdgeFaceAndOrder in _BRepFill:
_BRepFill.BRepFill_SequenceOfEdgeFaceAndOrder_swigregister(BRepFill_SequenceOfEdgeFaceAndOrder)
class BRepFill_SequenceOfFaceAndOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_begin(self)

    def end(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_SequenceOfFaceAndOrder(*args))

    def Size(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Size(self)

    def Length(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Length(self)

    def Lower(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Lower(self)

    def Upper(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Upper(self)

    def IsEmpty(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_IsEmpty(self)

    def Reverse(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Reverse(self)

    def Exchange(self, I, J):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Set(self, theOther)

    def Remove(self, *args):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Remove(self, *args)

    def Append(self, *args):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Append(self, *args)

    def Prepend(self, *args):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Split(self, theIndex, theSeq)

    def First(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_First(self)

    def ChangeFirst(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeFirst(self)

    def Last(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Last(self)

    def ChangeLast(self):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeLast(self)

    def Value(self, theIndex):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _BRepFill.BRepFill_SequenceOfFaceAndOrder_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfFaceAndOrder

    def __len__(self):
        return self.Size()


# Register BRepFill_SequenceOfFaceAndOrder in _BRepFill:
_BRepFill.BRepFill_SequenceOfFaceAndOrder_swigregister(BRepFill_SequenceOfFaceAndOrder)
class BRepFill_SequenceOfSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepFill.BRepFill_SequenceOfSection_begin(self)

    def end(self):
        return _BRepFill.BRepFill_SequenceOfSection_end(self)

    def cbegin(self):
        return _BRepFill.BRepFill_SequenceOfSection_cbegin(self)

    def cend(self):
        return _BRepFill.BRepFill_SequenceOfSection_cend(self)

    def __init__(self, *args):
        _BRepFill.BRepFill_SequenceOfSection_swiginit(self, _BRepFill.new_BRepFill_SequenceOfSection(*args))

    def Size(self):
        return _BRepFill.BRepFill_SequenceOfSection_Size(self)

    def Length(self):
        return _BRepFill.BRepFill_SequenceOfSection_Length(self)

    def Lower(self):
        return _BRepFill.BRepFill_SequenceOfSection_Lower(self)

    def Upper(self):
        return _BRepFill.BRepFill_SequenceOfSection_Upper(self)

    def IsEmpty(self):
        return _BRepFill.BRepFill_SequenceOfSection_IsEmpty(self)

    def Reverse(self):
        return _BRepFill.BRepFill_SequenceOfSection_Reverse(self)

    def Exchange(self, I, J):
        return _BRepFill.BRepFill_SequenceOfSection_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _BRepFill.BRepFill_SequenceOfSection_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _BRepFill.BRepFill_SequenceOfSection_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _BRepFill.BRepFill_SequenceOfSection_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepFill.BRepFill_SequenceOfSection_Set(self, theOther)

    def Remove(self, *args):
        return _BRepFill.BRepFill_SequenceOfSection_Remove(self, *args)

    def Append(self, *args):
        return _BRepFill.BRepFill_SequenceOfSection_Append(self, *args)

    def Prepend(self, *args):
        return _BRepFill.BRepFill_SequenceOfSection_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _BRepFill.BRepFill_SequenceOfSection_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _BRepFill.BRepFill_SequenceOfSection_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _BRepFill.BRepFill_SequenceOfSection_Split(self, theIndex, theSeq)

    def First(self):
        return _BRepFill.BRepFill_SequenceOfSection_First(self)

    def ChangeFirst(self):
        return _BRepFill.BRepFill_SequenceOfSection_ChangeFirst(self)

    def Last(self):
        return _BRepFill.BRepFill_SequenceOfSection_Last(self)

    def ChangeLast(self):
        return _BRepFill.BRepFill_SequenceOfSection_ChangeLast(self)

    def Value(self, theIndex):
        return _BRepFill.BRepFill_SequenceOfSection_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _BRepFill.BRepFill_SequenceOfSection_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _BRepFill.BRepFill_SequenceOfSection___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _BRepFill.BRepFill_SequenceOfSection_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _BRepFill.delete_BRepFill_SequenceOfSection

    def __len__(self):
        return self.Size()


# Register BRepFill_SequenceOfSection in _BRepFill:
_BRepFill.BRepFill_SequenceOfSection_swigregister(BRepFill_SequenceOfSection)
class brepfill(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Axe(*args):
        r"""

        Parameters
        ----------
        Spine: TopoDS_Shape
        Profile: TopoDS_Wire
        AxeProf: gp_Ax3
        Tol: float

        Return
        -------
        ProfOnSpine: bool

        Description
        -----------
        Computes <axeprof> as follow. <location> is the position of the nearest vertex v of <profile> to <spine>.<xdirection> is confused with the tangent to <spine> at the projected point of v on the spine. <direction> is normal to <spine>. <spine> is a plane wire or a plane face.

        """
        return _BRepFill.brepfill_Axe(*args)

    @staticmethod
    def ComputeACR(*args):
        r"""

        Parameters
        ----------
        wire: TopoDS_Wire
        ACR: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Compute acr on a wire.

        """
        return _BRepFill.brepfill_ComputeACR(*args)

    @staticmethod
    def Face(*args):
        r"""

        Parameters
        ----------
        Edge1: TopoDS_Edge
        Edge2: TopoDS_Edge

        Return
        -------
        TopoDS_Face

        Description
        -----------
        Computes a ruled surface between two edges.

        """
        return _BRepFill.brepfill_Face(*args)

    @staticmethod
    def InsertACR(*args):
        r"""

        Parameters
        ----------
        wire: TopoDS_Wire
        ACRcuts: TColStd_Array1OfReal
        prec: float

        Return
        -------
        TopoDS_Wire

        Description
        -----------
        Insert acr on a wire.

        """
        return _BRepFill.brepfill_InsertACR(*args)

    @staticmethod
    def Shell(*args):
        r"""

        Parameters
        ----------
        Wire1: TopoDS_Wire
        Wire2: TopoDS_Wire

        Return
        -------
        TopoDS_Shell

        Description
        -----------
        Computes a ruled surface between two wires. the wires must have the same number of edges.

        """
        return _BRepFill.brepfill_Shell(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepFill.brepfill_swiginit(self, _BRepFill.new_brepfill())
    __swig_destroy__ = _BRepFill.delete_brepfill

# Register brepfill in _BRepFill:
_BRepFill.brepfill_swigregister(brepfill)
class BRepFill_AdvancedEvolved(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _BRepFill.BRepFill_AdvancedEvolved_swiginit(self, _BRepFill.new_BRepFill_AdvancedEvolved(*args))

    def IsDone(self, *args):
        r"""

        Parameters
        ----------
        theErrorCode: unsigned int * (optional, default to 0)

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_AdvancedEvolved_IsDone(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        theSpine: TopoDS_Wire
        theProfile: TopoDS_Wire
        theTolerance: float
        theSolidReq: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_AdvancedEvolved_Perform(self, *args)

    def SetParallelMode(self, *args):
        r"""

        Parameters
        ----------
        theVal: bool

        Return
        -------
        None

        Description
        -----------
        Sets/unsets computation in parallel mode.

        """
        return _BRepFill.BRepFill_AdvancedEvolved_SetParallelMode(self, *args)

    def SetTemporaryDirectory(self, *args):
        r"""

        Parameters
        ----------
        thePath: str

        Return
        -------
        None

        Description
        -----------
        Sets directory where the debug shapes will be saved.

        """
        return _BRepFill.BRepFill_AdvancedEvolved_SetTemporaryDirectory(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the resulting shape.

        """
        return _BRepFill.BRepFill_AdvancedEvolved_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_AdvancedEvolved

# Register BRepFill_AdvancedEvolved in _BRepFill:
_BRepFill.BRepFill_AdvancedEvolved_swigregister(BRepFill_AdvancedEvolved)
class BRepFill_ApproxSeewing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        ML: BRepFill_MultiLine

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_ApproxSeewing_swiginit(self, _BRepFill.new_BRepFill_ApproxSeewing(*args))

    def Curve(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        Returns the approximation of the 3d curve.

        """
        return _BRepFill.BRepFill_ApproxSeewing_Curve(self, *args)

    def CurveOnF1(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Returns the approximation of the pcurve on the first face of the multiline.

        """
        return _BRepFill.BRepFill_ApproxSeewing_CurveOnF1(self, *args)

    def CurveOnF2(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Returns the approximation of the pcurve on the first face of the multiline.

        """
        return _BRepFill.BRepFill_ApproxSeewing_CurveOnF2(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_ApproxSeewing_IsDone(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        ML: BRepFill_MultiLine

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_ApproxSeewing_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ApproxSeewing

# Register BRepFill_ApproxSeewing in _BRepFill:
_BRepFill.BRepFill_ApproxSeewing_swigregister(BRepFill_ApproxSeewing)
class BRepFill_CompatibleWires(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Sections: TopTools_SequenceOfShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_CompatibleWires_swiginit(self, _BRepFill.new_BRepFill_CompatibleWires(*args))

    def Generated(self, *args):
        r"""
        Return
        -------
        TopTools_DataMapOfShapeListOfShape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_CompatibleWires_Generated(self, *args)

    def GeneratedShapes(self, *args):
        r"""

        Parameters
        ----------
        SubSection: TopoDS_Edge

        Return
        -------
        TopTools_ListOfShape

        Description
        -----------
        Returns the shapes created from a subshape <subsection> of a section.

        """
        return _BRepFill.BRepFill_CompatibleWires_GeneratedShapes(self, *args)

    def GetStatus(self, *args):
        r"""
        Return
        -------
        BRepFill_ThruSectionErrorStatus

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_CompatibleWires_GetStatus(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        Sections: TopTools_SequenceOfShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_CompatibleWires_Init(self, *args)

    def IsDegeneratedFirstSection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_CompatibleWires_IsDegeneratedFirstSection(self, *args)

    def IsDegeneratedLastSection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_CompatibleWires_IsDegeneratedLastSection(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_CompatibleWires_IsDone(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        WithRotation: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Performs compatiblewires according to the orientation and the origin of each other.

        """
        return _BRepFill.BRepFill_CompatibleWires_Perform(self, *args)

    def SetPercent(self, *args):
        r"""

        Parameters
        ----------
        percent: float (optional, default to 0.01)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_CompatibleWires_SetPercent(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopTools_SequenceOfShape

        Description
        -----------
        Returns the generated sequence.

        """
        return _BRepFill.BRepFill_CompatibleWires_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_CompatibleWires

# Register BRepFill_CompatibleWires in _BRepFill:
_BRepFill.BRepFill_CompatibleWires_swigregister(BRepFill_CompatibleWires)
class BRepFill_ComputeCLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Line: BRepFill_MultiLine
        degreemin: int (optional, default to 3)
        degreemax: int (optional, default to 8)
        Tolerance3d: float (optional, default to 1.0e-5)
        Tolerance2d: float (optional, default to 1.0e-5)
        cutting: bool (optional, default to Standard_False)
        FirstC: AppParCurves_Constraint (optional, default to AppParCurves_TangencyPoint)
        LastC: AppParCurves_Constraint (optional, default to AppParCurves_TangencyPoint)

        Return
        -------
        None

        Description
        -----------
        The multiline <line> will be approximated until tolerances will be reached. the approximation will be done from degreemin to degreemax with a cutting if the corresponding boolean is true.

        Parameters
        ----------
        degreemin: int (optional, default to 3)
        degreemax: int (optional, default to 8)
        Tolerance3d: float (optional, default to 1.0e-05)
        Tolerance2d: float (optional, default to 1.0e-05)
        cutting: bool (optional, default to Standard_False)
        FirstC: AppParCurves_Constraint (optional, default to AppParCurves_TangencyPoint)
        LastC: AppParCurves_Constraint (optional, default to AppParCurves_TangencyPoint)

        Return
        -------
        None

        Description
        -----------
        Initializes the fields of the algorithm.

        """
        _BRepFill.BRepFill_ComputeCLine_swiginit(self, _BRepFill.new_BRepFill_ComputeCLine(*args))

    def Error(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        tol3d: float
        tol2d: float

        Description
        -----------
        Returns the tolerances 2d and 3d of the <index> multicurve.

        """
        return _BRepFill.BRepFill_ComputeCLine_Error(self, *args)

    def IsAllApproximated(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns false if at a moment of the approximation, the status noapproximation has been sent by the user when more points were needed.

        """
        return _BRepFill.BRepFill_ComputeCLine_IsAllApproximated(self, *args)

    def IsToleranceReached(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns false if the status nopointsadded has been sent.

        """
        return _BRepFill.BRepFill_ComputeCLine_IsToleranceReached(self, *args)

    def NbMultiCurves(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of multicurve doing the approximation of the multiline.

        """
        return _BRepFill.BRepFill_ComputeCLine_NbMultiCurves(self, *args)

    def Parameters(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        firstp: float
        lastp: float

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_ComputeCLine_Parameters(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Line: BRepFill_MultiLine

        Return
        -------
        None

        Description
        -----------
        Runs the algorithm after having initialized the fields.

        """
        return _BRepFill.BRepFill_ComputeCLine_Perform(self, *args)

    def SetConstraints(self, *args):
        r"""

        Parameters
        ----------
        FirstC: AppParCurves_Constraint
        LastC: AppParCurves_Constraint

        Return
        -------
        None

        Description
        -----------
        Changes the constraints of the approximation.

        """
        return _BRepFill.BRepFill_ComputeCLine_SetConstraints(self, *args)

    def SetDegrees(self, *args):
        r"""

        Parameters
        ----------
        degreemin: int
        degreemax: int

        Return
        -------
        None

        Description
        -----------
        Changes the degrees of the approximation.

        """
        return _BRepFill.BRepFill_ComputeCLine_SetDegrees(self, *args)

    def SetHangChecking(self, *args):
        r"""

        Parameters
        ----------
        theHangChecking: bool

        Return
        -------
        None

        Description
        -----------
        Set value of hang checking flag if this flag = true, possible hang of algorithm is checked and algorithm is forced to stop. by default hang checking is used.

        """
        return _BRepFill.BRepFill_ComputeCLine_SetHangChecking(self, *args)

    def SetInvOrder(self, *args):
        r"""

        Parameters
        ----------
        theInvOrder: bool

        Return
        -------
        None

        Description
        -----------
        Set inverse order of degree selection: if theinvordr = true, current degree is chosen by inverse order - from maxdegree to mindegree. by default inverse order is used.

        """
        return _BRepFill.BRepFill_ComputeCLine_SetInvOrder(self, *args)

    def SetMaxSegments(self, *args):
        r"""

        Parameters
        ----------
        theMaxSegments: int

        Return
        -------
        None

        Description
        -----------
        Changes the max number of segments, which is allowed for cutting.

        """
        return _BRepFill.BRepFill_ComputeCLine_SetMaxSegments(self, *args)

    def SetTolerances(self, *args):
        r"""

        Parameters
        ----------
        Tolerance3d: float
        Tolerance2d: float

        Return
        -------
        None

        Description
        -----------
        Changes the tolerances of the approximation.

        """
        return _BRepFill.BRepFill_ComputeCLine_SetTolerances(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        Index: int (optional, default to 1)

        Return
        -------
        AppParCurves_MultiCurve

        Description
        -----------
        Returns the approximation multicurve of range <index>.

        """
        return _BRepFill.BRepFill_ComputeCLine_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ComputeCLine

# Register BRepFill_ComputeCLine in _BRepFill:
_BRepFill.BRepFill_ComputeCLine_swigregister(BRepFill_ComputeCLine)
class BRepFill_CurveConstraint(OCC.Core.GeomPlate.GeomPlate_CurveConstraint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Boundary: Adaptor3d_CurveOnSurface
        Order: int
        NPt: int (optional, default to 10)
        TolDist: float (optional, default to 0.0001)
        TolAng: float (optional, default to 0.01)
        TolCurv: float (optional, default to 0.1)

        Return
        -------
        None

        Description
        -----------
        Create a constraint order is the order of the constraint. the possible values for order are -1,0,1,2. order i means constraints gi npt is the number of points associated with the constraint. toldist is the maximum error to satisfy for g0 constraints tolang is the maximum error to satisfy for g1 constraints tolcurv is the maximum error to satisfy for g2 constraints these errors can be replaced by laws of criterion.

        Parameters
        ----------
        Boundary: Adaptor3d_Curve
        Tang: int
        NPt: int (optional, default to 10)
        TolDist: float (optional, default to 0.0001)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_CurveConstraint_swiginit(self, _BRepFill.new_BRepFill_CurveConstraint(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_CurveConstraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_CurveConstraint

# Register BRepFill_CurveConstraint in _BRepFill:
_BRepFill.BRepFill_CurveConstraint_swigregister(BRepFill_CurveConstraint)
class BRepFill_Draft(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Shape: TopoDS_Shape
        Dir: gp_Dir
        Angle: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_Draft_swiginit(self, _BRepFill.new_BRepFill_Draft(*args))

    def Generated(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopTools_ListOfShape

        Description
        -----------
        Returns the list of shapes generated from the shape <s>.

        """
        return _BRepFill.BRepFill_Draft_Generated(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Draft_IsDone(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        LengthMax: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Surface: Geom_Surface
        KeepInsideSurface: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        StopShape: TopoDS_Shape
        KeepOutSide: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Draft_Perform(self, *args)

    def SetDraft(self, *args):
        r"""

        Parameters
        ----------
        IsInternal: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Draft_SetDraft(self, *args)

    def SetOptions(self, *args):
        r"""

        Parameters
        ----------
        Style: BRepFill_TransitionStyle (optional, default to BRepFill_Right)
        AngleMin: float (optional, default to 0.01)
        AngleMax: float (optional, default to 3.0)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Draft_SetOptions(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Draft_Shape(self, *args)

    def Shell(self, *args):
        r"""
        Return
        -------
        TopoDS_Shell

        Description
        -----------
        Returns the draft surface to have the complete shape you have to use the shape() methode.

        """
        return _BRepFill.BRepFill_Draft_Shell(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Draft

# Register BRepFill_Draft in _BRepFill:
_BRepFill.BRepFill_Draft_swigregister(BRepFill_Draft)
class BRepFill_EdgeFaceAndOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        anEdge: TopoDS_Edge
        aFace: TopoDS_Face
        anOrder: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_EdgeFaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_EdgeFaceAndOrder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_EdgeFaceAndOrder

# Register BRepFill_EdgeFaceAndOrder in _BRepFill:
_BRepFill.BRepFill_EdgeFaceAndOrder_swigregister(BRepFill_EdgeFaceAndOrder)
class BRepFill_Evolved(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Spine: TopoDS_Wire
        Profile: TopoDS_Wire
        AxeProf: gp_Ax3
        Join: GeomAbs_JoinType (optional, default to GeomAbs_Arc)
        Solid: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Creates an evolved shape by sweeping the <profile> along the <spine>. <axeprof> is used to set the position of <profile> along <spine> as follows: <axeprof> slides on the profile with direction colinear to the normal to <spine>, and its <xdirection> mixed with the tangent to <spine>.

        Parameters
        ----------
        Spine: TopoDS_Face
        Profile: TopoDS_Wire
        AxeProf: gp_Ax3
        Join: GeomAbs_JoinType (optional, default to GeomAbs_Arc)
        Solid: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Creates an evolved shape by sweeping the <profile> along the <spine>.

        """
        _BRepFill.BRepFill_Evolved_swiginit(self, _BRepFill.new_BRepFill_Evolved(*args))

    def Bottom(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Return the face bottom if <solid> is true in the constructor.

        """
        return _BRepFill.BRepFill_Evolved_Bottom(self, *args)

    def GeneratedShapes(self, *args):
        r"""

        Parameters
        ----------
        SpineShape: TopoDS_Shape
        ProfShape: TopoDS_Shape

        Return
        -------
        TopTools_ListOfShape

        Description
        -----------
        Returns the shapes created from a subshape <spineshape> of the spine and a subshape <profshape> on the profile.

        """
        return _BRepFill.BRepFill_Evolved_GeneratedShapes(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Evolved_IsDone(self, *args)

    def JoinType(self, *args):
        r"""
        Return
        -------
        GeomAbs_JoinType

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Evolved_JoinType(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Spine: TopoDS_Wire
        Profile: TopoDS_Wire
        AxeProf: gp_Ax3
        Join: GeomAbs_JoinType (optional, default to GeomAbs_Arc)
        Solid: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Performs an evolved shape by sweeping the <profile> along the <spine>.

        Parameters
        ----------
        Spine: TopoDS_Face
        Profile: TopoDS_Wire
        AxeProf: gp_Ax3
        Join: GeomAbs_JoinType (optional, default to GeomAbs_Arc)
        Solid: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Performs an evolved shape by sweeping the <profile> along the <spine>.

        """
        return _BRepFill.BRepFill_Evolved_Perform(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the generated shape.

        """
        return _BRepFill.BRepFill_Evolved_Shape(self, *args)

    def Top(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Return the face top if <solid> is true in the constructor.

        """
        return _BRepFill.BRepFill_Evolved_Top(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Evolved

# Register BRepFill_Evolved in _BRepFill:
_BRepFill.BRepFill_Evolved_swigregister(BRepFill_Evolved)
class BRepFill_FaceAndOrder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        aFace: TopoDS_Face
        anOrder: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_FaceAndOrder_swiginit(self, _BRepFill.new_BRepFill_FaceAndOrder(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_FaceAndOrder

# Register BRepFill_FaceAndOrder in _BRepFill:
_BRepFill.BRepFill_FaceAndOrder_swigregister(BRepFill_FaceAndOrder)
class BRepFill_Filling(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Degree: int (optional, default to 3)
        NbPtsOnCur: int (optional, default to 15)
        NbIter: int (optional, default to 2)
        Anisotropie: bool (optional, default to Standard_False)
        Tol2d: float (optional, default to 0.00001)
        Tol3d: float (optional, default to 0.0001)
        TolAng: float (optional, default to 0.01)
        TolCurv: float (optional, default to 0.1)
        MaxDeg: int (optional, default to 8)
        MaxSegments: int (optional, default to 9)

        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _BRepFill.BRepFill_Filling_swiginit(self, _BRepFill.new_BRepFill_Filling(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        anEdge: TopoDS_Edge
        Order: GeomAbs_Shape
        IsBound: bool (optional, default to Standard_True)

        Return
        -------
        int

        Description
        -----------
        Adds a new constraint which also defines an edge of the wire of the face order: order of the constraint: geomabs_c0: the surface has to pass by 3d representation of the edge geomabs_g1: the surface has to pass by 3d representation of the edge and to respect tangency with the first face of the edge geomabs_g2: the surface has to pass by 3d representation of the edge and to respect tangency and curvature with the first face of the edge.

        Parameters
        ----------
        anEdge: TopoDS_Edge
        Support: TopoDS_Face
        Order: GeomAbs_Shape
        IsBound: bool (optional, default to Standard_True)

        Return
        -------
        int

        Description
        -----------
        Adds a new constraint which also defines an edge of the wire of the face order: order of the constraint: geomabs_c0: the surface has to pass by 3d representation of the edge geomabs_g1: the surface has to pass by 3d representation of the edge and to respect tangency with the given face geomabs_g2: the surface has to pass by 3d representation of the edge and to respect tangency and curvature with the given face.

        Parameters
        ----------
        Support: TopoDS_Face
        Order: GeomAbs_Shape

        Return
        -------
        int

        Description
        -----------
        Adds a free constraint on a face. the corresponding edge has to be automatically recomputed. it is always a bound.

        Parameters
        ----------
        Point: gp_Pnt

        Return
        -------
        int

        Description
        -----------
        Adds a punctual constraint.

        Parameters
        ----------
        U: float
        V: float
        Support: TopoDS_Face
        Order: GeomAbs_Shape

        Return
        -------
        int

        Description
        -----------
        Adds a punctual constraint.

        """
        return _BRepFill.BRepFill_Filling_Add(self, *args)

    def Build(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Builds the resulting faces.

        """
        return _BRepFill.BRepFill_Filling_Build(self, *args)

    def Face(self, *args):
        r"""
        Return
        -------
        TopoDS_Face

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Filling_Face(self, *args)

    def G0Error(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Index: int

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Filling_G0Error(self, *args)

    def G1Error(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Index: int

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Filling_G1Error(self, *args)

    def G2Error(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Index: int

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Filling_G2Error(self, *args)

    def Generated(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopTools_ListOfShape

        Description
        -----------
        Returns the list of shapes generated from the shape <s>.

        """
        return _BRepFill.BRepFill_Filling_Generated(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Filling_IsDone(self, *args)

    def LoadInitSurface(self, *args):
        r"""

        Parameters
        ----------
        aFace: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        Loads the initial surface the initial surface must have orthogonal local coordinates, i.e. partial derivatives ds/du and ds/dv must be orthogonal at each point of surface. if this condition breaks, distortions of resulting surface are possible.

        """
        return _BRepFill.BRepFill_Filling_LoadInitSurface(self, *args)

    def SetApproxParam(self, *args):
        r"""

        Parameters
        ----------
        MaxDeg: int (optional, default to 8)
        MaxSegments: int (optional, default to 9)

        Return
        -------
        None

        Description
        -----------
        Sets the parameters used for approximation of the surface.

        """
        return _BRepFill.BRepFill_Filling_SetApproxParam(self, *args)

    def SetConstrParam(self, *args):
        r"""

        Parameters
        ----------
        Tol2d: float (optional, default to 0.00001)
        Tol3d: float (optional, default to 0.0001)
        TolAng: float (optional, default to 0.01)
        TolCurv: float (optional, default to 0.1)

        Return
        -------
        None

        Description
        -----------
        Sets the values of tolerances used to control the constraint. tol2d: tol3d: it is the maximum distance allowed between the support surface and the constraints tolang: it is the maximum angle allowed between the normal of the surface and the constraints tolcurv: it is the maximum difference of curvature allowed between the surface and the constraint.

        """
        return _BRepFill.BRepFill_Filling_SetConstrParam(self, *args)

    def SetResolParam(self, *args):
        r"""

        Parameters
        ----------
        Degree: int (optional, default to 3)
        NbPtsOnCur: int (optional, default to 15)
        NbIter: int (optional, default to 2)
        Anisotropie: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Sets the parameters used for resolution. the default values of these parameters have been chosen for a good ratio quality/performance. degree: it is the order of energy criterion to minimize for computing the deformation of the surface. the default value is 3 the recommended value is i+2 where i is the maximum order of the constraints. nbptsoncur: it is the average number of points for discretisation of the edges. nbiter: it is the maximum number of iterations of the process. for each iteration the number of discretisation points is increased. anisotropie:.

        """
        return _BRepFill.BRepFill_Filling_SetResolParam(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Filling

# Register BRepFill_Filling in _BRepFill:
_BRepFill.BRepFill_Filling_swigregister(BRepFill_Filling)
class BRepFill_Generator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_Generator_swiginit(self, _BRepFill.new_BRepFill_Generator(*args))

    def AddWire(self, *args):
        r"""

        Parameters
        ----------
        Wire: TopoDS_Wire

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Generator_AddWire(self, *args)

    def Generated(self, *args):
        r"""
        Return
        -------
        TopTools_DataMapOfShapeListOfShape

        Description
        -----------
        Returns all the shapes created.

        """
        return _BRepFill.BRepFill_Generator_Generated(self, *args)

    def GeneratedShapes(self, *args):
        r"""

        Parameters
        ----------
        SSection: TopoDS_Shape

        Return
        -------
        TopTools_ListOfShape

        Description
        -----------
        Returns the shapes created from a subshape <ssection> of a section.

        """
        return _BRepFill.BRepFill_Generator_GeneratedShapes(self, *args)

    def GetStatus(self, *args):
        r"""
        Return
        -------
        BRepFill_ThruSectionErrorStatus

        Description
        -----------
        Returns status of the operation.

        """
        return _BRepFill.BRepFill_Generator_GetStatus(self, *args)

    def IsMutableInput(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the current mutable input state.

        """
        return _BRepFill.BRepFill_Generator_IsMutableInput(self, *args)

    def Perform(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Compute the shell.

        """
        return _BRepFill.BRepFill_Generator_Perform(self, *args)

    def ResultShape(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns a modified shape in the constructed shell, if shape is not changed (replaced) during operation => returns the same shape.

        """
        return _BRepFill.BRepFill_Generator_ResultShape(self, *args)

    def SetMutableInput(self, *args):
        r"""

        Parameters
        ----------
        theIsMutableInput: bool

        Return
        -------
        None

        Description
        -----------
        Sets the mutable input state if true then the input profile can be modified inside the operation. default value is true.

        """
        return _BRepFill.BRepFill_Generator_SetMutableInput(self, *args)

    def Shell(self, *args):
        r"""
        Return
        -------
        TopoDS_Shell

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Generator_Shell(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Generator

# Register BRepFill_Generator in _BRepFill:
_BRepFill.BRepFill_Generator_swigregister(BRepFill_Generator)
class BRepFill_LocationLaw(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Abscissa(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        Param: float

        Return
        -------
        float

        Description
        -----------
        Return the curvilinear abscissa corresponding to a point of the path, defined by <index> of edge and a parameter on the edge.

        """
        return _BRepFill.BRepFill_LocationLaw_Abscissa(self, *args)

    def CurvilinearBounds(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        First: float
        Last: float

        Description
        -----------
        Return the curvilinear bounds of the <index> law.

        """
        return _BRepFill.BRepFill_LocationLaw_CurvilinearBounds(self, *args)

    def D0(self, *args):
        r"""

        Parameters
        ----------
        Abscissa: float
        Section: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Apply the law to a shape, for a given curvilinear abscissa.

        """
        return _BRepFill.BRepFill_LocationLaw_D0(self, *args)

    def DeleteTransform(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_LocationLaw_DeleteTransform(self, *args)

    def Edge(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Edge

        Description
        -----------
        Return the edge of rank <index> in the path <index> have to be in [1, nblaw()].

        """
        return _BRepFill.BRepFill_LocationLaw_Edge(self, *args)

    def GetStatus(self, *args):
        r"""
        Return
        -------
        GeomFill_PipeError

        Description
        -----------
        Return a error status, if the status is not pipeok then it exist a parameter tlike the law is not valuable for t.

        """
        return _BRepFill.BRepFill_LocationLaw_GetStatus(self, *args)

    def Holes(self, *args):
        r"""

        Parameters
        ----------
        Interval: TColStd_Array1OfInteger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_LocationLaw_Holes(self, *args)

    def IsClosed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_LocationLaw_IsClosed(self, *args)

    def IsG1(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        SpatialTolerance: float (optional, default to 1.0e-7)
        AngularTolerance: float (optional, default to 1.0e-4)

        Return
        -------
        int

        Description
        -----------
        Compute the law's continuity between 2 edges of the path the result can be: -1: case not connex 0: it is connex (g0) 1: it is tangent (g1).

        """
        return _BRepFill.BRepFill_LocationLaw_IsG1(self, *args)

    def law(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        opencascade::handle<GeomFill_LocationLaw>

        Description
        -----------
        Return the elementary law of rank <index> <index> have to be in [1, nblaw()].

        """
        return _BRepFill.BRepFill_LocationLaw_law(self, *args)

    def NbHoles(self, *args):
        r"""

        Parameters
        ----------
        Tol: float (optional, default to 1.0e-7)

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_LocationLaw_NbHoles(self, *args)

    def NbLaw(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Return the number of elementary law.

        """
        return _BRepFill.BRepFill_LocationLaw_NbLaw(self, *args)

    def Parameter(self, *args):
        r"""

        Parameters
        ----------
        Abscissa: float

        Return
        -------
        Index: int
        Param: float

        Description
        -----------
        Find the index law and the parameter, for a given curvilinear abscissa.

        """
        return _BRepFill.BRepFill_LocationLaw_Parameter(self, *args)

    def PerformVertex(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        InputVertex: TopoDS_Vertex
        TolMin: float
        OutputVertex: TopoDS_Vertex
        Location: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Compute <outputvertex> like a transformation of <inputvertex> the transformation is given by evaluation of the location law in the vertex of rank <index>. <location> is used to manage discontinuities: - -1: the law before the vertex is used. - 1: the law after the vertex is used. - 0: average of the both laws is used.

        """
        return _BRepFill.BRepFill_LocationLaw_PerformVertex(self, *args)

    def TransformInCompatibleLaw(self, *args):
        r"""

        Parameters
        ----------
        AngularTolerance: float

        Return
        -------
        None

        Description
        -----------
        Apply a linear transformation on each law, to reduce the dicontinuities of law at one rotation.

        """
        return _BRepFill.BRepFill_LocationLaw_TransformInCompatibleLaw(self, *args)

    def TransformInG0Law(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Apply a linear transformation on each law, to have continuity of the global law between the edges.

        """
        return _BRepFill.BRepFill_LocationLaw_TransformInG0Law(self, *args)

    def Vertex(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Vertex

        Description
        -----------
        Return the vertex of rank <index> in the path <index> have to be in [0, nblaw()].

        """
        return _BRepFill.BRepFill_LocationLaw_Vertex(self, *args)

    def Wire(self, *args):
        r"""
        Return
        -------
        TopoDS_Wire

        Description
        -----------
        Return the path.

        """
        return _BRepFill.BRepFill_LocationLaw_Wire(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_LocationLaw_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        _BRepFill.BRepFill_LocationLaw_swiginit(self, _BRepFill.new_BRepFill_LocationLaw())
    __swig_destroy__ = _BRepFill.delete_BRepFill_LocationLaw

# Register BRepFill_LocationLaw in _BRepFill:
_BRepFill.BRepFill_LocationLaw_swigregister(BRepFill_LocationLaw)
class BRepFill_MultiLine(OCC.Core.AppCont.AppCont_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Face1: TopoDS_Face
        Face2: TopoDS_Face
        Edge1: TopoDS_Edge
        Edge2: TopoDS_Edge
        Inv1: bool
        Inv2: bool
        Bissec: Geom2d_Curve

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_MultiLine_swiginit(self, _BRepFill.new_BRepFill_MultiLine(*args))

    def Continuity(self, *args):
        r"""
        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        Returns the continuity betwwen the two faces seshape from geomabsparated by mybis.

        """
        return _BRepFill.BRepFill_MultiLine_Continuity(self, *args)

    def Curves(self, *args):
        r"""

        Parameters
        ----------
        Curve: Geom_Curve
        PCurve1: Geom2d_Curve
        PCurve2: Geom2d_Curve

        Return
        -------
        None

        Description
        -----------
        Raises if isparticularcase is <false>.

        """
        return _BRepFill.BRepFill_MultiLine_Curves(self, *args)

    def IsParticularCase(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Search if the projection of the bissectrice on the faces needs an approximation or not. returns true if the approximation is not needed.

        """
        return _BRepFill.BRepFill_MultiLine_IsParticularCase(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the current point on the 3d curve.

        Parameters
        ----------
        theU: float
        thePnt2d: NCollection_Array1<gp_Pnt2d>
        thePnt: NCollection_Array1<gp_Pnt>

        Return
        -------
        bool

        Description
        -----------
        Returns the point at parameter <theu>.

        """
        return _BRepFill.BRepFill_MultiLine_Value(self, *args)

    def Value3dOnF1OnF2(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P3d: gp_Pnt
        PF1: gp_Pnt2d
        PF2: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_MultiLine_Value3dOnF1OnF2(self, *args)

    def ValueOnF1(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the current point on the pcurve of the first face.

        """
        return _BRepFill.BRepFill_MultiLine_ValueOnF1(self, *args)

    def ValueOnF2(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the current point on the pcurve of the first face.

        """
        return _BRepFill.BRepFill_MultiLine_ValueOnF2(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_MultiLine

# Register BRepFill_MultiLine in _BRepFill:
_BRepFill.BRepFill_MultiLine_swigregister(BRepFill_MultiLine)
class BRepFill_OffsetAncestors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Paral: BRepFill_OffsetWire

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_OffsetAncestors_swiginit(self, _BRepFill.new_BRepFill_OffsetAncestors(*args))

    def Ancestor(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Edge

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        May return a null shape if s1 is not a subshape of <paral>; if perform is not done.

        """
        return _BRepFill.BRepFill_OffsetAncestors_Ancestor(self, *args)

    def HasAncestor(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Edge

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_OffsetAncestors_HasAncestor(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_OffsetAncestors_IsDone(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Paral: BRepFill_OffsetWire

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_OffsetAncestors_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_OffsetAncestors

# Register BRepFill_OffsetAncestors in _BRepFill:
_BRepFill.BRepFill_OffsetAncestors_swigregister(BRepFill_OffsetAncestors)
class BRepFill_OffsetWire(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Spine: TopoDS_Face
        Join: GeomAbs_JoinType (optional, default to GeomAbs_Arc)
        IsOpenResult: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_OffsetWire_swiginit(self, _BRepFill.new_BRepFill_OffsetWire(*args))

    def GeneratedShapes(self, *args):
        r"""

        Parameters
        ----------
        SpineShape: TopoDS_Shape

        Return
        -------
        TopTools_ListOfShape

        Description
        -----------
        Returns the shapes created from a subshape <spineshape> of the spine. returns the last computed offset.

        """
        return _BRepFill.BRepFill_OffsetWire_GeneratedShapes(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        Spine: TopoDS_Face
        Join: GeomAbs_JoinType (optional, default to GeomAbs_Arc)
        IsOpenResult: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Initialize the evaluation of offsetting.

        """
        return _BRepFill.BRepFill_OffsetWire_Init(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_OffsetWire_IsDone(self, *args)

    def JoinType(self, *args):
        r"""
        Return
        -------
        GeomAbs_JoinType

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_OffsetWire_JoinType(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Offset: float
        Alt: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Performs an offsetwire at an altitude <alt> from the face ( according to the orientation of the face).

        """
        return _BRepFill.BRepFill_OffsetWire_Perform(self, *args)

    def PerformWithBiLo(self, *args):
        r"""

        Parameters
        ----------
        WSP: TopoDS_Face
        Offset: float
        Locus: BRepMAT2d_BisectingLocus
        Link: BRepMAT2d_LinkTopoBilo
        Join: GeomAbs_JoinType (optional, default to GeomAbs_Arc)
        Alt: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Performs an offsetwire.

        """
        return _BRepFill.BRepFill_OffsetWire_PerformWithBiLo(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the generated shape.

        """
        return _BRepFill.BRepFill_OffsetWire_Shape(self, *args)

    def Spine(self, *args):
        r"""
        Return
        -------
        TopoDS_Face

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_OffsetWire_Spine(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_OffsetWire

# Register BRepFill_OffsetWire in _BRepFill:
_BRepFill.BRepFill_OffsetWire_swigregister(BRepFill_OffsetWire)
class BRepFill_Pipe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Spine: TopoDS_Wire
        Profile: TopoDS_Shape
        aMode: GeomFill_Trihedron (optional, default to GeomFill_IsCorrectedFrenet)
        ForceApproxC1: bool (optional, default to Standard_False)
        GeneratePartCase: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_Pipe_swiginit(self, _BRepFill.new_BRepFill_Pipe(*args))

    def Edge(self, *args):
        r"""

        Parameters
        ----------
        ESpine: TopoDS_Edge
        VProfile: TopoDS_Vertex

        Return
        -------
        TopoDS_Edge

        Description
        -----------
        Returns the edge created from an edge of the spine and a vertex of the profile. if the edge or the vertex are not in the spine or the profile.

        """
        return _BRepFill.BRepFill_Pipe_Edge(self, *args)

    def ErrorOnSurface(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Pipe_ErrorOnSurface(self, *args)

    def Face(self, *args):
        r"""

        Parameters
        ----------
        ESpine: TopoDS_Edge
        EProfile: TopoDS_Edge

        Return
        -------
        TopoDS_Face

        Description
        -----------
        Returns the face created from an edge of the spine and an edge of the profile. if the edges are not in the spine or the profile.

        """
        return _BRepFill.BRepFill_Pipe_Face(self, *args)

    def FirstShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Pipe_FirstShape(self, *args)

    def Generated(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        L: TopTools_ListOfShape

        Return
        -------
        None

        Description
        -----------
        Returns the list of shapes generated from the shape <s>.

        """
        return _BRepFill.BRepFill_Pipe_Generated(self, *args)

    def LastShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Pipe_LastShape(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Spine: TopoDS_Wire
        Profile: TopoDS_Shape
        GeneratePartCase: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Pipe_Perform(self, *args)

    def PipeLine(self, *args):
        r"""

        Parameters
        ----------
        Point: gp_Pnt

        Return
        -------
        TopoDS_Wire

        Description
        -----------
        Create a wire by sweeping the point along the <spine> if the <spine> is undefined.

        """
        return _BRepFill.BRepFill_Pipe_PipeLine(self, *args)

    def Profile(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Pipe_Profile(self, *args)

    def Section(self, *args):
        r"""

        Parameters
        ----------
        VSpine: TopoDS_Vertex

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the shape created from the profile at the position of the vertex vspine. if the vertex is not in the spine.

        """
        return _BRepFill.BRepFill_Pipe_Section(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Pipe_Shape(self, *args)

    def Spine(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Pipe_Spine(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Pipe

# Register BRepFill_Pipe in _BRepFill:
_BRepFill.BRepFill_Pipe_swigregister(BRepFill_Pipe)
class BRepFill_PipeShell(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Spine: TopoDS_Wire

        Return
        -------
        None

        Description
        -----------
        Set an sweep's mode if no mode are set, the mode used in makepipe is used.

        """
        _BRepFill.BRepFill_PipeShell_swiginit(self, _BRepFill.new_BRepFill_PipeShell(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        Profile: TopoDS_Shape
        WithContact: bool (optional, default to Standard_False)
        WithCorrection: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Set an section. the correspondence with the spine, will be automatically performed.

        Parameters
        ----------
        Profile: TopoDS_Shape
        Location: TopoDS_Vertex
        WithContact: bool (optional, default to Standard_False)
        WithCorrection: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Set an section. the correspondence with the spine, is given by location.

        """
        return _BRepFill.BRepFill_PipeShell_Add(self, *args)

    def Build(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Builds the resulting shape (redefined from makeshape).

        """
        return _BRepFill.BRepFill_PipeShell_Build(self, *args)

    def DeleteProfile(self, *args):
        r"""

        Parameters
        ----------
        Profile: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Delete an section.

        """
        return _BRepFill.BRepFill_PipeShell_DeleteProfile(self, *args)

    def ErrorOnSurface(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_PipeShell_ErrorOnSurface(self, *args)

    def FirstShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the topods shape of the bottom of the sweep.

        """
        return _BRepFill.BRepFill_PipeShell_FirstShape(self, *args)

    def Generated(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        L: TopTools_ListOfShape

        Return
        -------
        None

        Description
        -----------
        Returns the list of shapes generated from the shape <s>.

        """
        return _BRepFill.BRepFill_PipeShell_Generated(self, *args)

    def GetStatus(self, *args):
        r"""
        Return
        -------
        GeomFill_PipeError

        Description
        -----------
        Get a status, when simulate or build failed.

        """
        return _BRepFill.BRepFill_PipeShell_GetStatus(self, *args)

    def IsReady(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Say if <self> is ready to build the shape return false if <self> do not have section definition.

        """
        return _BRepFill.BRepFill_PipeShell_IsReady(self, *args)

    def LastShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the topods shape of the top of the sweep.

        """
        return _BRepFill.BRepFill_PipeShell_LastShape(self, *args)

    def MakeSolid(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Transform the sweeping shell in solid. if the section are not closed returns false.

        """
        return _BRepFill.BRepFill_PipeShell_MakeSolid(self, *args)

    def Profiles(self, *args):
        r"""

        Parameters
        ----------
        theProfiles: TopTools_ListOfShape

        Return
        -------
        None

        Description
        -----------
        Returns the list of original profiles.

        """
        return _BRepFill.BRepFill_PipeShell_Profiles(self, *args)

    def Set(self, *args):
        r"""

        Parameters
        ----------
        Frenet: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Set an frenet or an correctedfrenet trihedron to perform the sweeping.

        Parameters
        ----------
        Axe: gp_Ax2

        Return
        -------
        None

        Description
        -----------
        Set an fixed trihedron to perform the sweeping all sections will be parallel.

        Parameters
        ----------
        BiNormal: gp_Dir

        Return
        -------
        None

        Description
        -----------
        Set an fixed binormal direction to perform the sweeping.

        Parameters
        ----------
        SpineSupport: TopoDS_Shape

        Return
        -------
        bool

        Description
        -----------
        Set support to the spine to define the binormal at the spine, like the normal the surfaces. warning: to be effective, each edge of the <spine> must have an representation on one face of<spinesupport>.

        Parameters
        ----------
        AuxiliarySpine: TopoDS_Wire
        CurvilinearEquivalence: bool (optional, default to Standard_True)
        KeepContact: BRepFill_TypeOfContact (optional, default to BRepFill_NoContact)

        Return
        -------
        None

        Description
        -----------
        Set an auxiliary spine to define the normal for each point of the spine p, an point q is evalued on <auxiliaryspine> if <curvilinearequivalence> q split <auxiliaryspine> with the same length ratio than p split <spline>. else the plan define by p and the tangent to the <spine> intersect <auxiliaryspine> in q. if <keepcontact> equals brepfill_nocontact: the normal is defined by the vector pq. if <keepcontact> equals brepfill_contact: the normal is defined to achieve that the sweeped section is in contact to the auxiliaryspine. the width of section is constant all along the path. in other words, the auxiliary spine lies on the swept surface, but not necessarily is a boundary of this surface. however, the auxiliary spine has to be close enough to the main spine to provide intersection with any section all along the path. if <keepcontact> equals brepfill_contactonborder: the auxiliary spine becomes a boundary of the swept surface and the width of section varies along the path.

        """
        return _BRepFill.BRepFill_PipeShell_Set(self, *args)

    def SetDiscrete(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Set a discrete trihedron to perform the sweeping.

        """
        return _BRepFill.BRepFill_PipeShell_SetDiscrete(self, *args)

    def SetForceApproxC1(self, *args):
        r"""

        Parameters
        ----------
        ForceApproxC1: bool

        Return
        -------
        None

        Description
        -----------
        Set the flag that indicates attempt to approximate a c1-continuous surface if a swept surface proved to be c0. give section to sweep. possibilities are: - give one or sevral profile - give one profile and an homotetic law. - automatic compute of correspondence between profile, and section on the sweeped shape - correspondence between profile, and section on the sweeped shape defined by a vertex of the spine.

        """
        return _BRepFill.BRepFill_PipeShell_SetForceApproxC1(self, *args)

    def SetLaw(self, *args):
        r"""

        Parameters
        ----------
        Profile: TopoDS_Shape
        L: Law_Function
        WithContact: bool (optional, default to Standard_False)
        WithCorrection: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Set an section and an homotetic law. the homotetie's centers is given by point on the <spine>.

        Parameters
        ----------
        Profile: TopoDS_Shape
        L: Law_Function
        Location: TopoDS_Vertex
        WithContact: bool (optional, default to Standard_False)
        WithCorrection: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Set an section and an homotetic law. the homotetie center is given by point on the <spine>.

        """
        return _BRepFill.BRepFill_PipeShell_SetLaw(self, *args)

    def SetMaxDegree(self, *args):
        r"""

        Parameters
        ----------
        NewMaxDegree: int

        Return
        -------
        None

        Description
        -----------
        Define the maximum v degree of resulting surface.

        """
        return _BRepFill.BRepFill_PipeShell_SetMaxDegree(self, *args)

    def SetMaxSegments(self, *args):
        r"""

        Parameters
        ----------
        NewMaxSegments: int

        Return
        -------
        None

        Description
        -----------
        Define the maximum number of spans in v-direction on resulting surface.

        """
        return _BRepFill.BRepFill_PipeShell_SetMaxSegments(self, *args)

    def SetTolerance(self, *args):
        r"""

        Parameters
        ----------
        Tol3d: float (optional, default to 1.0e-4)
        BoundTol: float (optional, default to 1.0e-4)
        TolAngular: float (optional, default to 1.0e-2)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_PipeShell_SetTolerance(self, *args)

    def SetTransition(self, *args):
        r"""

        Parameters
        ----------
        Mode: BRepFill_TransitionStyle (optional, default to BRepFill_Modified)
        Angmin: float (optional, default to 1.0e-2)
        Angmax: float (optional, default to 6.0)

        Return
        -------
        None

        Description
        -----------
        Set the transition mode to manage discontinuities on the sweep.

        """
        return _BRepFill.BRepFill_PipeShell_SetTransition(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the result shape.

        """
        return _BRepFill.BRepFill_PipeShell_Shape(self, *args)

    def Simulate(self, *args):
        r"""

        Parameters
        ----------
        NumberOfSection: int
        Sections: TopTools_ListOfShape

        Return
        -------
        None

        Description
        -----------
        Perform simulation of the sweep: somes section are returned.

        """
        return _BRepFill.BRepFill_PipeShell_Simulate(self, *args)

    def Spine(self, *args):
        r"""
        Return
        -------
        TopoDS_Wire

        Description
        -----------
        Returns the spine.

        """
        return _BRepFill.BRepFill_PipeShell_Spine(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_PipeShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_PipeShell

# Register BRepFill_PipeShell in _BRepFill:
_BRepFill.BRepFill_PipeShell_swigregister(BRepFill_PipeShell)
class BRepFill_Section(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Profile: TopoDS_Shape
        V: TopoDS_Vertex
        WithContact: bool
        WithCorrection: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_Section_swiginit(self, _BRepFill.new_BRepFill_Section(*args))

    def IsLaw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_IsLaw(self, *args)

    def IsPunctual(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_IsPunctual(self, *args)

    def ModifiedShape(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_ModifiedShape(self, *args)

    def OriginalShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_OriginalShape(self, *args)

    def Set(self, *args):
        r"""

        Parameters
        ----------
        IsLaw: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_Set(self, *args)

    def Vertex(self, *args):
        r"""
        Return
        -------
        TopoDS_Vertex

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_Vertex(self, *args)

    def Wire(self, *args):
        r"""
        Return
        -------
        TopoDS_Wire

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_Wire(self, *args)

    def WithContact(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_WithContact(self, *args)

    def WithCorrection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Section_WithCorrection(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Section

# Register BRepFill_Section in _BRepFill:
_BRepFill.BRepFill_Section_swigregister(BRepFill_Section)
class BRepFill_SectionLaw(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ConcatenedLaw(self, *args):
        r"""
        Return
        -------
        opencascade::handle<GeomFill_SectionLaw>

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_ConcatenedLaw(self, *args)

    def Continuity(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        TolAngular: float

        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_Continuity(self, *args)

    def CurrentEdge(self, *args):
        r"""
        Return
        -------
        TopoDS_Edge

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_CurrentEdge(self, *args)

    def D0(self, *args):
        r"""

        Parameters
        ----------
        U: float
        S: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_D0(self, *args)

    def IndexOfEdge(self, *args):
        r"""

        Parameters
        ----------
        anEdge: TopoDS_Shape

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_IndexOfEdge(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        W: TopoDS_Wire

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_Init(self, *args)

    def IsConstant(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_IsConstant(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_IsDone(self, *args)

    def IsUClosed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_IsUClosed(self, *args)

    def IsVClosed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_IsVClosed(self, *args)

    def IsVertex(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Say if the input shape is a vertex.

        """
        return _BRepFill.BRepFill_SectionLaw_IsVertex(self, *args)

    def law(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        opencascade::handle<GeomFill_SectionLaw>

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_law(self, *args)

    def NbLaw(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_NbLaw(self, *args)

    def Vertex(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        Param: float

        Return
        -------
        TopoDS_Vertex

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_Vertex(self, *args)

    def VertexTol(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        Param: float

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionLaw_VertexTol(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_SectionLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_SectionLaw

# Register BRepFill_SectionLaw in _BRepFill:
_BRepFill.BRepFill_SectionLaw_swigregister(BRepFill_SectionLaw)
class BRepFill_SectionPlacement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Law: BRepFill_LocationLaw
        Section: TopoDS_Shape
        WithContact: bool (optional, default to Standard_False)
        WithCorrection: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Automatic placement.

        Parameters
        ----------
        Law: BRepFill_LocationLaw
        Section: TopoDS_Shape
        Vertex: TopoDS_Shape
        WithContact: bool (optional, default to Standard_False)
        WithCorrection: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Placement on vertex.

        """
        _BRepFill.BRepFill_SectionPlacement_swiginit(self, _BRepFill.new_BRepFill_SectionPlacement(*args))

    def AbscissaOnPath(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionPlacement_AbscissaOnPath(self, *args)

    def Transformation(self, *args):
        r"""
        Return
        -------
        gp_Trsf

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_SectionPlacement_Transformation(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_SectionPlacement

# Register BRepFill_SectionPlacement in _BRepFill:
_BRepFill.BRepFill_SectionPlacement_swigregister(BRepFill_SectionPlacement)
class BRepFill_Sweep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Section: BRepFill_SectionLaw
        Location: BRepFill_LocationLaw
        WithKPart: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_Sweep_swiginit(self, _BRepFill.new_BRepFill_Sweep(*args))

    def Build(self, *args):
        r"""

        Parameters
        ----------
        ReversedEdges: TopTools_MapOfShape
        Tapes: BRepFill_DataMapOfShapeHArray2OfShape
        Rails: BRepFill_DataMapOfShapeHArray2OfShape
        Transition: BRepFill_TransitionStyle (optional, default to BRepFill_Modified)
        Continuity: GeomAbs_Shape (optional, default to GeomAbs_C2)
        Approx: GeomFill_ApproxStyle (optional, default to GeomFill_Location)
        Degmax: int (optional, default to 11)
        Segmax: int (optional, default to 30)

        Return
        -------
        None

        Description
        -----------
        Build the sweep surface transition define transition strategy approx define approximation strategy - geomfill_section: the composed function location x section is directly approximated. - geomfill_location: the location law is approximated, and the sweepsurface is bulid algebric composition of approximated location law and section law this option is ok, if section.surface() methode is effective. continuity: the continuity in v waiting on the surface degmax: the maximum degree in v required on the surface segmax: the maximum number of span in v required on the surface.

        """
        return _BRepFill.BRepFill_Sweep_Build(self, *args)

    def ErrorOnSurface(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Get the approximation error.

        """
        return _BRepFill.BRepFill_Sweep_ErrorOnSurface(self, *args)

    def InterFaces(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopTools_HArray2OfShape>

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Sweep_InterFaces(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Say if the shape is build.

        """
        return _BRepFill.BRepFill_Sweep_IsDone(self, *args)

    def Sections(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopTools_HArray2OfShape>

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Sweep_Sections(self, *args)

    def SetAngularControl(self, *args):
        r"""

        Parameters
        ----------
        AngleMin: float (optional, default to 0.01)
        AngleMax: float (optional, default to 6.0)

        Return
        -------
        None

        Description
        -----------
        Tolerance to controle corner management. //! if the discontinuity is lesser than <anglemin> in radian the transition performed will be alway 'modified'.

        """
        return _BRepFill.BRepFill_Sweep_SetAngularControl(self, *args)

    def SetBounds(self, *args):
        r"""

        Parameters
        ----------
        FirstShape: TopoDS_Wire
        LastShape: TopoDS_Wire

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Sweep_SetBounds(self, *args)

    def SetForceApproxC1(self, *args):
        r"""

        Parameters
        ----------
        ForceApproxC1: bool

        Return
        -------
        None

        Description
        -----------
        Set the flag that indicates attempt to approximate a c1-continuous surface if a swept surface proved to be c0.

        """
        return _BRepFill.BRepFill_Sweep_SetForceApproxC1(self, *args)

    def SetTolerance(self, *args):
        r"""

        Parameters
        ----------
        Tol3d: float
        BoundTol: float (optional, default to 1.0)
        Tol2d: float (optional, default to 1.0e-5)
        TolAngular: float (optional, default to 1.0e-2)

        Return
        -------
        None

        Description
        -----------
        Set approximation tolerance tol3d: tolerance to surface approximation tol2d: tolerance used to perform curve approximation normally the 2d curve are approximated with a tolerance given by the resolution on support surfaces, but if this tolerance is too large tol2d is used. tolangular: tolerance (in radian) to control the angle between tangents on the section law and tangent of iso-v on approximated surface.

        """
        return _BRepFill.BRepFill_Sweep_SetTolerance(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the sweeping shape.

        """
        return _BRepFill.BRepFill_Sweep_Shape(self, *args)

    def SubShape(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopTools_HArray2OfShape>

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_Sweep_SubShape(self, *args)

    def Tape(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the tape corresponding to index-th edge of section.

        """
        return _BRepFill.BRepFill_Sweep_Tape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Sweep

# Register BRepFill_Sweep in _BRepFill:
_BRepFill.BRepFill_Sweep_swigregister(BRepFill_Sweep)
class BRepFill_TrimEdgeTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Bisec: Bisector_Bisec
        S1: Geom2d_Geometry
        S2: Geom2d_Geometry
        Offset: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_TrimEdgeTool_swiginit(self, _BRepFill.new_BRepFill_TrimEdgeTool(*args))

    def AddOrConfuse(self, *args):
        r"""

        Parameters
        ----------
        Start: bool
        Edge1: TopoDS_Edge
        Edge2: TopoDS_Edge
        Params: TColgp_SequenceOfPnt

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimEdgeTool_AddOrConfuse(self, *args)

    def IntersectWith(self, *args):
        r"""

        Parameters
        ----------
        Edge1: TopoDS_Edge
        Edge2: TopoDS_Edge
        InitShape1: TopoDS_Shape
        InitShape2: TopoDS_Shape
        End1: TopoDS_Vertex
        End2: TopoDS_Vertex
        theJoinType: GeomAbs_JoinType
        IsOpenResult: bool
        Params: TColgp_SequenceOfPnt

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimEdgeTool_IntersectWith(self, *args)

    def IsInside(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimEdgeTool_IsInside(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimEdgeTool

# Register BRepFill_TrimEdgeTool in _BRepFill:
_BRepFill.BRepFill_TrimEdgeTool_swigregister(BRepFill_TrimEdgeTool)
class BRepFill_TrimShellCorner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theFaces: TopTools_HArray2OfShape
        theTransition: BRepFill_TransitionStyle
        theAxeOfBisPlane: gp_Ax2
        theIntPointCrossDir: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Constructor: takes faces to intersect, type of transition (it can be rightcorner or roundcorner) and axis of bisector plane theintersectpointcrossdirection: prev path direction at the origin point of theaxeofbisplane cross next path direction at the origin point of theaxeofbisplane. used when ee has more than one vertices.

        """
        _BRepFill.BRepFill_TrimShellCorner_swiginit(self, _BRepFill.new_BRepFill_TrimShellCorner(*args))

    def AddBounds(self, *args):
        r"""

        Parameters
        ----------
        Bounds: TopTools_HArray2OfShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimShellCorner_AddBounds(self, *args)

    def AddUEdges(self, *args):
        r"""

        Parameters
        ----------
        theUEdges: TopTools_HArray2OfShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimShellCorner_AddUEdges(self, *args)

    def AddVEdges(self, *args):
        r"""

        Parameters
        ----------
        theVEdges: TopTools_HArray2OfShape
        theIndex: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimShellCorner_AddVEdges(self, *args)

    def HasSection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimShellCorner_HasSection(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimShellCorner_IsDone(self, *args)

    def Modified(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        theModified: TopTools_ListOfShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimShellCorner_Modified(self, *args)

    def Perform(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimShellCorner_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimShellCorner

# Register BRepFill_TrimShellCorner in _BRepFill:
_BRepFill.BRepFill_TrimShellCorner_swigregister(BRepFill_TrimShellCorner)
class BRepFill_TrimSurfaceTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Bis: Geom2d_Curve
        Face1: TopoDS_Face
        Face2: TopoDS_Face
        Edge1: TopoDS_Edge
        Edge2: TopoDS_Edge
        Inv1: bool
        Inv2: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_TrimSurfaceTool_swiginit(self, _BRepFill.new_BRepFill_TrimSurfaceTool(*args))

    def IntersectWith(self, *args):
        r"""

        Parameters
        ----------
        EdgeOnF1: TopoDS_Edge
        EdgeOnF2: TopoDS_Edge
        Points: TColgp_SequenceOfPnt

        Return
        -------
        None

        Description
        -----------
        Intersect <bis> with the projection of the edges <edgeonfi> and returns the intersecting parameters on bis and on the edges p.x(): parameter on bis p.y(): parameter on edgeonf1 p.z(): parameter on edgeonf2 raises if <edge> is not a edge of face1 or face2.

        """
        return _BRepFill.BRepFill_TrimSurfaceTool_IntersectWith(self, *args)

    def IsOnFace(self, *args):
        r"""

        Parameters
        ----------
        Point: gp_Pnt2d

        Return
        -------
        bool

        Description
        -----------
        Returns true if the line (p, dz) intersect the faces.

        """
        return _BRepFill.BRepFill_TrimSurfaceTool_IsOnFace(self, *args)

    def ProjOn(self, *args):
        r"""

        Parameters
        ----------
        Point: gp_Pnt2d
        Edge: TopoDS_Edge

        Return
        -------
        float

        Description
        -----------
        Returns the parameter of the point <point> on the edge <edge>, assuming that the point is on the edge.

        """
        return _BRepFill.BRepFill_TrimSurfaceTool_ProjOn(self, *args)

    def Project(self, *args):
        r"""

        Parameters
        ----------
        U1: float
        U2: float
        Curve: Geom_Curve
        PCurve1: Geom2d_Curve
        PCurve2: Geom2d_Curve
        myCont: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_TrimSurfaceTool_Project(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_TrimSurfaceTool

# Register BRepFill_TrimSurfaceTool in _BRepFill:
_BRepFill.BRepFill_TrimSurfaceTool_swigregister(BRepFill_TrimSurfaceTool)
class BRepFill_ACRLaw(BRepFill_LocationLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Path: TopoDS_Wire
        Law: GeomFill_LocationGuide

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_ACRLaw_swiginit(self, _BRepFill.new_BRepFill_ACRLaw(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_ACRLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ACRLaw

# Register BRepFill_ACRLaw in _BRepFill:
_BRepFill.BRepFill_ACRLaw_swigregister(BRepFill_ACRLaw)
class BRepFill_Edge3DLaw(BRepFill_LocationLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Path: TopoDS_Wire
        Law: GeomFill_LocationLaw

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_Edge3DLaw_swiginit(self, _BRepFill.new_BRepFill_Edge3DLaw(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_Edge3DLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_Edge3DLaw

# Register BRepFill_Edge3DLaw in _BRepFill:
_BRepFill.BRepFill_Edge3DLaw_swigregister(BRepFill_Edge3DLaw)
class BRepFill_EdgeOnSurfLaw(BRepFill_LocationLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Path: TopoDS_Wire
        Surf: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_EdgeOnSurfLaw_swiginit(self, _BRepFill.new_BRepFill_EdgeOnSurfLaw(*args))

    def HasResult(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns <false> if one edge of <path> do not have representation on <surf>. in this case it is impossible to use this object.

        """
        return _BRepFill.BRepFill_EdgeOnSurfLaw_HasResult(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_EdgeOnSurfLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_EdgeOnSurfLaw

# Register BRepFill_EdgeOnSurfLaw in _BRepFill:
_BRepFill.BRepFill_EdgeOnSurfLaw_swigregister(BRepFill_EdgeOnSurfLaw)
class BRepFill_NSections(BRepFill_SectionLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        S: TopTools_SequenceOfShape
        Build: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Construct.

        Parameters
        ----------
        S: TopTools_SequenceOfShape
        Trsfs: GeomFill_SequenceOfTrsf
        P: TColStd_SequenceOfReal
        VF: float
        VL: float
        Build: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Construct.

        """
        _BRepFill.BRepFill_NSections_swiginit(self, _BRepFill.new_BRepFill_NSections(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_NSections_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_NSections

# Register BRepFill_NSections in _BRepFill:
_BRepFill.BRepFill_NSections_swigregister(BRepFill_NSections)
class BRepFill_ShapeLaw(BRepFill_SectionLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        V: TopoDS_Vertex
        Build: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Construct an constant law.

        Parameters
        ----------
        W: TopoDS_Wire
        Build: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Construct an constant law.

        Parameters
        ----------
        W: TopoDS_Wire
        L: Law_Function
        Build: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Construct an evolutive law.

        """
        _BRepFill.BRepFill_ShapeLaw_swiginit(self, _BRepFill.new_BRepFill_ShapeLaw(*args))

    def Edge(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Edge

        Description
        -----------
        No available documentation.

        """
        return _BRepFill.BRepFill_ShapeLaw_Edge(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_ShapeLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_ShapeLaw

# Register BRepFill_ShapeLaw in _BRepFill:
_BRepFill.BRepFill_ShapeLaw_swigregister(BRepFill_ShapeLaw)
class BRepFill_DraftLaw(BRepFill_Edge3DLaw):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Path: TopoDS_Wire
        Law: GeomFill_LocationDraft

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepFill.BRepFill_DraftLaw_swiginit(self, _BRepFill.new_BRepFill_DraftLaw(*args))

    def CleanLaw(self, *args):
        r"""

        Parameters
        ----------
        TolAngular: float

        Return
        -------
        None

        Description
        -----------
        To clean the little discontinuities.

        """
        return _BRepFill.BRepFill_DraftLaw_CleanLaw(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepFill_DraftLaw_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepFill.delete_BRepFill_DraftLaw

# Register BRepFill_DraftLaw in _BRepFill:
_BRepFill.BRepFill_DraftLaw_swigregister(BRepFill_DraftLaw)



@deprecated
def brepfill_Axe(*args):
	return brepfill.Axe(*args)

@deprecated
def brepfill_ComputeACR(*args):
	return brepfill.ComputeACR(*args)

@deprecated
def brepfill_Face(*args):
	return brepfill.Face(*args)

@deprecated
def brepfill_InsertACR(*args):
	return brepfill.InsertACR(*args)

@deprecated
def brepfill_Shell(*args):
	return brepfill.Shell(*args)



