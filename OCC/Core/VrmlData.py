# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
VrmlData module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_vrmldata.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VrmlData
else:
    import _VrmlData

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VrmlData.delete_SwigPyIterator

    def value(self):
        return _VrmlData.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VrmlData.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VrmlData.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VrmlData.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VrmlData.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VrmlData.SwigPyIterator_copy(self)

    def next(self):
        return _VrmlData.SwigPyIterator_next(self)

    def __next__(self):
        return _VrmlData.SwigPyIterator___next__(self)

    def previous(self):
        return _VrmlData.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VrmlData.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VrmlData.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VrmlData.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VrmlData.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VrmlData.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VrmlData.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VrmlData.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VrmlData:
_VrmlData.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _VrmlData.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.Quantity

from enum import IntEnum
from OCC.Core.Exception import *

VrmlData_StatusOK = _VrmlData.VrmlData_StatusOK
VrmlData_EmptyData = _VrmlData.VrmlData_EmptyData
VrmlData_UnrecoverableError = _VrmlData.VrmlData_UnrecoverableError
VrmlData_GeneralError = _VrmlData.VrmlData_GeneralError
VrmlData_EndOfFile = _VrmlData.VrmlData_EndOfFile
VrmlData_NotVrmlFile = _VrmlData.VrmlData_NotVrmlFile
VrmlData_CannotOpenFile = _VrmlData.VrmlData_CannotOpenFile
VrmlData_VrmlFormatError = _VrmlData.VrmlData_VrmlFormatError
VrmlData_NumericInputError = _VrmlData.VrmlData_NumericInputError
VrmlData_IrrelevantNumber = _VrmlData.VrmlData_IrrelevantNumber
VrmlData_BooleanInputError = _VrmlData.VrmlData_BooleanInputError
VrmlData_StringInputError = _VrmlData.VrmlData_StringInputError
VrmlData_NodeNameUnknown = _VrmlData.VrmlData_NodeNameUnknown
VrmlData_NonPositiveSize = _VrmlData.VrmlData_NonPositiveSize
VrmlData_ReadUnknownNode = _VrmlData.VrmlData_ReadUnknownNode
VrmlData_NonSupportedFeature = _VrmlData.VrmlData_NonSupportedFeature
VrmlData_OutputStreamUndefined = _VrmlData.VrmlData_OutputStreamUndefined
VrmlData_NotImplemented = _VrmlData.VrmlData_NotImplemented


class VrmlData_ErrorStatus(IntEnum):
	VrmlData_StatusOK = 0
	VrmlData_EmptyData = 1
	VrmlData_UnrecoverableError = 2
	VrmlData_GeneralError = 3
	VrmlData_EndOfFile = 4
	VrmlData_NotVrmlFile = 5
	VrmlData_CannotOpenFile = 6
	VrmlData_VrmlFormatError = 7
	VrmlData_NumericInputError = 8
	VrmlData_IrrelevantNumber = 9
	VrmlData_BooleanInputError = 10
	VrmlData_StringInputError = 11
	VrmlData_NodeNameUnknown = 12
	VrmlData_NonPositiveSize = 13
	VrmlData_ReadUnknownNode = 14
	VrmlData_NonSupportedFeature = 15
	VrmlData_OutputStreamUndefined = 16
	VrmlData_NotImplemented = 17
VrmlData_StatusOK = VrmlData_ErrorStatus.VrmlData_StatusOK
VrmlData_EmptyData = VrmlData_ErrorStatus.VrmlData_EmptyData
VrmlData_UnrecoverableError = VrmlData_ErrorStatus.VrmlData_UnrecoverableError
VrmlData_GeneralError = VrmlData_ErrorStatus.VrmlData_GeneralError
VrmlData_EndOfFile = VrmlData_ErrorStatus.VrmlData_EndOfFile
VrmlData_NotVrmlFile = VrmlData_ErrorStatus.VrmlData_NotVrmlFile
VrmlData_CannotOpenFile = VrmlData_ErrorStatus.VrmlData_CannotOpenFile
VrmlData_VrmlFormatError = VrmlData_ErrorStatus.VrmlData_VrmlFormatError
VrmlData_NumericInputError = VrmlData_ErrorStatus.VrmlData_NumericInputError
VrmlData_IrrelevantNumber = VrmlData_ErrorStatus.VrmlData_IrrelevantNumber
VrmlData_BooleanInputError = VrmlData_ErrorStatus.VrmlData_BooleanInputError
VrmlData_StringInputError = VrmlData_ErrorStatus.VrmlData_StringInputError
VrmlData_NodeNameUnknown = VrmlData_ErrorStatus.VrmlData_NodeNameUnknown
VrmlData_NonPositiveSize = VrmlData_ErrorStatus.VrmlData_NonPositiveSize
VrmlData_ReadUnknownNode = VrmlData_ErrorStatus.VrmlData_ReadUnknownNode
VrmlData_NonSupportedFeature = VrmlData_ErrorStatus.VrmlData_NonSupportedFeature
VrmlData_OutputStreamUndefined = VrmlData_ErrorStatus.VrmlData_OutputStreamUndefined
VrmlData_NotImplemented = VrmlData_ErrorStatus.VrmlData_NotImplemented


def Handle_VrmlData_Node_Create():
    return _VrmlData.Handle_VrmlData_Node_Create()

def Handle_VrmlData_Node_DownCast(t):
    return _VrmlData.Handle_VrmlData_Node_DownCast(t)

def Handle_VrmlData_Node_IsNull(t):
    return _VrmlData.Handle_VrmlData_Node_IsNull(t)

def Handle_VrmlData_Appearance_Create():
    return _VrmlData.Handle_VrmlData_Appearance_Create()

def Handle_VrmlData_Appearance_DownCast(t):
    return _VrmlData.Handle_VrmlData_Appearance_DownCast(t)

def Handle_VrmlData_Appearance_IsNull(t):
    return _VrmlData.Handle_VrmlData_Appearance_IsNull(t)

def Handle_VrmlData_Geometry_Create():
    return _VrmlData.Handle_VrmlData_Geometry_Create()

def Handle_VrmlData_Geometry_DownCast(t):
    return _VrmlData.Handle_VrmlData_Geometry_DownCast(t)

def Handle_VrmlData_Geometry_IsNull(t):
    return _VrmlData.Handle_VrmlData_Geometry_IsNull(t)

def Handle_VrmlData_Group_Create():
    return _VrmlData.Handle_VrmlData_Group_Create()

def Handle_VrmlData_Group_DownCast(t):
    return _VrmlData.Handle_VrmlData_Group_DownCast(t)

def Handle_VrmlData_Group_IsNull(t):
    return _VrmlData.Handle_VrmlData_Group_IsNull(t)

def Handle_VrmlData_Material_Create():
    return _VrmlData.Handle_VrmlData_Material_Create()

def Handle_VrmlData_Material_DownCast(t):
    return _VrmlData.Handle_VrmlData_Material_DownCast(t)

def Handle_VrmlData_Material_IsNull(t):
    return _VrmlData.Handle_VrmlData_Material_IsNull(t)

def Handle_VrmlData_ShapeNode_Create():
    return _VrmlData.Handle_VrmlData_ShapeNode_Create()

def Handle_VrmlData_ShapeNode_DownCast(t):
    return _VrmlData.Handle_VrmlData_ShapeNode_DownCast(t)

def Handle_VrmlData_ShapeNode_IsNull(t):
    return _VrmlData.Handle_VrmlData_ShapeNode_IsNull(t)

def Handle_VrmlData_TextureCoordinate_Create():
    return _VrmlData.Handle_VrmlData_TextureCoordinate_Create()

def Handle_VrmlData_TextureCoordinate_DownCast(t):
    return _VrmlData.Handle_VrmlData_TextureCoordinate_DownCast(t)

def Handle_VrmlData_TextureCoordinate_IsNull(t):
    return _VrmlData.Handle_VrmlData_TextureCoordinate_IsNull(t)

def Handle_VrmlData_UnknownNode_Create():
    return _VrmlData.Handle_VrmlData_UnknownNode_Create()

def Handle_VrmlData_UnknownNode_DownCast(t):
    return _VrmlData.Handle_VrmlData_UnknownNode_DownCast(t)

def Handle_VrmlData_UnknownNode_IsNull(t):
    return _VrmlData.Handle_VrmlData_UnknownNode_IsNull(t)

def Handle_VrmlData_WorldInfo_Create():
    return _VrmlData.Handle_VrmlData_WorldInfo_Create()

def Handle_VrmlData_WorldInfo_DownCast(t):
    return _VrmlData.Handle_VrmlData_WorldInfo_DownCast(t)

def Handle_VrmlData_WorldInfo_IsNull(t):
    return _VrmlData.Handle_VrmlData_WorldInfo_IsNull(t)

def Handle_VrmlData_Box_Create():
    return _VrmlData.Handle_VrmlData_Box_Create()

def Handle_VrmlData_Box_DownCast(t):
    return _VrmlData.Handle_VrmlData_Box_DownCast(t)

def Handle_VrmlData_Box_IsNull(t):
    return _VrmlData.Handle_VrmlData_Box_IsNull(t)

def Handle_VrmlData_Color_Create():
    return _VrmlData.Handle_VrmlData_Color_Create()

def Handle_VrmlData_Color_DownCast(t):
    return _VrmlData.Handle_VrmlData_Color_DownCast(t)

def Handle_VrmlData_Color_IsNull(t):
    return _VrmlData.Handle_VrmlData_Color_IsNull(t)

def Handle_VrmlData_Cone_Create():
    return _VrmlData.Handle_VrmlData_Cone_Create()

def Handle_VrmlData_Cone_DownCast(t):
    return _VrmlData.Handle_VrmlData_Cone_DownCast(t)

def Handle_VrmlData_Cone_IsNull(t):
    return _VrmlData.Handle_VrmlData_Cone_IsNull(t)

def Handle_VrmlData_Coordinate_Create():
    return _VrmlData.Handle_VrmlData_Coordinate_Create()

def Handle_VrmlData_Coordinate_DownCast(t):
    return _VrmlData.Handle_VrmlData_Coordinate_DownCast(t)

def Handle_VrmlData_Coordinate_IsNull(t):
    return _VrmlData.Handle_VrmlData_Coordinate_IsNull(t)

def Handle_VrmlData_Cylinder_Create():
    return _VrmlData.Handle_VrmlData_Cylinder_Create()

def Handle_VrmlData_Cylinder_DownCast(t):
    return _VrmlData.Handle_VrmlData_Cylinder_DownCast(t)

def Handle_VrmlData_Cylinder_IsNull(t):
    return _VrmlData.Handle_VrmlData_Cylinder_IsNull(t)

def Handle_VrmlData_ImageTexture_Create():
    return _VrmlData.Handle_VrmlData_ImageTexture_Create()

def Handle_VrmlData_ImageTexture_DownCast(t):
    return _VrmlData.Handle_VrmlData_ImageTexture_DownCast(t)

def Handle_VrmlData_ImageTexture_IsNull(t):
    return _VrmlData.Handle_VrmlData_ImageTexture_IsNull(t)

def Handle_VrmlData_IndexedLineSet_Create():
    return _VrmlData.Handle_VrmlData_IndexedLineSet_Create()

def Handle_VrmlData_IndexedLineSet_DownCast(t):
    return _VrmlData.Handle_VrmlData_IndexedLineSet_DownCast(t)

def Handle_VrmlData_IndexedLineSet_IsNull(t):
    return _VrmlData.Handle_VrmlData_IndexedLineSet_IsNull(t)

def Handle_VrmlData_Normal_Create():
    return _VrmlData.Handle_VrmlData_Normal_Create()

def Handle_VrmlData_Normal_DownCast(t):
    return _VrmlData.Handle_VrmlData_Normal_DownCast(t)

def Handle_VrmlData_Normal_IsNull(t):
    return _VrmlData.Handle_VrmlData_Normal_IsNull(t)

def Handle_VrmlData_Sphere_Create():
    return _VrmlData.Handle_VrmlData_Sphere_Create()

def Handle_VrmlData_Sphere_DownCast(t):
    return _VrmlData.Handle_VrmlData_Sphere_DownCast(t)

def Handle_VrmlData_Sphere_IsNull(t):
    return _VrmlData.Handle_VrmlData_Sphere_IsNull(t)

def Handle_VrmlData_IndexedFaceSet_Create():
    return _VrmlData.Handle_VrmlData_IndexedFaceSet_Create()

def Handle_VrmlData_IndexedFaceSet_DownCast(t):
    return _VrmlData.Handle_VrmlData_IndexedFaceSet_DownCast(t)

def Handle_VrmlData_IndexedFaceSet_IsNull(t):
    return _VrmlData.Handle_VrmlData_IndexedFaceSet_IsNull(t)
class VrmlData_DataMapOfShapeAppearance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_begin(self)

    def end(self):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_end(self)

    def cbegin(self):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_cbegin(self)

    def cend(self):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_cend(self)

    def __init__(self, *args):
        _VrmlData.VrmlData_DataMapOfShapeAppearance_swiginit(self, _VrmlData.new_VrmlData_DataMapOfShapeAppearance(*args))

    def Exchange(self, theOther):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Exchange(self, theOther)

    def Assign(self, theOther):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Assign(self, theOther)

    def Set(self, theOther):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Set(self, theOther)

    def ReSize(self, N):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_UnBind(self, theKey)

    def Seek(self, theKey):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Seek(self, theKey)

    def Find(self, *args):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance___call__(self, *args)

    def Clear(self, *args):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Clear(self, *args)
    __swig_destroy__ = _VrmlData.delete_VrmlData_DataMapOfShapeAppearance

    def Size(self):
        return _VrmlData.VrmlData_DataMapOfShapeAppearance_Size(self)

# Register VrmlData_DataMapOfShapeAppearance in _VrmlData:
_VrmlData.VrmlData_DataMapOfShapeAppearance_swigregister(VrmlData_DataMapOfShapeAppearance)
class VrmlData_ListOfNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _VrmlData.VrmlData_ListOfNode_begin(self)

    def end(self):
        return _VrmlData.VrmlData_ListOfNode_end(self)

    def cbegin(self):
        return _VrmlData.VrmlData_ListOfNode_cbegin(self)

    def cend(self):
        return _VrmlData.VrmlData_ListOfNode_cend(self)

    def __init__(self, *args):
        _VrmlData.VrmlData_ListOfNode_swiginit(self, _VrmlData.new_VrmlData_ListOfNode(*args))

    def Size(self):
        return _VrmlData.VrmlData_ListOfNode_Size(self)

    def Assign(self, theOther):
        return _VrmlData.VrmlData_ListOfNode_Assign(self, theOther)

    def Set(self, theOther):
        return _VrmlData.VrmlData_ListOfNode_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _VrmlData.VrmlData_ListOfNode_Clear(self, theAllocator)

    def First(self):
        return _VrmlData.VrmlData_ListOfNode_First(self)

    def Last(self):
        return _VrmlData.VrmlData_ListOfNode_Last(self)

    def Append(self, *args):
        return _VrmlData.VrmlData_ListOfNode_Append(self, *args)

    def Prepend(self, *args):
        return _VrmlData.VrmlData_ListOfNode_Prepend(self, *args)

    def RemoveFirst(self):
        return _VrmlData.VrmlData_ListOfNode_RemoveFirst(self)

    def Remove(self, theIter):
        return _VrmlData.VrmlData_ListOfNode_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _VrmlData.VrmlData_ListOfNode_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _VrmlData.VrmlData_ListOfNode_InsertAfter(self, *args)

    def Reverse(self):
        return _VrmlData.VrmlData_ListOfNode_Reverse(self)
    __swig_destroy__ = _VrmlData.delete_VrmlData_ListOfNode

    def __len__(self):
        return self.Size()


# Register VrmlData_ListOfNode in _VrmlData:
_VrmlData.VrmlData_ListOfNode_swigregister(VrmlData_ListOfNode)
class VrmlData_MapOfNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def cbegin(self):
        return _VrmlData.VrmlData_MapOfNode_cbegin(self)

    def cend(self):
        return _VrmlData.VrmlData_MapOfNode_cend(self)

    def __init__(self, *args):
        _VrmlData.VrmlData_MapOfNode_swiginit(self, _VrmlData.new_VrmlData_MapOfNode(*args))

    def Exchange(self, theOther):
        return _VrmlData.VrmlData_MapOfNode_Exchange(self, theOther)

    def Assign(self, theOther):
        return _VrmlData.VrmlData_MapOfNode_Assign(self, theOther)

    def Set(self, theOther):
        return _VrmlData.VrmlData_MapOfNode_Set(self, theOther)

    def ReSize(self, N):
        return _VrmlData.VrmlData_MapOfNode_ReSize(self, N)

    def Add(self, K):
        return _VrmlData.VrmlData_MapOfNode_Add(self, K)

    def Added(self, K):
        return _VrmlData.VrmlData_MapOfNode_Added(self, K)

    def Remove(self, K):
        return _VrmlData.VrmlData_MapOfNode_Remove(self, K)

    def Clear(self, *args):
        return _VrmlData.VrmlData_MapOfNode_Clear(self, *args)
    __swig_destroy__ = _VrmlData.delete_VrmlData_MapOfNode

    def Size(self):
        return _VrmlData.VrmlData_MapOfNode_Size(self)

    def IsEqual(self, theOther):
        return _VrmlData.VrmlData_MapOfNode_IsEqual(self, theOther)

    def Contains(self, *args):
        return _VrmlData.VrmlData_MapOfNode_Contains(self, *args)

    def Union(self, theLeft, theRight):
        return _VrmlData.VrmlData_MapOfNode_Union(self, theLeft, theRight)

    def Unite(self, theOther):
        return _VrmlData.VrmlData_MapOfNode_Unite(self, theOther)

    def HasIntersection(self, theMap):
        return _VrmlData.VrmlData_MapOfNode_HasIntersection(self, theMap)

    def Intersection(self, theLeft, theRight):
        return _VrmlData.VrmlData_MapOfNode_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther):
        return _VrmlData.VrmlData_MapOfNode_Intersect(self, theOther)

    def Subtraction(self, theLeft, theRight):
        return _VrmlData.VrmlData_MapOfNode_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther):
        return _VrmlData.VrmlData_MapOfNode_Subtract(self, theOther)

    def Difference(self, theLeft, theRight):
        return _VrmlData.VrmlData_MapOfNode_Difference(self, theLeft, theRight)

    def Differ(self, theOther):
        return _VrmlData.VrmlData_MapOfNode_Differ(self, theOther)

# Register VrmlData_MapOfNode in _VrmlData:
_VrmlData.VrmlData_MapOfNode_swigregister(VrmlData_MapOfNode)
class VrmlData_Node(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clone(self, *args):
        r"""

        Parameters
        ----------
        &: VrmlData_Node

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * create a copy of this node. * if the parameter is null, a new copied node is created. otherwise new node * is not created, but rather the given one is modified.<p> * this method nullifies the argument node if its member myscene differs * from that one of the current instance. */.

        """
        return _VrmlData.VrmlData_Node_Clone(self, *args)

    @staticmethod
    def GlobalIndent(*args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _VrmlData.VrmlData_Node_GlobalIndent(*args)

    def IsDefault(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * returns true if the node is default, then it would not be written. */.

        """
        return _VrmlData.VrmlData_Node_IsDefault(self, *args)

    def Name(self, *args):
        r"""
        Return
        -------
        char *

        Description
        -----------
        /** * query the name */.

        """
        return _VrmlData.VrmlData_Node_Name(self, *args)

    @staticmethod
    def OK(*args):
        r"""

        Parameters
        ----------
        theStat: VrmlData_ErrorStatus

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theStat: VrmlData_ErrorStatus

        Return
        -------
        outStat: VrmlData_ErrorStatus

        Description
        -----------
        No available documentation.

        """
        return _VrmlData.VrmlData_Node_OK(*args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read the node from input stream. */.

        """
        return _VrmlData.VrmlData_Node_Read(self, *args)

    @staticmethod
    def ReadBoolean(*args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer

        Return
        -------
        theResult: bool

        Description
        -----------
        /** * read one boolean value (true or false). */.

        """
        return _VrmlData.VrmlData_Node_ReadBoolean(*args)

    @staticmethod
    def ReadInteger(*args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        theResult: long

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read one integer value. */.

        """
        return _VrmlData.VrmlData_Node_ReadInteger(*args)

    @staticmethod
    def ReadMultiString(*args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        theRes: NCollection_List<TCollection_AsciiString>

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read one quoted string, the quotes are removed. */.

        """
        return _VrmlData.VrmlData_Node_ReadMultiString(*args)

    def ReadNode(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        theNode: VrmlData_Node
        Type: Standard_Type (optional, default to NULL)

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read a complete node definition from vrml stream * @param thebuffer * buffer receiving the input data. * @param thenode * <tt>[out]</tt> node restored from the buffer data * @param type * node type to be checked. if it is null(default) no type checking is done. * otherwise the created node is matched and an error is returned if * no match detected. */.

        """
        return _VrmlData.VrmlData_Node_ReadNode(self, *args)

    @staticmethod
    def ReadString(*args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        theRes: str

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read one quoted string, the quotes are removed. */.

        """
        return _VrmlData.VrmlData_Node_ReadString(*args)

    def Scene(self, *args):
        r"""
        Return
        -------
        VrmlData_Scene

        Description
        -----------
        /** * query the scene that contains this node */.

        """
        return _VrmlData.VrmlData_Node_Scene(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        thePrefix: char *

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write the node to output stream. */.

        """
        return _VrmlData.VrmlData_Node_Write(self, *args)

    def WriteClosing(self, *args):
        r"""
        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write the closing brace in the end of a node output. */.

        """
        return _VrmlData.VrmlData_Node_WriteClosing(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Node_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Node

# Register VrmlData_Node in _VrmlData:
_VrmlData.VrmlData_Node_swigregister(VrmlData_Node)
class VrmlData_Scene(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        &: NCollection_IncAllocator (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * constructor. */.

        """
        _VrmlData.VrmlData_Scene_swiginit(self, _VrmlData.new_VrmlData_Scene(*args))

    def AddNode(self, *args):
        r"""

        Parameters
        ----------
        theN: VrmlData_Node
        isTopLevel: bool (optional, default to Standard_True)

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * add a node. if then belongs to another scene, it is cloned. * <p>vrmldata_worldinfo cannot be added, in this case the method * returns a null handle. */.

        """
        return _VrmlData.VrmlData_Scene_AddNode(self, *args)

    def Allocator(self, *args):
        r"""
        Return
        -------
        opencascade::handle<NCollection_IncAllocator>

        Description
        -----------
        /** * allocator used by all nodes contained in the scene. */.

        """
        return _VrmlData.VrmlData_Scene_Allocator(self, *args)

    def DumpToString(self):
        r"""DumpToString(VrmlData_Scene self) -> std::string"""
        return _VrmlData.VrmlData_Scene_DumpToString(self)

    def FindNode(self, *args):
        r"""

        Parameters
        ----------
        theName: char *
        theType: Standard_Type (optional, default to 0)

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * find a node by its name. * @param thename * name of the node to find. * @param thetype * type to match. if this value is null, the first found node with the * given name is returned. if thetype is given, only the node that has * that type is returned. */.

        Parameters
        ----------
        theName: char *
        theLocation: gp_Trsf

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * find a node by its name. * @param thename * name of the node to search for. * @param thelocation * location of the found node with respect to the whole vrml shape. */.

        """
        return _VrmlData.VrmlData_Scene_FindNode(self, *args)

    def GetIterator(self, *args):
        r"""
        Return
        -------
        Iterator

        Description
        -----------
        /** * iterator of nodes */.

        """
        return _VrmlData.VrmlData_Scene_GetIterator(self, *args)

    def GetLineError(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        /** * query the line where the error occurred (if the status is not ok) */.

        """
        return _VrmlData.VrmlData_Scene_GetLineError(self, *args)

    def GetShape(self, *args):
        r"""

        Parameters
        ----------
        M: VrmlData_DataMapOfShapeAppearance

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        /** * convert the scene to a shape, with the information on materials defined * for each sub-shape. this method should be used instead of topods_shape * explicit conversion operator when you need to retrieve the material * aspect for each face or edge in the returned topological object. * @param m * data map that binds an appearance instance to each created tface or * tedge if the appearance node is defined in vrml scene for that geometry. * return * topods_shape (compound) holding all the scene, similar to the result of * explicit topods_shape conversion operator. */.

        """
        return _VrmlData.VrmlData_Scene_GetShape(self, *args)

    def IsDummyWrite(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * query if the current write operation is dummy, i.e., for the purpose of * collecting information before the real write is commenced. */.

        """
        return _VrmlData.VrmlData_Scene_IsDummyWrite(self, *args)

    def NamedNodesIterator(self, *args):
        r"""
        Return
        -------
        VrmlData_MapOfNode::Iterator

        Description
        -----------
        /** * get the iterator of named nodes. */.

        """
        return _VrmlData.VrmlData_Scene_NamedNodesIterator(self, *args)

    def ReadArrIndex(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        theArr: int * *
        theNBl: Standard_Size

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        No available documentation.

        """
        return _VrmlData.VrmlData_Scene_ReadArrIndex(self, *args)

    @staticmethod
    def ReadLine(*args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read a vrml line. empty lines and comments are skipped. * the processing starts here from thebuffer.lineptr; if there is at least * one non-empty character (neither space nor comment), this line is used * without reading the next one. * @param theline * buffer receiving the input line * @param theinput * input stream * @param thelen * length of the input buffer (maximal line length) */.

        """
        return _VrmlData.VrmlData_Scene_ReadLine(*args)

    def ReadReal(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        isApplyScale: bool
        isOnlyPositive: bool

        Return
        -------
        theResult: float

        Description
        -----------
        /** * read one real value. */.

        """
        return _VrmlData.VrmlData_Scene_ReadReal(self, *args)

    @staticmethod
    def ReadWord(*args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        theStr: str

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read a singel word from the input stream, delimited by whitespace. */.

        """
        return _VrmlData.VrmlData_Scene_ReadWord(*args)

    def ReadXY(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        theXYZ: gp_XY
        isApplyScale: bool
        isOnlyPositive: bool

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read one doublet of real values. */.

        """
        return _VrmlData.VrmlData_Scene_ReadXY(self, *args)

    def ReadXYZ(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer
        theXYZ: gp_XYZ
        isApplyScale: bool
        isOnlyPositive: bool

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read one triplet of real values. */.

        """
        return _VrmlData.VrmlData_Scene_ReadXYZ(self, *args)

    def SetIndent(self, *args):
        r"""

        Parameters
        ----------
        nSpc: int

        Return
        -------
        None

        Description
        -----------
        /** * store the indentation for vrml output. * @param nspc * number of spaces to insert at every indentation level */.

        """
        return _VrmlData.VrmlData_Scene_SetIndent(self, *args)

    def SetLinearScale(self, *args):
        r"""

        Parameters
        ----------
        theScale: float

        Return
        -------
        None

        Description
        -----------
        /** * set the scale factor that would be further used in methods * readreal, readxyz and readxy. all coordinates, distances and sized are * multiplied by this factor during reading the data. */.

        """
        return _VrmlData.VrmlData_Scene_SetLinearScale(self, *args)

    def SetVrmlDir(self, *args):
        r"""

        Parameters
        ----------
        &: str

        Return
        -------
        None

        Description
        -----------
        /** * add the given directory path to the list of vrml file search directories. * this method forms the list of directories ordered according to the * sequence of this method calls. when an inline node is found, the urls * in that node are matched with these directories. * the last (implicit) search directory is the current process directory * ('.'). it takes effect if the list is empty or if there is no match with * exisiting directories. */.

        """
        return _VrmlData.VrmlData_Scene_SetVrmlDir(self, *args)

    def Status(self, *args):
        r"""
        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * query the status of the previous operation. * normally it should be equal to vrmldata_statusok (no error). */.

        """
        return _VrmlData.VrmlData_Scene_Status(self, *args)

    def VrmlDirIterator(self, *args):
        r"""
        Return
        -------
        NCollection_List<TCollection_ExtendedString >::Iterator

        Description
        -----------
        /** * returns the directory iterator, to check the presence of requested vrml * file in each iterated directory. */.

        """
        return _VrmlData.VrmlData_Scene_VrmlDirIterator(self, *args)

    def WorldInfo(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_WorldInfo>

        Description
        -----------
        /** * query the worldinfo member. */.

        """
        return _VrmlData.VrmlData_Scene_WorldInfo(self, *args)

    def WriteArrIndex(self, *args):
        r"""

        Parameters
        ----------
        thePrefix: char *
        theArr: int * *
        theNbBl: Standard_Size

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write an array of integer indices, for indexedfaceset and indexedlineset. */.

        """
        return _VrmlData.VrmlData_Scene_WriteArrIndex(self, *args)

    def WriteLine(self, *args):
        r"""

        Parameters
        ----------
        theLine0: char *
        theLine1: char * (optional, default to 0)
        theIndent: int (optional, default to 0)

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write a string to the output stream respecting the indentation. the string * can be defined as two substrings that will be separated by a space. * each of the substrings can be null, then it is ignored. if both * are null, then a single newline is output (without indent). * @param theline0 * the first part of string to output * @param theline1 * the second part of string to output * @param theindent * - 0 value ignored. * - negative decreases the current indent and then outputs. * - positive outputs and then increases the current indent. * return * error status of the stream, or a special error if myoutput == null. */.

        """
        return _VrmlData.VrmlData_Scene_WriteLine(self, *args)

    def WriteNode(self, *args):
        r"""

        Parameters
        ----------
        thePrefix: char *
        &: VrmlData_Node

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write the given node to output stream 'myoutput'. */.

        """
        return _VrmlData.VrmlData_Scene_WriteNode(self, *args)

    def WriteXYZ(self, *args):
        r"""

        Parameters
        ----------
        theXYZ: gp_XYZ
        isScale: bool
        thePostfix: char * (optional, default to 0)

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write a triplet of real values on a separate line. * @param thexyz * the value to be output. * @param isscale * if true, then each component is divided by mylinearscale. * @param thepostfix * optional string that is added before the end of the line. */.

        """
        return _VrmlData.VrmlData_Scene_WriteXYZ(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Scene

# Register VrmlData_Scene in _VrmlData:
_VrmlData.VrmlData_Scene_swigregister(VrmlData_Scene)
class VrmlData_ShapeConvert(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theScene: VrmlData_Scene
        theScale: float (optional, default to 1)

        Return
        -------
        None

        Description
        -----------
        /** * constructor. * @param thescene * scene receiving all vrml data. * @param thescale * scale factor, considering that vrml standard specifies coordinates in * meters. so if your data are in mm, you should provide thescale=0.001 */.

        """
        _VrmlData.VrmlData_ShapeConvert_swiginit(self, _VrmlData.new_VrmlData_ShapeConvert(*args))

    def AddShape(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theName: char * (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * add one shape to the internal list, may be called several times with * different shapes. */.

        """
        return _VrmlData.VrmlData_ShapeConvert_AddShape(self, *args)

    def Convert(self, *args):
        r"""

        Parameters
        ----------
        theExtractFaces: bool
        theExtractEdges: bool
        theDeflection: float (optional, default to 0.01)
        theDeflAngle: float (optional, default to 20*M_PI/180)

        Return
        -------
        None

        Description
        -----------
        /** * convert all accumulated shapes and store them in myscene. * the internal data structures are cleared in the end of conversion. * @param theextractfaces * if true, converter extracst faces from the shapes. * @param theextractedges * if true, converter extracts edges from the shapes. * @param thedeflection * deflection for tessellation of geometrical lines/surfaces. existing mesh * is used if its deflection is smaller than the one given by this * parameter. * @param thedeflangle * angular deflection for tessellation of geometrical lines. */.

        """
        return _VrmlData.VrmlData_ShapeConvert_Convert(self, *args)

    def ConvertDocument(self, *args):
        r"""

        Parameters
        ----------
        theDoc: TDocStd_Document

        Return
        -------
        None

        Description
        -----------
        /** * add all shapes start from given document with colors and names to the internal structure */.

        """
        return _VrmlData.VrmlData_ShapeConvert_ConvertDocument(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_ShapeConvert

# Register VrmlData_ShapeConvert in _VrmlData:
_VrmlData.VrmlData_ShapeConvert_swigregister(VrmlData_ShapeConvert)
class VrmlData_Appearance(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_Appearance_swiginit(self, _VrmlData.new_VrmlData_Appearance(*args))

    def Material(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Material>

        Description
        -----------
        /** * query the material */.

        """
        return _VrmlData.VrmlData_Appearance_Material(self, *args)

    def SetMaterial(self, *args):
        r"""

        Parameters
        ----------
        theMat: VrmlData_Material

        Return
        -------
        None

        Description
        -----------
        /** * set the material */.

        """
        return _VrmlData.VrmlData_Appearance_SetMaterial(self, *args)

    def SetTexture(self, *args):
        r"""

        Parameters
        ----------
        theTexture: VrmlData_Texture

        Return
        -------
        None

        Description
        -----------
        /** * set the texture */.

        """
        return _VrmlData.VrmlData_Appearance_SetTexture(self, *args)

    def SetTextureTransform(self, *args):
        r"""

        Parameters
        ----------
        theTT: VrmlData_TextureTransform

        Return
        -------
        None

        Description
        -----------
        /** * set the texture transform */.

        """
        return _VrmlData.VrmlData_Appearance_SetTextureTransform(self, *args)

    def Texture(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Texture>

        Description
        -----------
        /** * query the texture */.

        """
        return _VrmlData.VrmlData_Appearance_Texture(self, *args)

    def TextureTransform(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_TextureTransform>

        Description
        -----------
        /** * query the texturetransform */.

        """
        return _VrmlData.VrmlData_Appearance_TextureTransform(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Appearance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Appearance

# Register VrmlData_Appearance in _VrmlData:
_VrmlData.VrmlData_Appearance_swigregister(VrmlData_Appearance)
class VrmlData_Geometry(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def TShape(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopoDS_TShape>

        Description
        -----------
        /** * query the shape. this method checks the flag myismodified; if true it * should rebuild the shape presentation. */.

        """
        return _VrmlData.VrmlData_Geometry_TShape(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Geometry_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Geometry

# Register VrmlData_Geometry in _VrmlData:
_VrmlData.VrmlData_Geometry_swigregister(VrmlData_Geometry)
class VrmlData_Group(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        isTransform: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        /** * empty constructor. * @param istransform * true if the group of type transform is defined * @param thealloc * allocator used for the list of children */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        isTransform: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        /** * constructor. * @param thename * name of the group node * @param istransform * true if the group of type transform is defined * @param thealloc * allocator used for the list of children */.

        """
        _VrmlData.VrmlData_Group_swiginit(self, _VrmlData.new_VrmlData_Group(*args))

    def AddNode(self, *args):
        r"""

        Parameters
        ----------
        theNode: VrmlData_Node

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * add one node to the group. */.

        """
        return _VrmlData.VrmlData_Group_AddNode(self, *args)

    def Box(self, *args):
        r"""
        Return
        -------
        Bnd_B3f

        Description
        -----------
        /** * query the bounding box. */.

        """
        return _VrmlData.VrmlData_Group_Box(self, *args)

    def FindNode(self, *args):
        r"""

        Parameters
        ----------
        theName: char *
        theLocation: gp_Trsf

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * find a node by its name, inside this group * @param thename * name of the node to search for. * @param thelocation * location of the found node with respect to this group. */.

        """
        return _VrmlData.VrmlData_Group_FindNode(self, *args)

    def GetTransform(self, *args):
        r"""
        Return
        -------
        gp_Trsf

        Description
        -----------
        No available documentation.

        """
        return _VrmlData.VrmlData_Group_GetTransform(self, *args)

    def IsTransform(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * query if the node is transform type. */.

        """
        return _VrmlData.VrmlData_Group_IsTransform(self, *args)

    def NodeIterator(self, *args):
        r"""
        Return
        -------
        Iterator

        Description
        -----------
        /** * create iterator on nodes belonging to the group. */.

        """
        return _VrmlData.VrmlData_Group_NodeIterator(self, *args)

    def RemoveNode(self, *args):
        r"""

        Parameters
        ----------
        theNode: VrmlData_Node

        Return
        -------
        bool

        Description
        -----------
        /** * remove one node from the group. * return * true if the node was located and removed, false if none removed. */.

        """
        return _VrmlData.VrmlData_Group_RemoveNode(self, *args)

    def SetBox(self, *args):
        r"""

        Parameters
        ----------
        theBox: Bnd_B3f

        Return
        -------
        None

        Description
        -----------
        /** * set the bounding box. */.

        """
        return _VrmlData.VrmlData_Group_SetBox(self, *args)

    def SetTransform(self, *args):
        r"""

        Parameters
        ----------
        theTrsf: gp_Trsf

        Return
        -------
        bool

        Description
        -----------
        /** * set the transformation. returns true if the group is transform type, * otherwise do nothing and return false. */.

        """
        return _VrmlData.VrmlData_Group_SetTransform(self, *args)

    def Shape(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        pMapApp: VrmlData_DataMapOfShapeAppearance *

        Return
        -------
        None

        Description
        -----------
        /** * get the shape representing the group geometry. */.

        """
        return _VrmlData.VrmlData_Group_Shape(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Group_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Group

# Register VrmlData_Group in _VrmlData:
_VrmlData.VrmlData_Group_swigregister(VrmlData_Group)
class VrmlData_Material(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        theAmbientIntensity: float (optional, default to -1)
        theShininess: float (optional, default to -1)
        theTransparency: float (optional, default to -1)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_Material_swiginit(self, _VrmlData.new_VrmlData_Material(*args))

    def AmbientIntensity(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        /** * query the ambient intensity value */.

        """
        return _VrmlData.VrmlData_Material_AmbientIntensity(self, *args)

    def DiffuseColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        /** * query the diffuse color */.

        """
        return _VrmlData.VrmlData_Material_DiffuseColor(self, *args)

    def EmissiveColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        /** * query the emissive color */.

        """
        return _VrmlData.VrmlData_Material_EmissiveColor(self, *args)

    def SetAmbientIntensity(self, *args):
        r"""

        Parameters
        ----------
        theAmbientIntensity: float

        Return
        -------
        None

        Description
        -----------
        /** * set the ambient intensity value */.

        """
        return _VrmlData.VrmlData_Material_SetAmbientIntensity(self, *args)

    def SetDiffuseColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        /** * query the diffuse color */.

        """
        return _VrmlData.VrmlData_Material_SetDiffuseColor(self, *args)

    def SetEmissiveColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        /** * query the emissive color */.

        """
        return _VrmlData.VrmlData_Material_SetEmissiveColor(self, *args)

    def SetShininess(self, *args):
        r"""

        Parameters
        ----------
        theShininess: float

        Return
        -------
        None

        Description
        -----------
        /** * set the shininess value */.

        """
        return _VrmlData.VrmlData_Material_SetShininess(self, *args)

    def SetSpecularColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        /** * query the specular color */.

        """
        return _VrmlData.VrmlData_Material_SetSpecularColor(self, *args)

    def SetTransparency(self, *args):
        r"""

        Parameters
        ----------
        theTransparency: float

        Return
        -------
        None

        Description
        -----------
        /** * set the transparency value */.

        """
        return _VrmlData.VrmlData_Material_SetTransparency(self, *args)

    def Shininess(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        /** * query the shininess value */.

        """
        return _VrmlData.VrmlData_Material_Shininess(self, *args)

    def SpecularColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        /** * query the specular color */.

        """
        return _VrmlData.VrmlData_Material_SpecularColor(self, *args)

    def Transparency(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        /** * query the transparency value */.

        """
        return _VrmlData.VrmlData_Material_Transparency(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Material_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Material

# Register VrmlData_Material in _VrmlData:
_VrmlData.VrmlData_Material_swigregister(VrmlData_Material)
class VrmlData_ShapeNode(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_ShapeNode_swiginit(self, _VrmlData.new_VrmlData_ShapeNode(*args))

    def Appearance(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Appearance>

        Description
        -----------
        /** * query the appearance. */.

        """
        return _VrmlData.VrmlData_ShapeNode_Appearance(self, *args)

    def Geometry(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Geometry>

        Description
        -----------
        /** * query the geometry. */.

        """
        return _VrmlData.VrmlData_ShapeNode_Geometry(self, *args)

    def SetAppearance(self, *args):
        r"""

        Parameters
        ----------
        theAppear: VrmlData_Appearance

        Return
        -------
        None

        Description
        -----------
        /** * set the appearance */.

        """
        return _VrmlData.VrmlData_ShapeNode_SetAppearance(self, *args)

    def SetGeometry(self, *args):
        r"""

        Parameters
        ----------
        theGeometry: VrmlData_Geometry

        Return
        -------
        None

        Description
        -----------
        /** * set the geometry */.

        """
        return _VrmlData.VrmlData_ShapeNode_SetGeometry(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_ShapeNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_ShapeNode

# Register VrmlData_ShapeNode in _VrmlData:
_VrmlData.VrmlData_ShapeNode_swigregister(VrmlData_ShapeNode)
class VrmlData_TextureCoordinate(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        nPoints: size_t (optional, default to 0)
        arrPoints: gp_XY * (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_TextureCoordinate_swiginit(self, _VrmlData.new_VrmlData_TextureCoordinate(*args))

    def AllocateValues(self, *args):
        r"""

        Parameters
        ----------
        theLength: Standard_Size

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _VrmlData.VrmlData_TextureCoordinate_AllocateValues(self, *args)

    def Length(self, *args):
        r"""
        Return
        -------
        size_t

        Description
        -----------
        /** * query the number of points */.

        """
        return _VrmlData.VrmlData_TextureCoordinate_Length(self, *args)

    def Points(self, *args):
        r"""
        Return
        -------
        gp_XY *

        Description
        -----------
        /** * query the points */.

        """
        return _VrmlData.VrmlData_TextureCoordinate_Points(self, *args)

    def SetPoints(self, *args):
        r"""

        Parameters
        ----------
        nPoints: size_t
        arrPoints: gp_XY *

        Return
        -------
        None

        Description
        -----------
        /** * set the points array */.

        """
        return _VrmlData.VrmlData_TextureCoordinate_SetPoints(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_TextureCoordinate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_TextureCoordinate

# Register VrmlData_TextureCoordinate in _VrmlData:
_VrmlData.VrmlData_TextureCoordinate_swigregister(VrmlData_TextureCoordinate)
class VrmlData_UnknownNode(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor. */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char * (optional, default to 0)
        theTitle: char * (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * constructor. */.

        """
        _VrmlData.VrmlData_UnknownNode_swiginit(self, _VrmlData.new_VrmlData_UnknownNode(*args))

    def GetTitle(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        /** * query the title of the unknown node. */.

        """
        return _VrmlData.VrmlData_UnknownNode_GetTitle(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_UnknownNode_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_UnknownNode

# Register VrmlData_UnknownNode in _VrmlData:
_VrmlData.VrmlData_UnknownNode_swigregister(VrmlData_UnknownNode)
class VrmlData_WorldInfo(VrmlData_Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor. */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char * (optional, default to 0)
        theTitle: char * (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * constructor. */.

        """
        _VrmlData.VrmlData_WorldInfo_swiginit(self, _VrmlData.new_VrmlData_WorldInfo(*args))

    def AddInfo(self, *args):
        r"""

        Parameters
        ----------
        theString: char *

        Return
        -------
        None

        Description
        -----------
        /** * add a string to the list of info strings. */.

        """
        return _VrmlData.VrmlData_WorldInfo_AddInfo(self, *args)

    def InfoIterator(self, *args):
        r"""
        Return
        -------
        NCollection_List< char * >::Iterator

        Description
        -----------
        /** * return the iterator of info strings. */.

        """
        return _VrmlData.VrmlData_WorldInfo_InfoIterator(self, *args)

    def SetTitle(self, *args):
        r"""

        Parameters
        ----------
        theString: char *

        Return
        -------
        None

        Description
        -----------
        /** * set or modify the title. */.

        """
        return _VrmlData.VrmlData_WorldInfo_SetTitle(self, *args)

    def Title(self, *args):
        r"""
        Return
        -------
        char *

        Description
        -----------
        /** * query the title string. */.

        """
        return _VrmlData.VrmlData_WorldInfo_Title(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_WorldInfo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_WorldInfo

# Register VrmlData_WorldInfo in _VrmlData:
_VrmlData.VrmlData_WorldInfo_swigregister(VrmlData_WorldInfo)
class VrmlData_Box(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        sizeX: float (optional, default to 2)
        sizeY: float (optional, default to 2)
        sizeZ: float (optional, default to 2)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_Box_swiginit(self, _VrmlData.new_VrmlData_Box(*args))

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: gp_XYZ

        Return
        -------
        None

        Description
        -----------
        /** * set the box size */.

        """
        return _VrmlData.VrmlData_Box_SetSize(self, *args)

    def Size(self, *args):
        r"""
        Return
        -------
        gp_XYZ

        Description
        -----------
        /** * query the box size */.

        """
        return _VrmlData.VrmlData_Box_Size(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Box_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Box

# Register VrmlData_Box in _VrmlData:
_VrmlData.VrmlData_Box_swigregister(VrmlData_Box)
class VrmlData_Color(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor. */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        nColors: size_t (optional, default to 0)
        arrColors: gp_XYZ * (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * constructor. */.

        """
        _VrmlData.VrmlData_Color_swiginit(self, _VrmlData.new_VrmlData_Color(*args))

    def Clone(self, *args):
        r"""

        Parameters
        ----------
        theOther: VrmlData_Node

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * create a copy of this node. * if the parameter is null, a new copied node is created. otherwise new node * is not created, but rather the given one is modified.<p> */.

        """
        return _VrmlData.VrmlData_Color_Clone(self, *args)

    def Color(self, *args):
        r"""

        Parameters
        ----------
        i: int

        Return
        -------
        Quantity_Color

        Description
        -----------
        /** * query one color * @param i * index in the array of colors [0 .. n-1] * return * the color value for the index. if index irrelevant, returns (0., 0., 0.) */.

        """
        return _VrmlData.VrmlData_Color_Color(self, *args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read the node from input stream. */.

        """
        return _VrmlData.VrmlData_Color_Read(self, *args)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        nColors: size_t
        arrColors: gp_XYZ *

        Return
        -------
        None

        Description
        -----------
        /** * set the array data */.

        """
        return _VrmlData.VrmlData_Color_SetColors(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        thePrefix: char *

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write the node to the scene output. */.

        """
        return _VrmlData.VrmlData_Color_Write(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Color_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Color

# Register VrmlData_Color in _VrmlData:
_VrmlData.VrmlData_Color_swigregister(VrmlData_Color)
class VrmlData_Cone(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        theBottomRadius: float (optional, default to 1)
        theHeight: float (optional, default to 2)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_Cone_swiginit(self, _VrmlData.new_VrmlData_Cone(*args))

    def BottomRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        /** * query the bottom radius */.

        """
        return _VrmlData.VrmlData_Cone_BottomRadius(self, *args)

    def HasBottom(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * query if the bottom circle is included */.

        """
        return _VrmlData.VrmlData_Cone_HasBottom(self, *args)

    def HasSide(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * query if the side surface is included */.

        """
        return _VrmlData.VrmlData_Cone_HasSide(self, *args)

    def Height(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        /** * query the height */.

        """
        return _VrmlData.VrmlData_Cone_Height(self, *args)

    def SetBottomRadius(self, *args):
        r"""

        Parameters
        ----------
        theRadius: float

        Return
        -------
        None

        Description
        -----------
        /** * set the bottom radius */.

        """
        return _VrmlData.VrmlData_Cone_SetBottomRadius(self, *args)

    def SetFaces(self, *args):
        r"""

        Parameters
        ----------
        hasBottom: bool
        hasSide: bool

        Return
        -------
        None

        Description
        -----------
        /** * set which faces are included */.

        """
        return _VrmlData.VrmlData_Cone_SetFaces(self, *args)

    def SetHeight(self, *args):
        r"""

        Parameters
        ----------
        theHeight: float

        Return
        -------
        None

        Description
        -----------
        /** * set the height */.

        """
        return _VrmlData.VrmlData_Cone_SetHeight(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Cone_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Cone

# Register VrmlData_Cone in _VrmlData:
_VrmlData.VrmlData_Cone_swigregister(VrmlData_Cone)
class VrmlData_Coordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        nPoints: size_t (optional, default to 0)
        arrPoints: gp_XYZ * (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_Coordinate_swiginit(self, _VrmlData.new_VrmlData_Coordinate(*args))

    def Clone(self, *args):
        r"""

        Parameters
        ----------
        theOther: VrmlData_Node

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * create a copy of this node. * if the parameter is null, a new copied node is created. otherwise new node * is not created, but rather the given one is modified. */.

        """
        return _VrmlData.VrmlData_Coordinate_Clone(self, *args)

    def Coordinate(self, *args):
        r"""

        Parameters
        ----------
        i: int

        Return
        -------
        gp_XYZ

        Description
        -----------
        /** * query one point * @param i * index in the array of points [0 .. n-1] * return * the coordinate for the index. if index irrelevant, returns (0., 0., 0.) */.

        """
        return _VrmlData.VrmlData_Coordinate_Coordinate(self, *args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read the node from input stream. */.

        """
        return _VrmlData.VrmlData_Coordinate_Read(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        thePrefix: char *

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write the node to the scene output. */.

        """
        return _VrmlData.VrmlData_Coordinate_Write(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Coordinate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Coordinate

# Register VrmlData_Coordinate in _VrmlData:
_VrmlData.VrmlData_Coordinate_swigregister(VrmlData_Coordinate)
class VrmlData_Cylinder(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        theRadius: float (optional, default to 1)
        theHeight: float (optional, default to 2)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_Cylinder_swiginit(self, _VrmlData.new_VrmlData_Cylinder(*args))

    def HasBottom(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * query if the bottom circle is included */.

        """
        return _VrmlData.VrmlData_Cylinder_HasBottom(self, *args)

    def HasSide(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * query if the side surface is included */.

        """
        return _VrmlData.VrmlData_Cylinder_HasSide(self, *args)

    def HasTop(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * query if the top surface is included */.

        """
        return _VrmlData.VrmlData_Cylinder_HasTop(self, *args)

    def Height(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        /** * query the height */.

        """
        return _VrmlData.VrmlData_Cylinder_Height(self, *args)

    def Radius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        /** * query the radius */.

        """
        return _VrmlData.VrmlData_Cylinder_Radius(self, *args)

    def SetFaces(self, *args):
        r"""

        Parameters
        ----------
        hasBottom: bool
        hasSide: bool
        hasTop: bool

        Return
        -------
        None

        Description
        -----------
        /** * set which faces are included */.

        """
        return _VrmlData.VrmlData_Cylinder_SetFaces(self, *args)

    def SetHeight(self, *args):
        r"""

        Parameters
        ----------
        theHeight: float

        Return
        -------
        None

        Description
        -----------
        /** * set the height */.

        """
        return _VrmlData.VrmlData_Cylinder_SetHeight(self, *args)

    def SetRadius(self, *args):
        r"""

        Parameters
        ----------
        theRadius: float

        Return
        -------
        None

        Description
        -----------
        /** * set the radius */.

        """
        return _VrmlData.VrmlData_Cylinder_SetRadius(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Cylinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Cylinder

# Register VrmlData_Cylinder in _VrmlData:
_VrmlData.VrmlData_Cylinder_swigregister(VrmlData_Cylinder)
class VrmlData_ImageTexture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        theURL: char * (optional, default to 0)
        theRepS: bool (optional, default to Standard_False)
        theRepT: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_ImageTexture_swiginit(self, _VrmlData.new_VrmlData_ImageTexture(*args))

    def Clone(self, *args):
        r"""

        Parameters
        ----------
        theOther: VrmlData_Node

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * create a copy of this node. * if the parameter is null, a new copied node is created. otherwise new node * is not created, but rather the given one is modified. */.

        """
        return _VrmlData.VrmlData_ImageTexture_Clone(self, *args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read the node from input stream. */.

        """
        return _VrmlData.VrmlData_ImageTexture_Read(self, *args)

    def URL(self, *args):
        r"""
        Return
        -------
        NCollection_List<TCollection_AsciiString>

        Description
        -----------
        /** * query the associated url. */.

        """
        return _VrmlData.VrmlData_ImageTexture_URL(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        thePrefix: char *

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write the node to output stream. */.

        """
        return _VrmlData.VrmlData_ImageTexture_Write(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_ImageTexture_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_ImageTexture

# Register VrmlData_ImageTexture in _VrmlData:
_VrmlData.VrmlData_ImageTexture_swigregister(VrmlData_ImageTexture)
class VrmlData_IndexedLineSet(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor. */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        isColorPerVertex: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        /** * constructor. */.

        """
        _VrmlData.VrmlData_IndexedLineSet_swiginit(self, _VrmlData.new_VrmlData_IndexedLineSet(*args))

    def ArrayColorInd(self, *args):
        r"""

        Parameters
        ----------
        arrColorInd: int * *

        Return
        -------
        size_t

        Description
        -----------
        /** * query the array of color indice * @param arrcolorind * <tt>[out]</tt> array of colorindex as it is described in vrml2.0 spec * return * number of integers in the array arrcolorind. */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_ArrayColorInd(self, *args)

    def Colors(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Color>

        Description
        -----------
        /** * query the colors. */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_Colors(self, *args)

    def Coordinates(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Coordinate>

        Description
        -----------
        /** * query the coordinates. */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_Coordinates(self, *args)

    def GetColor(self, *args):
        r"""

        Parameters
        ----------
        iFace: int
        iVertex: int

        Return
        -------
        Quantity_Color

        Description
        -----------
        /** * query a color for one node in the given element. the color is * interpreted according to fields mycolors, myarrcolorind, * mycolorpervertex, as defined in vrml 2.0. * @param iface * rank of the polygon [0 .. n-1] * @param ivertex * rank of the vertex in the polygon [0 .. m-1]. this parameter is ignored * if (mycolorpervertex == false) * return * color value (rgb); if the color is indefinite then returns (0., 0., 0.) */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_GetColor(self, *args)

    def Polygon(self, *args):
        r"""

        Parameters
        ----------
        iPolygon: int
        outIndice: int *

        Return
        -------
        int

        Description
        -----------
        /** * query one polygon. * @param ipolygon * rank of the polygon [0 .. n-1] * @param outindice * <tt>[out]</tt> array of vertex indice * return * number of vertice in the polygon - the dimension of outindice array */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_Polygon(self, *args)

    def Polygons(self, *args):
        r"""

        Parameters
        ----------
        arrPolygons: int * *

        Return
        -------
        size_t

        Description
        -----------
        /** * query the array of polygons */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_Polygons(self, *args)

    def SetColorInd(self, *args):
        r"""

        Parameters
        ----------
        nIndice: Standard_Size
        theIndice: int * *

        Return
        -------
        None

        Description
        -----------
        /** * set the colors array of indice */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_SetColorInd(self, *args)

    def SetColorPerVertex(self, *args):
        r"""

        Parameters
        ----------
        isColorPerVertex: bool

        Return
        -------
        None

        Description
        -----------
        /** * set the boolean value 'colorpervertex' */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_SetColorPerVertex(self, *args)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        theColors: VrmlData_Color

        Return
        -------
        None

        Description
        -----------
        /** * set the color node */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_SetColors(self, *args)

    def SetCoordinates(self, *args):
        r"""

        Parameters
        ----------
        theCoord: VrmlData_Coordinate

        Return
        -------
        None

        Description
        -----------
        /** * set the nodes */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_SetCoordinates(self, *args)

    def SetPolygons(self, *args):
        r"""

        Parameters
        ----------
        nPolygons: Standard_Size
        thePolygons: int * *

        Return
        -------
        None

        Description
        -----------
        /** * set the polygons */.

        """
        return _VrmlData.VrmlData_IndexedLineSet_SetPolygons(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_IndexedLineSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_IndexedLineSet

# Register VrmlData_IndexedLineSet in _VrmlData:
_VrmlData.VrmlData_IndexedLineSet_swigregister(VrmlData_IndexedLineSet)
class VrmlData_Normal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        nVec: size_t (optional, default to 0)
        arrVec: gp_XYZ * (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_Normal_swiginit(self, _VrmlData.new_VrmlData_Normal(*args))

    def Clone(self, *args):
        r"""

        Parameters
        ----------
        theOther: VrmlData_Node

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * create a copy of this node. * if the parameter is null, a new copied node is created. otherwise new node * is not created, but rather the given one is modified. */.

        """
        return _VrmlData.VrmlData_Normal_Clone(self, *args)

    def Normal(self, *args):
        r"""

        Parameters
        ----------
        i: int

        Return
        -------
        gp_XYZ

        Description
        -----------
        /** * query one normal * @param i * index in the array of normals [0 .. n-1] * return * the normal value for the index. if index irrelevant, returns (0., 0., 0.) */.

        """
        return _VrmlData.VrmlData_Normal_Normal(self, *args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read the node from input stream. */.

        """
        return _VrmlData.VrmlData_Normal_Read(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        thePrefix: char *

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write the node to the scene output. */.

        """
        return _VrmlData.VrmlData_Normal_Write(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Normal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Normal

# Register VrmlData_Normal in _VrmlData:
_VrmlData.VrmlData_Normal_swigregister(VrmlData_Normal)
class VrmlData_Sphere(VrmlData_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        theRadius: float (optional, default to 1)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_Sphere_swiginit(self, _VrmlData.new_VrmlData_Sphere(*args))

    def Radius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        /** * query the sphere radius */.

        """
        return _VrmlData.VrmlData_Sphere_Radius(self, *args)

    def SetRadius(self, *args):
        r"""

        Parameters
        ----------
        theRadius: float

        Return
        -------
        None

        Description
        -----------
        /** * set the spere radius */.

        """
        return _VrmlData.VrmlData_Sphere_SetRadius(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_Sphere_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _VrmlData.delete_VrmlData_Sphere

# Register VrmlData_Sphere in _VrmlData:
_VrmlData.VrmlData_Sphere_swigregister(VrmlData_Sphere)
class VrmlData_IndexedFaceSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        /** * empty constructor */.

        Parameters
        ----------
        theScene: VrmlData_Scene
        theName: char *
        isCCW: bool (optional, default to Standard_True)
        isSolid: bool (optional, default to Standard_True)
        isConvex: bool (optional, default to Standard_True)
        theCreaseAngle: float (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        /** * constructor */.

        """
        _VrmlData.VrmlData_IndexedFaceSet_swiginit(self, _VrmlData.new_VrmlData_IndexedFaceSet(*args))

    def ArrayColorInd(self, *args):
        r"""

        Parameters
        ----------
        arrColorInd: int * *

        Return
        -------
        size_t

        Description
        -----------
        /** * query the array of color indice * @param arrcolorind * <tt>[out]</tt> array of colorindex as it is described in vrml2.0 spec * return * number of integers in the array arrcolorind. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_ArrayColorInd(self, *args)

    def ArrayNormalInd(self, *args):
        r"""

        Parameters
        ----------
        arrNormalInd: int * *

        Return
        -------
        size_t

        Description
        -----------
        /** * query the array of normal indice * @param arrnormalind * <tt>[out]</tt> array of normalindex as it is described in vrml2.0 spec * return * number of integers in the array arrnormalind. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_ArrayNormalInd(self, *args)

    def ArrayTextureCoordInd(self, *args):
        r"""

        Parameters
        ----------
        arrTextureCoordInd: int * *

        Return
        -------
        size_t

        Description
        -----------
        /** * query the array of texture coordinate indice * @param arrtexturecoordind * <tt>[out]</tt> array of texcoordindex as it is described in vrml2.0 spec * return * number of integers in the array texcoordindex. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_ArrayTextureCoordInd(self, *args)

    def Clone(self, *args):
        r"""

        Parameters
        ----------
        theOther: VrmlData_Node

        Return
        -------
        opencascade::handle<VrmlData_Node>

        Description
        -----------
        /** * create a copy of this node. * if the parameter is null, a new copied node is created. otherwise new node * is not created, but rather the given one is modified. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_Clone(self, *args)

    def Colors(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Color>

        Description
        -----------
        /** * query the colors. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_Colors(self, *args)

    def Coordinates(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Coordinate>

        Description
        -----------
        /** * query the coordinates. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_Coordinates(self, *args)

    def GetColor(self, *args):
        r"""

        Parameters
        ----------
        iFace: int
        iVertex: int

        Return
        -------
        Quantity_Color

        Description
        -----------
        /** * query a color for one node in the given element. the color is * interpreted according to fields mycolors, myarrcolorind, * mycolorpervertex, as defined in vrml 2.0. * @param iface * rank of the polygon [0 .. n-1] * @param ivertex * rank of the vertex in the polygon [0 .. m-1]. this parameter is ignored * if (mycolorpervertex == false) * return * color value (rgb); if the color is indefinite then returns (0., 0., 0.) */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_GetColor(self, *args)

    def IndiceNormals(self, *args):
        r"""

        Parameters
        ----------
        iFace: int
        outIndice: int *

        Return
        -------
        int

        Description
        -----------
        /** * query normals indice for one face. this method should be called after * checking myarrnormalind != null, otherwise exception will be thrown. * @param iface * rank of the face [0 .. n-1] * @param outindice * <tt>[out]</tt> array of normals indice * return * number of indice in the array - the dimension of outindice array */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_IndiceNormals(self, *args)

    def IsDefault(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        /** * returns true if the node is default, so that it should not be written. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_IsDefault(self, *args)

    def Normals(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_Normal>

        Description
        -----------
        /** * query the normals. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_Normals(self, *args)

    def Polygon(self, *args):
        r"""

        Parameters
        ----------
        iFace: int
        outIndice: int *

        Return
        -------
        int

        Description
        -----------
        /** * query one polygon. * @param iface * rank of the polygon [0 .. n-1] * @param outindice * <tt>[out]</tt> array of vertex indice * return * number of vertice in the polygon - the dimension of outindice array */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_Polygon(self, *args)

    def Polygons(self, *args):
        r"""

        Parameters
        ----------
        arrPolygons: int * *

        Return
        -------
        size_t

        Description
        -----------
        /** * query the array of polygons */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_Polygons(self, *args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        theBuffer: VrmlData_InBuffer

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * read the node from input stream. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_Read(self, *args)

    def SetColorInd(self, *args):
        r"""

        Parameters
        ----------
        nIndice: Standard_Size
        theIndice: int * *

        Return
        -------
        None

        Description
        -----------
        /** * set the colors array of indice */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetColorInd(self, *args)

    def SetColorPerVertex(self, *args):
        r"""

        Parameters
        ----------
        isColorPerVertex: bool

        Return
        -------
        None

        Description
        -----------
        /** * set the boolean value 'colorpervertex' */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetColorPerVertex(self, *args)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        theColors: VrmlData_Color

        Return
        -------
        None

        Description
        -----------
        /** * set the color node */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetColors(self, *args)

    def SetCoordinates(self, *args):
        r"""

        Parameters
        ----------
        theCoord: VrmlData_Coordinate

        Return
        -------
        None

        Description
        -----------
        /** * set the nodes */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetCoordinates(self, *args)

    def SetNormalInd(self, *args):
        r"""

        Parameters
        ----------
        nIndice: Standard_Size
        theIndice: int * *

        Return
        -------
        None

        Description
        -----------
        /** * set the normals array of indice */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetNormalInd(self, *args)

    def SetNormalPerVertex(self, *args):
        r"""

        Parameters
        ----------
        isNormalPerVertex: bool

        Return
        -------
        None

        Description
        -----------
        /** * set the boolean value 'normalpervertex' */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetNormalPerVertex(self, *args)

    def SetNormals(self, *args):
        r"""

        Parameters
        ----------
        theNormals: VrmlData_Normal

        Return
        -------
        None

        Description
        -----------
        /** * set the normals node */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetNormals(self, *args)

    def SetPolygons(self, *args):
        r"""

        Parameters
        ----------
        nPolygons: Standard_Size
        thePolygons: int * *

        Return
        -------
        None

        Description
        -----------
        /** * set the polygons */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetPolygons(self, *args)

    def SetTextureCoordInd(self, *args):
        r"""

        Parameters
        ----------
        nIndice: Standard_Size
        theIndice: int * *

        Return
        -------
        None

        Description
        -----------
        /** * set the texcoordiante array of indice */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetTextureCoordInd(self, *args)

    def SetTextureCoords(self, *args):
        r"""

        Parameters
        ----------
        tc: VrmlData_TextureCoordinate

        Return
        -------
        None

        Description
        -----------
        /** * set the texture coordinate node */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_SetTextureCoords(self, *args)

    def TShape(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopoDS_TShape>

        Description
        -----------
        /** * query the shape. this method checks the flag myismodified; if true it * should rebuild the shape presentation. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_TShape(self, *args)

    def TextureCoords(self, *args):
        r"""
        Return
        -------
        opencascade::handle<VrmlData_TextureCoordinate>

        Description
        -----------
        /** * query the texture coordinates. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_TextureCoords(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        thePrefix: char *

        Return
        -------
        VrmlData_ErrorStatus

        Description
        -----------
        /** * write the node to output stream. */.

        """
        return _VrmlData.VrmlData_IndexedFaceSet_Write(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_VrmlData_IndexedFaceSet_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def GetNormal(self):
    	pass

    __swig_destroy__ = _VrmlData.delete_VrmlData_IndexedFaceSet

# Register VrmlData_IndexedFaceSet in _VrmlData:
_VrmlData.VrmlData_IndexedFaceSet_swigregister(VrmlData_IndexedFaceSet)

@classnotwrapped
class VrmlData_InBuffer:
	pass

@classnotwrapped
class VrmlData_ArrayVec3d:
	pass

@classnotwrapped
class VrmlData_Texture:
	pass

@classnotwrapped
class VrmlData_TextureTransform:
	pass

@classnotwrapped
class VrmlData_Faceted:
	pass





@deprecated
def VrmlData_Node_GlobalIndent(*args):
	return VrmlData_Node.GlobalIndent(*args)

@deprecated
def VrmlData_Node_OK(*args):
	return VrmlData_Node.OK(*args)

@deprecated
def VrmlData_Node_OK(*args):
	return VrmlData_Node.OK(*args)

@deprecated
def VrmlData_Node_ReadBoolean(*args):
	return VrmlData_Node.ReadBoolean(*args)

@deprecated
def VrmlData_Node_ReadInteger(*args):
	return VrmlData_Node.ReadInteger(*args)

@deprecated
def VrmlData_Node_ReadMultiString(*args):
	return VrmlData_Node.ReadMultiString(*args)

@deprecated
def VrmlData_Node_ReadString(*args):
	return VrmlData_Node.ReadString(*args)

@deprecated
def VrmlData_Scene_ReadLine(*args):
	return VrmlData_Scene.ReadLine(*args)

@deprecated
def VrmlData_Scene_ReadWord(*args):
	return VrmlData_Scene.ReadWord(*args)



