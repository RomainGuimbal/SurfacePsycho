# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
StepAP209 module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_stepap209.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _StepAP209
else:
    import _StepAP209

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP209.delete_SwigPyIterator

    def value(self):
        return _StepAP209.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepAP209.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepAP209.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepAP209.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepAP209.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepAP209.SwigPyIterator_copy(self)

    def next(self):
        return _StepAP209.SwigPyIterator_next(self)

    def __next__(self):
        return _StepAP209.SwigPyIterator___next__(self)

    def previous(self):
        return _StepAP209.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepAP209.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepAP209.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepAP209.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepAP209.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepAP209.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepAP209.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepAP209.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _StepAP209:
_StepAP209.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _StepAP209.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.STEPConstruct
import OCC.Core.Transfer
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.Interface
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Resource
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.StepAP203
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.StepVisual
import OCC.Core.Quantity
import OCC.Core.StepFEA
import OCC.Core.StepElement

from enum import IntEnum
from OCC.Core.Exception import *



class StepAP209_Construct(OCC.Core.STEPConstruct.STEPConstruct_Tool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an empty tool.

        Parameters
        ----------
        WS: XSControl_WorkSession

        Return
        -------
        None

        Description
        -----------
        Creates a tool and initializes it.

        """
        _StepAP209.StepAP209_Construct_swiginit(self, _StepAP209.new_StepAP209_Construct(*args))

    def CreateAP203Structure(self, *args):
        r"""
        Return
        -------
        opencascade::handle<StepData_StepModel>

        Description
        -----------
        Create ap203 structure from existing ap209 structure.

        """
        return _StepAP209.StepAP209_Construct_CreateAP203Structure(self, *args)

    def CreateAdding203Entities(self, *args):
        r"""

        Parameters
        ----------
        PD: StepBasic_ProductDefinition
        aModel: StepData_StepModel

        Return
        -------
        bool

        Description
        -----------
        Create approval.. , date.. , time.. , person.. and organization.. entities for 203 structure.

        """
        return _StepAP209.StepAP209_Construct_CreateAdding203Entities(self, *args)

    def CreateAddingEntities(self, *args):
        r"""

        Parameters
        ----------
        AnaPD: StepBasic_ProductDefinition

        Return
        -------
        bool

        Description
        -----------
        Create approval.. , date.. , time.. , person.. and organization.. entities for analysis structure.

        """
        return _StepAP209.StepAP209_Construct_CreateAddingEntities(self, *args)

    def CreateAnalysStructure(self, *args):
        r"""

        Parameters
        ----------
        Prod: StepBasic_Product

        Return
        -------
        bool

        Description
        -----------
        Create empty structure for idealized_analysis_shape.

        """
        return _StepAP209.StepAP209_Construct_CreateAnalysStructure(self, *args)

    def CreateFeaStructure(self, *args):
        r"""

        Parameters
        ----------
        Prod: StepBasic_Product

        Return
        -------
        bool

        Description
        -----------
        Create fea structure.

        """
        return _StepAP209.StepAP209_Construct_CreateFeaStructure(self, *args)

    def FeaModel(self, *args):
        r"""

        Parameters
        ----------
        Prod: StepBasic_Product

        Return
        -------
        opencascade::handle<StepFEA_FeaModel>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        PDF: StepBasic_ProductDefinitionFormation

        Return
        -------
        opencascade::handle<StepFEA_FeaModel>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        PDS: StepRepr_ProductDefinitionShape

        Return
        -------
        opencascade::handle<StepFEA_FeaModel>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        PD: StepBasic_ProductDefinition

        Return
        -------
        opencascade::handle<StepFEA_FeaModel>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_FeaModel(self, *args)

    def GetCurElemSection(self, *args):
        r"""

        Parameters
        ----------
        ElemRepr: StepFEA_Curve3dElementRepresentation

        Return
        -------
        opencascade::handle<StepElement_HSequenceOfCurveElementSectionDefinition>

        Description
        -----------
        Getting list of curve_element_section_definitions for given element_representation.

        """
        return _StepAP209.StepAP209_Construct_GetCurElemSection(self, *args)

    def GetElemGeomRelat(self, *args):
        r"""
        Return
        -------
        opencascade::handle<StepFEA_HSequenceOfElementGeometricRelationship>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_GetElemGeomRelat(self, *args)

    def GetElementMaterial(self, *args):
        r"""
        Return
        -------
        opencascade::handle<StepElement_HSequenceOfElementMaterial>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_GetElementMaterial(self, *args)

    def GetElements1D(self, *args):
        r"""

        Parameters
        ----------
        theFeaModel: StepFEA_FeaModel

        Return
        -------
        opencascade::handle<StepFEA_HSequenceOfElementRepresentation>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_GetElements1D(self, *args)

    def GetElements2D(self, *args):
        r"""

        Parameters
        ----------
        theFEAModel: StepFEA_FeaModel

        Return
        -------
        opencascade::handle<StepFEA_HSequenceOfElementRepresentation>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_GetElements2D(self, *args)

    def GetElements3D(self, *args):
        r"""

        Parameters
        ----------
        theFEAModel: StepFEA_FeaModel

        Return
        -------
        opencascade::handle<StepFEA_HSequenceOfElementRepresentation>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_GetElements3D(self, *args)

    def GetFeaAxis2Placement3d(self, *args):
        r"""

        Parameters
        ----------
        theFeaModel: StepFEA_FeaModel

        Return
        -------
        opencascade::handle<StepFEA_FeaAxis2Placement3d>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_GetFeaAxis2Placement3d(self, *args)

    def GetShReprForElem(self, *args):
        r"""

        Parameters
        ----------
        ElemRepr: StepFEA_ElementRepresentation

        Return
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_GetShReprForElem(self, *args)

    def IdealShape(self, *args):
        r"""

        Parameters
        ----------
        Prod: StepBasic_Product

        Return
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        PDF: StepBasic_ProductDefinitionFormation

        Return
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        PD: StepBasic_ProductDefinition

        Return
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        PDS: StepRepr_ProductDefinitionShape

        Return
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_IdealShape(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        WS: XSControl_WorkSession

        Return
        -------
        bool

        Description
        -----------
        Initializes tool; returns true if succeeded.

        """
        return _StepAP209.StepAP209_Construct_Init(self, *args)

    def IsAnalys(self, *args):
        r"""

        Parameters
        ----------
        PD: StepBasic_ProductDefinitionFormation

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_IsAnalys(self, *args)

    def IsDesing(self, *args):
        r"""

        Parameters
        ----------
        PD: StepBasic_ProductDefinitionFormation

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_IsDesing(self, *args)

    def NominShape(self, *args):
        r"""

        Parameters
        ----------
        Prod: StepBasic_Product

        Return
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        PDF: StepBasic_ProductDefinitionFormation

        Return
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        Description
        -----------
        No available documentation.

        """
        return _StepAP209.StepAP209_Construct_NominShape(self, *args)

    def ReplaceCcDesingToApplied(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Put into model entities applied... for ap209 instead of entities ccdesing... from ap203.

        """
        return _StepAP209.StepAP209_Construct_ReplaceCcDesingToApplied(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP209.delete_StepAP209_Construct

# Register StepAP209_Construct in _StepAP209:
_StepAP209.StepAP209_Construct_swigregister(StepAP209_Construct)



