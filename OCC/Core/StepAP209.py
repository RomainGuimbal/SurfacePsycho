# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepAP209 module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepap209.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepAP209')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepAP209')
    _StepAP209 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepAP209', [dirname(__file__)])
        except ImportError:
            import _StepAP209
            return _StepAP209
        try:
            _mod = imp.load_module('_StepAP209', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepAP209 = swig_import_helper()
    del swig_import_helper
else:
    import _StepAP209
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP209.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StepAP209.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepAP209.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepAP209.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StepAP209.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StepAP209.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StepAP209.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StepAP209.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StepAP209.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StepAP209.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepAP209.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StepAP209.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StepAP209.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepAP209.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepAP209.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepAP209.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StepAP209.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepAP209.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepAP209.process_exception(error, method_name, class_name)
process_exception = _StepAP209.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.STEPConstruct
import OCC.Core.Transfer
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.Interface
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Resource
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.StepAP203
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.StepVisual
import OCC.Core.Quantity
import OCC.Core.StepFEA
import OCC.Core.StepElement

from enum import IntEnum
from OCC.Core.Exception import *



class StepAP209_Construct(OCC.Core.STEPConstruct.STEPConstruct_Tool):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.STEPConstruct.STEPConstruct_Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP209_Construct, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.STEPConstruct.STEPConstruct_Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP209_Construct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tool.

        Returns
        -------
        None

        Creates a tool and initializes it.

        Parameters
        ----------
        WS: XSControl_WorkSession

        Returns
        -------
        None

        """
        this = _StepAP209.new_StepAP209_Construct(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateAP203Structure(self, *args) -> "opencascade::handle< StepData_StepModel >":
        """
        Create ap203 structure from existing ap209 structure.

        Returns
        -------
        opencascade::handle<StepData_StepModel>

        """
        return _StepAP209.StepAP209_Construct_CreateAP203Structure(self, *args)


    def CreateAdding203Entities(self, *args) -> "Standard_Boolean":
        """
        Create approval.. , date.. , time.. , person.. and organization.. entities for 203 structure.

        Parameters
        ----------
        PD: StepBasic_ProductDefinition
        aModel: StepData_StepModel

        Returns
        -------
        bool

        """
        return _StepAP209.StepAP209_Construct_CreateAdding203Entities(self, *args)


    def CreateAddingEntities(self, *args) -> "Standard_Boolean":
        """
        Create approval.. , date.. , time.. , person.. and organization.. entities for analysis structure.

        Parameters
        ----------
        AnaPD: StepBasic_ProductDefinition

        Returns
        -------
        bool

        """
        return _StepAP209.StepAP209_Construct_CreateAddingEntities(self, *args)


    def CreateAnalysStructure(self, *args) -> "Standard_Boolean":
        """
        Create empty structure for idealized_analysis_shape.

        Parameters
        ----------
        Prod: StepBasic_Product

        Returns
        -------
        bool

        """
        return _StepAP209.StepAP209_Construct_CreateAnalysStructure(self, *args)


    def CreateFeaStructure(self, *args) -> "Standard_Boolean":
        """
        Create fea structure.

        Parameters
        ----------
        Prod: StepBasic_Product

        Returns
        -------
        bool

        """
        return _StepAP209.StepAP209_Construct_CreateFeaStructure(self, *args)


    def FeaModel(self, *args) -> "opencascade::handle< StepFEA_FeaModel >":
        """
        No available documentation.

        Parameters
        ----------
        Prod: StepBasic_Product

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel>

        No available documentation.

        Parameters
        ----------
        PDF: StepBasic_ProductDefinitionFormation

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel>

        No available documentation.

        Parameters
        ----------
        PDS: StepRepr_ProductDefinitionShape

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel>

        No available documentation.

        Parameters
        ----------
        PD: StepBasic_ProductDefinition

        Returns
        -------
        opencascade::handle<StepFEA_FeaModel>

        """
        return _StepAP209.StepAP209_Construct_FeaModel(self, *args)


    def GetCurElemSection(self, *args) -> "opencascade::handle< StepElement_HSequenceOfCurveElementSectionDefinition >":
        """
        Getting list of curve_element_section_definitions for given element_representation.

        Parameters
        ----------
        ElemRepr: StepFEA_Curve3dElementRepresentation

        Returns
        -------
        opencascade::handle<StepElement_HSequenceOfCurveElementSectionDefinition>

        """
        return _StepAP209.StepAP209_Construct_GetCurElemSection(self, *args)


    def GetElemGeomRelat(self, *args) -> "opencascade::handle< StepFEA_HSequenceOfElementGeometricRelationship >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepFEA_HSequenceOfElementGeometricRelationship>

        """
        return _StepAP209.StepAP209_Construct_GetElemGeomRelat(self, *args)


    def GetElementMaterial(self, *args) -> "opencascade::handle< StepElement_HSequenceOfElementMaterial >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepElement_HSequenceOfElementMaterial>

        """
        return _StepAP209.StepAP209_Construct_GetElementMaterial(self, *args)


    def GetElements1D(self, *args) -> "opencascade::handle< StepFEA_HSequenceOfElementRepresentation >":
        """
        No available documentation.

        Parameters
        ----------
        theFeaModel: StepFEA_FeaModel

        Returns
        -------
        opencascade::handle<StepFEA_HSequenceOfElementRepresentation>

        """
        return _StepAP209.StepAP209_Construct_GetElements1D(self, *args)


    def GetElements2D(self, *args) -> "opencascade::handle< StepFEA_HSequenceOfElementRepresentation >":
        """
        No available documentation.

        Parameters
        ----------
        theFEAModel: StepFEA_FeaModel

        Returns
        -------
        opencascade::handle<StepFEA_HSequenceOfElementRepresentation>

        """
        return _StepAP209.StepAP209_Construct_GetElements2D(self, *args)


    def GetElements3D(self, *args) -> "opencascade::handle< StepFEA_HSequenceOfElementRepresentation >":
        """
        No available documentation.

        Parameters
        ----------
        theFEAModel: StepFEA_FeaModel

        Returns
        -------
        opencascade::handle<StepFEA_HSequenceOfElementRepresentation>

        """
        return _StepAP209.StepAP209_Construct_GetElements3D(self, *args)


    def GetFeaAxis2Placement3d(self, *args) -> "opencascade::handle< StepFEA_FeaAxis2Placement3d >":
        """
        No available documentation.

        Parameters
        ----------
        theFeaModel: StepFEA_FeaModel

        Returns
        -------
        opencascade::handle<StepFEA_FeaAxis2Placement3d>

        """
        return _StepAP209.StepAP209_Construct_GetFeaAxis2Placement3d(self, *args)


    def GetShReprForElem(self, *args) -> "opencascade::handle< StepShape_ShapeRepresentation >":
        """
        No available documentation.

        Parameters
        ----------
        ElemRepr: StepFEA_ElementRepresentation

        Returns
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        """
        return _StepAP209.StepAP209_Construct_GetShReprForElem(self, *args)


    def IdealShape(self, *args) -> "opencascade::handle< StepShape_ShapeRepresentation >":
        """
        No available documentation.

        Parameters
        ----------
        Prod: StepBasic_Product

        Returns
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        No available documentation.

        Parameters
        ----------
        PDF: StepBasic_ProductDefinitionFormation

        Returns
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        No available documentation.

        Parameters
        ----------
        PD: StepBasic_ProductDefinition

        Returns
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        No available documentation.

        Parameters
        ----------
        PDS: StepRepr_ProductDefinitionShape

        Returns
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        """
        return _StepAP209.StepAP209_Construct_IdealShape(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        Initializes tool; returns true if succeeded.

        Parameters
        ----------
        WS: XSControl_WorkSession

        Returns
        -------
        bool

        """
        return _StepAP209.StepAP209_Construct_Init(self, *args)


    def IsAnalys(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        PD: StepBasic_ProductDefinitionFormation

        Returns
        -------
        bool

        """
        return _StepAP209.StepAP209_Construct_IsAnalys(self, *args)


    def IsDesing(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        PD: StepBasic_ProductDefinitionFormation

        Returns
        -------
        bool

        """
        return _StepAP209.StepAP209_Construct_IsDesing(self, *args)


    def NominShape(self, *args) -> "opencascade::handle< StepShape_ShapeRepresentation >":
        """
        No available documentation.

        Parameters
        ----------
        Prod: StepBasic_Product

        Returns
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        No available documentation.

        Parameters
        ----------
        PDF: StepBasic_ProductDefinitionFormation

        Returns
        -------
        opencascade::handle<StepShape_ShapeRepresentation>

        """
        return _StepAP209.StepAP209_Construct_NominShape(self, *args)


    def ReplaceCcDesingToApplied(self, *args) -> "Standard_Boolean":
        """
        Put into model entities applied... for ap209 instead of entities ccdesing... from ap203.

        Returns
        -------
        bool

        """
        return _StepAP209.StepAP209_Construct_ReplaceCcDesingToApplied(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP209.delete_StepAP209_Construct
    __del__ = lambda self: None
StepAP209_Construct_swigregister = _StepAP209.StepAP209_Construct_swigregister
StepAP209_Construct_swigregister(StepAP209_Construct)



# This file is compatible with both classic and new-style classes.


