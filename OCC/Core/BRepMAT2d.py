# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
BRepMAT2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_brepmat2d.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepMAT2d
else:
    import _BRepMAT2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepMAT2d.delete_SwigPyIterator

    def value(self):
        return _BRepMAT2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepMAT2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepMAT2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepMAT2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepMAT2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepMAT2d.SwigPyIterator_copy(self)

    def next(self):
        return _BRepMAT2d.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepMAT2d.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepMAT2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepMAT2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepMAT2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepMAT2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepMAT2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepMAT2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepMAT2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepMAT2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepMAT2d:
_BRepMAT2d.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BRepMAT2d.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.MAT
import OCC.Core.GeomAbs
import OCC.Core.Bisector
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.IntRes2d
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TColGeom2d

from enum import IntEnum
from OCC.Core.Exception import *



class BRepMAT2d_DataMapOfBasicEltShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_begin(self)

    def end(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_end(self)

    def cbegin(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_cbegin(self)

    def cend(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_cend(self)

    def __init__(self, *args):
        _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapOfBasicEltShape(*args))

    def Exchange(self, theOther):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Set(self, theOther)

    def ReSize(self, N):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Seek(self, theKey)

    def Find(self, *args):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape___call__(self, *args)

    def Clear(self, *args):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Clear(self, *args)
    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_DataMapOfBasicEltShape

    def Size(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Size(self)

# Register BRepMAT2d_DataMapOfBasicEltShape in _BRepMAT2d:
_BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_swigregister(BRepMAT2d_DataMapOfBasicEltShape)
class BRepMAT2d_DataMapOfShapeSequenceOfBasicElt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_begin(self)

    def end(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_end(self)

    def cbegin(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_cbegin(self)

    def cend(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_cend(self)

    def __init__(self, *args):
        _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swiginit(self, _BRepMAT2d.new_BRepMAT2d_DataMapOfShapeSequenceOfBasicElt(*args))

    def Exchange(self, theOther):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Exchange(self, theOther)

    def Assign(self, theOther):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Set(self, theOther)

    def ReSize(self, N):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_UnBind(self, theKey)

    def Seek(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Seek(self, theKey)

    def Find(self, *args):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt___call__(self, *args)

    def Clear(self, *args):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Clear(self, *args)
    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_DataMapOfShapeSequenceOfBasicElt

    def Size(self):
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Size(self)

# Register BRepMAT2d_DataMapOfShapeSequenceOfBasicElt in _BRepMAT2d:
_BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister(BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)
class BRepMAT2d_BisectingLocus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepMAT2d.BRepMAT2d_BisectingLocus_swiginit(self, _BRepMAT2d.new_BRepMAT2d_BisectingLocus(*args))

    def BasicElt(self, *args):
        r"""

        Parameters
        ----------
        IndLine: int
        Index: int

        Return
        -------
        opencascade::handle<MAT_BasicElt>

        Description
        -----------
        Returns the basicelts located at the position <index> on the contour designed by <indline>. remark: the basicelts on a contour are sorted.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_BasicElt(self, *args)

    def Compute(self, *args):
        r"""

        Parameters
        ----------
        anExplo: BRepMAT2d_Explorer
        LineIndex: int (optional, default to 1)
        aSide: MAT_Side (optional, default to MAT_Left)
        aJoinType: GeomAbs_JoinType (optional, default to GeomAbs_Arc)
        IsOpenResult: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Computation of the bisector_locus in a set of lines defined in <anexplo>. the bisecting locus are computed on the side <aside> from the line <lineindex> in <anexplo>.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_Compute(self, *args)

    def GeomBis(self, *args):
        r"""

        Parameters
        ----------
        anArc: MAT_Arc

        Return
        -------
        Reverse: bool

        Description
        -----------
        Returns the geometry of type <bissec> linked to the arc <arc>. <reverse> is false when the firstnode of <anarc> correspond to the first point of geometry.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_GeomBis(self, *args)

    def GeomElt(self, *args):
        r"""

        Parameters
        ----------
        aBasicElt: MAT_BasicElt

        Return
        -------
        opencascade::handle<Geom2d_Geometry>

        Description
        -----------
        Returns the geometry linked to the <basicelt>.

        Parameters
        ----------
        aNode: MAT_Node

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the geometry of type <gp> linked to the <node>.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_GeomElt(self, *args)

    def Graph(self, *args):
        r"""
        Return
        -------
        opencascade::handle<MAT_Graph>

        Description
        -----------
        Returns <thegraph> of <self>.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_Graph(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if compute has succeeded.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_IsDone(self, *args)

    def NumberOfContours(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of contours.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfContours(self, *args)

    def NumberOfElts(self, *args):
        r"""

        Parameters
        ----------
        IndLine: int

        Return
        -------
        int

        Description
        -----------
        Returns the number of basicelts on the line <indline>.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfElts(self, *args)

    def NumberOfSections(self, *args):
        r"""

        Parameters
        ----------
        IndLine: int
        Index: int

        Return
        -------
        int

        Description
        -----------
        Returns the number of sections of a curve. this curve is the indexth curve in the indlineth contour given by anexplo.

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfSections(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_BisectingLocus

# Register BRepMAT2d_BisectingLocus in _BRepMAT2d:
_BRepMAT2d.BRepMAT2d_BisectingLocus_swigregister(BRepMAT2d_BisectingLocus)
class BRepMAT2d_Explorer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        aFace: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BRepMAT2d.BRepMAT2d_Explorer_swiginit(self, _BRepMAT2d.new_BRepMAT2d_Explorer(*args))

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clear the contents of <self>.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Clear(self, *args)

    def Contour(self, *args):
        r"""

        Parameters
        ----------
        IndexContour: int

        Return
        -------
        TColGeom2d_SequenceOfCurve

        Description
        -----------
        No available documentation.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Contour(self, *args)

    def GetIsClosed(self, *args):
        r"""
        Return
        -------
        TColStd_SequenceOfBoolean

        Description
        -----------
        No available documentation.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_GetIsClosed(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        IndexContour: int

        Return
        -------
        None

        Description
        -----------
        Initialisation of an iterator on the curves of the contour number <indexcontour>.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Init(self, *args)

    def IsModified(self, *args):
        r"""

        Parameters
        ----------
        aShape: TopoDS_Shape

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_IsModified(self, *args)

    def ModifiedShape(self, *args):
        r"""

        Parameters
        ----------
        aShape: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        If the shape is not modified, returns the shape itself.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_ModifiedShape(self, *args)

    def More(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return false if there is no more curves on the contour initialised by the method init.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_More(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Move to the next curve of the current contour.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Next(self, *args)

    def NumberOfContours(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of contours.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_NumberOfContours(self, *args)

    def NumberOfCurves(self, *args):
        r"""

        Parameters
        ----------
        IndexContour: int

        Return
        -------
        int

        Description
        -----------
        Returns the number of curves in the contour number <indexcontour>.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_NumberOfCurves(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        aFace: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Perform(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Shape(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Returns the current curve on the current contour.

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_Explorer

# Register BRepMAT2d_Explorer in _BRepMAT2d:
_BRepMAT2d.BRepMAT2d_Explorer_swigregister(BRepMAT2d_Explorer)
class BRepMAT2d_LinkTopoBilo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Explo: BRepMAT2d_Explorer
        BiLo: BRepMAT2d_BisectingLocus

        Return
        -------
        None

        Description
        -----------
        Constructs the links between s and bilo. //! raises if <s> is not a face.

        """
        _BRepMAT2d.BRepMAT2d_LinkTopoBilo_swiginit(self, _BRepMAT2d.new_BRepMAT2d_LinkTopoBilo(*args))

    def GeneratingShape(self, *args):
        r"""

        Parameters
        ----------
        aBE: MAT_BasicElt

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the shape linked to <abe>.

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_GeneratingShape(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Initialise the iterator on <s> <s> is an edge or a vertex of the initial wire or face. raises if <s> is not an edge or a vertex.

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Init(self, *args)

    def More(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a current basicelt.

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_More(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Proceed to the next basicelt.

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Next(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Explo: BRepMAT2d_Explorer
        BiLo: BRepMAT2d_BisectingLocus

        Return
        -------
        None

        Description
        -----------
        Constructs the links between s and bilo. //! raises if <s> is not a face or a wire.

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Perform(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        opencascade::handle<MAT_BasicElt>

        Description
        -----------
        Returns the current basicelt.

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_LinkTopoBilo

# Register BRepMAT2d_LinkTopoBilo in _BRepMAT2d:
_BRepMAT2d.BRepMAT2d_LinkTopoBilo_swigregister(BRepMAT2d_LinkTopoBilo)



