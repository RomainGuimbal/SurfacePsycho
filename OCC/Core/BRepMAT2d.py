# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepMAT2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepmat2d.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepMAT2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepMAT2d')
    _BRepMAT2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepMAT2d', [dirname(__file__)])
        except ImportError:
            import _BRepMAT2d
            return _BRepMAT2d
        try:
            _mod = imp.load_module('_BRepMAT2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepMAT2d = swig_import_helper()
    del swig_import_helper
else:
    import _BRepMAT2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepMAT2d.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BRepMAT2d.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepMAT2d.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepMAT2d.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BRepMAT2d.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BRepMAT2d.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BRepMAT2d.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BRepMAT2d.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BRepMAT2d.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BRepMAT2d.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepMAT2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepMAT2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepMAT2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepMAT2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepMAT2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepMAT2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BRepMAT2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepMAT2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepMAT2d.process_exception(error, method_name, class_name)
process_exception = _BRepMAT2d.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.MAT
import OCC.Core.GeomAbs
import OCC.Core.Bisector
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.IntRes2d
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TColGeom2d

from enum import IntEnum
from OCC.Core.Exception import *



class BRepMAT2d_DataMapOfBasicEltShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMAT2d_DataMapOfBasicEltShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMAT2d_DataMapOfBasicEltShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< opencascade::handle< MAT_BasicElt >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_begin(self)

    def end(self) -> "NCollection_DataMap< opencascade::handle< MAT_BasicElt >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_end(self)

    def cbegin(self) -> "NCollection_DataMap< opencascade::handle< MAT_BasicElt >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_cbegin(self)

    def cend(self) -> "NCollection_DataMap< opencascade::handle< MAT_BasicElt >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_cend(self)

    def __init__(self, *args):
        this = _BRepMAT2d.new_BRepMAT2d_DataMapOfBasicEltShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'BRepMAT2d_DataMapOfBasicEltShape') -> "void":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Exchange(self, theOther)

    def Assign(self, theOther: 'BRepMAT2d_DataMapOfBasicEltShape') -> "NCollection_DataMap< opencascade::handle< MAT_BasicElt >,TopoDS_Shape,TColStd_MapTransientHasher > &":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Assign(self, theOther)

    def Set(self, theOther: 'BRepMAT2d_DataMapOfBasicEltShape') -> "NCollection_DataMap< opencascade::handle< MAT_BasicElt >,TopoDS_Shape,TColStd_MapTransientHasher > &":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ReSize(self, N)

    def Bind(self, theKey: 'opencascade::handle< MAT_BasicElt > const &', theItem: 'TopoDS_Shape') -> "Standard_Boolean":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'opencascade::handle< MAT_BasicElt > const &', theItem: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'opencascade::handle< MAT_BasicElt > const &') -> "Standard_Boolean":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_IsBound(self, theKey)

    def UnBind(self, theKey: 'opencascade::handle< MAT_BasicElt > const &') -> "Standard_Boolean":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_UnBind(self, theKey)

    def Seek(self, theKey: 'opencascade::handle< MAT_BasicElt > const &') -> "TopoDS_Shape const *":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Find(self, *args)

    def ChangeSeek(self, theKey: 'opencascade::handle< MAT_BasicElt > const &') -> "TopoDS_Shape *":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'opencascade::handle< MAT_BasicElt > const &') -> "TopoDS_Shape &":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Clear(self, *args)
    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_DataMapOfBasicEltShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_Size(self)
BRepMAT2d_DataMapOfBasicEltShape_swigregister = _BRepMAT2d.BRepMAT2d_DataMapOfBasicEltShape_swigregister
BRepMAT2d_DataMapOfBasicEltShape_swigregister(BRepMAT2d_DataMapOfBasicEltShape)

class BRepMAT2d_DataMapOfShapeSequenceOfBasicElt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMAT2d_DataMapOfShapeSequenceOfBasicElt, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,NCollection_Sequence< opencascade::handle< MAT_BasicElt > >,TopTools_ShapeMapHasher >::iterator":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,NCollection_Sequence< opencascade::handle< MAT_BasicElt > >,TopTools_ShapeMapHasher >::iterator":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,NCollection_Sequence< opencascade::handle< MAT_BasicElt > >,TopTools_ShapeMapHasher >::const_iterator":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,NCollection_Sequence< opencascade::handle< MAT_BasicElt > >,TopTools_ShapeMapHasher >::const_iterator":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_cend(self)

    def __init__(self, *args):
        this = _BRepMAT2d.new_BRepMAT2d_DataMapOfShapeSequenceOfBasicElt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'BRepMAT2d_DataMapOfShapeSequenceOfBasicElt') -> "void":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Exchange(self, theOther)

    def Assign(self, theOther: 'BRepMAT2d_DataMapOfShapeSequenceOfBasicElt') -> "NCollection_DataMap< TopoDS_Shape,MAT_SequenceOfBasicElt,TopTools_ShapeMapHasher > &":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Assign(self, theOther)

    def Set(self, theOther: 'BRepMAT2d_DataMapOfShapeSequenceOfBasicElt') -> "NCollection_DataMap< TopoDS_Shape,MAT_SequenceOfBasicElt,TopTools_ShapeMapHasher > &":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'MAT_SequenceOfBasicElt') -> "Standard_Boolean":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'MAT_SequenceOfBasicElt') -> "NCollection_Sequence< opencascade::handle< MAT_BasicElt > > *":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "NCollection_Sequence< opencascade::handle< MAT_BasicElt > > const *":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "NCollection_Sequence< opencascade::handle< MAT_BasicElt > > *":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "NCollection_Sequence< opencascade::handle< MAT_BasicElt > > &":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_ChangeFind(self, theKey)

    def __call__(self, *args) -> "NCollection_Sequence< opencascade::handle< MAT_BasicElt > > &":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Clear(self, *args)
    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_DataMapOfShapeSequenceOfBasicElt
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_Size(self)
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister = _BRepMAT2d.BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister
BRepMAT2d_DataMapOfShapeSequenceOfBasicElt_swigregister(BRepMAT2d_DataMapOfShapeSequenceOfBasicElt)

class BRepMAT2d_BisectingLocus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMAT2d_BisectingLocus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMAT2d_BisectingLocus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _BRepMAT2d.new_BRepMAT2d_BisectingLocus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BasicElt(self, *args) -> "opencascade::handle< MAT_BasicElt >":
        """
        Returns the basicelts located at the position <index> on the contour designed by <indline>. remark: the basicelts on a contour are sorted.

        Parameters
        ----------
        IndLine: int
        Index: int

        Returns
        -------
        opencascade::handle<MAT_BasicElt>

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_BasicElt(self, *args)


    def Compute(self, *args) -> "void":
        """
        Computation of the bisector_locus in a set of lines defined in <anexplo>. the bisecting locus are computed on the side <aside> from the line <lineindex> in <anexplo>.

        Parameters
        ----------
        anExplo: BRepMAT2d_Explorer
        LineIndex: int,optional
        	default value is 1
        aSide: MAT_Side,optional
        	default value is MAT_Left
        aJoinType: GeomAbs_JoinType,optional
        	default value is GeomAbs_Arc
        IsOpenResult: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_Compute(self, *args)


    def GeomBis(self, *args) -> "Bisector_Bisec":
        """
        Returns the geometry of type <bissec> linked to the arc <arc>. <reverse> is false when the firstnode of <anarc> correspond to the first point of geometry.

        Parameters
        ----------
        anArc: MAT_Arc

        Returns
        -------
        Reverse: bool

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_GeomBis(self, *args)


    def GeomElt(self, *args) -> "gp_Pnt2d":
        """
        Returns the geometry linked to the <basicelt>.

        Parameters
        ----------
        aBasicElt: MAT_BasicElt

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        Returns the geometry of type <gp> linked to the <node>.

        Parameters
        ----------
        aNode: MAT_Node

        Returns
        -------
        gp_Pnt2d

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_GeomElt(self, *args)


    def Graph(self, *args) -> "opencascade::handle< MAT_Graph >":
        """
        Returns <thegraph> of <self>.

        Returns
        -------
        opencascade::handle<MAT_Graph>

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_Graph(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns true if compute has succeeded.

        Returns
        -------
        bool

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_IsDone(self, *args)


    def NumberOfContours(self, *args) -> "Standard_Integer":
        """
        Returns the number of contours.

        Returns
        -------
        int

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfContours(self, *args)


    def NumberOfElts(self, *args) -> "Standard_Integer":
        """
        Returns the number of basicelts on the line <indline>.

        Parameters
        ----------
        IndLine: int

        Returns
        -------
        int

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfElts(self, *args)


    def NumberOfSections(self, *args) -> "Standard_Integer":
        """
        Returns the number of sections of a curve. this curve is the indexth curve in the indlineth contour given by anexplo.

        Parameters
        ----------
        IndLine: int
        Index: int

        Returns
        -------
        int

        """
        return _BRepMAT2d.BRepMAT2d_BisectingLocus_NumberOfSections(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_BisectingLocus
    __del__ = lambda self: None
BRepMAT2d_BisectingLocus_swigregister = _BRepMAT2d.BRepMAT2d_BisectingLocus_swigregister
BRepMAT2d_BisectingLocus_swigregister(BRepMAT2d_BisectingLocus)

class BRepMAT2d_Explorer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMAT2d_Explorer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMAT2d_Explorer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aFace: TopoDS_Face

        Returns
        -------
        None

        """
        this = _BRepMAT2d.new_BRepMAT2d_Explorer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args) -> "void":
        """
        Clear the contents of <self>.

        Returns
        -------
        None

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Clear(self, *args)


    def Contour(self, *args) -> "TColGeom2d_SequenceOfCurve const &":
        """
        No available documentation.

        Parameters
        ----------
        IndexContour: int

        Returns
        -------
        TColGeom2d_SequenceOfCurve

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Contour(self, *args)


    def GetIsClosed(self, *args) -> "TColStd_SequenceOfBoolean const &":
        """
        No available documentation.

        Returns
        -------
        TColStd_SequenceOfBoolean

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_GetIsClosed(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialisation of an iterator on the curves of the contour number <indexcontour>.

        Parameters
        ----------
        IndexContour: int

        Returns
        -------
        None

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Init(self, *args)


    def IsModified(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_IsModified(self, *args)


    def ModifiedShape(self, *args) -> "TopoDS_Shape":
        """
        If the shape is not modified, returns the shape itself.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_ModifiedShape(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Return false if there is no more curves on the contour initialised by the method init.

        Returns
        -------
        bool

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Move to the next curve of the current contour.

        Returns
        -------
        None

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Next(self, *args)


    def NumberOfContours(self, *args) -> "Standard_Integer":
        """
        Returns the number of contours.

        Returns
        -------
        int

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_NumberOfContours(self, *args)


    def NumberOfCurves(self, *args) -> "Standard_Integer":
        """
        Returns the number of curves in the contour number <indexcontour>.

        Parameters
        ----------
        IndexContour: int

        Returns
        -------
        int

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_NumberOfCurves(self, *args)


    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFace: TopoDS_Face

        Returns
        -------
        None

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Perform(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Shape(self, *args)


    def Value(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        Returns the current curve on the current contour.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _BRepMAT2d.BRepMAT2d_Explorer_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_Explorer
    __del__ = lambda self: None
BRepMAT2d_Explorer_swigregister = _BRepMAT2d.BRepMAT2d_Explorer_swigregister
BRepMAT2d_Explorer_swigregister(BRepMAT2d_Explorer)

class BRepMAT2d_LinkTopoBilo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMAT2d_LinkTopoBilo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMAT2d_LinkTopoBilo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Constructs the links between s and bilo. //! raises if <s> is not a face.

        Parameters
        ----------
        Explo: BRepMAT2d_Explorer
        BiLo: BRepMAT2d_BisectingLocus

        Returns
        -------
        None

        """
        this = _BRepMAT2d.new_BRepMAT2d_LinkTopoBilo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GeneratingShape(self, *args) -> "TopoDS_Shape":
        """
        Returns the shape linked to <abe>.

        Parameters
        ----------
        aBE: MAT_BasicElt

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_GeneratingShape(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialise the iterator on <s> <s> is an edge or a vertex of the initial wire or face. raises if <s> is not an edge or a vertex.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a current basicelt.

        Returns
        -------
        bool

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Proceed to the next basicelt.

        Returns
        -------
        None

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Next(self, *args)


    def Perform(self, *args) -> "void":
        """
        Constructs the links between s and bilo. //! raises if <s> is not a face or a wire.

        Parameters
        ----------
        Explo: BRepMAT2d_Explorer
        BiLo: BRepMAT2d_BisectingLocus

        Returns
        -------
        None

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Perform(self, *args)


    def Value(self, *args) -> "opencascade::handle< MAT_BasicElt >":
        """
        Returns the current basicelt.

        Returns
        -------
        opencascade::handle<MAT_BasicElt>

        """
        return _BRepMAT2d.BRepMAT2d_LinkTopoBilo_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMAT2d.delete_BRepMAT2d_LinkTopoBilo
    __del__ = lambda self: None
BRepMAT2d_LinkTopoBilo_swigregister = _BRepMAT2d.BRepMAT2d_LinkTopoBilo_swigregister
BRepMAT2d_LinkTopoBilo_swigregister(BRepMAT2d_LinkTopoBilo)



# This file is compatible with both classic and new-style classes.


