# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
FilletSurf module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_filletsurf.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FilletSurf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FilletSurf')
    _FilletSurf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FilletSurf', [dirname(__file__)])
        except ImportError:
            import _FilletSurf
            return _FilletSurf
        try:
            _mod = imp.load_module('_FilletSurf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _FilletSurf = swig_import_helper()
    del swig_import_helper
else:
    import _FilletSurf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FilletSurf.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _FilletSurf.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _FilletSurf.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _FilletSurf.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _FilletSurf.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _FilletSurf.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _FilletSurf.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _FilletSurf.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _FilletSurf.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _FilletSurf.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _FilletSurf.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _FilletSurf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _FilletSurf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _FilletSurf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _FilletSurf.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _FilletSurf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _FilletSurf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _FilletSurf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _FilletSurf.process_exception(error, method_name, class_name)
process_exception = _FilletSurf.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.ChFi3d
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.ChFiDS
import OCC.Core.Law
import OCC.Core.TopOpeBRepBuild
import OCC.Core.TopOpeBRepDS
import OCC.Core.TopOpeBRepTool
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.IntCurvesFace
import OCC.Core.TopExp
import OCC.Core.Extrema
import OCC.Core.BRepBlend
import OCC.Core.BlendFunc
import OCC.Core.Convert
import OCC.Core.Blend
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.AppParCurves
import OCC.Core.AppBlend
import OCC.Core.GeomFill
import OCC.Core.TColGeom

from enum import IntEnum
from OCC.Core.Exception import *

FilletSurf_IsOk = _FilletSurf.FilletSurf_IsOk
FilletSurf_IsNotOk = _FilletSurf.FilletSurf_IsNotOk
FilletSurf_IsPartial = _FilletSurf.FilletSurf_IsPartial
FilletSurf_TwoExtremityOnEdge = _FilletSurf.FilletSurf_TwoExtremityOnEdge
FilletSurf_OneExtremityOnEdge = _FilletSurf.FilletSurf_OneExtremityOnEdge
FilletSurf_NoExtremityOnEdge = _FilletSurf.FilletSurf_NoExtremityOnEdge
FilletSurf_EmptyList = _FilletSurf.FilletSurf_EmptyList
FilletSurf_EdgeNotG1 = _FilletSurf.FilletSurf_EdgeNotG1
FilletSurf_FacesNotG1 = _FilletSurf.FilletSurf_FacesNotG1
FilletSurf_EdgeNotOnShape = _FilletSurf.FilletSurf_EdgeNotOnShape
FilletSurf_NotSharpEdge = _FilletSurf.FilletSurf_NotSharpEdge
FilletSurf_PbFilletCompute = _FilletSurf.FilletSurf_PbFilletCompute


class FilletSurf_StatusDone(IntEnum):
	FilletSurf_IsOk = 0
	FilletSurf_IsNotOk = 1
	FilletSurf_IsPartial = 2
FilletSurf_IsOk = FilletSurf_StatusDone.FilletSurf_IsOk
FilletSurf_IsNotOk = FilletSurf_StatusDone.FilletSurf_IsNotOk
FilletSurf_IsPartial = FilletSurf_StatusDone.FilletSurf_IsPartial

class FilletSurf_StatusType(IntEnum):
	FilletSurf_TwoExtremityOnEdge = 0
	FilletSurf_OneExtremityOnEdge = 1
	FilletSurf_NoExtremityOnEdge = 2
FilletSurf_TwoExtremityOnEdge = FilletSurf_StatusType.FilletSurf_TwoExtremityOnEdge
FilletSurf_OneExtremityOnEdge = FilletSurf_StatusType.FilletSurf_OneExtremityOnEdge
FilletSurf_NoExtremityOnEdge = FilletSurf_StatusType.FilletSurf_NoExtremityOnEdge

class FilletSurf_ErrorTypeStatus(IntEnum):
	FilletSurf_EmptyList = 0
	FilletSurf_EdgeNotG1 = 1
	FilletSurf_FacesNotG1 = 2
	FilletSurf_EdgeNotOnShape = 3
	FilletSurf_NotSharpEdge = 4
	FilletSurf_PbFilletCompute = 5
FilletSurf_EmptyList = FilletSurf_ErrorTypeStatus.FilletSurf_EmptyList
FilletSurf_EdgeNotG1 = FilletSurf_ErrorTypeStatus.FilletSurf_EdgeNotG1
FilletSurf_FacesNotG1 = FilletSurf_ErrorTypeStatus.FilletSurf_FacesNotG1
FilletSurf_EdgeNotOnShape = FilletSurf_ErrorTypeStatus.FilletSurf_EdgeNotOnShape
FilletSurf_NotSharpEdge = FilletSurf_ErrorTypeStatus.FilletSurf_NotSharpEdge
FilletSurf_PbFilletCompute = FilletSurf_ErrorTypeStatus.FilletSurf_PbFilletCompute

class FilletSurf_Builder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilletSurf_Builder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilletSurf_Builder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialize of the informations necessary for the computation of the fillet on the shape s from a list of edges e and a radius r. //! ta is the angular tolerance tapp3d is the 3d approximation tolerance tapp2d is the 2d approximation tolerance.

        Parameters
        ----------
        S: TopoDS_Shape
        E: TopTools_ListOfShape
        R: float
        Ta: float,optional
        	default value is 1.0e-2
        Tapp3d: float,optional
        	default value is 1.0e-4
        Tapp2d: float,optional
        	default value is 1.0e-5

        Returns
        -------
        None

        """
        this = _FilletSurf.new_FilletSurf_Builder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CurveOnFace1(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        Gives the 3d curve of surfacefillet(index) on supportface1(index).

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _FilletSurf.FilletSurf_Builder_CurveOnFace1(self, *args)


    def CurveOnFace2(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        Gives the 3d curve of surfacefillet(index) on supportface2(index).

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _FilletSurf.FilletSurf_Builder_CurveOnFace2(self, *args)


    def EndSectionStatus(self, *args) -> "FilletSurf_StatusType":
        """
        No available documentation.

        Returns
        -------
        FilletSurf_StatusType

        """
        return _FilletSurf.FilletSurf_Builder_EndSectionStatus(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        Gives the parameter of the fillet on the first edge.

        Returns
        -------
        float

        """
        return _FilletSurf.FilletSurf_Builder_FirstParameter(self, *args)


    def IsDone(self, *args) -> "FilletSurf_StatusDone":
        """
        Gives the status about the computation of the fillet returns: isok :no problem during the computation isnotok: no result is produced ispartial: the result is partial.

        Returns
        -------
        FilletSurf_StatusDone

        """
        return _FilletSurf.FilletSurf_Builder_IsDone(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        Gives the parameter of the fillet on the last edge.

        Returns
        -------
        float

        """
        return _FilletSurf.FilletSurf_Builder_LastParameter(self, *args)


    def NbSection(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        IndexSurf: int

        Returns
        -------
        int

        """
        return _FilletSurf.FilletSurf_Builder_NbSection(self, *args)


    def NbSurface(self, *args) -> "Standard_Integer":
        """
        Gives the number of nubs surfaces of the fillet.

        Returns
        -------
        int

        """
        return _FilletSurf.FilletSurf_Builder_NbSurface(self, *args)


    def PCurve1OnFillet(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        Gives the pcurve associated to curveonface1(index) on the fillet.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _FilletSurf.FilletSurf_Builder_PCurve1OnFillet(self, *args)


    def PCurve2OnFillet(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        Gives the pcurve associated to curveonsup2(index) on the fillet.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _FilletSurf.FilletSurf_Builder_PCurve2OnFillet(self, *args)


    def PCurveOnFace1(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        Gives the pcurve associated to curvonsup1(index) on the support face.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _FilletSurf.FilletSurf_Builder_PCurveOnFace1(self, *args)


    def PCurveOnFace2(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        Gives the pcurve associated to curveonsup2(index) on the support face.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _FilletSurf.FilletSurf_Builder_PCurveOnFace2(self, *args)


    def Perform(self, *args) -> "void":
        """
        ---purpose computation of the fillet (list of nubs).

        Returns
        -------
        None

        """
        return _FilletSurf.FilletSurf_Builder_Perform(self, *args)


    def Section(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        IndexSurf: int
        IndexSec: int
        Circ: Geom_TrimmedCurve

        Returns
        -------
        None

        """
        return _FilletSurf.FilletSurf_Builder_Section(self, *args)


    def Simulate(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _FilletSurf.FilletSurf_Builder_Simulate(self, *args)


    def StartSectionStatus(self, *args) -> "FilletSurf_StatusType":
        """
        No available documentation.

        Returns
        -------
        FilletSurf_StatusType

        """
        return _FilletSurf.FilletSurf_Builder_StartSectionStatus(self, *args)


    def StatusError(self, *args) -> "FilletSurf_ErrorTypeStatus":
        """
        Gives informations about error status if isdone=isnotok returns edgenotg1: the edges are not g1 facesnotg1 : two connected faces on a same support are not g1 edgenotonshape: the edge is not on shape notsharpedge: the edge is not sharp pbfilletcompute: problem during the computation of the fillet.

        Returns
        -------
        FilletSurf_ErrorTypeStatus

        """
        return _FilletSurf.FilletSurf_Builder_StatusError(self, *args)


    def SupportFace1(self, *args) -> "TopoDS_Face const":
        """
        Gives the first support face relative to surfacefillet(index);.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Face

        """
        return _FilletSurf.FilletSurf_Builder_SupportFace1(self, *args)


    def SupportFace2(self, *args) -> "TopoDS_Face const":
        """
        Gives the second support face relative to surfacefillet(index);.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Face

        """
        return _FilletSurf.FilletSurf_Builder_SupportFace2(self, *args)


    def SurfaceFillet(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """
        Gives the nubs surface of index index.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _FilletSurf.FilletSurf_Builder_SurfaceFillet(self, *args)


    def TolApp3d(self, *args) -> "Standard_Real":
        """
        Gives the 3d tolerance reached during approximation of surface of index index.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _FilletSurf.FilletSurf_Builder_TolApp3d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _FilletSurf.delete_FilletSurf_Builder
    __del__ = lambda self: None
FilletSurf_Builder_swigregister = _FilletSurf.FilletSurf_Builder_swigregister
FilletSurf_Builder_swigregister(FilletSurf_Builder)

class FilletSurf_InternalBuilder(OCC.Core.ChFi3d.ChFi3d_FilBuilder):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.ChFi3d.ChFi3d_FilBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilletSurf_InternalBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.ChFi3d.ChFi3d_FilBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilletSurf_InternalBuilder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape
        FShape: ChFi3d_FilletShape,optional
        	default value is ChFi3d_Polynomial
        Ta: float,optional
        	default value is 1.0e-2
        Tapp3d: float,optional
        	default value is 1.0e-4
        Tapp2d: float,optional
        	default value is 1.0e-5

        Returns
        -------
        None

        """
        this = _FilletSurf.new_FilletSurf_InternalBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Integer":
        """
        Initializes the contour with a list of edges 0 : no problem 1 : empty list 2 : the edges are not g1 3 : two connected faces on a same support are not g1 4 : the edge is not on shape 5 : notsharpedge: the edge is not sharp.

        Parameters
        ----------
        E: TopTools_ListOfShape
        R: float

        Returns
        -------
        int

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Add(self, *args)


    def CurveOnFace1(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        Gives the 3d curve of surfacefillet(index) on supportface1(index).

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _FilletSurf.FilletSurf_InternalBuilder_CurveOnFace1(self, *args)


    def CurveOnFace2(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        Gives the 3d curve of surfacefillet(index) on supportface2(index).

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _FilletSurf.FilletSurf_InternalBuilder_CurveOnFace2(self, *args)


    def Done(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Done(self, *args)


    def EndSectionStatus(self, *args) -> "FilletSurf_StatusType":
        """
        No available documentation.

        Returns
        -------
        FilletSurf_StatusType

        """
        return _FilletSurf.FilletSurf_InternalBuilder_EndSectionStatus(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        Gives the parameter of the fillet on the first edge.

        Returns
        -------
        float

        """
        return _FilletSurf.FilletSurf_InternalBuilder_FirstParameter(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        Gives the parameter of the fillet on the last edge.

        Returns
        -------
        float

        """
        return _FilletSurf.FilletSurf_InternalBuilder_LastParameter(self, *args)


    def NbSection(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        IndexSurf: int

        Returns
        -------
        int

        """
        return _FilletSurf.FilletSurf_InternalBuilder_NbSection(self, *args)


    def NbSurface(self, *args) -> "Standard_Integer":
        """
        Gives the number of nubs surfaces of the fillet.

        Returns
        -------
        int

        """
        return _FilletSurf.FilletSurf_InternalBuilder_NbSurface(self, *args)


    def PCurve1OnFillet(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        Gives the pcurve associated to curveonface1(index) on the fillet.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _FilletSurf.FilletSurf_InternalBuilder_PCurve1OnFillet(self, *args)


    def PCurve2OnFillet(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        Gives the pcurve associated to curveonsup2(index) on the fillet.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _FilletSurf.FilletSurf_InternalBuilder_PCurve2OnFillet(self, *args)


    def PCurveOnFace1(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        Gives the pcurve associated to curvonsup1(index) on the support face.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _FilletSurf.FilletSurf_InternalBuilder_PCurveOnFace1(self, *args)


    def PCurveOnFace2(self, *args) -> "opencascade::handle< Geom2d_Curve > const &":
        """
        Gives the pcurve associated to curveonsup2(index) on the support face.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _FilletSurf.FilletSurf_InternalBuilder_PCurveOnFace2(self, *args)


    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Perform(self, *args)


    def Section(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        IndexSurf: int
        IndexSec: int
        Circ: Geom_TrimmedCurve

        Returns
        -------
        None

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Section(self, *args)


    def Simulate(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Simulate(self, *args)


    def StartSectionStatus(self, *args) -> "FilletSurf_StatusType":
        """
        No available documentation.

        Returns
        -------
        FilletSurf_StatusType

        """
        return _FilletSurf.FilletSurf_InternalBuilder_StartSectionStatus(self, *args)


    def SupportFace1(self, *args) -> "TopoDS_Face const":
        """
        Gives the first support face relative to surfacefillet(index);.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Face

        """
        return _FilletSurf.FilletSurf_InternalBuilder_SupportFace1(self, *args)


    def SupportFace2(self, *args) -> "TopoDS_Face const":
        """
        Gives the second support face relative to surfacefillet(index);.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Face

        """
        return _FilletSurf.FilletSurf_InternalBuilder_SupportFace2(self, *args)


    def SurfaceFillet(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """
        Gives the nubs surface of index index.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _FilletSurf.FilletSurf_InternalBuilder_SurfaceFillet(self, *args)


    def TolApp3d(self, *args) -> "Standard_Real":
        """
        Gives the 3d tolerance reached during approximation of the surface of index index.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _FilletSurf.FilletSurf_InternalBuilder_TolApp3d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _FilletSurf.delete_FilletSurf_InternalBuilder
    __del__ = lambda self: None
FilletSurf_InternalBuilder_swigregister = _FilletSurf.FilletSurf_InternalBuilder_swigregister
FilletSurf_InternalBuilder_swigregister(FilletSurf_InternalBuilder)



# This file is compatible with both classic and new-style classes.


