# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopTools module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_toptools.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopTools')
    _TopTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopTools', [dirname(__file__)])
        except ImportError:
            import _TopTools
            return _TopTools
        try:
            _mod = imp.load_module('_TopTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopTools = swig_import_helper()
    del swig_import_helper
else:
    import _TopTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopTools.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TopTools.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopTools.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopTools.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TopTools.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TopTools.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TopTools.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TopTools.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TopTools.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TopTools.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopTools.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TopTools.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TopTools.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopTools.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopTools.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopTools.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TopTools.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopTools.process_exception(error, method_name, class_name)
process_exception = _TopTools.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_TopTools_HArray1OfShape_Create() -> "opencascade::handle< TopTools_HArray1OfShape >":
    return _TopTools.Handle_TopTools_HArray1OfShape_Create()
Handle_TopTools_HArray1OfShape_Create = _TopTools.Handle_TopTools_HArray1OfShape_Create

def Handle_TopTools_HArray1OfShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopTools_HArray1OfShape >":
    return _TopTools.Handle_TopTools_HArray1OfShape_DownCast(t)
Handle_TopTools_HArray1OfShape_DownCast = _TopTools.Handle_TopTools_HArray1OfShape_DownCast

def Handle_TopTools_HArray1OfShape_IsNull(t: 'opencascade::handle< TopTools_HArray1OfShape > const &') -> "bool":
    return _TopTools.Handle_TopTools_HArray1OfShape_IsNull(t)
Handle_TopTools_HArray1OfShape_IsNull = _TopTools.Handle_TopTools_HArray1OfShape_IsNull

def Handle_TopTools_HArray1OfListOfShape_Create() -> "opencascade::handle< TopTools_HArray1OfListOfShape >":
    return _TopTools.Handle_TopTools_HArray1OfListOfShape_Create()
Handle_TopTools_HArray1OfListOfShape_Create = _TopTools.Handle_TopTools_HArray1OfListOfShape_Create

def Handle_TopTools_HArray1OfListOfShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopTools_HArray1OfListOfShape >":
    return _TopTools.Handle_TopTools_HArray1OfListOfShape_DownCast(t)
Handle_TopTools_HArray1OfListOfShape_DownCast = _TopTools.Handle_TopTools_HArray1OfListOfShape_DownCast

def Handle_TopTools_HArray1OfListOfShape_IsNull(t: 'opencascade::handle< TopTools_HArray1OfListOfShape > const &') -> "bool":
    return _TopTools.Handle_TopTools_HArray1OfListOfShape_IsNull(t)
Handle_TopTools_HArray1OfListOfShape_IsNull = _TopTools.Handle_TopTools_HArray1OfListOfShape_IsNull

def Handle_TopTools_HArray2OfShape_Create() -> "opencascade::handle< TopTools_HArray2OfShape >":
    return _TopTools.Handle_TopTools_HArray2OfShape_Create()
Handle_TopTools_HArray2OfShape_Create = _TopTools.Handle_TopTools_HArray2OfShape_Create

def Handle_TopTools_HArray2OfShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopTools_HArray2OfShape >":
    return _TopTools.Handle_TopTools_HArray2OfShape_DownCast(t)
Handle_TopTools_HArray2OfShape_DownCast = _TopTools.Handle_TopTools_HArray2OfShape_DownCast

def Handle_TopTools_HArray2OfShape_IsNull(t: 'opencascade::handle< TopTools_HArray2OfShape > const &') -> "bool":
    return _TopTools.Handle_TopTools_HArray2OfShape_IsNull(t)
Handle_TopTools_HArray2OfShape_IsNull = _TopTools.Handle_TopTools_HArray2OfShape_IsNull

def Handle_TopTools_HSequenceOfShape_Create() -> "opencascade::handle< TopTools_HSequenceOfShape >":
    return _TopTools.Handle_TopTools_HSequenceOfShape_Create()
Handle_TopTools_HSequenceOfShape_Create = _TopTools.Handle_TopTools_HSequenceOfShape_Create

def Handle_TopTools_HSequenceOfShape_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TopTools_HSequenceOfShape >":
    return _TopTools.Handle_TopTools_HSequenceOfShape_DownCast(t)
Handle_TopTools_HSequenceOfShape_DownCast = _TopTools.Handle_TopTools_HSequenceOfShape_DownCast

def Handle_TopTools_HSequenceOfShape_IsNull(t: 'opencascade::handle< TopTools_HSequenceOfShape > const &') -> "bool":
    return _TopTools.Handle_TopTools_HSequenceOfShape_IsNull(t)
Handle_TopTools_HSequenceOfShape_IsNull = _TopTools.Handle_TopTools_HSequenceOfShape_IsNull
class TopTools_Array1OfListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_Array1OfListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_Array1OfListOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< TopTools_ListOfShape >::iterator":
        return _TopTools.TopTools_Array1OfListOfShape_begin(self)

    def end(self) -> "NCollection_Array1< TopTools_ListOfShape >::iterator":
        return _TopTools.TopTools_Array1OfListOfShape_end(self)

    def cbegin(self) -> "NCollection_Array1< TopTools_ListOfShape >::const_iterator":
        return _TopTools.TopTools_Array1OfListOfShape_cbegin(self)

    def cend(self) -> "NCollection_Array1< TopTools_ListOfShape >::const_iterator":
        return _TopTools.TopTools_Array1OfListOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_Array1OfListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'TopoDS_ListOfShape') -> "void":
        return _TopTools.TopTools_Array1OfListOfShape_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array1OfListOfShape_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array1OfListOfShape_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TopTools.TopTools_Array1OfListOfShape_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array1OfListOfShape_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array1OfListOfShape_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TopTools.TopTools_Array1OfListOfShape_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TopTools.TopTools_Array1OfListOfShape_IsAllocated(self)

    def Assign(self, theOther: 'TopTools_Array1OfListOfShape') -> "NCollection_Array1< TopTools_ListOfShape > &":
        return _TopTools.TopTools_Array1OfListOfShape_Assign(self, theOther)

    def Move(self, theOther: 'TopTools_Array1OfListOfShape') -> "NCollection_Array1< TopTools_ListOfShape > &":
        return _TopTools.TopTools_Array1OfListOfShape_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< TopTools_ListOfShape > &":
        return _TopTools.TopTools_Array1OfListOfShape_Set(self, *args)

    def First(self) -> "TopTools_ListOfShape const &":
        return _TopTools.TopTools_Array1OfListOfShape_First(self)

    def ChangeFirst(self) -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_Array1OfListOfShape_ChangeFirst(self)

    def Last(self) -> "TopTools_ListOfShape const &":
        return _TopTools.TopTools_Array1OfListOfShape_Last(self)

    def ChangeLast(self) -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_Array1OfListOfShape_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TopTools_ListOfShape const &":
        return _TopTools.TopTools_Array1OfListOfShape_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_Array1OfListOfShape_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_Array1OfListOfShape___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TopoDS_ListOfShape') -> "void":
        return _TopTools.TopTools_Array1OfListOfShape_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TopTools.TopTools_Array1OfListOfShape_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TopTools.delete_TopTools_Array1OfListOfShape
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TopTools_Array1OfListOfShape_swigregister = _TopTools.TopTools_Array1OfListOfShape_swigregister
TopTools_Array1OfListOfShape_swigregister(TopTools_Array1OfListOfShape)

class TopTools_Array1OfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_Array1OfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_Array1OfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< TopoDS_Shape >::iterator":
        return _TopTools.TopTools_Array1OfShape_begin(self)

    def end(self) -> "NCollection_Array1< TopoDS_Shape >::iterator":
        return _TopTools.TopTools_Array1OfShape_end(self)

    def cbegin(self) -> "NCollection_Array1< TopoDS_Shape >::const_iterator":
        return _TopTools.TopTools_Array1OfShape_cbegin(self)

    def cend(self) -> "NCollection_Array1< TopoDS_Shape >::const_iterator":
        return _TopTools.TopTools_Array1OfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_Array1OfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_Array1OfShape_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array1OfShape_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array1OfShape_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TopTools.TopTools_Array1OfShape_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array1OfShape_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array1OfShape_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TopTools.TopTools_Array1OfShape_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TopTools.TopTools_Array1OfShape_IsAllocated(self)

    def Assign(self, theOther: 'TopTools_Array1OfShape') -> "NCollection_Array1< TopoDS_Shape > &":
        return _TopTools.TopTools_Array1OfShape_Assign(self, theOther)

    def Move(self, theOther: 'TopTools_Array1OfShape') -> "NCollection_Array1< TopoDS_Shape > &":
        return _TopTools.TopTools_Array1OfShape_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< TopoDS_Shape > &":
        return _TopTools.TopTools_Array1OfShape_Set(self, *args)

    def First(self) -> "TopoDS_Shape const &":
        return _TopTools.TopTools_Array1OfShape_First(self)

    def ChangeFirst(self) -> "TopoDS_Shape &":
        return _TopTools.TopTools_Array1OfShape_ChangeFirst(self)

    def Last(self) -> "TopoDS_Shape const &":
        return _TopTools.TopTools_Array1OfShape_Last(self)

    def ChangeLast(self) -> "TopoDS_Shape &":
        return _TopTools.TopTools_Array1OfShape_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_Array1OfShape_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape &":
        return _TopTools.TopTools_Array1OfShape_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _TopTools.TopTools_Array1OfShape___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_Array1OfShape_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TopTools.TopTools_Array1OfShape_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TopTools.delete_TopTools_Array1OfShape
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TopTools_Array1OfShape_swigregister = _TopTools.TopTools_Array1OfShape_swigregister
TopTools_Array1OfShape_swigregister(TopTools_Array1OfShape)

class TopTools_Array2OfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_Array2OfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_Array2OfShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TopTools.new_TopTools_Array2OfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_Array2OfShape_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TopTools.TopTools_Array2OfShape_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TopTools.TopTools_Array2OfShape_IsDeletable(self)

    def Assign(self, theOther: 'TopTools_Array2OfShape') -> "NCollection_Array2< TopoDS_Shape > &":
        return _TopTools.TopTools_Array2OfShape_Assign(self, theOther)

    def Move(self, theOther: 'TopTools_Array2OfShape') -> "NCollection_Array2< TopoDS_Shape > &":
        return _TopTools.TopTools_Array2OfShape_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< TopoDS_Shape > &":
        return _TopTools.TopTools_Array2OfShape_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_Array2OfShape_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "TopoDS_Shape &":
        return _TopTools.TopTools_Array2OfShape_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _TopTools.TopTools_Array2OfShape___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_Array2OfShape_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TopTools.TopTools_Array2OfShape_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TopTools.delete_TopTools_Array2OfShape
    __del__ = lambda self: None
TopTools_Array2OfShape_swigregister = _TopTools.TopTools_Array2OfShape_swigregister
TopTools_Array2OfShape_swigregister(TopTools_Array2OfShape)

class TopTools_DataMapOfIntegerListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfIntegerListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfIntegerListOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< int,TopTools_ListOfShape,NCollection_DefaultHasher< int > >::iterator":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_begin(self)

    def end(self) -> "NCollection_DataMap< int,TopTools_ListOfShape,NCollection_DefaultHasher< int > >::iterator":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_end(self)

    def cbegin(self) -> "NCollection_DataMap< int,TopTools_ListOfShape,NCollection_DefaultHasher< int > >::const_iterator":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_cbegin(self)

    def cend(self) -> "NCollection_DataMap< int,TopTools_ListOfShape,NCollection_DefaultHasher< int > >::const_iterator":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfIntegerListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'NCollection_DataMap< Standard_Integer,TopTools_ListOfShape,TColStd_MapIntegerHasher > &') -> "void":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Exchange(self, theOther)

    def Assign(self, theOther: 'NCollection_DataMap< Standard_Integer,TopTools_ListOfShape,TColStd_MapIntegerHasher > const &') -> "NCollection_DataMap< Standard_Integer,TopTools_ListOfShape,TColStd_MapIntegerHasher > &":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Assign(self, theOther)

    def Set(self, theOther: 'NCollection_DataMap< Standard_Integer,TopTools_ListOfShape,TColStd_MapIntegerHasher > const &') -> "NCollection_DataMap< Standard_Integer,TopTools_ListOfShape,TColStd_MapIntegerHasher > &":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_ReSize(self, N)

    def Bind(self, theKey: 'int const &', theItem: 'TopoDS_ListOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'int const &', theItem: 'TopoDS_ListOfShape') -> "TopTools_ListOfShape *":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_IsBound(self, theKey)

    def UnBind(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_UnBind(self, theKey)

    def Seek(self, theKey: 'int const &') -> "TopTools_ListOfShape const *":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Find(self, *args)

    def ChangeSeek(self, theKey: 'int const &') -> "TopTools_ListOfShape *":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'int const &') -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfIntegerListOfShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Size(self)

    def Keys(self) -> "PyObject *":
        return _TopTools.TopTools_DataMapOfIntegerListOfShape_Keys(self)
TopTools_DataMapOfIntegerListOfShape_swigregister = _TopTools.TopTools_DataMapOfIntegerListOfShape_swigregister
TopTools_DataMapOfIntegerListOfShape_swigregister(TopTools_DataMapOfIntegerListOfShape)

class TopTools_DataMapOfIntegerShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfIntegerShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfIntegerShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< int,TopoDS_Shape,NCollection_DefaultHasher< int > >::iterator":
        return _TopTools.TopTools_DataMapOfIntegerShape_begin(self)

    def end(self) -> "NCollection_DataMap< int,TopoDS_Shape,NCollection_DefaultHasher< int > >::iterator":
        return _TopTools.TopTools_DataMapOfIntegerShape_end(self)

    def cbegin(self) -> "NCollection_DataMap< int,TopoDS_Shape,NCollection_DefaultHasher< int > >::const_iterator":
        return _TopTools.TopTools_DataMapOfIntegerShape_cbegin(self)

    def cend(self) -> "NCollection_DataMap< int,TopoDS_Shape,NCollection_DefaultHasher< int > >::const_iterator":
        return _TopTools.TopTools_DataMapOfIntegerShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfIntegerShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfIntegerShape') -> "void":
        return _TopTools.TopTools_DataMapOfIntegerShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfIntegerShape') -> "NCollection_DataMap< Standard_Integer,TopoDS_Shape,TColStd_MapIntegerHasher > &":
        return _TopTools.TopTools_DataMapOfIntegerShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfIntegerShape') -> "NCollection_DataMap< Standard_Integer,TopoDS_Shape,TColStd_MapIntegerHasher > &":
        return _TopTools.TopTools_DataMapOfIntegerShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfIntegerShape_ReSize(self, N)

    def Bind(self, theKey: 'int const &', theItem: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfIntegerShape_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'int const &', theItem: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _TopTools.TopTools_DataMapOfIntegerShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfIntegerShape_IsBound(self, theKey)

    def UnBind(self, theKey: 'int const &') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfIntegerShape_UnBind(self, theKey)

    def Seek(self, theKey: 'int const &') -> "TopoDS_Shape const *":
        return _TopTools.TopTools_DataMapOfIntegerShape_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfIntegerShape_Find(self, *args)

    def ChangeSeek(self, theKey: 'int const &') -> "TopoDS_Shape *":
        return _TopTools.TopTools_DataMapOfIntegerShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'int const &') -> "TopoDS_Shape &":
        return _TopTools.TopTools_DataMapOfIntegerShape_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _TopTools.TopTools_DataMapOfIntegerShape___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfIntegerShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfIntegerShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfIntegerShape_Size(self)

    def Keys(self) -> "PyObject *":
        return _TopTools.TopTools_DataMapOfIntegerShape_Keys(self)
TopTools_DataMapOfIntegerShape_swigregister = _TopTools.TopTools_DataMapOfIntegerShape_swigregister
TopTools_DataMapOfIntegerShape_swigregister(TopTools_DataMapOfIntegerShape)

class TopTools_DataMapOfOrientedShapeInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfOrientedShapeInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfOrientedShapeInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,int,TopTools_OrientedShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,int,TopTools_OrientedShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,int,TopTools_OrientedShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,int,TopTools_OrientedShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfOrientedShapeInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfOrientedShapeInteger') -> "void":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfOrientedShapeInteger') -> "NCollection_DataMap< TopoDS_Shape,Standard_Integer,TopTools_OrientedShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfOrientedShapeInteger') -> "NCollection_DataMap< TopoDS_Shape,Standard_Integer,TopTools_OrientedShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'int const &') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'int const &') -> "int *":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "int const *":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "int *":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "int &":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_ChangeFind(self, theKey)

    def __call__(self, *args) -> "int &":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfOrientedShapeInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfOrientedShapeInteger_Size(self)
TopTools_DataMapOfOrientedShapeInteger_swigregister = _TopTools.TopTools_DataMapOfOrientedShapeInteger_swigregister
TopTools_DataMapOfOrientedShapeInteger_swigregister(TopTools_DataMapOfOrientedShapeInteger)

class TopTools_DataMapOfOrientedShapeShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfOrientedShapeShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfOrientedShapeShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_OrientedShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_OrientedShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_OrientedShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_OrientedShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfOrientedShapeShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfOrientedShapeShape') -> "void":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfOrientedShapeShape') -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_OrientedShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfOrientedShapeShape') -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_OrientedShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "TopoDS_Shape const *":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "TopoDS_Shape &":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfOrientedShapeShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfOrientedShapeShape_Size(self)
TopTools_DataMapOfOrientedShapeShape_swigregister = _TopTools.TopTools_DataMapOfOrientedShapeShape_swigregister
TopTools_DataMapOfOrientedShapeShape_swigregister(TopTools_DataMapOfOrientedShapeShape)

class TopTools_DataMapOfShapeBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfShapeBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfShapeBox, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,Bnd_Box,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeBox_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,Bnd_Box,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeBox_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,Bnd_Box,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeBox_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,Bnd_Box,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeBox_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfShapeBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfShapeBox') -> "void":
        return _TopTools.TopTools_DataMapOfShapeBox_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfShapeBox') -> "NCollection_DataMap< TopoDS_Shape,Bnd_Box,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeBox_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfShapeBox') -> "NCollection_DataMap< TopoDS_Shape,Bnd_Box,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeBox_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfShapeBox_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'Bnd_Box const &') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeBox_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'Bnd_Box const &') -> "Bnd_Box *":
        return _TopTools.TopTools_DataMapOfShapeBox_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeBox_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeBox_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "Bnd_Box const *":
        return _TopTools.TopTools_DataMapOfShapeBox_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeBox_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "Bnd_Box *":
        return _TopTools.TopTools_DataMapOfShapeBox_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "Bnd_Box &":
        return _TopTools.TopTools_DataMapOfShapeBox_ChangeFind(self, theKey)

    def __call__(self, *args) -> "Bnd_Box &":
        return _TopTools.TopTools_DataMapOfShapeBox___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfShapeBox_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfShapeBox
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfShapeBox_Size(self)
TopTools_DataMapOfShapeBox_swigregister = _TopTools.TopTools_DataMapOfShapeBox_swigregister
TopTools_DataMapOfShapeBox_swigregister(TopTools_DataMapOfShapeBox)

class TopTools_DataMapOfShapeInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfShapeInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfShapeInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,int,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeInteger_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,int,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeInteger_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,int,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeInteger_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,int,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeInteger_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfShapeInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfShapeInteger') -> "void":
        return _TopTools.TopTools_DataMapOfShapeInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfShapeInteger') -> "NCollection_DataMap< TopoDS_Shape,Standard_Integer,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeInteger_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfShapeInteger') -> "NCollection_DataMap< TopoDS_Shape,Standard_Integer,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfShapeInteger_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'int const &') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeInteger_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'int const &') -> "int *":
        return _TopTools.TopTools_DataMapOfShapeInteger_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeInteger_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeInteger_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "int const *":
        return _TopTools.TopTools_DataMapOfShapeInteger_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeInteger_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "int *":
        return _TopTools.TopTools_DataMapOfShapeInteger_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "int &":
        return _TopTools.TopTools_DataMapOfShapeInteger_ChangeFind(self, theKey)

    def __call__(self, *args) -> "int &":
        return _TopTools.TopTools_DataMapOfShapeInteger___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfShapeInteger_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfShapeInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfShapeInteger_Size(self)
TopTools_DataMapOfShapeInteger_swigregister = _TopTools.TopTools_DataMapOfShapeInteger_swigregister
TopTools_DataMapOfShapeInteger_swigregister(TopTools_DataMapOfShapeInteger)

class TopTools_DataMapOfShapeListOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfShapeListOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfShapeListOfInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,NCollection_List< int >,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,NCollection_List< int >,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,NCollection_List< int >,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,NCollection_List< int >,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfShapeListOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfShapeListOfInteger') -> "void":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfShapeListOfInteger') -> "NCollection_DataMap< TopoDS_Shape,TColStd_ListOfInteger,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfShapeListOfInteger') -> "NCollection_DataMap< TopoDS_Shape,TColStd_ListOfInteger,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'TColStd_ListOfInteger') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'TColStd_ListOfInteger') -> "NCollection_List< int > *":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "NCollection_List< int > const *":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "NCollection_List< int > *":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "NCollection_List< int > &":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_ChangeFind(self, theKey)

    def __call__(self, *args) -> "NCollection_List< int > &":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfShapeListOfInteger
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfShapeListOfInteger_Size(self)
TopTools_DataMapOfShapeListOfInteger_swigregister = _TopTools.TopTools_DataMapOfShapeListOfInteger_swigregister
TopTools_DataMapOfShapeListOfInteger_swigregister(TopTools_DataMapOfShapeListOfInteger)

class TopTools_DataMapOfShapeListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfShapeListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfShapeListOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfShapeListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfShapeListOfShape') -> "void":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfShapeListOfShape') -> "NCollection_DataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfShapeListOfShape') -> "NCollection_DataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'TopoDS_ListOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'TopoDS_ListOfShape') -> "TopTools_ListOfShape *":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "TopTools_ListOfShape const *":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "TopTools_ListOfShape *":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_DataMapOfShapeListOfShape___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfShapeListOfShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfShapeListOfShape_Size(self)
TopTools_DataMapOfShapeListOfShape_swigregister = _TopTools.TopTools_DataMapOfShapeListOfShape_swigregister
TopTools_DataMapOfShapeListOfShape_swigregister(TopTools_DataMapOfShapeListOfShape)

class TopTools_DataMapOfShapeReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfShapeReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfShapeReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,double,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeReal_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,double,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeReal_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,double,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeReal_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,double,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeReal_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfShapeReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfShapeReal') -> "void":
        return _TopTools.TopTools_DataMapOfShapeReal_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfShapeReal') -> "NCollection_DataMap< TopoDS_Shape,Standard_Real,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeReal_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfShapeReal') -> "NCollection_DataMap< TopoDS_Shape,Standard_Real,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeReal_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfShapeReal_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'double const &') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeReal_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'double const &') -> "double *":
        return _TopTools.TopTools_DataMapOfShapeReal_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeReal_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeReal_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "double const *":
        return _TopTools.TopTools_DataMapOfShapeReal_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeReal_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "double *":
        return _TopTools.TopTools_DataMapOfShapeReal_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "double &":
        return _TopTools.TopTools_DataMapOfShapeReal_ChangeFind(self, theKey)

    def __call__(self, *args) -> "double &":
        return _TopTools.TopTools_DataMapOfShapeReal___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfShapeReal_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfShapeReal
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfShapeReal_Size(self)
TopTools_DataMapOfShapeReal_swigregister = _TopTools.TopTools_DataMapOfShapeReal_swigregister
TopTools_DataMapOfShapeReal_swigregister(TopTools_DataMapOfShapeReal)

class TopTools_DataMapOfShapeSequenceOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfShapeSequenceOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfShapeSequenceOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,TopTools_SequenceOfShape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,TopTools_SequenceOfShape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,TopTools_SequenceOfShape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,TopTools_SequenceOfShape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfShapeSequenceOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfShapeSequenceOfShape') -> "void":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfShapeSequenceOfShape') -> "NCollection_DataMap< TopoDS_Shape,TopTools_SequenceOfShape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfShapeSequenceOfShape') -> "NCollection_DataMap< TopoDS_Shape,TopTools_SequenceOfShape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'TopTools_SequenceOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'TopTools_SequenceOfShape') -> "TopTools_SequenceOfShape *":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "TopTools_SequenceOfShape const *":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "TopTools_SequenceOfShape *":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "TopTools_SequenceOfShape &":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopTools_SequenceOfShape &":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfShapeSequenceOfShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfShapeSequenceOfShape_Size(self)
TopTools_DataMapOfShapeSequenceOfShape_swigregister = _TopTools.TopTools_DataMapOfShapeSequenceOfShape_swigregister
TopTools_DataMapOfShapeSequenceOfShape_swigregister(TopTools_DataMapOfShapeSequenceOfShape)

class TopTools_DataMapOfShapeShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_DataMapOfShapeShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_DataMapOfShapeShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeShape_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_DataMapOfShapeShape_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeShape_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_DataMapOfShapeShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_DataMapOfShapeShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_DataMapOfShapeShape') -> "void":
        return _TopTools.TopTools_DataMapOfShapeShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_DataMapOfShapeShape') -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_DataMapOfShapeShape') -> "NCollection_DataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_DataMapOfShapeShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_DataMapOfShapeShape_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeShape_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _TopTools.TopTools_DataMapOfShapeShape_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeShape_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeShape_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "TopoDS_Shape const *":
        return _TopTools.TopTools_DataMapOfShapeShape_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_DataMapOfShapeShape_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _TopTools.TopTools_DataMapOfShapeShape_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "TopoDS_Shape &":
        return _TopTools.TopTools_DataMapOfShapeShape_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _TopTools.TopTools_DataMapOfShapeShape___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_DataMapOfShapeShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_DataMapOfShapeShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_DataMapOfShapeShape_Size(self)
TopTools_DataMapOfShapeShape_swigregister = _TopTools.TopTools_DataMapOfShapeShape_swigregister
TopTools_DataMapOfShapeShape_swigregister(TopTools_DataMapOfShapeShape)

class TopTools_IndexedDataMapOfShapeAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_IndexedDataMapOfShapeAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_IndexedDataMapOfShapeAddress, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,void *,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_begin(self)

    def end(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,void *,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_end(self)

    def cbegin(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,void *,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_cbegin(self)

    def cend(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,void *,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_IndexedDataMapOfShapeAddress(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_IndexedDataMapOfShapeAddress') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_IndexedDataMapOfShapeAddress') -> "NCollection_IndexedDataMap< TopoDS_Shape,void *,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_IndexedDataMapOfShapeAddress') -> "NCollection_IndexedDataMap< TopoDS_Shape,void *,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_ReSize(self, N)

    def Add(self, theKey1: 'TopoDS_Shape', theItem: 'void *const &') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Add(self, theKey1, theItem)

    def Contains(self, theKey1: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TopoDS_Shape', theItem: 'void *const &') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex: 'Standard_Integer const') -> "void *const &":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex: 'Standard_Integer const') -> "void *&":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_ChangeFromIndex(self, theIndex)

    def __call__(self, *args) -> "void *&":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress___call__(self, *args)

    def FindIndex(self, theKey1: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1: 'TopoDS_Shape') -> "void *&":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1: 'TopoDS_Shape') -> "void *const *":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Seek(self, theKey1)

    def ChangeSeek(self, theKey1: 'TopoDS_Shape') -> "void **":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_FindFromKey(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_IndexedDataMapOfShapeAddress
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeAddress_Size(self)
TopTools_IndexedDataMapOfShapeAddress_swigregister = _TopTools.TopTools_IndexedDataMapOfShapeAddress_swigregister
TopTools_IndexedDataMapOfShapeAddress_swigregister(TopTools_IndexedDataMapOfShapeAddress)

class TopTools_IndexedDataMapOfShapeListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_IndexedDataMapOfShapeListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_IndexedDataMapOfShapeListOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_begin(self)

    def end(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_end(self)

    def cbegin(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_cbegin(self)

    def cend(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_IndexedDataMapOfShapeListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_IndexedDataMapOfShapeListOfShape') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_IndexedDataMapOfShapeListOfShape') -> "NCollection_IndexedDataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_IndexedDataMapOfShapeListOfShape') -> "NCollection_IndexedDataMap< TopoDS_Shape,TopTools_ListOfShape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_ReSize(self, N)

    def Add(self, theKey1: 'TopoDS_Shape', theItem: 'TopoDS_ListOfShape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Add(self, theKey1, theItem)

    def Contains(self, theKey1: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TopoDS_Shape', theItem: 'TopoDS_ListOfShape') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex: 'Standard_Integer const') -> "TopTools_ListOfShape const &":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex: 'Standard_Integer const') -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_ChangeFromIndex(self, theIndex)

    def __call__(self, *args) -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape___call__(self, *args)

    def FindIndex(self, theKey1: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1: 'TopoDS_Shape') -> "TopTools_ListOfShape &":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1: 'TopoDS_Shape') -> "TopTools_ListOfShape const *":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Seek(self, theKey1)

    def ChangeSeek(self, theKey1: 'TopoDS_Shape') -> "TopTools_ListOfShape *":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_FindFromKey(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_IndexedDataMapOfShapeListOfShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_Size(self)
TopTools_IndexedDataMapOfShapeListOfShape_swigregister = _TopTools.TopTools_IndexedDataMapOfShapeListOfShape_swigregister
TopTools_IndexedDataMapOfShapeListOfShape_swigregister(TopTools_IndexedDataMapOfShapeListOfShape)

class TopTools_IndexedDataMapOfShapeReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_IndexedDataMapOfShapeReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_IndexedDataMapOfShapeReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,double,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_begin(self)

    def end(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,double,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_end(self)

    def cbegin(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,double,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_cbegin(self)

    def cend(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,double,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_IndexedDataMapOfShapeReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_IndexedDataMapOfShapeReal') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_IndexedDataMapOfShapeReal') -> "NCollection_IndexedDataMap< TopoDS_Shape,Standard_Real,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_IndexedDataMapOfShapeReal') -> "NCollection_IndexedDataMap< TopoDS_Shape,Standard_Real,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_ReSize(self, N)

    def Add(self, theKey1: 'TopoDS_Shape', theItem: 'double const &') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Add(self, theKey1, theItem)

    def Contains(self, theKey1: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TopoDS_Shape', theItem: 'double const &') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex: 'Standard_Integer const') -> "double const &":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex: 'Standard_Integer const') -> "double &":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_ChangeFromIndex(self, theIndex)

    def __call__(self, *args) -> "double &":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal___call__(self, *args)

    def FindIndex(self, theKey1: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1: 'TopoDS_Shape') -> "double &":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1: 'TopoDS_Shape') -> "double const *":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Seek(self, theKey1)

    def ChangeSeek(self, theKey1: 'TopoDS_Shape') -> "double *":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_FindFromKey(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_IndexedDataMapOfShapeReal
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeReal_Size(self)
TopTools_IndexedDataMapOfShapeReal_swigregister = _TopTools.TopTools_IndexedDataMapOfShapeReal_swigregister
TopTools_IndexedDataMapOfShapeReal_swigregister(TopTools_IndexedDataMapOfShapeReal)

class TopTools_IndexedDataMapOfShapeShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_IndexedDataMapOfShapeShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_IndexedDataMapOfShapeShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_begin(self)

    def end(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher >::iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_end(self)

    def cbegin(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_cbegin(self)

    def cend(self) -> "NCollection_IndexedDataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_IndexedDataMapOfShapeShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_IndexedDataMapOfShapeShape') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_IndexedDataMapOfShapeShape') -> "NCollection_IndexedDataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_IndexedDataMapOfShapeShape') -> "NCollection_IndexedDataMap< TopoDS_Shape,TopoDS_Shape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_ReSize(self, N)

    def Add(self, theKey1: 'TopoDS_Shape', theItem: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Add(self, theKey1, theItem)

    def Contains(self, theKey1: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TopoDS_Shape', theItem: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape &":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_ChangeFromIndex(self, theIndex)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape___call__(self, *args)

    def FindIndex(self, theKey1: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1: 'TopoDS_Shape') -> "TopoDS_Shape &":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1: 'TopoDS_Shape') -> "TopoDS_Shape const *":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Seek(self, theKey1)

    def ChangeSeek(self, theKey1: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_FindFromKey(self, *args)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_IndexedDataMapOfShapeShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_IndexedDataMapOfShapeShape_Size(self)
TopTools_IndexedDataMapOfShapeShape_swigregister = _TopTools.TopTools_IndexedDataMapOfShapeShape_swigregister
TopTools_IndexedDataMapOfShapeShape_swigregister(TopTools_IndexedDataMapOfShapeShape)

class TopTools_IndexedMapOfOrientedShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_IndexedMapOfOrientedShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_IndexedMapOfOrientedShape, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< TopoDS_Shape,TopTools_OrientedShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< TopoDS_Shape,TopTools_OrientedShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_IndexedMapOfOrientedShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_IndexedMapOfOrientedShape') -> "void":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_IndexedMapOfOrientedShape') -> "NCollection_IndexedMap< TopoDS_Shape,TopTools_OrientedShapeMapHasher > &":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_IndexedMapOfOrientedShape') -> "NCollection_IndexedMap< TopoDS_Shape,TopTools_OrientedShapeMapHasher > &":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Set(self, theOther)

    def ReSize(self, theExtent: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_ReSize(self, theExtent)

    def Add(self, theKey1: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Add(self, theKey1)

    def Contains(self, theKey1: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_FindKey(self, theIndex)

    def __call__(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedMapOfOrientedShape___call__(self, theIndex)

    def FindIndex(self, theKey1: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_IndexedMapOfOrientedShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_IndexedMapOfOrientedShape_Size(self)
TopTools_IndexedMapOfOrientedShape_swigregister = _TopTools.TopTools_IndexedMapOfOrientedShape_swigregister
TopTools_IndexedMapOfOrientedShape_swigregister(TopTools_IndexedMapOfOrientedShape)

class TopTools_IndexedMapOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_IndexedMapOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_IndexedMapOfShape, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< TopoDS_Shape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedMapOfShape_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< TopoDS_Shape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_IndexedMapOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_IndexedMapOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_IndexedMapOfShape') -> "void":
        return _TopTools.TopTools_IndexedMapOfShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_IndexedMapOfShape') -> "NCollection_IndexedMap< TopoDS_Shape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedMapOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_IndexedMapOfShape') -> "NCollection_IndexedMap< TopoDS_Shape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_IndexedMapOfShape_Set(self, theOther)

    def ReSize(self, theExtent: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedMapOfShape_ReSize(self, theExtent)

    def Add(self, theKey1: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedMapOfShape_Add(self, theKey1)

    def Contains(self, theKey1: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedMapOfShape_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_IndexedMapOfShape_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedMapOfShape_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _TopTools.TopTools_IndexedMapOfShape_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_IndexedMapOfShape_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_IndexedMapOfShape_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedMapOfShape_FindKey(self, theIndex)

    def __call__(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_IndexedMapOfShape___call__(self, theIndex)

    def FindIndex(self, theKey1: 'TopoDS_Shape') -> "Standard_Integer":
        return _TopTools.TopTools_IndexedMapOfShape_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_IndexedMapOfShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_IndexedMapOfShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_IndexedMapOfShape_Size(self)
TopTools_IndexedMapOfShape_swigregister = _TopTools.TopTools_IndexedMapOfShape_swigregister
TopTools_IndexedMapOfShape_swigregister(TopTools_IndexedMapOfShape)

class TopTools_ListIteratorOfListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_ListIteratorOfListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_ListIteratorOfListOfShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TopTools.new_TopTools_ListIteratorOfListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _TopTools.TopTools_ListIteratorOfListOfShape_More(self)

    def Next(self) -> "void":
        return _TopTools.TopTools_ListIteratorOfListOfShape_Next(self)

    def Value(self) -> "TopoDS_Shape const &":
        return _TopTools.TopTools_ListIteratorOfListOfShape_Value(self)

    def ChangeValue(self) -> "TopoDS_Shape &":
        return _TopTools.TopTools_ListIteratorOfListOfShape_ChangeValue(self)
    __swig_destroy__ = _TopTools.delete_TopTools_ListIteratorOfListOfShape
    __del__ = lambda self: None
TopTools_ListIteratorOfListOfShape_swigregister = _TopTools.TopTools_ListIteratorOfListOfShape_swigregister
TopTools_ListIteratorOfListOfShape_swigregister(TopTools_ListIteratorOfListOfShape)

class TopTools_ListOfListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_ListOfListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_ListOfListOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< TopTools_ListOfShape >::iterator":
        return _TopTools.TopTools_ListOfListOfShape_begin(self)

    def end(self) -> "NCollection_List< TopTools_ListOfShape >::iterator":
        return _TopTools.TopTools_ListOfListOfShape_end(self)

    def cbegin(self) -> "NCollection_List< TopTools_ListOfShape >::const_iterator":
        return _TopTools.TopTools_ListOfListOfShape_cbegin(self)

    def cend(self) -> "NCollection_List< TopTools_ListOfShape >::const_iterator":
        return _TopTools.TopTools_ListOfListOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_ListOfListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_ListOfListOfShape_Size(self)

    def Assign(self, theOther: 'TopTools_ListOfListOfShape') -> "NCollection_List< TopTools_ListOfShape > &":
        return _TopTools.TopTools_ListOfListOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_ListOfListOfShape') -> "NCollection_List< TopTools_ListOfShape > &":
        return _TopTools.TopTools_ListOfListOfShape_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TopTools.TopTools_ListOfListOfShape_Clear(self, theAllocator)

    def First(self) -> "TopTools_ListOfShape const &":
        return _TopTools.TopTools_ListOfListOfShape_First(self)

    def Last(self) -> "TopTools_ListOfShape const &":
        return _TopTools.TopTools_ListOfListOfShape_Last(self)

    def Append(self, *args) -> "void":
        return _TopTools.TopTools_ListOfListOfShape_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TopTools.TopTools_ListOfListOfShape_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TopTools.TopTools_ListOfListOfShape_RemoveFirst(self)

    def Remove(self, theIter: 'NCollection_List< TopTools_ListOfShape >::Iterator &') -> "void":
        return _TopTools.TopTools_ListOfListOfShape_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TopTools.TopTools_ListOfListOfShape_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TopTools.TopTools_ListOfListOfShape_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TopTools.TopTools_ListOfListOfShape_Reverse(self)
    __swig_destroy__ = _TopTools.delete_TopTools_ListOfListOfShape
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TopTools_ListOfListOfShape_swigregister = _TopTools.TopTools_ListOfListOfShape_swigregister
TopTools_ListOfListOfShape_swigregister(TopTools_ListOfListOfShape)

class TopTools_ListOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_ListOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_ListOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< TopoDS_Shape >::iterator":
        return _TopTools.TopTools_ListOfShape_begin(self)

    def end(self) -> "NCollection_List< TopoDS_Shape >::iterator":
        return _TopTools.TopTools_ListOfShape_end(self)

    def cbegin(self) -> "NCollection_List< TopoDS_Shape >::const_iterator":
        return _TopTools.TopTools_ListOfShape_cbegin(self)

    def cend(self) -> "NCollection_List< TopoDS_Shape >::const_iterator":
        return _TopTools.TopTools_ListOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_ListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_ListOfShape_Size(self)

    def Assign(self, theOther: 'TopoDS_ListOfShape') -> "NCollection_List< TopoDS_Shape > &":
        return _TopTools.TopTools_ListOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopoDS_ListOfShape') -> "NCollection_List< TopoDS_Shape > &":
        return _TopTools.TopTools_ListOfShape_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TopTools.TopTools_ListOfShape_Clear(self, theAllocator)

    def First(self) -> "TopoDS_Shape const &":
        return _TopTools.TopTools_ListOfShape_First(self)

    def Last(self) -> "TopoDS_Shape const &":
        return _TopTools.TopTools_ListOfShape_Last(self)

    def Append(self, *args) -> "void":
        return _TopTools.TopTools_ListOfShape_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TopTools.TopTools_ListOfShape_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _TopTools.TopTools_ListOfShape_RemoveFirst(self)

    def Remove(self, theIter: 'TopoDS_ListIteratorOfListOfShape') -> "void":
        return _TopTools.TopTools_ListOfShape_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _TopTools.TopTools_ListOfShape_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TopTools.TopTools_ListOfShape_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _TopTools.TopTools_ListOfShape_Reverse(self)
    __swig_destroy__ = _TopTools.delete_TopTools_ListOfShape
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TopTools_ListOfShape_swigregister = _TopTools.TopTools_ListOfShape_swigregister
TopTools_ListOfShape_swigregister(TopTools_ListOfShape)

class TopTools_MapOfOrientedShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_MapOfOrientedShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_MapOfOrientedShape, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< TopoDS_Shape,TopTools_OrientedShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_MapOfOrientedShape_cbegin(self)

    def cend(self) -> "NCollection_Map< TopoDS_Shape,TopTools_OrientedShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_MapOfOrientedShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_MapOfOrientedShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_MapOfOrientedShape') -> "void":
        return _TopTools.TopTools_MapOfOrientedShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_MapOfOrientedShape') -> "NCollection_Map< TopoDS_Shape,TopTools_OrientedShapeMapHasher > &":
        return _TopTools.TopTools_MapOfOrientedShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_MapOfOrientedShape') -> "NCollection_Map< TopoDS_Shape,TopTools_OrientedShapeMapHasher > &":
        return _TopTools.TopTools_MapOfOrientedShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_MapOfOrientedShape_ReSize(self, N)

    def Add(self, K: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_Add(self, K)

    def Added(self, K: 'TopoDS_Shape') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_MapOfOrientedShape_Added(self, K)

    def Remove(self, K: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_MapOfOrientedShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_MapOfOrientedShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_MapOfOrientedShape_Size(self)

    def IsEqual(self, theOther: 'TopTools_MapOfOrientedShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_Contains(self, *args)

    def Union(self, theLeft: 'TopTools_MapOfOrientedShape', theRight: 'TopTools_MapOfOrientedShape') -> "void":
        return _TopTools.TopTools_MapOfOrientedShape_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TopTools_MapOfOrientedShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TopTools_MapOfOrientedShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TopTools_MapOfOrientedShape', theRight: 'TopTools_MapOfOrientedShape') -> "void":
        return _TopTools.TopTools_MapOfOrientedShape_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TopTools_MapOfOrientedShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TopTools_MapOfOrientedShape', theRight: 'TopTools_MapOfOrientedShape') -> "void":
        return _TopTools.TopTools_MapOfOrientedShape_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TopTools_MapOfOrientedShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_Subtract(self, theOther)

    def Difference(self, theLeft: 'TopTools_MapOfOrientedShape', theRight: 'TopTools_MapOfOrientedShape') -> "void":
        return _TopTools.TopTools_MapOfOrientedShape_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TopTools_MapOfOrientedShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfOrientedShape_Differ(self, theOther)
TopTools_MapOfOrientedShape_swigregister = _TopTools.TopTools_MapOfOrientedShape_swigregister
TopTools_MapOfOrientedShape_swigregister(TopTools_MapOfOrientedShape)

class TopTools_MapOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_MapOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_MapOfShape, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_Map< TopoDS_Shape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_MapOfShape_cbegin(self)

    def cend(self) -> "NCollection_Map< TopoDS_Shape,TopTools_ShapeMapHasher >::const_iterator":
        return _TopTools.TopTools_MapOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_MapOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'TopTools_MapOfShape') -> "void":
        return _TopTools.TopTools_MapOfShape_Exchange(self, theOther)

    def Assign(self, theOther: 'TopTools_MapOfShape') -> "NCollection_Map< TopoDS_Shape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_MapOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_MapOfShape') -> "NCollection_Map< TopoDS_Shape,TopTools_ShapeMapHasher > &":
        return _TopTools.TopTools_MapOfShape_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_MapOfShape_ReSize(self, N)

    def Add(self, K: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_Add(self, K)

    def Added(self, K: 'TopoDS_Shape') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_MapOfShape_Added(self, K)

    def Remove(self, K: 'TopoDS_Shape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_Remove(self, K)

    def Clear(self, *args) -> "void":
        return _TopTools.TopTools_MapOfShape_Clear(self, *args)
    __swig_destroy__ = _TopTools.delete_TopTools_MapOfShape
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_MapOfShape_Size(self)

    def IsEqual(self, theOther: 'TopTools_MapOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_IsEqual(self, theOther)

    def Contains(self, *args) -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_Contains(self, *args)

    def Union(self, theLeft: 'TopTools_MapOfShape', theRight: 'TopTools_MapOfShape') -> "void":
        return _TopTools.TopTools_MapOfShape_Union(self, theLeft, theRight)

    def Unite(self, theOther: 'TopTools_MapOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_Unite(self, theOther)

    def HasIntersection(self, theMap: 'TopTools_MapOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_HasIntersection(self, theMap)

    def Intersection(self, theLeft: 'TopTools_MapOfShape', theRight: 'TopTools_MapOfShape') -> "void":
        return _TopTools.TopTools_MapOfShape_Intersection(self, theLeft, theRight)

    def Intersect(self, theOther: 'TopTools_MapOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_Intersect(self, theOther)

    def Subtraction(self, theLeft: 'TopTools_MapOfShape', theRight: 'TopTools_MapOfShape') -> "void":
        return _TopTools.TopTools_MapOfShape_Subtraction(self, theLeft, theRight)

    def Subtract(self, theOther: 'TopTools_MapOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_Subtract(self, theOther)

    def Difference(self, theLeft: 'TopTools_MapOfShape', theRight: 'TopTools_MapOfShape') -> "void":
        return _TopTools.TopTools_MapOfShape_Difference(self, theLeft, theRight)

    def Differ(self, theOther: 'TopTools_MapOfShape') -> "Standard_Boolean":
        return _TopTools.TopTools_MapOfShape_Differ(self, theOther)
TopTools_MapOfShape_swigregister = _TopTools.TopTools_MapOfShape_swigregister
TopTools_MapOfShape_swigregister(TopTools_MapOfShape)

class TopTools_SequenceOfShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_SequenceOfShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_SequenceOfShape, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< TopoDS_Shape >::iterator":
        return _TopTools.TopTools_SequenceOfShape_begin(self)

    def end(self) -> "NCollection_Sequence< TopoDS_Shape >::iterator":
        return _TopTools.TopTools_SequenceOfShape_end(self)

    def cbegin(self) -> "NCollection_Sequence< TopoDS_Shape >::const_iterator":
        return _TopTools.TopTools_SequenceOfShape_cbegin(self)

    def cend(self) -> "NCollection_Sequence< TopoDS_Shape >::const_iterator":
        return _TopTools.TopTools_SequenceOfShape_cend(self)

    def __init__(self, *args):
        this = _TopTools.new_TopTools_SequenceOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TopTools.TopTools_SequenceOfShape_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TopTools.TopTools_SequenceOfShape_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TopTools.TopTools_SequenceOfShape_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TopTools.TopTools_SequenceOfShape_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TopTools.TopTools_SequenceOfShape_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TopTools.TopTools_SequenceOfShape_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TopTools.TopTools_SequenceOfShape_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TopTools.TopTools_SequenceOfShape_delNode)
    else:
        delNode = _TopTools.TopTools_SequenceOfShape_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TopTools.TopTools_SequenceOfShape_Clear(self, theAllocator)

    def Assign(self, theOther: 'TopTools_SequenceOfShape') -> "NCollection_Sequence< TopoDS_Shape > &":
        return _TopTools.TopTools_SequenceOfShape_Assign(self, theOther)

    def Set(self, theOther: 'TopTools_SequenceOfShape') -> "NCollection_Sequence< TopoDS_Shape > &":
        return _TopTools.TopTools_SequenceOfShape_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TopTools.TopTools_SequenceOfShape_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TopTools.TopTools_SequenceOfShape_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TopTools.TopTools_SequenceOfShape_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TopTools.TopTools_SequenceOfShape_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TopTools.TopTools_SequenceOfShape_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TopTools_SequenceOfShape') -> "void":
        return _TopTools.TopTools_SequenceOfShape_Split(self, theIndex, theSeq)

    def First(self) -> "TopoDS_Shape const &":
        return _TopTools.TopTools_SequenceOfShape_First(self)

    def ChangeFirst(self) -> "TopoDS_Shape &":
        return _TopTools.TopTools_SequenceOfShape_ChangeFirst(self)

    def Last(self) -> "TopoDS_Shape const &":
        return _TopTools.TopTools_SequenceOfShape_Last(self)

    def ChangeLast(self) -> "TopoDS_Shape &":
        return _TopTools.TopTools_SequenceOfShape_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape const &":
        return _TopTools.TopTools_SequenceOfShape_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "TopoDS_Shape &":
        return _TopTools.TopTools_SequenceOfShape_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _TopTools.TopTools_SequenceOfShape___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'TopoDS_Shape') -> "void":
        return _TopTools.TopTools_SequenceOfShape_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TopTools.delete_TopTools_SequenceOfShape
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TopTools_SequenceOfShape_swigregister = _TopTools.TopTools_SequenceOfShape_swigregister
TopTools_SequenceOfShape_swigregister(TopTools_SequenceOfShape)

def TopTools_SequenceOfShape_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TopTools.TopTools_SequenceOfShape_delNode(theNode, theAl)
TopTools_SequenceOfShape_delNode = _TopTools.TopTools_SequenceOfShape_delNode

class toptools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, toptools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, toptools, name)
    __repr__ = _swig_repr

    def Dummy(*args) -> "void":
        """
        This is to bypass an extraction bug. it will force the inclusion of standard_integer.hxx itself including standard_ostream.hxx at the correct position.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _TopTools.toptools_Dummy(*args)

    Dummy = staticmethod(Dummy)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TopTools.new_toptools()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopTools.delete_toptools
    __del__ = lambda self: None
toptools_swigregister = _TopTools.toptools_swigregister
toptools_swigregister(toptools)

def toptools_Dummy(*args) -> "void":
    """
    This is to bypass an extraction bug. it will force the inclusion of standard_integer.hxx itself including standard_ostream.hxx at the correct position.

    Parameters
    ----------
    I: int

    Returns
    -------
    None

    """
    return _TopTools.toptools_Dummy(*args)

class TopTools_LocationSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_LocationSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_LocationSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns an empty set of locations.

        Returns
        -------
        None

        """
        this = _TopTools.new_TopTools_LocationSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Integer":
        """
        Incorporate a new location in the set and returns its index.

        Parameters
        ----------
        L: TopLoc_Location

        Returns
        -------
        int

        """
        return _TopTools.TopTools_LocationSet_Add(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the content of the set.

        Returns
        -------
        None

        """
        return _TopTools.TopTools_LocationSet_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TopTools_LocationSet self) -> std::string"""
        return _TopTools.TopTools_LocationSet_DumpToString(self)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of <l>.

        Parameters
        ----------
        L: TopLoc_Location

        Returns
        -------
        int

        """
        return _TopTools.TopTools_LocationSet_Index(self, *args)


    def Location(self, *args) -> "TopLoc_Location const &":
        """
        Returns the location of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopLoc_Location

        """
        return _TopTools.TopTools_LocationSet_Location(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(TopTools_LocationSet self, std::string src)"""
        return _TopTools.TopTools_LocationSet_ReadFromString(self, src)


    def WriteToString(self) -> "std::string":
        """WriteToString(TopTools_LocationSet self) -> std::string"""
        return _TopTools.TopTools_LocationSet_WriteToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopTools.delete_TopTools_LocationSet
    __del__ = lambda self: None
TopTools_LocationSet_swigregister = _TopTools.TopTools_LocationSet_swigregister
TopTools_LocationSet_swigregister(TopTools_LocationSet)

class TopTools_MutexForShapeProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_MutexForShapeProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_MutexForShapeProvider, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Returns
        -------
        None

        """
        this = _TopTools.new_TopTools_MutexForShapeProvider(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateMutexForShape(self, *args) -> "void":
        """
        Creates and associates mutex with theshape.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopTools.TopTools_MutexForShapeProvider_CreateMutexForShape(self, *args)


    def CreateMutexesForSubShapes(self, *args) -> "void":
        """
        Creates and associates mutexes with each sub-shape of type thetype in theshape.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theType: TopAbs_ShapeEnum

        Returns
        -------
        None

        """
        return _TopTools.TopTools_MutexForShapeProvider_CreateMutexesForSubShapes(self, *args)


    def GetMutex(self, *args) -> "Standard_Mutex *":
        """
        Returns pointer to mutex associated with theshape. in case when mutex not found returns null.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        Standard_Mutex *

        """
        return _TopTools.TopTools_MutexForShapeProvider_GetMutex(self, *args)


    def RemoveAllMutexes(self, *args) -> "void":
        """
        Removes all mutexes.

        Returns
        -------
        None

        """
        return _TopTools.TopTools_MutexForShapeProvider_RemoveAllMutexes(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopTools.delete_TopTools_MutexForShapeProvider
    __del__ = lambda self: None
TopTools_MutexForShapeProvider_swigregister = _TopTools.TopTools_MutexForShapeProvider_swigregister
TopTools_MutexForShapeProvider_swigregister(TopTools_MutexForShapeProvider)

class TopTools_OrientedShapeMapHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_OrientedShapeMapHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_OrientedShapeMapHasher, name)
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        Computes a hash code for the given shape, in the range [1, theupperbound] @param theshape the shape which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

        Parameters
        ----------
        theShape: TopoDS_Shape
        theUpperBound: int

        Returns
        -------
        int

        """
        return _TopTools.TopTools_OrientedShapeMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        Returns true when the two keys are equal. two same keys must have the same hashcode, the contrary is not necessary.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopTools.TopTools_OrientedShapeMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TopTools.new_TopTools_OrientedShapeMapHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopTools.delete_TopTools_OrientedShapeMapHasher
    __del__ = lambda self: None
TopTools_OrientedShapeMapHasher_swigregister = _TopTools.TopTools_OrientedShapeMapHasher_swigregister
TopTools_OrientedShapeMapHasher_swigregister(TopTools_OrientedShapeMapHasher)

def TopTools_OrientedShapeMapHasher_HashCode(*args) -> "Standard_Integer":
    """
    Computes a hash code for the given shape, in the range [1, theupperbound] @param theshape the shape which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

    Parameters
    ----------
    theShape: TopoDS_Shape
    theUpperBound: int

    Returns
    -------
    int

    """
    return _TopTools.TopTools_OrientedShapeMapHasher_HashCode(*args)

def TopTools_OrientedShapeMapHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    Returns true when the two keys are equal. two same keys must have the same hashcode, the contrary is not necessary.

    Parameters
    ----------
    S1: TopoDS_Shape
    S2: TopoDS_Shape

    Returns
    -------
    bool

    """
    return _TopTools.TopTools_OrientedShapeMapHasher_IsEqual(*args)

class TopTools_ShapeMapHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_ShapeMapHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_ShapeMapHasher, name)
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        Computes a hash code for the given shape, in the range [1, theupperbound] @param theshape the shape which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

        Parameters
        ----------
        theShape: TopoDS_Shape
        theUpperBound: int

        Returns
        -------
        int

        """
        return _TopTools.TopTools_ShapeMapHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        Returns true when the two keys are the same. two same keys must have the same hashcode, the contrary is not necessary.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopTools.TopTools_ShapeMapHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TopTools.new_TopTools_ShapeMapHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopTools.delete_TopTools_ShapeMapHasher
    __del__ = lambda self: None
TopTools_ShapeMapHasher_swigregister = _TopTools.TopTools_ShapeMapHasher_swigregister
TopTools_ShapeMapHasher_swigregister(TopTools_ShapeMapHasher)

def TopTools_ShapeMapHasher_HashCode(*args) -> "Standard_Integer":
    """
    Computes a hash code for the given shape, in the range [1, theupperbound] @param theshape the shape which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

    Parameters
    ----------
    theShape: TopoDS_Shape
    theUpperBound: int

    Returns
    -------
    int

    """
    return _TopTools.TopTools_ShapeMapHasher_HashCode(*args)

def TopTools_ShapeMapHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    Returns true when the two keys are the same. two same keys must have the same hashcode, the contrary is not necessary.

    Parameters
    ----------
    S1: TopoDS_Shape
    S2: TopoDS_Shape

    Returns
    -------
    bool

    """
    return _TopTools.TopTools_ShapeMapHasher_IsEqual(*args)

class TopTools_ShapeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_ShapeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_ShapeSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Builds an empty shapeset.

        Returns
        -------
        None

        """
        this = _TopTools.new_TopTools_ShapeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Integer":
        """
        Stores <s> and its sub-shape. returns the index of <s>. the method addgeometry is called on each sub-shape.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        int

        """
        return _TopTools.TopTools_ShapeSet_Add(self, *args)


    def AddGeometry(self, *args) -> "void":
        """
        Stores the geometry of <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopTools.TopTools_ShapeSet_AddGeometry(self, *args)


    def AddShapes(self, *args) -> "void":
        """
        Inserts the shape <s2> in the shape <s1>. this method must be redefined to use the correct builder.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopTools.TopTools_ShapeSet_AddShapes(self, *args)


    def ChangeLocations(self, *args) -> "TopTools_LocationSet &":
        """
        No available documentation.

        Returns
        -------
        TopTools_LocationSet

        """
        return _TopTools.TopTools_ShapeSet_ChangeLocations(self, *args)


    def Check(self, *args) -> "void":
        """
        This method is called after each new completed shape. <t> is the type. <s> is the shape. in this class it does nothing, but it gives the opportunity in derived classes to perform extra treatment on shapes.

        Parameters
        ----------
        T: TopAbs_ShapeEnum
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopTools.TopTools_ShapeSet_Check(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the content of the set. this method can be redefined.

        Returns
        -------
        None

        """
        return _TopTools.TopTools_ShapeSet_Clear(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(TopTools_ShapeSet self) -> std::string"""
        return _TopTools.TopTools_ShapeSet_DumpToString(self)


    def DumpExtentToString(self) -> "std::string":
        """DumpExtentToString(TopTools_ShapeSet self) -> std::string"""
        return _TopTools.TopTools_ShapeSet_DumpExtentToString(self)


    def DumpExtent(self, *args) -> "void":
        """
        Dumps the number of objects in me in the string s (number of shapes of each type).

        Parameters
        ----------
        S: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _TopTools.TopTools_ShapeSet_DumpExtent(self, *args)


    def DumpGeometryToString(self) -> "std::string":
        """DumpGeometryToString(TopTools_ShapeSet self) -> std::string"""
        return _TopTools.TopTools_ShapeSet_DumpGeometryToString(self)


    def FormatNb(self, *args) -> "Standard_Integer":
        """
        Two formats available for the moment: first: does not write curveonsurface uv points into the file on reading calls check() method. second: stores curveonsurface uv points. on reading format is recognized from version string.

        Returns
        -------
        int

        """
        return _TopTools.TopTools_ShapeSet_FormatNb(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        int

        """
        return _TopTools.TopTools_ShapeSet_Index(self, *args)


    def Locations(self, *args) -> "TopTools_LocationSet const &":
        """
        No available documentation.

        Returns
        -------
        TopTools_LocationSet

        """
        return _TopTools.TopTools_ShapeSet_Locations(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """
        Returns number of shapes read from file.

        Returns
        -------
        int

        """
        return _TopTools.TopTools_ShapeSet_NbShapes(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(TopTools_ShapeSet self, std::string src)"""
        return _TopTools.TopTools_ShapeSet_ReadFromString(self, src)


    def ReadGeometryFromString(self, src: 'std::string') -> "void":
        """ReadGeometryFromString(TopTools_ShapeSet self, std::string src)"""
        return _TopTools.TopTools_ShapeSet_ReadGeometryFromString(self, src)


    def SetFormatNb(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theFormatNb: int

        Returns
        -------
        None

        """
        return _TopTools.TopTools_ShapeSet_SetFormatNb(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        Returns the sub-shape of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopTools.TopTools_ShapeSet_Shape(self, *args)


    def WriteToString(self) -> "std::string":
        """WriteToString(TopTools_ShapeSet self) -> std::string"""
        return _TopTools.TopTools_ShapeSet_WriteToString(self)


    def WriteGeometryToString(self) -> "std::string":
        """WriteGeometryToString(TopTools_ShapeSet self) -> std::string"""
        return _TopTools.TopTools_ShapeSet_WriteGeometryToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopTools.delete_TopTools_ShapeSet
    __del__ = lambda self: None
TopTools_ShapeSet_swigregister = _TopTools.TopTools_ShapeSet_swigregister
TopTools_ShapeSet_swigregister(TopTools_ShapeSet)

class TopTools_HArray1OfShape(TopTools_Array1OfShape, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TopTools_Array1OfShape, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_HArray1OfShape, name, value)
    __swig_getmethods__ = {}
    for _s in [TopTools_Array1OfShape, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_HArray1OfShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TopTools.new_TopTools_HArray1OfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TopTools_Array1OfShape const &":
        return _TopTools.TopTools_HArray1OfShape_Array1(self)

    def ChangeArray1(self) -> "TopTools_Array1OfShape &":
        return _TopTools.TopTools_HArray1OfShape_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TopTools_HArray1OfShape_DownCast(t)

    __swig_destroy__ = _TopTools.delete_TopTools_HArray1OfShape
    __del__ = lambda self: None
TopTools_HArray1OfShape_swigregister = _TopTools.TopTools_HArray1OfShape_swigregister
TopTools_HArray1OfShape_swigregister(TopTools_HArray1OfShape)

class TopTools_HArray1OfListOfShape(TopTools_Array1OfListOfShape, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TopTools_Array1OfListOfShape, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_HArray1OfListOfShape, name, value)
    __swig_getmethods__ = {}
    for _s in [TopTools_Array1OfListOfShape, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_HArray1OfListOfShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TopTools.new_TopTools_HArray1OfListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TopTools_Array1OfListOfShape const &":
        return _TopTools.TopTools_HArray1OfListOfShape_Array1(self)

    def ChangeArray1(self) -> "TopTools_Array1OfListOfShape &":
        return _TopTools.TopTools_HArray1OfListOfShape_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TopTools_HArray1OfListOfShape_DownCast(t)

    __swig_destroy__ = _TopTools.delete_TopTools_HArray1OfListOfShape
    __del__ = lambda self: None
TopTools_HArray1OfListOfShape_swigregister = _TopTools.TopTools_HArray1OfListOfShape_swigregister
TopTools_HArray1OfListOfShape_swigregister(TopTools_HArray1OfListOfShape)

class TopTools_HArray2OfShape(TopTools_Array2OfShape, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TopTools_Array2OfShape, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_HArray2OfShape, name, value)
    __swig_getmethods__ = {}
    for _s in [TopTools_Array2OfShape, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_HArray2OfShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TopTools.new_TopTools_HArray2OfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array2(self) -> "TopTools_Array2OfShape const &":
        return _TopTools.TopTools_HArray2OfShape_Array2(self)

    def ChangeArray2(self) -> "TopTools_Array2OfShape &":
        return _TopTools.TopTools_HArray2OfShape_ChangeArray2(self)


    @staticmethod
    def DownCast(t):
      return Handle_TopTools_HArray2OfShape_DownCast(t)

    __swig_destroy__ = _TopTools.delete_TopTools_HArray2OfShape
    __del__ = lambda self: None
TopTools_HArray2OfShape_swigregister = _TopTools.TopTools_HArray2OfShape_swigregister
TopTools_HArray2OfShape_swigregister(TopTools_HArray2OfShape)

class TopTools_HSequenceOfShape(TopTools_SequenceOfShape, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TopTools_SequenceOfShape, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopTools_HSequenceOfShape, name, value)
    __swig_getmethods__ = {}
    for _s in [TopTools_SequenceOfShape, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopTools_HSequenceOfShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TopTools.new_TopTools_HSequenceOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TopTools_SequenceOfShape const &":
        return _TopTools.TopTools_HSequenceOfShape_Sequence(self)

    def Append(self, *args) -> "void":
        return _TopTools.TopTools_HSequenceOfShape_Append(self, *args)

    def ChangeSequence(self) -> "TopTools_SequenceOfShape &":
        return _TopTools.TopTools_HSequenceOfShape_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TopTools_HSequenceOfShape_DownCast(t)

    __swig_destroy__ = _TopTools.delete_TopTools_HSequenceOfShape
    __del__ = lambda self: None
TopTools_HSequenceOfShape_swigregister = _TopTools.TopTools_HSequenceOfShape_swigregister
TopTools_HSequenceOfShape_swigregister(TopTools_HSequenceOfShape)



# This file is compatible with both classic and new-style classes.


