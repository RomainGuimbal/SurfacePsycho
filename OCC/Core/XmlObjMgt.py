# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlObjMgt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmlobjmgt.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlObjMgt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlObjMgt')
    _XmlObjMgt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlObjMgt', [dirname(__file__)])
        except ImportError:
            import _XmlObjMgt
            return _XmlObjMgt
        try:
            _mod = imp.load_module('_XmlObjMgt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlObjMgt = swig_import_helper()
    del swig_import_helper
else:
    import _XmlObjMgt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlObjMgt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XmlObjMgt.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlObjMgt.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlObjMgt.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XmlObjMgt.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XmlObjMgt.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XmlObjMgt.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XmlObjMgt.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XmlObjMgt.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XmlObjMgt.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlObjMgt.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlObjMgt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlObjMgt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlObjMgt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlObjMgt.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlObjMgt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XmlObjMgt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlObjMgt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlObjMgt.process_exception(error, method_name, class_name)
process_exception = _XmlObjMgt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.LDOM
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *



class xmlobjmgt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xmlobjmgt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xmlobjmgt, name)
    __repr__ = _swig_repr

    def FindChildByName(*args) -> "XmlObjMgt_Element":
        """
        No available documentation.

        Parameters
        ----------
        theSource: XmlObjMgt_Element
        theName: XmlObjMgt_DOMString

        Returns
        -------
        XmlObjMgt_Element

        """
        return _XmlObjMgt.xmlobjmgt_FindChildByName(*args)

    FindChildByName = staticmethod(FindChildByName)

    def FindChildByRef(*args) -> "XmlObjMgt_Element":
        """
        No available documentation.

        Parameters
        ----------
        theSource: XmlObjMgt_Element
        theRefName: XmlObjMgt_DOMString

        Returns
        -------
        XmlObjMgt_Element

        """
        return _XmlObjMgt.xmlobjmgt_FindChildByRef(*args)

    FindChildByRef = staticmethod(FindChildByRef)

    def FindChildElement(*args) -> "XmlObjMgt_Element":
        """
        No available documentation.

        Parameters
        ----------
        theSource: XmlObjMgt_Element
        theObjId: int

        Returns
        -------
        XmlObjMgt_Element

        """
        return _XmlObjMgt.xmlobjmgt_FindChildElement(*args)

    FindChildElement = staticmethod(FindChildElement)

    def GetExtendedString(*args) -> "Standard_Boolean":
        """
        Get attribute <theelement extstring='thestring' ...>.

        Parameters
        ----------
        theElement: XmlObjMgt_Element
        theString: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _XmlObjMgt.xmlobjmgt_GetExtendedString(*args)

    GetExtendedString = staticmethod(GetExtendedString)

    def GetInteger(*args) -> "Standard_Integer &":
        """
        No available documentation.

        Parameters
        ----------
        theString: char *

        Returns
        -------
        theValue: int

        """
        return _XmlObjMgt.xmlobjmgt_GetInteger(*args)

    GetInteger = staticmethod(GetInteger)

    def GetReal(*args) -> "Standard_Real &":
        """
        No available documentation.

        Parameters
        ----------
        theString: char *

        Returns
        -------
        theValue: float

        No available documentation.

        Parameters
        ----------
        theString: XmlObjMgt_DOMString

        Returns
        -------
        theValue: float

        """
        return _XmlObjMgt.xmlobjmgt_GetReal(*args)

    GetReal = staticmethod(GetReal)

    def GetStringValue(*args) -> "XmlObjMgt_DOMString":
        """
        Returns the first child text node.

        Parameters
        ----------
        theElement: XmlObjMgt_Element

        Returns
        -------
        XmlObjMgt_DOMString

        """
        return _XmlObjMgt.xmlobjmgt_GetStringValue(*args)

    GetStringValue = staticmethod(GetStringValue)

    def GetTagEntryString(*args) -> "Standard_Boolean":
        """
        Convert xpath expression (domstring) into tagentry string returns false on error.

        Parameters
        ----------
        theTarget: XmlObjMgt_DOMString
        theTagEntry: TCollection_AsciiString

        Returns
        -------
        bool

        """
        return _XmlObjMgt.xmlobjmgt_GetTagEntryString(*args)

    GetTagEntryString = staticmethod(GetTagEntryString)

    def IdString(*args) -> "XmlObjMgt_DOMString const &":
        """
        Define the name of xmlattribute 'id' (to be used everywhere).

        Returns
        -------
        XmlObjMgt_DOMString

        """
        return _XmlObjMgt.xmlobjmgt_IdString(*args)

    IdString = staticmethod(IdString)

    def SetExtendedString(*args) -> "Standard_Boolean":
        """
        Add attribute <theelement extstring='thestring' ...>.

        Parameters
        ----------
        theElement: XmlObjMgt_Element
        theString: TCollection_ExtendedString

        Returns
        -------
        bool

        """
        return _XmlObjMgt.xmlobjmgt_SetExtendedString(*args)

    SetExtendedString = staticmethod(SetExtendedString)

    def SetStringValue(*args) -> "void":
        """
        Add thedata as the last child text node to theelement iscleartext(true) avoids analysis of the string and replacement of characters like '<' and '&' during xml file storage. do never set iscleartext unless you have a hell of a reason.

        Parameters
        ----------
        theElement: XmlObjMgt_Element
        theData: XmlObjMgt_DOMString
        isClearText: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _XmlObjMgt.xmlobjmgt_SetStringValue(*args)

    SetStringValue = staticmethod(SetStringValue)

    def SetTagEntryString(*args) -> "void":
        """
        Convert xpath expression (domstring) into tagentry string returns false on error.

        Parameters
        ----------
        theSource: XmlObjMgt_DOMString
        theTagEntry: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _XmlObjMgt.xmlobjmgt_SetTagEntryString(*args)

    SetTagEntryString = staticmethod(SetTagEntryString)

    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlObjMgt.new_xmlobjmgt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlObjMgt.delete_xmlobjmgt
    __del__ = lambda self: None
xmlobjmgt_swigregister = _XmlObjMgt.xmlobjmgt_swigregister
xmlobjmgt_swigregister(xmlobjmgt)

def xmlobjmgt_FindChildByName(*args) -> "XmlObjMgt_Element":
    """
    No available documentation.

    Parameters
    ----------
    theSource: XmlObjMgt_Element
    theName: XmlObjMgt_DOMString

    Returns
    -------
    XmlObjMgt_Element

    """
    return _XmlObjMgt.xmlobjmgt_FindChildByName(*args)

def xmlobjmgt_FindChildByRef(*args) -> "XmlObjMgt_Element":
    """
    No available documentation.

    Parameters
    ----------
    theSource: XmlObjMgt_Element
    theRefName: XmlObjMgt_DOMString

    Returns
    -------
    XmlObjMgt_Element

    """
    return _XmlObjMgt.xmlobjmgt_FindChildByRef(*args)

def xmlobjmgt_FindChildElement(*args) -> "XmlObjMgt_Element":
    """
    No available documentation.

    Parameters
    ----------
    theSource: XmlObjMgt_Element
    theObjId: int

    Returns
    -------
    XmlObjMgt_Element

    """
    return _XmlObjMgt.xmlobjmgt_FindChildElement(*args)

def xmlobjmgt_GetExtendedString(*args) -> "Standard_Boolean":
    """
    Get attribute <theelement extstring='thestring' ...>.

    Parameters
    ----------
    theElement: XmlObjMgt_Element
    theString: TCollection_ExtendedString

    Returns
    -------
    bool

    """
    return _XmlObjMgt.xmlobjmgt_GetExtendedString(*args)

def xmlobjmgt_GetInteger(*args) -> "Standard_Integer &":
    """
    No available documentation.

    Parameters
    ----------
    theString: char *

    Returns
    -------
    theValue: int

    """
    return _XmlObjMgt.xmlobjmgt_GetInteger(*args)

def xmlobjmgt_GetReal(*args) -> "Standard_Real &":
    """
    No available documentation.

    Parameters
    ----------
    theString: char *

    Returns
    -------
    theValue: float

    No available documentation.

    Parameters
    ----------
    theString: XmlObjMgt_DOMString

    Returns
    -------
    theValue: float

    """
    return _XmlObjMgt.xmlobjmgt_GetReal(*args)

def xmlobjmgt_GetStringValue(*args) -> "XmlObjMgt_DOMString":
    """
    Returns the first child text node.

    Parameters
    ----------
    theElement: XmlObjMgt_Element

    Returns
    -------
    XmlObjMgt_DOMString

    """
    return _XmlObjMgt.xmlobjmgt_GetStringValue(*args)

def xmlobjmgt_GetTagEntryString(*args) -> "Standard_Boolean":
    """
    Convert xpath expression (domstring) into tagentry string returns false on error.

    Parameters
    ----------
    theTarget: XmlObjMgt_DOMString
    theTagEntry: TCollection_AsciiString

    Returns
    -------
    bool

    """
    return _XmlObjMgt.xmlobjmgt_GetTagEntryString(*args)

def xmlobjmgt_IdString(*args) -> "XmlObjMgt_DOMString const &":
    """
    Define the name of xmlattribute 'id' (to be used everywhere).

    Returns
    -------
    XmlObjMgt_DOMString

    """
    return _XmlObjMgt.xmlobjmgt_IdString(*args)

def xmlobjmgt_SetExtendedString(*args) -> "Standard_Boolean":
    """
    Add attribute <theelement extstring='thestring' ...>.

    Parameters
    ----------
    theElement: XmlObjMgt_Element
    theString: TCollection_ExtendedString

    Returns
    -------
    bool

    """
    return _XmlObjMgt.xmlobjmgt_SetExtendedString(*args)

def xmlobjmgt_SetStringValue(*args) -> "void":
    """
    Add thedata as the last child text node to theelement iscleartext(true) avoids analysis of the string and replacement of characters like '<' and '&' during xml file storage. do never set iscleartext unless you have a hell of a reason.

    Parameters
    ----------
    theElement: XmlObjMgt_Element
    theData: XmlObjMgt_DOMString
    isClearText: bool,optional
    	default value is Standard_False

    Returns
    -------
    None

    """
    return _XmlObjMgt.xmlobjmgt_SetStringValue(*args)

def xmlobjmgt_SetTagEntryString(*args) -> "void":
    """
    Convert xpath expression (domstring) into tagentry string returns false on error.

    Parameters
    ----------
    theSource: XmlObjMgt_DOMString
    theTagEntry: TCollection_AsciiString

    Returns
    -------
    None

    """
    return _XmlObjMgt.xmlobjmgt_SetTagEntryString(*args)

class XmlObjMgt_Array1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlObjMgt_Array1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlObjMgt_Array1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Create an array of lower bound <low> and upper bound <up>. range error is raised when <up> is less than <low>.

        Parameters
        ----------
        Low: int
        Up: int

        Returns
        -------
        None

        For restoration from dom_element which is child of theparent: <theparent ...> <thename ...>.

        Parameters
        ----------
        theParent: XmlObjMgt_Element
        theName: XmlObjMgt_DOMString

        Returns
        -------
        None

        """
        this = _XmlObjMgt.new_XmlObjMgt_Array1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateArrayElement(self, *args) -> "void":
        """
        Create dom_element representing the array, under 'theparent'.

        Parameters
        ----------
        theParent: XmlObjMgt_Element
        theName: XmlObjMgt_DOMString

        Returns
        -------
        None

        """
        return _XmlObjMgt.XmlObjMgt_Array1_CreateArrayElement(self, *args)


    def Element(self, *args) -> "XmlObjMgt_Element const &":
        """
        Returns the dom element of <self>.

        Returns
        -------
        XmlObjMgt_Element

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Element(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        Returns the number of elements of <self>.

        Returns
        -------
        int

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        Returns the lower bound.

        Returns
        -------
        int

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Lower(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Set the <index>th element of the array to <value>.

        Parameters
        ----------
        Index: int
        Value: XmlObjMgt_Element

        Returns
        -------
        None

        """
        return _XmlObjMgt.XmlObjMgt_Array1_SetValue(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        Returns the upper bound.

        Returns
        -------
        int

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Upper(self, *args)


    def Value(self, *args) -> "XmlObjMgt_Element":
        """
        Returns the value of <index>th element of the array.

        Parameters
        ----------
        Index: int

        Returns
        -------
        XmlObjMgt_Element

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_Array1
    __del__ = lambda self: None
XmlObjMgt_Array1_swigregister = _XmlObjMgt.XmlObjMgt_Array1_swigregister
XmlObjMgt_Array1_swigregister(XmlObjMgt_Array1)

class XmlObjMgt_GP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlObjMgt_GP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlObjMgt_GP, name)
    __repr__ = _swig_repr

    def Translate(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        aTrsf: gp_Trsf

        Returns
        -------
        XmlObjMgt_DOMString

        No available documentation.

        Parameters
        ----------
        aMat: gp_Mat

        Returns
        -------
        XmlObjMgt_DOMString

        No available documentation.

        Parameters
        ----------
        anXYZ: gp_XYZ

        Returns
        -------
        XmlObjMgt_DOMString

        No available documentation.

        Parameters
        ----------
        aStr: XmlObjMgt_DOMString
        T: gp_Trsf

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        aStr: XmlObjMgt_DOMString
        T: gp_Mat

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        aStr: XmlObjMgt_DOMString
        T: gp_XYZ

        Returns
        -------
        bool

        """
        return _XmlObjMgt.XmlObjMgt_GP_Translate(*args)

    Translate = staticmethod(Translate)

    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlObjMgt.new_XmlObjMgt_GP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_GP
    __del__ = lambda self: None
XmlObjMgt_GP_swigregister = _XmlObjMgt.XmlObjMgt_GP_swigregister
XmlObjMgt_GP_swigregister(XmlObjMgt_GP)

def XmlObjMgt_GP_Translate(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    aTrsf: gp_Trsf

    Returns
    -------
    XmlObjMgt_DOMString

    No available documentation.

    Parameters
    ----------
    aMat: gp_Mat

    Returns
    -------
    XmlObjMgt_DOMString

    No available documentation.

    Parameters
    ----------
    anXYZ: gp_XYZ

    Returns
    -------
    XmlObjMgt_DOMString

    No available documentation.

    Parameters
    ----------
    aStr: XmlObjMgt_DOMString
    T: gp_Trsf

    Returns
    -------
    bool

    No available documentation.

    Parameters
    ----------
    aStr: XmlObjMgt_DOMString
    T: gp_Mat

    Returns
    -------
    bool

    No available documentation.

    Parameters
    ----------
    aStr: XmlObjMgt_DOMString
    T: gp_XYZ

    Returns
    -------
    bool

    """
    return _XmlObjMgt.XmlObjMgt_GP_Translate(*args)

class XmlObjMgt_Persistent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlObjMgt_Persistent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlObjMgt_Persistent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        Constructor.

        Parameters
        ----------
        theElement: XmlObjMgt_Element

        Returns
        -------
        None

        Constructor from sub-element of element referenced by theref.

        Parameters
        ----------
        theElement: XmlObjMgt_Element
        theRef: XmlObjMgt_DOMString

        Returns
        -------
        None

        """
        this = _XmlObjMgt.new_XmlObjMgt_Persistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateElement(self, *args) -> "void":
        """
        Myelement := <thetype id='theid'/>.

        Parameters
        ----------
        theParent: XmlObjMgt_Element
        theType: XmlObjMgt_DOMString
        theID: int

        Returns
        -------
        None

        """
        return _XmlObjMgt.XmlObjMgt_Persistent_CreateElement(self, *args)


    def Element(self, *args) -> "XmlObjMgt_Element const &":
        """
        Return myelement.

        Returns
        -------
        XmlObjMgt_Element

        """
        return _XmlObjMgt.XmlObjMgt_Persistent_Element(self, *args)


    def Id(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _XmlObjMgt.XmlObjMgt_Persistent_Id(self, *args)


    def SetId(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theId: int

        Returns
        -------
        None

        """
        return _XmlObjMgt.XmlObjMgt_Persistent_SetId(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_Persistent
    __del__ = lambda self: None
XmlObjMgt_Persistent_swigregister = _XmlObjMgt.XmlObjMgt_Persistent_swigregister
XmlObjMgt_Persistent_swigregister(XmlObjMgt_Persistent)

class XmlObjMgt_RRelocationTable(OCC.Core.TColStd.TColStd_DataMapOfIntegerTransient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TColStd.TColStd_DataMapOfIntegerTransient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlObjMgt_RRelocationTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TColStd.TColStd_DataMapOfIntegerTransient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlObjMgt_RRelocationTable, name)
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        doReleaseMemory: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _XmlObjMgt.XmlObjMgt_RRelocationTable_Clear(self, *args)


    def GetHeaderData(self, *args) -> "opencascade::handle< Storage_HeaderData > const &":
        """
        Returns a handle to the header data of the file that is begin read.

        Returns
        -------
        opencascade::handle<Storage_HeaderData>

        """
        return _XmlObjMgt.XmlObjMgt_RRelocationTable_GetHeaderData(self, *args)


    def SetHeaderData(self, *args) -> "void":
        """
        Sets the storage header data. //! @param theheaderdata header data of the file that is begin read.

        Parameters
        ----------
        theHeaderData: Storage_HeaderData

        Returns
        -------
        None

        """
        return _XmlObjMgt.XmlObjMgt_RRelocationTable_SetHeaderData(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlObjMgt.new_XmlObjMgt_RRelocationTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_RRelocationTable
    __del__ = lambda self: None
XmlObjMgt_RRelocationTable_swigregister = _XmlObjMgt.XmlObjMgt_RRelocationTable_swigregister
XmlObjMgt_RRelocationTable_swigregister(XmlObjMgt_RRelocationTable)

class XmlObjMgt_SRelocationTable(OCC.Core.TColStd.TColStd_IndexedMapOfTransient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TColStd.TColStd_IndexedMapOfTransient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlObjMgt_SRelocationTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TColStd.TColStd_IndexedMapOfTransient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlObjMgt_SRelocationTable, name)
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        doReleaseMemory: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _XmlObjMgt.XmlObjMgt_SRelocationTable_Clear(self, *args)


    def GetHeaderData(self, *args) -> "opencascade::handle< Storage_HeaderData > const &":
        """
        Returns a handle to the header data of the file that is begin read.

        Returns
        -------
        opencascade::handle<Storage_HeaderData>

        """
        return _XmlObjMgt.XmlObjMgt_SRelocationTable_GetHeaderData(self, *args)


    def SetHeaderData(self, *args) -> "void":
        """
        Sets the storage header data. //! @param theheaderdata header data of the file that is begin read.

        Parameters
        ----------
        theHeaderData: Storage_HeaderData

        Returns
        -------
        None

        """
        return _XmlObjMgt.XmlObjMgt_SRelocationTable_SetHeaderData(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlObjMgt.new_XmlObjMgt_SRelocationTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_SRelocationTable
    __del__ = lambda self: None
XmlObjMgt_SRelocationTable_swigregister = _XmlObjMgt.XmlObjMgt_SRelocationTable_swigregister
XmlObjMgt_SRelocationTable_swigregister(XmlObjMgt_SRelocationTable)


XmlObjMgt_Document=OCC.Core.LDOM.LDOM_Document
XmlObjMgt_Element=OCC.Core.LDOM.LDOM_Element

# This file is compatible with both classic and new-style classes.


