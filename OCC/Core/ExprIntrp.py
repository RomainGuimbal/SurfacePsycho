# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ExprIntrp module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_exprintrp.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ExprIntrp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ExprIntrp')
    _ExprIntrp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ExprIntrp', [dirname(__file__)])
        except ImportError:
            import _ExprIntrp
            return _ExprIntrp
        try:
            _mod = imp.load_module('_ExprIntrp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ExprIntrp = swig_import_helper()
    del swig_import_helper
else:
    import _ExprIntrp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ExprIntrp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _ExprIntrp.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ExprIntrp.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ExprIntrp.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _ExprIntrp.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _ExprIntrp.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _ExprIntrp.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _ExprIntrp.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _ExprIntrp.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _ExprIntrp.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ExprIntrp.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _ExprIntrp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _ExprIntrp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ExprIntrp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ExprIntrp.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ExprIntrp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _ExprIntrp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ExprIntrp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ExprIntrp.process_exception(error, method_name, class_name)
process_exception = _ExprIntrp.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Expr
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_ExprIntrp_Generator_Create() -> "opencascade::handle< ExprIntrp_Generator >":
    return _ExprIntrp.Handle_ExprIntrp_Generator_Create()
Handle_ExprIntrp_Generator_Create = _ExprIntrp.Handle_ExprIntrp_Generator_Create

def Handle_ExprIntrp_Generator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ExprIntrp_Generator >":
    return _ExprIntrp.Handle_ExprIntrp_Generator_DownCast(t)
Handle_ExprIntrp_Generator_DownCast = _ExprIntrp.Handle_ExprIntrp_Generator_DownCast

def Handle_ExprIntrp_Generator_IsNull(t: 'opencascade::handle< ExprIntrp_Generator > const &') -> "bool":
    return _ExprIntrp.Handle_ExprIntrp_Generator_IsNull(t)
Handle_ExprIntrp_Generator_IsNull = _ExprIntrp.Handle_ExprIntrp_Generator_IsNull

def Handle_ExprIntrp_GenExp_Create() -> "opencascade::handle< ExprIntrp_GenExp >":
    return _ExprIntrp.Handle_ExprIntrp_GenExp_Create()
Handle_ExprIntrp_GenExp_Create = _ExprIntrp.Handle_ExprIntrp_GenExp_Create

def Handle_ExprIntrp_GenExp_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ExprIntrp_GenExp >":
    return _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast(t)
Handle_ExprIntrp_GenExp_DownCast = _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast

def Handle_ExprIntrp_GenExp_IsNull(t: 'opencascade::handle< ExprIntrp_GenExp > const &') -> "bool":
    return _ExprIntrp.Handle_ExprIntrp_GenExp_IsNull(t)
Handle_ExprIntrp_GenExp_IsNull = _ExprIntrp.Handle_ExprIntrp_GenExp_IsNull

def Handle_ExprIntrp_GenFct_Create() -> "opencascade::handle< ExprIntrp_GenFct >":
    return _ExprIntrp.Handle_ExprIntrp_GenFct_Create()
Handle_ExprIntrp_GenFct_Create = _ExprIntrp.Handle_ExprIntrp_GenFct_Create

def Handle_ExprIntrp_GenFct_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ExprIntrp_GenFct >":
    return _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast(t)
Handle_ExprIntrp_GenFct_DownCast = _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast

def Handle_ExprIntrp_GenFct_IsNull(t: 'opencascade::handle< ExprIntrp_GenFct > const &') -> "bool":
    return _ExprIntrp.Handle_ExprIntrp_GenFct_IsNull(t)
Handle_ExprIntrp_GenFct_IsNull = _ExprIntrp.Handle_ExprIntrp_GenFct_IsNull

def Handle_ExprIntrp_GenRel_Create() -> "opencascade::handle< ExprIntrp_GenRel >":
    return _ExprIntrp.Handle_ExprIntrp_GenRel_Create()
Handle_ExprIntrp_GenRel_Create = _ExprIntrp.Handle_ExprIntrp_GenRel_Create

def Handle_ExprIntrp_GenRel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ExprIntrp_GenRel >":
    return _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast(t)
Handle_ExprIntrp_GenRel_DownCast = _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast

def Handle_ExprIntrp_GenRel_IsNull(t: 'opencascade::handle< ExprIntrp_GenRel > const &') -> "bool":
    return _ExprIntrp.Handle_ExprIntrp_GenRel_IsNull(t)
Handle_ExprIntrp_GenRel_IsNull = _ExprIntrp.Handle_ExprIntrp_GenRel_IsNull
class ExprIntrp_ListIteratorOfStackOfGeneralExpression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_ListIteratorOfStackOfGeneralExpression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_ListIteratorOfStackOfGeneralExpression, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralExpression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_More(self)

    def Next(self) -> "void":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Next(self)

    def Value(self) -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Value(self)

    def ChangeValue(self) -> "opencascade::handle< Expr_GeneralExpression > &":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_ChangeValue(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralExpression
    __del__ = lambda self: None
ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralExpression)

class ExprIntrp_ListIteratorOfStackOfGeneralFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_ListIteratorOfStackOfGeneralFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_ListIteratorOfStackOfGeneralFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_More(self)

    def Next(self) -> "void":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Next(self)

    def Value(self) -> "opencascade::handle< Expr_GeneralFunction > const &":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Value(self)

    def ChangeValue(self) -> "opencascade::handle< Expr_GeneralFunction > &":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_ChangeValue(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralFunction
    __del__ = lambda self: None
ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralFunction)

class ExprIntrp_ListIteratorOfStackOfGeneralRelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_ListIteratorOfStackOfGeneralRelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_ListIteratorOfStackOfGeneralRelation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralRelation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_More(self)

    def Next(self) -> "void":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Next(self)

    def Value(self) -> "opencascade::handle< Expr_GeneralRelation > const &":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Value(self)

    def ChangeValue(self) -> "opencascade::handle< Expr_GeneralRelation > &":
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_ChangeValue(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralRelation
    __del__ = lambda self: None
ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralRelation)

class ExprIntrp_SequenceOfNamedExpression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_SequenceOfNamedExpression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_SequenceOfNamedExpression, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Expr_NamedExpression > >::iterator":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Expr_NamedExpression > >::iterator":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Expr_NamedExpression > >::const_iterator":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Expr_NamedExpression > >::const_iterator":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_cend(self)

    def __init__(self, *args):
        this = _ExprIntrp.new_ExprIntrp_SequenceOfNamedExpression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Size(self)

    def Length(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_IsEmpty(self)

    def Reverse(self) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_delNode)
    else:
        delNode = _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Clear(self, theAllocator)

    def Assign(self, theOther: 'ExprIntrp_SequenceOfNamedExpression') -> "NCollection_Sequence< opencascade::handle< Expr_NamedExpression > > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Assign(self, theOther)

    def Set(self, theOther: 'ExprIntrp_SequenceOfNamedExpression') -> "NCollection_Sequence< opencascade::handle< Expr_NamedExpression > > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'ExprIntrp_SequenceOfNamedExpression') -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Expr_NamedExpression > const &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Expr_NamedExpression > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Expr_NamedExpression > const &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Expr_NamedExpression > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_NamedExpression > const &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_NamedExpression > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Expr_NamedExpression > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Expr_NamedExpression > const &') -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceOfNamedExpression
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

ExprIntrp_SequenceOfNamedExpression_swigregister = _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swigregister
ExprIntrp_SequenceOfNamedExpression_swigregister(ExprIntrp_SequenceOfNamedExpression)

def ExprIntrp_SequenceOfNamedExpression_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_delNode(theNode, theAl)
ExprIntrp_SequenceOfNamedExpression_delNode = _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_delNode

class ExprIntrp_SequenceOfNamedFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_SequenceOfNamedFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_SequenceOfNamedFunction, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Expr_NamedFunction > >::iterator":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Expr_NamedFunction > >::iterator":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Expr_NamedFunction > >::const_iterator":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Expr_NamedFunction > >::const_iterator":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_cend(self)

    def __init__(self, *args):
        this = _ExprIntrp.new_ExprIntrp_SequenceOfNamedFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Size(self)

    def Length(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_IsEmpty(self)

    def Reverse(self) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_delNode)
    else:
        delNode = _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Clear(self, theAllocator)

    def Assign(self, theOther: 'ExprIntrp_SequenceOfNamedFunction') -> "NCollection_Sequence< opencascade::handle< Expr_NamedFunction > > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Assign(self, theOther)

    def Set(self, theOther: 'ExprIntrp_SequenceOfNamedFunction') -> "NCollection_Sequence< opencascade::handle< Expr_NamedFunction > > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'ExprIntrp_SequenceOfNamedFunction') -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Expr_NamedFunction > const &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Expr_NamedFunction > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Expr_NamedFunction > const &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Expr_NamedFunction > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_NamedFunction > const &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_NamedFunction > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Expr_NamedFunction > &":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Expr_NamedFunction > const &') -> "void":
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceOfNamedFunction
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

ExprIntrp_SequenceOfNamedFunction_swigregister = _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swigregister
ExprIntrp_SequenceOfNamedFunction_swigregister(ExprIntrp_SequenceOfNamedFunction)

def ExprIntrp_SequenceOfNamedFunction_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_delNode(theNode, theAl)
ExprIntrp_SequenceOfNamedFunction_delNode = _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_delNode

class ExprIntrp_StackOfGeneralExpression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_StackOfGeneralExpression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_StackOfGeneralExpression, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< Expr_GeneralExpression > >::iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< Expr_GeneralExpression > >::iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< Expr_GeneralExpression > >::const_iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< Expr_GeneralExpression > >::const_iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_cend(self)

    def __init__(self, *args):
        this = _ExprIntrp.new_ExprIntrp_StackOfGeneralExpression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Size(self)

    def Assign(self, theOther: 'ExprIntrp_StackOfGeneralExpression') -> "NCollection_List< opencascade::handle< Expr_GeneralExpression > > &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Assign(self, theOther)

    def Set(self, theOther: 'ExprIntrp_StackOfGeneralExpression') -> "NCollection_List< opencascade::handle< Expr_GeneralExpression > > &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_First(self)

    def Last(self) -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Last(self)

    def Append(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_RemoveFirst(self)

    def Remove(self, theIter: 'ExprIntrp_ListIteratorOfStackOfGeneralExpression') -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Reverse(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralExpression
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

ExprIntrp_StackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralExpression_swigregister
ExprIntrp_StackOfGeneralExpression_swigregister(ExprIntrp_StackOfGeneralExpression)

class ExprIntrp_StackOfGeneralFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_StackOfGeneralFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_StackOfGeneralFunction, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< Expr_GeneralFunction > >::iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< Expr_GeneralFunction > >::iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< Expr_GeneralFunction > >::const_iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< Expr_GeneralFunction > >::const_iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_cend(self)

    def __init__(self, *args):
        this = _ExprIntrp.new_ExprIntrp_StackOfGeneralFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Size(self)

    def Assign(self, theOther: 'ExprIntrp_StackOfGeneralFunction') -> "NCollection_List< opencascade::handle< Expr_GeneralFunction > > &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Assign(self, theOther)

    def Set(self, theOther: 'ExprIntrp_StackOfGeneralFunction') -> "NCollection_List< opencascade::handle< Expr_GeneralFunction > > &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< Expr_GeneralFunction > const &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_First(self)

    def Last(self) -> "opencascade::handle< Expr_GeneralFunction > const &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Last(self)

    def Append(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_RemoveFirst(self)

    def Remove(self, theIter: 'ExprIntrp_ListIteratorOfStackOfGeneralFunction') -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Reverse(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralFunction
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

ExprIntrp_StackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralFunction_swigregister
ExprIntrp_StackOfGeneralFunction_swigregister(ExprIntrp_StackOfGeneralFunction)

class ExprIntrp_StackOfGeneralRelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_StackOfGeneralRelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_StackOfGeneralRelation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< Expr_GeneralRelation > >::iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< Expr_GeneralRelation > >::iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< Expr_GeneralRelation > >::const_iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< Expr_GeneralRelation > >::const_iterator":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_cend(self)

    def __init__(self, *args):
        this = _ExprIntrp.new_ExprIntrp_StackOfGeneralRelation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Size(self)

    def Assign(self, theOther: 'ExprIntrp_StackOfGeneralRelation') -> "NCollection_List< opencascade::handle< Expr_GeneralRelation > > &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Assign(self, theOther)

    def Set(self, theOther: 'ExprIntrp_StackOfGeneralRelation') -> "NCollection_List< opencascade::handle< Expr_GeneralRelation > > &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< Expr_GeneralRelation > const &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_First(self)

    def Last(self) -> "opencascade::handle< Expr_GeneralRelation > const &":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Last(self)

    def Append(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_RemoveFirst(self)

    def Remove(self, theIter: 'ExprIntrp_ListIteratorOfStackOfGeneralRelation') -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Reverse(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralRelation
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

ExprIntrp_StackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralRelation_swigregister
ExprIntrp_StackOfGeneralRelation_swigregister(ExprIntrp_StackOfGeneralRelation)

class exprintrp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, exprintrp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, exprintrp, name)
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        this = _ExprIntrp.new_exprintrp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ExprIntrp.delete_exprintrp
    __del__ = lambda self: None
exprintrp_swigregister = _ExprIntrp.exprintrp_swigregister
exprintrp_swigregister(exprintrp)

class ExprIntrp_Analysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_Analysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_Analysis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _ExprIntrp.new_ExprIntrp_Analysis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetFunction(self, *args) -> "opencascade::handle< Expr_NamedFunction >":
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_AsciiString

        Returns
        -------
        opencascade::handle<Expr_NamedFunction>

        """
        return _ExprIntrp.ExprIntrp_Analysis_GetFunction(self, *args)


    def GetNamed(self, *args) -> "opencascade::handle< Expr_NamedExpression >":
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_AsciiString

        Returns
        -------
        opencascade::handle<Expr_NamedExpression>

        """
        return _ExprIntrp.ExprIntrp_Analysis_GetNamed(self, *args)


    def IsExpStackEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _ExprIntrp.ExprIntrp_Analysis_IsExpStackEmpty(self, *args)


    def IsRelStackEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _ExprIntrp.ExprIntrp_Analysis_IsRelStackEmpty(self, *args)


    def Pop(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _ExprIntrp.ExprIntrp_Analysis_Pop(self, *args)


    def PopFunction(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopFunction(self, *args)


    def PopName(self, *args) -> "TCollection_AsciiString":
        """
        No available documentation.

        Returns
        -------
        TCollection_AsciiString

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopName(self, *args)


    def PopRelation(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Expr_GeneralRelation>

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopRelation(self, *args)


    def PopValue(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopValue(self, *args)


    def Push(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Analysis_Push(self, *args)


    def PushFunction(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        func: Expr_GeneralFunction

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushFunction(self, *args)


    def PushName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushName(self, *args)


    def PushRelation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        rel: Expr_GeneralRelation

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushRelation(self, *args)


    def PushValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        degree: int

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushValue(self, *args)


    def ResetAll(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Analysis_ResetAll(self, *args)


    def SetMaster(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        agen: ExprIntrp_Generator

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Analysis_SetMaster(self, *args)


    def Use(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        func: Expr_NamedFunction

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        named: Expr_NamedExpression

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Analysis_Use(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_Analysis
    __del__ = lambda self: None
ExprIntrp_Analysis_swigregister = _ExprIntrp.ExprIntrp_Analysis_swigregister
ExprIntrp_Analysis_swigregister(ExprIntrp_Analysis)

class ExprIntrp_Generator(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_Generator, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_Generator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetFunction(self, *args) -> "opencascade::handle< Expr_NamedFunction >":
        """
        Returns namedfunction with name <name> already interpreted if it exists. returns a null handle if not.

        Parameters
        ----------
        name: TCollection_AsciiString

        Returns
        -------
        opencascade::handle<Expr_NamedFunction>

        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunction(self, *args)


    def GetFunctions(self, *args) -> "ExprIntrp_SequenceOfNamedFunction const &":
        """
        No available documentation.

        Returns
        -------
        ExprIntrp_SequenceOfNamedFunction

        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunctions(self, *args)


    def GetNamed(self, *args) -> "opencascade::handle< Expr_NamedExpression >":
        """
        No available documentation.

        Returns
        -------
        ExprIntrp_SequenceOfNamedExpression

        Returns namedexpression with name <name> already interpreted if it exists. returns a null handle if not.

        Parameters
        ----------
        name: TCollection_AsciiString

        Returns
        -------
        opencascade::handle<Expr_NamedExpression>

        """
        return _ExprIntrp.ExprIntrp_Generator_GetNamed(self, *args)


    def Use(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        func: Expr_NamedFunction

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        named: Expr_NamedExpression

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_Generator_Use(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_Generator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_Generator
    __del__ = lambda self: None
ExprIntrp_Generator_swigregister = _ExprIntrp.ExprIntrp_Generator_swigregister
ExprIntrp_Generator_swigregister(ExprIntrp_Generator)

class ExprIntrp_GenExp(ExprIntrp_Generator):
    __swig_setmethods__ = {}
    for _s in [ExprIntrp_Generator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_GenExp, name, value)
    __swig_getmethods__ = {}
    for _s in [ExprIntrp_Generator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_GenExp, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "opencascade::handle< ExprIntrp_GenExp >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<ExprIntrp_GenExp>

        """
        return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

    Create = staticmethod(Create)

    def Expression(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns expression generated. raises an exception if isdone answers false.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _ExprIntrp.ExprIntrp_GenExp_Expression(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns false if any syntax error has occurred during process.

        Returns
        -------
        bool

        """
        return _ExprIntrp.ExprIntrp_GenExp_IsDone(self, *args)


    def Process(self, *args) -> "void":
        """
        Processes given string.

        Parameters
        ----------
        str: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_GenExp_Process(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenExp_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenExp
    __del__ = lambda self: None
ExprIntrp_GenExp_swigregister = _ExprIntrp.ExprIntrp_GenExp_swigregister
ExprIntrp_GenExp_swigregister(ExprIntrp_GenExp)

def ExprIntrp_GenExp_Create(*args) -> "opencascade::handle< ExprIntrp_GenExp >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<ExprIntrp_GenExp>

    """
    return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

class ExprIntrp_GenFct(ExprIntrp_Generator):
    __swig_setmethods__ = {}
    for _s in [ExprIntrp_Generator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_GenFct, name, value)
    __swig_getmethods__ = {}
    for _s in [ExprIntrp_Generator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_GenFct, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "opencascade::handle< ExprIntrp_GenFct >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<ExprIntrp_GenFct>

        """
        return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

    Create = staticmethod(Create)

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _ExprIntrp.ExprIntrp_GenFct_IsDone(self, *args)


    def Process(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        str: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_GenFct_Process(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenFct_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenFct
    __del__ = lambda self: None
ExprIntrp_GenFct_swigregister = _ExprIntrp.ExprIntrp_GenFct_swigregister
ExprIntrp_GenFct_swigregister(ExprIntrp_GenFct)

def ExprIntrp_GenFct_Create(*args) -> "opencascade::handle< ExprIntrp_GenFct >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<ExprIntrp_GenFct>

    """
    return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

class ExprIntrp_GenRel(ExprIntrp_Generator):
    __swig_setmethods__ = {}
    for _s in [ExprIntrp_Generator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExprIntrp_GenRel, name, value)
    __swig_getmethods__ = {}
    for _s in [ExprIntrp_Generator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExprIntrp_GenRel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "opencascade::handle< ExprIntrp_GenRel >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<ExprIntrp_GenRel>

        """
        return _ExprIntrp.ExprIntrp_GenRel_Create(*args)

    Create = staticmethod(Create)

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns false if any syntax error has occurred during process.

        Returns
        -------
        bool

        """
        return _ExprIntrp.ExprIntrp_GenRel_IsDone(self, *args)


    def Process(self, *args) -> "void":
        """
        Processes given string.

        Parameters
        ----------
        str: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _ExprIntrp.ExprIntrp_GenRel_Process(self, *args)


    def Relation(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        Returns relation generated. raises an exception if isdone answers false.

        Returns
        -------
        opencascade::handle<Expr_GeneralRelation>

        """
        return _ExprIntrp.ExprIntrp_GenRel_Relation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenRel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenRel
    __del__ = lambda self: None
ExprIntrp_GenRel_swigregister = _ExprIntrp.ExprIntrp_GenRel_swigregister
ExprIntrp_GenRel_swigregister(ExprIntrp_GenRel)

def ExprIntrp_GenRel_Create(*args) -> "opencascade::handle< ExprIntrp_GenRel >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<ExprIntrp_GenRel>

    """
    return _ExprIntrp.ExprIntrp_GenRel_Create(*args)



# This file is compatible with both classic and new-style classes.


