# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
ExprIntrp module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_exprintrp.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ExprIntrp
else:
    import _ExprIntrp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ExprIntrp.delete_SwigPyIterator

    def value(self):
        return _ExprIntrp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ExprIntrp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ExprIntrp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ExprIntrp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ExprIntrp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ExprIntrp.SwigPyIterator_copy(self)

    def next(self):
        return _ExprIntrp.SwigPyIterator_next(self)

    def __next__(self):
        return _ExprIntrp.SwigPyIterator___next__(self)

    def previous(self):
        return _ExprIntrp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ExprIntrp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ExprIntrp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ExprIntrp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ExprIntrp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ExprIntrp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ExprIntrp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ExprIntrp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ExprIntrp:
_ExprIntrp.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _ExprIntrp.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Expr
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_ExprIntrp_Generator_Create():
    return _ExprIntrp.Handle_ExprIntrp_Generator_Create()

def Handle_ExprIntrp_Generator_DownCast(t):
    return _ExprIntrp.Handle_ExprIntrp_Generator_DownCast(t)

def Handle_ExprIntrp_Generator_IsNull(t):
    return _ExprIntrp.Handle_ExprIntrp_Generator_IsNull(t)

def Handle_ExprIntrp_GenExp_Create():
    return _ExprIntrp.Handle_ExprIntrp_GenExp_Create()

def Handle_ExprIntrp_GenExp_DownCast(t):
    return _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast(t)

def Handle_ExprIntrp_GenExp_IsNull(t):
    return _ExprIntrp.Handle_ExprIntrp_GenExp_IsNull(t)

def Handle_ExprIntrp_GenFct_Create():
    return _ExprIntrp.Handle_ExprIntrp_GenFct_Create()

def Handle_ExprIntrp_GenFct_DownCast(t):
    return _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast(t)

def Handle_ExprIntrp_GenFct_IsNull(t):
    return _ExprIntrp.Handle_ExprIntrp_GenFct_IsNull(t)

def Handle_ExprIntrp_GenRel_Create():
    return _ExprIntrp.Handle_ExprIntrp_GenRel_Create()

def Handle_ExprIntrp_GenRel_DownCast(t):
    return _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast(t)

def Handle_ExprIntrp_GenRel_IsNull(t):
    return _ExprIntrp.Handle_ExprIntrp_GenRel_IsNull(t)
class ExprIntrp_ListIteratorOfStackOfGeneralExpression(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralExpression(*args))

    def More(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_More(self)

    def Next(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Next(self)

    def Value(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Value(self)

    def ChangeValue(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_ChangeValue(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralExpression

# Register ExprIntrp_ListIteratorOfStackOfGeneralExpression in _ExprIntrp:
_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralExpression)
class ExprIntrp_ListIteratorOfStackOfGeneralFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralFunction(*args))

    def More(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_More(self)

    def Next(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Next(self)

    def Value(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Value(self)

    def ChangeValue(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_ChangeValue(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralFunction

# Register ExprIntrp_ListIteratorOfStackOfGeneralFunction in _ExprIntrp:
_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralFunction)
class ExprIntrp_ListIteratorOfStackOfGeneralRelation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralRelation(*args))

    def More(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_More(self)

    def Next(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Next(self)

    def Value(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Value(self)

    def ChangeValue(self):
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_ChangeValue(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralRelation

# Register ExprIntrp_ListIteratorOfStackOfGeneralRelation in _ExprIntrp:
_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralRelation)
class ExprIntrp_SequenceOfNamedExpression(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_begin(self)

    def end(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_end(self)

    def cbegin(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_cbegin(self)

    def cend(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_cend(self)

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceOfNamedExpression(*args))

    def Size(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Size(self)

    def Length(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Length(self)

    def Lower(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Lower(self)

    def Upper(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Upper(self)

    def IsEmpty(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_IsEmpty(self)

    def Reverse(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Reverse(self)

    def Exchange(self, I, J):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Assign(self, theOther)

    def Set(self, theOther):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Set(self, theOther)

    def Remove(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Remove(self, *args)

    def Append(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Append(self, *args)

    def Prepend(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Split(self, theIndex, theSeq)

    def First(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_First(self)

    def ChangeFirst(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeFirst(self)

    def Last(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Last(self)

    def ChangeLast(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeLast(self)

    def Value(self, theIndex):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceOfNamedExpression

    def __len__(self):
        return self.Size()


# Register ExprIntrp_SequenceOfNamedExpression in _ExprIntrp:
_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swigregister(ExprIntrp_SequenceOfNamedExpression)
class ExprIntrp_SequenceOfNamedFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_begin(self)

    def end(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_end(self)

    def cbegin(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_cbegin(self)

    def cend(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_cend(self)

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceOfNamedFunction(*args))

    def Size(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Size(self)

    def Length(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Length(self)

    def Lower(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Lower(self)

    def Upper(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Upper(self)

    def IsEmpty(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_IsEmpty(self)

    def Reverse(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Reverse(self)

    def Exchange(self, I, J):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Assign(self, theOther)

    def Set(self, theOther):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Set(self, theOther)

    def Remove(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Remove(self, *args)

    def Append(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Append(self, *args)

    def Prepend(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Split(self, theIndex, theSeq)

    def First(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_First(self)

    def ChangeFirst(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeFirst(self)

    def Last(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Last(self)

    def ChangeLast(self):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeLast(self)

    def Value(self, theIndex):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceOfNamedFunction

    def __len__(self):
        return self.Size()


# Register ExprIntrp_SequenceOfNamedFunction in _ExprIntrp:
_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swigregister(ExprIntrp_SequenceOfNamedFunction)
class ExprIntrp_StackOfGeneralExpression(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_begin(self)

    def end(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_end(self)

    def cbegin(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_cbegin(self)

    def cend(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_cend(self)

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_StackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralExpression(*args))

    def Size(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Size(self)

    def Assign(self, theOther):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Assign(self, theOther)

    def Set(self, theOther):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Clear(self, theAllocator)

    def First(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_First(self)

    def Last(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Last(self)

    def Append(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Append(self, *args)

    def Prepend(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Prepend(self, *args)

    def RemoveFirst(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_RemoveFirst(self)

    def Remove(self, theIter):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertAfter(self, *args)

    def Reverse(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Reverse(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralExpression

    def __len__(self):
        return self.Size()


# Register ExprIntrp_StackOfGeneralExpression in _ExprIntrp:
_ExprIntrp.ExprIntrp_StackOfGeneralExpression_swigregister(ExprIntrp_StackOfGeneralExpression)
class ExprIntrp_StackOfGeneralFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_begin(self)

    def end(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_end(self)

    def cbegin(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_cbegin(self)

    def cend(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_cend(self)

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_StackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralFunction(*args))

    def Size(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Size(self)

    def Assign(self, theOther):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Assign(self, theOther)

    def Set(self, theOther):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Clear(self, theAllocator)

    def First(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_First(self)

    def Last(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Last(self)

    def Append(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Append(self, *args)

    def Prepend(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Prepend(self, *args)

    def RemoveFirst(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_RemoveFirst(self)

    def Remove(self, theIter):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertAfter(self, *args)

    def Reverse(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Reverse(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralFunction

    def __len__(self):
        return self.Size()


# Register ExprIntrp_StackOfGeneralFunction in _ExprIntrp:
_ExprIntrp.ExprIntrp_StackOfGeneralFunction_swigregister(ExprIntrp_StackOfGeneralFunction)
class ExprIntrp_StackOfGeneralRelation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_begin(self)

    def end(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_end(self)

    def cbegin(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_cbegin(self)

    def cend(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_cend(self)

    def __init__(self, *args):
        _ExprIntrp.ExprIntrp_StackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralRelation(*args))

    def Size(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Size(self)

    def Assign(self, theOther):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Assign(self, theOther)

    def Set(self, theOther):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Clear(self, theAllocator)

    def First(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_First(self)

    def Last(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Last(self)

    def Append(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Append(self, *args)

    def Prepend(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Prepend(self, *args)

    def RemoveFirst(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_RemoveFirst(self)

    def Remove(self, theIter):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertAfter(self, *args)

    def Reverse(self):
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Reverse(self)
    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralRelation

    def __len__(self):
        return self.Size()


# Register ExprIntrp_StackOfGeneralRelation in _ExprIntrp:
_ExprIntrp.ExprIntrp_StackOfGeneralRelation_swigregister(ExprIntrp_StackOfGeneralRelation)
class exprintrp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        _ExprIntrp.exprintrp_swiginit(self, _ExprIntrp.new_exprintrp())
    __swig_destroy__ = _ExprIntrp.delete_exprintrp

# Register exprintrp in _ExprIntrp:
_ExprIntrp.exprintrp_swigregister(exprintrp)
class ExprIntrp_Analysis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _ExprIntrp.ExprIntrp_Analysis_swiginit(self, _ExprIntrp.new_ExprIntrp_Analysis(*args))

    def GetFunction(self, *args):
        r"""

        Parameters
        ----------
        name: str

        Return
        -------
        opencascade::handle<Expr_NamedFunction>

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_GetFunction(self, *args)

    def GetNamed(self, *args):
        r"""

        Parameters
        ----------
        name: str

        Return
        -------
        opencascade::handle<Expr_NamedExpression>

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_GetNamed(self, *args)

    def IsExpStackEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_IsExpStackEmpty(self, *args)

    def IsRelStackEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_IsRelStackEmpty(self, *args)

    def Pop(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Expr_GeneralExpression>

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_Pop(self, *args)

    def PopFunction(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Expr_GeneralFunction>

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopFunction(self, *args)

    def PopName(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopName(self, *args)

    def PopRelation(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Expr_GeneralRelation>

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopRelation(self, *args)

    def PopValue(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopValue(self, *args)

    def Push(self, *args):
        r"""

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_Push(self, *args)

    def PushFunction(self, *args):
        r"""

        Parameters
        ----------
        func: Expr_GeneralFunction

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushFunction(self, *args)

    def PushName(self, *args):
        r"""

        Parameters
        ----------
        name: str

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushName(self, *args)

    def PushRelation(self, *args):
        r"""

        Parameters
        ----------
        rel: Expr_GeneralRelation

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushRelation(self, *args)

    def PushValue(self, *args):
        r"""

        Parameters
        ----------
        degree: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushValue(self, *args)

    def ResetAll(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_ResetAll(self, *args)

    def SetMaster(self, *args):
        r"""

        Parameters
        ----------
        agen: ExprIntrp_Generator

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_SetMaster(self, *args)

    def Use(self, *args):
        r"""

        Parameters
        ----------
        func: Expr_NamedFunction

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        named: Expr_NamedExpression

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Analysis_Use(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_Analysis

# Register ExprIntrp_Analysis in _ExprIntrp:
_ExprIntrp.ExprIntrp_Analysis_swigregister(ExprIntrp_Analysis)
class ExprIntrp_Generator(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetFunction(self, *args):
        r"""

        Parameters
        ----------
        name: str

        Return
        -------
        opencascade::handle<Expr_NamedFunction>

        Description
        -----------
        Returns namedfunction with name <name> already interpreted if it exists. returns a null handle if not.

        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunction(self, *args)

    def GetFunctions(self, *args):
        r"""
        Return
        -------
        ExprIntrp_SequenceOfNamedFunction

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunctions(self, *args)

    def GetNamed(self, *args):
        r"""
        Return
        -------
        ExprIntrp_SequenceOfNamedExpression

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        name: str

        Return
        -------
        opencascade::handle<Expr_NamedExpression>

        Description
        -----------
        Returns namedexpression with name <name> already interpreted if it exists. returns a null handle if not.

        """
        return _ExprIntrp.ExprIntrp_Generator_GetNamed(self, *args)

    def Use(self, *args):
        r"""

        Parameters
        ----------
        func: Expr_NamedFunction

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        named: Expr_NamedExpression

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_Generator_Use(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_Generator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_Generator

# Register ExprIntrp_Generator in _ExprIntrp:
_ExprIntrp.ExprIntrp_Generator_swigregister(ExprIntrp_Generator)
class ExprIntrp_GenExp(ExprIntrp_Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Create(*args):
        r"""
        Return
        -------
        opencascade::handle<ExprIntrp_GenExp>

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

    def Expression(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Expr_GeneralExpression>

        Description
        -----------
        Returns expression generated. raises an exception if isdone answers false.

        """
        return _ExprIntrp.ExprIntrp_GenExp_Expression(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns false if any syntax error has occurred during process.

        """
        return _ExprIntrp.ExprIntrp_GenExp_IsDone(self, *args)

    def Process(self, *args):
        r"""

        Parameters
        ----------
        str: str

        Return
        -------
        None

        Description
        -----------
        Processes given string.

        """
        return _ExprIntrp.ExprIntrp_GenExp_Process(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenExp_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenExp

# Register ExprIntrp_GenExp in _ExprIntrp:
_ExprIntrp.ExprIntrp_GenExp_swigregister(ExprIntrp_GenExp)
class ExprIntrp_GenFct(ExprIntrp_Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Create(*args):
        r"""
        Return
        -------
        opencascade::handle<ExprIntrp_GenFct>

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_GenFct_IsDone(self, *args)

    def Process(self, *args):
        r"""

        Parameters
        ----------
        str: str

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_GenFct_Process(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenFct_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenFct

# Register ExprIntrp_GenFct in _ExprIntrp:
_ExprIntrp.ExprIntrp_GenFct_swigregister(ExprIntrp_GenFct)
class ExprIntrp_GenRel(ExprIntrp_Generator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Create(*args):
        r"""
        Return
        -------
        opencascade::handle<ExprIntrp_GenRel>

        Description
        -----------
        No available documentation.

        """
        return _ExprIntrp.ExprIntrp_GenRel_Create(*args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns false if any syntax error has occurred during process.

        """
        return _ExprIntrp.ExprIntrp_GenRel_IsDone(self, *args)

    def Process(self, *args):
        r"""

        Parameters
        ----------
        str: str

        Return
        -------
        None

        Description
        -----------
        Processes given string.

        """
        return _ExprIntrp.ExprIntrp_GenRel_Process(self, *args)

    def Relation(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Expr_GeneralRelation>

        Description
        -----------
        Returns relation generated. raises an exception if isdone answers false.

        """
        return _ExprIntrp.ExprIntrp_GenRel_Relation(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_ExprIntrp_GenRel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenRel

# Register ExprIntrp_GenRel in _ExprIntrp:
_ExprIntrp.ExprIntrp_GenRel_swigregister(ExprIntrp_GenRel)



@deprecated
def ExprIntrp_GenExp_Create(*args):
	return ExprIntrp_GenExp.Create(*args)

@deprecated
def ExprIntrp_GenFct_Create(*args):
	return ExprIntrp_GenFct.Create(*args)

@deprecated
def ExprIntrp_GenRel_Create(*args):
	return ExprIntrp_GenRel.Create(*args)



