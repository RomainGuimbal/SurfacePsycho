# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
IntCurve module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_intcurve.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IntCurve
else:
    import _IntCurve

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntCurve.delete_SwigPyIterator

    def value(self):
        return _IntCurve.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IntCurve.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IntCurve.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IntCurve.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IntCurve.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IntCurve.SwigPyIterator_copy(self)

    def next(self):
        return _IntCurve.SwigPyIterator_next(self)

    def __next__(self):
        return _IntCurve.SwigPyIterator___next__(self)

    def previous(self):
        return _IntCurve.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IntCurve.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IntCurve.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IntCurve.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IntCurve.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IntCurve.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IntCurve.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IntCurve.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IntCurve:
_IntCurve.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _IntCurve.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _IntCurve.ios_base_erase_event
    imbue_event = _IntCurve.ios_base_imbue_event
    copyfmt_event = _IntCurve.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _IntCurve.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _IntCurve.ios_base_flags(self, *args)

    def setf(self, *args):
        return _IntCurve.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _IntCurve.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _IntCurve.ios_base_precision(self, *args)

    def width(self, *args):
        return _IntCurve.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _IntCurve.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _IntCurve.ios_base_imbue(self, __loc)

    def getloc(self):
        return _IntCurve.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _IntCurve.ios_base_xalloc()

    def iword(self, __ix):
        return _IntCurve.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _IntCurve.ios_base_pword(self, __ix)
    __swig_destroy__ = _IntCurve.delete_ios_base

# Register ios_base in _IntCurve:
_IntCurve.ios_base_swigregister(ios_base)
cvar = _IntCurve.cvar
ios_base.boolalpha = _IntCurve.cvar.ios_base_boolalpha
ios_base.dec = _IntCurve.cvar.ios_base_dec
ios_base.fixed = _IntCurve.cvar.ios_base_fixed
ios_base.hex = _IntCurve.cvar.ios_base_hex
ios_base.internal = _IntCurve.cvar.ios_base_internal
ios_base.left = _IntCurve.cvar.ios_base_left
ios_base.oct = _IntCurve.cvar.ios_base_oct
ios_base.right = _IntCurve.cvar.ios_base_right
ios_base.scientific = _IntCurve.cvar.ios_base_scientific
ios_base.showbase = _IntCurve.cvar.ios_base_showbase
ios_base.showpoint = _IntCurve.cvar.ios_base_showpoint
ios_base.showpos = _IntCurve.cvar.ios_base_showpos
ios_base.skipws = _IntCurve.cvar.ios_base_skipws
ios_base.unitbuf = _IntCurve.cvar.ios_base_unitbuf
ios_base.uppercase = _IntCurve.cvar.ios_base_uppercase
ios_base.adjustfield = _IntCurve.cvar.ios_base_adjustfield
ios_base.basefield = _IntCurve.cvar.ios_base_basefield
ios_base.floatfield = _IntCurve.cvar.ios_base_floatfield
ios_base.badbit = _IntCurve.cvar.ios_base_badbit
ios_base.eofbit = _IntCurve.cvar.ios_base_eofbit
ios_base.failbit = _IntCurve.cvar.ios_base_failbit
ios_base.goodbit = _IntCurve.cvar.ios_base_goodbit
ios_base.app = _IntCurve.cvar.ios_base_app
ios_base.ate = _IntCurve.cvar.ios_base_ate
ios_base.binary = _IntCurve.cvar.ios_base_binary
ios_base.ios_base_in = _IntCurve.cvar.ios_base_ios_base_in
ios_base.out = _IntCurve.cvar.ios_base_out
ios_base.trunc = _IntCurve.cvar.ios_base_trunc
ios_base.beg = _IntCurve.cvar.ios_base_beg
ios_base.cur = _IntCurve.cvar.ios_base_cur
ios_base.end = _IntCurve.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _IntCurve.ios_rdstate(self)

    def clear(self, *args):
        return _IntCurve.ios_clear(self, *args)

    def setstate(self, __state):
        return _IntCurve.ios_setstate(self, __state)

    def good(self):
        return _IntCurve.ios_good(self)

    def eof(self):
        return _IntCurve.ios_eof(self)

    def fail(self):
        return _IntCurve.ios_fail(self)

    def bad(self):
        return _IntCurve.ios_bad(self)

    def exceptions(self, *args):
        return _IntCurve.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _IntCurve.ios_swiginit(self, _IntCurve.new_ios(__sb))
    __swig_destroy__ = _IntCurve.delete_ios

    def tie(self, *args):
        return _IntCurve.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _IntCurve.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _IntCurve.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _IntCurve.ios_fill(self, *args)

    def imbue(self, __loc):
        return _IntCurve.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _IntCurve.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _IntCurve.ios_widen(self, __c)

# Register ios in _IntCurve:
_IntCurve.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _IntCurve.ostream_swiginit(self, _IntCurve.new_ostream(__sb))
    __swig_destroy__ = _IntCurve.delete_ostream

    def __lshift__(self, *args):
        return _IntCurve.ostream___lshift__(self, *args)

    def put(self, __c):
        return _IntCurve.ostream_put(self, __c)

    def write(self, __s, __n):
        return _IntCurve.ostream_write(self, __s, __n)

    def flush(self):
        return _IntCurve.ostream_flush(self)

    def tellp(self):
        return _IntCurve.ostream_tellp(self)

    def seekp(self, *args):
        return _IntCurve.ostream_seekp(self, *args)

# Register ostream in _IntCurve:
_IntCurve.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _IntCurve.istream_swiginit(self, _IntCurve.new_istream(__sb))
    __swig_destroy__ = _IntCurve.delete_istream

    def __rshift__(self, *args):
        return _IntCurve.istream___rshift__(self, *args)

    def gcount(self):
        return _IntCurve.istream_gcount(self)

    def get(self, *args):
        return _IntCurve.istream_get(self, *args)

    def getline(self, *args):
        return _IntCurve.istream_getline(self, *args)

    def ignore(self, *args):
        return _IntCurve.istream_ignore(self, *args)

    def peek(self):
        return _IntCurve.istream_peek(self)

    def read(self, __s, __n):
        return _IntCurve.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _IntCurve.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _IntCurve.istream_putback(self, __c)

    def unget(self):
        return _IntCurve.istream_unget(self)

    def sync(self):
        return _IntCurve.istream_sync(self)

    def tellg(self):
        return _IntCurve.istream_tellg(self)

    def seekg(self, *args):
        return _IntCurve.istream_seekg(self, *args)

# Register istream in _IntCurve:
_IntCurve.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _IntCurve.iostream_swiginit(self, _IntCurve.new_iostream(__sb))
    __swig_destroy__ = _IntCurve.delete_iostream

# Register iostream in _IntCurve:
_IntCurve.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _IntCurve.endl_cb_ptr
endl = _IntCurve.endl
ends_cb_ptr = _IntCurve.ends_cb_ptr
ends = _IntCurve.ends
flush_cb_ptr = _IntCurve.flush_cb_ptr
flush = _IntCurve.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.IntRes2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.GeomAbs

from enum import IntEnum
from OCC.Core.Exception import *



class IntCurve_IConicTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        IT: IntCurve_IConicTool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        E: gp_Elips2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        L: gp_Lin2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        P: gp_Parab2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        H: gp_Hypr2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _IntCurve.IntCurve_IConicTool_swiginit(self, _IntCurve.new_IntCurve_IConicTool(*args))

    def D1(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        T: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_IConicTool_D1(self, *args)

    def D2(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        T: gp_Vec2d
        N: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_IConicTool_D2(self, *args)

    def Distance(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        float

        Description
        -----------
        Computes the value of the signed distance between the point p and the implicit curve.

        """
        return _IntCurve.IntCurve_IConicTool_Distance(self, *args)

    def FindParameter(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        float

        Description
        -----------
        Returns the parameter u of the point on the implicit curve corresponding to the point p. the correspondence between p and the point p(u) on the implicit curve must be coherent with the way of determination of the signed distance.

        """
        return _IntCurve.IntCurve_IConicTool_FindParameter(self, *args)

    def GradDistance(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        gp_Vec2d

        Description
        -----------
        Computes the gradient of the signed distance between a point and the implicit curve, at the point p.

        """
        return _IntCurve.IntCurve_IConicTool_GradDistance(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        X: float

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_IConicTool_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_IConicTool

# Register IntCurve_IConicTool in _IntCurve:
_IntCurve.IntCurve_IConicTool_swigregister(IntCurve_IConicTool)
class IntCurve_IntConicConic(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        L1: gp_Lin2d
        D1: IntRes2d_Domain
        L2: gp_Lin2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 lines from gp.

        Parameters
        ----------
        L: gp_Lin2d
        DL: IntRes2d_Domain
        C: gp_Circ2d
        DC: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a circle. the exception constructionerror is raised if the method isclosed of the domain of the circle returns false.

        Parameters
        ----------
        L: gp_Lin2d
        DL: IntRes2d_Domain
        E: gp_Elips2d
        DE: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and an ellipse. the exception constructionerror is raised if the method isclosed of the domain of the ellipse returns false.

        Parameters
        ----------
        L: gp_Lin2d
        DL: IntRes2d_Domain
        P: gp_Parab2d
        DP: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parabola from gp.

        Parameters
        ----------
        L: gp_Lin2d
        DL: IntRes2d_Domain
        H: gp_Hypr2d
        DH: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and an hyperbola.

        Parameters
        ----------
        C1: gp_Circ2d
        D1: IntRes2d_Domain
        C2: gp_Circ2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 circles from gp. the exception constructionerror is raised if the method isclosed of one of the domain returns false.

        Parameters
        ----------
        C: gp_Circ2d
        DC: IntRes2d_Domain
        E: gp_Elips2d
        DE: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a circle and an ellipse. the exception constructionerror is raised if the method isclosed of one the domain returns false.

        Parameters
        ----------
        C: gp_Circ2d
        DC: IntRes2d_Domain
        P: gp_Parab2d
        DP: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a circle and a parabola. the exception constructionerror is raised if the method isclosed of the domain of the circle returns false.

        Parameters
        ----------
        C: gp_Circ2d
        DC: IntRes2d_Domain
        H: gp_Hypr2d
        DH: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a circle and an hyperbola. the exception constructionerror is raised if the method isclosed of the domain of the circle returns false.

        Parameters
        ----------
        E1: gp_Elips2d
        D1: IntRes2d_Domain
        E2: gp_Elips2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 ellipses. the exception constructionerror is raised if the method isclosed of one of the domain returns false.

        Parameters
        ----------
        E: gp_Elips2d
        DE: IntRes2d_Domain
        P: gp_Parab2d
        DP: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and a parabola. the exception constructionerror is raised if the method isclosed of the domain of the ellipse returns false.

        Parameters
        ----------
        E: gp_Elips2d
        DE: IntRes2d_Domain
        H: gp_Hypr2d
        DH: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and an hyperbola. the exception constructionerror is raised if the method isclosed of the domain of the ellipse returns false.

        Parameters
        ----------
        P1: gp_Parab2d
        D1: IntRes2d_Domain
        P2: gp_Parab2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 parabolas.

        Parameters
        ----------
        P: gp_Parab2d
        DP: IntRes2d_Domain
        H: gp_Hypr2d
        DH: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a parabola and an hyperbola.

        Parameters
        ----------
        H1: gp_Hypr2d
        D1: IntRes2d_Domain
        H2: gp_Hypr2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 hyperbolas.

        """
        _IntCurve.IntCurve_IntConicConic_swiginit(self, _IntCurve.new_IntCurve_IntConicConic(*args))

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        L1: gp_Lin2d
        D1: IntRes2d_Domain
        L2: gp_Lin2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 lines from gp.

        Parameters
        ----------
        L: gp_Lin2d
        DL: IntRes2d_Domain
        C: gp_Circ2d
        DC: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a circle. the exception constructionerror is raised if the method isclosed of the domain of the circle returns false.

        Parameters
        ----------
        L: gp_Lin2d
        DL: IntRes2d_Domain
        E: gp_Elips2d
        DE: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and an ellipse. the exception constructionerror is raised if the method isclosed of the domain of the ellipse returns false.

        Parameters
        ----------
        L: gp_Lin2d
        DL: IntRes2d_Domain
        P: gp_Parab2d
        DP: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parabola from gp.

        Parameters
        ----------
        L: gp_Lin2d
        DL: IntRes2d_Domain
        H: gp_Hypr2d
        DH: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and an hyperbola.

        Parameters
        ----------
        C1: gp_Circ2d
        D1: IntRes2d_Domain
        C2: gp_Circ2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 circles from gp. the exception constructionerror is raised if the method isclosed of the domain of one of the circle returns false.

        Parameters
        ----------
        C: gp_Circ2d
        DC: IntRes2d_Domain
        E: gp_Elips2d
        DE: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a circle and an ellipse. the exception constructionerror is raised if the method isclosed of one the domain returns false.

        Parameters
        ----------
        C: gp_Circ2d
        DC: IntRes2d_Domain
        P: gp_Parab2d
        DP: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a circle and a parabola. the exception constructionerror is raised if the method isclosed of the domain of the circle returns false.

        Parameters
        ----------
        C: gp_Circ2d
        DC: IntRes2d_Domain
        H: gp_Hypr2d
        DH: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a circle and an hyperbola. the exception constructionerror is raised if the method isclosed of the domain of the circle returns false.

        Parameters
        ----------
        E1: gp_Elips2d
        D1: IntRes2d_Domain
        E2: gp_Elips2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 ellipses. the exception constructionerror is raised if the method isclosed of one of the domain returns false.

        Parameters
        ----------
        E: gp_Elips2d
        DE: IntRes2d_Domain
        P: gp_Parab2d
        DP: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and a parabola. the exception constructionerror is raised if the method isclosed of the domain of the ellipse returns false.

        Parameters
        ----------
        E: gp_Elips2d
        DE: IntRes2d_Domain
        H: gp_Hypr2d
        DH: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and an hyperbola. the exception constructionerror is raised if the method isclosed of the domain of the ellipse returns false.

        Parameters
        ----------
        P1: gp_Parab2d
        D1: IntRes2d_Domain
        P2: gp_Parab2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 parabolas.

        Parameters
        ----------
        P: gp_Parab2d
        DP: IntRes2d_Domain
        H: gp_Hypr2d
        DH: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a parabola and an hyperbola.

        Parameters
        ----------
        H1: gp_Hypr2d
        D1: IntRes2d_Domain
        H2: gp_Hypr2d
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 hyperbolas.

        """
        return _IntCurve.IntCurve_IntConicConic_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_IntConicConic

# Register IntCurve_IntConicConic in _IntCurve:
_IntCurve.IntCurve_IntConicConic_swigregister(IntCurve_IntConicConic)
class IntCurve_IntImpConicParConic(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        ITool: IntCurve_IConicTool
        Dom1: IntRes2d_Domain
        PCurve: IntCurve_PConic
        Dom2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an implicit curve and a parametrised curve. the exception constructionerror is raised if the domain of the parametrised curve does not verify hasfirstpoint and haslastpoint return true.

        """
        _IntCurve.IntCurve_IntImpConicParConic_swiginit(self, _IntCurve.new_IntCurve_IntImpConicParConic(*args))

    def And_Domaine_Objet1_Intersections(self, *args):
        r"""

        Parameters
        ----------
        TheImpTool: IntCurve_IConicTool
        TheParCurve: IntCurve_PConic
        TheImpCurveDomain: IntRes2d_Domain
        TheParCurveDomain: IntRes2d_Domain
        Inter2_And_Domain2: TColStd_Array1OfReal
        Inter1: TColStd_Array1OfReal
        Resultat1: TColStd_Array1OfReal
        Resultat2: TColStd_Array1OfReal
        EpsNul: float

        Return
        -------
        NbResultats: int

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_IntImpConicParConic_And_Domaine_Objet1_Intersections(self, *args)

    def FindU(self, *args):
        r"""

        Parameters
        ----------
        parameter: float
        point: gp_Pnt2d
        TheParCurev: IntCurve_PConic
        TheImpTool: IntCurve_IConicTool

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_IntImpConicParConic_FindU(self, *args)

    def FindV(self, *args):
        r"""

        Parameters
        ----------
        parameter: float
        point: gp_Pnt2d
        TheImpTool: IntCurve_IConicTool
        ParCurve: IntCurve_PConic
        TheParCurveDomain: IntRes2d_Domain
        V0: float
        V1: float
        Tolerance: float

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_IntImpConicParConic_FindV(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        ITool: IntCurve_IConicTool
        Dom1: IntRes2d_Domain
        PCurve: IntCurve_PConic
        Dom2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an implicit curve and a parametrised curve. the exception constructionerror is raised if the domain of the parametrised curve does not verify hasfirstpoint and haslastpoint return true.

        """
        return _IntCurve.IntCurve_IntImpConicParConic_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_IntImpConicParConic

# Register IntCurve_IntImpConicParConic in _IntCurve:
_IntCurve.IntCurve_IntImpConicParConic_swigregister(IntCurve_IntImpConicParConic)
class IntCurve_MyImpParToolOfIntImpConicParConic(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        IT: IntCurve_IConicTool
        PC: IntCurve_PConic

        Return
        -------
        None

        Description
        -----------
        Constructor of the class.

        """
        _IntCurve.IntCurve_MyImpParToolOfIntImpConicParConic_swiginit(self, _IntCurve.new_IntCurve_MyImpParToolOfIntImpConicParConic(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_MyImpParToolOfIntImpConicParConic

# Register IntCurve_MyImpParToolOfIntImpConicParConic in _IntCurve:
_IntCurve.IntCurve_MyImpParToolOfIntImpConicParConic_swigregister(IntCurve_MyImpParToolOfIntImpConicParConic)
class IntCurve_PConic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        PC: IntCurve_PConic

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        E: gp_Elips2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        P: gp_Parab2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        H: gp_Hypr2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        L: gp_Lin2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _IntCurve.IntCurve_PConic_swiginit(self, _IntCurve.new_IntCurve_PConic(*args))

    def Accuracy(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConic_Accuracy(self, *args)

    def Axis2(self, *args):
        r"""
        Return
        -------
        gp_Ax22d

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConic_Axis2(self, *args)

    def EpsX(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConic_EpsX(self, *args)

    def Param1(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConic_Param1(self, *args)

    def Param2(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConic_Param2(self, *args)

    def SetAccuracy(self, *args):
        r"""

        Parameters
        ----------
        Nb: int

        Return
        -------
        None

        Description
        -----------
        Accuracy is the number of samples used to approximate the parametric curve on its domain.

        """
        return _IntCurve.IntCurve_PConic_SetAccuracy(self, *args)

    def SetEpsX(self, *args):
        r"""

        Parameters
        ----------
        EpsDist: float

        Return
        -------
        None

        Description
        -----------
        Epsx is a internal tolerance used in math algorithms, usually about 1e-10 (see functionallroots for more details).

        """
        return _IntCurve.IntCurve_PConic_SetEpsX(self, *args)

    def TypeCurve(self, *args):
        r"""
        Return
        -------
        GeomAbs_CurveType

        Description
        -----------
        The conics are manipulated as objects which only depend on three parameters: axis and two real from standards. type curve is used to select the correct conic.

        """
        return _IntCurve.IntCurve_PConic_TypeCurve(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurve.delete_IntCurve_PConic

# Register IntCurve_PConic in _IntCurve:
_IntCurve.IntCurve_PConic_swigregister(IntCurve_PConic)
class IntCurve_PConicTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def D1(*args):
        r"""

        Parameters
        ----------
        C: IntCurve_PConic
        U: float
        P: gp_Pnt2d
        T: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConicTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""

        Parameters
        ----------
        C: IntCurve_PConic
        U: float
        P: gp_Pnt2d
        T: gp_Vec2d
        N: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConicTool_D2(*args)

    @staticmethod
    def EpsX(*args):
        r"""

        Parameters
        ----------
        C: IntCurve_PConic

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConicTool_EpsX(*args)

    @staticmethod
    def NbSamples(*args):
        r"""

        Parameters
        ----------
        C: IntCurve_PConic

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: IntCurve_PConic
        U0: float
        U1: float

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConicTool_NbSamples(*args)

    @staticmethod
    def Value(*args):
        r"""

        Parameters
        ----------
        C: IntCurve_PConic
        X: float

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        No available documentation.

        """
        return _IntCurve.IntCurve_PConicTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _IntCurve.IntCurve_PConicTool_swiginit(self, _IntCurve.new_IntCurve_PConicTool())
    __swig_destroy__ = _IntCurve.delete_IntCurve_PConicTool

# Register IntCurve_PConicTool in _IntCurve:
_IntCurve.IntCurve_PConicTool_swigregister(IntCurve_PConicTool)
class IntCurve_ProjectOnPConicTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FindParameter(*args):
        r"""

        Parameters
        ----------
        C: IntCurve_PConic
        Pnt: gp_Pnt2d
        Tol: float

        Return
        -------
        float

        Description
        -----------
        Returns the parameter v of the point on the parametric curve corresponding to the point pnt. the correspondence between pnt and the point p(v) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. tol is the tolerance on the distance between a point and the parametrised curve. in that case, no bounds are given. the research of the right parameter has to be made on the natural parametric domain of the curve.

        Parameters
        ----------
        C: IntCurve_PConic
        Pnt: gp_Pnt2d
        LowParameter: float
        HighParameter: float
        Tol: float

        Return
        -------
        float

        Description
        -----------
        Returns the parameter v of the point on the parametric curve corresponding to the point pnt. the correspondence between pnt and the point p(v) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. tol is the tolerance on the distance between a point and the parametrised curve. lowparameter and highparameter give the boundaries of the interval in which the parameter certainly lies. these parameters are given to implement a more efficient algorithm. so, it is not necessary to check that the returned value verifies lowparameter <= value <= highparameter.

        """
        return _IntCurve.IntCurve_ProjectOnPConicTool_FindParameter(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _IntCurve.IntCurve_ProjectOnPConicTool_swiginit(self, _IntCurve.new_IntCurve_ProjectOnPConicTool())
    __swig_destroy__ = _IntCurve.delete_IntCurve_ProjectOnPConicTool

# Register IntCurve_ProjectOnPConicTool in _IntCurve:
_IntCurve.IntCurve_ProjectOnPConicTool_swigregister(IntCurve_ProjectOnPConicTool)



@deprecated
def IntCurve_PConicTool_D1(*args):
	return IntCurve_PConicTool.D1(*args)

@deprecated
def IntCurve_PConicTool_D2(*args):
	return IntCurve_PConicTool.D2(*args)

@deprecated
def IntCurve_PConicTool_EpsX(*args):
	return IntCurve_PConicTool.EpsX(*args)

@deprecated
def IntCurve_PConicTool_NbSamples(*args):
	return IntCurve_PConicTool.NbSamples(*args)

@deprecated
def IntCurve_PConicTool_NbSamples(*args):
	return IntCurve_PConicTool.NbSamples(*args)

@deprecated
def IntCurve_PConicTool_Value(*args):
	return IntCurve_PConicTool.Value(*args)

@deprecated
def IntCurve_ProjectOnPConicTool_FindParameter(*args):
	return IntCurve_ProjectOnPConicTool.FindParameter(*args)

@deprecated
def IntCurve_ProjectOnPConicTool_FindParameter(*args):
	return IntCurve_ProjectOnPConicTool.FindParameter(*args)



