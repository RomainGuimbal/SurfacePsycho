# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
TColGeom2d module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_tcolgeom2d.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TColGeom2d
else:
    import _TColGeom2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColGeom2d.delete_SwigPyIterator

    def value(self):
        return _TColGeom2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TColGeom2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TColGeom2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TColGeom2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TColGeom2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TColGeom2d.SwigPyIterator_copy(self)

    def next(self):
        return _TColGeom2d.SwigPyIterator_next(self)

    def __next__(self):
        return _TColGeom2d.SwigPyIterator___next__(self)

    def previous(self):
        return _TColGeom2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TColGeom2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TColGeom2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TColGeom2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TColGeom2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TColGeom2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TColGeom2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TColGeom2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TColGeom2d:
_TColGeom2d.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _TColGeom2d.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _TColGeom2d.ios_base_erase_event
    imbue_event = _TColGeom2d.ios_base_imbue_event
    copyfmt_event = _TColGeom2d.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _TColGeom2d.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _TColGeom2d.ios_base_flags(self, *args)

    def setf(self, *args):
        return _TColGeom2d.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _TColGeom2d.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _TColGeom2d.ios_base_precision(self, *args)

    def width(self, *args):
        return _TColGeom2d.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _TColGeom2d.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _TColGeom2d.ios_base_imbue(self, __loc)

    def getloc(self):
        return _TColGeom2d.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _TColGeom2d.ios_base_xalloc()

    def iword(self, __ix):
        return _TColGeom2d.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _TColGeom2d.ios_base_pword(self, __ix)
    __swig_destroy__ = _TColGeom2d.delete_ios_base

# Register ios_base in _TColGeom2d:
_TColGeom2d.ios_base_swigregister(ios_base)
cvar = _TColGeom2d.cvar
ios_base.boolalpha = _TColGeom2d.cvar.ios_base_boolalpha
ios_base.dec = _TColGeom2d.cvar.ios_base_dec
ios_base.fixed = _TColGeom2d.cvar.ios_base_fixed
ios_base.hex = _TColGeom2d.cvar.ios_base_hex
ios_base.internal = _TColGeom2d.cvar.ios_base_internal
ios_base.left = _TColGeom2d.cvar.ios_base_left
ios_base.oct = _TColGeom2d.cvar.ios_base_oct
ios_base.right = _TColGeom2d.cvar.ios_base_right
ios_base.scientific = _TColGeom2d.cvar.ios_base_scientific
ios_base.showbase = _TColGeom2d.cvar.ios_base_showbase
ios_base.showpoint = _TColGeom2d.cvar.ios_base_showpoint
ios_base.showpos = _TColGeom2d.cvar.ios_base_showpos
ios_base.skipws = _TColGeom2d.cvar.ios_base_skipws
ios_base.unitbuf = _TColGeom2d.cvar.ios_base_unitbuf
ios_base.uppercase = _TColGeom2d.cvar.ios_base_uppercase
ios_base.adjustfield = _TColGeom2d.cvar.ios_base_adjustfield
ios_base.basefield = _TColGeom2d.cvar.ios_base_basefield
ios_base.floatfield = _TColGeom2d.cvar.ios_base_floatfield
ios_base.badbit = _TColGeom2d.cvar.ios_base_badbit
ios_base.eofbit = _TColGeom2d.cvar.ios_base_eofbit
ios_base.failbit = _TColGeom2d.cvar.ios_base_failbit
ios_base.goodbit = _TColGeom2d.cvar.ios_base_goodbit
ios_base.app = _TColGeom2d.cvar.ios_base_app
ios_base.ate = _TColGeom2d.cvar.ios_base_ate
ios_base.binary = _TColGeom2d.cvar.ios_base_binary
ios_base.ios_base_in = _TColGeom2d.cvar.ios_base_ios_base_in
ios_base.out = _TColGeom2d.cvar.ios_base_out
ios_base.trunc = _TColGeom2d.cvar.ios_base_trunc
ios_base.beg = _TColGeom2d.cvar.ios_base_beg
ios_base.cur = _TColGeom2d.cvar.ios_base_cur
ios_base.end = _TColGeom2d.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _TColGeom2d.ios_rdstate(self)

    def clear(self, *args):
        return _TColGeom2d.ios_clear(self, *args)

    def setstate(self, __state):
        return _TColGeom2d.ios_setstate(self, __state)

    def good(self):
        return _TColGeom2d.ios_good(self)

    def eof(self):
        return _TColGeom2d.ios_eof(self)

    def fail(self):
        return _TColGeom2d.ios_fail(self)

    def bad(self):
        return _TColGeom2d.ios_bad(self)

    def exceptions(self, *args):
        return _TColGeom2d.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _TColGeom2d.ios_swiginit(self, _TColGeom2d.new_ios(__sb))
    __swig_destroy__ = _TColGeom2d.delete_ios

    def tie(self, *args):
        return _TColGeom2d.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _TColGeom2d.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _TColGeom2d.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _TColGeom2d.ios_fill(self, *args)

    def imbue(self, __loc):
        return _TColGeom2d.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _TColGeom2d.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _TColGeom2d.ios_widen(self, __c)

# Register ios in _TColGeom2d:
_TColGeom2d.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _TColGeom2d.ostream_swiginit(self, _TColGeom2d.new_ostream(__sb))
    __swig_destroy__ = _TColGeom2d.delete_ostream

    def __lshift__(self, *args):
        return _TColGeom2d.ostream___lshift__(self, *args)

    def put(self, __c):
        return _TColGeom2d.ostream_put(self, __c)

    def write(self, __s, __n):
        return _TColGeom2d.ostream_write(self, __s, __n)

    def flush(self):
        return _TColGeom2d.ostream_flush(self)

    def tellp(self):
        return _TColGeom2d.ostream_tellp(self)

    def seekp(self, *args):
        return _TColGeom2d.ostream_seekp(self, *args)

# Register ostream in _TColGeom2d:
_TColGeom2d.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _TColGeom2d.istream_swiginit(self, _TColGeom2d.new_istream(__sb))
    __swig_destroy__ = _TColGeom2d.delete_istream

    def __rshift__(self, *args):
        return _TColGeom2d.istream___rshift__(self, *args)

    def gcount(self):
        return _TColGeom2d.istream_gcount(self)

    def get(self, *args):
        return _TColGeom2d.istream_get(self, *args)

    def getline(self, *args):
        return _TColGeom2d.istream_getline(self, *args)

    def ignore(self, *args):
        return _TColGeom2d.istream_ignore(self, *args)

    def peek(self):
        return _TColGeom2d.istream_peek(self)

    def read(self, __s, __n):
        return _TColGeom2d.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _TColGeom2d.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _TColGeom2d.istream_putback(self, __c)

    def unget(self):
        return _TColGeom2d.istream_unget(self)

    def sync(self):
        return _TColGeom2d.istream_sync(self)

    def tellg(self):
        return _TColGeom2d.istream_tellg(self)

    def seekg(self, *args):
        return _TColGeom2d.istream_seekg(self, *args)

# Register istream in _TColGeom2d:
_TColGeom2d.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _TColGeom2d.iostream_swiginit(self, _TColGeom2d.new_iostream(__sb))
    __swig_destroy__ = _TColGeom2d.delete_iostream

# Register iostream in _TColGeom2d:
_TColGeom2d.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _TColGeom2d.endl_cb_ptr
endl = _TColGeom2d.endl
ends_cb_ptr = _TColGeom2d.ends_cb_ptr
ends = _TColGeom2d.ends
flush_cb_ptr = _TColGeom2d.flush_cb_ptr
flush = _TColGeom2d.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_TColGeom2d_HArray1OfBezierCurve_Create():
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Create()

def Handle_TColGeom2d_HArray1OfBezierCurve_DownCast(t):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DownCast(t)

def Handle_TColGeom2d_HArray1OfBezierCurve_IsNull(t):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IsNull(t)

def Handle_TColGeom2d_HArray1OfCurve_Create():
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_Create()

def Handle_TColGeom2d_HArray1OfCurve_DownCast(t):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DownCast(t)

def Handle_TColGeom2d_HArray1OfCurve_IsNull(t):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_IsNull(t)

def Handle_TColGeom2d_HArray1OfBSplineCurve_Create():
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_Create()

def Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast(t):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast(t)

def Handle_TColGeom2d_HArray1OfBSplineCurve_IsNull(t):
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_IsNull(t)

def Handle_TColGeom2d_HSequenceOfBoundedCurve_Create():
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_Create()

def Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast(t):
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast(t)

def Handle_TColGeom2d_HSequenceOfBoundedCurve_IsNull(t):
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_IsNull(t)

def Handle_TColGeom2d_HSequenceOfCurve_Create():
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_Create()

def Handle_TColGeom2d_HSequenceOfCurve_DownCast(t):
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DownCast(t)

def Handle_TColGeom2d_HSequenceOfCurve_IsNull(t):
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_IsNull(t)
class TColGeom2d_Array1OfBSplineCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_begin(self, *args)

    def cbegin(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_cbegin(self)

    def end(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_end(self, *args)

    def cend(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_cend(self)

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_Array1OfBSplineCurve(*args))
    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_Array1OfBSplineCurve

    def Init(self, theValue):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Init(self, theValue)

    def Size(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Size(self)

    def Length(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Length(self)

    def IsEmpty(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_IsEmpty(self)

    def Lower(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Lower(self)

    def Upper(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Upper(self)

    def Assign(self, theOther):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Assign(self, theOther)

    def Move(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Move(self, *args)

    def Set(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Set(self, *args)

    def First(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_First(self)

    def ChangeFirst(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_ChangeFirst(self)

    def Last(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Last(self)

    def ChangeLast(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve___call__(self, *args)

    def SetValue(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_SetValue(self, *args)

    def UpdateLowerBound(self, theLower):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_UpdateLowerBound(self, theLower)

    def UpdateUpperBound(self, theUpper):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_UpdateUpperBound(self, theUpper)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Resize(self, theLower, theUpper, theToCopyData)

    def IsDeletable(self):
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_IsDeletable(self)

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TColGeom2d_Array1OfBSplineCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_swigregister(TColGeom2d_Array1OfBSplineCurve)
class TColGeom2d_Array1OfBezierCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_begin(self, *args)

    def cbegin(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_cbegin(self)

    def end(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_end(self, *args)

    def cend(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_cend(self)

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_Array1OfBezierCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_Array1OfBezierCurve(*args))
    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_Array1OfBezierCurve

    def Init(self, theValue):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Init(self, theValue)

    def Size(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Size(self)

    def Length(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Length(self)

    def IsEmpty(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_IsEmpty(self)

    def Lower(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Lower(self)

    def Upper(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Upper(self)

    def Assign(self, theOther):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Assign(self, theOther)

    def Move(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Move(self, *args)

    def Set(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Set(self, *args)

    def First(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_First(self)

    def ChangeFirst(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_ChangeFirst(self)

    def Last(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Last(self)

    def ChangeLast(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve___call__(self, *args)

    def SetValue(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_SetValue(self, *args)

    def UpdateLowerBound(self, theLower):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_UpdateLowerBound(self, theLower)

    def UpdateUpperBound(self, theUpper):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_UpdateUpperBound(self, theUpper)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Resize(self, theLower, theUpper, theToCopyData)

    def IsDeletable(self):
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_IsDeletable(self)

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TColGeom2d_Array1OfBezierCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_Array1OfBezierCurve_swigregister(TColGeom2d_Array1OfBezierCurve)
class TColGeom2d_Array1OfCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_begin(self, *args)

    def cbegin(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_cbegin(self)

    def end(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_end(self, *args)

    def cend(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_cend(self)

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_Array1OfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_Array1OfCurve(*args))
    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_Array1OfCurve

    def Init(self, theValue):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Init(self, theValue)

    def Size(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Size(self)

    def Length(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Length(self)

    def IsEmpty(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_IsEmpty(self)

    def Lower(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Lower(self)

    def Upper(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Upper(self)

    def Assign(self, theOther):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Assign(self, theOther)

    def Move(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Move(self, *args)

    def Set(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Set(self, *args)

    def First(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_First(self)

    def ChangeFirst(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_ChangeFirst(self)

    def Last(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Last(self)

    def ChangeLast(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfCurve___call__(self, *args)

    def SetValue(self, *args):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_SetValue(self, *args)

    def UpdateLowerBound(self, theLower):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_UpdateLowerBound(self, theLower)

    def UpdateUpperBound(self, theUpper):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_UpdateUpperBound(self, theUpper)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Resize(self, theLower, theUpper, theToCopyData)

    def IsDeletable(self):
        return _TColGeom2d.TColGeom2d_Array1OfCurve_IsDeletable(self)

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TColGeom2d_Array1OfCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_Array1OfCurve_swigregister(TColGeom2d_Array1OfCurve)
class TColGeom2d_SequenceOfBoundedCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_begin(self)

    def end(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_end(self)

    def cbegin(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_cbegin(self)

    def cend(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_cend(self)

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceOfBoundedCurve(*args))

    def Size(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Size(self)

    def Length(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Length(self)

    def Lower(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Lower(self)

    def Upper(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Upper(self)

    def IsEmpty(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_IsEmpty(self)

    def Reverse(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Reverse(self)

    def Exchange(self, I, J):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Assign(self, theOther)

    def Set(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Set(self, *args)

    def Remove(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Remove(self, *args)

    def Append(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Append(self, *args)

    def Prepend(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Split(self, theIndex, theSeq)

    def First(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_First(self)

    def ChangeFirst(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_ChangeFirst(self)

    def Last(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Last(self)

    def ChangeLast(self):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceOfBoundedCurve

    def __len__(self):
        return self.Size()


# Register TColGeom2d_SequenceOfBoundedCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_swigregister(TColGeom2d_SequenceOfBoundedCurve)
class TColGeom2d_SequenceOfCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_begin(self)

    def end(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_end(self)

    def cbegin(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_cbegin(self)

    def cend(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_cend(self)

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_SequenceOfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceOfCurve(*args))

    def Size(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Size(self)

    def Length(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Length(self)

    def Lower(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Lower(self)

    def Upper(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Upper(self)

    def IsEmpty(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_IsEmpty(self)

    def Reverse(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Reverse(self)

    def Exchange(self, I, J):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Assign(self, theOther)

    def Set(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Set(self, *args)

    def Remove(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Remove(self, *args)

    def Append(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Append(self, *args)

    def Prepend(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Split(self, theIndex, theSeq)

    def First(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_First(self)

    def ChangeFirst(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_ChangeFirst(self)

    def Last(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Last(self)

    def ChangeLast(self):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceOfCurve

    def __len__(self):
        return self.Size()


# Register TColGeom2d_SequenceOfCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_SequenceOfCurve_swigregister(TColGeom2d_SequenceOfCurve)
class TColGeom2d_SequenceOfGeometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_begin(self)

    def end(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_end(self)

    def cbegin(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_cbegin(self)

    def cend(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_cend(self)

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_SequenceOfGeometry_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceOfGeometry(*args))

    def Size(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Size(self)

    def Length(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Length(self)

    def Lower(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Lower(self)

    def Upper(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Upper(self)

    def IsEmpty(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_IsEmpty(self)

    def Reverse(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Reverse(self)

    def Exchange(self, I, J):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Assign(self, theOther)

    def Set(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Set(self, *args)

    def Remove(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Remove(self, *args)

    def Append(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Append(self, *args)

    def Prepend(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Split(self, theIndex, theSeq)

    def First(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_First(self)

    def ChangeFirst(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_ChangeFirst(self)

    def Last(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Last(self)

    def ChangeLast(self):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_ChangeLast(self)

    def Value(self, theIndex):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceOfGeometry

    def __len__(self):
        return self.Size()


# Register TColGeom2d_SequenceOfGeometry in _TColGeom2d:
_TColGeom2d.TColGeom2d_SequenceOfGeometry_swigregister(TColGeom2d_SequenceOfGeometry)
class TColGeom2d_HArray1OfBezierCurve(TColGeom2d_Array1OfBezierCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HArray1OfBezierCurve(*args))

    def Array1(self):
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Array1(self)

    def ChangeArray1(self):
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom2d_HArray1OfBezierCurve_DownCast(t)

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfBezierCurve

# Register TColGeom2d_HArray1OfBezierCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_swigregister(TColGeom2d_HArray1OfBezierCurve)
class TColGeom2d_HArray1OfCurve(TColGeom2d_Array1OfCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_HArray1OfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HArray1OfCurve(*args))

    def Array1(self):
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_Array1(self)

    def ChangeArray1(self):
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom2d_HArray1OfCurve_DownCast(t)

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfCurve

# Register TColGeom2d_HArray1OfCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_HArray1OfCurve_swigregister(TColGeom2d_HArray1OfCurve)
class TColGeom2d_HArray1OfBSplineCurve(TColGeom2d_Array1OfBSplineCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HArray1OfBSplineCurve(*args))

    def Array1(self):
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Array1(self)

    def ChangeArray1(self):
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast(t)

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfBSplineCurve

# Register TColGeom2d_HArray1OfBSplineCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_swigregister(TColGeom2d_HArray1OfBSplineCurve)
class TColGeom2d_HSequenceOfBoundedCurve(TColGeom2d_SequenceOfBoundedCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HSequenceOfBoundedCurve(*args))

    def Sequence(self):
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Sequence(self)

    def Append(self, *args):
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Append(self, *args)

    def ChangeSequence(self):
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast(t)

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HSequenceOfBoundedCurve

# Register TColGeom2d_HSequenceOfBoundedCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_swigregister(TColGeom2d_HSequenceOfBoundedCurve)
class TColGeom2d_HSequenceOfCurve(TColGeom2d_SequenceOfCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.TColGeom2d_HSequenceOfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HSequenceOfCurve(*args))

    def Sequence(self):
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Sequence(self)

    def Append(self, *args):
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Append(self, *args)

    def ChangeSequence(self):
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom2d_HSequenceOfCurve_DownCast(t)

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HSequenceOfCurve

# Register TColGeom2d_HSequenceOfCurve in _TColGeom2d:
_TColGeom2d.TColGeom2d_HSequenceOfCurve_swigregister(TColGeom2d_HSequenceOfCurve)



