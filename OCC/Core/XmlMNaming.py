# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
XmlMNaming module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_xmlmnaming.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _XmlMNaming
else:
    import _XmlMNaming

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMNaming.delete_SwigPyIterator

    def value(self):
        return _XmlMNaming.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMNaming.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMNaming.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMNaming.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMNaming.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMNaming.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMNaming.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMNaming.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMNaming.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMNaming.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMNaming.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMNaming.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMNaming.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMNaming.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMNaming.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMNaming.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _XmlMNaming:
_XmlMNaming.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _XmlMNaming.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.XmlMDF
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlMNaming_NamedShapeDriver_Create():
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Create()

def Handle_XmlMNaming_NamedShapeDriver_DownCast(t):
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DownCast(t)

def Handle_XmlMNaming_NamedShapeDriver_IsNull(t):
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IsNull(t)

def Handle_XmlMNaming_NamingDriver_Create():
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_Create()

def Handle_XmlMNaming_NamingDriver_DownCast(t):
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_DownCast(t)

def Handle_XmlMNaming_NamingDriver_IsNull(t):
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_IsNull(t)
class xmlmnaming(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AddDrivers(*args):
        r"""

        Parameters
        ----------
        aDriverTable: XmlMDF_ADriverTable
        aMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        Adds the attribute drivers to <adrivertable>.

        """
        return _XmlMNaming.xmlmnaming_AddDrivers(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlMNaming.xmlmnaming_swiginit(self, _XmlMNaming.new_xmlmnaming())
    __swig_destroy__ = _XmlMNaming.delete_xmlmnaming

# Register xmlmnaming in _XmlMNaming:
_XmlMNaming.xmlmnaming_swigregister(xmlmnaming)
class XmlMNaming_NamedShapeDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlMNaming.XmlMNaming_NamedShapeDriver_swiginit(self, _XmlMNaming.new_XmlMNaming_NamedShapeDriver(*args))

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clear myshapeset.

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_Clear(self, *args)

    def GetShapesLocations(self, *args):
        r"""
        Return
        -------
        TopTools_LocationSet

        Description
        -----------
        Get the format of topology.

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_GetShapesLocations(self, *args)

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        theSource: XmlObjMgt_Persistent
        theTarget: TDF_Attribute
        theRelocTable: XmlObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theSource: TDF_Attribute
        theTarget: XmlObjMgt_Persistent
        theRelocTable: XmlObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_Paste(self, *args)

    def ReadShapeSection(self, *args):
        r"""

        Parameters
        ----------
        anElement: XmlObjMgt_Element
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        Input the shapes from dom element.

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_ReadShapeSection(self, *args)

    def WriteShapeSection(self, *args):
        r"""

        Parameters
        ----------
        anElement: XmlObjMgt_Element
        theStorageFormatVersion: TDocStd_FormatVersion
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        Output the shapes into dom element.

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_WriteShapeSection(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMNaming_NamedShapeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_NamedShapeDriver

# Register XmlMNaming_NamedShapeDriver in _XmlMNaming:
_XmlMNaming.XmlMNaming_NamedShapeDriver_swigregister(XmlMNaming_NamedShapeDriver)
class XmlMNaming_NamingDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlMNaming.XmlMNaming_NamingDriver_swiginit(self, _XmlMNaming.new_XmlMNaming_NamingDriver(*args))

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        theSource: XmlObjMgt_Persistent
        theTarget: TDF_Attribute
        theRelocTable: XmlObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theSource: TDF_Attribute
        theTarget: XmlObjMgt_Persistent
        theRelocTable: XmlObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _XmlMNaming.XmlMNaming_NamingDriver_Paste(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMNaming_NamingDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_NamingDriver

# Register XmlMNaming_NamingDriver in _XmlMNaming:
_XmlMNaming.XmlMNaming_NamingDriver_swigregister(XmlMNaming_NamingDriver)
class XmlMNaming_Shape1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Doc: XmlObjMgt_Document

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        E: XmlObjMgt_Element

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlMNaming.XmlMNaming_Shape1_swiginit(self, _XmlMNaming.new_XmlMNaming_Shape1(*args))

    def Element(self, *args):
        r"""
        Return
        -------
        XmlObjMgt_Element

        Description
        -----------
        Return myelement.

        """
        return _XmlMNaming.XmlMNaming_Shape1_Element(self, *args)

    def LocId(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _XmlMNaming.XmlMNaming_Shape1_LocId(self, *args)

    def Orientation(self, *args):
        r"""
        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        No available documentation.

        """
        return _XmlMNaming.XmlMNaming_Shape1_Orientation(self, *args)

    def SetShape(self, *args):
        r"""

        Parameters
        ----------
        ID: int
        LocID: int
        Orient: TopAbs_Orientation

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _XmlMNaming.XmlMNaming_Shape1_SetShape(self, *args)

    def SetVertex(self, *args):
        r"""

        Parameters
        ----------
        theVertex: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _XmlMNaming.XmlMNaming_Shape1_SetVertex(self, *args)

    def TShapeId(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _XmlMNaming.XmlMNaming_Shape1_TShapeId(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_Shape1

# Register XmlMNaming_Shape1 in _XmlMNaming:
_XmlMNaming.XmlMNaming_Shape1_swigregister(XmlMNaming_Shape1)



@deprecated
def xmlmnaming_AddDrivers(*args):
	return xmlmnaming.AddDrivers(*args)



