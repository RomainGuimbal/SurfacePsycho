# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlMNaming module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmlmnaming.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMNaming')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMNaming')
    _XmlMNaming = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMNaming', [dirname(__file__)])
        except ImportError:
            import _XmlMNaming
            return _XmlMNaming
        try:
            _mod = imp.load_module('_XmlMNaming', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMNaming = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMNaming
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMNaming.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XmlMNaming.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlMNaming.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlMNaming.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XmlMNaming.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMNaming.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XmlMNaming.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XmlMNaming.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XmlMNaming.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XmlMNaming.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlMNaming.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMNaming.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMNaming.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlMNaming.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlMNaming.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlMNaming.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XmlMNaming.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMNaming.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlMNaming.process_exception(error, method_name, class_name)
process_exception = _XmlMNaming.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.XmlMDF
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlMNaming_NamedShapeDriver_Create() -> "opencascade::handle< XmlMNaming_NamedShapeDriver >":
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Create()
Handle_XmlMNaming_NamedShapeDriver_Create = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Create

def Handle_XmlMNaming_NamedShapeDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMNaming_NamedShapeDriver >":
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DownCast(t)
Handle_XmlMNaming_NamedShapeDriver_DownCast = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DownCast

def Handle_XmlMNaming_NamedShapeDriver_IsNull(t: 'opencascade::handle< XmlMNaming_NamedShapeDriver > const &') -> "bool":
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IsNull(t)
Handle_XmlMNaming_NamedShapeDriver_IsNull = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IsNull

def Handle_XmlMNaming_NamingDriver_Create() -> "opencascade::handle< XmlMNaming_NamingDriver >":
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_Create()
Handle_XmlMNaming_NamingDriver_Create = _XmlMNaming.Handle_XmlMNaming_NamingDriver_Create

def Handle_XmlMNaming_NamingDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMNaming_NamingDriver >":
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_DownCast(t)
Handle_XmlMNaming_NamingDriver_DownCast = _XmlMNaming.Handle_XmlMNaming_NamingDriver_DownCast

def Handle_XmlMNaming_NamingDriver_IsNull(t: 'opencascade::handle< XmlMNaming_NamingDriver > const &') -> "bool":
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_IsNull(t)
Handle_XmlMNaming_NamingDriver_IsNull = _XmlMNaming.Handle_XmlMNaming_NamingDriver_IsNull
class xmlmnaming(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xmlmnaming, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xmlmnaming, name)
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        Adds the attribute drivers to <adrivertable>.

        Parameters
        ----------
        aDriverTable: XmlMDF_ADriverTable
        aMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        return _XmlMNaming.xmlmnaming_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlMNaming.new_xmlmnaming()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMNaming.delete_xmlmnaming
    __del__ = lambda self: None
xmlmnaming_swigregister = _XmlMNaming.xmlmnaming_swigregister
xmlmnaming_swigregister(xmlmnaming)

def xmlmnaming_AddDrivers(*args) -> "void":
    """
    Adds the attribute drivers to <adrivertable>.

    Parameters
    ----------
    aDriverTable: XmlMDF_ADriverTable
    aMessageDriver: Message_Messenger

    Returns
    -------
    None

    """
    return _XmlMNaming.xmlmnaming_AddDrivers(*args)

class XmlMNaming_NamedShapeDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMNaming_NamedShapeDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMNaming_NamedShapeDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        aMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMNaming.new_XmlMNaming_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args) -> "void":
        """
        Clear myshapeset.

        Returns
        -------
        None

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_Clear(self, *args)


    def GetShapesLocations(self, *args) -> "TopTools_LocationSet &":
        """
        Get the format of topology.

        Returns
        -------
        TopTools_LocationSet

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_GetShapesLocations(self, *args)


    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theSource: XmlObjMgt_Persistent
        theTarget: TDF_Attribute
        theRelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        theSource: TDF_Attribute
        theTarget: XmlObjMgt_Persistent
        theRelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_Paste(self, *args)


    def ReadShapeSection(self, *args) -> "void":
        """
        Input the shapes from dom element.

        Parameters
        ----------
        anElement: XmlObjMgt_Element
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_ReadShapeSection(self, *args)


    def WriteShapeSection(self, *args) -> "void":
        """
        Output the shapes into dom element.

        Parameters
        ----------
        anElement: XmlObjMgt_Element
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_WriteShapeSection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMNaming_NamedShapeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_NamedShapeDriver
    __del__ = lambda self: None
XmlMNaming_NamedShapeDriver_swigregister = _XmlMNaming.XmlMNaming_NamedShapeDriver_swigregister
XmlMNaming_NamedShapeDriver_swigregister(XmlMNaming_NamedShapeDriver)

class XmlMNaming_NamingDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMNaming_NamingDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMNaming_NamingDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        aMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMNaming.new_XmlMNaming_NamingDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theSource: XmlObjMgt_Persistent
        theTarget: TDF_Attribute
        theRelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        theSource: TDF_Attribute
        theTarget: XmlObjMgt_Persistent
        theRelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMNaming.XmlMNaming_NamingDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMNaming_NamingDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_NamingDriver
    __del__ = lambda self: None
XmlMNaming_NamingDriver_swigregister = _XmlMNaming.XmlMNaming_NamingDriver_swigregister
XmlMNaming_NamingDriver_swigregister(XmlMNaming_NamingDriver)

class XmlMNaming_Shape1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMNaming_Shape1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMNaming_Shape1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        Doc: XmlObjMgt_Document

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        E: XmlObjMgt_Element

        Returns
        -------
        None

        """
        this = _XmlMNaming.new_XmlMNaming_Shape1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Element(self, *args) -> "XmlObjMgt_Element const &":
        """
        Return myelement.

        Returns
        -------
        XmlObjMgt_Element

        """
        return _XmlMNaming.XmlMNaming_Shape1_Element(self, *args)


    def LocId(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _XmlMNaming.XmlMNaming_Shape1_LocId(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        No available documentation.

        Returns
        -------
        TopAbs_Orientation

        """
        return _XmlMNaming.XmlMNaming_Shape1_Orientation(self, *args)


    def SetShape(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ID: int
        LocID: int
        Orient: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _XmlMNaming.XmlMNaming_Shape1_SetShape(self, *args)


    def SetVertex(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theVertex: TopoDS_Shape

        Returns
        -------
        None

        """
        return _XmlMNaming.XmlMNaming_Shape1_SetVertex(self, *args)


    def TShapeId(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _XmlMNaming.XmlMNaming_Shape1_TShapeId(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_Shape1
    __del__ = lambda self: None
XmlMNaming_Shape1_swigregister = _XmlMNaming.XmlMNaming_Shape1_swigregister
XmlMNaming_Shape1_swigregister(XmlMNaming_Shape1)



# This file is compatible with both classic and new-style classes.


