# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
IGESToBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_igestobrep.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IGESToBRep
else:
    import _IGESToBRep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESToBRep.delete_SwigPyIterator

    def value(self):
        return _IGESToBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESToBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESToBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESToBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESToBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESToBRep.SwigPyIterator_copy(self)

    def next(self):
        return _IGESToBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESToBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESToBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESToBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESToBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESToBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESToBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESToBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESToBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESToBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IGESToBRep:
_IGESToBRep.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _IGESToBRep.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.IGESData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.ShapeBuild
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.Transfer

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_IGESToBRep_Actor_Create():
    return _IGESToBRep.Handle_IGESToBRep_Actor_Create()

def Handle_IGESToBRep_Actor_DownCast(t):
    return _IGESToBRep.Handle_IGESToBRep_Actor_DownCast(t)

def Handle_IGESToBRep_Actor_IsNull(t):
    return _IGESToBRep.Handle_IGESToBRep_Actor_IsNull(t)

def Handle_IGESToBRep_AlgoContainer_Create():
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_Create()

def Handle_IGESToBRep_AlgoContainer_DownCast(t):
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast(t)

def Handle_IGESToBRep_AlgoContainer_IsNull(t):
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsNull(t)

def Handle_IGESToBRep_IGESBoundary_Create():
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Create()

def Handle_IGESToBRep_IGESBoundary_DownCast(t):
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast(t)

def Handle_IGESToBRep_IGESBoundary_IsNull(t):
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsNull(t)

def Handle_IGESToBRep_ToolContainer_Create():
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_Create()

def Handle_IGESToBRep_ToolContainer_DownCast(t):
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast(t)

def Handle_IGESToBRep_ToolContainer_IsNull(t):
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsNull(t)
class igestobrep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AlgoContainer(*args):
        r"""
        Return
        -------
        opencascade::handle<IGESToBRep_AlgoContainer>

        Description
        -----------
        Returns default algocontainer.

        """
        return _IGESToBRep.igestobrep_AlgoContainer(*args)

    @staticmethod
    def IGESCurveToSequenceOfIGESCurve(*args):
        r"""

        Parameters
        ----------
        curve: IGESData_IGESEntity
        sequence: TColStd_HSequenceOfTransient

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.igestobrep_IGESCurveToSequenceOfIGESCurve(*args)

    @staticmethod
    def Init(*args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates and initializes default algocontainer.

        """
        return _IGESToBRep.igestobrep_Init(*args)

    @staticmethod
    def IsBRepEntity(*args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        bool

        Description
        -----------
        Return true if the igesentity can be transferred by transferbrepentity. ex: vertexlist, edgelist, loop, face, shell, manifold solid brep object from igessolid: 502, 504, 508, 510, 514, 186.

        """
        return _IGESToBRep.igestobrep_IsBRepEntity(*args)

    @staticmethod
    def IsBasicCurve(*args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        bool

        Description
        -----------
        Return true if the igesentity can be transferred by transferbasiccurve. ex: circulararc, conicarc, line, copiousdata, bsplinecurve, splinecurve... from igesgeom: 104,110,112,126.

        """
        return _IGESToBRep.igestobrep_IsBasicCurve(*args)

    @staticmethod
    def IsBasicSurface(*args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        bool

        Description
        -----------
        Return true if the igesentity can be transferred by transferbasicsurface. ex: bsplinesurface, splinesurface... from igesgeom: 114,128.

        """
        return _IGESToBRep.igestobrep_IsBasicSurface(*args)

    @staticmethod
    def IsCurveAndSurface(*args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        bool

        Description
        -----------
        Return true if the igesentity can be transferred by transfercurveandsurface. ex: all igesentity from igesgeom.

        """
        return _IGESToBRep.igestobrep_IsCurveAndSurface(*args)

    @staticmethod
    def IsTopoCurve(*args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        bool

        Description
        -----------
        Return true if the igesentity can be transferred by transfertopocurve. ex: all curves from igesgeom: all basic curves,102,130,142,144.

        """
        return _IGESToBRep.igestobrep_IsTopoCurve(*args)

    @staticmethod
    def IsTopoSurface(*args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        bool

        Description
        -----------
        Return true if the igesentity can be transferred by transfertoposurface. ex: all surfaces from igesgeom: all basic surfaces,108,118,120,122,141,143.

        """
        return _IGESToBRep.igestobrep_IsTopoSurface(*args)

    @staticmethod
    def SetAlgoContainer(*args):
        r"""

        Parameters
        ----------
        aContainer: IGESToBRep_AlgoContainer

        Return
        -------
        None

        Description
        -----------
        Sets default algocontainer.

        """
        return _IGESToBRep.igestobrep_SetAlgoContainer(*args)

    @staticmethod
    def TransferPCurve(*args):
        r"""

        Parameters
        ----------
        fromedge: TopoDS_Edge
        toedge: TopoDS_Edge
        face: TopoDS_Face

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.igestobrep_TransferPCurve(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _IGESToBRep.igestobrep_swiginit(self, _IGESToBRep.new_igestobrep())
    __swig_destroy__ = _IGESToBRep.delete_igestobrep

# Register igestobrep in _IGESToBRep:
_IGESToBRep.igestobrep_swigregister(igestobrep)
class IGESToBRep_Actor(OCC.Core.Transfer.Transfer_ActorOfTransientProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _IGESToBRep.IGESToBRep_Actor_swiginit(self, _IGESToBRep.new_IGESToBRep_Actor(*args))

    def GetContinuity(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Return 'thecontinuity'.

        """
        return _IGESToBRep.IGESToBRep_Actor_GetContinuity(self, *args)

    def SetContinuity(self, *args):
        r"""

        Parameters
        ----------
        continuity: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        ---purpose by default continuity = 0 if continuity = 1: try c1 if continuity = 2: try c2.

        """
        return _IGESToBRep.IGESToBRep_Actor_SetContinuity(self, *args)

    def SetModel(self, *args):
        r"""

        Parameters
        ----------
        model: Interface_InterfaceModel

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_Actor_SetModel(self, *args)

    def UsedTolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the tolerance which was actually used, either from the file or from statics.

        """
        return _IGESToBRep.IGESToBRep_Actor_UsedTolerance(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_Actor_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Actor

# Register IGESToBRep_Actor in _IGESToBRep:
_IGESToBRep.IGESToBRep_Actor_swigregister(IGESToBRep_Actor)
class IGESToBRep_AlgoContainer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _IGESToBRep.IGESToBRep_AlgoContainer_swiginit(self, _IGESToBRep.new_IGESToBRep_AlgoContainer(*args))

    def SetToolContainer(self, *args):
        r"""

        Parameters
        ----------
        TC: IGESToBRep_ToolContainer

        Return
        -------
        None

        Description
        -----------
        Sets toolcontainer.

        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_SetToolContainer(self, *args)

    def ToolContainer(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IGESToBRep_ToolContainer>

        Description
        -----------
        Returns toolcontainer.

        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_ToolContainer(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_AlgoContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_AlgoContainer

# Register IGESToBRep_AlgoContainer in _IGESToBRep:
_IGESToBRep.IGESToBRep_AlgoContainer_swigregister(IGESToBRep_AlgoContainer)
class IGESToBRep_CurveAndSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a tool curveandsurface ready to run, with epsilons set to 1.e-04, mymodetopo to true, the optimization of the continuity to false.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Return
        -------
        None

        Description
        -----------
        Creates a tool curveandsurface ready to run.

        """
        _IGESToBRep.IGESToBRep_CurveAndSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_CurveAndSurface(*args))

    def AddShapeResult(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        result: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Set in 'mymap' the result of the transfer of the entity of the igesentity start ( type vertexlist or edgelist).

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_AddShapeResult(self, *args)

    def GetContinuity(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the value of 'mycontinuity'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetContinuity(self, *args)

    def GetEpsCoeff(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value of 'myepscoeff'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsCoeff(self, *args)

    def GetEpsGeom(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value of 'myepsgeom'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsGeom(self, *args)

    def GetEpsilon(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value of 'myeps'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsilon(self, *args)

    def GetMaxTol(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value of 'mymaxtol'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetMaxTol(self, *args)

    def GetMinTol(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value of 'mymintol'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetMinTol(self, *args)

    def GetModeApprox(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the value of 'mymodeapprox'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModeApprox(self, *args)

    def GetModeTransfer(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the value of 'mymodeistopo'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModeTransfer(self, *args)

    def GetModel(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IGESData_IGESModel>

        Description
        -----------
        Returns the value of 'mymodel'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModel(self, *args)

    def GetOptimized(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the value of 'mycontisopti'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetOptimized(self, *args)

    def GetShapeResult(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the result of the transfer of the igesentity 'start' contained in 'mymap' . (if hasshaperesult is true).

        Parameters
        ----------
        start: IGESData_IGESEntity
        num: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the numth result of the igesentity start (type vertexlist or edgelist) in 'mymap'. (if nbshaperesult is not null).

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetShapeResult(self, *args)

    def GetSurfaceCurve(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the value of ' mysurfacecurve' 0 = value in file , 2 = kepp 2d and compute 3d 3 = keep 3d and compute 2d.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetSurfaceCurve(self, *args)

    def GetTransferProcess(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Transfer_TransientProcess>

        Description
        -----------
        Returns the value of 'mymsgreg'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetTransferProcess(self, *args)

    def GetUVResolution(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetUVResolution(self, *args)

    def GetUnitFactor(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value of ' myunitfactor'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetUnitFactor(self, *args)

    def HasShapeResult(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        bool

        Description
        -----------
        Returns true if start was already treated and has a result in 'mymap' else returns false.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_HasShapeResult(self, *args)

    def Init(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes the field of the tool curveandsurface with default creating values.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_Init(self, *args)

    def NbShapeResult(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        int

        Description
        -----------
        Returns the number of shapes results contained in 'mymap' for the igesentity start ( type vertexlist or edgelist).

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_NbShapeResult(self, *args)

    def SendFail(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        amsg: Message_Msg

        Return
        -------
        None

        Description
        -----------
        Records a new fail message.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendFail(self, *args)

    def SendMsg(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        amsg: Message_Msg

        Return
        -------
        None

        Description
        -----------
        Records a new information message from the definition of a msg (original+value).

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendMsg(self, *args)

    def SendWarning(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        amsg: Message_Msg

        Return
        -------
        None

        Description
        -----------
        Records a new warning message.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendWarning(self, *args)

    def SetContinuity(self, *args):
        r"""

        Parameters
        ----------
        continuity: int

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'mycontinuity' if continuity = 0 do nothing else if continuity = 1 try c1 if continuity = 2 try c2.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetContinuity(self, *args)

    def SetEpsCoeff(self, *args):
        r"""

        Parameters
        ----------
        eps: float

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'myepscoeff'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsCoeff(self, *args)

    def SetEpsGeom(self, *args):
        r"""

        Parameters
        ----------
        eps: float

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'myepsgeom'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsGeom(self, *args)

    def SetEpsilon(self, *args):
        r"""

        Parameters
        ----------
        eps: float

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'myeps'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsilon(self, *args)

    def SetMaxTol(self, *args):
        r"""

        Parameters
        ----------
        maxtol: float

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'mymaxtol'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetMaxTol(self, *args)

    def SetMinTol(self, *args):
        r"""

        Parameters
        ----------
        mintol: float

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'mymintol'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetMinTol(self, *args)

    def SetModeApprox(self, *args):
        r"""

        Parameters
        ----------
        mode: bool

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'mymodeapprox'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModeApprox(self, *args)

    def SetModeTransfer(self, *args):
        r"""

        Parameters
        ----------
        mode: bool

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'mymodeistopo'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModeTransfer(self, *args)

    def SetModel(self, *args):
        r"""

        Parameters
        ----------
        model: IGESData_IGESModel

        Return
        -------
        None

        Description
        -----------
        Set the value of 'mymodel'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModel(self, *args)

    def SetOptimized(self, *args):
        r"""

        Parameters
        ----------
        optimized: bool

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'mycontisopti'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetOptimized(self, *args)

    def SetShapeResult(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        result: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Set in 'mymap' the result of the transfer of the igesentity 'start'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetShapeResult(self, *args)

    def SetSurface(self, *args):
        r"""

        Parameters
        ----------
        theSurface: Geom_Surface

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetSurface(self, *args)

    def SetSurfaceCurve(self, *args):
        r"""

        Parameters
        ----------
        ival: int

        Return
        -------
        None

        Description
        -----------
        Changes the value of 'mysurfacecurve'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetSurfaceCurve(self, *args)

    def SetTransferProcess(self, *args):
        r"""

        Parameters
        ----------
        TP: Transfer_TransientProcess

        Return
        -------
        None

        Description
        -----------
        Set the value of 'mymsgreg'.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetTransferProcess(self, *args)

    def Surface(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Surface>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_Surface(self, *args)

    def TransferCurveAndSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the result of the transfert of any iges curve or surface entity. if the transfer has failed, this member return a nullentity.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_TransferCurveAndSurface(self, *args)

    def TransferGeometry(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the result of the transfert the geometry of any igesentity. if the transfer has failed, this member return a nullentity.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_TransferGeometry(self, *args)

    def UpdateMinMaxTol(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Sets values of 'mymintol' and 'mymaxtol' as follows mymaxtol = max ('read.maxprecision.val', myepsgeom * myunitfactor) mymintol = precision::confusion() remark: this method is automatically invoked each time the values of 'myepsgeom' or 'myunitfactor' are changed.

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_UpdateMinMaxTol(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_CurveAndSurface

# Register IGESToBRep_CurveAndSurface in _IGESToBRep:
_IGESToBRep.IGESToBRep_CurveAndSurface_swigregister(IGESToBRep_CurveAndSurface)
class IGESToBRep_IGESBoundary(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _IGESToBRep.IGESToBRep_IGESBoundary_swiginit(self, _IGESToBRep.new_IGESToBRep_IGESBoundary(*args))

    def Check(self, *args):
        r"""

        Parameters
        ----------
        result: bool
        checkclosure: bool
        okCurve3d: bool
        okCurve2d: bool

        Return
        -------
        None

        Description
        -----------
        Checks result of translation of iges boundary entities (types 141, 142 or 508). checks consistency of 2d and 3d representations and keeps only one if they are inconsistent. <result>: result of translation (returned by transfer), <checkclosure>: false for 142 without parent 144 entity, otherwise true, <okcurve3d>, <okcurve2d>: those returned by transfer.

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Check(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface
        entity: IGESData_IGESEntity
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float
        filepreference: int

        Return
        -------
        None

        Description
        -----------
        Inits the object with parameters common for all types of iges boundaries. <cs>: object to be used for retrieving translation parameters and sending messages, <entity>: boundary entity to be processed, <face>, <trans>, <ufact>: as for igestobrep_topocurve <filepreference>: preferred representation (2 or 3) given in the iges file.

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Init(self, *args)

    def Transfer(self, *args):
        r"""

        Parameters
        ----------
        curve3d: IGESData_IGESEntity
        toreverse3d: bool
        curves2d: IGESData_HArray1OfIGESEntity
        number: int

        Return
        -------
        okCurve: bool
        okCurve3d: bool
        okCurve2d: bool

        Description
        -----------
        Translates 141 and 142 entities. returns true if the curve has been successfully translated, otherwise returns false. <okcurve..>: flags that indicate whether corresponding representation has been successfully translated (must be set to true before first call), <curve3d>: model space curve for 142 and current model space curve for 141, <toreverse3d>: false for 142 and current orientation flag for 141, <curves2d>: 1 parameter space curve for 142 or list of them for current model space curves for 141, <number>: 1 for 142 and rank number of model space curve for 141.

        Parameters
        ----------
        curve3d: ShapeExtend_WireData
        curves2d: IGESData_HArray1OfIGESEntity
        toreverse2d: bool
        number: int
        lsewd: ShapeExtend_WireData

        Return
        -------
        okCurve: bool
        okCurve3d: bool
        okCurve2d: bool

        Description
        -----------
        Translates 508 entity. returns true if the curve has been successfully translated, otherwise returns false. input object igesboundary must be created and initialized before. <okcurve..>: flags that indicate whether corresponding representation has been successfully translated (must be set to true before first call), <curve3d>: result of translation of current edge, <curves2d>: list of parameter space curves for edge, <toreverse2d>: orientation flag of current edge in respect to its model space curve, <number>: rank number of edge, <lsewd>: returns the result of translation of current edge.

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Transfer(self, *args)

    def WireData(self, *args):
        r"""
        Return
        -------
        opencascade::handle<ShapeExtend_WireData>

        Description
        -----------
        Returns the resulting wire.

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData(self, *args)

    def WireData2d(self, *args):
        r"""
        Return
        -------
        opencascade::handle<ShapeExtend_WireData>

        Description
        -----------
        Returns the wire from 2d curves (edges contain pcurves only).

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData2d(self, *args)

    def WireData3d(self, *args):
        r"""
        Return
        -------
        opencascade::handle<ShapeExtend_WireData>

        Description
        -----------
        Returns the wire from 3d curves (edges contain 3d curves and may contain pcurves).

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData3d(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_IGESBoundary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_IGESBoundary

# Register IGESToBRep_IGESBoundary in _IGESToBRep:
_IGESToBRep.IGESToBRep_IGESBoundary_swigregister(IGESToBRep_IGESBoundary)
class IGESToBRep_Reader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a reader.

        """
        _IGESToBRep.IGESToBRep_Reader_swiginit(self, _IGESToBRep.new_IGESToBRep_Reader(*args))

    def Actor(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IGESToBRep_Actor>

        Description
        -----------
        Returns 'theactor'.

        """
        return _IGESToBRep.IGESToBRep_Reader_Actor(self, *args)

    def Check(self, *args):
        r"""

        Parameters
        ----------
        withprint: bool

        Return
        -------
        bool

        Description
        -----------
        Checks the iges file that was loaded into memory. displays error messages in the default message file if withprint is true. returns true if no fail message was found and false if there was at least one fail message.

        """
        return _IGESToBRep.IGESToBRep_Reader_Check(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clears the results between two translation operations.

        """
        return _IGESToBRep.IGESToBRep_Reader_Clear(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the last transfer/transferroots was a success.

        """
        return _IGESToBRep.IGESToBRep_Reader_IsDone(self, *args)

    def LoadFile(self, *args):
        r"""

        Parameters
        ----------
        filename: str

        Return
        -------
        int

        Description
        -----------
        Loads a model from a file.returns 0 if success. returns 1 if the file could not be opened, returns -1 if an error occurred while the file was being loaded.

        """
        return _IGESToBRep.IGESToBRep_Reader_LoadFile(self, *args)

    def Model(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IGESData_IGESModel>

        Description
        -----------
        Returns the model to be worked on.

        """
        return _IGESToBRep.IGESToBRep_Reader_Model(self, *args)

    def NbShapes(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of shapes produced by the translation.

        """
        return _IGESToBRep.IGESToBRep_Reader_NbShapes(self, *args)

    def OneShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns all of the results in a single shape which is: - a null shape if there are no results, - a shape if there is one result, - a compound containing the resulting shapes if there are several.

        """
        return _IGESToBRep.IGESToBRep_Reader_OneShape(self, *args)

    def SetModel(self, *args):
        r"""

        Parameters
        ----------
        model: IGESData_IGESModel

        Return
        -------
        None

        Description
        -----------
        Specifies a model to work on also clears the result and done status, sets transientprocess.

        """
        return _IGESToBRep.IGESToBRep_Reader_SetModel(self, *args)

    def SetTransientProcess(self, *args):
        r"""

        Parameters
        ----------
        TP: Transfer_TransientProcess

        Return
        -------
        None

        Description
        -----------
        Allows to set an already defined transientprocess (to be called after loadfile or setmodel).

        """
        return _IGESToBRep.IGESToBRep_Reader_SetTransientProcess(self, *args)

    def Shape(self, *args):
        r"""

        Parameters
        ----------
        num: int (optional, default to 1)

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the num the resulting shape in a translation operation.

        """
        return _IGESToBRep.IGESToBRep_Reader_Shape(self, *args)

    def Transfer(self, *args):
        r"""

        Parameters
        ----------
        num: int
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Transfers an entity given its rank in the model (root or not) returns true if it is recognized as geom-topol. (but it can have failed: see isdone).

        """
        return _IGESToBRep.IGESToBRep_Reader_Transfer(self, *args)

    def TransferRoots(self, *args):
        r"""

        Parameters
        ----------
        onlyvisible: bool (optional, default to Standard_True)
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        Translates root entities in an iges file. standard_true is the default value and means that only visible root entities are translated. standard_false translates all of the roots (visible and invisible).

        """
        return _IGESToBRep.IGESToBRep_Reader_TransferRoots(self, *args)

    def TransientProcess(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Transfer_TransientProcess>

        Description
        -----------
        Returns the transientprocess.

        """
        return _IGESToBRep.IGESToBRep_Reader_TransientProcess(self, *args)

    def UsedTolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the tolerance which has been actually used, converted in millimeters (either that from file or that from session, according the mode).

        """
        return _IGESToBRep.IGESToBRep_Reader_UsedTolerance(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Reader

# Register IGESToBRep_Reader in _IGESToBRep:
_IGESToBRep.IGESToBRep_Reader_swigregister(IGESToBRep_Reader)
class IGESToBRep_ToolContainer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _IGESToBRep.IGESToBRep_ToolContainer_swiginit(self, _IGESToBRep.new_IGESToBRep_ToolContainer(*args))

    def IGESBoundary(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IGESToBRep_IGESBoundary>

        Description
        -----------
        Returns igestobrep_igesboundary.

        """
        return _IGESToBRep.IGESToBRep_ToolContainer_IGESBoundary(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_ToolContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_ToolContainer

# Register IGESToBRep_ToolContainer in _IGESToBRep:
_IGESToBRep.IGESToBRep_ToolContainer_swigregister(IGESToBRep_ToolContainer)
class IGESToBRep_BRepEntity(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a tool brepentity ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Return
        -------
        None

        Description
        -----------
        Creates a tool brepentity ready to run and sets its fields as cs's.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Return
        -------
        None

        Description
        -----------
        Creates a tool brepentity ready to run.

        """
        _IGESToBRep.IGESToBRep_BRepEntity_swiginit(self, _IGESToBRep.new_IGESToBRep_BRepEntity(*args))

    def TransferBRepEntity(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Transfer the brepentity': face, shell or manifoldsolid.

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferBRepEntity(self, *args)

    def TransferEdge(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_EdgeList
        index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Transfer the entity number 'index' of the edgelist 'start'.

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferEdge(self, *args)

    def TransferFace(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_Face

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Transfer the face entity.

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferFace(self, *args)

    def TransferLoop(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_Loop
        Face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Transfer the loop entity.

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferLoop(self, *args)

    def TransferManifoldSolid(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_ManifoldSolid
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Transfer the manifoldsolid entity.

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferManifoldSolid(self, *args)

    def TransferShell(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_Shell
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Transfer the shell entity.

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferShell(self, *args)

    def TransferVertex(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_VertexList
        index: int

        Return
        -------
        TopoDS_Vertex

        Description
        -----------
        Transfer the entity number 'index' of the vertexlist 'start'.

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferVertex(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BRepEntity

# Register IGESToBRep_BRepEntity in _IGESToBRep:
_IGESToBRep.IGESToBRep_BRepEntity_swigregister(IGESToBRep_BRepEntity)
class IGESToBRep_BasicCurve(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a tool basiccurve ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Return
        -------
        None

        Description
        -----------
        Creates a tool basiccurve ready to run and sets its fields as cs's.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Return
        -------
        None

        Description
        -----------
        Creates a tool basiccurve ready to run.

        """
        _IGESToBRep.IGESToBRep_BasicCurve_swiginit(self, _IGESToBRep.new_IGESToBRep_BasicCurve(*args))

    def Transfer2dBSplineCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_BSplineCurve

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBSplineCurve(self, *args)

    def Transfer2dBasicCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Transfert a igesentity which answer true to the member: igestobrep::isbasiccurve(igesentity). the igesentity must be a curve uv and its associed trsf must be planar .if this entity could not be converted, this member returns a nullentity.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBasicCurve(self, *args)

    def Transfer2dCircularArc(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_CircularArc

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCircularArc(self, *args)

    def Transfer2dConicArc(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_ConicArc

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dConicArc(self, *args)

    def Transfer2dCopiousData(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_CopiousData

        Return
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCopiousData(self, *args)

    def Transfer2dLine(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_Line

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dLine(self, *args)

    def Transfer2dSplineCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_SplineCurve

        Return
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dSplineCurve(self, *args)

    def TransferBSplineCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_BSplineCurve

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferBSplineCurve(self, *args)

    def TransferBasicCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        Transfert a igesentity which answer true to the member: igestobrep::isbasiccurve(igesentity). if this entity could not be converted, this member returns a nullentity.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferBasicCurve(self, *args)

    def TransferCircularArc(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_CircularArc

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferCircularArc(self, *args)

    def TransferConicArc(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_ConicArc

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferConicArc(self, *args)

    def TransferCopiousData(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_CopiousData

        Return
        -------
        opencascade::handle<Geom_BSplineCurve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferCopiousData(self, *args)

    def TransferLine(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_Line

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferLine(self, *args)

    def TransferSplineCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_SplineCurve

        Return
        -------
        opencascade::handle<Geom_BSplineCurve>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferSplineCurve(self, *args)

    def TransferTransformation(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_TransformationMatrix

        Return
        -------
        opencascade::handle<Geom_Transformation>

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferTransformation(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicCurve

# Register IGESToBRep_BasicCurve in _IGESToBRep:
_IGESToBRep.IGESToBRep_BasicCurve_swigregister(IGESToBRep_BasicCurve)
class IGESToBRep_BasicSurface(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a tool basicsurface ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Return
        -------
        None

        Description
        -----------
        Creates a tool basicsurface ready to run and sets its fields as cs's.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Return
        -------
        None

        Description
        -----------
        Creates a tool basicsurface ready to run.

        """
        _IGESToBRep.IGESToBRep_BasicSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_BasicSurface(*args))

    def TransferBSplineSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_BSplineSurface

        Return
        -------
        opencascade::handle<Geom_BSplineSurface>

        Description
        -----------
        Returns bsplinesurface from geom if the transfer has succeeded.

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferBSplineSurface(self, *args)

    def TransferBasicSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        opencascade::handle<Geom_Surface>

        Description
        -----------
        Returns surface from geom if the last transfer has succeeded.

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferBasicSurface(self, *args)

    def TransferPlaneSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_PlaneSurface

        Return
        -------
        opencascade::handle<Geom_Plane>

        Description
        -----------
        Returns plane from geom if the transfer has succeeded.

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferPlaneSurface(self, *args)

    def TransferRigthConicalSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_ConicalSurface

        Return
        -------
        opencascade::handle<Geom_ConicalSurface>

        Description
        -----------
        Returns conicalsurface from geom if the transfer has succeeded.

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferRigthConicalSurface(self, *args)

    def TransferRigthCylindricalSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_CylindricalSurface

        Return
        -------
        opencascade::handle<Geom_CylindricalSurface>

        Description
        -----------
        Returns cylindricalsurface from geom if the transfer has succeeded.

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferRigthCylindricalSurface(self, *args)

    def TransferSphericalSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_SphericalSurface

        Return
        -------
        opencascade::handle<Geom_SphericalSurface>

        Description
        -----------
        Returns sphericalsurface from geom if the transfer has succeeded.

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferSphericalSurface(self, *args)

    def TransferSplineSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_SplineSurface

        Return
        -------
        opencascade::handle<Geom_BSplineSurface>

        Description
        -----------
        Returns bsplinesurface from geom if the transfer has succeeded.

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferSplineSurface(self, *args)

    def TransferToroidalSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESSolid_ToroidalSurface

        Return
        -------
        opencascade::handle<Geom_ToroidalSurface>

        Description
        -----------
        Returns sphericalsurface from geom if the transfer has succeeded.

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferToroidalSurface(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicSurface

# Register IGESToBRep_BasicSurface in _IGESToBRep:
_IGESToBRep.IGESToBRep_BasicSurface_swigregister(IGESToBRep_BasicSurface)
class IGESToBRep_TopoCurve(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a tool topocurve ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Return
        -------
        None

        Description
        -----------
        Creates a tool topocurve ready to run and sets its fields as cs's.

        Parameters
        ----------
        CS: IGESToBRep_TopoCurve

        Return
        -------
        None

        Description
        -----------
        Creates a tool topocurve ready to run and sets its fields as cs's.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Return
        -------
        None

        Description
        -----------
        Creates a tool topocurve ready to run.

        """
        _IGESToBRep.IGESToBRep_TopoCurve_swiginit(self, _IGESToBRep.new_IGESToBRep_TopoCurve(*args))

    def Approx2dBSplineCurve(self, *args):
        r"""

        Parameters
        ----------
        start: Geom2d_BSplineCurve

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Approx2dBSplineCurve(self, *args)

    def ApproxBSplineCurve(self, *args):
        r"""

        Parameters
        ----------
        start: Geom_BSplineCurve

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_ApproxBSplineCurve(self, *args)

    def BadCase(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns thebadcase flag.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_BadCase(self, *args)

    def Curve(self, *args):
        r"""

        Parameters
        ----------
        num: int (optional, default to 1)

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        Returns a curve given its rank, by default the first one (null curvee if out of range) in 'thecurves'.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Curve(self, *args)

    def Curve2d(self, *args):
        r"""

        Parameters
        ----------
        num: int (optional, default to 1)

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Returns a curve given its rank, by default the first one (null curvee if out of range) in 'thecurves2d'.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Curve2d(self, *args)

    def NbCurves(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the count of curves in 'thecurves'.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_NbCurves(self, *args)

    def NbCurves2d(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the count of curves in 'thecurves2d'.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_NbCurves2d(self, *args)

    def SetBadCase(self, *args):
        r"""

        Parameters
        ----------
        value: bool

        Return
        -------
        None

        Description
        -----------
        Sets thebadcase flag.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_SetBadCase(self, *args)

    def Transfer2dCompositeCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_CompositeCurve
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dCompositeCurve(self, *args)

    def Transfer2dOffsetCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_OffsetCurve
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dOffsetCurve(self, *args)

    def Transfer2dPoint(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_Point

        Return
        -------
        TopoDS_Vertex

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dPoint(self, *args)

    def Transfer2dTopoBasicCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoBasicCurve(self, *args)

    def Transfer2dTopoCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoCurve(self, *args)

    def TransferBoundary(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_Boundary

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferBoundary(self, *args)

    def TransferBoundaryOnFace(self, *args):
        r"""

        Parameters
        ----------
        face: TopoDS_Face
        start: IGESGeom_Boundary
        trans: gp_Trsf2d
        uFact: float

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Transfers a boundary directly on a face to trim it.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferBoundaryOnFace(self, *args)

    def TransferCompositeCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_CompositeCurve

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCompositeCurve(self, *args)

    def TransferCurveOnFace(self, *args):
        r"""

        Parameters
        ----------
        face: TopoDS_Face
        start: IGESGeom_CurveOnSurface
        trans: gp_Trsf2d
        uFact: float
        IsCurv: bool

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Transfers a curveonsurface directly on a face to trim it. the curveonsurface have to be defined outer or inner.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnFace(self, *args)

    def TransferCurveOnSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_CurveOnSurface

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnSurface(self, *args)

    def TransferOffsetCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_OffsetCurve

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferOffsetCurve(self, *args)

    def TransferPoint(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_Point

        Return
        -------
        TopoDS_Vertex

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferPoint(self, *args)

    def TransferTopoBasicCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferTopoBasicCurve(self, *args)

    def TransferTopoCurve(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferTopoCurve(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoCurve

# Register IGESToBRep_TopoCurve in _IGESToBRep:
_IGESToBRep.IGESToBRep_TopoCurve_swigregister(IGESToBRep_TopoCurve)
class IGESToBRep_TopoSurface(IGESToBRep_CurveAndSurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a tool toposurface ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Return
        -------
        None

        Description
        -----------
        Creates a tool toposurface ready to run and sets its fields as cs's.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Return
        -------
        None

        Description
        -----------
        Creates a tool toposurface ready to run.

        """
        _IGESToBRep.IGESToBRep_TopoSurface_swiginit(self, _IGESToBRep.new_IGESToBRep_TopoSurface(*args))

    def ParamSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity
        trans: gp_Trsf2d

        Return
        -------
        uFact: float

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_ParamSurface(self, *args)

    def TransferBoundedSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_BoundedSurface

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferBoundedSurface(self, *args)

    def TransferOffsetSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_OffsetSurface

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferOffsetSurface(self, *args)

    def TransferPerforate(self, *args):
        r"""

        Parameters
        ----------
        start: IGESBasic_SingleParent

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferPerforate(self, *args)

    def TransferPlane(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_Plane

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferPlane(self, *args)

    def TransferRuledSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_RuledSurface

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferRuledSurface(self, *args)

    def TransferSurfaceOfRevolution(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_SurfaceOfRevolution

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferSurfaceOfRevolution(self, *args)

    def TransferTabulatedCylinder(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_TabulatedCylinder

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTabulatedCylinder(self, *args)

    def TransferTopoBasicSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTopoBasicSurface(self, *args)

    def TransferTopoSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESData_IGESEntity

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTopoSurface(self, *args)

    def TransferTrimmedSurface(self, *args):
        r"""

        Parameters
        ----------
        start: IGESGeom_TrimmedSurface

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTrimmedSurface(self, *args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def TransferPlaneSurface(self):
    	pass

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoSurface

# Register IGESToBRep_TopoSurface in _IGESToBRep:
_IGESToBRep.IGESToBRep_TopoSurface_swigregister(IGESToBRep_TopoSurface)



@deprecated
def igestobrep_AlgoContainer(*args):
	return igestobrep.AlgoContainer(*args)

@deprecated
def igestobrep_IGESCurveToSequenceOfIGESCurve(*args):
	return igestobrep.IGESCurveToSequenceOfIGESCurve(*args)

@deprecated
def igestobrep_Init(*args):
	return igestobrep.Init(*args)

@deprecated
def igestobrep_IsBRepEntity(*args):
	return igestobrep.IsBRepEntity(*args)

@deprecated
def igestobrep_IsBasicCurve(*args):
	return igestobrep.IsBasicCurve(*args)

@deprecated
def igestobrep_IsBasicSurface(*args):
	return igestobrep.IsBasicSurface(*args)

@deprecated
def igestobrep_IsCurveAndSurface(*args):
	return igestobrep.IsCurveAndSurface(*args)

@deprecated
def igestobrep_IsTopoCurve(*args):
	return igestobrep.IsTopoCurve(*args)

@deprecated
def igestobrep_IsTopoSurface(*args):
	return igestobrep.IsTopoSurface(*args)

@deprecated
def igestobrep_SetAlgoContainer(*args):
	return igestobrep.SetAlgoContainer(*args)

@deprecated
def igestobrep_TransferPCurve(*args):
	return igestobrep.TransferPCurve(*args)



