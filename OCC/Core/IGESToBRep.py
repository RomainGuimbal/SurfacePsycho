# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IGESToBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_igestobrep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESToBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESToBRep')
    _IGESToBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESToBRep', [dirname(__file__)])
        except ImportError:
            import _IGESToBRep
            return _IGESToBRep
        try:
            _mod = imp.load_module('_IGESToBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESToBRep = swig_import_helper()
    del swig_import_helper
else:
    import _IGESToBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESToBRep.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _IGESToBRep.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IGESToBRep.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IGESToBRep.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _IGESToBRep.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _IGESToBRep.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _IGESToBRep.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _IGESToBRep.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _IGESToBRep.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _IGESToBRep.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IGESToBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _IGESToBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _IGESToBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IGESToBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IGESToBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IGESToBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _IGESToBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESToBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IGESToBRep.process_exception(error, method_name, class_name)
process_exception = _IGESToBRep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.IGESData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Transfer
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.TopTools
import OCC.Core.Geom2d

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_IGESToBRep_Actor_Create() -> "opencascade::handle< IGESToBRep_Actor >":
    return _IGESToBRep.Handle_IGESToBRep_Actor_Create()
Handle_IGESToBRep_Actor_Create = _IGESToBRep.Handle_IGESToBRep_Actor_Create

def Handle_IGESToBRep_Actor_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESToBRep_Actor >":
    return _IGESToBRep.Handle_IGESToBRep_Actor_DownCast(t)
Handle_IGESToBRep_Actor_DownCast = _IGESToBRep.Handle_IGESToBRep_Actor_DownCast

def Handle_IGESToBRep_Actor_IsNull(t: 'opencascade::handle< IGESToBRep_Actor > const &') -> "bool":
    return _IGESToBRep.Handle_IGESToBRep_Actor_IsNull(t)
Handle_IGESToBRep_Actor_IsNull = _IGESToBRep.Handle_IGESToBRep_Actor_IsNull

def Handle_IGESToBRep_AlgoContainer_Create() -> "opencascade::handle< IGESToBRep_AlgoContainer >":
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_Create()
Handle_IGESToBRep_AlgoContainer_Create = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_Create

def Handle_IGESToBRep_AlgoContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESToBRep_AlgoContainer >":
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast(t)
Handle_IGESToBRep_AlgoContainer_DownCast = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast

def Handle_IGESToBRep_AlgoContainer_IsNull(t: 'opencascade::handle< IGESToBRep_AlgoContainer > const &') -> "bool":
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsNull(t)
Handle_IGESToBRep_AlgoContainer_IsNull = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsNull

def Handle_IGESToBRep_IGESBoundary_Create() -> "opencascade::handle< IGESToBRep_IGESBoundary >":
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Create()
Handle_IGESToBRep_IGESBoundary_Create = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Create

def Handle_IGESToBRep_IGESBoundary_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESToBRep_IGESBoundary >":
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast(t)
Handle_IGESToBRep_IGESBoundary_DownCast = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast

def Handle_IGESToBRep_IGESBoundary_IsNull(t: 'opencascade::handle< IGESToBRep_IGESBoundary > const &') -> "bool":
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsNull(t)
Handle_IGESToBRep_IGESBoundary_IsNull = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsNull

def Handle_IGESToBRep_ToolContainer_Create() -> "opencascade::handle< IGESToBRep_ToolContainer >":
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_Create()
Handle_IGESToBRep_ToolContainer_Create = _IGESToBRep.Handle_IGESToBRep_ToolContainer_Create

def Handle_IGESToBRep_ToolContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESToBRep_ToolContainer >":
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast(t)
Handle_IGESToBRep_ToolContainer_DownCast = _IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast

def Handle_IGESToBRep_ToolContainer_IsNull(t: 'opencascade::handle< IGESToBRep_ToolContainer > const &') -> "bool":
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsNull(t)
Handle_IGESToBRep_ToolContainer_IsNull = _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsNull
class igestobrep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, igestobrep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, igestobrep, name)
    __repr__ = _swig_repr

    def AlgoContainer(*args) -> "opencascade::handle< IGESToBRep_AlgoContainer >":
        """
        Returns default algocontainer.

        Returns
        -------
        opencascade::handle<IGESToBRep_AlgoContainer>

        """
        return _IGESToBRep.igestobrep_AlgoContainer(*args)

    AlgoContainer = staticmethod(AlgoContainer)

    def IGESCurveToSequenceOfIGESCurve(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        curve: IGESData_IGESEntity
        sequence: TColStd_HSequenceOfTransient

        Returns
        -------
        int

        """
        return _IGESToBRep.igestobrep_IGESCurveToSequenceOfIGESCurve(*args)

    IGESCurveToSequenceOfIGESCurve = staticmethod(IGESCurveToSequenceOfIGESCurve)

    def Init(*args) -> "void":
        """
        Creates and initializes default algocontainer.

        Returns
        -------
        None

        """
        return _IGESToBRep.igestobrep_Init(*args)

    Init = staticmethod(Init)

    def IsBRepEntity(*args) -> "Standard_Boolean":
        """
        Return true if the igesentity can be transfered by transferbrepentity. ex: vertexlist, edgelist, loop, face, shell, manifold solid brep object from igessolid : 502, 504, 508, 510, 514, 186.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        bool

        """
        return _IGESToBRep.igestobrep_IsBRepEntity(*args)

    IsBRepEntity = staticmethod(IsBRepEntity)

    def IsBasicCurve(*args) -> "Standard_Boolean":
        """
        Return true if the igesentity can be transfered by transferbasiccurve. ex: circulararc, conicarc, line, copiousdata, bsplinecurve, splinecurve... from igesgeom : 104,110,112,126.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        bool

        """
        return _IGESToBRep.igestobrep_IsBasicCurve(*args)

    IsBasicCurve = staticmethod(IsBasicCurve)

    def IsBasicSurface(*args) -> "Standard_Boolean":
        """
        Return true if the igesentity can be transfered by transferbasicsurface. ex: bsplinesurface, splinesurface... from igesgeom : 114,128.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        bool

        """
        return _IGESToBRep.igestobrep_IsBasicSurface(*args)

    IsBasicSurface = staticmethod(IsBasicSurface)

    def IsCurveAndSurface(*args) -> "Standard_Boolean":
        """
        Return true if the igesentity can be transfered by transfercurveandsurface. ex: all igesentity from igesgeom.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        bool

        """
        return _IGESToBRep.igestobrep_IsCurveAndSurface(*args)

    IsCurveAndSurface = staticmethod(IsCurveAndSurface)

    def IsTopoCurve(*args) -> "Standard_Boolean":
        """
        Return true if the igesentity can be transfered by transfertopocurve. ex: all curves from igesgeom : all basic curves,102,130,142,144.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        bool

        """
        return _IGESToBRep.igestobrep_IsTopoCurve(*args)

    IsTopoCurve = staticmethod(IsTopoCurve)

    def IsTopoSurface(*args) -> "Standard_Boolean":
        """
        Return true if the igesentity can be transfered by transfertoposurface. ex: all surfaces from igesgeom : all basic surfaces,108,118,120,122,141,143.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        bool

        """
        return _IGESToBRep.igestobrep_IsTopoSurface(*args)

    IsTopoSurface = staticmethod(IsTopoSurface)

    def SetAlgoContainer(*args) -> "void":
        """
        Sets default algocontainer.

        Parameters
        ----------
        aContainer: IGESToBRep_AlgoContainer

        Returns
        -------
        None

        """
        return _IGESToBRep.igestobrep_SetAlgoContainer(*args)

    SetAlgoContainer = staticmethod(SetAlgoContainer)

    def TransferPCurve(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        fromedge: TopoDS_Edge
        toedge: TopoDS_Edge
        face: TopoDS_Face

        Returns
        -------
        bool

        """
        return _IGESToBRep.igestobrep_TransferPCurve(*args)

    TransferPCurve = staticmethod(TransferPCurve)

    __repr__ = _dumps_object


    def __init__(self):
        this = _IGESToBRep.new_igestobrep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESToBRep.delete_igestobrep
    __del__ = lambda self: None
igestobrep_swigregister = _IGESToBRep.igestobrep_swigregister
igestobrep_swigregister(igestobrep)

def igestobrep_AlgoContainer(*args) -> "opencascade::handle< IGESToBRep_AlgoContainer >":
    """
    Returns default algocontainer.

    Returns
    -------
    opencascade::handle<IGESToBRep_AlgoContainer>

    """
    return _IGESToBRep.igestobrep_AlgoContainer(*args)

def igestobrep_IGESCurveToSequenceOfIGESCurve(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    curve: IGESData_IGESEntity
    sequence: TColStd_HSequenceOfTransient

    Returns
    -------
    int

    """
    return _IGESToBRep.igestobrep_IGESCurveToSequenceOfIGESCurve(*args)

def igestobrep_Init(*args) -> "void":
    """
    Creates and initializes default algocontainer.

    Returns
    -------
    None

    """
    return _IGESToBRep.igestobrep_Init(*args)

def igestobrep_IsBRepEntity(*args) -> "Standard_Boolean":
    """
    Return true if the igesentity can be transfered by transferbrepentity. ex: vertexlist, edgelist, loop, face, shell, manifold solid brep object from igessolid : 502, 504, 508, 510, 514, 186.

    Parameters
    ----------
    start: IGESData_IGESEntity

    Returns
    -------
    bool

    """
    return _IGESToBRep.igestobrep_IsBRepEntity(*args)

def igestobrep_IsBasicCurve(*args) -> "Standard_Boolean":
    """
    Return true if the igesentity can be transfered by transferbasiccurve. ex: circulararc, conicarc, line, copiousdata, bsplinecurve, splinecurve... from igesgeom : 104,110,112,126.

    Parameters
    ----------
    start: IGESData_IGESEntity

    Returns
    -------
    bool

    """
    return _IGESToBRep.igestobrep_IsBasicCurve(*args)

def igestobrep_IsBasicSurface(*args) -> "Standard_Boolean":
    """
    Return true if the igesentity can be transfered by transferbasicsurface. ex: bsplinesurface, splinesurface... from igesgeom : 114,128.

    Parameters
    ----------
    start: IGESData_IGESEntity

    Returns
    -------
    bool

    """
    return _IGESToBRep.igestobrep_IsBasicSurface(*args)

def igestobrep_IsCurveAndSurface(*args) -> "Standard_Boolean":
    """
    Return true if the igesentity can be transfered by transfercurveandsurface. ex: all igesentity from igesgeom.

    Parameters
    ----------
    start: IGESData_IGESEntity

    Returns
    -------
    bool

    """
    return _IGESToBRep.igestobrep_IsCurveAndSurface(*args)

def igestobrep_IsTopoCurve(*args) -> "Standard_Boolean":
    """
    Return true if the igesentity can be transfered by transfertopocurve. ex: all curves from igesgeom : all basic curves,102,130,142,144.

    Parameters
    ----------
    start: IGESData_IGESEntity

    Returns
    -------
    bool

    """
    return _IGESToBRep.igestobrep_IsTopoCurve(*args)

def igestobrep_IsTopoSurface(*args) -> "Standard_Boolean":
    """
    Return true if the igesentity can be transfered by transfertoposurface. ex: all surfaces from igesgeom : all basic surfaces,108,118,120,122,141,143.

    Parameters
    ----------
    start: IGESData_IGESEntity

    Returns
    -------
    bool

    """
    return _IGESToBRep.igestobrep_IsTopoSurface(*args)

def igestobrep_SetAlgoContainer(*args) -> "void":
    """
    Sets default algocontainer.

    Parameters
    ----------
    aContainer: IGESToBRep_AlgoContainer

    Returns
    -------
    None

    """
    return _IGESToBRep.igestobrep_SetAlgoContainer(*args)

def igestobrep_TransferPCurve(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    fromedge: TopoDS_Edge
    toedge: TopoDS_Edge
    face: TopoDS_Face

    Returns
    -------
    bool

    """
    return _IGESToBRep.igestobrep_TransferPCurve(*args)

class IGESToBRep_Actor(OCC.Core.Transfer.Transfer_ActorOfTransientProcess):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Transfer.Transfer_ActorOfTransientProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_Actor, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Transfer.Transfer_ActorOfTransientProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_Actor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_Actor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetContinuity(self, *args) -> "Standard_Integer":
        """
        Return 'thecontinuity'.

        Returns
        -------
        int

        """
        return _IGESToBRep.IGESToBRep_Actor_GetContinuity(self, *args)


    def SetContinuity(self, *args) -> "void":
        """
        ---purpose by default continuity = 0 if continuity = 1 : try c1 if continuity = 2 : try c2.

        Parameters
        ----------
        continuity: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_Actor_SetContinuity(self, *args)


    def SetModel(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        model: Interface_InterfaceModel

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_Actor_SetModel(self, *args)


    def UsedTolerance(self, *args) -> "Standard_Real":
        """
        Returns the tolerance which was actually used, either from the file or from statics.

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_Actor_UsedTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_Actor_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Actor
    __del__ = lambda self: None
IGESToBRep_Actor_swigregister = _IGESToBRep.IGESToBRep_Actor_swigregister
IGESToBRep_Actor_swigregister(IGESToBRep_Actor)

class IGESToBRep_AlgoContainer(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_AlgoContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_AlgoContainer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_AlgoContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetToolContainer(self, *args) -> "void":
        """
        Sets toolcontainer.

        Parameters
        ----------
        TC: IGESToBRep_ToolContainer

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_SetToolContainer(self, *args)


    def ToolContainer(self, *args) -> "opencascade::handle< IGESToBRep_ToolContainer >":
        """
        Returns toolcontainer.

        Returns
        -------
        opencascade::handle<IGESToBRep_ToolContainer>

        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_ToolContainer(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_AlgoContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_AlgoContainer
    __del__ = lambda self: None
IGESToBRep_AlgoContainer_swigregister = _IGESToBRep.IGESToBRep_AlgoContainer_swigregister
IGESToBRep_AlgoContainer_swigregister(IGESToBRep_AlgoContainer)

class IGESToBRep_CurveAndSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_CurveAndSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_CurveAndSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tool curveandsurface ready to run, with epsilons set to 1.e-04, mymodetopo to true, the optimization of the continuity to false.

        Returns
        -------
        None

        Creates a tool curveandsurface ready to run.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_CurveAndSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddShapeResult(self, *args) -> "void":
        """
        Set in 'mymap' the result of the transfer of the entity of the igesentity start ( type vertexlist or edgelist).

        Parameters
        ----------
        start: IGESData_IGESEntity
        result: TopoDS_Shape

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_AddShapeResult(self, *args)


    def GetContinuity(self, *args) -> "Standard_Integer":
        """
        Returns the value of 'mycontinuity'.

        Returns
        -------
        int

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetContinuity(self, *args)


    def GetEpsCoeff(self, *args) -> "Standard_Real":
        """
        Returns the value of 'myepscoeff'.

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsCoeff(self, *args)


    def GetEpsGeom(self, *args) -> "Standard_Real":
        """
        Returns the value of 'myepsgeom'.

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsGeom(self, *args)


    def GetEpsilon(self, *args) -> "Standard_Real":
        """
        Returns the value of 'myeps'.

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsilon(self, *args)


    def GetMaxTol(self, *args) -> "Standard_Real":
        """
        Returns the value of 'mymaxtol'.

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetMaxTol(self, *args)


    def GetMinTol(self, *args) -> "Standard_Real":
        """
        Returns the value of 'mymintol'.

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetMinTol(self, *args)


    def GetModeApprox(self, *args) -> "Standard_Boolean":
        """
        Returns the value of 'mymodeapprox'.

        Returns
        -------
        bool

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModeApprox(self, *args)


    def GetModeTransfer(self, *args) -> "Standard_Boolean":
        """
        Returns the value of 'mymodeistopo'.

        Returns
        -------
        bool

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModeTransfer(self, *args)


    def GetModel(self, *args) -> "opencascade::handle< IGESData_IGESModel >":
        """
        Returns the value of 'mymodel'.

        Returns
        -------
        opencascade::handle<IGESData_IGESModel>

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModel(self, *args)


    def GetOptimized(self, *args) -> "Standard_Boolean":
        """
        Returns the value of 'mycontisopti'.

        Returns
        -------
        bool

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetOptimized(self, *args)


    def GetShapeResult(self, *args) -> "TopoDS_Shape":
        """
        Returns the result of the transfer of the igesentity 'start' contained in 'mymap' . (if hasshaperesult is true).

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        TopoDS_Shape

        Returns the numth result of the igesentity start (type vertexlist or edgelist) in 'mymap'. (if nbshaperesult is not null).

        Parameters
        ----------
        start: IGESData_IGESEntity
        num: int

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetShapeResult(self, *args)


    def GetSurfaceCurve(self, *args) -> "Standard_Integer":
        """
        Returns the value of ' mysurfacecurve' 0 = value in file , 2 = kepp 2d and compute 3d 3 = keep 3d and compute 2d.

        Returns
        -------
        int

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetSurfaceCurve(self, *args)


    def GetTransferProcess(self, *args) -> "opencascade::handle< Transfer_TransientProcess >":
        """
        Returns the value of 'mymsgreg'.

        Returns
        -------
        opencascade::handle<Transfer_TransientProcess>

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetTransferProcess(self, *args)


    def GetUVResolution(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetUVResolution(self, *args)


    def GetUnitFactor(self, *args) -> "Standard_Real":
        """
        Returns the value of ' myunitfactor'.

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetUnitFactor(self, *args)


    def HasShapeResult(self, *args) -> "Standard_Boolean":
        """
        Returns true if start was already treated and has a result in 'mymap' else returns false.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        bool

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_HasShapeResult(self, *args)


    def Init(self, *args) -> "void":
        """
        Initializes the field of the tool curveandsurface with default creating values.

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_Init(self, *args)


    def NbShapeResult(self, *args) -> "Standard_Integer":
        """
        Returns the number of shapes results contained in 'mymap' for the igesentity start ( type vertexlist or edgelist).

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        int

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_NbShapeResult(self, *args)


    def SendFail(self, *args) -> "void":
        """
        Records a new fail message.

        Parameters
        ----------
        start: IGESData_IGESEntity
        amsg: Message_Msg

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendFail(self, *args)


    def SendMsg(self, *args) -> "void":
        """
        Records a new information message from the definition of a msg (original+value).

        Parameters
        ----------
        start: IGESData_IGESEntity
        amsg: Message_Msg

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendMsg(self, *args)


    def SendWarning(self, *args) -> "void":
        """
        Records a new warning message.

        Parameters
        ----------
        start: IGESData_IGESEntity
        amsg: Message_Msg

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendWarning(self, *args)


    def SetContinuity(self, *args) -> "void":
        """
        Changes the value of 'mycontinuity' if continuity = 0 do nothing else if continuity = 1 try c1 if continuity = 2 try c2.

        Parameters
        ----------
        continuity: int

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetContinuity(self, *args)


    def SetEpsCoeff(self, *args) -> "void":
        """
        Changes the value of 'myepscoeff'.

        Parameters
        ----------
        eps: float

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsCoeff(self, *args)


    def SetEpsGeom(self, *args) -> "void":
        """
        Changes the value of 'myepsgeom'.

        Parameters
        ----------
        eps: float

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsGeom(self, *args)


    def SetEpsilon(self, *args) -> "void":
        """
        Changes the value of 'myeps'.

        Parameters
        ----------
        eps: float

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsilon(self, *args)


    def SetMaxTol(self, *args) -> "void":
        """
        Changes the value of 'mymaxtol'.

        Parameters
        ----------
        maxtol: float

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetMaxTol(self, *args)


    def SetMinTol(self, *args) -> "void":
        """
        Changes the value of 'mymintol'.

        Parameters
        ----------
        mintol: float

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetMinTol(self, *args)


    def SetModeApprox(self, *args) -> "void":
        """
        Changes the value of 'mymodeapprox'.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModeApprox(self, *args)


    def SetModeTransfer(self, *args) -> "void":
        """
        Changes the value of 'mymodeistopo'.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModeTransfer(self, *args)


    def SetModel(self, *args) -> "void":
        """
        Set the value of 'mymodel'.

        Parameters
        ----------
        model: IGESData_IGESModel

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModel(self, *args)


    def SetOptimized(self, *args) -> "void":
        """
        Changes the value of 'mycontisopti'.

        Parameters
        ----------
        optimized: bool

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetOptimized(self, *args)


    def SetShapeResult(self, *args) -> "void":
        """
        Set in 'mymap' the result of the transfer of the igesentity 'start'.

        Parameters
        ----------
        start: IGESData_IGESEntity
        result: TopoDS_Shape

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetShapeResult(self, *args)


    def SetSurface(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theSurface: Geom_Surface

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetSurface(self, *args)


    def SetSurfaceCurve(self, *args) -> "void":
        """
        Changes the value of 'mysurfacecurve'.

        Parameters
        ----------
        ival: int

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetSurfaceCurve(self, *args)


    def SetTransferProcess(self, *args) -> "void":
        """
        Set the value of 'mymsgreg'.

        Parameters
        ----------
        TP: Transfer_TransientProcess

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetTransferProcess(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_Surface(self, *args)


    def TransferCurveAndSurface(self, *args) -> "TopoDS_Shape":
        """
        Returns the result of the transfert of any iges curve or surface entity. if the transfer has failed, this member return a nullentity.

        Parameters
        ----------
        start: IGESData_IGESEntity
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_TransferCurveAndSurface(self, *args)


    def TransferGeometry(self, *args) -> "TopoDS_Shape":
        """
        Returns the result of the transfert the geometry of any igesentity. if the transfer has failed, this member return a nullentity.

        Parameters
        ----------
        start: IGESData_IGESEntity
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_TransferGeometry(self, *args)


    def UpdateMinMaxTol(self, *args) -> "void":
        """
        Sets values of 'mymintol' and 'mymaxtol' as follows mymaxtol = max ('read.maxprecision.val', myepsgeom * myunitfactor) mymintol = precision::confusion() remark: this method is automatically invoked each time the values of 'myepsgeom' or 'myunitfactor' are changed.

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_UpdateMinMaxTol(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_CurveAndSurface
    __del__ = lambda self: None
IGESToBRep_CurveAndSurface_swigregister = _IGESToBRep.IGESToBRep_CurveAndSurface_swigregister
IGESToBRep_CurveAndSurface_swigregister(IGESToBRep_CurveAndSurface)

class IGESToBRep_IGESBoundary(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_IGESBoundary, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_IGESBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        Empty constructor.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_IGESBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Check(self, *args) -> "void":
        """
        Checks result of translation of iges boundary entities (types 141, 142 or 508). checks consistency of 2d and 3d representations and keeps only one if they are inconsistent. <result>: result of translation (returned by transfer), <checkclosure>: false for 142 without parent 144 entity, otherwise true, <okcurve3d>, <okcurve2d>: those returned by transfer.

        Parameters
        ----------
        result: bool
        checkclosure: bool
        okCurve3d: bool
        okCurve2d: bool

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Check(self, *args)


    def Init(self, *args) -> "void":
        """
        Inits the object with parameters common for all types of iges boundaries. <cs>: object to be used for retrieving translation parameters and sending messages, <entity>: boundary entity to be processed, <face>, <trans>, <ufact>: as for igestobrep_topocurve <filepreference>: preferred representation (2 or 3) given in the iges file.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface
        entity: IGESData_IGESEntity
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float
        filepreference: int

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Init(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        Translates 141 and 142 entities. returns true if the curve has been successfully translated, otherwise returns false. <okcurve..>: flags that indicate whether corresponding representation has been successfully translated (must be set to true before first call), <curve3d>: model space curve for 142 and current model space curve for 141, <toreverse3d>: false for 142 and current orientation flag for 141, <curves2d>: 1 parameter space curve for 142 or list of them for current model space curves for 141, <number>: 1 for 142 and rank number of model space curve for 141.

        Parameters
        ----------
        curve3d: IGESData_IGESEntity
        toreverse3d: bool
        curves2d: IGESData_HArray1OfIGESEntity
        number: int

        Returns
        -------
        okCurve: bool
        okCurve3d: bool
        okCurve2d: bool

        Translates 508 entity. returns true if the curve has been successfully translated, otherwise returns false. input object igesboundary must be created and initialized before. <okcurve..>: flags that indicate whether corresponding representation has been successfully translated (must be set to true before first call), <curve3d>: result of translation of current edge, <curves2d>: list of parameter space curves for edge, <toreverse2d>: orientation flag of current edge in respect to its model space curve, <number>: rank number of edge, <lsewd>: returns the result of translation of current edge.

        Parameters
        ----------
        curve3d: ShapeExtend_WireData
        curves2d: IGESData_HArray1OfIGESEntity
        toreverse2d: bool
        number: int
        lsewd: ShapeExtend_WireData

        Returns
        -------
        okCurve: bool
        okCurve3d: bool
        okCurve2d: bool

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Transfer(self, *args)


    def WireData(self, *args) -> "opencascade::handle< ShapeExtend_WireData >":
        """
        Returns the resulting wire.

        Returns
        -------
        opencascade::handle<ShapeExtend_WireData>

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData(self, *args)


    def WireData2d(self, *args) -> "opencascade::handle< ShapeExtend_WireData >":
        """
        Returns the the wire from 2d curves (edges contain pcurves only).

        Returns
        -------
        opencascade::handle<ShapeExtend_WireData>

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData2d(self, *args)


    def WireData3d(self, *args) -> "opencascade::handle< ShapeExtend_WireData >":
        """
        Returns the wire from 3d curves (edges contain 3d curves and may contain pcurves).

        Returns
        -------
        opencascade::handle<ShapeExtend_WireData>

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData3d(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_IGESBoundary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_IGESBoundary
    __del__ = lambda self: None
IGESToBRep_IGESBoundary_swigregister = _IGESToBRep.IGESToBRep_IGESBoundary_swigregister
IGESToBRep_IGESBoundary_swigregister(IGESToBRep_IGESBoundary)

class IGESToBRep_Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_Reader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a reader.

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_Reader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Actor(self, *args) -> "opencascade::handle< IGESToBRep_Actor >":
        """
        Returns 'theactor'.

        Returns
        -------
        opencascade::handle<IGESToBRep_Actor>

        """
        return _IGESToBRep.IGESToBRep_Reader_Actor(self, *args)


    def Check(self, *args) -> "Standard_Boolean":
        """
        Checks the iges file that was loaded into memory. displays error messages in the default message file if withprint is true. returns true if no fail message was found and false if there was at least one fail message.

        Parameters
        ----------
        withprint: bool

        Returns
        -------
        bool

        """
        return _IGESToBRep.IGESToBRep_Reader_Check(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the results between two translation operations.

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_Reader_Clear(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns true if the last transfer/transferroots was a success.

        Returns
        -------
        bool

        """
        return _IGESToBRep.IGESToBRep_Reader_IsDone(self, *args)


    def LoadFile(self, *args) -> "Standard_Integer":
        """
        Loads a model from a file.returns 0 if success. returns 1 if the file could not be opened, returns -1 if an error occurred while the file was being loaded.

        Parameters
        ----------
        filename: char *

        Returns
        -------
        int

        """
        return _IGESToBRep.IGESToBRep_Reader_LoadFile(self, *args)


    def Model(self, *args) -> "opencascade::handle< IGESData_IGESModel >":
        """
        Returns the model to be worked on.

        Returns
        -------
        opencascade::handle<IGESData_IGESModel>

        """
        return _IGESToBRep.IGESToBRep_Reader_Model(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """
        Returns the number of shapes produced by the translation.

        Returns
        -------
        int

        """
        return _IGESToBRep.IGESToBRep_Reader_NbShapes(self, *args)


    def OneShape(self, *args) -> "TopoDS_Shape":
        """
        Returns all of the results in a single shape which is: - a null shape if there are no results, - a shape if there is one result, - a compound containing the resulting shapes if there are several.

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_Reader_OneShape(self, *args)


    def SetModel(self, *args) -> "void":
        """
        Specifies a model to work on also clears the result and done status, sets transientprocess.

        Parameters
        ----------
        model: IGESData_IGESModel

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_Reader_SetModel(self, *args)


    def SetTransientProcess(self, *args) -> "void":
        """
        Allows to set an already defined transientprocess (to be called after loadfile or setmodel).

        Parameters
        ----------
        TP: Transfer_TransientProcess

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_Reader_SetTransientProcess(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        Returns the num the resulting shape in a translation operation.

        Parameters
        ----------
        num: int,optional
        	default value is 1

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_Reader_Shape(self, *args)


    def Transfer(self, *args) -> "Standard_Boolean":
        """
        Transfers an entity given its rank in the model (root or not) returns true if it is recognized as geom-topol. (but it can have failed : see isdone).

        Parameters
        ----------
        num: int
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        bool

        """
        return _IGESToBRep.IGESToBRep_Reader_Transfer(self, *args)


    def TransferRoots(self, *args) -> "void":
        """
        Translates root entities in an iges file. standard_true is the default value and means that only visible root entities are translated. standard_false translates all of the roots (visible and invisible).

        Parameters
        ----------
        onlyvisible: bool,optional
        	default value is Standard_True
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_Reader_TransferRoots(self, *args)


    def TransientProcess(self, *args) -> "opencascade::handle< Transfer_TransientProcess >":
        """
        Returns the transientprocess.

        Returns
        -------
        opencascade::handle<Transfer_TransientProcess>

        """
        return _IGESToBRep.IGESToBRep_Reader_TransientProcess(self, *args)


    def UsedTolerance(self, *args) -> "Standard_Real":
        """
        Returns the tolerance which has been actually used, converted in millimeters (either that from file or that from session, according the mode).

        Returns
        -------
        float

        """
        return _IGESToBRep.IGESToBRep_Reader_UsedTolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Reader
    __del__ = lambda self: None
IGESToBRep_Reader_swigregister = _IGESToBRep.IGESToBRep_Reader_swigregister
IGESToBRep_Reader_swigregister(IGESToBRep_Reader)

class IGESToBRep_ToolContainer(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_ToolContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_ToolContainer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_ToolContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IGESBoundary(self, *args) -> "opencascade::handle< IGESToBRep_IGESBoundary >":
        """
        Returns igestobrep_igesboundary.

        Returns
        -------
        opencascade::handle<IGESToBRep_IGESBoundary>

        """
        return _IGESToBRep.IGESToBRep_ToolContainer_IGESBoundary(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IGESToBRep_ToolContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_ToolContainer
    __del__ = lambda self: None
IGESToBRep_ToolContainer_swigregister = _IGESToBRep.IGESToBRep_ToolContainer_swigregister
IGESToBRep_ToolContainer_swigregister(IGESToBRep_ToolContainer)

class IGESToBRep_BRepEntity(IGESToBRep_CurveAndSurface):
    __swig_setmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_BRepEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_BRepEntity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tool brepentity ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Returns
        -------
        None

        Creates a tool brepentity ready to run and sets its fields as cs's.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Returns
        -------
        None

        Creates a tool brepentity ready to run.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_BRepEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferBRepEntity(self, *args) -> "TopoDS_Shape":
        """
        Transfer the brepentity' : face, shell or manifoldsolid.

        Parameters
        ----------
        start: IGESData_IGESEntity
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferBRepEntity(self, *args)


    def TransferEdge(self, *args) -> "TopoDS_Shape":
        """
        Transfer the entity number 'index' of the edgelist 'start'.

        Parameters
        ----------
        start: IGESSolid_EdgeList
        index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferEdge(self, *args)


    def TransferFace(self, *args) -> "TopoDS_Shape":
        """
        Transfer the face entity.

        Parameters
        ----------
        start: IGESSolid_Face

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferFace(self, *args)


    def TransferLoop(self, *args) -> "TopoDS_Shape":
        """
        Transfer the loop entity.

        Parameters
        ----------
        start: IGESSolid_Loop
        Face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferLoop(self, *args)


    def TransferManifoldSolid(self, *args) -> "TopoDS_Shape":
        """
        Transfer the manifoldsolid entity.

        Parameters
        ----------
        start: IGESSolid_ManifoldSolid
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferManifoldSolid(self, *args)


    def TransferShell(self, *args) -> "TopoDS_Shape":
        """
        Transfer the shell entity.

        Parameters
        ----------
        start: IGESSolid_Shell
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferShell(self, *args)


    def TransferVertex(self, *args) -> "TopoDS_Vertex":
        """
        Transfer the entity number 'index' of the vertexlist 'start'.

        Parameters
        ----------
        start: IGESSolid_VertexList
        index: int

        Returns
        -------
        TopoDS_Vertex

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferVertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BRepEntity
    __del__ = lambda self: None
IGESToBRep_BRepEntity_swigregister = _IGESToBRep.IGESToBRep_BRepEntity_swigregister
IGESToBRep_BRepEntity_swigregister(IGESToBRep_BRepEntity)

class IGESToBRep_BasicCurve(IGESToBRep_CurveAndSurface):
    __swig_setmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_BasicCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_BasicCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tool basiccurve ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Returns
        -------
        None

        Creates a tool basiccurve ready to run and sets its fields as cs's.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Returns
        -------
        None

        Creates a tool basiccurve ready to run.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_BasicCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Transfer2dBSplineCurve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_BSplineCurve

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBSplineCurve(self, *args)


    def Transfer2dBasicCurve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        Transfert a igesentity which answer true to the member : igestobrep::isbasiccurve(igesentity). the igesentity must be a curve uv and its associed trsf must be planar .if this entity could not be converted, this member returns a nullentity.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBasicCurve(self, *args)


    def Transfer2dCircularArc(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_CircularArc

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCircularArc(self, *args)


    def Transfer2dConicArc(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_ConicArc

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dConicArc(self, *args)


    def Transfer2dCopiousData(self, *args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_CopiousData

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCopiousData(self, *args)


    def Transfer2dLine(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_Line

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dLine(self, *args)


    def Transfer2dSplineCurve(self, *args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_SplineCurve

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dSplineCurve(self, *args)


    def TransferBSplineCurve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_BSplineCurve

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferBSplineCurve(self, *args)


    def TransferBasicCurve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        Transfert a igesentity which answer true to the member : igestobrep::isbasiccurve(igesentity). if this entity could not be converted, this member returns a nullentity.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferBasicCurve(self, *args)


    def TransferCircularArc(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_CircularArc

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferCircularArc(self, *args)


    def TransferConicArc(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_ConicArc

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferConicArc(self, *args)


    def TransferCopiousData(self, *args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_CopiousData

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferCopiousData(self, *args)


    def TransferLine(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_Line

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferLine(self, *args)


    def TransferSplineCurve(self, *args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_SplineCurve

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferSplineCurve(self, *args)


    def TransferTransformation(self, *args) -> "opencascade::handle< Geom_Transformation >":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_TransformationMatrix

        Returns
        -------
        opencascade::handle<Geom_Transformation>

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferTransformation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicCurve
    __del__ = lambda self: None
IGESToBRep_BasicCurve_swigregister = _IGESToBRep.IGESToBRep_BasicCurve_swigregister
IGESToBRep_BasicCurve_swigregister(IGESToBRep_BasicCurve)

class IGESToBRep_BasicSurface(IGESToBRep_CurveAndSurface):
    __swig_setmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_BasicSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_BasicSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tool basicsurface ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Returns
        -------
        None

        Creates a tool basicsurface ready to run and sets its fields as cs's.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Returns
        -------
        None

        Creates a tool basicsurface ready to run.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_BasicSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferBSplineSurface(self, *args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        Returns bsplinesurface from geom if the transfer has succeded.

        Parameters
        ----------
        start: IGESGeom_BSplineSurface

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferBSplineSurface(self, *args)


    def TransferBasicSurface(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        Returns surface from geom if the last transfer has succeded.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferBasicSurface(self, *args)


    def TransferPlaneSurface(self, *args) -> "opencascade::handle< Geom_Plane >":
        """
        Returns plane from geom if the transfer has succeded.

        Parameters
        ----------
        start: IGESSolid_PlaneSurface

        Returns
        -------
        opencascade::handle<Geom_Plane>

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferPlaneSurface(self, *args)


    def TransferRigthConicalSurface(self, *args) -> "opencascade::handle< Geom_ConicalSurface >":
        """
        Returns conicalsurface from geom if the transfer has succeded.

        Parameters
        ----------
        start: IGESSolid_ConicalSurface

        Returns
        -------
        opencascade::handle<Geom_ConicalSurface>

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferRigthConicalSurface(self, *args)


    def TransferRigthCylindricalSurface(self, *args) -> "opencascade::handle< Geom_CylindricalSurface >":
        """
        Returns cylindricalsurface from geom if the transfer has succeded.

        Parameters
        ----------
        start: IGESSolid_CylindricalSurface

        Returns
        -------
        opencascade::handle<Geom_CylindricalSurface>

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferRigthCylindricalSurface(self, *args)


    def TransferSphericalSurface(self, *args) -> "opencascade::handle< Geom_SphericalSurface >":
        """
        Returns sphericalsurface from geom if the transfer has succeded.

        Parameters
        ----------
        start: IGESSolid_SphericalSurface

        Returns
        -------
        opencascade::handle<Geom_SphericalSurface>

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferSphericalSurface(self, *args)


    def TransferSplineSurface(self, *args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        Returns bsplinesurface from geom if the transfer has succeded.

        Parameters
        ----------
        start: IGESGeom_SplineSurface

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferSplineSurface(self, *args)


    def TransferToroidalSurface(self, *args) -> "opencascade::handle< Geom_ToroidalSurface >":
        """
        Returns sphericalsurface from geom if the transfer has succeded.

        Parameters
        ----------
        start: IGESSolid_ToroidalSurface

        Returns
        -------
        opencascade::handle<Geom_ToroidalSurface>

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferToroidalSurface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicSurface
    __del__ = lambda self: None
IGESToBRep_BasicSurface_swigregister = _IGESToBRep.IGESToBRep_BasicSurface_swigregister
IGESToBRep_BasicSurface_swigregister(IGESToBRep_BasicSurface)

class IGESToBRep_TopoCurve(IGESToBRep_CurveAndSurface):
    __swig_setmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_TopoCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_TopoCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tool topocurve ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Returns
        -------
        None

        Creates a tool topocurve ready to run and sets its fields as cs's.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Returns
        -------
        None

        Creates a tool topocurve ready to run and sets its fields as cs's.

        Parameters
        ----------
        CS: IGESToBRep_TopoCurve

        Returns
        -------
        None

        Creates a tool topocurve ready to run.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_TopoCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Approx2dBSplineCurve(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        start: Geom2d_BSplineCurve

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Approx2dBSplineCurve(self, *args)


    def ApproxBSplineCurve(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        start: Geom_BSplineCurve

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_ApproxBSplineCurve(self, *args)


    def BadCase(self, *args) -> "Standard_Boolean":
        """
        Returns thebadcase flag.

        Returns
        -------
        bool

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_BadCase(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        Returns a curve given its rank, by default the first one (null curvee if out of range) in 'thecurves'.

        Parameters
        ----------
        num: int,optional
        	default value is 1

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Curve(self, *args)


    def Curve2d(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        Returns a curve given its rank, by default the first one (null curvee if out of range) in 'thecurves2d'.

        Parameters
        ----------
        num: int,optional
        	default value is 1

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Curve2d(self, *args)


    def NbCurves(self, *args) -> "Standard_Integer":
        """
        Returns the count of curves in 'thecurves'.

        Returns
        -------
        int

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_NbCurves(self, *args)


    def NbCurves2d(self, *args) -> "Standard_Integer":
        """
        Returns the count of curves in 'thecurves2d'.

        Returns
        -------
        int

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_NbCurves2d(self, *args)


    def SetBadCase(self, *args) -> "void":
        """
        Sets thebadcase flag.

        Parameters
        ----------
        value: bool

        Returns
        -------
        None

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_SetBadCase(self, *args)


    def Transfer2dCompositeCurve(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_CompositeCurve
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dCompositeCurve(self, *args)


    def Transfer2dOffsetCurve(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_OffsetCurve
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dOffsetCurve(self, *args)


    def Transfer2dPoint(self, *args) -> "TopoDS_Vertex":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_Point

        Returns
        -------
        TopoDS_Vertex

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dPoint(self, *args)


    def Transfer2dTopoBasicCurve(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESData_IGESEntity
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoBasicCurve(self, *args)


    def Transfer2dTopoCurve(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESData_IGESEntity
        face: TopoDS_Face
        trans: gp_Trsf2d
        uFact: float

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoCurve(self, *args)


    def TransferBoundary(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_Boundary

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferBoundary(self, *args)


    def TransferBoundaryOnFace(self, *args) -> "TopoDS_Shape":
        """
        Transfers a boundary directly on a face to trim it.

        Parameters
        ----------
        face: TopoDS_Face
        start: IGESGeom_Boundary
        trans: gp_Trsf2d
        uFact: float

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferBoundaryOnFace(self, *args)


    def TransferCompositeCurve(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_CompositeCurve

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCompositeCurve(self, *args)


    def TransferCurveOnFace(self, *args) -> "TopoDS_Shape":
        """
        Transfers a curveonsurface directly on a face to trim it. the curveonsurface have to be defined outer or inner.

        Parameters
        ----------
        face: TopoDS_Face
        start: IGESGeom_CurveOnSurface
        trans: gp_Trsf2d
        uFact: float
        IsCurv: bool

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnFace(self, *args)


    def TransferCurveOnSurface(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_CurveOnSurface

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnSurface(self, *args)


    def TransferOffsetCurve(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_OffsetCurve

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferOffsetCurve(self, *args)


    def TransferPoint(self, *args) -> "TopoDS_Vertex":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_Point

        Returns
        -------
        TopoDS_Vertex

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferPoint(self, *args)


    def TransferTopoBasicCurve(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferTopoBasicCurve(self, *args)


    def TransferTopoCurve(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferTopoCurve(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoCurve
    __del__ = lambda self: None
IGESToBRep_TopoCurve_swigregister = _IGESToBRep.IGESToBRep_TopoCurve_swigregister
IGESToBRep_TopoCurve_swigregister(IGESToBRep_TopoCurve)

class IGESToBRep_TopoSurface(IGESToBRep_CurveAndSurface):
    __swig_setmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESToBRep_TopoSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [IGESToBRep_CurveAndSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESToBRep_TopoSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a tool toposurface ready to run, with epsilons set to 1.e-04, themodetopo to true, the optimization of the continuity to false.

        Returns
        -------
        None

        Creates a tool toposurface ready to run and sets its fields as cs's.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Returns
        -------
        None

        Creates a tool toposurface ready to run.

        Parameters
        ----------
        eps: float
        epsGeom: float
        epsCoeff: float
        mode: bool
        modeapprox: bool
        optimized: bool

        Returns
        -------
        None

        """
        this = _IGESToBRep.new_IGESToBRep_TopoSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ParamSurface(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESData_IGESEntity
        trans: gp_Trsf2d

        Returns
        -------
        uFact: float

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_ParamSurface(self, *args)


    def TransferBoundedSurface(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_BoundedSurface

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferBoundedSurface(self, *args)


    def TransferOffsetSurface(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_OffsetSurface

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferOffsetSurface(self, *args)


    def TransferPerforate(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESBasic_SingleParent

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferPerforate(self, *args)


    def TransferPlane(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_Plane

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferPlane(self, *args)


    def TransferRuledSurface(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_RuledSurface

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferRuledSurface(self, *args)


    def TransferSurfaceOfRevolution(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_SurfaceOfRevolution

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferSurfaceOfRevolution(self, *args)


    def TransferTabulatedCylinder(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_TabulatedCylinder

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTabulatedCylinder(self, *args)


    def TransferTopoBasicSurface(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTopoBasicSurface(self, *args)


    def TransferTopoSurface(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESData_IGESEntity

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTopoSurface(self, *args)


    def TransferTrimmedSurface(self, *args) -> "TopoDS_Shape":
        """
        No available documentation.

        Parameters
        ----------
        start: IGESGeom_TrimmedSurface

        Returns
        -------
        TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTrimmedSurface(self, *args)


    __repr__ = _dumps_object

    @methodnotwrapped
    def TransferPlaneSurface(self):
    	pass

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoSurface
    __del__ = lambda self: None
IGESToBRep_TopoSurface_swigregister = _IGESToBRep.IGESToBRep_TopoSurface_swigregister
IGESToBRep_TopoSurface_swigregister(IGESToBRep_TopoSurface)



# This file is compatible with both classic and new-style classes.


