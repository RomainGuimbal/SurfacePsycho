# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
BinMNaming module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_binmnaming.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BinMNaming
else:
    import _BinMNaming

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMNaming.delete_SwigPyIterator

    def value(self):
        return _BinMNaming.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinMNaming.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinMNaming.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinMNaming.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinMNaming.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinMNaming.SwigPyIterator_copy(self)

    def next(self):
        return _BinMNaming.SwigPyIterator_next(self)

    def __next__(self):
        return _BinMNaming.SwigPyIterator___next__(self)

    def previous(self):
        return _BinMNaming.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinMNaming.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinMNaming.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinMNaming.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinMNaming.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinMNaming.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinMNaming.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinMNaming.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BinMNaming:
_BinMNaming.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BinMNaming.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BinMDF
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage
import OCC.Core.BinTools
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Geom2d
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BinMNaming_NamedShapeDriver_Create():
    return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_Create()

def Handle_BinMNaming_NamedShapeDriver_DownCast(t):
    return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_DownCast(t)

def Handle_BinMNaming_NamedShapeDriver_IsNull(t):
    return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_IsNull(t)

def Handle_BinMNaming_NamingDriver_Create():
    return _BinMNaming.Handle_BinMNaming_NamingDriver_Create()

def Handle_BinMNaming_NamingDriver_DownCast(t):
    return _BinMNaming.Handle_BinMNaming_NamingDriver_DownCast(t)

def Handle_BinMNaming_NamingDriver_IsNull(t):
    return _BinMNaming.Handle_BinMNaming_NamingDriver_IsNull(t)
class binmnaming(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AddDrivers(*args):
        r"""

        Parameters
        ----------
        theDriverTable: BinMDF_ADriverTable
        aMsgDrv: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        Adds the attribute drivers to <thedrivertable>.

        """
        return _BinMNaming.binmnaming_AddDrivers(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _BinMNaming.binmnaming_swiginit(self, _BinMNaming.new_binmnaming())
    __swig_destroy__ = _BinMNaming.delete_binmnaming

# Register binmnaming in _BinMNaming:
_BinMNaming.binmnaming_swigregister(binmnaming)
class BinMNaming_NamedShapeDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BinMNaming.BinMNaming_NamedShapeDriver_swiginit(self, _BinMNaming.new_BinMNaming_NamedShapeDriver(*args))

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clear myshapeset.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_Clear(self, *args)

    def EnableQuickPart(self, *args):
        r"""

        Parameters
        ----------
        theValue: bool

        Return
        -------
        None

        Description
        -----------
        Sets the flag for quick part of the document access: shapes are stored in the attribute.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_EnableQuickPart(self, *args)

    def GetShapesLocations(self, *args):
        r"""
        Return
        -------
        BinTools_LocationSet

        Description
        -----------
        Get the shapes locations.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_GetShapesLocations(self, *args)

    def IsQuickPart(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if quick part of the document access is enabled: shapes are stored in the attribute.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_IsQuickPart(self, *args)

    def IsWithNormals(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if shape should be stored with triangulation normals.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_IsWithNormals(self, *args)

    def IsWithTriangles(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if shape should be stored with triangles.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_IsWithTriangles(self, *args)

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_Paste(self, *args)

    def ReadShapeSectionFromString(self, src):
        r"""ReadShapeSectionFromString(BinMNaming_NamedShapeDriver self, std::string src)"""
        return _BinMNaming.BinMNaming_NamedShapeDriver_ReadShapeSectionFromString(self, src)

    def SetWithNormals(self, *args):
        r"""

        Parameters
        ----------
        isWithNormals: bool

        Return
        -------
        None

        Description
        -----------
        Set whether to store triangulation with normals.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_SetWithNormals(self, *args)

    def SetWithTriangles(self, *args):
        r"""

        Parameters
        ----------
        isWithTriangles: bool

        Return
        -------
        None

        Description
        -----------
        Set whether to store triangulation.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_SetWithTriangles(self, *args)

    def ShapeSet(self, *args):
        r"""

        Parameters
        ----------
        theReading: bool

        Return
        -------
        BinTools_ShapeSetBase *

        Description
        -----------
        Returns shape-set of the needed type.

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_ShapeSet(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BinMNaming_NamedShapeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMNaming.delete_BinMNaming_NamedShapeDriver

# Register BinMNaming_NamedShapeDriver in _BinMNaming:
_BinMNaming.BinMNaming_NamedShapeDriver_swigregister(BinMNaming_NamedShapeDriver)
class BinMNaming_NamingDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _BinMNaming.BinMNaming_NamingDriver_swiginit(self, _BinMNaming.new_BinMNaming_NamingDriver(*args))

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _BinMNaming.BinMNaming_NamingDriver_Paste(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BinMNaming_NamingDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMNaming.delete_BinMNaming_NamingDriver

# Register BinMNaming_NamingDriver in _BinMNaming:
_BinMNaming.BinMNaming_NamingDriver_swigregister(BinMNaming_NamingDriver)



@deprecated
def binmnaming_AddDrivers(*args):
	return binmnaming.AddDrivers(*args)



