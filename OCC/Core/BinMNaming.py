# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinMNaming module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_binmnaming.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMNaming')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMNaming')
    _BinMNaming = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMNaming', [dirname(__file__)])
        except ImportError:
            import _BinMNaming
            return _BinMNaming
        try:
            _mod = imp.load_module('_BinMNaming', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMNaming = swig_import_helper()
    del swig_import_helper
else:
    import _BinMNaming
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMNaming.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BinMNaming.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinMNaming.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinMNaming.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BinMNaming.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BinMNaming.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BinMNaming.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BinMNaming.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BinMNaming.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BinMNaming.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinMNaming.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BinMNaming.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BinMNaming.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinMNaming.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinMNaming.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinMNaming.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BinMNaming.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMNaming.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinMNaming.process_exception(error, method_name, class_name)
process_exception = _BinMNaming.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BinMDF
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage
import OCC.Core.BinTools
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Geom2d
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BinMNaming_NamedShapeDriver_Create() -> "opencascade::handle< BinMNaming_NamedShapeDriver >":
    return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_Create()
Handle_BinMNaming_NamedShapeDriver_Create = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_Create

def Handle_BinMNaming_NamedShapeDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMNaming_NamedShapeDriver >":
    return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_DownCast(t)
Handle_BinMNaming_NamedShapeDriver_DownCast = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_DownCast

def Handle_BinMNaming_NamedShapeDriver_IsNull(t: 'opencascade::handle< BinMNaming_NamedShapeDriver > const &') -> "bool":
    return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_IsNull(t)
Handle_BinMNaming_NamedShapeDriver_IsNull = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_IsNull

def Handle_BinMNaming_NamingDriver_Create() -> "opencascade::handle< BinMNaming_NamingDriver >":
    return _BinMNaming.Handle_BinMNaming_NamingDriver_Create()
Handle_BinMNaming_NamingDriver_Create = _BinMNaming.Handle_BinMNaming_NamingDriver_Create

def Handle_BinMNaming_NamingDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMNaming_NamingDriver >":
    return _BinMNaming.Handle_BinMNaming_NamingDriver_DownCast(t)
Handle_BinMNaming_NamingDriver_DownCast = _BinMNaming.Handle_BinMNaming_NamingDriver_DownCast

def Handle_BinMNaming_NamingDriver_IsNull(t: 'opencascade::handle< BinMNaming_NamingDriver > const &') -> "bool":
    return _BinMNaming.Handle_BinMNaming_NamingDriver_IsNull(t)
Handle_BinMNaming_NamingDriver_IsNull = _BinMNaming.Handle_BinMNaming_NamingDriver_IsNull
class binmnaming(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, binmnaming, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, binmnaming, name)
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        Adds the attribute drivers to <thedrivertable>.

        Parameters
        ----------
        theDriverTable: BinMDF_ADriverTable
        aMsgDrv: Message_Messenger

        Returns
        -------
        None

        """
        return _BinMNaming.binmnaming_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    __repr__ = _dumps_object


    def __init__(self):
        this = _BinMNaming.new_binmnaming()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMNaming.delete_binmnaming
    __del__ = lambda self: None
binmnaming_swigregister = _BinMNaming.binmnaming_swigregister
binmnaming_swigregister(binmnaming)

def binmnaming_AddDrivers(*args) -> "void":
    """
    Adds the attribute drivers to <thedrivertable>.

    Parameters
    ----------
    theDriverTable: BinMDF_ADriverTable
    aMsgDrv: Message_Messenger

    Returns
    -------
    None

    """
    return _BinMNaming.binmnaming_AddDrivers(*args)

class BinMNaming_NamedShapeDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMNaming_NamedShapeDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMNaming_NamedShapeDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _BinMNaming.new_BinMNaming_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args) -> "void":
        """
        Clear myshapeset.

        Returns
        -------
        None

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_Clear(self, *args)


    def GetFormatNb(self, *args) -> "Standard_Integer":
        """
        Get the format of topology.

        Returns
        -------
        int

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_GetFormatNb(self, *args)


    def GetShapesLocations(self, *args) -> "BinTools_LocationSet &":
        """
        Get the format of topology.

        Returns
        -------
        BinTools_LocationSet

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_GetShapesLocations(self, *args)


    def IsWithTriangles(self, *args) -> "Standard_Boolean":
        """
        Return true if shape should be stored with triangles.

        Returns
        -------
        bool

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_IsWithTriangles(self, *args)


    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_Paste(self, *args)


    def ReadShapeSectionFromString(self, src: 'std::string') -> "void":
        """ReadShapeSectionFromString(BinMNaming_NamedShapeDriver self, std::string src)"""
        return _BinMNaming.BinMNaming_NamedShapeDriver_ReadShapeSectionFromString(self, src)


    def SetFormatNb(self, *args) -> "void":
        """
        Set the format of topology first : does not write curveonsurface uv points into the file on reading calls check() method. second: stores curveonsurface uv points.

        Parameters
        ----------
        theFormat: int

        Returns
        -------
        None

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_SetFormatNb(self, *args)


    def SetWithTriangles(self, *args) -> "void":
        """
        Set whether to store triangulation.

        Parameters
        ----------
        isWithTriangles: bool

        Returns
        -------
        None

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_SetWithTriangles(self, *args)


    def WriteShapeSectionToString(self) -> "std::string":
        """WriteShapeSectionToString(BinMNaming_NamedShapeDriver self) -> std::string"""
        return _BinMNaming.BinMNaming_NamedShapeDriver_WriteShapeSectionToString(self)



    @staticmethod
    def DownCast(t):
      return Handle_BinMNaming_NamedShapeDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMNaming.delete_BinMNaming_NamedShapeDriver
    __del__ = lambda self: None
BinMNaming_NamedShapeDriver_swigregister = _BinMNaming.BinMNaming_NamedShapeDriver_swigregister
BinMNaming_NamedShapeDriver_swigregister(BinMNaming_NamedShapeDriver)

class BinMNaming_NamingDriver(OCC.Core.BinMDF.BinMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMNaming_NamingDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.BinMDF.BinMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMNaming_NamingDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _BinMNaming.new_BinMNaming_NamingDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMNaming.BinMNaming_NamingDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMNaming_NamingDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMNaming.delete_BinMNaming_NamingDriver
    __del__ = lambda self: None
BinMNaming_NamingDriver_swigregister = _BinMNaming.BinMNaming_NamingDriver_swigregister
BinMNaming_NamingDriver_swigregister(BinMNaming_NamingDriver)



# This file is compatible with both classic and new-style classes.


