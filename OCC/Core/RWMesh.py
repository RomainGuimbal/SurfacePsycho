# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWMesh module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwmesh.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWMesh')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWMesh')
    _RWMesh = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWMesh', [dirname(__file__)])
        except ImportError:
            import _RWMesh
            return _RWMesh
        try:
            _mod = imp.load_module('_RWMesh', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWMesh = swig_import_helper()
    del swig_import_helper
else:
    import _RWMesh
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWMesh.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _RWMesh.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWMesh.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWMesh.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _RWMesh.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _RWMesh.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _RWMesh.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _RWMesh.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _RWMesh.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _RWMesh.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWMesh.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _RWMesh.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _RWMesh.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWMesh.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWMesh.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWMesh.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _RWMesh.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWMesh.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWMesh.process_exception(error, method_name, class_name)
process_exception = _RWMesh.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.gp
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.Aspect
import OCC.Core.Image
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.Media
import OCC.Core.XCAFPrs
import OCC.Core.AIS
import OCC.Core.SelectMgr
import OCC.Core.Select3D
import OCC.Core.SelectBasics
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.V3d
import OCC.Core.StdSelect
import OCC.Core.XCAFDoc
import OCC.Core.TDataStd
import OCC.Core.XCAFDimTolObjects
import OCC.Core.XCAFNoteObjects
import OCC.Core.TopTools
import OCC.Core.XCAFView
import OCC.Core.TPrsStd
import OCC.Core.TDataXtd
import OCC.Core.TNaming

from enum import IntEnum
from OCC.Core.Exception import *

RWMesh_CoordinateSystem_Undefined = _RWMesh.RWMesh_CoordinateSystem_Undefined
RWMesh_CoordinateSystem_posYfwd_posZup = _RWMesh.RWMesh_CoordinateSystem_posYfwd_posZup
RWMesh_CoordinateSystem_negZfwd_posYup = _RWMesh.RWMesh_CoordinateSystem_negZfwd_posYup
RWMesh_CoordinateSystem_Blender = _RWMesh.RWMesh_CoordinateSystem_Blender
RWMesh_CoordinateSystem_glTF = _RWMesh.RWMesh_CoordinateSystem_glTF
RWMesh_CoordinateSystem_Zup = _RWMesh.RWMesh_CoordinateSystem_Zup
RWMesh_CoordinateSystem_Yup = _RWMesh.RWMesh_CoordinateSystem_Yup
RWMesh_CafReaderStatusEx_NONE = _RWMesh.RWMesh_CafReaderStatusEx_NONE
RWMesh_CafReaderStatusEx_Partial = _RWMesh.RWMesh_CafReaderStatusEx_Partial


class RWMesh_CoordinateSystem(IntEnum):
	RWMesh_CoordinateSystem_Undefined = - 1
	RWMesh_CoordinateSystem_posYfwd_posZup = 0
	RWMesh_CoordinateSystem_negZfwd_posYup = 1
	RWMesh_CoordinateSystem_Blender = RWMesh_CoordinateSystem_posYfwd_posZup
	RWMesh_CoordinateSystem_glTF = RWMesh_CoordinateSystem_negZfwd_posYup
	RWMesh_CoordinateSystem_Zup = RWMesh_CoordinateSystem_Blender
	RWMesh_CoordinateSystem_Yup = RWMesh_CoordinateSystem_glTF
RWMesh_CoordinateSystem_Undefined = RWMesh_CoordinateSystem.RWMesh_CoordinateSystem_Undefined
RWMesh_CoordinateSystem_posYfwd_posZup = RWMesh_CoordinateSystem.RWMesh_CoordinateSystem_posYfwd_posZup
RWMesh_CoordinateSystem_negZfwd_posYup = RWMesh_CoordinateSystem.RWMesh_CoordinateSystem_negZfwd_posYup
RWMesh_CoordinateSystem_Blender = RWMesh_CoordinateSystem.RWMesh_CoordinateSystem_Blender
RWMesh_CoordinateSystem_glTF = RWMesh_CoordinateSystem.RWMesh_CoordinateSystem_glTF
RWMesh_CoordinateSystem_Zup = RWMesh_CoordinateSystem.RWMesh_CoordinateSystem_Zup
RWMesh_CoordinateSystem_Yup = RWMesh_CoordinateSystem.RWMesh_CoordinateSystem_Yup

class RWMesh_CafReaderStatusEx(IntEnum):
	RWMesh_CafReaderStatusEx_NONE = 0
	RWMesh_CafReaderStatusEx_Partial = 1
RWMesh_CafReaderStatusEx_NONE = RWMesh_CafReaderStatusEx.RWMesh_CafReaderStatusEx_NONE
RWMesh_CafReaderStatusEx_Partial = RWMesh_CafReaderStatusEx.RWMesh_CafReaderStatusEx_Partial


def Handle_RWMesh_CafReader_Create() -> "opencascade::handle< RWMesh_CafReader >":
    return _RWMesh.Handle_RWMesh_CafReader_Create()
Handle_RWMesh_CafReader_Create = _RWMesh.Handle_RWMesh_CafReader_Create

def Handle_RWMesh_CafReader_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWMesh_CafReader >":
    return _RWMesh.Handle_RWMesh_CafReader_DownCast(t)
Handle_RWMesh_CafReader_DownCast = _RWMesh.Handle_RWMesh_CafReader_DownCast

def Handle_RWMesh_CafReader_IsNull(t: 'opencascade::handle< RWMesh_CafReader > const &') -> "bool":
    return _RWMesh.Handle_RWMesh_CafReader_IsNull(t)
Handle_RWMesh_CafReader_IsNull = _RWMesh.Handle_RWMesh_CafReader_IsNull
class RWMesh_NodeAttributeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWMesh_NodeAttributeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWMesh_NodeAttributeMap, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TopoDS_Shape,RWMesh_NodeAttributes,TopTools_ShapeMapHasher >::iterator":
        return _RWMesh.RWMesh_NodeAttributeMap_begin(self)

    def end(self) -> "NCollection_DataMap< TopoDS_Shape,RWMesh_NodeAttributes,TopTools_ShapeMapHasher >::iterator":
        return _RWMesh.RWMesh_NodeAttributeMap_end(self)

    def cbegin(self) -> "NCollection_DataMap< TopoDS_Shape,RWMesh_NodeAttributes,TopTools_ShapeMapHasher >::const_iterator":
        return _RWMesh.RWMesh_NodeAttributeMap_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TopoDS_Shape,RWMesh_NodeAttributes,TopTools_ShapeMapHasher >::const_iterator":
        return _RWMesh.RWMesh_NodeAttributeMap_cend(self)

    def __init__(self, *args):
        this = _RWMesh.new_RWMesh_NodeAttributeMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'RWMesh_NodeAttributeMap') -> "void":
        return _RWMesh.RWMesh_NodeAttributeMap_Exchange(self, theOther)

    def Assign(self, theOther: 'RWMesh_NodeAttributeMap') -> "NCollection_DataMap< TopoDS_Shape,RWMesh_NodeAttributes,TopTools_ShapeMapHasher > &":
        return _RWMesh.RWMesh_NodeAttributeMap_Assign(self, theOther)

    def Set(self, theOther: 'RWMesh_NodeAttributeMap') -> "NCollection_DataMap< TopoDS_Shape,RWMesh_NodeAttributes,TopTools_ShapeMapHasher > &":
        return _RWMesh.RWMesh_NodeAttributeMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _RWMesh.RWMesh_NodeAttributeMap_ReSize(self, N)

    def Bind(self, theKey: 'TopoDS_Shape', theItem: 'RWMesh_NodeAttributes') -> "Standard_Boolean":
        return _RWMesh.RWMesh_NodeAttributeMap_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TopoDS_Shape', theItem: 'RWMesh_NodeAttributes') -> "RWMesh_NodeAttributes *":
        return _RWMesh.RWMesh_NodeAttributeMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _RWMesh.RWMesh_NodeAttributeMap_IsBound(self, theKey)

    def UnBind(self, theKey: 'TopoDS_Shape') -> "Standard_Boolean":
        return _RWMesh.RWMesh_NodeAttributeMap_UnBind(self, theKey)

    def Seek(self, theKey: 'TopoDS_Shape') -> "RWMesh_NodeAttributes const *":
        return _RWMesh.RWMesh_NodeAttributeMap_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _RWMesh.RWMesh_NodeAttributeMap_Find(self, *args)

    def ChangeSeek(self, theKey: 'TopoDS_Shape') -> "RWMesh_NodeAttributes *":
        return _RWMesh.RWMesh_NodeAttributeMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TopoDS_Shape') -> "RWMesh_NodeAttributes &":
        return _RWMesh.RWMesh_NodeAttributeMap_ChangeFind(self, theKey)

    def __call__(self, *args) -> "RWMesh_NodeAttributes &":
        return _RWMesh.RWMesh_NodeAttributeMap___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _RWMesh.RWMesh_NodeAttributeMap_Clear(self, *args)
    __swig_destroy__ = _RWMesh.delete_RWMesh_NodeAttributeMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _RWMesh.RWMesh_NodeAttributeMap_Size(self)
RWMesh_NodeAttributeMap_swigregister = _RWMesh.RWMesh_NodeAttributeMap_swigregister
RWMesh_NodeAttributeMap_swigregister(RWMesh_NodeAttributeMap)

class RWMesh_CafReader(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWMesh_CafReader, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWMesh_CafReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CoordinateSystemConverter(self, *args) -> "RWMesh_CoordinateSystemConverter const &":
        """
        Return coordinate system converter.

        Returns
        -------
        RWMesh_CoordinateSystemConverter

        """
        return _RWMesh.RWMesh_CafReader_CoordinateSystemConverter(self, *args)


    def Document(self, *args) -> "opencascade::handle< TDocStd_Document > const &":
        """
        Return target document.

        Returns
        -------
        opencascade::handle<TDocStd_Document>

        """
        return _RWMesh.RWMesh_CafReader_Document(self, *args)


    def ExternalFiles(self, *args) -> "NCollection_IndexedMap< TCollection_AsciiString > const &":
        """
        Return the list of complementary files - external references (textures, data, etc.).

        Returns
        -------
        NCollection_IndexedMap<TCollection_AsciiString>

        """
        return _RWMesh.RWMesh_CafReader_ExternalFiles(self, *args)


    def ExtraStatus(self, *args) -> "Standard_Integer":
        """
        Return extended status flags. @sa rwmesh_cafreaderstatusex enumeration.

        Returns
        -------
        int

        """
        return _RWMesh.RWMesh_CafReader_ExtraStatus(self, *args)


    def FileCoordinateSystem(self, *args) -> "gp_Ax3 const":
        """
        Return file origin coordinate system; can be undefined, which means no conversion will be done.

        Returns
        -------
        gp_Ax3

        """
        return _RWMesh.RWMesh_CafReader_FileCoordinateSystem(self, *args)


    def FileLengthUnit(self, *args) -> "Standard_Real":
        """
        Return the length unit to convert from while reading the file, defined as scale factor for m (meters). can be undefined (-1.0) if file format is unitless.

        Returns
        -------
        float

        """
        return _RWMesh.RWMesh_CafReader_FileLengthUnit(self, *args)


    def HasFileCoordinateSystem(self, *args) -> "Standard_Boolean":
        """
        Return true if file origin coordinate system has been defined.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_CafReader_HasFileCoordinateSystem(self, *args)


    def HasSystemCoordinateSystem(self, *args) -> "Standard_Boolean":
        """
        Return true if system coordinate system has been defined; false by default.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_CafReader_HasSystemCoordinateSystem(self, *args)


    def MemoryLimitMiB(self, *args) -> "Standard_Integer":
        """
        Return memory usage limit in mib, -1 by default which means no limit.

        Returns
        -------
        int

        """
        return _RWMesh.RWMesh_CafReader_MemoryLimitMiB(self, *args)


    def Metadata(self, *args) -> "TColStd_IndexedDataMapOfStringString const &":
        """
        Return metadata map.

        Returns
        -------
        TColStd_IndexedDataMapOfStringString

        """
        return _RWMesh.RWMesh_CafReader_Metadata(self, *args)


    def Perform(self, *args) -> "bool":
        """
        Read the data from specified file. the document instance should be set beforehand.

        Parameters
        ----------
        theFile: TCollection_AsciiString
        theProgress: Message_ProgressRange

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_CafReader_Perform(self, *args)


    def ProbeHeader(self, *args) -> "Standard_Boolean":
        """
        Read the header data from specified file without reading entire model. the main purpose is collecting metadata and external references - for copying model into a new location, for example. can be not implemented (unsupported by format / reader).

        Parameters
        ----------
        theFile: TCollection_AsciiString
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_CafReader_ProbeHeader(self, *args)


    def RootPrefix(self, *args) -> "TCollection_AsciiString const &":
        """
        Return prefix for generating root labels names.

        Returns
        -------
        TCollection_AsciiString

        """
        return _RWMesh.RWMesh_CafReader_RootPrefix(self, *args)


    def SetCoordinateSystemConverter(self, *args) -> "void":
        """
        Set coordinate system converter.

        Parameters
        ----------
        theConverter: RWMesh_CoordinateSystemConverter

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetCoordinateSystemConverter(self, *args)


    def SetDocument(self, *args) -> "void":
        """
        Set target document.

        Parameters
        ----------
        theDoc: TDocStd_Document

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetDocument(self, *args)


    def SetFileCoordinateSystem(self, *args) -> "void":
        """
        Set (override) file origin coordinate system to perform conversion during read.

        Parameters
        ----------
        theCS: gp_Ax3

        Returns
        -------
        None

        Set (override) file origin coordinate system to perform conversion during read.

        Parameters
        ----------
        theCS: RWMesh_CoordinateSystem

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetFileCoordinateSystem(self, *args)


    def SetFileLengthUnit(self, *args) -> "void":
        """
        Set (override) file length units to convert from while reading the file, defined as scale factor for m (meters).

        Parameters
        ----------
        theUnits: float

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetFileLengthUnit(self, *args)


    def SetFillIncompleteDocument(self, *args) -> "void":
        """
        Set flag allowing partially read file content to be put into the xde document.

        Parameters
        ----------
        theToFillIncomplete: bool

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetFillIncompleteDocument(self, *args)


    def SetMemoryLimitMiB(self, *args) -> "void":
        """
        Set memory usage limit in mib; can be ignored by reader implementation!.

        Parameters
        ----------
        theLimitMiB: int

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetMemoryLimitMiB(self, *args)


    def SetRootPrefix(self, *args) -> "void":
        """
        Set prefix for generating root labels names.

        Parameters
        ----------
        theRootPrefix: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetRootPrefix(self, *args)


    def SetSystemCoordinateSystem(self, *args) -> "void":
        """
        Set system origin coordinate system to perform conversion into during read.

        Parameters
        ----------
        theCS: gp_Ax3

        Returns
        -------
        None

        Set system origin coordinate system to perform conversion into during read.

        Parameters
        ----------
        theCS: RWMesh_CoordinateSystem

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetSystemCoordinateSystem(self, *args)


    def SetSystemLengthUnit(self, *args) -> "void":
        """
        Set system length units to convert into while reading the file, defined as scale factor for m (meters).

        Parameters
        ----------
        theUnits: float

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CafReader_SetSystemLengthUnit(self, *args)


    def SingleShape(self, *args) -> "TopoDS_Shape":
        """
        Return result as a single shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _RWMesh.RWMesh_CafReader_SingleShape(self, *args)


    def SystemCoordinateSystem(self, *args) -> "gp_Ax3 const":
        """
        Return system coordinate system; undefined by default, which means that no conversion will be done.

        Returns
        -------
        gp_Ax3

        """
        return _RWMesh.RWMesh_CafReader_SystemCoordinateSystem(self, *args)


    def SystemLengthUnit(self, *args) -> "Standard_Real":
        """
        Return the length unit to convert into while reading the file, defined as scale factor for m (meters); -1.0 by default, which means that no conversion will be applied.

        Returns
        -------
        float

        """
        return _RWMesh.RWMesh_CafReader_SystemLengthUnit(self, *args)


    def ToFillIncompleteDocument(self, *args) -> "Standard_Boolean":
        """
        Flag indicating if partially read file content should be put into the xde document, true by default. //! partial read means unexpected end of file, critical parsing syntax errors in the middle of file, or reached memory limit indicated by performmesh() returning false. partial read allows importing a model even in case of formal reading failure, so that it will be up to user to decide if processed data has any value. //! in case of partial read (performmesh() returns false, but there are some data that could be put into document), perform() will return true and result flag will have failure bit set. @sa memorylimitmib(), extrastatus().

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_CafReader_ToFillIncompleteDocument(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_RWMesh_CafReader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWMesh.delete_RWMesh_CafReader
    __del__ = lambda self: None
RWMesh_CafReader_swigregister = _RWMesh.RWMesh_CafReader_swigregister
RWMesh_CafReader_swigregister(RWMesh_CafReader)

class RWMesh_CoordinateSystemConverter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWMesh_CoordinateSystemConverter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWMesh_CoordinateSystemConverter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWMesh.new_RWMesh_CoordinateSystemConverter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def HasInputCoordinateSystem(self, *args) -> "Standard_Boolean":
        """
        Return true if source coordinate system has been set; false by default.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_HasInputCoordinateSystem(self, *args)


    def HasOutputCoordinateSystem(self, *args) -> "Standard_Boolean":
        """
        Return true if destination coordinate system has been set; false by default.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_HasOutputCoordinateSystem(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize transformation.

        Parameters
        ----------
        theInputSystem: gp_Ax3
        theInputLengthUnit: float
        theOutputSystem: gp_Ax3
        theOutputLengthUnit: float

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_Init(self, *args)


    def InputCoordinateSystem(self, *args) -> "gp_Ax3 const":
        """
        Source coordinate system; undefined by default.

        Returns
        -------
        gp_Ax3

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_InputCoordinateSystem(self, *args)


    def InputLengthUnit(self, *args) -> "Standard_Real":
        """
        Return source length units, defined as scale factor to m (meters). -1.0 by default, which means that no conversion will be applied (regardless output length unit).

        Returns
        -------
        float

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_InputLengthUnit(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        Return true if there is no transformation (target and current coordinates systems are same).

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_IsEmpty(self, *args)


    def OutputCoordinateSystem(self, *args) -> "gp_Ax3 const":
        """
        Destination coordinate system; undefined by default.

        Returns
        -------
        gp_Ax3

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_OutputCoordinateSystem(self, *args)


    def OutputLengthUnit(self, *args) -> "Standard_Real":
        """
        Return destination length units, defined as scale factor to m (meters). -1.0 by default, which means that no conversion will be applied (regardless input length unit).

        Returns
        -------
        float

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_OutputLengthUnit(self, *args)


    def SetInputCoordinateSystem(self, *args) -> "void":
        """
        Set source coordinate system.

        Parameters
        ----------
        theSysFrom: gp_Ax3

        Returns
        -------
        None

        Set source coordinate system.

        Parameters
        ----------
        theSysFrom: RWMesh_CoordinateSystem

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_SetInputCoordinateSystem(self, *args)


    def SetInputLengthUnit(self, *args) -> "void":
        """
        Set source length units as scale factor to m (meters).

        Parameters
        ----------
        theInputScale: float

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_SetInputLengthUnit(self, *args)


    def SetOutputCoordinateSystem(self, *args) -> "void":
        """
        Set destination coordinate system.

        Parameters
        ----------
        theSysTo: gp_Ax3

        Returns
        -------
        None

        Set destination coordinate system.

        Parameters
        ----------
        theSysTo: RWMesh_CoordinateSystem

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_SetOutputCoordinateSystem(self, *args)


    def SetOutputLengthUnit(self, *args) -> "void":
        """
        Set destination length units as scale factor to m (meters).

        Parameters
        ----------
        theOutputScale: float

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_SetOutputLengthUnit(self, *args)


    def StandardCoordinateSystem(*args) -> "gp_Ax3":
        """
        Return a standard coordinate system definition.

        Parameters
        ----------
        theSys: RWMesh_CoordinateSystem

        Returns
        -------
        gp_Ax3

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_StandardCoordinateSystem(*args)

    StandardCoordinateSystem = staticmethod(StandardCoordinateSystem)

    def TransformNormal(self, *args) -> "void":
        """
        Transform normal (e.g. exclude translation/scale part of transformation).

        Parameters
        ----------
        theNorm: Graphic3d_Vec3

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_TransformNormal(self, *args)


    def TransformPosition(self, *args) -> "void":
        """
        Transform position.

        Parameters
        ----------
        thePos: gp_XYZ

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_TransformPosition(self, *args)


    def TransformTransformation(self, *args) -> "void":
        """
        Transform transformation.

        Parameters
        ----------
        theTrsf: gp_Trsf

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_CoordinateSystemConverter_TransformTransformation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWMesh.delete_RWMesh_CoordinateSystemConverter
    __del__ = lambda self: None
RWMesh_CoordinateSystemConverter_swigregister = _RWMesh.RWMesh_CoordinateSystemConverter_swigregister
RWMesh_CoordinateSystemConverter_swigregister(RWMesh_CoordinateSystemConverter)

def RWMesh_CoordinateSystemConverter_StandardCoordinateSystem(*args) -> "gp_Ax3":
    """
    Return a standard coordinate system definition.

    Parameters
    ----------
    theSys: RWMesh_CoordinateSystem

    Returns
    -------
    gp_Ax3

    """
    return _RWMesh.RWMesh_CoordinateSystemConverter_StandardCoordinateSystem(*args)

class RWMesh_FaceIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWMesh_FaceIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWMesh_FaceIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Main constructor.

        Parameters
        ----------
        theLabel: TDF_Label
        theLocation: TopLoc_Location
        theToMapColors: bool,optional
        	default value is false
        theStyle: XCAFPrs_Style,optional
        	default value is XCAFPrs_Style()

        Returns
        -------
        None

        """
        this = _RWMesh.new_RWMesh_FaceIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ElemLower(self, *args) -> "Standard_Integer":
        """
        Lower element index in current triangulation.

        Returns
        -------
        int

        """
        return _RWMesh.RWMesh_FaceIterator_ElemLower(self, *args)


    def ElemUpper(self, *args) -> "Standard_Integer":
        """
        Upper element index in current triangulation.

        Returns
        -------
        int

        """
        return _RWMesh.RWMesh_FaceIterator_ElemUpper(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        Return current face.

        Returns
        -------
        TopoDS_Face

        """
        return _RWMesh.RWMesh_FaceIterator_Face(self, *args)


    def FaceColor(self, *args) -> "Quantity_ColorRGBA const &":
        """
        Return face color.

        Returns
        -------
        Quantity_ColorRGBA

        """
        return _RWMesh.RWMesh_FaceIterator_FaceColor(self, *args)


    def FaceStyle(self, *args) -> "XCAFPrs_Style const &":
        """
        Return face material.

        Returns
        -------
        XCAFPrs_Style

        """
        return _RWMesh.RWMesh_FaceIterator_FaceStyle(self, *args)


    def HasFaceColor(self, *args) -> "bool":
        """
        Return true if face color is set.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_FaceIterator_HasFaceColor(self, *args)


    def HasNormals(self, *args) -> "bool":
        """
        Return true if triangulation has defined normals.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_FaceIterator_HasNormals(self, *args)


    def HasTexCoords(self, *args) -> "bool":
        """
        Return true if triangulation has defined normals.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_FaceIterator_HasTexCoords(self, *args)


    def IsEmptyMesh(self, *args) -> "bool":
        """
        Return true if mesh data is defined.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_FaceIterator_IsEmptyMesh(self, *args)


    def More(self, *args) -> "bool":
        """
        Return true if iterator points to the valid triangulation.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_FaceIterator_More(self, *args)


    def NbNodes(self, *args) -> "Standard_Integer":
        """
        Return number of nodes for the current face.

        Returns
        -------
        int

        """
        return _RWMesh.RWMesh_FaceIterator_NbNodes(self, *args)


    def NbTriangles(self, *args) -> "Standard_Integer":
        """
        Return number of elements of specific type for the current face.

        Returns
        -------
        int

        """
        return _RWMesh.RWMesh_FaceIterator_NbTriangles(self, *args)


    def Next(self, *args) -> "void":
        """
        Find next value.

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_FaceIterator_Next(self, *args)


    def NodeLower(self, *args) -> "Standard_Integer":
        """
        Lower node index in current triangulation.

        Returns
        -------
        int

        """
        return _RWMesh.RWMesh_FaceIterator_NodeLower(self, *args)


    def NodeTexCoord(self, *args) -> "gp_Pnt2d":
        """
        Return texture coordinates for the node.

        Parameters
        ----------
        theNode: int

        Returns
        -------
        gp_Pnt2d

        """
        return _RWMesh.RWMesh_FaceIterator_NodeTexCoord(self, *args)


    def NodeTransformed(self, *args) -> "gp_Pnt":
        """
        Return the node with specified index with applied transformation.

        Parameters
        ----------
        theNode: int

        Returns
        -------
        gp_Pnt

        """
        return _RWMesh.RWMesh_FaceIterator_NodeTransformed(self, *args)


    def NodeUpper(self, *args) -> "Standard_Integer":
        """
        Upper node index in current triangulation.

        Returns
        -------
        int

        """
        return _RWMesh.RWMesh_FaceIterator_NodeUpper(self, *args)


    def NormalTransformed(self, *args) -> "gp_Dir":
        """
        Return normal at specified node index with face transformation applied and face orientation applied.

        Parameters
        ----------
        theNode: int

        Returns
        -------
        gp_Dir

        """
        return _RWMesh.RWMesh_FaceIterator_NormalTransformed(self, *args)


    def TriangleOriented(self, *args) -> "Poly_Triangle":
        """
        Return triangle with specified index with applied face orientation.

        Parameters
        ----------
        theElemIndex: int

        Returns
        -------
        Poly_Triangle

        """
        return _RWMesh.RWMesh_FaceIterator_TriangleOriented(self, *args)


    def Triangulation(self, *args) -> "opencascade::handle< Poly_Triangulation > const &":
        """
        Return current face triangulation.

        Returns
        -------
        opencascade::handle<Poly_Triangulation>

        """
        return _RWMesh.RWMesh_FaceIterator_Triangulation(self, *args)


    def node(self, *args) -> "gp_Pnt":
        """
        Return the node with specified index with applied transformation.

        Parameters
        ----------
        theNode: int

        Returns
        -------
        gp_Pnt

        """
        return _RWMesh.RWMesh_FaceIterator_node(self, *args)


    def normal(self, *args) -> "gp_Dir":
        """
        Return normal at specified node index without face transformation applied.

        Parameters
        ----------
        theNode: int

        Returns
        -------
        gp_Dir

        """
        return _RWMesh.RWMesh_FaceIterator_normal(self, *args)


    def triangle(self, *args) -> "Poly_Triangle":
        """
        Return triangle with specified index.

        Parameters
        ----------
        theElemIndex: int

        Returns
        -------
        Poly_Triangle

        """
        return _RWMesh.RWMesh_FaceIterator_triangle(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWMesh.delete_RWMesh_FaceIterator
    __del__ = lambda self: None
RWMesh_FaceIterator_swigregister = _RWMesh.RWMesh_FaceIterator_swigregister
RWMesh_FaceIterator_swigregister(RWMesh_FaceIterator)

class RWMesh_MaterialMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWMesh_MaterialMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWMesh_MaterialMap, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddMaterial(self, *args) -> "TCollection_AsciiString":
        """
        Register material and return its name identifier.

        Parameters
        ----------
        theStyle: XCAFPrs_Style

        Returns
        -------
        TCollection_AsciiString

        """
        return _RWMesh.RWMesh_MaterialMap_AddMaterial(self, *args)


    def CopyTexture(self, *args) -> "bool":
        """
        Copy and rename texture file to the new location. @param therestexture [out] result texture file path (relative to the model) @param thetexture [in] original texture @param thekey [in] material key.

        Parameters
        ----------
        theResTexture: TCollection_AsciiString
        theTexture: Image_Texture
        theKey: TCollection_AsciiString

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_MaterialMap_CopyTexture(self, *args)


    def CreateTextureFolder(self, *args) -> "bool":
        """
        Create texture folder 'modelname/textures'; for example: model: path/modelname.gltf images: path/modelname/textures/ warning! output folder is not cleared.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_MaterialMap_CreateTextureFolder(self, *args)


    def DefaultStyle(self, *args) -> "XCAFPrs_Style const &":
        """
        Return default material definition to be used for nodes with only color defined.

        Returns
        -------
        XCAFPrs_Style

        """
        return _RWMesh.RWMesh_MaterialMap_DefaultStyle(self, *args)


    def DefineMaterial(self, *args) -> "void":
        """
        Virtual method actually defining the material (e.g. export to the file).

        Parameters
        ----------
        theStyle: XCAFPrs_Style
        theKey: TCollection_AsciiString
        theName: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_MaterialMap_DefineMaterial(self, *args)


    def FindMaterial(self, *args) -> "TCollection_AsciiString":
        """
        Find already registered material.

        Parameters
        ----------
        theStyle: XCAFPrs_Style

        Returns
        -------
        TCollection_AsciiString

        """
        return _RWMesh.RWMesh_MaterialMap_FindMaterial(self, *args)


    def IsFailed(self, *args) -> "bool":
        """
        Return failed flag.

        Returns
        -------
        bool

        """
        return _RWMesh.RWMesh_MaterialMap_IsFailed(self, *args)


    def SetDefaultStyle(self, *args) -> "void":
        """
        Set default material definition to be used for nodes with only color defined.

        Parameters
        ----------
        theStyle: XCAFPrs_Style

        Returns
        -------
        None

        """
        return _RWMesh.RWMesh_MaterialMap_SetDefaultStyle(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWMesh.delete_RWMesh_MaterialMap
    __del__ = lambda self: None
RWMesh_MaterialMap_swigregister = _RWMesh.RWMesh_MaterialMap_swigregister
RWMesh_MaterialMap_swigregister(RWMesh_MaterialMap)

class RWMesh_NodeAttributes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWMesh_NodeAttributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWMesh_NodeAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _RWMesh.RWMesh_NodeAttributes_Name_set
    __swig_getmethods__["Name"] = _RWMesh.RWMesh_NodeAttributes_Name_get
    if _newclass:
        Name = _swig_property(_RWMesh.RWMesh_NodeAttributes_Name_get, _RWMesh.RWMesh_NodeAttributes_Name_set)
    __swig_setmethods__["RawName"] = _RWMesh.RWMesh_NodeAttributes_RawName_set
    __swig_getmethods__["RawName"] = _RWMesh.RWMesh_NodeAttributes_RawName_get
    if _newclass:
        RawName = _swig_property(_RWMesh.RWMesh_NodeAttributes_RawName_get, _RWMesh.RWMesh_NodeAttributes_RawName_set)
    __swig_setmethods__["NamedData"] = _RWMesh.RWMesh_NodeAttributes_NamedData_set
    __swig_getmethods__["NamedData"] = _RWMesh.RWMesh_NodeAttributes_NamedData_get
    if _newclass:
        NamedData = _swig_property(_RWMesh.RWMesh_NodeAttributes_NamedData_get, _RWMesh.RWMesh_NodeAttributes_NamedData_set)
    __swig_setmethods__["Style"] = _RWMesh.RWMesh_NodeAttributes_Style_set
    __swig_getmethods__["Style"] = _RWMesh.RWMesh_NodeAttributes_Style_get
    if _newclass:
        Style = _swig_property(_RWMesh.RWMesh_NodeAttributes_Style_get, _RWMesh.RWMesh_NodeAttributes_Style_set)

    __repr__ = _dumps_object


    def __init__(self):
        this = _RWMesh.new_RWMesh_NodeAttributes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWMesh.delete_RWMesh_NodeAttributes
    __del__ = lambda self: None
RWMesh_NodeAttributes_swigregister = _RWMesh.RWMesh_NodeAttributes_swigregister
RWMesh_NodeAttributes_swigregister(RWMesh_NodeAttributes)



# This file is compatible with both classic and new-style classes.


