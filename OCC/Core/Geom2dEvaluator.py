# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Geom2dEvaluator module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geom2devaluator.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dEvaluator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dEvaluator')
    _Geom2dEvaluator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dEvaluator', [dirname(__file__)])
        except ImportError:
            import _Geom2dEvaluator
            return _Geom2dEvaluator
        try:
            _mod = imp.load_module('_Geom2dEvaluator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dEvaluator = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dEvaluator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dEvaluator.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Geom2dEvaluator.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Geom2dEvaluator.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Geom2dEvaluator.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Geom2dEvaluator.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Geom2dEvaluator.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Geom2dEvaluator.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Geom2dEvaluator.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Geom2dEvaluator.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Geom2dEvaluator.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Geom2dEvaluator.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Geom2dEvaluator.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Geom2dEvaluator.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Geom2dEvaluator.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Geom2dEvaluator.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Geom2dEvaluator.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Geom2dEvaluator.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Geom2dEvaluator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Geom2dEvaluator.process_exception(error, method_name, class_name)
process_exception = _Geom2dEvaluator.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom2d
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2dAdaptor
import OCC.Core.Adaptor2d

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_Geom2dEvaluator_Curve_Create() -> "opencascade::handle< Geom2dEvaluator_Curve >":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_Create()
Handle_Geom2dEvaluator_Curve_Create = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_Create

def Handle_Geom2dEvaluator_Curve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Geom2dEvaluator_Curve >":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DownCast(t)
Handle_Geom2dEvaluator_Curve_DownCast = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_DownCast

def Handle_Geom2dEvaluator_Curve_IsNull(t: 'opencascade::handle< Geom2dEvaluator_Curve > const &') -> "bool":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_IsNull(t)
Handle_Geom2dEvaluator_Curve_IsNull = _Geom2dEvaluator.Handle_Geom2dEvaluator_Curve_IsNull

def Handle_Geom2dEvaluator_OffsetCurve_Create() -> "opencascade::handle< Geom2dEvaluator_OffsetCurve >":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_Create()
Handle_Geom2dEvaluator_OffsetCurve_Create = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_Create

def Handle_Geom2dEvaluator_OffsetCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Geom2dEvaluator_OffsetCurve >":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DownCast(t)
Handle_Geom2dEvaluator_OffsetCurve_DownCast = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_DownCast

def Handle_Geom2dEvaluator_OffsetCurve_IsNull(t: 'opencascade::handle< Geom2dEvaluator_OffsetCurve > const &') -> "bool":
    return _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_IsNull(t)
Handle_Geom2dEvaluator_OffsetCurve_IsNull = _Geom2dEvaluator.Handle_Geom2dEvaluator_OffsetCurve_IsNull
class geom2devaluator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, geom2devaluator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, geom2devaluator, name)
    __repr__ = _swig_repr

    def CalculateD0(*args) -> "void":
        """
        Recalculate d1 values of base curve into d0 value of offset curve.

        Parameters
        ----------
        theValue: gp_Pnt2d
        theD1: gp_Vec2d
        theOffset: float

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.geom2devaluator_CalculateD0(*args)

    CalculateD0 = staticmethod(CalculateD0)

    def CalculateD1(*args) -> "void":
        """
        Recalculate d2 values of base curve into d1 values of offset curve.

        Parameters
        ----------
        theValue: gp_Pnt2d
        theD1: gp_Vec2d
        theD2: gp_Vec2d
        theOffset: float

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.geom2devaluator_CalculateD1(*args)

    CalculateD1 = staticmethod(CalculateD1)

    def CalculateD2(*args) -> "void":
        """
        Recalculate d3 values of base curve into d2 values of offset curve.

        Parameters
        ----------
        theValue: gp_Pnt2d
        theD1: gp_Vec2d
        theD2: gp_Vec2d
        theD3: gp_Vec2d
        theIsDirChange: bool
        theOffset: float

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.geom2devaluator_CalculateD2(*args)

    CalculateD2 = staticmethod(CalculateD2)

    def CalculateD3(*args) -> "void":
        """
        Recalculate d3 values of base curve into d3 values of offset curve.

        Parameters
        ----------
        theValue: gp_Pnt2d
        theD1: gp_Vec2d
        theD2: gp_Vec2d
        theD3: gp_Vec2d
        theD4: gp_Vec2d
        theIsDirChange: bool
        theOffset: float

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.geom2devaluator_CalculateD3(*args)

    CalculateD3 = staticmethod(CalculateD3)

    __repr__ = _dumps_object

    @methodnotwrapped
    def A(self):
    	pass

    @methodnotwrapped
    def d(self):
    	pass

    @methodnotwrapped
    def j(self):
    	pass

    @methodnotwrapped
    def u(self):
    	pass

    @methodnotwrapped
    def s(self):
    	pass

    @methodnotwrapped
    def t(self):
    	pass

    @methodnotwrapped
    def D(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def r(self):
    	pass

    @methodnotwrapped
    def i(self):
    	pass

    @methodnotwrapped
    def v(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def t(self):
    	pass

    @methodnotwrapped
    def i(self):
    	pass

    @methodnotwrapped
    def v(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass


    def __init__(self):
        this = _Geom2dEvaluator.new_geom2devaluator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dEvaluator.delete_geom2devaluator
    __del__ = lambda self: None
geom2devaluator_swigregister = _Geom2dEvaluator.geom2devaluator_swigregister
geom2devaluator_swigregister(geom2devaluator)

def geom2devaluator_CalculateD0(*args) -> "void":
    """
    Recalculate d1 values of base curve into d0 value of offset curve.

    Parameters
    ----------
    theValue: gp_Pnt2d
    theD1: gp_Vec2d
    theOffset: float

    Returns
    -------
    None

    """
    return _Geom2dEvaluator.geom2devaluator_CalculateD0(*args)

def geom2devaluator_CalculateD1(*args) -> "void":
    """
    Recalculate d2 values of base curve into d1 values of offset curve.

    Parameters
    ----------
    theValue: gp_Pnt2d
    theD1: gp_Vec2d
    theD2: gp_Vec2d
    theOffset: float

    Returns
    -------
    None

    """
    return _Geom2dEvaluator.geom2devaluator_CalculateD1(*args)

def geom2devaluator_CalculateD2(*args) -> "void":
    """
    Recalculate d3 values of base curve into d2 values of offset curve.

    Parameters
    ----------
    theValue: gp_Pnt2d
    theD1: gp_Vec2d
    theD2: gp_Vec2d
    theD3: gp_Vec2d
    theIsDirChange: bool
    theOffset: float

    Returns
    -------
    None

    """
    return _Geom2dEvaluator.geom2devaluator_CalculateD2(*args)

def geom2devaluator_CalculateD3(*args) -> "void":
    """
    Recalculate d3 values of base curve into d3 values of offset curve.

    Parameters
    ----------
    theValue: gp_Pnt2d
    theD1: gp_Vec2d
    theD2: gp_Vec2d
    theD3: gp_Vec2d
    theD4: gp_Vec2d
    theIsDirChange: bool
    theOffset: float

    Returns
    -------
    None

    """
    return _Geom2dEvaluator.geom2devaluator_CalculateD3(*args)

class Geom2dEvaluator_Curve(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geom2dEvaluator_Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geom2dEvaluator_Curve, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        Value of 2d curve.

        Parameters
        ----------
        theU: float
        theValue: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        Value and first derivatives of curve.

        Parameters
        ----------
        theU: float
        theValue: gp_Pnt2d
        theD1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        Value, first and second derivatives of curve.

        Parameters
        ----------
        theU: float
        theValue: gp_Pnt2d
        theD1: gp_Vec2d
        theD2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        Value, first, second and third derivatives of curve.

        Parameters
        ----------
        theU: float
        theValue: gp_Pnt2d
        theD1: gp_Vec2d
        theD2: gp_Vec2d
        theD3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_D3(self, *args)


    def DN(self, *args) -> "gp_Vec2d":
        """
        Calculates n-th derivatives of curve, where n = thederu. raises if n < 1.

        Parameters
        ----------
        theU: float
        theDerU: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2dEvaluator.Geom2dEvaluator_Curve_DN(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Geom2dEvaluator_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dEvaluator.delete_Geom2dEvaluator_Curve
    __del__ = lambda self: None
Geom2dEvaluator_Curve_swigregister = _Geom2dEvaluator.Geom2dEvaluator_Curve_swigregister
Geom2dEvaluator_Curve_swigregister(Geom2dEvaluator_Curve)

class Geom2dEvaluator_OffsetCurve(Geom2dEvaluator_Curve):
    __swig_setmethods__ = {}
    for _s in [Geom2dEvaluator_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geom2dEvaluator_OffsetCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Geom2dEvaluator_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geom2dEvaluator_OffsetCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialize evaluator by curve.

        Parameters
        ----------
        theBase: Geom2d_Curve
        theOffset: float

        Returns
        -------
        None

        Initialize evaluator by curve adaptor.

        Parameters
        ----------
        theBase: Geom2dAdaptor_HCurve
        theOffset: float

        Returns
        -------
        None

        """
        this = _Geom2dEvaluator.new_Geom2dEvaluator_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOffsetValue(self, *args) -> "void":
        """
        Change the offset value.

        Parameters
        ----------
        theOffset: float

        Returns
        -------
        None

        """
        return _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_SetOffsetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Geom2dEvaluator_OffsetCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2dEvaluator.delete_Geom2dEvaluator_OffsetCurve
    __del__ = lambda self: None
Geom2dEvaluator_OffsetCurve_swigregister = _Geom2dEvaluator.Geom2dEvaluator_OffsetCurve_swigregister
Geom2dEvaluator_OffsetCurve_swigregister(Geom2dEvaluator_OffsetCurve)



# This file is compatible with both classic and new-style classes.


