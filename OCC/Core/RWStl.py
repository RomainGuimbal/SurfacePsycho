# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
RWStl module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_rwstl.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWStl
else:
    import _RWStl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStl.delete_SwigPyIterator

    def value(self):
        return _RWStl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStl.SwigPyIterator_copy(self)

    def next(self):
        return _RWStl.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStl.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWStl:
_RWStl.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _RWStl.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _RWStl.ios_base_erase_event
    imbue_event = _RWStl.ios_base_imbue_event
    copyfmt_event = _RWStl.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _RWStl.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _RWStl.ios_base_flags(self, *args)

    def setf(self, *args):
        return _RWStl.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _RWStl.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _RWStl.ios_base_precision(self, *args)

    def width(self, *args):
        return _RWStl.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _RWStl.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _RWStl.ios_base_imbue(self, __loc)

    def getloc(self):
        return _RWStl.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _RWStl.ios_base_xalloc()

    def iword(self, __ix):
        return _RWStl.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _RWStl.ios_base_pword(self, __ix)
    __swig_destroy__ = _RWStl.delete_ios_base

# Register ios_base in _RWStl:
_RWStl.ios_base_swigregister(ios_base)
cvar = _RWStl.cvar
ios_base.boolalpha = _RWStl.cvar.ios_base_boolalpha
ios_base.dec = _RWStl.cvar.ios_base_dec
ios_base.fixed = _RWStl.cvar.ios_base_fixed
ios_base.hex = _RWStl.cvar.ios_base_hex
ios_base.internal = _RWStl.cvar.ios_base_internal
ios_base.left = _RWStl.cvar.ios_base_left
ios_base.oct = _RWStl.cvar.ios_base_oct
ios_base.right = _RWStl.cvar.ios_base_right
ios_base.scientific = _RWStl.cvar.ios_base_scientific
ios_base.showbase = _RWStl.cvar.ios_base_showbase
ios_base.showpoint = _RWStl.cvar.ios_base_showpoint
ios_base.showpos = _RWStl.cvar.ios_base_showpos
ios_base.skipws = _RWStl.cvar.ios_base_skipws
ios_base.unitbuf = _RWStl.cvar.ios_base_unitbuf
ios_base.uppercase = _RWStl.cvar.ios_base_uppercase
ios_base.adjustfield = _RWStl.cvar.ios_base_adjustfield
ios_base.basefield = _RWStl.cvar.ios_base_basefield
ios_base.floatfield = _RWStl.cvar.ios_base_floatfield
ios_base.badbit = _RWStl.cvar.ios_base_badbit
ios_base.eofbit = _RWStl.cvar.ios_base_eofbit
ios_base.failbit = _RWStl.cvar.ios_base_failbit
ios_base.goodbit = _RWStl.cvar.ios_base_goodbit
ios_base.app = _RWStl.cvar.ios_base_app
ios_base.ate = _RWStl.cvar.ios_base_ate
ios_base.binary = _RWStl.cvar.ios_base_binary
ios_base.ios_base_in = _RWStl.cvar.ios_base_ios_base_in
ios_base.out = _RWStl.cvar.ios_base_out
ios_base.trunc = _RWStl.cvar.ios_base_trunc
ios_base.beg = _RWStl.cvar.ios_base_beg
ios_base.cur = _RWStl.cvar.ios_base_cur
ios_base.end = _RWStl.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _RWStl.ios_rdstate(self)

    def clear(self, *args):
        return _RWStl.ios_clear(self, *args)

    def setstate(self, __state):
        return _RWStl.ios_setstate(self, __state)

    def good(self):
        return _RWStl.ios_good(self)

    def eof(self):
        return _RWStl.ios_eof(self)

    def fail(self):
        return _RWStl.ios_fail(self)

    def bad(self):
        return _RWStl.ios_bad(self)

    def exceptions(self, *args):
        return _RWStl.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _RWStl.ios_swiginit(self, _RWStl.new_ios(__sb))
    __swig_destroy__ = _RWStl.delete_ios

    def tie(self, *args):
        return _RWStl.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _RWStl.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _RWStl.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _RWStl.ios_fill(self, *args)

    def imbue(self, __loc):
        return _RWStl.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _RWStl.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _RWStl.ios_widen(self, __c)

# Register ios in _RWStl:
_RWStl.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _RWStl.ostream_swiginit(self, _RWStl.new_ostream(__sb))
    __swig_destroy__ = _RWStl.delete_ostream

    def __lshift__(self, *args):
        return _RWStl.ostream___lshift__(self, *args)

    def put(self, __c):
        return _RWStl.ostream_put(self, __c)

    def write(self, __s, __n):
        return _RWStl.ostream_write(self, __s, __n)

    def flush(self):
        return _RWStl.ostream_flush(self)

    def tellp(self):
        return _RWStl.ostream_tellp(self)

    def seekp(self, *args):
        return _RWStl.ostream_seekp(self, *args)

# Register ostream in _RWStl:
_RWStl.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _RWStl.istream_swiginit(self, _RWStl.new_istream(__sb))
    __swig_destroy__ = _RWStl.delete_istream

    def __rshift__(self, *args):
        return _RWStl.istream___rshift__(self, *args)

    def gcount(self):
        return _RWStl.istream_gcount(self)

    def get(self, *args):
        return _RWStl.istream_get(self, *args)

    def getline(self, *args):
        return _RWStl.istream_getline(self, *args)

    def ignore(self, *args):
        return _RWStl.istream_ignore(self, *args)

    def peek(self):
        return _RWStl.istream_peek(self)

    def read(self, __s, __n):
        return _RWStl.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _RWStl.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _RWStl.istream_putback(self, __c)

    def unget(self):
        return _RWStl.istream_unget(self)

    def sync(self):
        return _RWStl.istream_sync(self)

    def tellg(self):
        return _RWStl.istream_tellg(self)

    def seekg(self, *args):
        return _RWStl.istream_seekg(self, *args)

# Register istream in _RWStl:
_RWStl.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _RWStl.iostream_swiginit(self, _RWStl.new_iostream(__sb))
    __swig_destroy__ = _RWStl.delete_iostream

# Register iostream in _RWStl:
_RWStl.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _RWStl.endl_cb_ptr
endl = _RWStl.endl
ends_cb_ptr = _RWStl.ends_cb_ptr
ends = _RWStl.ends
flush_cb_ptr = _RWStl.flush_cb_ptr
flush = _RWStl.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.OSD
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.TColStd
import OCC.Core.Poly
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TShort
import OCC.Core.DE
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.XSControl
import OCC.Core.IFSelect
import OCC.Core.Interface
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.Transfer
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Geom2d

from enum import IntEnum
from OCC.Core.Exception import *



class rwstl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ReadAscii(*args):
        r"""

        Parameters
        ----------
        thePath: OSD_Path
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        opencascade::handle<Poly_Triangulation>

        Description
        -----------
        Read triangulation from an ascii stl file in case of error, returns null handle.

        """
        return _RWStl.rwstl_ReadAscii(*args)

    @staticmethod
    def ReadBinary(*args):
        r"""

        Parameters
        ----------
        thePath: OSD_Path
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        opencascade::handle<Poly_Triangulation>

        Description
        -----------
        Read triangulation from a binary stl file in case of error, returns null handle.

        """
        return _RWStl.rwstl_ReadBinary(*args)

    @staticmethod
    def ReadFile(*args):
        r"""

        Parameters
        ----------
        theFile: OSD_Path
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        opencascade::handle<Poly_Triangulation>

        Description
        -----------
        Read specified stl file and returns its content as triangulation. in case of error, returns null handle.

        Parameters
        ----------
        theFile: str
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        opencascade::handle<Poly_Triangulation>

        Description
        -----------
        Read specified stl file and returns its content as triangulation. in case of error, returns null handle.

        Parameters
        ----------
        theFile: str
        theMergeAngle: float
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        opencascade::handle<Poly_Triangulation>

        Description
        -----------
        Read specified stl file and returns its content as triangulation. @param[in] thefile file path to read @param[in] themergeangle maximum angle in radians between triangles to merge equal nodes; m_pi/2 means ignore angle @param[in] theprogress progress indicator return result triangulation or null in case of error.

        Parameters
        ----------
        theFile: str
        theMergeAngle: float
        theTriangList: Poly_Triangulation
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        Read specified stl file and fills triangulation list for multi-domain case. @param[in] thefile file path to read @param[in] themergeangle maximum angle in radians between triangles to merge equal nodes; m_pi/2 means ignore angle @param[out] thetrianglist triangulation list for multi-domain case @param[in] theprogress progress indicator.

        """
        return _RWStl.rwstl_ReadFile(*args)

    @staticmethod
    def WriteAscii(*args):
        r"""

        Parameters
        ----------
        theMesh: Poly_Triangulation
        thePath: OSD_Path
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Write the meshing in a file following the ascii format of an stl file. returns false if the cannot be opened;.

        """
        return _RWStl.rwstl_WriteAscii(*args)

    @staticmethod
    def WriteBinary(*args):
        r"""

        Parameters
        ----------
        theMesh: Poly_Triangulation
        thePath: OSD_Path
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Write triangulation to binary stl file. binary format of an stl file. returns false if the cannot be opened;.

        """
        return _RWStl.rwstl_WriteBinary(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _RWStl.rwstl_swiginit(self, _RWStl.new_rwstl())
    __swig_destroy__ = _RWStl.delete_rwstl

# Register rwstl in _RWStl:
_RWStl.rwstl_swigregister(rwstl)
class RWStl_ConfigurationNode(OCC.Core.DE.DE_ConfigurationNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    InternalParameters = property(_RWStl.RWStl_ConfigurationNode_InternalParameters_get, _RWStl.RWStl_ConfigurationNode_InternalParameters_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes all field by default.

        Parameters
        ----------
        theNode: RWStl_ConfigurationNode

        Return
        -------
        None

        Description
        -----------
        Copies values of all fields @param[in] thenode object to copy.

        """
        _RWStl.RWStl_ConfigurationNode_swiginit(self, _RWStl.new_RWStl_ConfigurationNode(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _RWStl.delete_RWStl_ConfigurationNode

# Register RWStl_ConfigurationNode in _RWStl:
_RWStl.RWStl_ConfigurationNode_swigregister(RWStl_ConfigurationNode)
class RWStl_Provider(OCC.Core.DE.DE_Provider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Default constructor configure translation process with global configuration.

        Parameters
        ----------
        theNode: DE_ConfigurationNode

        Return
        -------
        None

        Description
        -----------
        Configure translation process @param[in] thenode object to copy.

        """
        _RWStl.RWStl_Provider_swiginit(self, _RWStl.new_RWStl_Provider(*args))

    def Read(self, *args):
        r"""

        Parameters
        ----------
        thePath: str
        theDocument: TDocStd_Document
        theWS: XSControl_WorkSession
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Reads a cad file, according internal configuration @param[in] thepath path to the import cad file @param[out] thedocument document to save result @param[in] thews current work session @param theprogress[in] progress indicator return true if read operation has ended correctly.

        Parameters
        ----------
        thePath: str
        theDocument: TDocStd_Document
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Reads a cad file, according internal configuration @param[in] thepath path to the import cad file @param[out] thedocument document to save result @param theprogress[in] progress indicator return true if read operation has ended correctly.

        Parameters
        ----------
        thePath: str
        theShape: TopoDS_Shape
        theWS: XSControl_WorkSession
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Reads a cad file, according internal configuration @param[in] thepath path to the import cad file @param[out] theshape shape to save result @param[in] thews current work session @param theprogress[in] progress indicator return true if read operation has ended correctly.

        Parameters
        ----------
        thePath: str
        theShape: TopoDS_Shape
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Reads a cad file, according internal configuration @param[in] thepath path to the import cad file @param[out] theshape shape to save result @param theprogress[in] progress indicator return true if read operation has ended correctly.

        """
        return _RWStl.RWStl_Provider_Read(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        thePath: str
        theDocument: TDocStd_Document
        theWS: XSControl_WorkSession
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Writes a cad file, according internal configuration @param[in] thepath path to the export cad file @param[out] thedocument document to export @param[in] thews current work session @param theprogress[in] progress indicator return true if write operation has ended correctly.

        Parameters
        ----------
        thePath: str
        theDocument: TDocStd_Document
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Writes a cad file, according internal configuration @param[in] thepath path to the export cad file @param[out] thedocument document to export @param theprogress[in] progress indicator return true if write operation has ended correctly.

        Parameters
        ----------
        thePath: str
        theShape: TopoDS_Shape
        theWS: XSControl_WorkSession
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Writes a cad file, according internal configuration @param[in] thepath path to the export cad file @param[out] theshape shape to export @param[in] thews current work session @param theprogress[in] progress indicator return true if write operation has ended correctly.

        Parameters
        ----------
        thePath: str
        theShape: TopoDS_Shape
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Writes a cad file, according internal configuration @param[in] thepath path to the export cad file @param[out] theshape shape to export @param theprogress[in] progress indicator return true if write operation has ended correctly.

        """
        return _RWStl.RWStl_Provider_Write(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _RWStl.delete_RWStl_Provider

# Register RWStl_Provider in _RWStl:
_RWStl.RWStl_Provider_swigregister(RWStl_Provider)

@classnotwrapped
class RWStl_Reader:
	pass





@deprecated
def rwstl_ReadAscii(*args):
	return rwstl.ReadAscii(*args)

@deprecated
def rwstl_ReadBinary(*args):
	return rwstl.ReadBinary(*args)

@deprecated
def rwstl_ReadFile(*args):
	return rwstl.ReadFile(*args)

@deprecated
def rwstl_ReadFile(*args):
	return rwstl.ReadFile(*args)

@deprecated
def rwstl_ReadFile(*args):
	return rwstl.ReadFile(*args)

@deprecated
def rwstl_ReadFile(*args):
	return rwstl.ReadFile(*args)

@deprecated
def rwstl_WriteAscii(*args):
	return rwstl.WriteAscii(*args)

@deprecated
def rwstl_WriteBinary(*args):
	return rwstl.WriteBinary(*args)



