# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Plate module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_plate.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Plate')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Plate')
    _Plate = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Plate', [dirname(__file__)])
        except ImportError:
            import _Plate
            return _Plate
        try:
            _mod = imp.load_module('_Plate', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Plate = swig_import_helper()
    del swig_import_helper
else:
    import _Plate
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Plate.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Plate.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Plate.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Plate.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Plate.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Plate.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Plate.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Plate.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Plate.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Plate.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Plate.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Plate.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Plate.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Plate.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Plate.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Plate.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Plate.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Plate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Plate.process_exception(error, method_name, class_name)
process_exception = _Plate.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.Message
import OCC.Core.OSD

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_Plate_HArray1OfPinpointConstraint_Create() -> "opencascade::handle< Plate_HArray1OfPinpointConstraint >":
    return _Plate.Handle_Plate_HArray1OfPinpointConstraint_Create()
Handle_Plate_HArray1OfPinpointConstraint_Create = _Plate.Handle_Plate_HArray1OfPinpointConstraint_Create

def Handle_Plate_HArray1OfPinpointConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Plate_HArray1OfPinpointConstraint >":
    return _Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast(t)
Handle_Plate_HArray1OfPinpointConstraint_DownCast = _Plate.Handle_Plate_HArray1OfPinpointConstraint_DownCast

def Handle_Plate_HArray1OfPinpointConstraint_IsNull(t: 'opencascade::handle< Plate_HArray1OfPinpointConstraint > const &') -> "bool":
    return _Plate.Handle_Plate_HArray1OfPinpointConstraint_IsNull(t)
Handle_Plate_HArray1OfPinpointConstraint_IsNull = _Plate.Handle_Plate_HArray1OfPinpointConstraint_IsNull
class Plate_Array1OfPinpointConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_Array1OfPinpointConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_Array1OfPinpointConstraint, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< Plate_PinpointConstraint >::iterator":
        return _Plate.Plate_Array1OfPinpointConstraint_begin(self)

    def end(self) -> "NCollection_Array1< Plate_PinpointConstraint >::iterator":
        return _Plate.Plate_Array1OfPinpointConstraint_end(self)

    def cbegin(self) -> "NCollection_Array1< Plate_PinpointConstraint >::const_iterator":
        return _Plate.Plate_Array1OfPinpointConstraint_cbegin(self)

    def cend(self) -> "NCollection_Array1< Plate_PinpointConstraint >::const_iterator":
        return _Plate.Plate_Array1OfPinpointConstraint_cend(self)

    def __init__(self, *args):
        this = _Plate.new_Plate_Array1OfPinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'Plate_PinpointConstraint') -> "void":
        return _Plate.Plate_Array1OfPinpointConstraint_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _Plate.Plate_Array1OfPinpointConstraint_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Plate.Plate_Array1OfPinpointConstraint_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Plate.Plate_Array1OfPinpointConstraint_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _Plate.Plate_Array1OfPinpointConstraint_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Plate.Plate_Array1OfPinpointConstraint_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _Plate.Plate_Array1OfPinpointConstraint_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _Plate.Plate_Array1OfPinpointConstraint_IsAllocated(self)

    def Assign(self, theOther: 'Plate_Array1OfPinpointConstraint') -> "NCollection_Array1< Plate_PinpointConstraint > &":
        return _Plate.Plate_Array1OfPinpointConstraint_Assign(self, theOther)

    def Move(self, theOther: 'Plate_Array1OfPinpointConstraint') -> "NCollection_Array1< Plate_PinpointConstraint > &":
        return _Plate.Plate_Array1OfPinpointConstraint_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< Plate_PinpointConstraint > &":
        return _Plate.Plate_Array1OfPinpointConstraint_Set(self, *args)

    def First(self) -> "Plate_PinpointConstraint const &":
        return _Plate.Plate_Array1OfPinpointConstraint_First(self)

    def ChangeFirst(self) -> "Plate_PinpointConstraint &":
        return _Plate.Plate_Array1OfPinpointConstraint_ChangeFirst(self)

    def Last(self) -> "Plate_PinpointConstraint const &":
        return _Plate.Plate_Array1OfPinpointConstraint_Last(self)

    def ChangeLast(self) -> "Plate_PinpointConstraint &":
        return _Plate.Plate_Array1OfPinpointConstraint_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Plate_PinpointConstraint const &":
        return _Plate.Plate_Array1OfPinpointConstraint_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Plate_PinpointConstraint &":
        return _Plate.Plate_Array1OfPinpointConstraint_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Plate_PinpointConstraint &":
        return _Plate.Plate_Array1OfPinpointConstraint___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Plate_PinpointConstraint') -> "void":
        return _Plate.Plate_Array1OfPinpointConstraint_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _Plate.Plate_Array1OfPinpointConstraint_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _Plate.delete_Plate_Array1OfPinpointConstraint
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Plate_Array1OfPinpointConstraint_swigregister = _Plate.Plate_Array1OfPinpointConstraint_swigregister
Plate_Array1OfPinpointConstraint_swigregister(Plate_Array1OfPinpointConstraint)

class Plate_SequenceOfLinearScalarConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_SequenceOfLinearScalarConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_SequenceOfLinearScalarConstraint, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Plate_LinearScalarConstraint >::iterator":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_begin(self)

    def end(self) -> "NCollection_Sequence< Plate_LinearScalarConstraint >::iterator":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_end(self)

    def cbegin(self) -> "NCollection_Sequence< Plate_LinearScalarConstraint >::const_iterator":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Plate_LinearScalarConstraint >::const_iterator":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_cend(self)

    def __init__(self, *args):
        this = _Plate.new_Plate_SequenceOfLinearScalarConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Plate.Plate_SequenceOfLinearScalarConstraint_delNode)
    else:
        delNode = _Plate.Plate_SequenceOfLinearScalarConstraint_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Clear(self, theAllocator)

    def Assign(self, theOther: 'Plate_SequenceOfLinearScalarConstraint') -> "NCollection_Sequence< Plate_LinearScalarConstraint > &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Assign(self, theOther)

    def Set(self, theOther: 'Plate_SequenceOfLinearScalarConstraint') -> "NCollection_Sequence< Plate_LinearScalarConstraint > &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Plate_SequenceOfLinearScalarConstraint') -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Split(self, theIndex, theSeq)

    def First(self) -> "Plate_LinearScalarConstraint const &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_First(self)

    def ChangeFirst(self) -> "Plate_LinearScalarConstraint &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_ChangeFirst(self)

    def Last(self) -> "Plate_LinearScalarConstraint const &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Last(self)

    def ChangeLast(self) -> "Plate_LinearScalarConstraint &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Plate_LinearScalarConstraint const &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Plate_LinearScalarConstraint &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Plate_LinearScalarConstraint &":
        return _Plate.Plate_SequenceOfLinearScalarConstraint___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Plate_LinearScalarConstraint') -> "void":
        return _Plate.Plate_SequenceOfLinearScalarConstraint_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Plate.delete_Plate_SequenceOfLinearScalarConstraint
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Plate_SequenceOfLinearScalarConstraint_swigregister = _Plate.Plate_SequenceOfLinearScalarConstraint_swigregister
Plate_SequenceOfLinearScalarConstraint_swigregister(Plate_SequenceOfLinearScalarConstraint)

def Plate_SequenceOfLinearScalarConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Plate.Plate_SequenceOfLinearScalarConstraint_delNode(theNode, theAl)
Plate_SequenceOfLinearScalarConstraint_delNode = _Plate.Plate_SequenceOfLinearScalarConstraint_delNode

class Plate_SequenceOfLinearXYZConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_SequenceOfLinearXYZConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_SequenceOfLinearXYZConstraint, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Plate_LinearXYZConstraint >::iterator":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_begin(self)

    def end(self) -> "NCollection_Sequence< Plate_LinearXYZConstraint >::iterator":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_end(self)

    def cbegin(self) -> "NCollection_Sequence< Plate_LinearXYZConstraint >::const_iterator":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Plate_LinearXYZConstraint >::const_iterator":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_cend(self)

    def __init__(self, *args):
        this = _Plate.new_Plate_SequenceOfLinearXYZConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Plate.Plate_SequenceOfLinearXYZConstraint_delNode)
    else:
        delNode = _Plate.Plate_SequenceOfLinearXYZConstraint_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Clear(self, theAllocator)

    def Assign(self, theOther: 'Plate_SequenceOfLinearXYZConstraint') -> "NCollection_Sequence< Plate_LinearXYZConstraint > &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Assign(self, theOther)

    def Set(self, theOther: 'Plate_SequenceOfLinearXYZConstraint') -> "NCollection_Sequence< Plate_LinearXYZConstraint > &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Plate_SequenceOfLinearXYZConstraint') -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Split(self, theIndex, theSeq)

    def First(self) -> "Plate_LinearXYZConstraint const &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_First(self)

    def ChangeFirst(self) -> "Plate_LinearXYZConstraint &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_ChangeFirst(self)

    def Last(self) -> "Plate_LinearXYZConstraint const &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Last(self)

    def ChangeLast(self) -> "Plate_LinearXYZConstraint &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Plate_LinearXYZConstraint const &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Plate_LinearXYZConstraint &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Plate_LinearXYZConstraint &":
        return _Plate.Plate_SequenceOfLinearXYZConstraint___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Plate_LinearXYZConstraint') -> "void":
        return _Plate.Plate_SequenceOfLinearXYZConstraint_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Plate.delete_Plate_SequenceOfLinearXYZConstraint
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Plate_SequenceOfLinearXYZConstraint_swigregister = _Plate.Plate_SequenceOfLinearXYZConstraint_swigregister
Plate_SequenceOfLinearXYZConstraint_swigregister(Plate_SequenceOfLinearXYZConstraint)

def Plate_SequenceOfLinearXYZConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Plate.Plate_SequenceOfLinearXYZConstraint_delNode(theNode, theAl)
Plate_SequenceOfLinearXYZConstraint_delNode = _Plate.Plate_SequenceOfLinearXYZConstraint_delNode

class Plate_SequenceOfPinpointConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_SequenceOfPinpointConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_SequenceOfPinpointConstraint, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Plate_PinpointConstraint >::iterator":
        return _Plate.Plate_SequenceOfPinpointConstraint_begin(self)

    def end(self) -> "NCollection_Sequence< Plate_PinpointConstraint >::iterator":
        return _Plate.Plate_SequenceOfPinpointConstraint_end(self)

    def cbegin(self) -> "NCollection_Sequence< Plate_PinpointConstraint >::const_iterator":
        return _Plate.Plate_SequenceOfPinpointConstraint_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Plate_PinpointConstraint >::const_iterator":
        return _Plate.Plate_SequenceOfPinpointConstraint_cend(self)

    def __init__(self, *args):
        this = _Plate.new_Plate_SequenceOfPinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfPinpointConstraint_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfPinpointConstraint_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfPinpointConstraint_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Plate.Plate_SequenceOfPinpointConstraint_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Plate.Plate_SequenceOfPinpointConstraint_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Plate.Plate_SequenceOfPinpointConstraint_delNode)
    else:
        delNode = _Plate.Plate_SequenceOfPinpointConstraint_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_Clear(self, theAllocator)

    def Assign(self, theOther: 'Plate_SequenceOfPinpointConstraint') -> "NCollection_Sequence< Plate_PinpointConstraint > &":
        return _Plate.Plate_SequenceOfPinpointConstraint_Assign(self, theOther)

    def Set(self, theOther: 'Plate_SequenceOfPinpointConstraint') -> "NCollection_Sequence< Plate_PinpointConstraint > &":
        return _Plate.Plate_SequenceOfPinpointConstraint_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Plate_SequenceOfPinpointConstraint') -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_Split(self, theIndex, theSeq)

    def First(self) -> "Plate_PinpointConstraint const &":
        return _Plate.Plate_SequenceOfPinpointConstraint_First(self)

    def ChangeFirst(self) -> "Plate_PinpointConstraint &":
        return _Plate.Plate_SequenceOfPinpointConstraint_ChangeFirst(self)

    def Last(self) -> "Plate_PinpointConstraint const &":
        return _Plate.Plate_SequenceOfPinpointConstraint_Last(self)

    def ChangeLast(self) -> "Plate_PinpointConstraint &":
        return _Plate.Plate_SequenceOfPinpointConstraint_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Plate_PinpointConstraint const &":
        return _Plate.Plate_SequenceOfPinpointConstraint_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Plate_PinpointConstraint &":
        return _Plate.Plate_SequenceOfPinpointConstraint_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Plate_PinpointConstraint &":
        return _Plate.Plate_SequenceOfPinpointConstraint___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Plate_PinpointConstraint') -> "void":
        return _Plate.Plate_SequenceOfPinpointConstraint_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Plate.delete_Plate_SequenceOfPinpointConstraint
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Plate_SequenceOfPinpointConstraint_swigregister = _Plate.Plate_SequenceOfPinpointConstraint_swigregister
Plate_SequenceOfPinpointConstraint_swigregister(Plate_SequenceOfPinpointConstraint)

def Plate_SequenceOfPinpointConstraint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Plate.Plate_SequenceOfPinpointConstraint_delNode(theNode, theAl)
Plate_SequenceOfPinpointConstraint_delNode = _Plate.Plate_SequenceOfPinpointConstraint_delNode

class Plate_D1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_D1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_D1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        du: gp_XYZ
        dv: gp_XYZ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        ref: Plate_D1

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_D1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DU(self, *args) -> "gp_XYZ const":
        """
        No available documentation.

        Returns
        -------
        gp_XYZ

        """
        return _Plate.Plate_D1_DU(self, *args)


    def DV(self, *args) -> "gp_XYZ const":
        """
        No available documentation.

        Returns
        -------
        gp_XYZ

        """
        return _Plate.Plate_D1_DV(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_D1
    __del__ = lambda self: None
Plate_D1_swigregister = _Plate.Plate_D1_swigregister
Plate_D1_swigregister(Plate_D1)

class Plate_D2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_D2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_D2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        duu: gp_XYZ
        duv: gp_XYZ
        dvv: gp_XYZ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        ref: Plate_D2

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_D2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_D2
    __del__ = lambda self: None
Plate_D2_swigregister = _Plate.Plate_D2_swigregister
Plate_D2_swigregister(Plate_D2)

class Plate_D3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_D3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_D3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        duuu: gp_XYZ
        duuv: gp_XYZ
        duvv: gp_XYZ
        dvvv: gp_XYZ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        ref: Plate_D3

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_D3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_D3
    __del__ = lambda self: None
Plate_D3_swigregister = _Plate.Plate_D3_swigregister
Plate_D3_swigregister(Plate_D3)

class Plate_FreeGtoCConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_FreeGtoCConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_FreeGtoCConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1
        IncrementalLoad: float,optional
        	default value is 1.0
        orientation: int,optional
        	default value is 0

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1
        D2S: Plate_D2
        D2T: Plate_D2
        IncrementalLoad: float,optional
        	default value is 1.0
        orientation: int,optional
        	default value is 0

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1
        D2S: Plate_D2
        D2T: Plate_D2
        D3S: Plate_D3
        D3T: Plate_D3
        IncrementalLoad: float,optional
        	default value is 1.0
        orientation: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_FreeGtoCConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetPPC(self, *args) -> "Plate_PinpointConstraint const &":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Plate_PinpointConstraint

        """
        return _Plate.Plate_FreeGtoCConstraint_GetPPC(self, *args)


    def LSC(self, *args) -> "Plate_LinearScalarConstraint const &":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Plate_LinearScalarConstraint

        """
        return _Plate.Plate_FreeGtoCConstraint_LSC(self, *args)


    def nb_LSC(self, *args) -> "Standard_Integer const &":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Plate.Plate_FreeGtoCConstraint_nb_LSC(self, *args)


    def nb_PPC(self, *args) -> "Standard_Integer const &":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Plate.Plate_FreeGtoCConstraint_nb_PPC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_FreeGtoCConstraint
    __del__ = lambda self: None
Plate_FreeGtoCConstraint_swigregister = _Plate.Plate_FreeGtoCConstraint_swigregister
Plate_FreeGtoCConstraint_swigregister(Plate_FreeGtoCConstraint)

class Plate_GlobalTranslationConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_GlobalTranslationConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_GlobalTranslationConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        SOfXY: TColgp_SequenceOfXY

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_GlobalTranslationConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LXYZC(self, *args) -> "Plate_LinearXYZConstraint const &":
        """
        No available documentation.

        Returns
        -------
        Plate_LinearXYZConstraint

        """
        return _Plate.Plate_GlobalTranslationConstraint_LXYZC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_GlobalTranslationConstraint
    __del__ = lambda self: None
Plate_GlobalTranslationConstraint_swigregister = _Plate.Plate_GlobalTranslationConstraint_swigregister
Plate_GlobalTranslationConstraint_swigregister(Plate_GlobalTranslationConstraint)

class Plate_GtoCConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_GtoCConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_GtoCConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        ref: Plate_GtoCConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1
        nP: gp_XYZ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1
        D2S: Plate_D2
        D2T: Plate_D2

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1
        D2S: Plate_D2
        D2T: Plate_D2
        nP: gp_XYZ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1
        D2S: Plate_D2
        D2T: Plate_D2
        D3S: Plate_D3
        D3T: Plate_D3

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        D1S: Plate_D1
        D1T: Plate_D1
        D2S: Plate_D2
        D2T: Plate_D2
        D3S: Plate_D3
        D3T: Plate_D3
        nP: gp_XYZ

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_GtoCConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def D1SurfInit(self, *args) -> "Plate_D1 const &":
        """
        No available documentation.

        Returns
        -------
        Plate_D1

        """
        return _Plate.Plate_GtoCConstraint_D1SurfInit(self, *args)


    def GetPPC(self, *args) -> "Plate_PinpointConstraint const &":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Plate_PinpointConstraint

        """
        return _Plate.Plate_GtoCConstraint_GetPPC(self, *args)


    def nb_PPC(self, *args) -> "Standard_Integer const &":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Plate.Plate_GtoCConstraint_nb_PPC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_GtoCConstraint
    __del__ = lambda self: None
Plate_GtoCConstraint_swigregister = _Plate.Plate_GtoCConstraint_swigregister
Plate_GtoCConstraint_swigregister(Plate_GtoCConstraint)

class Plate_LineConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_LineConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_LineConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        lin: gp_Lin
        iu: int,optional
        	default value is 0
        iv: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_LineConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LSC(self, *args) -> "Plate_LinearScalarConstraint const &":
        """
        No available documentation.

        Returns
        -------
        Plate_LinearScalarConstraint

        """
        return _Plate.Plate_LineConstraint_LSC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_LineConstraint
    __del__ = lambda self: None
Plate_LineConstraint_swigregister = _Plate.Plate_LineConstraint_swigregister
Plate_LineConstraint_swigregister(Plate_LineConstraint)

class Plate_LinearScalarConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_LinearScalarConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_LinearScalarConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        thePPC1: Plate_PinpointConstraint
        theCoeff: gp_XYZ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        thePPC: Plate_Array1OfPinpointConstraint
        theCoeff: TColgp_Array1OfXYZ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        thePPC: Plate_Array1OfPinpointConstraint
        theCoeff: TColgp_Array2OfXYZ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        ColLen: int
        RowLen: int

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_LinearScalarConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Coeff(self, *args) -> "TColgp_Array2OfXYZ const &":
        """
        No available documentation.

        Returns
        -------
        TColgp_Array2OfXYZ

        """
        return _Plate.Plate_LinearScalarConstraint_Coeff(self, *args)


    def GetPPC(self, *args) -> "Plate_Array1OfPinpointConstraint const &":
        """
        No available documentation.

        Returns
        -------
        Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_LinearScalarConstraint_GetPPC(self, *args)


    def SetCoeff(self, *args) -> "void":
        """
        Sets the coeff of index (row,col) to value raise if row (respectively col) is greater than the row (respectively column) length of coeff.

        Parameters
        ----------
        Row: int
        Col: int
        Value: gp_XYZ

        Returns
        -------
        None

        """
        return _Plate.Plate_LinearScalarConstraint_SetCoeff(self, *args)


    def SetPPC(self, *args) -> "void":
        """
        Sets the pinpointconstraint of index index to value raise if index is greater than the length of ppc or the row length of coeff or lower than 1.

        Parameters
        ----------
        Index: int
        Value: Plate_PinpointConstraint

        Returns
        -------
        None

        """
        return _Plate.Plate_LinearScalarConstraint_SetPPC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_LinearScalarConstraint
    __del__ = lambda self: None
Plate_LinearScalarConstraint_swigregister = _Plate.Plate_LinearScalarConstraint_swigregister
Plate_LinearScalarConstraint_swigregister(Plate_LinearScalarConstraint)

class Plate_LinearXYZConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_LinearXYZConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_LinearXYZConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        thePPC: Plate_Array1OfPinpointConstraint
        theCoeff: TColStd_Array1OfReal

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        thePPC: Plate_Array1OfPinpointConstraint
        theCoeff: TColStd_Array2OfReal

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        ColLen: int
        RowLen: int

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_LinearXYZConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Coeff(self, *args) -> "TColStd_Array2OfReal const &":
        """
        No available documentation.

        Returns
        -------
        TColStd_Array2OfReal

        """
        return _Plate.Plate_LinearXYZConstraint_Coeff(self, *args)


    def GetPPC(self, *args) -> "Plate_Array1OfPinpointConstraint const &":
        """
        No available documentation.

        Returns
        -------
        Plate_Array1OfPinpointConstraint

        """
        return _Plate.Plate_LinearXYZConstraint_GetPPC(self, *args)


    def SetCoeff(self, *args) -> "void":
        """
        Sets the coeff of index (row,col) to value raise if row (respectively col) is greater than the row (respectively column) length of coeff.

        Parameters
        ----------
        Row: int
        Col: int
        Value: float

        Returns
        -------
        None

        """
        return _Plate.Plate_LinearXYZConstraint_SetCoeff(self, *args)


    def SetPPC(self, *args) -> "void":
        """
        Sets the pinpointconstraint of index index to value raise if index is greater than the length of ppc or the row length of coeff or lower than 1.

        Parameters
        ----------
        Index: int
        Value: Plate_PinpointConstraint

        Returns
        -------
        None

        """
        return _Plate.Plate_LinearXYZConstraint_SetPPC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_LinearXYZConstraint
    __del__ = lambda self: None
Plate_LinearXYZConstraint_swigregister = _Plate.Plate_LinearXYZConstraint_swigregister
Plate_LinearXYZConstraint_swigregister(Plate_LinearXYZConstraint)

class Plate_PinpointConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_PinpointConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_PinpointConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        ImposedValue: gp_XYZ
        iu: int,optional
        	default value is 0
        iv: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_PinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Idu(self, *args) -> "Standard_Integer const &":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Plate.Plate_PinpointConstraint_Idu(self, *args)


    def Idv(self, *args) -> "Standard_Integer const &":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Plate.Plate_PinpointConstraint_Idv(self, *args)


    def Pnt2d(self, *args) -> "gp_XY const":
        """
        No available documentation.

        Returns
        -------
        gp_XY

        """
        return _Plate.Plate_PinpointConstraint_Pnt2d(self, *args)


    def Value(self, *args) -> "gp_XYZ const":
        """
        No available documentation.

        Returns
        -------
        gp_XYZ

        """
        return _Plate.Plate_PinpointConstraint_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_PinpointConstraint
    __del__ = lambda self: None
Plate_PinpointConstraint_swigregister = _Plate.Plate_PinpointConstraint_swigregister
Plate_PinpointConstraint_swigregister(Plate_PinpointConstraint)

class Plate_PlaneConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_PlaneConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_PlaneConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        pln: gp_Pln
        iu: int,optional
        	default value is 0
        iv: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_PlaneConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LSC(self, *args) -> "Plate_LinearScalarConstraint const &":
        """
        No available documentation.

        Returns
        -------
        Plate_LinearScalarConstraint

        """
        return _Plate.Plate_PlaneConstraint_LSC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_PlaneConstraint
    __del__ = lambda self: None
Plate_PlaneConstraint_swigregister = _Plate.Plate_PlaneConstraint_swigregister
Plate_PlaneConstraint_swigregister(Plate_PlaneConstraint)

class Plate_Plate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_Plate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_Plate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Ref: Plate_Plate

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_Plate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CoefPol(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Coefs: TColgp_HArray2OfXYZ

        Returns
        -------
        None

        """
        return _Plate.Plate_Plate_CoefPol(self, *args)


    def Continuity(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Plate.Plate_Plate_Continuity(self, *args)


    def Copy(self, *args) -> "Plate_Plate &":
        """
        No available documentation.

        Parameters
        ----------
        Ref: Plate_Plate

        Returns
        -------
        Plate_Plate

        """
        return _Plate.Plate_Plate_Copy(self, *args)


    def Evaluate(self, *args) -> "gp_XYZ":
        """
        No available documentation.

        Parameters
        ----------
        point2d: gp_XY

        Returns
        -------
        gp_XYZ

        """
        return _Plate.Plate_Plate_Evaluate(self, *args)


    def EvaluateDerivative(self, *args) -> "gp_XYZ":
        """
        No available documentation.

        Parameters
        ----------
        point2d: gp_XY
        iu: int
        iv: int

        Returns
        -------
        gp_XYZ

        """
        return _Plate.Plate_Plate_EvaluateDerivative(self, *args)


    def Init(self, *args) -> "void":
        """
        Reset the plate in the initial state ( same as after create()).

        Returns
        -------
        None

        """
        return _Plate.Plate_Plate_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns true if all has been correctly done.

        Returns
        -------
        bool

        """
        return _Plate.Plate_Plate_IsDone(self, *args)


    def Load(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        PConst: Plate_PinpointConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        LXYZConst: Plate_LinearXYZConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        LScalarConst: Plate_LinearScalarConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        GTConst: Plate_GlobalTranslationConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        LConst: Plate_LineConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        PConst: Plate_PlaneConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        SCConst: Plate_SampledCurveConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        GtoCConst: Plate_GtoCConstraint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        FGtoCConst: Plate_FreeGtoCConstraint

        Returns
        -------
        None

        """
        return _Plate.Plate_Plate_Load(self, *args)


    def SetPolynomialPartOnly(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        PPOnly: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _Plate.Plate_Plate_SetPolynomialPartOnly(self, *args)


    def SolveTI(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ord: int,optional
        	default value is 4
        anisotropie: float,optional
        	default value is 1.0
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _Plate.Plate_Plate_SolveTI(self, *args)


    def UVBox(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        UMin: float
        UMax: float
        VMin: float
        VMax: float

        """
        return _Plate.Plate_Plate_UVBox(self, *args)


    def UVConstraints(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Seq: TColgp_SequenceOfXY

        Returns
        -------
        None

        """
        return _Plate.Plate_Plate_UVConstraints(self, *args)


    def destroy(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Plate.Plate_Plate_destroy(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_Plate
    __del__ = lambda self: None
Plate_Plate_swigregister = _Plate.Plate_Plate_swigregister
Plate_Plate_swigregister(Plate_Plate)

class Plate_SampledCurveConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_SampledCurveConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_SampledCurveConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        SOPPC: Plate_SequenceOfPinpointConstraint
        n: int

        Returns
        -------
        None

        """
        this = _Plate.new_Plate_SampledCurveConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LXYZC(self, *args) -> "Plate_LinearXYZConstraint const &":
        """
        No available documentation.

        Returns
        -------
        Plate_LinearXYZConstraint

        """
        return _Plate.Plate_SampledCurveConstraint_LXYZC(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Plate.delete_Plate_SampledCurveConstraint
    __del__ = lambda self: None
Plate_SampledCurveConstraint_swigregister = _Plate.Plate_SampledCurveConstraint_swigregister
Plate_SampledCurveConstraint_swigregister(Plate_SampledCurveConstraint)

class Plate_HArray1OfPinpointConstraint(Plate_Array1OfPinpointConstraint, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [Plate_Array1OfPinpointConstraint, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plate_HArray1OfPinpointConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Plate_Array1OfPinpointConstraint, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Plate_HArray1OfPinpointConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Plate.new_Plate_HArray1OfPinpointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "Plate_Array1OfPinpointConstraint const &":
        return _Plate.Plate_HArray1OfPinpointConstraint_Array1(self)

    def ChangeArray1(self) -> "Plate_Array1OfPinpointConstraint &":
        return _Plate.Plate_HArray1OfPinpointConstraint_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_Plate_HArray1OfPinpointConstraint_DownCast(t)

    __swig_destroy__ = _Plate.delete_Plate_HArray1OfPinpointConstraint
    __del__ = lambda self: None
Plate_HArray1OfPinpointConstraint_swigregister = _Plate.Plate_HArray1OfPinpointConstraint_swigregister
Plate_HArray1OfPinpointConstraint_swigregister(Plate_HArray1OfPinpointConstraint)



# This file is compatible with both classic and new-style classes.


