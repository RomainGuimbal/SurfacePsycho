# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TShort module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tshort.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TShort')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TShort')
    _TShort = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TShort', [dirname(__file__)])
        except ImportError:
            import _TShort
            return _TShort
        try:
            _mod = imp.load_module('_TShort', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TShort = swig_import_helper()
    del swig_import_helper
else:
    import _TShort
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TShort.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TShort.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TShort.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TShort.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TShort.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TShort.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TShort.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TShort.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TShort.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TShort.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TShort.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TShort.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TShort.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TShort.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TShort.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TShort.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TShort.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TShort.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TShort.process_exception(error, method_name, class_name)
process_exception = _TShort.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_TShort_HArray1OfShortReal_Create() -> "opencascade::handle< TShort_HArray1OfShortReal >":
    return _TShort.Handle_TShort_HArray1OfShortReal_Create()
Handle_TShort_HArray1OfShortReal_Create = _TShort.Handle_TShort_HArray1OfShortReal_Create

def Handle_TShort_HArray1OfShortReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TShort_HArray1OfShortReal >":
    return _TShort.Handle_TShort_HArray1OfShortReal_DownCast(t)
Handle_TShort_HArray1OfShortReal_DownCast = _TShort.Handle_TShort_HArray1OfShortReal_DownCast

def Handle_TShort_HArray1OfShortReal_IsNull(t: 'opencascade::handle< TShort_HArray1OfShortReal > const &') -> "bool":
    return _TShort.Handle_TShort_HArray1OfShortReal_IsNull(t)
Handle_TShort_HArray1OfShortReal_IsNull = _TShort.Handle_TShort_HArray1OfShortReal_IsNull

def Handle_TShort_HArray2OfShortReal_Create() -> "opencascade::handle< TShort_HArray2OfShortReal >":
    return _TShort.Handle_TShort_HArray2OfShortReal_Create()
Handle_TShort_HArray2OfShortReal_Create = _TShort.Handle_TShort_HArray2OfShortReal_Create

def Handle_TShort_HArray2OfShortReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TShort_HArray2OfShortReal >":
    return _TShort.Handle_TShort_HArray2OfShortReal_DownCast(t)
Handle_TShort_HArray2OfShortReal_DownCast = _TShort.Handle_TShort_HArray2OfShortReal_DownCast

def Handle_TShort_HArray2OfShortReal_IsNull(t: 'opencascade::handle< TShort_HArray2OfShortReal > const &') -> "bool":
    return _TShort.Handle_TShort_HArray2OfShortReal_IsNull(t)
Handle_TShort_HArray2OfShortReal_IsNull = _TShort.Handle_TShort_HArray2OfShortReal_IsNull

def Handle_TShort_HSequenceOfShortReal_Create() -> "opencascade::handle< TShort_HSequenceOfShortReal >":
    return _TShort.Handle_TShort_HSequenceOfShortReal_Create()
Handle_TShort_HSequenceOfShortReal_Create = _TShort.Handle_TShort_HSequenceOfShortReal_Create

def Handle_TShort_HSequenceOfShortReal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TShort_HSequenceOfShortReal >":
    return _TShort.Handle_TShort_HSequenceOfShortReal_DownCast(t)
Handle_TShort_HSequenceOfShortReal_DownCast = _TShort.Handle_TShort_HSequenceOfShortReal_DownCast

def Handle_TShort_HSequenceOfShortReal_IsNull(t: 'opencascade::handle< TShort_HSequenceOfShortReal > const &') -> "bool":
    return _TShort.Handle_TShort_HSequenceOfShortReal_IsNull(t)
Handle_TShort_HSequenceOfShortReal_IsNull = _TShort.Handle_TShort_HSequenceOfShortReal_IsNull
class TShort_Array1OfShortReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TShort_Array1OfShortReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TShort_Array1OfShortReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< float >::iterator":
        return _TShort.TShort_Array1OfShortReal_begin(self)

    def end(self) -> "NCollection_Array1< float >::iterator":
        return _TShort.TShort_Array1OfShortReal_end(self)

    def cbegin(self) -> "NCollection_Array1< float >::const_iterator":
        return _TShort.TShort_Array1OfShortReal_cbegin(self)

    def cend(self) -> "NCollection_Array1< float >::const_iterator":
        return _TShort.TShort_Array1OfShortReal_cend(self)

    def __init__(self, *args):
        this = _TShort.new_TShort_Array1OfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'float const &') -> "void":
        return _TShort.TShort_Array1OfShortReal_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TShort.TShort_Array1OfShortReal_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TShort.TShort_Array1OfShortReal_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TShort.TShort_Array1OfShortReal_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TShort.TShort_Array1OfShortReal_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TShort.TShort_Array1OfShortReal_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TShort.TShort_Array1OfShortReal_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TShort.TShort_Array1OfShortReal_IsAllocated(self)

    def Assign(self, theOther: 'TShort_Array1OfShortReal') -> "NCollection_Array1< Standard_ShortReal > &":
        return _TShort.TShort_Array1OfShortReal_Assign(self, theOther)

    def Move(self, theOther: 'TShort_Array1OfShortReal') -> "NCollection_Array1< Standard_ShortReal > &":
        return _TShort.TShort_Array1OfShortReal_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< Standard_ShortReal > &":
        return _TShort.TShort_Array1OfShortReal_Set(self, *args)

    def First(self) -> "float const &":
        return _TShort.TShort_Array1OfShortReal_First(self)

    def ChangeFirst(self) -> "float &":
        return _TShort.TShort_Array1OfShortReal_ChangeFirst(self)

    def Last(self) -> "float const &":
        return _TShort.TShort_Array1OfShortReal_Last(self)

    def ChangeLast(self) -> "float &":
        return _TShort.TShort_Array1OfShortReal_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "float const &":
        return _TShort.TShort_Array1OfShortReal_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "float &":
        return _TShort.TShort_Array1OfShortReal_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "float &":
        return _TShort.TShort_Array1OfShortReal___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'float const &') -> "void":
        return _TShort.TShort_Array1OfShortReal_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TShort.TShort_Array1OfShortReal_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TShort.delete_TShort_Array1OfShortReal
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TShort_Array1OfShortReal_swigregister = _TShort.TShort_Array1OfShortReal_swigregister
TShort_Array1OfShortReal_swigregister(TShort_Array1OfShortReal)

class TShort_Array2OfShortReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TShort_Array2OfShortReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TShort_Array2OfShortReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TShort.new_TShort_Array2OfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'float const &') -> "void":
        return _TShort.TShort_Array2OfShortReal_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TShort.TShort_Array2OfShortReal_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TShort.TShort_Array2OfShortReal_IsDeletable(self)

    def Assign(self, theOther: 'TShort_Array2OfShortReal') -> "NCollection_Array2< Standard_ShortReal > &":
        return _TShort.TShort_Array2OfShortReal_Assign(self, theOther)

    def Move(self, theOther: 'TShort_Array2OfShortReal') -> "NCollection_Array2< Standard_ShortReal > &":
        return _TShort.TShort_Array2OfShortReal_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< Standard_ShortReal > &":
        return _TShort.TShort_Array2OfShortReal_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "float const &":
        return _TShort.TShort_Array2OfShortReal_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "float &":
        return _TShort.TShort_Array2OfShortReal_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "float &":
        return _TShort.TShort_Array2OfShortReal___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'float const &') -> "void":
        return _TShort.TShort_Array2OfShortReal_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TShort.TShort_Array2OfShortReal_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TShort.delete_TShort_Array2OfShortReal
    __del__ = lambda self: None
TShort_Array2OfShortReal_swigregister = _TShort.TShort_Array2OfShortReal_swigregister
TShort_Array2OfShortReal_swigregister(TShort_Array2OfShortReal)

class TShort_SequenceOfShortReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TShort_SequenceOfShortReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TShort_SequenceOfShortReal, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< float >::iterator":
        return _TShort.TShort_SequenceOfShortReal_begin(self)

    def end(self) -> "NCollection_Sequence< float >::iterator":
        return _TShort.TShort_SequenceOfShortReal_end(self)

    def cbegin(self) -> "NCollection_Sequence< float >::const_iterator":
        return _TShort.TShort_SequenceOfShortReal_cbegin(self)

    def cend(self) -> "NCollection_Sequence< float >::const_iterator":
        return _TShort.TShort_SequenceOfShortReal_cend(self)

    def __init__(self, *args):
        this = _TShort.new_TShort_SequenceOfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TShort.TShort_SequenceOfShortReal_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TShort.TShort_SequenceOfShortReal_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TShort.TShort_SequenceOfShortReal_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TShort.TShort_SequenceOfShortReal_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TShort.TShort_SequenceOfShortReal_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TShort.TShort_SequenceOfShortReal_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TShort.TShort_SequenceOfShortReal_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TShort.TShort_SequenceOfShortReal_delNode)
    else:
        delNode = _TShort.TShort_SequenceOfShortReal_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TShort.TShort_SequenceOfShortReal_Clear(self, theAllocator)

    def Assign(self, theOther: 'TShort_SequenceOfShortReal') -> "NCollection_Sequence< Standard_ShortReal > &":
        return _TShort.TShort_SequenceOfShortReal_Assign(self, theOther)

    def Set(self, theOther: 'TShort_SequenceOfShortReal') -> "NCollection_Sequence< Standard_ShortReal > &":
        return _TShort.TShort_SequenceOfShortReal_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TShort.TShort_SequenceOfShortReal_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TShort.TShort_SequenceOfShortReal_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TShort.TShort_SequenceOfShortReal_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TShort.TShort_SequenceOfShortReal_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TShort.TShort_SequenceOfShortReal_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TShort_SequenceOfShortReal') -> "void":
        return _TShort.TShort_SequenceOfShortReal_Split(self, theIndex, theSeq)

    def First(self) -> "float const &":
        return _TShort.TShort_SequenceOfShortReal_First(self)

    def ChangeFirst(self) -> "float &":
        return _TShort.TShort_SequenceOfShortReal_ChangeFirst(self)

    def Last(self) -> "float const &":
        return _TShort.TShort_SequenceOfShortReal_Last(self)

    def ChangeLast(self) -> "float &":
        return _TShort.TShort_SequenceOfShortReal_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "float const &":
        return _TShort.TShort_SequenceOfShortReal_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "float &":
        return _TShort.TShort_SequenceOfShortReal_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "float &":
        return _TShort.TShort_SequenceOfShortReal___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'float const &') -> "void":
        return _TShort.TShort_SequenceOfShortReal_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TShort.delete_TShort_SequenceOfShortReal
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TShort_SequenceOfShortReal_swigregister = _TShort.TShort_SequenceOfShortReal_swigregister
TShort_SequenceOfShortReal_swigregister(TShort_SequenceOfShortReal)

def TShort_SequenceOfShortReal_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TShort.TShort_SequenceOfShortReal_delNode(theNode, theAl)
TShort_SequenceOfShortReal_delNode = _TShort.TShort_SequenceOfShortReal_delNode

class TShort_HArray1OfShortReal(TShort_Array1OfShortReal, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TShort_Array1OfShortReal, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TShort_HArray1OfShortReal, name, value)
    __swig_getmethods__ = {}
    for _s in [TShort_Array1OfShortReal, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TShort_HArray1OfShortReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TShort.new_TShort_HArray1OfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TShort_Array1OfShortReal const &":
        return _TShort.TShort_HArray1OfShortReal_Array1(self)

    def ChangeArray1(self) -> "TShort_Array1OfShortReal &":
        return _TShort.TShort_HArray1OfShortReal_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HArray1OfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HArray1OfShortReal
    __del__ = lambda self: None
TShort_HArray1OfShortReal_swigregister = _TShort.TShort_HArray1OfShortReal_swigregister
TShort_HArray1OfShortReal_swigregister(TShort_HArray1OfShortReal)

class TShort_HArray2OfShortReal(TShort_Array2OfShortReal, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TShort_Array2OfShortReal, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TShort_HArray2OfShortReal, name, value)
    __swig_getmethods__ = {}
    for _s in [TShort_Array2OfShortReal, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TShort_HArray2OfShortReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TShort.new_TShort_HArray2OfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array2(self) -> "TShort_Array2OfShortReal const &":
        return _TShort.TShort_HArray2OfShortReal_Array2(self)

    def ChangeArray2(self) -> "TShort_Array2OfShortReal &":
        return _TShort.TShort_HArray2OfShortReal_ChangeArray2(self)


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HArray2OfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HArray2OfShortReal
    __del__ = lambda self: None
TShort_HArray2OfShortReal_swigregister = _TShort.TShort_HArray2OfShortReal_swigregister
TShort_HArray2OfShortReal_swigregister(TShort_HArray2OfShortReal)

class TShort_HSequenceOfShortReal(TShort_SequenceOfShortReal, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TShort_SequenceOfShortReal, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TShort_HSequenceOfShortReal, name, value)
    __swig_getmethods__ = {}
    for _s in [TShort_SequenceOfShortReal, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TShort_HSequenceOfShortReal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TShort.new_TShort_HSequenceOfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TShort_SequenceOfShortReal const &":
        return _TShort.TShort_HSequenceOfShortReal_Sequence(self)

    def Append(self, *args) -> "void":
        return _TShort.TShort_HSequenceOfShortReal_Append(self, *args)

    def ChangeSequence(self) -> "TShort_SequenceOfShortReal &":
        return _TShort.TShort_HSequenceOfShortReal_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TShort_HSequenceOfShortReal_DownCast(t)

    __swig_destroy__ = _TShort.delete_TShort_HSequenceOfShortReal
    __del__ = lambda self: None
TShort_HSequenceOfShortReal_swigregister = _TShort.TShort_HSequenceOfShortReal_swigregister
TShort_HSequenceOfShortReal_swigregister(TShort_HSequenceOfShortReal)



# This file is compatible with both classic and new-style classes.


