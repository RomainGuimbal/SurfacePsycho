# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
DsgPrs module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_dsgprs.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DsgPrs
else:
    import _DsgPrs

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DsgPrs.delete_SwigPyIterator

    def value(self):
        return _DsgPrs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DsgPrs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DsgPrs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DsgPrs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DsgPrs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DsgPrs.SwigPyIterator_copy(self)

    def next(self):
        return _DsgPrs.SwigPyIterator_next(self)

    def __next__(self):
        return _DsgPrs.SwigPyIterator___next__(self)

    def previous(self):
        return _DsgPrs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DsgPrs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DsgPrs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DsgPrs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DsgPrs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DsgPrs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DsgPrs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DsgPrs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DsgPrs:
_DsgPrs.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _DsgPrs.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection

from enum import IntEnum
from OCC.Core.Exception import *

DsgPrs_AS_NONE = _DsgPrs.DsgPrs_AS_NONE
DsgPrs_AS_FIRSTAR = _DsgPrs.DsgPrs_AS_FIRSTAR
DsgPrs_AS_LASTAR = _DsgPrs.DsgPrs_AS_LASTAR
DsgPrs_AS_BOTHAR = _DsgPrs.DsgPrs_AS_BOTHAR
DsgPrs_AS_FIRSTPT = _DsgPrs.DsgPrs_AS_FIRSTPT
DsgPrs_AS_LASTPT = _DsgPrs.DsgPrs_AS_LASTPT
DsgPrs_AS_BOTHPT = _DsgPrs.DsgPrs_AS_BOTHPT
DsgPrs_AS_FIRSTAR_LASTPT = _DsgPrs.DsgPrs_AS_FIRSTAR_LASTPT
DsgPrs_AS_FIRSTPT_LASTAR = _DsgPrs.DsgPrs_AS_FIRSTPT_LASTAR


class DsgPrs_ArrowSide(IntEnum):
	DsgPrs_AS_NONE = 0
	DsgPrs_AS_FIRSTAR = 1
	DsgPrs_AS_LASTAR = 2
	DsgPrs_AS_BOTHAR = 3
	DsgPrs_AS_FIRSTPT = 4
	DsgPrs_AS_LASTPT = 5
	DsgPrs_AS_BOTHPT = 6
	DsgPrs_AS_FIRSTAR_LASTPT = 7
	DsgPrs_AS_FIRSTPT_LASTAR = 8
DsgPrs_AS_NONE = DsgPrs_ArrowSide.DsgPrs_AS_NONE
DsgPrs_AS_FIRSTAR = DsgPrs_ArrowSide.DsgPrs_AS_FIRSTAR
DsgPrs_AS_LASTAR = DsgPrs_ArrowSide.DsgPrs_AS_LASTAR
DsgPrs_AS_BOTHAR = DsgPrs_ArrowSide.DsgPrs_AS_BOTHAR
DsgPrs_AS_FIRSTPT = DsgPrs_ArrowSide.DsgPrs_AS_FIRSTPT
DsgPrs_AS_LASTPT = DsgPrs_ArrowSide.DsgPrs_AS_LASTPT
DsgPrs_AS_BOTHPT = DsgPrs_ArrowSide.DsgPrs_AS_BOTHPT
DsgPrs_AS_FIRSTAR_LASTPT = DsgPrs_ArrowSide.DsgPrs_AS_FIRSTAR_LASTPT
DsgPrs_AS_FIRSTPT_LASTAR = DsgPrs_ArrowSide.DsgPrs_AS_FIRSTPT_LASTAR


@classnotwrapped
class DsgPrs_EqualRadiusPresentation:
	pass

@classnotwrapped
class DsgPrs_DiameterPresentation:
	pass

@classnotwrapped
class DsgPrs_DatumPrs:
	pass

@classnotwrapped
class DsgPrs_EqualDistancePresentation:
	pass

@classnotwrapped
class DsgPrs_OffsetPresentation:
	pass

@classnotwrapped
class DsgPrs_FixPresentation:
	pass

@classnotwrapped
class DsgPrs_SymmetricPresentation:
	pass

@classnotwrapped
class DsgPrs_AnglePresentation:
	pass

@classnotwrapped
class DsgPrs_SymbPresentation:
	pass

@classnotwrapped
class DsgPrs_LengthPresentation:
	pass

@classnotwrapped
class DsgPrs_PerpenPresentation:
	pass

@classnotwrapped
class DsgPrs_FilletRadiusPresentation:
	pass

@classnotwrapped
class DsgPrs_Chamf2dPresentation:
	pass

@classnotwrapped
class DsgPrs_XYZPlanePresentation:
	pass

@classnotwrapped
class DsgPrs_EllipseRadiusPresentation:
	pass

@classnotwrapped
class DsgPrs_MidPointPresentation:
	pass

@classnotwrapped
class DsgPrs_RadiusPresentation:
	pass

@classnotwrapped
class DsgPrs_ParalPresentation:
	pass

@classnotwrapped
class DsgPrs_TangentPresentation:
	pass

@classnotwrapped
class DsgPrs_ShapeDirPresentation:
	pass

@classnotwrapped
class DsgPrs_ShadedPlanePresentation:
	pass

@classnotwrapped
class DsgPrs_IdenticPresentation:
	pass

@classnotwrapped
class DsgPrs_ConcentricPresentation:
	pass

@classnotwrapped
class DsgPrs_XYZAxisPresentation:
	pass

@classnotwrapped
class DsgPrs:
	pass





