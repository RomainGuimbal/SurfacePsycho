# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GccInt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_gccint.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GccInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GccInt')
    _GccInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GccInt', [dirname(__file__)])
        except ImportError:
            import _GccInt
            return _GccInt
        try:
            _mod = imp.load_module('_GccInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GccInt = swig_import_helper()
    del swig_import_helper
else:
    import _GccInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GccInt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _GccInt.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GccInt.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GccInt.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _GccInt.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _GccInt.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _GccInt.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _GccInt.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _GccInt.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _GccInt.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GccInt.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _GccInt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _GccInt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GccInt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GccInt.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GccInt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _GccInt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GccInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GccInt.process_exception(error, method_name, class_name)
process_exception = _GccInt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *

GccInt_Lin = _GccInt.GccInt_Lin
GccInt_Cir = _GccInt.GccInt_Cir
GccInt_Ell = _GccInt.GccInt_Ell
GccInt_Par = _GccInt.GccInt_Par
GccInt_Hpr = _GccInt.GccInt_Hpr
GccInt_Pnt = _GccInt.GccInt_Pnt


class GccInt_IType(IntEnum):
	GccInt_Lin = 0
	GccInt_Cir = 1
	GccInt_Ell = 2
	GccInt_Par = 3
	GccInt_Hpr = 4
	GccInt_Pnt = 5
GccInt_Lin = GccInt_IType.GccInt_Lin
GccInt_Cir = GccInt_IType.GccInt_Cir
GccInt_Ell = GccInt_IType.GccInt_Ell
GccInt_Par = GccInt_IType.GccInt_Par
GccInt_Hpr = GccInt_IType.GccInt_Hpr
GccInt_Pnt = GccInt_IType.GccInt_Pnt


def Handle_GccInt_Bisec_Create() -> "opencascade::handle< GccInt_Bisec >":
    return _GccInt.Handle_GccInt_Bisec_Create()
Handle_GccInt_Bisec_Create = _GccInt.Handle_GccInt_Bisec_Create

def Handle_GccInt_Bisec_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_Bisec >":
    return _GccInt.Handle_GccInt_Bisec_DownCast(t)
Handle_GccInt_Bisec_DownCast = _GccInt.Handle_GccInt_Bisec_DownCast

def Handle_GccInt_Bisec_IsNull(t: 'opencascade::handle< GccInt_Bisec > const &') -> "bool":
    return _GccInt.Handle_GccInt_Bisec_IsNull(t)
Handle_GccInt_Bisec_IsNull = _GccInt.Handle_GccInt_Bisec_IsNull

def Handle_GccInt_BCirc_Create() -> "opencascade::handle< GccInt_BCirc >":
    return _GccInt.Handle_GccInt_BCirc_Create()
Handle_GccInt_BCirc_Create = _GccInt.Handle_GccInt_BCirc_Create

def Handle_GccInt_BCirc_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BCirc >":
    return _GccInt.Handle_GccInt_BCirc_DownCast(t)
Handle_GccInt_BCirc_DownCast = _GccInt.Handle_GccInt_BCirc_DownCast

def Handle_GccInt_BCirc_IsNull(t: 'opencascade::handle< GccInt_BCirc > const &') -> "bool":
    return _GccInt.Handle_GccInt_BCirc_IsNull(t)
Handle_GccInt_BCirc_IsNull = _GccInt.Handle_GccInt_BCirc_IsNull

def Handle_GccInt_BElips_Create() -> "opencascade::handle< GccInt_BElips >":
    return _GccInt.Handle_GccInt_BElips_Create()
Handle_GccInt_BElips_Create = _GccInt.Handle_GccInt_BElips_Create

def Handle_GccInt_BElips_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BElips >":
    return _GccInt.Handle_GccInt_BElips_DownCast(t)
Handle_GccInt_BElips_DownCast = _GccInt.Handle_GccInt_BElips_DownCast

def Handle_GccInt_BElips_IsNull(t: 'opencascade::handle< GccInt_BElips > const &') -> "bool":
    return _GccInt.Handle_GccInt_BElips_IsNull(t)
Handle_GccInt_BElips_IsNull = _GccInt.Handle_GccInt_BElips_IsNull

def Handle_GccInt_BHyper_Create() -> "opencascade::handle< GccInt_BHyper >":
    return _GccInt.Handle_GccInt_BHyper_Create()
Handle_GccInt_BHyper_Create = _GccInt.Handle_GccInt_BHyper_Create

def Handle_GccInt_BHyper_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BHyper >":
    return _GccInt.Handle_GccInt_BHyper_DownCast(t)
Handle_GccInt_BHyper_DownCast = _GccInt.Handle_GccInt_BHyper_DownCast

def Handle_GccInt_BHyper_IsNull(t: 'opencascade::handle< GccInt_BHyper > const &') -> "bool":
    return _GccInt.Handle_GccInt_BHyper_IsNull(t)
Handle_GccInt_BHyper_IsNull = _GccInt.Handle_GccInt_BHyper_IsNull

def Handle_GccInt_BLine_Create() -> "opencascade::handle< GccInt_BLine >":
    return _GccInt.Handle_GccInt_BLine_Create()
Handle_GccInt_BLine_Create = _GccInt.Handle_GccInt_BLine_Create

def Handle_GccInt_BLine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BLine >":
    return _GccInt.Handle_GccInt_BLine_DownCast(t)
Handle_GccInt_BLine_DownCast = _GccInt.Handle_GccInt_BLine_DownCast

def Handle_GccInt_BLine_IsNull(t: 'opencascade::handle< GccInt_BLine > const &') -> "bool":
    return _GccInt.Handle_GccInt_BLine_IsNull(t)
Handle_GccInt_BLine_IsNull = _GccInt.Handle_GccInt_BLine_IsNull

def Handle_GccInt_BParab_Create() -> "opencascade::handle< GccInt_BParab >":
    return _GccInt.Handle_GccInt_BParab_Create()
Handle_GccInt_BParab_Create = _GccInt.Handle_GccInt_BParab_Create

def Handle_GccInt_BParab_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BParab >":
    return _GccInt.Handle_GccInt_BParab_DownCast(t)
Handle_GccInt_BParab_DownCast = _GccInt.Handle_GccInt_BParab_DownCast

def Handle_GccInt_BParab_IsNull(t: 'opencascade::handle< GccInt_BParab > const &') -> "bool":
    return _GccInt.Handle_GccInt_BParab_IsNull(t)
Handle_GccInt_BParab_IsNull = _GccInt.Handle_GccInt_BParab_IsNull

def Handle_GccInt_BPoint_Create() -> "opencascade::handle< GccInt_BPoint >":
    return _GccInt.Handle_GccInt_BPoint_Create()
Handle_GccInt_BPoint_Create = _GccInt.Handle_GccInt_BPoint_Create

def Handle_GccInt_BPoint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< GccInt_BPoint >":
    return _GccInt.Handle_GccInt_BPoint_DownCast(t)
Handle_GccInt_BPoint_DownCast = _GccInt.Handle_GccInt_BPoint_DownCast

def Handle_GccInt_BPoint_IsNull(t: 'opencascade::handle< GccInt_BPoint > const &') -> "bool":
    return _GccInt.Handle_GccInt_BPoint_IsNull(t)
Handle_GccInt_BPoint_IsNull = _GccInt.Handle_GccInt_BPoint_IsNull
class GccInt_Bisec(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccInt_Bisec, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GccInt_Bisec, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ArcType(self, *args) -> "GccInt_IType":
        """
        Returns the type of bisecting object (line, circle, parabola, hyperbola, ellipse, point).

        Returns
        -------
        GccInt_IType

        """
        return _GccInt.GccInt_Bisec_ArcType(self, *args)


    def Circle(self, *args) -> "gp_Circ2d":
        """
        Returns the bisecting line when arctype returns cir. an exception domainerror is raised if arctype is not a cir.

        Returns
        -------
        gp_Circ2d

        """
        return _GccInt.GccInt_Bisec_Circle(self, *args)


    def Ellipse(self, *args) -> "gp_Elips2d":
        """
        Returns the bisecting line when arctype returns ell. an exception domainerror is raised if arctype is not an ell.

        Returns
        -------
        gp_Elips2d

        """
        return _GccInt.GccInt_Bisec_Ellipse(self, *args)


    def Hyperbola(self, *args) -> "gp_Hypr2d":
        """
        Returns the bisecting line when arctype returns hpr. an exception domainerror is raised if arctype is not a hpr.

        Returns
        -------
        gp_Hypr2d

        """
        return _GccInt.GccInt_Bisec_Hyperbola(self, *args)


    def Line(self, *args) -> "gp_Lin2d":
        """
        Returns the bisecting line when arctype returns lin. an exception domainerror is raised if arctype is not a lin.

        Returns
        -------
        gp_Lin2d

        """
        return _GccInt.GccInt_Bisec_Line(self, *args)


    def Parabola(self, *args) -> "gp_Parab2d":
        """
        Returns the bisecting line when arctype returns par. an exception domainerror is raised if arctype is not a par.

        Returns
        -------
        gp_Parab2d

        """
        return _GccInt.GccInt_Bisec_Parabola(self, *args)


    def Point(self, *args) -> "gp_Pnt2d":
        """
        Returns the bisecting line when arctype returns pnt. an exception domainerror is raised if arctype is not a pnt.

        Returns
        -------
        gp_Pnt2d

        """
        return _GccInt.GccInt_Bisec_Point(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_GccInt_Bisec_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_Bisec
    __del__ = lambda self: None
GccInt_Bisec_swigregister = _GccInt.GccInt_Bisec_swigregister
GccInt_Bisec_swigregister(GccInt_Bisec)

class GccInt_BCirc(GccInt_Bisec):
    __swig_setmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccInt_BCirc, name, value)
    __swig_getmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GccInt_BCirc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a bisecting curve whose geometry is the 2d circle circ.

        Parameters
        ----------
        Circ: gp_Circ2d

        Returns
        -------
        None

        """
        this = _GccInt.new_GccInt_BCirc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BCirc_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BCirc
    __del__ = lambda self: None
GccInt_BCirc_swigregister = _GccInt.GccInt_BCirc_swigregister
GccInt_BCirc_swigregister(GccInt_BCirc)

class GccInt_BElips(GccInt_Bisec):
    __swig_setmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccInt_BElips, name, value)
    __swig_getmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GccInt_BElips, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a bisecting curve whose geometry is the 2d ellipse ellipse.

        Parameters
        ----------
        Ellipse: gp_Elips2d

        Returns
        -------
        None

        """
        this = _GccInt.new_GccInt_BElips(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BElips_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BElips
    __del__ = lambda self: None
GccInt_BElips_swigregister = _GccInt.GccInt_BElips_swigregister
GccInt_BElips_swigregister(GccInt_BElips)

class GccInt_BHyper(GccInt_Bisec):
    __swig_setmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccInt_BHyper, name, value)
    __swig_getmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GccInt_BHyper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a bisecting curve whose geometry is the 2d hyperbola hyper.

        Parameters
        ----------
        Hyper: gp_Hypr2d

        Returns
        -------
        None

        """
        this = _GccInt.new_GccInt_BHyper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BHyper_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BHyper
    __del__ = lambda self: None
GccInt_BHyper_swigregister = _GccInt.GccInt_BHyper_swigregister
GccInt_BHyper_swigregister(GccInt_BHyper)

class GccInt_BLine(GccInt_Bisec):
    __swig_setmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccInt_BLine, name, value)
    __swig_getmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GccInt_BLine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a bisecting line whose geometry is the 2d line line.

        Parameters
        ----------
        Line: gp_Lin2d

        Returns
        -------
        None

        """
        this = _GccInt.new_GccInt_BLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BLine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BLine
    __del__ = lambda self: None
GccInt_BLine_swigregister = _GccInt.GccInt_BLine_swigregister
GccInt_BLine_swigregister(GccInt_BLine)

class GccInt_BParab(GccInt_Bisec):
    __swig_setmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccInt_BParab, name, value)
    __swig_getmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GccInt_BParab, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a bisecting curve whose geometry is the 2d parabola parab.

        Parameters
        ----------
        Parab: gp_Parab2d

        Returns
        -------
        None

        """
        this = _GccInt.new_GccInt_BParab(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BParab_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BParab
    __del__ = lambda self: None
GccInt_BParab_swigregister = _GccInt.GccInt_BParab_swigregister
GccInt_BParab_swigregister(GccInt_BParab)

class GccInt_BPoint(GccInt_Bisec):
    __swig_setmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccInt_BPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [GccInt_Bisec]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GccInt_BPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a bisecting object whose geometry is the 2d point point.

        Parameters
        ----------
        Point: gp_Pnt2d

        Returns
        -------
        None

        """
        this = _GccInt.new_GccInt_BPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_GccInt_BPoint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccInt.delete_GccInt_BPoint
    __del__ = lambda self: None
GccInt_BPoint_swigregister = _GccInt.GccInt_BPoint_swigregister
GccInt_BPoint_swigregister(GccInt_BPoint)



# This file is compatible with both classic and new-style classes.


