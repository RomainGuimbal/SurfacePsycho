# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
GeomTools module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_geomtools.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GeomTools
else:
    import _GeomTools

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomTools.delete_SwigPyIterator

    def value(self):
        return _GeomTools.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomTools.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomTools.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomTools.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomTools.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomTools.SwigPyIterator_copy(self)

    def next(self):
        return _GeomTools.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomTools.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomTools.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomTools.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomTools.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomTools.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomTools.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomTools.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomTools.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomTools.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GeomTools:
_GeomTools.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _GeomTools.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _GeomTools.ios_base_erase_event
    imbue_event = _GeomTools.ios_base_imbue_event
    copyfmt_event = _GeomTools.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _GeomTools.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _GeomTools.ios_base_flags(self, *args)

    def setf(self, *args):
        return _GeomTools.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _GeomTools.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _GeomTools.ios_base_precision(self, *args)

    def width(self, *args):
        return _GeomTools.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _GeomTools.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _GeomTools.ios_base_imbue(self, __loc)

    def getloc(self):
        return _GeomTools.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _GeomTools.ios_base_xalloc()

    def iword(self, __ix):
        return _GeomTools.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _GeomTools.ios_base_pword(self, __ix)
    __swig_destroy__ = _GeomTools.delete_ios_base

# Register ios_base in _GeomTools:
_GeomTools.ios_base_swigregister(ios_base)
cvar = _GeomTools.cvar
ios_base.boolalpha = _GeomTools.cvar.ios_base_boolalpha
ios_base.dec = _GeomTools.cvar.ios_base_dec
ios_base.fixed = _GeomTools.cvar.ios_base_fixed
ios_base.hex = _GeomTools.cvar.ios_base_hex
ios_base.internal = _GeomTools.cvar.ios_base_internal
ios_base.left = _GeomTools.cvar.ios_base_left
ios_base.oct = _GeomTools.cvar.ios_base_oct
ios_base.right = _GeomTools.cvar.ios_base_right
ios_base.scientific = _GeomTools.cvar.ios_base_scientific
ios_base.showbase = _GeomTools.cvar.ios_base_showbase
ios_base.showpoint = _GeomTools.cvar.ios_base_showpoint
ios_base.showpos = _GeomTools.cvar.ios_base_showpos
ios_base.skipws = _GeomTools.cvar.ios_base_skipws
ios_base.unitbuf = _GeomTools.cvar.ios_base_unitbuf
ios_base.uppercase = _GeomTools.cvar.ios_base_uppercase
ios_base.adjustfield = _GeomTools.cvar.ios_base_adjustfield
ios_base.basefield = _GeomTools.cvar.ios_base_basefield
ios_base.floatfield = _GeomTools.cvar.ios_base_floatfield
ios_base.badbit = _GeomTools.cvar.ios_base_badbit
ios_base.eofbit = _GeomTools.cvar.ios_base_eofbit
ios_base.failbit = _GeomTools.cvar.ios_base_failbit
ios_base.goodbit = _GeomTools.cvar.ios_base_goodbit
ios_base.app = _GeomTools.cvar.ios_base_app
ios_base.ate = _GeomTools.cvar.ios_base_ate
ios_base.binary = _GeomTools.cvar.ios_base_binary
ios_base.ios_base_in = _GeomTools.cvar.ios_base_ios_base_in
ios_base.out = _GeomTools.cvar.ios_base_out
ios_base.trunc = _GeomTools.cvar.ios_base_trunc
ios_base.beg = _GeomTools.cvar.ios_base_beg
ios_base.cur = _GeomTools.cvar.ios_base_cur
ios_base.end = _GeomTools.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _GeomTools.ios_rdstate(self)

    def clear(self, *args):
        return _GeomTools.ios_clear(self, *args)

    def setstate(self, __state):
        return _GeomTools.ios_setstate(self, __state)

    def good(self):
        return _GeomTools.ios_good(self)

    def eof(self):
        return _GeomTools.ios_eof(self)

    def fail(self):
        return _GeomTools.ios_fail(self)

    def bad(self):
        return _GeomTools.ios_bad(self)

    def exceptions(self, *args):
        return _GeomTools.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _GeomTools.ios_swiginit(self, _GeomTools.new_ios(__sb))
    __swig_destroy__ = _GeomTools.delete_ios

    def tie(self, *args):
        return _GeomTools.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _GeomTools.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _GeomTools.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _GeomTools.ios_fill(self, *args)

    def imbue(self, __loc):
        return _GeomTools.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _GeomTools.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _GeomTools.ios_widen(self, __c)

# Register ios in _GeomTools:
_GeomTools.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _GeomTools.ostream_swiginit(self, _GeomTools.new_ostream(__sb))
    __swig_destroy__ = _GeomTools.delete_ostream

    def __lshift__(self, *args):
        return _GeomTools.ostream___lshift__(self, *args)

    def put(self, __c):
        return _GeomTools.ostream_put(self, __c)

    def write(self, __s, __n):
        return _GeomTools.ostream_write(self, __s, __n)

    def flush(self):
        return _GeomTools.ostream_flush(self)

    def tellp(self):
        return _GeomTools.ostream_tellp(self)

    def seekp(self, *args):
        return _GeomTools.ostream_seekp(self, *args)

# Register ostream in _GeomTools:
_GeomTools.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _GeomTools.istream_swiginit(self, _GeomTools.new_istream(__sb))
    __swig_destroy__ = _GeomTools.delete_istream

    def __rshift__(self, *args):
        return _GeomTools.istream___rshift__(self, *args)

    def gcount(self):
        return _GeomTools.istream_gcount(self)

    def get(self, *args):
        return _GeomTools.istream_get(self, *args)

    def getline(self, *args):
        return _GeomTools.istream_getline(self, *args)

    def ignore(self, *args):
        return _GeomTools.istream_ignore(self, *args)

    def peek(self):
        return _GeomTools.istream_peek(self)

    def read(self, __s, __n):
        return _GeomTools.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _GeomTools.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _GeomTools.istream_putback(self, __c)

    def unget(self):
        return _GeomTools.istream_unget(self)

    def sync(self):
        return _GeomTools.istream_sync(self)

    def tellg(self):
        return _GeomTools.istream_tellg(self)

    def seekg(self, *args):
        return _GeomTools.istream_seekg(self, *args)

# Register istream in _GeomTools:
_GeomTools.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _GeomTools.iostream_swiginit(self, _GeomTools.new_iostream(__sb))
    __swig_destroy__ = _GeomTools.delete_iostream

# Register iostream in _GeomTools:
_GeomTools.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _GeomTools.endl_cb_ptr
endl = _GeomTools.endl
ends_cb_ptr = _GeomTools.ends_cb_ptr
ends = _GeomTools.ends
flush_cb_ptr = _GeomTools.flush_cb_ptr
flush = _GeomTools.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.Message
import OCC.Core.OSD

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_GeomTools_UndefinedTypeHandler_Create():
    return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_Create()

def Handle_GeomTools_UndefinedTypeHandler_DownCast(t):
    return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_DownCast(t)

def Handle_GeomTools_UndefinedTypeHandler_IsNull(t):
    return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_IsNull(t)
class geomtools(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Dump(*args):
        r"""

        Parameters
        ----------
        S: Geom_Surface

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        A set of curves from geom2d. dumps the surface on the stream.

        Parameters
        ----------
        C: Geom_Curve

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Dumps the curve on the stream.

        Parameters
        ----------
        C: Geom2d_Curve

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Dumps the curve on the stream.

        """
        return _GeomTools.geomtools_Dump(*args)

    @staticmethod
    def GetReal(*args):
        r"""

        Parameters
        ----------
        IS: str

        Return
        -------
        theValue: float

        Description
        -----------
        Reads the standard_real value from the stream. zero is read in case of error.

        """
        return _GeomTools.geomtools_GetReal(*args)

    @staticmethod
    def GetUndefinedTypeHandler(*args):
        r"""
        Return
        -------
        opencascade::handle<GeomTools_UndefinedTypeHandler>

        Description
        -----------
        No available documentation.

        """
        return _GeomTools.geomtools_GetUndefinedTypeHandler(*args)

    @staticmethod
    def Read(*args):
        r"""

        Parameters
        ----------
        S: Geom_Surface
        IS: str

        Return
        -------
        None

        Description
        -----------
        Reads the surface from the stream.

        Parameters
        ----------
        C: Geom_Curve
        IS: str

        Return
        -------
        None

        Description
        -----------
        Reads the curve from the stream.

        Parameters
        ----------
        C: Geom2d_Curve
        IS: str

        Return
        -------
        None

        Description
        -----------
        Reads the curve from the stream.

        """
        return _GeomTools.geomtools_Read(*args)

    @staticmethod
    def SetUndefinedTypeHandler(*args):
        r"""

        Parameters
        ----------
        aHandler: GeomTools_UndefinedTypeHandler

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _GeomTools.geomtools_SetUndefinedTypeHandler(*args)

    @staticmethod
    def Write(*args):
        r"""

        Parameters
        ----------
        S: Geom_Surface

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Writes the surface on the stream.

        Parameters
        ----------
        C: Geom_Curve

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Writes the curve on the stream.

        Parameters
        ----------
        C: Geom2d_Curve

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Writes the curve on the stream.

        """
        return _GeomTools.geomtools_Write(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomTools.geomtools_swiginit(self, _GeomTools.new_geomtools())
    __swig_destroy__ = _GeomTools.delete_geomtools

# Register geomtools in _GeomTools:
_GeomTools.geomtools_swigregister(geomtools)
class GeomTools_Curve2dSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Returns an empty set of curves.

        """
        _GeomTools.GeomTools_Curve2dSet_swiginit(self, _GeomTools.new_GeomTools_Curve2dSet(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        C: Geom2d_Curve

        Return
        -------
        int

        Description
        -----------
        Incorporate a new curve in the set and returns its index.

        """
        return _GeomTools.GeomTools_Curve2dSet_Add(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clears the content of the set.

        """
        return _GeomTools.GeomTools_Curve2dSet_Clear(self, *args)

    def Curve2d(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Returns the curve of index <i>.

        """
        return _GeomTools.GeomTools_Curve2dSet_Curve2d(self, *args)

    def Dump(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Dumps the content of me on the stream <os>.

        """
        return _GeomTools.GeomTools_Curve2dSet_Dump(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        C: Geom2d_Curve

        Return
        -------
        int

        Description
        -----------
        Returns the index of <l>.

        """
        return _GeomTools.GeomTools_Curve2dSet_Index(self, *args)

    @staticmethod
    def PrintCurve2d(*args):
        r"""

        Parameters
        ----------
        C: Geom2d_Curve
        compact: bool (optional, default to Standard_False)

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Dumps the curve on the stream, if compact is true use the compact format that can be read back.

        """
        return _GeomTools.GeomTools_Curve2dSet_PrintCurve2d(*args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        IS: str
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        Reads the content of me from the stream <is>. me is first cleared.

        """
        return _GeomTools.GeomTools_Curve2dSet_Read(self, *args)

    @staticmethod
    def ReadCurve2d(*args):
        r"""

        Parameters
        ----------
        IS: str

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        Reads the curve from the stream. the curve is assumed to have been written with the print method (compact = true).

        """
        return _GeomTools.GeomTools_Curve2dSet_ReadCurve2d(*args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Writes the content of me on the stream <os> in a format that can be read back by read.

        """
        return _GeomTools.GeomTools_Curve2dSet_Write(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomTools.delete_GeomTools_Curve2dSet

# Register GeomTools_Curve2dSet in _GeomTools:
_GeomTools.GeomTools_Curve2dSet_swigregister(GeomTools_Curve2dSet)
class GeomTools_CurveSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Returns an empty set of curves.

        """
        _GeomTools.GeomTools_CurveSet_swiginit(self, _GeomTools.new_GeomTools_CurveSet(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        C: Geom_Curve

        Return
        -------
        int

        Description
        -----------
        Incorporate a new curve in the set and returns its index.

        """
        return _GeomTools.GeomTools_CurveSet_Add(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clears the content of the set.

        """
        return _GeomTools.GeomTools_CurveSet_Clear(self, *args)

    def Curve(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        Returns the curve of index <i>.

        """
        return _GeomTools.GeomTools_CurveSet_Curve(self, *args)

    def Dump(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Dumps the content of me on the stream <os>.

        """
        return _GeomTools.GeomTools_CurveSet_Dump(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        C: Geom_Curve

        Return
        -------
        int

        Description
        -----------
        Returns the index of <l>.

        """
        return _GeomTools.GeomTools_CurveSet_Index(self, *args)

    @staticmethod
    def PrintCurve(*args):
        r"""

        Parameters
        ----------
        C: Geom_Curve
        compact: bool (optional, default to Standard_False)

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Dumps the curve on the stream, if compact is true use the compact format that can be read back.

        """
        return _GeomTools.GeomTools_CurveSet_PrintCurve(*args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        IS: str
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        Reads the content of me from the stream <is>. me is first cleared.

        """
        return _GeomTools.GeomTools_CurveSet_Read(self, *args)

    @staticmethod
    def ReadCurve(*args):
        r"""

        Parameters
        ----------
        IS: str

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        Reads the curve from the stream. the curve is assumed to have been written with the print method (compact = true).

        """
        return _GeomTools.GeomTools_CurveSet_ReadCurve(*args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Writes the content of me on the stream <os> in a format that can be read back by read.

        """
        return _GeomTools.GeomTools_CurveSet_Write(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomTools.delete_GeomTools_CurveSet

# Register GeomTools_CurveSet in _GeomTools:
_GeomTools.GeomTools_CurveSet_swigregister(GeomTools_CurveSet)
class GeomTools_SurfaceSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Returns an empty set of surfaces.

        """
        _GeomTools.GeomTools_SurfaceSet_swiginit(self, _GeomTools.new_GeomTools_SurfaceSet(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        S: Geom_Surface

        Return
        -------
        int

        Description
        -----------
        Incorporate a new surface in the set and returns its index.

        """
        return _GeomTools.GeomTools_SurfaceSet_Add(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clears the content of the set.

        """
        return _GeomTools.GeomTools_SurfaceSet_Clear(self, *args)

    def Dump(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Dumps the content of me on the stream <os>.

        """
        return _GeomTools.GeomTools_SurfaceSet_Dump(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        S: Geom_Surface

        Return
        -------
        int

        Description
        -----------
        Returns the index of <l>.

        """
        return _GeomTools.GeomTools_SurfaceSet_Index(self, *args)

    @staticmethod
    def PrintSurface(*args):
        r"""

        Parameters
        ----------
        S: Geom_Surface
        compact: bool (optional, default to Standard_False)

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Dumps the surface on the stream, if compact is true use the compact format that can be read back.

        """
        return _GeomTools.GeomTools_SurfaceSet_PrintSurface(*args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        IS: str
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        Reads the content of me from the stream <is>. me is first cleared.

        """
        return _GeomTools.GeomTools_SurfaceSet_Read(self, *args)

    @staticmethod
    def ReadSurface(*args):
        r"""

        Parameters
        ----------
        IS: str

        Return
        -------
        opencascade::handle<Geom_Surface>

        Description
        -----------
        Reads the surface from the stream. the surface is assumed to have been written with the print method (compact = true).

        """
        return _GeomTools.GeomTools_SurfaceSet_ReadSurface(*args)

    def Surface(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        opencascade::handle<Geom_Surface>

        Description
        -----------
        Returns the surface of index <i>.

        """
        return _GeomTools.GeomTools_SurfaceSet_Surface(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        Writes the content of me on the stream <os> in a format that can be read back by read.

        """
        return _GeomTools.GeomTools_SurfaceSet_Write(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomTools.delete_GeomTools_SurfaceSet

# Register GeomTools_SurfaceSet in _GeomTools:
_GeomTools.GeomTools_SurfaceSet_swigregister(GeomTools_SurfaceSet)
class GeomTools_UndefinedTypeHandler(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _GeomTools.GeomTools_UndefinedTypeHandler_swiginit(self, _GeomTools.new_GeomTools_UndefinedTypeHandler(*args))

    def PrintCurve(self, *args):
        r"""

        Parameters
        ----------
        C: Geom_Curve
        compact: bool (optional, default to Standard_False)

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        No available documentation.

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintCurve(self, *args)

    def PrintCurve2d(self, *args):
        r"""

        Parameters
        ----------
        C: Geom2d_Curve
        compact: bool (optional, default to Standard_False)

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        No available documentation.

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintCurve2d(self, *args)

    def PrintSurface(self, *args):
        r"""

        Parameters
        ----------
        S: Geom_Surface
        compact: bool (optional, default to Standard_False)

        Return
        -------
        OS: Standard_OStream

        Description
        -----------
        No available documentation.

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintSurface(self, *args)

    def ReadCurve(self, *args):
        r"""

        Parameters
        ----------
        ctype: int
        IS: str
        C: Geom_Curve

        Return
        -------
        Standard_IStream

        Description
        -----------
        No available documentation.

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadCurve(self, *args)

    def ReadCurve2d(self, *args):
        r"""

        Parameters
        ----------
        ctype: int
        IS: str
        C: Geom2d_Curve

        Return
        -------
        Standard_IStream

        Description
        -----------
        No available documentation.

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadCurve2d(self, *args)

    def ReadSurface(self, *args):
        r"""

        Parameters
        ----------
        ctype: int
        IS: str
        S: Geom_Surface

        Return
        -------
        Standard_IStream

        Description
        -----------
        No available documentation.

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadSurface(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomTools_UndefinedTypeHandler_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomTools.delete_GeomTools_UndefinedTypeHandler

# Register GeomTools_UndefinedTypeHandler in _GeomTools:
_GeomTools.GeomTools_UndefinedTypeHandler_swigregister(GeomTools_UndefinedTypeHandler)



@deprecated
def geomtools_Dump(*args):
	return geomtools.Dump(*args)

@deprecated
def geomtools_Dump(*args):
	return geomtools.Dump(*args)

@deprecated
def geomtools_Dump(*args):
	return geomtools.Dump(*args)

@deprecated
def geomtools_GetReal(*args):
	return geomtools.GetReal(*args)

@deprecated
def geomtools_GetUndefinedTypeHandler(*args):
	return geomtools.GetUndefinedTypeHandler(*args)

@deprecated
def geomtools_Read(*args):
	return geomtools.Read(*args)

@deprecated
def geomtools_Read(*args):
	return geomtools.Read(*args)

@deprecated
def geomtools_Read(*args):
	return geomtools.Read(*args)

@deprecated
def geomtools_SetUndefinedTypeHandler(*args):
	return geomtools.SetUndefinedTypeHandler(*args)

@deprecated
def geomtools_Write(*args):
	return geomtools.Write(*args)

@deprecated
def geomtools_Write(*args):
	return geomtools.Write(*args)

@deprecated
def geomtools_Write(*args):
	return geomtools.Write(*args)

@deprecated
def GeomTools_Curve2dSet_PrintCurve2d(*args):
	return GeomTools_Curve2dSet.PrintCurve2d(*args)

@deprecated
def GeomTools_Curve2dSet_ReadCurve2d(*args):
	return GeomTools_Curve2dSet.ReadCurve2d(*args)

@deprecated
def GeomTools_CurveSet_PrintCurve(*args):
	return GeomTools_CurveSet.PrintCurve(*args)

@deprecated
def GeomTools_CurveSet_ReadCurve(*args):
	return GeomTools_CurveSet.ReadCurve(*args)

@deprecated
def GeomTools_SurfaceSet_PrintSurface(*args):
	return GeomTools_SurfaceSet.PrintSurface(*args)

@deprecated
def GeomTools_SurfaceSet_ReadSurface(*args):
	return GeomTools_SurfaceSet.ReadSurface(*args)



