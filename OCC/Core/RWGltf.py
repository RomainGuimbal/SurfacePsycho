# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWGltf module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwgltf.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWGltf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWGltf')
    _RWGltf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWGltf', [dirname(__file__)])
        except ImportError:
            import _RWGltf
            return _RWGltf
        try:
            _mod = imp.load_module('_RWGltf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWGltf = swig_import_helper()
    del swig_import_helper
else:
    import _RWGltf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWGltf.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _RWGltf.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWGltf.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWGltf.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _RWGltf.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _RWGltf.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _RWGltf.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _RWGltf.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _RWGltf.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _RWGltf.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWGltf.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _RWGltf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _RWGltf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWGltf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWGltf.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWGltf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _RWGltf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWGltf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWGltf.process_exception(error, method_name, class_name)
process_exception = _RWGltf.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.RWMesh
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.gp
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.Aspect
import OCC.Core.Image
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.Media
import OCC.Core.XCAFPrs
import OCC.Core.AIS
import OCC.Core.SelectMgr
import OCC.Core.Select3D
import OCC.Core.SelectBasics
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.V3d
import OCC.Core.StdSelect
import OCC.Core.XCAFDoc
import OCC.Core.TDataStd
import OCC.Core.XCAFDimTolObjects
import OCC.Core.XCAFNoteObjects
import OCC.Core.TopTools
import OCC.Core.XCAFView
import OCC.Core.TPrsStd
import OCC.Core.TDataXtd
import OCC.Core.TNaming

from enum import IntEnum
from OCC.Core.Exception import *

RWGltf_GltfPrimitiveMode_UNKNOWN = _RWGltf.RWGltf_GltfPrimitiveMode_UNKNOWN
RWGltf_GltfPrimitiveMode_Points = _RWGltf.RWGltf_GltfPrimitiveMode_Points
RWGltf_GltfPrimitiveMode_Lines = _RWGltf.RWGltf_GltfPrimitiveMode_Lines
RWGltf_GltfPrimitiveMode_LineLoop = _RWGltf.RWGltf_GltfPrimitiveMode_LineLoop
RWGltf_GltfPrimitiveMode_LineStrip = _RWGltf.RWGltf_GltfPrimitiveMode_LineStrip
RWGltf_GltfPrimitiveMode_Triangles = _RWGltf.RWGltf_GltfPrimitiveMode_Triangles
RWGltf_GltfPrimitiveMode_TriangleStrip = _RWGltf.RWGltf_GltfPrimitiveMode_TriangleStrip
RWGltf_GltfPrimitiveMode_TriangleFan = _RWGltf.RWGltf_GltfPrimitiveMode_TriangleFan
RWGltf_GltfBufferViewTarget_UNKNOWN = _RWGltf.RWGltf_GltfBufferViewTarget_UNKNOWN
RWGltf_GltfBufferViewTarget_ARRAY_BUFFER = _RWGltf.RWGltf_GltfBufferViewTarget_ARRAY_BUFFER
RWGltf_GltfBufferViewTarget_ELEMENT_ARRAY_BUFFER = _RWGltf.RWGltf_GltfBufferViewTarget_ELEMENT_ARRAY_BUFFER
RWGltf_GltfArrayType_UNKNOWN = _RWGltf.RWGltf_GltfArrayType_UNKNOWN
RWGltf_GltfArrayType_Indices = _RWGltf.RWGltf_GltfArrayType_Indices
RWGltf_GltfArrayType_Position = _RWGltf.RWGltf_GltfArrayType_Position
RWGltf_GltfArrayType_Normal = _RWGltf.RWGltf_GltfArrayType_Normal
RWGltf_GltfArrayType_Color = _RWGltf.RWGltf_GltfArrayType_Color
RWGltf_GltfArrayType_TCoord0 = _RWGltf.RWGltf_GltfArrayType_TCoord0
RWGltf_GltfArrayType_TCoord1 = _RWGltf.RWGltf_GltfArrayType_TCoord1
RWGltf_GltfArrayType_Joint = _RWGltf.RWGltf_GltfArrayType_Joint
RWGltf_GltfArrayType_Weight = _RWGltf.RWGltf_GltfArrayType_Weight
RWGltf_GltfRootElement_Asset = _RWGltf.RWGltf_GltfRootElement_Asset
RWGltf_GltfRootElement_Scenes = _RWGltf.RWGltf_GltfRootElement_Scenes
RWGltf_GltfRootElement_Scene = _RWGltf.RWGltf_GltfRootElement_Scene
RWGltf_GltfRootElement_Nodes = _RWGltf.RWGltf_GltfRootElement_Nodes
RWGltf_GltfRootElement_Meshes = _RWGltf.RWGltf_GltfRootElement_Meshes
RWGltf_GltfRootElement_Accessors = _RWGltf.RWGltf_GltfRootElement_Accessors
RWGltf_GltfRootElement_BufferViews = _RWGltf.RWGltf_GltfRootElement_BufferViews
RWGltf_GltfRootElement_Buffers = _RWGltf.RWGltf_GltfRootElement_Buffers
RWGltf_GltfRootElement_NB_MANDATORY = _RWGltf.RWGltf_GltfRootElement_NB_MANDATORY
RWGltf_GltfRootElement_Animations = _RWGltf.RWGltf_GltfRootElement_Animations
RWGltf_GltfRootElement_Materials = _RWGltf.RWGltf_GltfRootElement_Materials
RWGltf_GltfRootElement_Programs = _RWGltf.RWGltf_GltfRootElement_Programs
RWGltf_GltfRootElement_Samplers = _RWGltf.RWGltf_GltfRootElement_Samplers
RWGltf_GltfRootElement_Shaders = _RWGltf.RWGltf_GltfRootElement_Shaders
RWGltf_GltfRootElement_Skins = _RWGltf.RWGltf_GltfRootElement_Skins
RWGltf_GltfRootElement_Techniques = _RWGltf.RWGltf_GltfRootElement_Techniques
RWGltf_GltfRootElement_Textures = _RWGltf.RWGltf_GltfRootElement_Textures
RWGltf_GltfRootElement_Images = _RWGltf.RWGltf_GltfRootElement_Images
RWGltf_GltfRootElement_ExtensionsUsed = _RWGltf.RWGltf_GltfRootElement_ExtensionsUsed
RWGltf_GltfRootElement_ExtensionsRequired = _RWGltf.RWGltf_GltfRootElement_ExtensionsRequired
RWGltf_GltfRootElement_NB = _RWGltf.RWGltf_GltfRootElement_NB
RWGltf_GltfAccessorCompType_UNKNOWN = _RWGltf.RWGltf_GltfAccessorCompType_UNKNOWN
RWGltf_GltfAccessorCompType_Int8 = _RWGltf.RWGltf_GltfAccessorCompType_Int8
RWGltf_GltfAccessorCompType_UInt8 = _RWGltf.RWGltf_GltfAccessorCompType_UInt8
RWGltf_GltfAccessorCompType_Int16 = _RWGltf.RWGltf_GltfAccessorCompType_Int16
RWGltf_GltfAccessorCompType_UInt16 = _RWGltf.RWGltf_GltfAccessorCompType_UInt16
RWGltf_GltfAccessorCompType_UInt32 = _RWGltf.RWGltf_GltfAccessorCompType_UInt32
RWGltf_GltfAccessorCompType_Float32 = _RWGltf.RWGltf_GltfAccessorCompType_Float32
RWGltf_GltfAlphaMode_Opaque = _RWGltf.RWGltf_GltfAlphaMode_Opaque
RWGltf_GltfAlphaMode_Mask = _RWGltf.RWGltf_GltfAlphaMode_Mask
RWGltf_GltfAlphaMode_Blend = _RWGltf.RWGltf_GltfAlphaMode_Blend
RWGltf_GltfAccessorLayout_UNKNOWN = _RWGltf.RWGltf_GltfAccessorLayout_UNKNOWN
RWGltf_GltfAccessorLayout_Scalar = _RWGltf.RWGltf_GltfAccessorLayout_Scalar
RWGltf_GltfAccessorLayout_Vec2 = _RWGltf.RWGltf_GltfAccessorLayout_Vec2
RWGltf_GltfAccessorLayout_Vec3 = _RWGltf.RWGltf_GltfAccessorLayout_Vec3
RWGltf_GltfAccessorLayout_Vec4 = _RWGltf.RWGltf_GltfAccessorLayout_Vec4
RWGltf_GltfAccessorLayout_Mat2 = _RWGltf.RWGltf_GltfAccessorLayout_Mat2
RWGltf_GltfAccessorLayout_Mat3 = _RWGltf.RWGltf_GltfAccessorLayout_Mat3
RWGltf_GltfAccessorLayout_Mat4 = _RWGltf.RWGltf_GltfAccessorLayout_Mat4
RWGltf_WriterTrsfFormat_Compact = _RWGltf.RWGltf_WriterTrsfFormat_Compact
RWGltf_WriterTrsfFormat_Mat4 = _RWGltf.RWGltf_WriterTrsfFormat_Mat4
RWGltf_WriterTrsfFormat_TRS = _RWGltf.RWGltf_WriterTrsfFormat_TRS
RWGltf_WriterTrsfFormat_LOWER = _RWGltf.RWGltf_WriterTrsfFormat_LOWER
RWGltf_WriterTrsfFormat_UPPER = _RWGltf.RWGltf_WriterTrsfFormat_UPPER


class RWGltf_GltfPrimitiveMode(IntEnum):
	RWGltf_GltfPrimitiveMode_UNKNOWN = - 1
	RWGltf_GltfPrimitiveMode_Points = 0
	RWGltf_GltfPrimitiveMode_Lines = 1
	RWGltf_GltfPrimitiveMode_LineLoop = 2
	RWGltf_GltfPrimitiveMode_LineStrip = 3
	RWGltf_GltfPrimitiveMode_Triangles = 4
	RWGltf_GltfPrimitiveMode_TriangleStrip = 5
	RWGltf_GltfPrimitiveMode_TriangleFan = 6
RWGltf_GltfPrimitiveMode_UNKNOWN = RWGltf_GltfPrimitiveMode.RWGltf_GltfPrimitiveMode_UNKNOWN
RWGltf_GltfPrimitiveMode_Points = RWGltf_GltfPrimitiveMode.RWGltf_GltfPrimitiveMode_Points
RWGltf_GltfPrimitiveMode_Lines = RWGltf_GltfPrimitiveMode.RWGltf_GltfPrimitiveMode_Lines
RWGltf_GltfPrimitiveMode_LineLoop = RWGltf_GltfPrimitiveMode.RWGltf_GltfPrimitiveMode_LineLoop
RWGltf_GltfPrimitiveMode_LineStrip = RWGltf_GltfPrimitiveMode.RWGltf_GltfPrimitiveMode_LineStrip
RWGltf_GltfPrimitiveMode_Triangles = RWGltf_GltfPrimitiveMode.RWGltf_GltfPrimitiveMode_Triangles
RWGltf_GltfPrimitiveMode_TriangleStrip = RWGltf_GltfPrimitiveMode.RWGltf_GltfPrimitiveMode_TriangleStrip
RWGltf_GltfPrimitiveMode_TriangleFan = RWGltf_GltfPrimitiveMode.RWGltf_GltfPrimitiveMode_TriangleFan

class RWGltf_GltfBufferViewTarget(IntEnum):
	RWGltf_GltfBufferViewTarget_UNKNOWN = 0
	RWGltf_GltfBufferViewTarget_ARRAY_BUFFER = 34962
	RWGltf_GltfBufferViewTarget_ELEMENT_ARRAY_BUFFER = 34963
RWGltf_GltfBufferViewTarget_UNKNOWN = RWGltf_GltfBufferViewTarget.RWGltf_GltfBufferViewTarget_UNKNOWN
RWGltf_GltfBufferViewTarget_ARRAY_BUFFER = RWGltf_GltfBufferViewTarget.RWGltf_GltfBufferViewTarget_ARRAY_BUFFER
RWGltf_GltfBufferViewTarget_ELEMENT_ARRAY_BUFFER = RWGltf_GltfBufferViewTarget.RWGltf_GltfBufferViewTarget_ELEMENT_ARRAY_BUFFER

class RWGltf_GltfArrayType(IntEnum):
	RWGltf_GltfArrayType_UNKNOWN = 0
	RWGltf_GltfArrayType_Indices = 1
	RWGltf_GltfArrayType_Position = 2
	RWGltf_GltfArrayType_Normal = 3
	RWGltf_GltfArrayType_Color = 4
	RWGltf_GltfArrayType_TCoord0 = 5
	RWGltf_GltfArrayType_TCoord1 = 6
	RWGltf_GltfArrayType_Joint = 7
	RWGltf_GltfArrayType_Weight = 8
RWGltf_GltfArrayType_UNKNOWN = RWGltf_GltfArrayType.RWGltf_GltfArrayType_UNKNOWN
RWGltf_GltfArrayType_Indices = RWGltf_GltfArrayType.RWGltf_GltfArrayType_Indices
RWGltf_GltfArrayType_Position = RWGltf_GltfArrayType.RWGltf_GltfArrayType_Position
RWGltf_GltfArrayType_Normal = RWGltf_GltfArrayType.RWGltf_GltfArrayType_Normal
RWGltf_GltfArrayType_Color = RWGltf_GltfArrayType.RWGltf_GltfArrayType_Color
RWGltf_GltfArrayType_TCoord0 = RWGltf_GltfArrayType.RWGltf_GltfArrayType_TCoord0
RWGltf_GltfArrayType_TCoord1 = RWGltf_GltfArrayType.RWGltf_GltfArrayType_TCoord1
RWGltf_GltfArrayType_Joint = RWGltf_GltfArrayType.RWGltf_GltfArrayType_Joint
RWGltf_GltfArrayType_Weight = RWGltf_GltfArrayType.RWGltf_GltfArrayType_Weight

class RWGltf_GltfRootElement(IntEnum):
	RWGltf_GltfRootElement_Asset = 0
	RWGltf_GltfRootElement_Scenes = 1
	RWGltf_GltfRootElement_Scene = 2
	RWGltf_GltfRootElement_Nodes = 3
	RWGltf_GltfRootElement_Meshes = 4
	RWGltf_GltfRootElement_Accessors = 5
	RWGltf_GltfRootElement_BufferViews = 6
	RWGltf_GltfRootElement_Buffers = 7
	RWGltf_GltfRootElement_NB_MANDATORY = 8
	RWGltf_GltfRootElement_Animations = RWGltf_GltfRootElement_NB_MANDATORY
	RWGltf_GltfRootElement_Materials = 10
	RWGltf_GltfRootElement_Programs = 11
	RWGltf_GltfRootElement_Samplers = 12
	RWGltf_GltfRootElement_Shaders = 13
	RWGltf_GltfRootElement_Skins = 14
	RWGltf_GltfRootElement_Techniques = 15
	RWGltf_GltfRootElement_Textures = 16
	RWGltf_GltfRootElement_Images = 17
	RWGltf_GltfRootElement_ExtensionsUsed = 18
	RWGltf_GltfRootElement_ExtensionsRequired = 19
	RWGltf_GltfRootElement_NB = 20
RWGltf_GltfRootElement_Asset = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Asset
RWGltf_GltfRootElement_Scenes = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Scenes
RWGltf_GltfRootElement_Scene = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Scene
RWGltf_GltfRootElement_Nodes = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Nodes
RWGltf_GltfRootElement_Meshes = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Meshes
RWGltf_GltfRootElement_Accessors = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Accessors
RWGltf_GltfRootElement_BufferViews = RWGltf_GltfRootElement.RWGltf_GltfRootElement_BufferViews
RWGltf_GltfRootElement_Buffers = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Buffers
RWGltf_GltfRootElement_NB_MANDATORY = RWGltf_GltfRootElement.RWGltf_GltfRootElement_NB_MANDATORY
RWGltf_GltfRootElement_Animations = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Animations
RWGltf_GltfRootElement_Materials = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Materials
RWGltf_GltfRootElement_Programs = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Programs
RWGltf_GltfRootElement_Samplers = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Samplers
RWGltf_GltfRootElement_Shaders = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Shaders
RWGltf_GltfRootElement_Skins = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Skins
RWGltf_GltfRootElement_Techniques = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Techniques
RWGltf_GltfRootElement_Textures = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Textures
RWGltf_GltfRootElement_Images = RWGltf_GltfRootElement.RWGltf_GltfRootElement_Images
RWGltf_GltfRootElement_ExtensionsUsed = RWGltf_GltfRootElement.RWGltf_GltfRootElement_ExtensionsUsed
RWGltf_GltfRootElement_ExtensionsRequired = RWGltf_GltfRootElement.RWGltf_GltfRootElement_ExtensionsRequired
RWGltf_GltfRootElement_NB = RWGltf_GltfRootElement.RWGltf_GltfRootElement_NB

class RWGltf_GltfAccessorCompType(IntEnum):
	RWGltf_GltfAccessorCompType_UNKNOWN = 0
	RWGltf_GltfAccessorCompType_Int8 = 5120
	RWGltf_GltfAccessorCompType_UInt8 = 5121
	RWGltf_GltfAccessorCompType_Int16 = 5122
	RWGltf_GltfAccessorCompType_UInt16 = 5123
	RWGltf_GltfAccessorCompType_UInt32 = 5125
	RWGltf_GltfAccessorCompType_Float32 = 5126
RWGltf_GltfAccessorCompType_UNKNOWN = RWGltf_GltfAccessorCompType.RWGltf_GltfAccessorCompType_UNKNOWN
RWGltf_GltfAccessorCompType_Int8 = RWGltf_GltfAccessorCompType.RWGltf_GltfAccessorCompType_Int8
RWGltf_GltfAccessorCompType_UInt8 = RWGltf_GltfAccessorCompType.RWGltf_GltfAccessorCompType_UInt8
RWGltf_GltfAccessorCompType_Int16 = RWGltf_GltfAccessorCompType.RWGltf_GltfAccessorCompType_Int16
RWGltf_GltfAccessorCompType_UInt16 = RWGltf_GltfAccessorCompType.RWGltf_GltfAccessorCompType_UInt16
RWGltf_GltfAccessorCompType_UInt32 = RWGltf_GltfAccessorCompType.RWGltf_GltfAccessorCompType_UInt32
RWGltf_GltfAccessorCompType_Float32 = RWGltf_GltfAccessorCompType.RWGltf_GltfAccessorCompType_Float32

class RWGltf_GltfAlphaMode(IntEnum):
	RWGltf_GltfAlphaMode_Opaque = 0
	RWGltf_GltfAlphaMode_Mask = 1
	RWGltf_GltfAlphaMode_Blend = 2
RWGltf_GltfAlphaMode_Opaque = RWGltf_GltfAlphaMode.RWGltf_GltfAlphaMode_Opaque
RWGltf_GltfAlphaMode_Mask = RWGltf_GltfAlphaMode.RWGltf_GltfAlphaMode_Mask
RWGltf_GltfAlphaMode_Blend = RWGltf_GltfAlphaMode.RWGltf_GltfAlphaMode_Blend

class RWGltf_GltfAccessorLayout(IntEnum):
	RWGltf_GltfAccessorLayout_UNKNOWN = 0
	RWGltf_GltfAccessorLayout_Scalar = 1
	RWGltf_GltfAccessorLayout_Vec2 = 2
	RWGltf_GltfAccessorLayout_Vec3 = 3
	RWGltf_GltfAccessorLayout_Vec4 = 4
	RWGltf_GltfAccessorLayout_Mat2 = 5
	RWGltf_GltfAccessorLayout_Mat3 = 6
	RWGltf_GltfAccessorLayout_Mat4 = 7
RWGltf_GltfAccessorLayout_UNKNOWN = RWGltf_GltfAccessorLayout.RWGltf_GltfAccessorLayout_UNKNOWN
RWGltf_GltfAccessorLayout_Scalar = RWGltf_GltfAccessorLayout.RWGltf_GltfAccessorLayout_Scalar
RWGltf_GltfAccessorLayout_Vec2 = RWGltf_GltfAccessorLayout.RWGltf_GltfAccessorLayout_Vec2
RWGltf_GltfAccessorLayout_Vec3 = RWGltf_GltfAccessorLayout.RWGltf_GltfAccessorLayout_Vec3
RWGltf_GltfAccessorLayout_Vec4 = RWGltf_GltfAccessorLayout.RWGltf_GltfAccessorLayout_Vec4
RWGltf_GltfAccessorLayout_Mat2 = RWGltf_GltfAccessorLayout.RWGltf_GltfAccessorLayout_Mat2
RWGltf_GltfAccessorLayout_Mat3 = RWGltf_GltfAccessorLayout.RWGltf_GltfAccessorLayout_Mat3
RWGltf_GltfAccessorLayout_Mat4 = RWGltf_GltfAccessorLayout.RWGltf_GltfAccessorLayout_Mat4

class RWGltf_WriterTrsfFormat(IntEnum):
	RWGltf_WriterTrsfFormat_Compact = 0
	RWGltf_WriterTrsfFormat_Mat4 = 1
	RWGltf_WriterTrsfFormat_TRS = 2
RWGltf_WriterTrsfFormat_Compact = RWGltf_WriterTrsfFormat.RWGltf_WriterTrsfFormat_Compact
RWGltf_WriterTrsfFormat_Mat4 = RWGltf_WriterTrsfFormat.RWGltf_WriterTrsfFormat_Mat4
RWGltf_WriterTrsfFormat_TRS = RWGltf_WriterTrsfFormat.RWGltf_WriterTrsfFormat_TRS


def Handle_RWGltf_CafWriter_Create() -> "opencascade::handle< RWGltf_CafWriter >":
    return _RWGltf.Handle_RWGltf_CafWriter_Create()
Handle_RWGltf_CafWriter_Create = _RWGltf.Handle_RWGltf_CafWriter_Create

def Handle_RWGltf_CafWriter_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWGltf_CafWriter >":
    return _RWGltf.Handle_RWGltf_CafWriter_DownCast(t)
Handle_RWGltf_CafWriter_DownCast = _RWGltf.Handle_RWGltf_CafWriter_DownCast

def Handle_RWGltf_CafWriter_IsNull(t: 'opencascade::handle< RWGltf_CafWriter > const &') -> "bool":
    return _RWGltf.Handle_RWGltf_CafWriter_IsNull(t)
Handle_RWGltf_CafWriter_IsNull = _RWGltf.Handle_RWGltf_CafWriter_IsNull

def Handle_RWGltf_GltfLatePrimitiveArray_Create() -> "opencascade::handle< RWGltf_GltfLatePrimitiveArray >":
    return _RWGltf.Handle_RWGltf_GltfLatePrimitiveArray_Create()
Handle_RWGltf_GltfLatePrimitiveArray_Create = _RWGltf.Handle_RWGltf_GltfLatePrimitiveArray_Create

def Handle_RWGltf_GltfLatePrimitiveArray_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWGltf_GltfLatePrimitiveArray >":
    return _RWGltf.Handle_RWGltf_GltfLatePrimitiveArray_DownCast(t)
Handle_RWGltf_GltfLatePrimitiveArray_DownCast = _RWGltf.Handle_RWGltf_GltfLatePrimitiveArray_DownCast

def Handle_RWGltf_GltfLatePrimitiveArray_IsNull(t: 'opencascade::handle< RWGltf_GltfLatePrimitiveArray > const &') -> "bool":
    return _RWGltf.Handle_RWGltf_GltfLatePrimitiveArray_IsNull(t)
Handle_RWGltf_GltfLatePrimitiveArray_IsNull = _RWGltf.Handle_RWGltf_GltfLatePrimitiveArray_IsNull

def Handle_RWGltf_MaterialCommon_Create() -> "opencascade::handle< RWGltf_MaterialCommon >":
    return _RWGltf.Handle_RWGltf_MaterialCommon_Create()
Handle_RWGltf_MaterialCommon_Create = _RWGltf.Handle_RWGltf_MaterialCommon_Create

def Handle_RWGltf_MaterialCommon_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWGltf_MaterialCommon >":
    return _RWGltf.Handle_RWGltf_MaterialCommon_DownCast(t)
Handle_RWGltf_MaterialCommon_DownCast = _RWGltf.Handle_RWGltf_MaterialCommon_DownCast

def Handle_RWGltf_MaterialCommon_IsNull(t: 'opencascade::handle< RWGltf_MaterialCommon > const &') -> "bool":
    return _RWGltf.Handle_RWGltf_MaterialCommon_IsNull(t)
Handle_RWGltf_MaterialCommon_IsNull = _RWGltf.Handle_RWGltf_MaterialCommon_IsNull

def Handle_RWGltf_MaterialMetallicRoughness_Create() -> "opencascade::handle< RWGltf_MaterialMetallicRoughness >":
    return _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_Create()
Handle_RWGltf_MaterialMetallicRoughness_Create = _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_Create

def Handle_RWGltf_MaterialMetallicRoughness_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWGltf_MaterialMetallicRoughness >":
    return _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_DownCast(t)
Handle_RWGltf_MaterialMetallicRoughness_DownCast = _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_DownCast

def Handle_RWGltf_MaterialMetallicRoughness_IsNull(t: 'opencascade::handle< RWGltf_MaterialMetallicRoughness > const &') -> "bool":
    return _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_IsNull(t)
Handle_RWGltf_MaterialMetallicRoughness_IsNull = _RWGltf.Handle_RWGltf_MaterialMetallicRoughness_IsNull

def Handle_RWGltf_PrimitiveArrayReader_Create() -> "opencascade::handle< RWGltf_PrimitiveArrayReader >":
    return _RWGltf.Handle_RWGltf_PrimitiveArrayReader_Create()
Handle_RWGltf_PrimitiveArrayReader_Create = _RWGltf.Handle_RWGltf_PrimitiveArrayReader_Create

def Handle_RWGltf_PrimitiveArrayReader_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWGltf_PrimitiveArrayReader >":
    return _RWGltf.Handle_RWGltf_PrimitiveArrayReader_DownCast(t)
Handle_RWGltf_PrimitiveArrayReader_DownCast = _RWGltf.Handle_RWGltf_PrimitiveArrayReader_DownCast

def Handle_RWGltf_PrimitiveArrayReader_IsNull(t: 'opencascade::handle< RWGltf_PrimitiveArrayReader > const &') -> "bool":
    return _RWGltf.Handle_RWGltf_PrimitiveArrayReader_IsNull(t)
Handle_RWGltf_PrimitiveArrayReader_IsNull = _RWGltf.Handle_RWGltf_PrimitiveArrayReader_IsNull

def Handle_RWGltf_TriangulationReader_Create() -> "opencascade::handle< RWGltf_TriangulationReader >":
    return _RWGltf.Handle_RWGltf_TriangulationReader_Create()
Handle_RWGltf_TriangulationReader_Create = _RWGltf.Handle_RWGltf_TriangulationReader_Create

def Handle_RWGltf_TriangulationReader_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWGltf_TriangulationReader >":
    return _RWGltf.Handle_RWGltf_TriangulationReader_DownCast(t)
Handle_RWGltf_TriangulationReader_DownCast = _RWGltf.Handle_RWGltf_TriangulationReader_DownCast

def Handle_RWGltf_TriangulationReader_IsNull(t: 'opencascade::handle< RWGltf_TriangulationReader > const &') -> "bool":
    return _RWGltf.Handle_RWGltf_TriangulationReader_IsNull(t)
Handle_RWGltf_TriangulationReader_IsNull = _RWGltf.Handle_RWGltf_TriangulationReader_IsNull
class RWGltf_CafReader(OCC.Core.RWMesh.RWMesh_CafReader):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.RWMesh.RWMesh_CafReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_CafReader, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.RWMesh.RWMesh_CafReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_CafReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_CafReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetMeshNameAsFallback(self, *args) -> "void":
        """
        Set flag to use mesh name in case if node name is empty.

        Parameters
        ----------
        theToFallback: bool

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_CafReader_SetMeshNameAsFallback(self, *args)


    def SetParallel(self, *args) -> "void":
        """
        Setup multithreaded execution.

        Parameters
        ----------
        theToParallel: bool

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_CafReader_SetParallel(self, *args)


    def SetSkipEmptyNodes(self, *args) -> "void":
        """
        Set flag to ignore nodes without geometry.

        Parameters
        ----------
        theToSkip: bool

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_CafReader_SetSkipEmptyNodes(self, *args)


    def ToParallel(self, *args) -> "bool":
        """
        Return true if multithreaded optimizations are allowed; false by default.

        Returns
        -------
        bool

        """
        return _RWGltf.RWGltf_CafReader_ToParallel(self, *args)


    def ToSkipEmptyNodes(self, *args) -> "bool":
        """
        Return true if nodes without geometry should be ignored, true by default.

        Returns
        -------
        bool

        """
        return _RWGltf.RWGltf_CafReader_ToSkipEmptyNodes(self, *args)


    def ToUseMeshNameAsFallback(self, *args) -> "bool":
        """
        Set flag to use mesh name in case if node name is empty, true by default.

        Returns
        -------
        bool

        """
        return _RWGltf.RWGltf_CafReader_ToUseMeshNameAsFallback(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_CafReader
    __del__ = lambda self: None
RWGltf_CafReader_swigregister = _RWGltf.RWGltf_CafReader_swigregister
RWGltf_CafReader_swigregister(RWGltf_CafReader)

class RWGltf_CafWriter(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_CafWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_CafWriter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Main constructor. @param thefile [in] path to output gltf file @param theisbinary [in] flag to write into binary gltf format (.glb).

        Parameters
        ----------
        theFile: TCollection_AsciiString
        theIsBinary: bool

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_CafWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeCoordinateSystemConverter(self, *args) -> "RWMesh_CoordinateSystemConverter &":
        """
        Return transformation from occt to gltf coordinate system.

        Returns
        -------
        RWMesh_CoordinateSystemConverter

        """
        return _RWGltf.RWGltf_CafWriter_ChangeCoordinateSystemConverter(self, *args)


    def CoordinateSystemConverter(self, *args) -> "RWMesh_CoordinateSystemConverter const &":
        """
        Return transformation from occt to gltf coordinate system.

        Returns
        -------
        RWMesh_CoordinateSystemConverter

        """
        return _RWGltf.RWGltf_CafWriter_CoordinateSystemConverter(self, *args)


    def DefaultStyle(self, *args) -> "XCAFPrs_Style const &":
        """
        Return default material definition to be used for nodes with only color defined.

        Returns
        -------
        XCAFPrs_Style

        """
        return _RWGltf.RWGltf_CafWriter_DefaultStyle(self, *args)


    def IsBinary(self, *args) -> "bool":
        """
        Return flag to write into binary gltf format (.glb), specified within class constructor.

        Returns
        -------
        bool

        """
        return _RWGltf.RWGltf_CafWriter_IsBinary(self, *args)


    def IsForcedUVExport(self, *args) -> "bool":
        """
        Return true to export uv coordinates even if there are no mapped texture; false by default.

        Returns
        -------
        bool

        """
        return _RWGltf.RWGltf_CafWriter_IsForcedUVExport(self, *args)


    def Perform(self, *args) -> "bool":
        """
        Write gltf file and associated binary file. triangulation data should be precomputed within shapes! @param thedocument [in] input document @param therootlabels [in] list of root shapes to export @param thelabelfilter [in] optional filter with document nodes to export,  with keys defined by xcafprs_documentexplorer::definechildid() and filled recursively  (leaves and parent assembly nodes at all levels);  when not null, all nodes not included into the map will be ignored @param thefileinfo [in] map with file metadata to put into gltf header section @param theprogress [in] optional progress indicator returns false on file writing failure.

        Parameters
        ----------
        theDocument: TDocStd_Document
        theRootLabels: TDF_LabelSequence
        theLabelFilter: TColStd_MapOfAsciiString *
        theFileInfo: TColStd_IndexedDataMapOfStringString
        theProgress: Message_ProgressRange

        Returns
        -------
        bool

        Write gltf file and associated binary file. triangulation data should be precomputed within shapes! @param thedocument [in] input document @param thefileinfo [in] map with file metadata to put into gltf header section @param theprogress [in] optional progress indicator returns false on file writing failure.

        Parameters
        ----------
        theDocument: TDocStd_Document
        theFileInfo: TColStd_IndexedDataMapOfStringString
        theProgress: Message_ProgressRange

        Returns
        -------
        bool

        """
        return _RWGltf.RWGltf_CafWriter_Perform(self, *args)


    def SetCoordinateSystemConverter(self, *args) -> "void":
        """
        Set transformation from occt to gltf coordinate system.

        Parameters
        ----------
        theConverter: RWMesh_CoordinateSystemConverter

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_CafWriter_SetCoordinateSystemConverter(self, *args)


    def SetDefaultStyle(self, *args) -> "void":
        """
        Set default material definition to be used for nodes with only color defined.

        Parameters
        ----------
        theStyle: XCAFPrs_Style

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_CafWriter_SetDefaultStyle(self, *args)


    def SetForcedUVExport(self, *args) -> "void":
        """
        Set flag to export uv coordinates even if there are no mapped texture; false by default.

        Parameters
        ----------
        theToForce: bool

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_CafWriter_SetForcedUVExport(self, *args)


    def SetTransformationFormat(self, *args) -> "void":
        """
        Set preferred transformation format for writing into gltf file.

        Parameters
        ----------
        theFormat: RWGltf_WriterTrsfFormat

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_CafWriter_SetTransformationFormat(self, *args)


    def TransformationFormat(self, *args) -> "RWGltf_WriterTrsfFormat":
        """
        Return preferred transformation format for writing into gltf file; rwgltf_writertrsfformat_compact by default.

        Returns
        -------
        RWGltf_WriterTrsfFormat

        """
        return _RWGltf.RWGltf_CafWriter_TransformationFormat(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_RWGltf_CafWriter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_CafWriter
    __del__ = lambda self: None
RWGltf_CafWriter_swigregister = _RWGltf.RWGltf_CafWriter_swigregister
RWGltf_CafWriter_swigregister(RWGltf_CafWriter)

class RWGltf_GltfAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_GltfAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_GltfAccessor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Id"] = _RWGltf.RWGltf_GltfAccessor_Id_set
    __swig_getmethods__["Id"] = _RWGltf.RWGltf_GltfAccessor_Id_get
    if _newclass:
        Id = _swig_property(_RWGltf.RWGltf_GltfAccessor_Id_get, _RWGltf.RWGltf_GltfAccessor_Id_set)
    __swig_setmethods__["ByteOffset"] = _RWGltf.RWGltf_GltfAccessor_ByteOffset_set
    __swig_getmethods__["ByteOffset"] = _RWGltf.RWGltf_GltfAccessor_ByteOffset_get
    if _newclass:
        ByteOffset = _swig_property(_RWGltf.RWGltf_GltfAccessor_ByteOffset_get, _RWGltf.RWGltf_GltfAccessor_ByteOffset_set)
    __swig_setmethods__["Count"] = _RWGltf.RWGltf_GltfAccessor_Count_set
    __swig_getmethods__["Count"] = _RWGltf.RWGltf_GltfAccessor_Count_get
    if _newclass:
        Count = _swig_property(_RWGltf.RWGltf_GltfAccessor_Count_get, _RWGltf.RWGltf_GltfAccessor_Count_set)
    __swig_setmethods__["ByteStride"] = _RWGltf.RWGltf_GltfAccessor_ByteStride_set
    __swig_getmethods__["ByteStride"] = _RWGltf.RWGltf_GltfAccessor_ByteStride_get
    if _newclass:
        ByteStride = _swig_property(_RWGltf.RWGltf_GltfAccessor_ByteStride_get, _RWGltf.RWGltf_GltfAccessor_ByteStride_set)
    __swig_setmethods__["Type"] = _RWGltf.RWGltf_GltfAccessor_Type_set
    __swig_getmethods__["Type"] = _RWGltf.RWGltf_GltfAccessor_Type_get
    if _newclass:
        Type = _swig_property(_RWGltf.RWGltf_GltfAccessor_Type_get, _RWGltf.RWGltf_GltfAccessor_Type_set)
    __swig_setmethods__["ComponentType"] = _RWGltf.RWGltf_GltfAccessor_ComponentType_set
    __swig_getmethods__["ComponentType"] = _RWGltf.RWGltf_GltfAccessor_ComponentType_get
    if _newclass:
        ComponentType = _swig_property(_RWGltf.RWGltf_GltfAccessor_ComponentType_get, _RWGltf.RWGltf_GltfAccessor_ComponentType_set)
    __swig_setmethods__["BndBox"] = _RWGltf.RWGltf_GltfAccessor_BndBox_set
    __swig_getmethods__["BndBox"] = _RWGltf.RWGltf_GltfAccessor_BndBox_get
    if _newclass:
        BndBox = _swig_property(_RWGltf.RWGltf_GltfAccessor_BndBox_get, _RWGltf.RWGltf_GltfAccessor_BndBox_set)

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_GltfAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfAccessor
    __del__ = lambda self: None
RWGltf_GltfAccessor_swigregister = _RWGltf.RWGltf_GltfAccessor_swigregister
RWGltf_GltfAccessor_swigregister(RWGltf_GltfAccessor)

class RWGltf_GltfBufferView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_GltfBufferView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_GltfBufferView, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Id"] = _RWGltf.RWGltf_GltfBufferView_Id_set
    __swig_getmethods__["Id"] = _RWGltf.RWGltf_GltfBufferView_Id_get
    if _newclass:
        Id = _swig_property(_RWGltf.RWGltf_GltfBufferView_Id_get, _RWGltf.RWGltf_GltfBufferView_Id_set)
    __swig_setmethods__["ByteOffset"] = _RWGltf.RWGltf_GltfBufferView_ByteOffset_set
    __swig_getmethods__["ByteOffset"] = _RWGltf.RWGltf_GltfBufferView_ByteOffset_get
    if _newclass:
        ByteOffset = _swig_property(_RWGltf.RWGltf_GltfBufferView_ByteOffset_get, _RWGltf.RWGltf_GltfBufferView_ByteOffset_set)
    __swig_setmethods__["ByteLength"] = _RWGltf.RWGltf_GltfBufferView_ByteLength_set
    __swig_getmethods__["ByteLength"] = _RWGltf.RWGltf_GltfBufferView_ByteLength_get
    if _newclass:
        ByteLength = _swig_property(_RWGltf.RWGltf_GltfBufferView_ByteLength_get, _RWGltf.RWGltf_GltfBufferView_ByteLength_set)
    __swig_setmethods__["ByteStride"] = _RWGltf.RWGltf_GltfBufferView_ByteStride_set
    __swig_getmethods__["ByteStride"] = _RWGltf.RWGltf_GltfBufferView_ByteStride_get
    if _newclass:
        ByteStride = _swig_property(_RWGltf.RWGltf_GltfBufferView_ByteStride_get, _RWGltf.RWGltf_GltfBufferView_ByteStride_set)
    __swig_setmethods__["Target"] = _RWGltf.RWGltf_GltfBufferView_Target_set
    __swig_getmethods__["Target"] = _RWGltf.RWGltf_GltfBufferView_Target_get
    if _newclass:
        Target = _swig_property(_RWGltf.RWGltf_GltfBufferView_Target_get, _RWGltf.RWGltf_GltfBufferView_Target_set)

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_GltfBufferView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfBufferView
    __del__ = lambda self: None
RWGltf_GltfBufferView_swigregister = _RWGltf.RWGltf_GltfBufferView_swigregister
RWGltf_GltfBufferView_swigregister(RWGltf_GltfBufferView)

class RWGltf_GltfFace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_GltfFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_GltfFace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NodePos"] = _RWGltf.RWGltf_GltfFace_NodePos_set
    __swig_getmethods__["NodePos"] = _RWGltf.RWGltf_GltfFace_NodePos_get
    if _newclass:
        NodePos = _swig_property(_RWGltf.RWGltf_GltfFace_NodePos_get, _RWGltf.RWGltf_GltfFace_NodePos_set)
    __swig_setmethods__["NodeNorm"] = _RWGltf.RWGltf_GltfFace_NodeNorm_set
    __swig_getmethods__["NodeNorm"] = _RWGltf.RWGltf_GltfFace_NodeNorm_get
    if _newclass:
        NodeNorm = _swig_property(_RWGltf.RWGltf_GltfFace_NodeNorm_get, _RWGltf.RWGltf_GltfFace_NodeNorm_set)
    __swig_setmethods__["NodeUV"] = _RWGltf.RWGltf_GltfFace_NodeUV_set
    __swig_getmethods__["NodeUV"] = _RWGltf.RWGltf_GltfFace_NodeUV_get
    if _newclass:
        NodeUV = _swig_property(_RWGltf.RWGltf_GltfFace_NodeUV_get, _RWGltf.RWGltf_GltfFace_NodeUV_set)
    __swig_setmethods__["Indices"] = _RWGltf.RWGltf_GltfFace_Indices_set
    __swig_getmethods__["Indices"] = _RWGltf.RWGltf_GltfFace_Indices_get
    if _newclass:
        Indices = _swig_property(_RWGltf.RWGltf_GltfFace_Indices_get, _RWGltf.RWGltf_GltfFace_Indices_set)

    __repr__ = _dumps_object


    def __init__(self):
        this = _RWGltf.new_RWGltf_GltfFace()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfFace
    __del__ = lambda self: None
RWGltf_GltfFace_swigregister = _RWGltf.RWGltf_GltfFace_swigregister
RWGltf_GltfFace_swigregister(RWGltf_GltfFace)

class RWGltf_GltfLatePrimitiveArray(OCC.Core.Poly.Poly_Triangulation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Poly.Poly_Triangulation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_GltfLatePrimitiveArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Poly.Poly_Triangulation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_GltfLatePrimitiveArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Parameters
        ----------
        theId: TCollection_AsciiString
        theName: TCollection_AsciiString

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_GltfLatePrimitiveArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddPrimArrayData(self, *args) -> "RWGltf_GltfPrimArrayData &":
        """
        Add primitive array data element.

        Parameters
        ----------
        theType: RWGltf_GltfArrayType

        Returns
        -------
        RWGltf_GltfPrimArrayData

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_AddPrimArrayData(self, *args)


    def BaseColor(self, *args) -> "Quantity_ColorRGBA":
        """
        Return base color.

        Returns
        -------
        Quantity_ColorRGBA

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_BaseColor(self, *args)


    def BoundingBox(self, *args) -> "Bnd_Box const &":
        """
        Return bounding box defined within gltf file, or void if not specified.

        Returns
        -------
        Bnd_Box

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_BoundingBox(self, *args)


    def Data(self, *args) -> "NCollection_Sequence< RWGltf_GltfPrimArrayData > const &":
        """
        Return primitive array data elements.

        Returns
        -------
        NCollection_Sequence<RWGltf_GltfPrimArrayData>

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_Data(self, *args)


    def HasStyle(self, *args) -> "bool":
        """
        Return true if primitive array has assigned material.

        Returns
        -------
        bool

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_HasStyle(self, *args)


    def Id(self, *args) -> "TCollection_AsciiString const &":
        """
        Entity id.

        Returns
        -------
        TCollection_AsciiString

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_Id(self, *args)


    def MaterialCommon(self, *args) -> "opencascade::handle< RWGltf_MaterialCommon > const &":
        """
        Return common (obsolete) material definition.

        Returns
        -------
        opencascade::handle<RWGltf_MaterialCommon>

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_MaterialCommon(self, *args)


    def MaterialPbr(self, *args) -> "opencascade::handle< RWGltf_MaterialMetallicRoughness > const &":
        """
        Return pbr material definition.

        Returns
        -------
        opencascade::handle<RWGltf_MaterialMetallicRoughness>

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_MaterialPbr(self, *args)


    def Name(self, *args) -> "TCollection_AsciiString const &":
        """
        Entity name.

        Returns
        -------
        TCollection_AsciiString

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_Name(self, *args)


    def PrimitiveMode(self, *args) -> "RWGltf_GltfPrimitiveMode":
        """
        Return type of primitive array.

        Returns
        -------
        RWGltf_GltfPrimitiveMode

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_PrimitiveMode(self, *args)


    def SetBoundingBox(self, *args) -> "void":
        """
        This method sets input bounding box and assigns a fake data to underlying poly_triangulation as min/max corners of bounding box, so that standard tools like brepbndlib::add() can be used transparently for computing bounding box of this face.

        Parameters
        ----------
        theBox: Bnd_Box

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_SetBoundingBox(self, *args)


    def SetMaterialCommon(self, *args) -> "void":
        """
        Set common (obsolete) material definition.

        Parameters
        ----------
        theMat: RWGltf_MaterialCommon

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_SetMaterialCommon(self, *args)


    def SetMaterialPbr(self, *args) -> "void":
        """
        Set pbr material definition.

        Parameters
        ----------
        theMat: RWGltf_MaterialMetallicRoughness

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_SetMaterialPbr(self, *args)


    def SetName(self, *args) -> "void":
        """
        Assign entity name.

        Parameters
        ----------
        theName: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_SetName(self, *args)


    def SetPrimitiveMode(self, *args) -> "void":
        """
        Set type of primitive array.

        Parameters
        ----------
        theMode: RWGltf_GltfPrimitiveMode

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_GltfLatePrimitiveArray_SetPrimitiveMode(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_RWGltf_GltfLatePrimitiveArray_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfLatePrimitiveArray
    __del__ = lambda self: None
RWGltf_GltfLatePrimitiveArray_swigregister = _RWGltf.RWGltf_GltfLatePrimitiveArray_swigregister
RWGltf_GltfLatePrimitiveArray_swigregister(RWGltf_GltfLatePrimitiveArray)

class RWGltf_GltfMaterialMap(OCC.Core.RWMesh.RWMesh_MaterialMap):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.RWMesh.RWMesh_MaterialMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_GltfMaterialMap, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.RWMesh.RWMesh_MaterialMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_GltfMaterialMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Main constructor.

        Parameters
        ----------
        theFile: TCollection_AsciiString
        theDefSamplerId: int

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_GltfMaterialMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddImages(self, *args) -> "void":
        """
        Add material images.

        Parameters
        ----------
        theWriter: RWGltf_GltfOStreamWriter *
        theStyle: XCAFPrs_Style

        Returns
        -------
        theIsStarted: bool

        """
        return _RWGltf.RWGltf_GltfMaterialMap_AddImages(self, *args)


    def AddMaterial(self, *args) -> "void":
        """
        Add material.

        Parameters
        ----------
        theWriter: RWGltf_GltfOStreamWriter *
        theStyle: XCAFPrs_Style

        Returns
        -------
        theIsStarted: bool

        """
        return _RWGltf.RWGltf_GltfMaterialMap_AddMaterial(self, *args)


    def AddTextures(self, *args) -> "void":
        """
        Add material textures.

        Parameters
        ----------
        theWriter: RWGltf_GltfOStreamWriter *
        theStyle: XCAFPrs_Style

        Returns
        -------
        theIsStarted: bool

        """
        return _RWGltf.RWGltf_GltfMaterialMap_AddTextures(self, *args)


    def NbImages(self, *args) -> "Standard_Integer":
        """
        Return extent of images map.

        Returns
        -------
        int

        """
        return _RWGltf.RWGltf_GltfMaterialMap_NbImages(self, *args)


    def NbTextures(self, *args) -> "Standard_Integer":
        """
        Return extent of textures map.

        Returns
        -------
        int

        """
        return _RWGltf.RWGltf_GltfMaterialMap_NbTextures(self, *args)


    def baseColorTexture(*args) -> "opencascade::handle< Image_Texture > const &":
        """
        Return base color texture.

        Parameters
        ----------
        theMat: XCAFDoc_VisMaterial

        Returns
        -------
        opencascade::handle<Image_Texture>

        """
        return _RWGltf.RWGltf_GltfMaterialMap_baseColorTexture(*args)

    baseColorTexture = staticmethod(baseColorTexture)

    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfMaterialMap
    __del__ = lambda self: None
RWGltf_GltfMaterialMap_swigregister = _RWGltf.RWGltf_GltfMaterialMap_swigregister
RWGltf_GltfMaterialMap_swigregister(RWGltf_GltfMaterialMap)

def RWGltf_GltfMaterialMap_baseColorTexture(*args) -> "opencascade::handle< Image_Texture > const &":
    """
    Return base color texture.

    Parameters
    ----------
    theMat: XCAFDoc_VisMaterial

    Returns
    -------
    opencascade::handle<Image_Texture>

    """
    return _RWGltf.RWGltf_GltfMaterialMap_baseColorTexture(*args)

class RWGltf_GltfOStreamWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_GltfOStreamWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_GltfOStreamWriter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Main constructor.

        Parameters
        ----------
        theOStream: rapidjson::OStreamWrapper

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_GltfOStreamWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfOStreamWriter
    __del__ = lambda self: None
RWGltf_GltfOStreamWriter_swigregister = _RWGltf.RWGltf_GltfOStreamWriter_swigregister
RWGltf_GltfOStreamWriter_swigregister(RWGltf_GltfOStreamWriter)

class RWGltf_GltfPrimArrayData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_GltfPrimArrayData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_GltfPrimArrayData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["StreamData"] = _RWGltf.RWGltf_GltfPrimArrayData_StreamData_set
    __swig_getmethods__["StreamData"] = _RWGltf.RWGltf_GltfPrimArrayData_StreamData_get
    if _newclass:
        StreamData = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_StreamData_get, _RWGltf.RWGltf_GltfPrimArrayData_StreamData_set)
    __swig_setmethods__["StreamUri"] = _RWGltf.RWGltf_GltfPrimArrayData_StreamUri_set
    __swig_getmethods__["StreamUri"] = _RWGltf.RWGltf_GltfPrimArrayData_StreamUri_get
    if _newclass:
        StreamUri = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_StreamUri_get, _RWGltf.RWGltf_GltfPrimArrayData_StreamUri_set)
    __swig_setmethods__["StreamOffset"] = _RWGltf.RWGltf_GltfPrimArrayData_StreamOffset_set
    __swig_getmethods__["StreamOffset"] = _RWGltf.RWGltf_GltfPrimArrayData_StreamOffset_get
    if _newclass:
        StreamOffset = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_StreamOffset_get, _RWGltf.RWGltf_GltfPrimArrayData_StreamOffset_set)
    __swig_setmethods__["Accessor"] = _RWGltf.RWGltf_GltfPrimArrayData_Accessor_set
    __swig_getmethods__["Accessor"] = _RWGltf.RWGltf_GltfPrimArrayData_Accessor_get
    if _newclass:
        Accessor = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_Accessor_get, _RWGltf.RWGltf_GltfPrimArrayData_Accessor_set)
    __swig_setmethods__["Type"] = _RWGltf.RWGltf_GltfPrimArrayData_Type_set
    __swig_getmethods__["Type"] = _RWGltf.RWGltf_GltfPrimArrayData_Type_get
    if _newclass:
        Type = _swig_property(_RWGltf.RWGltf_GltfPrimArrayData_Type_get, _RWGltf.RWGltf_GltfPrimArrayData_Type_set)

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theType: RWGltf_GltfArrayType

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_GltfPrimArrayData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfPrimArrayData
    __del__ = lambda self: None
RWGltf_GltfPrimArrayData_swigregister = _RWGltf.RWGltf_GltfPrimArrayData_swigregister
RWGltf_GltfPrimArrayData_swigregister(RWGltf_GltfPrimArrayData)

class RWGltf_GltfSceneNodeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_GltfSceneNodeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_GltfSceneNodeMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_GltfSceneNodeMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FindIndex(self, *args) -> "Standard_Integer":
        """
        Find index from document node string identifier.

        Parameters
        ----------
        theNodeId: TCollection_AsciiString

        Returns
        -------
        int

        """
        return _RWGltf.RWGltf_GltfSceneNodeMap_FindIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_GltfSceneNodeMap
    __del__ = lambda self: None
RWGltf_GltfSceneNodeMap_swigregister = _RWGltf.RWGltf_GltfSceneNodeMap_swigregister
RWGltf_GltfSceneNodeMap_swigregister(RWGltf_GltfSceneNodeMap)

class RWGltf_MaterialCommon(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_MaterialCommon, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_MaterialCommon, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AmbientTexture"] = _RWGltf.RWGltf_MaterialCommon_AmbientTexture_set
    __swig_getmethods__["AmbientTexture"] = _RWGltf.RWGltf_MaterialCommon_AmbientTexture_get
    if _newclass:
        AmbientTexture = _swig_property(_RWGltf.RWGltf_MaterialCommon_AmbientTexture_get, _RWGltf.RWGltf_MaterialCommon_AmbientTexture_set)
    __swig_setmethods__["DiffuseTexture"] = _RWGltf.RWGltf_MaterialCommon_DiffuseTexture_set
    __swig_getmethods__["DiffuseTexture"] = _RWGltf.RWGltf_MaterialCommon_DiffuseTexture_get
    if _newclass:
        DiffuseTexture = _swig_property(_RWGltf.RWGltf_MaterialCommon_DiffuseTexture_get, _RWGltf.RWGltf_MaterialCommon_DiffuseTexture_set)
    __swig_setmethods__["SpecularTexture"] = _RWGltf.RWGltf_MaterialCommon_SpecularTexture_set
    __swig_getmethods__["SpecularTexture"] = _RWGltf.RWGltf_MaterialCommon_SpecularTexture_get
    if _newclass:
        SpecularTexture = _swig_property(_RWGltf.RWGltf_MaterialCommon_SpecularTexture_get, _RWGltf.RWGltf_MaterialCommon_SpecularTexture_set)
    __swig_setmethods__["Id"] = _RWGltf.RWGltf_MaterialCommon_Id_set
    __swig_getmethods__["Id"] = _RWGltf.RWGltf_MaterialCommon_Id_get
    if _newclass:
        Id = _swig_property(_RWGltf.RWGltf_MaterialCommon_Id_get, _RWGltf.RWGltf_MaterialCommon_Id_set)
    __swig_setmethods__["Name"] = _RWGltf.RWGltf_MaterialCommon_Name_set
    __swig_getmethods__["Name"] = _RWGltf.RWGltf_MaterialCommon_Name_get
    if _newclass:
        Name = _swig_property(_RWGltf.RWGltf_MaterialCommon_Name_get, _RWGltf.RWGltf_MaterialCommon_Name_set)
    __swig_setmethods__["AmbientColor"] = _RWGltf.RWGltf_MaterialCommon_AmbientColor_set
    __swig_getmethods__["AmbientColor"] = _RWGltf.RWGltf_MaterialCommon_AmbientColor_get
    if _newclass:
        AmbientColor = _swig_property(_RWGltf.RWGltf_MaterialCommon_AmbientColor_get, _RWGltf.RWGltf_MaterialCommon_AmbientColor_set)
    __swig_setmethods__["DiffuseColor"] = _RWGltf.RWGltf_MaterialCommon_DiffuseColor_set
    __swig_getmethods__["DiffuseColor"] = _RWGltf.RWGltf_MaterialCommon_DiffuseColor_get
    if _newclass:
        DiffuseColor = _swig_property(_RWGltf.RWGltf_MaterialCommon_DiffuseColor_get, _RWGltf.RWGltf_MaterialCommon_DiffuseColor_set)
    __swig_setmethods__["SpecularColor"] = _RWGltf.RWGltf_MaterialCommon_SpecularColor_set
    __swig_getmethods__["SpecularColor"] = _RWGltf.RWGltf_MaterialCommon_SpecularColor_get
    if _newclass:
        SpecularColor = _swig_property(_RWGltf.RWGltf_MaterialCommon_SpecularColor_get, _RWGltf.RWGltf_MaterialCommon_SpecularColor_set)
    __swig_setmethods__["EmissiveColor"] = _RWGltf.RWGltf_MaterialCommon_EmissiveColor_set
    __swig_getmethods__["EmissiveColor"] = _RWGltf.RWGltf_MaterialCommon_EmissiveColor_get
    if _newclass:
        EmissiveColor = _swig_property(_RWGltf.RWGltf_MaterialCommon_EmissiveColor_get, _RWGltf.RWGltf_MaterialCommon_EmissiveColor_set)
    __swig_setmethods__["Shininess"] = _RWGltf.RWGltf_MaterialCommon_Shininess_set
    __swig_getmethods__["Shininess"] = _RWGltf.RWGltf_MaterialCommon_Shininess_get
    if _newclass:
        Shininess = _swig_property(_RWGltf.RWGltf_MaterialCommon_Shininess_get, _RWGltf.RWGltf_MaterialCommon_Shininess_set)
    __swig_setmethods__["Transparency"] = _RWGltf.RWGltf_MaterialCommon_Transparency_set
    __swig_getmethods__["Transparency"] = _RWGltf.RWGltf_MaterialCommon_Transparency_get
    if _newclass:
        Transparency = _swig_property(_RWGltf.RWGltf_MaterialCommon_Transparency_get, _RWGltf.RWGltf_MaterialCommon_Transparency_set)

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_MaterialCommon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_RWGltf_MaterialCommon_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_MaterialCommon
    __del__ = lambda self: None
RWGltf_MaterialCommon_swigregister = _RWGltf.RWGltf_MaterialCommon_swigregister
RWGltf_MaterialCommon_swigregister(RWGltf_MaterialCommon)

class RWGltf_MaterialMetallicRoughness(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_MaterialMetallicRoughness, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_MaterialMetallicRoughness, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BaseColorTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_BaseColorTexture_set
    __swig_getmethods__["BaseColorTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_BaseColorTexture_get
    if _newclass:
        BaseColorTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_BaseColorTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_BaseColorTexture_set)
    __swig_setmethods__["MetallicRoughnessTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_MetallicRoughnessTexture_set
    __swig_getmethods__["MetallicRoughnessTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_MetallicRoughnessTexture_get
    if _newclass:
        MetallicRoughnessTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_MetallicRoughnessTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_MetallicRoughnessTexture_set)
    __swig_setmethods__["EmissiveTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveTexture_set
    __swig_getmethods__["EmissiveTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveTexture_get
    if _newclass:
        EmissiveTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveTexture_set)
    __swig_setmethods__["OcclusionTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_OcclusionTexture_set
    __swig_getmethods__["OcclusionTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_OcclusionTexture_get
    if _newclass:
        OcclusionTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_OcclusionTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_OcclusionTexture_set)
    __swig_setmethods__["NormalTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_NormalTexture_set
    __swig_getmethods__["NormalTexture"] = _RWGltf.RWGltf_MaterialMetallicRoughness_NormalTexture_get
    if _newclass:
        NormalTexture = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_NormalTexture_get, _RWGltf.RWGltf_MaterialMetallicRoughness_NormalTexture_set)
    __swig_setmethods__["Id"] = _RWGltf.RWGltf_MaterialMetallicRoughness_Id_set
    __swig_getmethods__["Id"] = _RWGltf.RWGltf_MaterialMetallicRoughness_Id_get
    if _newclass:
        Id = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_Id_get, _RWGltf.RWGltf_MaterialMetallicRoughness_Id_set)
    __swig_setmethods__["Name"] = _RWGltf.RWGltf_MaterialMetallicRoughness_Name_set
    __swig_getmethods__["Name"] = _RWGltf.RWGltf_MaterialMetallicRoughness_Name_get
    if _newclass:
        Name = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_Name_get, _RWGltf.RWGltf_MaterialMetallicRoughness_Name_set)
    __swig_setmethods__["BaseColor"] = _RWGltf.RWGltf_MaterialMetallicRoughness_BaseColor_set
    __swig_getmethods__["BaseColor"] = _RWGltf.RWGltf_MaterialMetallicRoughness_BaseColor_get
    if _newclass:
        BaseColor = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_BaseColor_get, _RWGltf.RWGltf_MaterialMetallicRoughness_BaseColor_set)
    __swig_setmethods__["EmissiveFactor"] = _RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveFactor_set
    __swig_getmethods__["EmissiveFactor"] = _RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveFactor_get
    if _newclass:
        EmissiveFactor = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveFactor_get, _RWGltf.RWGltf_MaterialMetallicRoughness_EmissiveFactor_set)
    __swig_setmethods__["Metallic"] = _RWGltf.RWGltf_MaterialMetallicRoughness_Metallic_set
    __swig_getmethods__["Metallic"] = _RWGltf.RWGltf_MaterialMetallicRoughness_Metallic_get
    if _newclass:
        Metallic = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_Metallic_get, _RWGltf.RWGltf_MaterialMetallicRoughness_Metallic_set)
    __swig_setmethods__["Roughness"] = _RWGltf.RWGltf_MaterialMetallicRoughness_Roughness_set
    __swig_getmethods__["Roughness"] = _RWGltf.RWGltf_MaterialMetallicRoughness_Roughness_get
    if _newclass:
        Roughness = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_Roughness_get, _RWGltf.RWGltf_MaterialMetallicRoughness_Roughness_set)
    __swig_setmethods__["AlphaCutOff"] = _RWGltf.RWGltf_MaterialMetallicRoughness_AlphaCutOff_set
    __swig_getmethods__["AlphaCutOff"] = _RWGltf.RWGltf_MaterialMetallicRoughness_AlphaCutOff_get
    if _newclass:
        AlphaCutOff = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_AlphaCutOff_get, _RWGltf.RWGltf_MaterialMetallicRoughness_AlphaCutOff_set)
    __swig_setmethods__["AlphaMode"] = _RWGltf.RWGltf_MaterialMetallicRoughness_AlphaMode_set
    __swig_getmethods__["AlphaMode"] = _RWGltf.RWGltf_MaterialMetallicRoughness_AlphaMode_get
    if _newclass:
        AlphaMode = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_AlphaMode_get, _RWGltf.RWGltf_MaterialMetallicRoughness_AlphaMode_set)
    __swig_setmethods__["IsDoubleSided"] = _RWGltf.RWGltf_MaterialMetallicRoughness_IsDoubleSided_set
    __swig_getmethods__["IsDoubleSided"] = _RWGltf.RWGltf_MaterialMetallicRoughness_IsDoubleSided_get
    if _newclass:
        IsDoubleSided = _swig_property(_RWGltf.RWGltf_MaterialMetallicRoughness_IsDoubleSided_get, _RWGltf.RWGltf_MaterialMetallicRoughness_IsDoubleSided_set)

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_MaterialMetallicRoughness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_RWGltf_MaterialMetallicRoughness_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_MaterialMetallicRoughness
    __del__ = lambda self: None
RWGltf_MaterialMetallicRoughness_swigregister = _RWGltf.RWGltf_MaterialMetallicRoughness_swigregister
RWGltf_MaterialMetallicRoughness_swigregister(RWGltf_MaterialMetallicRoughness)

class RWGltf_PrimitiveArrayReader(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_PrimitiveArrayReader, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_PrimitiveArrayReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CoordinateSystemConverter(self, *args) -> "RWMesh_CoordinateSystemConverter const &":
        """
        Return transformation from gltf to occt coordinate system.

        Returns
        -------
        RWMesh_CoordinateSystemConverter

        """
        return _RWGltf.RWGltf_PrimitiveArrayReader_CoordinateSystemConverter(self, *args)


    def ErrorPrefix(self, *args) -> "TCollection_AsciiString const &":
        """
        Return prefix for reporting issues.

        Returns
        -------
        TCollection_AsciiString

        """
        return _RWGltf.RWGltf_PrimitiveArrayReader_ErrorPrefix(self, *args)


    def Load(self, *args) -> "opencascade::handle< Poly_Triangulation >":
        """
        Load primitive array.

        Parameters
        ----------
        theMesh: RWGltf_GltfLatePrimitiveArray

        Returns
        -------
        opencascade::handle<Poly_Triangulation>

        """
        return _RWGltf.RWGltf_PrimitiveArrayReader_Load(self, *args)


    def SetCoordinateSystemConverter(self, *args) -> "void":
        """
        Set transformation from gltf to occt coordinate system.

        Parameters
        ----------
        theConverter: RWMesh_CoordinateSystemConverter

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_PrimitiveArrayReader_SetCoordinateSystemConverter(self, *args)


    def SetErrorPrefix(self, *args) -> "void":
        """
        Set prefix for reporting issues.

        Parameters
        ----------
        theErrPrefix: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _RWGltf.RWGltf_PrimitiveArrayReader_SetErrorPrefix(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_RWGltf_PrimitiveArrayReader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_PrimitiveArrayReader
    __del__ = lambda self: None
RWGltf_PrimitiveArrayReader_swigregister = _RWGltf.RWGltf_PrimitiveArrayReader_swigregister
RWGltf_PrimitiveArrayReader_swigregister(RWGltf_PrimitiveArrayReader)

class RWGltf_TriangulationReader(RWGltf_PrimitiveArrayReader):
    __swig_setmethods__ = {}
    for _s in [RWGltf_PrimitiveArrayReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWGltf_TriangulationReader, name, value)
    __swig_getmethods__ = {}
    for _s in [RWGltf_PrimitiveArrayReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWGltf_TriangulationReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWGltf.new_RWGltf_TriangulationReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_RWGltf_TriangulationReader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWGltf.delete_RWGltf_TriangulationReader
    __del__ = lambda self: None
RWGltf_TriangulationReader_swigregister = _RWGltf.RWGltf_TriangulationReader_swigregister
RWGltf_TriangulationReader_swigregister(RWGltf_TriangulationReader)


@classnotwrapped
class RWGltf_GltfSharedIStream:
	pass




# This file is compatible with both classic and new-style classes.


