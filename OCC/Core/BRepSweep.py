# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepSweep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepsweep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepSweep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepSweep')
    _BRepSweep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepSweep', [dirname(__file__)])
        except ImportError:
            import _BRepSweep
            return _BRepSweep
        try:
            _mod = imp.load_module('_BRepSweep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepSweep = swig_import_helper()
    del swig_import_helper
else:
    import _BRepSweep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepSweep.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BRepSweep.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepSweep.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepSweep.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BRepSweep.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BRepSweep.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BRepSweep.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BRepSweep.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BRepSweep.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BRepSweep.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepSweep.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepSweep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepSweep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepSweep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepSweep.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepSweep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BRepSweep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepSweep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepSweep.process_exception(error, method_name, class_name)
process_exception = _BRepSweep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BRep
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.Geom
import OCC.Core.TColgp
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.Geom2d
import OCC.Core.Sweep

from enum import IntEnum
from OCC.Core.Exception import *



class BRepSweep_Builder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_Builder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_Builder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a builder.

        Parameters
        ----------
        aBuilder: BRep_Builder

        Returns
        -------
        None

        """
        this = _BRepSweep.new_BRepSweep_Builder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "void":
        """
        Adds the shape 1 in the shape 2, set to <orient> orientation.

        Parameters
        ----------
        aShape1: TopoDS_Shape
        aShape2: TopoDS_Shape
        Orient: TopAbs_Orientation

        Returns
        -------
        None

        Adds the shape 1 in the shape 2.

        Parameters
        ----------
        aShape1: TopoDS_Shape
        aShape2: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Builder_Add(self, *args)


    def Builder(self, *args) -> "BRep_Builder const &":
        """
        No available documentation.

        Returns
        -------
        BRep_Builder

        """
        return _BRepSweep.BRepSweep_Builder_Builder(self, *args)


    def MakeCompSolid(self, *args) -> "void":
        """
        Returns an empty compsolid.

        Parameters
        ----------
        aCompSolid: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Builder_MakeCompSolid(self, *args)


    def MakeCompound(self, *args) -> "void":
        """
        Returns an empty compound.

        Parameters
        ----------
        aCompound: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Builder_MakeCompound(self, *args)


    def MakeShell(self, *args) -> "void":
        """
        Returns an empty shell.

        Parameters
        ----------
        aShell: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Builder_MakeShell(self, *args)


    def MakeSolid(self, *args) -> "void":
        """
        Returns an empty solid.

        Parameters
        ----------
        aSolid: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Builder_MakeSolid(self, *args)


    def MakeWire(self, *args) -> "void":
        """
        Returns an empty wire.

        Parameters
        ----------
        aWire: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Builder_MakeWire(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Builder
    __del__ = lambda self: None
BRepSweep_Builder_swigregister = _BRepSweep.BRepSweep_Builder_swigregister
BRepSweep_Builder_swigregister(BRepSweep_Builder)

class BRepSweep_Iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_Iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_Iterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _BRepSweep.new_BRepSweep_Iterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Resest the iterator on sub-shapes of <ashape>.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Iterator_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a current sub-shape.

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_Iterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Moves to the next sub-shape.

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Iterator_Next(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        Returns the orientation of the current sub-shape.

        Returns
        -------
        TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Iterator_Orientation(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        Returns the current sub-shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Iterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Iterator
    __del__ = lambda self: None
BRepSweep_Iterator_swigregister = _BRepSweep.BRepSweep_Iterator_swigregister
BRepSweep_Iterator_swigregister(BRepSweep_Iterator)

class BRepSweep_NumLinearRegularSweep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_NumLinearRegularSweep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_NumLinearRegularSweep, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Closed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Closed(self, *args)


    def DirectSolid(self, *args) -> "TopAbs_Orientation":
        """
        Returns the orientation of the shell in the solid generated by the face agens with the edge adirs. it is reversed if the surface is swept in the direction of the normal.

        Parameters
        ----------
        aGenS: TopoDS_Shape
        aDirS: Sweep_NumShape

        Returns
        -------
        TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_DirectSolid(self, *args)


    def FirstShape(self, *args) -> "TopoDS_Shape":
        """
        Returns the resulting shape indexed by the first vertex of mydirwire and mygenshape.

        Returns
        -------
        TopoDS_Shape

        Returns the resulting shape indexed by the first vertex of mydirwire and agens.

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_FirstShape(self, *args)


    def GDDShapeIsToAdd(self, *args) -> "Standard_Boolean":
        """
        Returns true if anewsubshape (addressed by agens and asubdirs) must be added in anewshape (addressed by agens and adirs).

        Parameters
        ----------
        aNewShape: TopoDS_Shape
        aNewSubShape: TopoDS_Shape
        aGenS: TopoDS_Shape
        aDirS: Sweep_NumShape
        aSubDirS: Sweep_NumShape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GDDShapeIsToAdd(self, *args)


    def GGDShapeIsToAdd(self, *args) -> "Standard_Boolean":
        """
        Returns true if anewsubshape (addressed by asubgens and adirs) must be added in anewshape (addressed by agens and adirs).

        Parameters
        ----------
        aNewShape: TopoDS_Shape
        aNewSubShape: TopoDS_Shape
        aGenS: TopoDS_Shape
        aSubGenS: TopoDS_Shape
        aDirS: Sweep_NumShape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GGDShapeIsToAdd(self, *args)


    def GenIsUsed(self, *args) -> "Standard_Boolean":
        """
        Returns true if the shape, generated from thes is used in result shape.

        Parameters
        ----------
        theS: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GenIsUsed(self, *args)


    def HasShape(self, *args) -> "Standard_Boolean":
        """
        Returns true if adirs and agens addresses a resulting shape. in some specific cases the shape can be geometrically inexsistant, then this function returns false.

        Parameters
        ----------
        aGenS: TopoDS_Shape
        aDirS: Sweep_NumShape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_HasShape(self, *args)


    def IsInvariant(self, *args) -> "Standard_Boolean":
        """
        Returns true if agens cannot be transformed.

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_IsInvariant(self, *args)


    def IsUsed(self, *args) -> "Standard_Boolean":
        """
        Returns true if the initial shape agens is used in result shape.

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_IsUsed(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape":
        """
        Returns the resulting shape indexed by the last vertex of mydirwire and mygenshape.

        Returns
        -------
        TopoDS_Shape

        Returns the resulting shape indexed by the last vertex of mydirwire and agens.

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_LastShape(self, *args)


    def MakeEmptyDirectingEdge(self, *args) -> "TopoDS_Shape":
        """
        Builds the edge addressed by [agenv,adire], with its geometric part, but without subcomponents.

        Parameters
        ----------
        aGenV: TopoDS_Shape
        aDirE: Sweep_NumShape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyDirectingEdge(self, *args)


    def MakeEmptyFace(self, *args) -> "TopoDS_Shape":
        """
        Builds the face addressed by [agens,adirs], with its geometric part, but without subcomponents. the couple agens, adirs can be a 'generating face and a directing vertex' or 'a generating edge and a directing edge'.

        Parameters
        ----------
        aGenS: TopoDS_Shape
        aDirS: Sweep_NumShape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyFace(self, *args)


    def MakeEmptyGeneratingEdge(self, *args) -> "TopoDS_Shape":
        """
        Builds the edge addressed by [agene,adirv], with its geometric part, but without subcomponents.

        Parameters
        ----------
        aGenE: TopoDS_Shape
        aDirV: Sweep_NumShape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyGeneratingEdge(self, *args)


    def MakeEmptyVertex(self, *args) -> "TopoDS_Shape":
        """
        Builds the vertex addressed by [agenv,adirv], with its geometric part, but without subcomponents.

        Parameters
        ----------
        aGenV: TopoDS_Shape
        aDirV: Sweep_NumShape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyVertex(self, *args)


    def SeparatedWires(self, *args) -> "Standard_Boolean":
        """
        In some particular cases the topology of a generated face must be composed of independant closed wires, in this case this function returns true.

        Parameters
        ----------
        aNewShape: TopoDS_Shape
        aNewSubShape: TopoDS_Shape
        aGenS: TopoDS_Shape
        aSubGenS: TopoDS_Shape
        aDirS: Sweep_NumShape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SeparatedWires(self, *args)


    def SetContinuity(self, *args) -> "void":
        """
        Called to propagate the continuity of every vertex between two edges of the generating wire agens on the generated edge and faces.

        Parameters
        ----------
        aGenS: TopoDS_Shape
        aDirS: Sweep_NumShape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetContinuity(self, *args)


    def SetDirectingPCurve(self, *args) -> "void":
        """
        Sets the pcurve for a new edge on a new face. the new edge and the new face were generated using agene, adire and agenv.

        Parameters
        ----------
        aNewFace: TopoDS_Shape
        aNewEdge: TopoDS_Shape
        aGenE: TopoDS_Shape
        aGenV: TopoDS_Shape
        aDirE: Sweep_NumShape
        orien: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingPCurve(self, *args)


    def SetDirectingParameter(self, *args) -> "void":
        """
        Sets the parameter of the new vertex on the new edge. the new edge and new vertex where generated from agenv adire, and adirv.

        Parameters
        ----------
        aNewEdge: TopoDS_Shape
        aNewVertex: TopoDS_Shape
        aGenV: TopoDS_Shape
        aDirE: Sweep_NumShape
        aDirV: Sweep_NumShape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingParameter(self, *args)


    def SetGeneratingPCurve(self, *args) -> "void":
        """
        Sets the pcurve for a new edge on a new face. the new edge and the new face were generated using agene, adire and adirv.

        Parameters
        ----------
        aNewFace: TopoDS_Shape
        aNewEdge: TopoDS_Shape
        aGenE: TopoDS_Shape
        aDirE: Sweep_NumShape
        aDirV: Sweep_NumShape
        orien: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingPCurve(self, *args)


    def SetGeneratingParameter(self, *args) -> "void":
        """
        Sets the parameter of the new vertex on the new edge. the new edge and new vertex where generated from agene, agenv and adirv .

        Parameters
        ----------
        aNewEdge: TopoDS_Shape
        aNewVertex: TopoDS_Shape
        aGenE: TopoDS_Shape
        aGenV: TopoDS_Shape
        aDirV: Sweep_NumShape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingParameter(self, *args)


    def SetPCurve(self, *args) -> "void":
        """
        Sets the pcurve for a new edge on a new face. the new edge and the new face were generated using agenf, agene and adirv.

        Parameters
        ----------
        aNewFace: TopoDS_Shape
        aNewEdge: TopoDS_Shape
        aGenF: TopoDS_Shape
        aGenE: TopoDS_Shape
        aDirV: Sweep_NumShape
        orien: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetPCurve(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        Sets the parameters of the new vertex on the new face. the new face and new vertex where generated from agenf, agenv and adirv .

        Parameters
        ----------
        aNewFace: TopoDS_Shape
        aNewVertex: TopoDS_Shape
        aGenF: TopoDS_Shape
        aGenV: TopoDS_Shape
        aDirV: Sweep_NumShape

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetParameters(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        Returns the resulting shape indexed by adirs and agens.

        Parameters
        ----------
        aGenS: TopoDS_Shape
        aDirS: Sweep_NumShape

        Returns
        -------
        TopoDS_Shape

        Returns the resulting shape indexed by mydirwire and agens.

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        Returns the resulting shape indexed by mydirwire and mygenshape.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Shape(self, *args)


    def SplitShell(self, *args) -> "TopoDS_Shape":
        """
        In some particular cases the topology of a generated shell must be composed of independant closed shells, in this case this function returns a compound of independant shells.

        Parameters
        ----------
        aNewShape: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SplitShell(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_NumLinearRegularSweep
    __del__ = lambda self: None
BRepSweep_NumLinearRegularSweep_swigregister = _BRepSweep.BRepSweep_NumLinearRegularSweep_swigregister
BRepSweep_NumLinearRegularSweep_swigregister(BRepSweep_NumLinearRegularSweep)

class BRepSweep_Prism(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_Prism, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_Prism, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Builds the prism of base s and vector v. if c is true, s is copied. if canonize is true then generated surfaces are attempted to be canonized in simple types.

        Parameters
        ----------
        S: TopoDS_Shape
        V: gp_Vec
        Copy: bool,optional
        	default value is Standard_False
        Canonize: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        Builds a semi-infinite or an infinite prism of base s. if copy is true s is copied. if inf is true the prism is infinite, if inf is false the prism is infinite in the direction d. if canonize is true then generated surfaces are attempted to be canonized in simple types.

        Parameters
        ----------
        S: TopoDS_Shape
        D: gp_Dir
        Inf: bool,optional
        	default value is Standard_True
        Copy: bool,optional
        	default value is Standard_False
        Canonize: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _BRepSweep.new_BRepSweep_Prism(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FirstShape(self, *args) -> "TopoDS_Shape":
        """
        Returns the topods shape of the bottom of the prism.

        Returns
        -------
        TopoDS_Shape

        Returns the topods shape of the bottom of the prism. generated with agens (subshape of the generating shape).

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_FirstShape(self, *args)


    def GenIsUsed(self, *args) -> "Standard_Boolean":
        """
        Returns true if the shape, generated from thes is used in result shape.

        Parameters
        ----------
        theS: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_Prism_GenIsUsed(self, *args)


    def IsUsed(self, *args) -> "Standard_Boolean":
        """
        Returns true if the agens is used in resulting shape.

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_Prism_IsUsed(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape":
        """
        Returns the topods shape of the top of the prism.

        Returns
        -------
        TopoDS_Shape

        Returns the topods shape of the top of the prism. generated with agens (subshape of the generating shape).

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_LastShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        Returns the topods shape attached to the prism.

        Returns
        -------
        TopoDS_Shape

        Returns the topods shape generated with agens (subshape of the generating shape).

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_Shape(self, *args)


    def Vec(self, *args) -> "gp_Vec":
        """
        Returns the vector of the prism, if it is an infinite prism the vec is unitar.

        Returns
        -------
        gp_Vec

        """
        return _BRepSweep.BRepSweep_Prism_Vec(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Prism
    __del__ = lambda self: None
BRepSweep_Prism_swigregister = _BRepSweep.BRepSweep_Prism_swigregister
BRepSweep_Prism_swigregister(BRepSweep_Prism)

class BRepSweep_Revol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_Revol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_Revol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Builds the revol of meridian s axis a and angle d. if c is true s is copied.

        Parameters
        ----------
        S: TopoDS_Shape
        A: gp_Ax1
        D: float
        C: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        Builds the revol of meridian s axis a and angle 2*pi. if c is true s is copied.

        Parameters
        ----------
        S: TopoDS_Shape
        A: gp_Ax1
        C: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _BRepSweep.new_BRepSweep_Revol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angle(self, *args) -> "Standard_Real":
        """
        Returns the angle.

        Returns
        -------
        float

        """
        return _BRepSweep.BRepSweep_Revol_Angle(self, *args)


    def Axe(self, *args) -> "gp_Ax1":
        """
        Returns the axis.

        Returns
        -------
        gp_Ax1

        """
        return _BRepSweep.BRepSweep_Revol_Axe(self, *args)


    def FirstShape(self, *args) -> "TopoDS_Shape":
        """
        Returns the first shape of the revol (coinciding with the generating shape).

        Returns
        -------
        TopoDS_Shape

        Returns the first shape of the revol (coinciding with the generating shape).

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_FirstShape(self, *args)


    def IsUsed(self, *args) -> "Standard_Boolean":
        """
        Returns true if the agens is used in resulting shape .

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_Revol_IsUsed(self, *args)


    def LastShape(self, *args) -> "TopoDS_Shape":
        """
        Returns the topods shape of the top of the prism.

        Returns
        -------
        TopoDS_Shape

        Returns the topods shape of the top of the prism. generated with agens (subshape of the generating shape).

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_LastShape(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        Returns the topods shape attached to the revol.

        Returns
        -------
        TopoDS_Shape

        Returns the topods shape generated with agens (subshape of the generating shape).

        Parameters
        ----------
        aGenS: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_Shape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Revol
    __del__ = lambda self: None
BRepSweep_Revol_swigregister = _BRepSweep.BRepSweep_Revol_swigregister
BRepSweep_Revol_swigregister(BRepSweep_Revol)

class BRepSweep_Tool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_Tool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_Tool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialize the tool with <ashape>. the indextool must prepare an indexation for all the subshapes of this shape.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _BRepSweep.new_BRepSweep_Tool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of <ashape>.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        int

        """
        return _BRepSweep.BRepSweep_Tool_Index(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """
        Returns the number of subshapes in the shape.

        Returns
        -------
        int

        """
        return _BRepSweep.BRepSweep_Tool_NbShapes(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        Returns the orientation of <ashape>.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Tool_Orientation(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        Set the orientation of <ashape> with or.

        Parameters
        ----------
        aShape: TopoDS_Shape
        Or: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Tool_SetOrientation(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape":
        """
        Returns the shape at index anidex.

        Parameters
        ----------
        anIndex: int

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Tool_Shape(self, *args)


    def Type(self, *args) -> "TopAbs_ShapeEnum":
        """
        Returns the type of <ashape>.

        Parameters
        ----------
        aShape: TopoDS_Shape

        Returns
        -------
        TopAbs_ShapeEnum

        """
        return _BRepSweep.BRepSweep_Tool_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Tool
    __del__ = lambda self: None
BRepSweep_Tool_swigregister = _BRepSweep.BRepSweep_Tool_swigregister
BRepSweep_Tool_swigregister(BRepSweep_Tool)

class BRepSweep_Trsf(BRepSweep_NumLinearRegularSweep):
    __swig_setmethods__ = {}
    for _s in [BRepSweep_NumLinearRegularSweep]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_Trsf, name, value)
    __swig_getmethods__ = {}
    for _s in [BRepSweep_NumLinearRegularSweep]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_Trsf, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Init(self, *args) -> "void":
        """
        Ends the construction of the swept primitive calling the virtual geometric functions that can't be called in the initialize.

        Returns
        -------
        None

        """
        return _BRepSweep.BRepSweep_Trsf_Init(self, *args)


    def Process(self, *args) -> "Standard_Boolean":
        """
        Function called to analize the way of construction of the shapes generated by agens and adirv.

        Parameters
        ----------
        aGenS: TopoDS_Shape
        aDirV: Sweep_NumShape

        Returns
        -------
        bool

        """
        return _BRepSweep.BRepSweep_Trsf_Process(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Trsf
    __del__ = lambda self: None
BRepSweep_Trsf_swigregister = _BRepSweep.BRepSweep_Trsf_swigregister
BRepSweep_Trsf_swigregister(BRepSweep_Trsf)

class BRepSweep_Rotation(BRepSweep_Trsf):
    __swig_setmethods__ = {}
    for _s in [BRepSweep_Trsf]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_Rotation, name, value)
    __swig_getmethods__ = {}
    for _s in [BRepSweep_Trsf]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_Rotation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a topology by rotating <s> around a with the angle d.

        Parameters
        ----------
        S: TopoDS_Shape
        N: Sweep_NumShape
        L: TopLoc_Location
        A: gp_Ax1
        D: float
        C: bool

        Returns
        -------
        None

        """
        this = _BRepSweep.new_BRepSweep_Rotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angle(self, *args) -> "Standard_Real":
        """
        Returns the angle.

        Returns
        -------
        float

        """
        return _BRepSweep.BRepSweep_Rotation_Angle(self, *args)


    def Axe(self, *args) -> "gp_Ax1":
        """
        Returns the axis.

        Returns
        -------
        gp_Ax1

        """
        return _BRepSweep.BRepSweep_Rotation_Axe(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Rotation
    __del__ = lambda self: None
BRepSweep_Rotation_swigregister = _BRepSweep.BRepSweep_Rotation_swigregister
BRepSweep_Rotation_swigregister(BRepSweep_Rotation)

class BRepSweep_Translation(BRepSweep_Trsf):
    __swig_setmethods__ = {}
    for _s in [BRepSweep_Trsf]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepSweep_Translation, name, value)
    __swig_getmethods__ = {}
    for _s in [BRepSweep_Trsf]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepSweep_Translation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a topology by translating <s> with the vector <v>. if c is true s sucomponents are copied. if canonize is true then generated surfaces are attempted to be canonized in simple types.

        Parameters
        ----------
        S: TopoDS_Shape
        N: Sweep_NumShape
        L: TopLoc_Location
        V: gp_Vec
        C: bool
        Canonize: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _BRepSweep.new_BRepSweep_Translation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Vec(self, *args) -> "gp_Vec":
        """
        Returns the vector of the prism, if it is an infinite prism the vec is unitar.

        Returns
        -------
        gp_Vec

        """
        return _BRepSweep.BRepSweep_Translation_Vec(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Translation
    __del__ = lambda self: None
BRepSweep_Translation_swigregister = _BRepSweep.BRepSweep_Translation_swigregister
BRepSweep_Translation_swigregister(BRepSweep_Translation)



# This file is compatible with both classic and new-style classes.


