# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWStepAP242 module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwstepap242.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepAP242')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepAP242')
    _RWStepAP242 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepAP242', [dirname(__file__)])
        except ImportError:
            import _RWStepAP242
            return _RWStepAP242
        try:
            _mod = imp.load_module('_RWStepAP242', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepAP242 = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepAP242
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepAP242.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _RWStepAP242.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWStepAP242.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWStepAP242.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _RWStepAP242.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepAP242.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _RWStepAP242.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _RWStepAP242.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _RWStepAP242.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _RWStepAP242.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWStepAP242.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepAP242.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepAP242.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWStepAP242.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWStepAP242.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWStepAP242.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _RWStepAP242.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepAP242.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWStepAP242.process_exception(error, method_name, class_name)
process_exception = _RWStepAP242.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepAP242
import OCC.Core.StepBasic
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepRepr
import OCC.Core.StepDimTol
import OCC.Core.StepAP214
import OCC.Core.StepVisual
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *



class RWStepAP242_RWDraughtingModelItemAssociation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP242_RWDraughtingModelItemAssociation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP242_RWDraughtingModelItemAssociation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepAP242.new_RWStepAP242_RWDraughtingModelItemAssociation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP242_DraughtingModelItemAssociation

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWDraughtingModelItemAssociation_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepAP242_DraughtingModelItemAssociation
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWDraughtingModelItemAssociation_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP242_DraughtingModelItemAssociation

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWDraughtingModelItemAssociation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP242.delete_RWStepAP242_RWDraughtingModelItemAssociation
    __del__ = lambda self: None
RWStepAP242_RWDraughtingModelItemAssociation_swigregister = _RWStepAP242.RWStepAP242_RWDraughtingModelItemAssociation_swigregister
RWStepAP242_RWDraughtingModelItemAssociation_swigregister(RWStepAP242_RWDraughtingModelItemAssociation)

class RWStepAP242_RWGeometricItemSpecificUsage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP242_RWGeometricItemSpecificUsage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP242_RWGeometricItemSpecificUsage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepAP242.new_RWStepAP242_RWGeometricItemSpecificUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP242_GeometricItemSpecificUsage

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWGeometricItemSpecificUsage_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepAP242_GeometricItemSpecificUsage
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWGeometricItemSpecificUsage_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP242_GeometricItemSpecificUsage

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWGeometricItemSpecificUsage_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP242.delete_RWStepAP242_RWGeometricItemSpecificUsage
    __del__ = lambda self: None
RWStepAP242_RWGeometricItemSpecificUsage_swigregister = _RWStepAP242.RWStepAP242_RWGeometricItemSpecificUsage_swigregister
RWStepAP242_RWGeometricItemSpecificUsage_swigregister(RWStepAP242_RWGeometricItemSpecificUsage)

class RWStepAP242_RWIdAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP242_RWIdAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP242_RWIdAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepAP242.new_RWStepAP242_RWIdAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP242_IdAttribute

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWIdAttribute_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepAP242_IdAttribute
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWIdAttribute_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP242_IdAttribute

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWIdAttribute_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP242.delete_RWStepAP242_RWIdAttribute
    __del__ = lambda self: None
RWStepAP242_RWIdAttribute_swigregister = _RWStepAP242.RWStepAP242_RWIdAttribute_swigregister
RWStepAP242_RWIdAttribute_swigregister(RWStepAP242_RWIdAttribute)

class RWStepAP242_RWItemIdentifiedRepresentationUsage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP242_RWItemIdentifiedRepresentationUsage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP242_RWItemIdentifiedRepresentationUsage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepAP242.new_RWStepAP242_RWItemIdentifiedRepresentationUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP242_ItemIdentifiedRepresentationUsage

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWItemIdentifiedRepresentationUsage_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepAP242_ItemIdentifiedRepresentationUsage
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWItemIdentifiedRepresentationUsage_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP242_ItemIdentifiedRepresentationUsage

        Returns
        -------
        None

        """
        return _RWStepAP242.RWStepAP242_RWItemIdentifiedRepresentationUsage_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP242.delete_RWStepAP242_RWItemIdentifiedRepresentationUsage
    __del__ = lambda self: None
RWStepAP242_RWItemIdentifiedRepresentationUsage_swigregister = _RWStepAP242.RWStepAP242_RWItemIdentifiedRepresentationUsage_swigregister
RWStepAP242_RWItemIdentifiedRepresentationUsage_swigregister(RWStepAP242_RWItemIdentifiedRepresentationUsage)



# This file is compatible with both classic and new-style classes.


