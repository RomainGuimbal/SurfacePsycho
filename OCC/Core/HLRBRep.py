# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
HLRBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_hlrbrep.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HLRBRep
else:
    import _HLRBRep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRBRep.delete_SwigPyIterator

    def value(self):
        return _HLRBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HLRBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HLRBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HLRBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HLRBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HLRBRep.SwigPyIterator_copy(self)

    def next(self):
        return _HLRBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _HLRBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _HLRBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HLRBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HLRBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HLRBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HLRBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HLRBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HLRBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HLRBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HLRBRep:
_HLRBRep.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _HLRBRep.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.HLRAlgo
import OCC.Core.TColgp
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.IntRes2d
import OCC.Core.TopTools
import OCC.Core.BRepTopAdaptor
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.HLRTopoBRep
import OCC.Core.Contap
import OCC.Core.IntCurve
import OCC.Core.Extrema

from enum import IntEnum
from OCC.Core.Exception import *

HLRBRep_Undefined = _HLRBRep.HLRBRep_Undefined
HLRBRep_IsoLine = _HLRBRep.HLRBRep_IsoLine
HLRBRep_OutLine = _HLRBRep.HLRBRep_OutLine
HLRBRep_Rg1Line = _HLRBRep.HLRBRep_Rg1Line
HLRBRep_RgNLine = _HLRBRep.HLRBRep_RgNLine
HLRBRep_Sharp = _HLRBRep.HLRBRep_Sharp


class HLRBRep_TypeOfResultingEdge(IntEnum):
	HLRBRep_Undefined = 0
	HLRBRep_IsoLine = 1
	HLRBRep_OutLine = 2
	HLRBRep_Rg1Line = 3
	HLRBRep_RgNLine = 4
	HLRBRep_Sharp = 5
HLRBRep_Undefined = HLRBRep_TypeOfResultingEdge.HLRBRep_Undefined
HLRBRep_IsoLine = HLRBRep_TypeOfResultingEdge.HLRBRep_IsoLine
HLRBRep_OutLine = HLRBRep_TypeOfResultingEdge.HLRBRep_OutLine
HLRBRep_Rg1Line = HLRBRep_TypeOfResultingEdge.HLRBRep_Rg1Line
HLRBRep_RgNLine = HLRBRep_TypeOfResultingEdge.HLRBRep_RgNLine
HLRBRep_Sharp = HLRBRep_TypeOfResultingEdge.HLRBRep_Sharp


def Handle_HLRBRep_AreaLimit_Create():
    return _HLRBRep.Handle_HLRBRep_AreaLimit_Create()

def Handle_HLRBRep_AreaLimit_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_AreaLimit_DownCast(t)

def Handle_HLRBRep_AreaLimit_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_AreaLimit_IsNull(t)

def Handle_HLRBRep_Data_Create():
    return _HLRBRep.Handle_HLRBRep_Data_Create()

def Handle_HLRBRep_Data_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_Data_DownCast(t)

def Handle_HLRBRep_Data_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_Data_IsNull(t)

def Handle_HLRBRep_InternalAlgo_Create():
    return _HLRBRep.Handle_HLRBRep_InternalAlgo_Create()

def Handle_HLRBRep_InternalAlgo_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_InternalAlgo_DownCast(t)

def Handle_HLRBRep_InternalAlgo_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_InternalAlgo_IsNull(t)

def Handle_HLRBRep_PolyAlgo_Create():
    return _HLRBRep.Handle_HLRBRep_PolyAlgo_Create()

def Handle_HLRBRep_PolyAlgo_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_PolyAlgo_DownCast(t)

def Handle_HLRBRep_PolyAlgo_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_PolyAlgo_IsNull(t)

def Handle_HLRBRep_Algo_Create():
    return _HLRBRep.Handle_HLRBRep_Algo_Create()

def Handle_HLRBRep_Algo_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_Algo_DownCast(t)

def Handle_HLRBRep_Algo_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_Algo_IsNull(t)
class HLRBRep_Array1OfEData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_Array1OfEData_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_Array1OfEData_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_Array1OfEData_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_Array1OfEData_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_Array1OfEData_swiginit(self, _HLRBRep.new_HLRBRep_Array1OfEData(*args))

    def Init(self, theValue):
        return _HLRBRep.HLRBRep_Array1OfEData_Init(self, theValue)

    def Size(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Size(self)

    def Length(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Length(self)

    def IsEmpty(self):
        return _HLRBRep.HLRBRep_Array1OfEData_IsEmpty(self)

    def Lower(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Lower(self)

    def Upper(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Upper(self)

    def IsDeletable(self):
        return _HLRBRep.HLRBRep_Array1OfEData_IsDeletable(self)

    def IsAllocated(self):
        return _HLRBRep.HLRBRep_Array1OfEData_IsAllocated(self)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_Array1OfEData_Assign(self, theOther)

    def Move(self, theOther):
        return _HLRBRep.HLRBRep_Array1OfEData_Move(self, theOther)

    def Set(self, *args):
        return _HLRBRep.HLRBRep_Array1OfEData_Set(self, *args)

    def First(self):
        return _HLRBRep.HLRBRep_Array1OfEData_First(self)

    def ChangeFirst(self):
        return _HLRBRep.HLRBRep_Array1OfEData_ChangeFirst(self)

    def Last(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Last(self)

    def ChangeLast(self):
        return _HLRBRep.HLRBRep_Array1OfEData_ChangeLast(self)

    def Value(self, theIndex):
        return _HLRBRep.HLRBRep_Array1OfEData_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _HLRBRep.HLRBRep_Array1OfEData_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _HLRBRep.HLRBRep_Array1OfEData___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _HLRBRep.HLRBRep_Array1OfEData_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _HLRBRep.HLRBRep_Array1OfEData_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Array1OfEData

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register HLRBRep_Array1OfEData in _HLRBRep:
_HLRBRep.HLRBRep_Array1OfEData_swigregister(HLRBRep_Array1OfEData)
class HLRBRep_Array1OfFData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_Array1OfFData_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_Array1OfFData_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_Array1OfFData_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_Array1OfFData_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_Array1OfFData_swiginit(self, _HLRBRep.new_HLRBRep_Array1OfFData(*args))

    def Init(self, theValue):
        return _HLRBRep.HLRBRep_Array1OfFData_Init(self, theValue)

    def Size(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Size(self)

    def Length(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Length(self)

    def IsEmpty(self):
        return _HLRBRep.HLRBRep_Array1OfFData_IsEmpty(self)

    def Lower(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Lower(self)

    def Upper(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Upper(self)

    def IsDeletable(self):
        return _HLRBRep.HLRBRep_Array1OfFData_IsDeletable(self)

    def IsAllocated(self):
        return _HLRBRep.HLRBRep_Array1OfFData_IsAllocated(self)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_Array1OfFData_Assign(self, theOther)

    def Move(self, theOther):
        return _HLRBRep.HLRBRep_Array1OfFData_Move(self, theOther)

    def Set(self, *args):
        return _HLRBRep.HLRBRep_Array1OfFData_Set(self, *args)

    def First(self):
        return _HLRBRep.HLRBRep_Array1OfFData_First(self)

    def ChangeFirst(self):
        return _HLRBRep.HLRBRep_Array1OfFData_ChangeFirst(self)

    def Last(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Last(self)

    def ChangeLast(self):
        return _HLRBRep.HLRBRep_Array1OfFData_ChangeLast(self)

    def Value(self, theIndex):
        return _HLRBRep.HLRBRep_Array1OfFData_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _HLRBRep.HLRBRep_Array1OfFData_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _HLRBRep.HLRBRep_Array1OfFData___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _HLRBRep.HLRBRep_Array1OfFData_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _HLRBRep.HLRBRep_Array1OfFData_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Array1OfFData

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register HLRBRep_Array1OfFData in _HLRBRep:
_HLRBRep.HLRBRep_Array1OfFData_swigregister(HLRBRep_Array1OfFData)
class HLRBRep_ListIteratorOfListOfBPnt2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_swiginit(self, _HLRBRep.new_HLRBRep_ListIteratorOfListOfBPnt2D(*args))

    def More(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_More(self)

    def Next(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_Next(self)

    def Value(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_Value(self)

    def ChangeValue(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_ChangeValue(self)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ListIteratorOfListOfBPnt2D

# Register HLRBRep_ListIteratorOfListOfBPnt2D in _HLRBRep:
_HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_swigregister(HLRBRep_ListIteratorOfListOfBPnt2D)
class HLRBRep_ListIteratorOfListOfBPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_swiginit(self, _HLRBRep.new_HLRBRep_ListIteratorOfListOfBPoint(*args))

    def More(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_More(self)

    def Next(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_Next(self)

    def Value(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_Value(self)

    def ChangeValue(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_ChangeValue(self)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ListIteratorOfListOfBPoint

# Register HLRBRep_ListIteratorOfListOfBPoint in _HLRBRep:
_HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_swigregister(HLRBRep_ListIteratorOfListOfBPoint)
class HLRBRep_ListOfBPnt2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_ListOfBPnt2D_swiginit(self, _HLRBRep.new_HLRBRep_ListOfBPnt2D(*args))

    def Size(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Size(self)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Assign(self, theOther)

    def Set(self, theOther):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Clear(self, theAllocator)

    def First(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_First(self)

    def Last(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Last(self)

    def Append(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Append(self, *args)

    def Prepend(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Prepend(self, *args)

    def RemoveFirst(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_RemoveFirst(self)

    def Remove(self, theIter):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_InsertAfter(self, *args)

    def Reverse(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Reverse(self)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ListOfBPnt2D

    def __len__(self):
        return self.Size()


# Register HLRBRep_ListOfBPnt2D in _HLRBRep:
_HLRBRep.HLRBRep_ListOfBPnt2D_swigregister(HLRBRep_ListOfBPnt2D)
class HLRBRep_ListOfBPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_ListOfBPoint_swiginit(self, _HLRBRep.new_HLRBRep_ListOfBPoint(*args))

    def Size(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_Size(self)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_ListOfBPoint_Assign(self, theOther)

    def Set(self, theOther):
        return _HLRBRep.HLRBRep_ListOfBPoint_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _HLRBRep.HLRBRep_ListOfBPoint_Clear(self, theAllocator)

    def First(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_First(self)

    def Last(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_Last(self)

    def Append(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPoint_Append(self, *args)

    def Prepend(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPoint_Prepend(self, *args)

    def RemoveFirst(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_RemoveFirst(self)

    def Remove(self, theIter):
        return _HLRBRep.HLRBRep_ListOfBPoint_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPoint_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPoint_InsertAfter(self, *args)

    def Reverse(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_Reverse(self)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ListOfBPoint

    def __len__(self):
        return self.Size()


# Register HLRBRep_ListOfBPoint in _HLRBRep:
_HLRBRep.HLRBRep_ListOfBPoint_swigregister(HLRBRep_ListOfBPoint)
class HLRBRep_SeqOfShapeBounds(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_SeqOfShapeBounds_swiginit(self, _HLRBRep.new_HLRBRep_SeqOfShapeBounds(*args))

    def Size(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Size(self)

    def Length(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Length(self)

    def Lower(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Lower(self)

    def Upper(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Upper(self)

    def IsEmpty(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_IsEmpty(self)

    def Reverse(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Reverse(self)

    def Exchange(self, I, J):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Assign(self, theOther)

    def Set(self, theOther):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Set(self, theOther)

    def Remove(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Remove(self, *args)

    def Append(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Append(self, *args)

    def Prepend(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Split(self, theIndex, theSeq)

    def First(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_First(self)

    def ChangeFirst(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_ChangeFirst(self)

    def Last(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Last(self)

    def ChangeLast(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_ChangeLast(self)

    def Value(self, theIndex):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_SeqOfShapeBounds

    def __len__(self):
        return self.Size()


# Register HLRBRep_SeqOfShapeBounds in _HLRBRep:
_HLRBRep.HLRBRep_SeqOfShapeBounds_swigregister(HLRBRep_SeqOfShapeBounds)
class hlrbrep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def MakeEdge(*args):
        r"""

        Parameters
        ----------
        ec: HLRBRep_Curve
        U1: float
        U2: float

        Return
        -------
        TopoDS_Edge

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.hlrbrep_MakeEdge(*args)

    @staticmethod
    def MakeEdge3d(*args):
        r"""

        Parameters
        ----------
        ec: HLRBRep_Curve
        U1: float
        U2: float

        Return
        -------
        TopoDS_Edge

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.hlrbrep_MakeEdge3d(*args)

    @staticmethod
    def PolyHLRAngleAndDeflection(*args):
        r"""

        Parameters
        ----------
        InAngl: float

        Return
        -------
        OutAngl: float
        OutDefl: float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.hlrbrep_PolyHLRAngleAndDeflection(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.hlrbrep_swiginit(self, _HLRBRep.new_hlrbrep())
    __swig_destroy__ = _HLRBRep.delete_hlrbrep

# Register hlrbrep in _HLRBRep:
_HLRBRep.hlrbrep_swigregister(hlrbrep)
class HLRBRep_AreaLimit(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        V: HLRAlgo_Intersection
        Boundary: bool
        Interference: bool
        StateBefore: TopAbs_State
        StateAfter: TopAbs_State
        EdgeBefore: TopAbs_State
        EdgeAfter: TopAbs_State

        Return
        -------
        None

        Description
        -----------
        The previous and next field are set to null.

        """
        _HLRBRep.HLRBRep_AreaLimit_swiginit(self, _HLRBRep.new_HLRBRep_AreaLimit(*args))

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_Clear(self, *args)

    def EdgeAfter(self, *args):
        r"""

        Parameters
        ----------
        St: TopAbs_State

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        TopAbs_State

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_EdgeAfter(self, *args)

    def EdgeBefore(self, *args):
        r"""

        Parameters
        ----------
        St: TopAbs_State

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        TopAbs_State

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_EdgeBefore(self, *args)

    def IsBoundary(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_IsBoundary(self, *args)

    def IsInterference(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_IsInterference(self, *args)

    def Next(self, *args):
        r"""

        Parameters
        ----------
        N: HLRBRep_AreaLimit

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<HLRBRep_AreaLimit>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_Next(self, *args)

    def Previous(self, *args):
        r"""

        Parameters
        ----------
        P: HLRBRep_AreaLimit

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<HLRBRep_AreaLimit>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_Previous(self, *args)

    def StateAfter(self, *args):
        r"""

        Parameters
        ----------
        St: TopAbs_State

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        TopAbs_State

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_StateAfter(self, *args)

    def StateBefore(self, *args):
        r"""

        Parameters
        ----------
        St: TopAbs_State

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        TopAbs_State

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_StateBefore(self, *args)

    def Vertex(self, *args):
        r"""
        Return
        -------
        HLRAlgo_Intersection

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_AreaLimit_Vertex(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_AreaLimit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_AreaLimit

# Register HLRBRep_AreaLimit in _HLRBRep:
_HLRBRep.HLRBRep_AreaLimit_swigregister(HLRBRep_AreaLimit)
class HLRBRep_BCurveTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BSpline(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        opencascade::handle<Geom_BSplineCurve>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_BSpline(*args)

    @staticmethod
    def Bezier(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        opencascade::handle<Geom_BezierCurve>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Bezier(*args)

    @staticmethod
    def Circle(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        gp_Circ

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Circle(*args)

    @staticmethod
    def Continuity(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Continuity(*args)

    @staticmethod
    def D0(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        P: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the curve.

        """
        return _HLRBRep.HLRBRep_BCurveTool_D0(*args)

    @staticmethod
    def D1(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        P: gp_Pnt
        V: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        """
        return _HLRBRep.HLRBRep_BCurveTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        """
        return _HLRBRep.HLRBRep_BCurveTool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        """
        return _HLRBRep.HLRBRep_BCurveTool_D3(*args)

    @staticmethod
    def DN(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        N: int

        Return
        -------
        gp_Vec

        Description
        -----------
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        """
        return _HLRBRep.HLRBRep_BCurveTool_DN(*args)

    @staticmethod
    def Degree(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Degree(*args)

    @staticmethod
    def Ellipse(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        gp_Elips

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Ellipse(*args)

    @staticmethod
    def FirstParameter(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_FirstParameter(*args)

    @staticmethod
    def GetType(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        GeomAbs_CurveType

        Description
        -----------
        Returns the type of the curve in the current interval: line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        """
        return _HLRBRep.HLRBRep_BCurveTool_GetType(*args)

    @staticmethod
    def Hyperbola(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        gp_Hypr

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Hyperbola(*args)

    @staticmethod
    def Intervals(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        """
        return _HLRBRep.HLRBRep_BCurveTool_Intervals(*args)

    @staticmethod
    def IsClosed(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_IsClosed(*args)

    @staticmethod
    def IsPeriodic(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_IsPeriodic(*args)

    @staticmethod
    def IsRational(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_IsRational(*args)

    @staticmethod
    def LastParameter(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_LastParameter(*args)

    @staticmethod
    def Line(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        gp_Lin

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Line(*args)

    @staticmethod
    def NbIntervals(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        S: GeomAbs_Shape

        Return
        -------
        int

        Description
        -----------
        Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

        """
        return _HLRBRep.HLRBRep_BCurveTool_NbIntervals(*args)

    @staticmethod
    def NbKnots(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_NbKnots(*args)

    @staticmethod
    def NbPoles(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_NbPoles(*args)

    @staticmethod
    def NbSamples(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U0: float
        U1: float

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_NbSamples(*args)

    @staticmethod
    def Parabola(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        gp_Parab

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Parabola(*args)

    @staticmethod
    def Period(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Period(*args)

    @staticmethod
    def Poles(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        T: TColgp_Array1OfPnt

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Poles(*args)

    @staticmethod
    def PolesAndWeights(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        T: TColgp_Array1OfPnt
        W: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BCurveTool_PolesAndWeights(*args)

    @staticmethod
    def Resolution(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        R3d: float

        Return
        -------
        float

        Description
        -----------
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Resolution(*args)

    @staticmethod
    def Value(*args):
        r"""

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float

        Return
        -------
        gp_Pnt

        Description
        -----------
        Computes the point of parameter u on the curve.

        """
        return _HLRBRep.HLRBRep_BCurveTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_BCurveTool_swiginit(self, _HLRBRep.new_HLRBRep_BCurveTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_BCurveTool

# Register HLRBRep_BCurveTool in _HLRBRep:
_HLRBRep.HLRBRep_BCurveTool_swigregister(HLRBRep_BCurveTool)
class HLRBRep_BiPnt2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        x1: float
        y1: float
        x2: float
        y2: float
        S: TopoDS_Shape
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        thePoint1: gp_XY
        thePoint2: gp_XY
        S: TopoDS_Shape
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_BiPnt2D_swiginit(self, _HLRBRep.new_HLRBRep_BiPnt2D(*args))

    def IntLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPnt2D_IntLine(self, *args)

    def OutLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPnt2D_OutLine(self, *args)

    def P1(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPnt2D_P1(self, *args)

    def P2(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPnt2D_P2(self, *args)

    def Rg1Line(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPnt2D_Rg1Line(self, *args)

    def RgNLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPnt2D_RgNLine(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPnt2D_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_BiPnt2D

# Register HLRBRep_BiPnt2D in _HLRBRep:
_HLRBRep.HLRBRep_BiPnt2D_swigregister(HLRBRep_BiPnt2D)
class HLRBRep_BiPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        x1: float
        y1: float
        z1: float
        x2: float
        y2: float
        z2: float
        S: TopoDS_Shape
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_BiPoint_swiginit(self, _HLRBRep.new_HLRBRep_BiPoint(*args))

    def IntLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPoint_IntLine(self, *args)

    def OutLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPoint_OutLine(self, *args)

    def P1(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPoint_P1(self, *args)

    def P2(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPoint_P2(self, *args)

    def Rg1Line(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPoint_Rg1Line(self, *args)

    def RgNLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPoint_RgNLine(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_BiPoint_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_BiPoint

# Register HLRBRep_BiPoint in _HLRBRep:
_HLRBRep.HLRBRep_BiPoint_swigregister(HLRBRep_BiPoint)
class HLRBRep_CInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        C: Standard_Address
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Self intersection of a curve.

        Parameters
        ----------
        C: Standard_Address
        D: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Self intersection of a curve with a domain.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        C2: Standard_Address
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        C2: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        """
        _HLRBRep.HLRBRep_CInter_swiginit(self, _HLRBRep.new_HLRBRep_CInter(*args))

    def ComputeDomain(self, *args):
        r"""

        Parameters
        ----------
        C1: Standard_Address
        TolDomain: float

        Return
        -------
        IntRes2d_Domain

        Description
        -----------
        Create a domain from a curve.

        """
        return _HLRBRep.HLRBRep_CInter_ComputeDomain(self, *args)

    def GetMinNbSamples(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CInter_GetMinNbSamples(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        C2: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        C2: Standard_Address
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between 2 curves.

        """
        return _HLRBRep.HLRBRep_CInter_Perform(self, *args)

    def SetMinNbSamples(self, *args):
        r"""

        Parameters
        ----------
        theMinNbSamples: int

        Return
        -------
        None

        Description
        -----------
        Set / get minimum number of points in polygon intersection.

        """
        return _HLRBRep.HLRBRep_CInter_SetMinNbSamples(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_CInter

# Register HLRBRep_CInter in _HLRBRep:
_HLRBRep.HLRBRep_CInter_swigregister(HLRBRep_CInter)
class HLRBRep_CLProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        C: HLRBRep_Curve *
        N: int
        Resolution: float

        Return
        -------
        None

        Description
        -----------
        Initializes the local properties of the curve <c> the current point and the derivatives are computed at the same time, which allows an optimization of the computation time. <n> indicates the maximum number of derivations to be done (0, 1, 2 or 3). for example, to compute only the tangent, n should be equal to 1. <resolution> is the linear tolerance (it is used to test if a vector is null).

        Parameters
        ----------
        C: HLRBRep_Curve *
        U: float
        N: int
        Resolution: float

        Return
        -------
        None

        Description
        -----------
        Same as previous constructor but here the parameter is set to the value <u>. all the computations done will be related to <c> and <u>.

        Parameters
        ----------
        N: int
        Resolution: float

        Return
        -------
        None

        Description
        -----------
        Same as previous constructor but here the parameter is set to the value <u> and the curve is set with setcurve. the curve can have a empty constructor all the computations done will be related to <c> and <u> when the functions 'set' will be done.

        """
        _HLRBRep.HLRBRep_CLProps_swiginit(self, _HLRBRep.new_HLRBRep_CLProps(*args))

    def CentreOfCurvature(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Returns the centre of curvature <p>.

        """
        return _HLRBRep.HLRBRep_CLProps_CentreOfCurvature(self, *args)

    def Curvature(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the curvature.

        """
        return _HLRBRep.HLRBRep_CLProps_Curvature(self, *args)

    def D1(self, *args):
        r"""
        Return
        -------
        gp_Vec2d

        Description
        -----------
        Returns the first derivative. the derivative is computed if it has not been yet.

        """
        return _HLRBRep.HLRBRep_CLProps_D1(self, *args)

    def D2(self, *args):
        r"""
        Return
        -------
        gp_Vec2d

        Description
        -----------
        Returns the second derivative. the derivative is computed if it has not been yet.

        """
        return _HLRBRep.HLRBRep_CLProps_D2(self, *args)

    def D3(self, *args):
        r"""
        Return
        -------
        gp_Vec2d

        Description
        -----------
        Returns the third derivative. the derivative is computed if it has not been yet.

        """
        return _HLRBRep.HLRBRep_CLProps_D3(self, *args)

    def IsTangentDefined(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the tangent is defined. for example, the tangent is not defined if the three first derivatives are all null.

        """
        return _HLRBRep.HLRBRep_CLProps_IsTangentDefined(self, *args)

    def Normal(self, *args):
        r"""

        Parameters
        ----------
        N: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Returns the normal direction <n>.

        """
        return _HLRBRep.HLRBRep_CLProps_Normal(self, *args)

    def SetCurve(self, *args):
        r"""

        Parameters
        ----------
        C: HLRBRep_Curve *

        Return
        -------
        None

        Description
        -----------
        Initializes the local properties of the curve for the new curve.

        """
        return _HLRBRep.HLRBRep_CLProps_SetCurve(self, *args)

    def SetParameter(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        None

        Description
        -----------
        Initializes the local properties of the curve for the parameter value <u>.

        """
        return _HLRBRep.HLRBRep_CLProps_SetParameter(self, *args)

    def Tangent(self, *args):
        r"""

        Parameters
        ----------
        D: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Output the tangent direction <d>.

        """
        return _HLRBRep.HLRBRep_CLProps_Tangent(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the point.

        """
        return _HLRBRep.HLRBRep_CLProps_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_CLProps

# Register HLRBRep_CLProps in _HLRBRep:
_HLRBRep.HLRBRep_CLProps_swigregister(HLRBRep_CLProps)
class HLRBRep_CLPropsATool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Continuity(*args):
        r"""

        Parameters
        ----------
        A: HLRBRep_Curve *

        Return
        -------
        int

        Description
        -----------
        Returns the order of continuity of the curve <c>. returns 1: first derivative only is computable returns 2: first and second derivative only are computable. returns 3: first, second and third are computable.

        """
        return _HLRBRep.HLRBRep_CLPropsATool_Continuity(*args)

    @staticmethod
    def D1(*args):
        r"""

        Parameters
        ----------
        A: HLRBRep_Curve *
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Computes the point <p> and first derivative <v1> of parameter <u> on the curve <c>.

        """
        return _HLRBRep.HLRBRep_CLPropsATool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""

        Parameters
        ----------
        A: HLRBRep_Curve *
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Computes the point <p>, the first derivative <v1> and second derivative <v2> of parameter <u> on the curve <c>.

        """
        return _HLRBRep.HLRBRep_CLPropsATool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""

        Parameters
        ----------
        A: HLRBRep_Curve *
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Computes the point <p>, the first derivative <v1>, the second derivative <v2> and third derivative <v3> of parameter <u> on the curve <c>.

        """
        return _HLRBRep.HLRBRep_CLPropsATool_D3(*args)

    @staticmethod
    def FirstParameter(*args):
        r"""

        Parameters
        ----------
        A: HLRBRep_Curve *

        Return
        -------
        float

        Description
        -----------
        Returns the first parameter bound of the curve.

        """
        return _HLRBRep.HLRBRep_CLPropsATool_FirstParameter(*args)

    @staticmethod
    def LastParameter(*args):
        r"""

        Parameters
        ----------
        A: HLRBRep_Curve *

        Return
        -------
        float

        Description
        -----------
        Returns the last parameter bound of the curve. firstparameter must be less than lastparamenter.

        """
        return _HLRBRep.HLRBRep_CLPropsATool_LastParameter(*args)

    @staticmethod
    def Value(*args):
        r"""

        Parameters
        ----------
        A: HLRBRep_Curve *
        U: float
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Computes the point <p> of parameter <u> on the curve from hlrbrep <c>.

        """
        return _HLRBRep.HLRBRep_CLPropsATool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_CLPropsATool_swiginit(self, _HLRBRep.new_HLRBRep_CLPropsATool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_CLPropsATool

# Register HLRBRep_CLPropsATool in _HLRBRep:
_HLRBRep.HLRBRep_CLPropsATool_swigregister(HLRBRep_CLPropsATool)
class HLRBRep_Curve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an undefined curve.

        """
        _HLRBRep.HLRBRep_Curve_swiginit(self, _HLRBRep.new_HLRBRep_Curve(*args))

    def Circle(self, *args):
        r"""
        Return
        -------
        gp_Circ2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Circle(self, *args)

    def Continuity(self, *args):
        r"""
        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Continuity(self, *args)

    def Curve(self, *args):
        r"""
        Return
        -------
        BRepAdaptor_Curve

        Description
        -----------
        Returns the 3d curve.

        Parameters
        ----------
        E: TopoDS_Edge

        Return
        -------
        None

        Description
        -----------
        Sets the 3d curve to be projected.

        """
        return _HLRBRep.HLRBRep_Curve_Curve(self, *args)

    def D0(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Computes the 3d point of parameter u on the curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the curve.

        """
        return _HLRBRep.HLRBRep_Curve_D0(self, *args)

    def D1(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the curve with its first derivative.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        """
        return _HLRBRep.HLRBRep_Curve_D1(self, *args)

    def D2(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Raised if the continuity of the current interval is not c2.

        """
        return _HLRBRep.HLRBRep_Curve_D2(self, *args)

    def D3(self, *args):
        r"""

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        """
        return _HLRBRep.HLRBRep_Curve_D3(self, *args)

    def DN(self, *args):
        r"""

        Parameters
        ----------
        U: float
        N: int

        Return
        -------
        gp_Vec2d

        Description
        -----------
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        """
        return _HLRBRep.HLRBRep_Curve_DN(self, *args)

    def Degree(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Degree(self, *args)

    def Ellipse(self, *args):
        r"""
        Return
        -------
        gp_Elips2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Ellipse(self, *args)

    def FirstParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_FirstParameter(self, *args)

    def GetCurve(self, *args):
        r"""
        Return
        -------
        BRepAdaptor_Curve

        Description
        -----------
        Returns the 3d curve.

        """
        return _HLRBRep.HLRBRep_Curve_GetCurve(self, *args)

    def GetType(self, *args):
        r"""
        Return
        -------
        GeomAbs_CurveType

        Description
        -----------
        Returns the type of the curve in the current interval: line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        """
        return _HLRBRep.HLRBRep_Curve_GetType(self, *args)

    def Hyperbola(self, *args):
        r"""
        Return
        -------
        gp_Hypr2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Hyperbola(self, *args)

    def Intervals(self, *args):
        r"""

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        """
        return _HLRBRep.HLRBRep_Curve_Intervals(self, *args)

    def IsClosed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_IsRational(self, *args)

    def Knots(self, *args):
        r"""

        Parameters
        ----------
        kn: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Knots(self, *args)

    def LastParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_LastParameter(self, *args)

    def Line(self, *args):
        r"""
        Return
        -------
        gp_Lin2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Line(self, *args)

    def Multiplicities(self, *args):
        r"""

        Parameters
        ----------
        mu: TColStd_Array1OfInteger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Multiplicities(self, *args)

    def NbIntervals(self, *args):
        r"""

        Parameters
        ----------
        S: GeomAbs_Shape

        Return
        -------
        int

        Description
        -----------
        If necessary, breaks the curve in intervals of continuity <s>. and returns the number of intervals.

        """
        return _HLRBRep.HLRBRep_Curve_NbIntervals(self, *args)

    def NbKnots(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_NbPoles(self, *args)

    def Parabola(self, *args):
        r"""
        Return
        -------
        gp_Parab2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Parabola(self, *args)

    def Parameter2d(self, *args):
        r"""

        Parameters
        ----------
        P3d: float

        Return
        -------
        float

        Description
        -----------
        Returns the parameter on the 2d curve from the parameter on the 3d curve.

        """
        return _HLRBRep.HLRBRep_Curve_Parameter2d(self, *args)

    def Parameter3d(self, *args):
        r"""

        Parameters
        ----------
        P2d: float

        Return
        -------
        float

        Description
        -----------
        Returns the parameter on the 3d curve from the parameter on the 2d curve.

        """
        return _HLRBRep.HLRBRep_Curve_Parameter3d(self, *args)

    def Period(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Period(self, *args)

    def Poles(self, *args):
        r"""

        Parameters
        ----------
        TP: TColgp_Array1OfPnt2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        aCurve: Geom_BSplineCurve
        TP: TColgp_Array1OfPnt2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Poles(self, *args)

    def PolesAndWeights(self, *args):
        r"""

        Parameters
        ----------
        TP: TColgp_Array1OfPnt2d
        TW: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        aCurve: Geom_BSplineCurve
        TP: TColgp_Array1OfPnt2d
        TW: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_PolesAndWeights(self, *args)

    def Projector(self, *args):
        r"""

        Parameters
        ----------
        Proj: HLRAlgo_Projector *

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Curve_Projector(self, *args)

    def Resolution(self, *args):
        r"""

        Parameters
        ----------
        R3d: float

        Return
        -------
        float

        Description
        -----------
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        """
        return _HLRBRep.HLRBRep_Curve_Resolution(self, *args)

    def Tangent(self, *args):
        r"""

        Parameters
        ----------
        AtStart: bool
        P: gp_Pnt2d
        D: gp_Dir2d

        Return
        -------
        None

        Description
        -----------
        Depending on <atstart> computes the 2d point and tangent on the curve at sart (or at end). if the first derivative is null look after at start (or before at end) with the second derivative.

        """
        return _HLRBRep.HLRBRep_Curve_Tangent(self, *args)

    def Update(self, *args):
        r"""

        Parameters
        ----------
        TotMin: float
        TotMax: float

        Return
        -------
        float

        Description
        -----------
        Update the minmax and the internal data.

        """
        return _HLRBRep.HLRBRep_Curve_Update(self, *args)

    def UpdateMinMax(self, *args):
        r"""

        Parameters
        ----------
        TotMin: float
        TotMax: float

        Return
        -------
        float

        Description
        -----------
        Update the minmax returns tol for enlarge;.

        """
        return _HLRBRep.HLRBRep_Curve_UpdateMinMax(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Computes the point of parameter u on the curve.

        """
        return _HLRBRep.HLRBRep_Curve_Value(self, *args)

    def Value3D(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        gp_Pnt

        Description
        -----------
        Computes the 3d point of parameter u on the curve.

        """
        return _HLRBRep.HLRBRep_Curve_Value3D(self, *args)

    def Z(self, *args):
        r"""

        Parameters
        ----------
        U: float

        Return
        -------
        float

        Description
        -----------
        Computes the z coordinate of the point of parameter u on the curve in the viewing coordinate system.

        """
        return _HLRBRep.HLRBRep_Curve_Z(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Curve

# Register HLRBRep_Curve in _HLRBRep:
_HLRBRep.HLRBRep_Curve_swigregister(HLRBRep_Curve)
class HLRBRep_CurveTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BSpline(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_BSpline(*args)

    @staticmethod
    def Bezier(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        opencascade::handle<Geom2d_BezierCurve>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Bezier(*args)

    @staticmethod
    def Circle(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        gp_Circ2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Circle(*args)

    @staticmethod
    def Continuity(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Continuity(*args)

    @staticmethod
    def D0(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        U: float
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the curve.

        """
        return _HLRBRep.HLRBRep_CurveTool_D0(*args)

    @staticmethod
    def D1(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        """
        return _HLRBRep.HLRBRep_CurveTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        """
        return _HLRBRep.HLRBRep_CurveTool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        """
        return _HLRBRep.HLRBRep_CurveTool_D3(*args)

    @staticmethod
    def DN(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        U: float
        N: int

        Return
        -------
        gp_Vec2d

        Description
        -----------
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        """
        return _HLRBRep.HLRBRep_CurveTool_DN(*args)

    @staticmethod
    def Degree(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Degree(*args)

    @staticmethod
    def Ellipse(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        gp_Elips2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Ellipse(*args)

    @staticmethod
    def EpsX(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_EpsX(*args)

    @staticmethod
    def FirstParameter(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_FirstParameter(*args)

    @staticmethod
    def GetInterval(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        Index: int
        Tab: TColStd_Array1OfReal

        Return
        -------
        U1: float
        U2: float

        Description
        -----------
        Output the bounds of interval of index <index> used if type == composite.

        """
        return _HLRBRep.HLRBRep_CurveTool_GetInterval(*args)

    @staticmethod
    def GetType(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        GeomAbs_CurveType

        Description
        -----------
        Returns the type of the curve in the current interval: line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        """
        return _HLRBRep.HLRBRep_CurveTool_GetType(*args)

    @staticmethod
    def Hyperbola(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        gp_Hypr2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Hyperbola(*args)

    @staticmethod
    def Intervals(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        T: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        """
        return _HLRBRep.HLRBRep_CurveTool_Intervals(*args)

    @staticmethod
    def IsClosed(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_IsClosed(*args)

    @staticmethod
    def IsPeriodic(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_IsPeriodic(*args)

    @staticmethod
    def LastParameter(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_LastParameter(*args)

    @staticmethod
    def Line(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        gp_Lin2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Line(*args)

    @staticmethod
    def NbIntervals(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        int

        Description
        -----------
        Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

        """
        return _HLRBRep.HLRBRep_CurveTool_NbIntervals(*args)

    @staticmethod
    def NbSamples(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        U0: float
        U1: float

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_NbSamples(*args)

    @staticmethod
    def Parabola(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        gp_Parab2d

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Parabola(*args)

    @staticmethod
    def Period(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_CurveTool_Period(*args)

    @staticmethod
    def Resolution(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        R3d: float

        Return
        -------
        float

        Description
        -----------
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        """
        return _HLRBRep.HLRBRep_CurveTool_Resolution(*args)

    @staticmethod
    def TheType(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        GeomAbs_CurveType

        Description
        -----------
        Returns the type of the curve in the current interval: line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        """
        return _HLRBRep.HLRBRep_CurveTool_TheType(*args)

    @staticmethod
    def Value(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        U: float

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Computes the point of parameter u on the curve.

        """
        return _HLRBRep.HLRBRep_CurveTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_CurveTool_swiginit(self, _HLRBRep.new_HLRBRep_CurveTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_CurveTool

# Register HLRBRep_CurveTool in _HLRBRep:
_HLRBRep.HLRBRep_CurveTool_swigregister(HLRBRep_CurveTool)
class HLRBRep_Data(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        NV: int
        NE: int
        NF: int

        Return
        -------
        None

        Description
        -----------
        Create an empty data structure of <nv> vertices, <ne> edges and <nf> faces.

        """
        _HLRBRep.HLRBRep_Data_swiginit(self, _HLRBRep.new_HLRBRep_Data(*args))

    def AboveInterference(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the rejected interference is above the face.

        """
        return _HLRBRep.HLRBRep_Data_AboveInterference(self, *args)

    def Classify(self, *args):
        r"""

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData
        LevelFlag: bool
        param: float

        Return
        -------
        Level: int

        Description
        -----------
        Classification of an edge.

        """
        return _HLRBRep.HLRBRep_Data_Classify(self, *args)

    def Compare(self, *args):
        r"""

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData

        Return
        -------
        TopAbs_State

        Description
        -----------
        Returns the state of the edge <ed> after classification.

        """
        return _HLRBRep.HLRBRep_Data_Compare(self, *args)

    def Destroy(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_Destroy(self, *args)

    def EDataArray(self, *args):
        r"""
        Return
        -------
        HLRBRep_Array1OfEData

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_EDataArray(self, *args)

    def Edge(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the current edge.

        """
        return _HLRBRep.HLRBRep_Data_Edge(self, *args)

    def EdgeMap(self, *args):
        r"""
        Return
        -------
        TopTools_IndexedMapOfShape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_EdgeMap(self, *args)

    def EdgeOfTheHidingFace(self, *args):
        r"""

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData

        Return
        -------
        bool

        Description
        -----------
        Returns the true if the edge <ed> belongs to the hiding face.

        """
        return _HLRBRep.HLRBRep_Data_EdgeOfTheHidingFace(self, *args)

    def EdgeState(self, *args):
        r"""

        Parameters
        ----------
        p1: float
        p2: float

        Return
        -------
        stbef: TopAbs_State
        staf: TopAbs_State

        Description
        -----------
        Returns the local 3d state of the intersection between the current edge and the current face at the <p1> and <p2> parameters.

        """
        return _HLRBRep.HLRBRep_Data_EdgeState(self, *args)

    def FDataArray(self, *args):
        r"""
        Return
        -------
        HLRBRep_Array1OfFData

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_FDataArray(self, *args)

    def FaceMap(self, *args):
        r"""
        Return
        -------
        TopTools_IndexedMapOfShape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_FaceMap(self, *args)

    def HidingStartLevel(self, *args):
        r"""

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData
        IL: HLRAlgo_InterferenceList

        Return
        -------
        int

        Description
        -----------
        Returns the number of levels of hiding face above the first point of the edge <ed>. the interferencelist is given to compute far away of the interferences and then come back.

        """
        return _HLRBRep.HLRBRep_Data_HidingStartLevel(self, *args)

    def HidingTheFace(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current edge to be hidden belongs to the hiding face.

        """
        return _HLRBRep.HLRBRep_Data_HidingTheFace(self, *args)

    def InitBoundSort(self, *args):
        r"""

        Parameters
        ----------
        MinMaxTot: HLRAlgo_EdgesBlock::MinMaxIndices
        e1: int
        e2: int

        Return
        -------
        None

        Description
        -----------
        To compare with only non rejected edges.

        """
        return _HLRBRep.HLRBRep_Data_InitBoundSort(self, *args)

    def InitEdge(self, *args):
        r"""

        Parameters
        ----------
        FI: int
        MST: BRepTopAdaptor_MapOfShapeTool

        Return
        -------
        None

        Description
        -----------
        Begin an iteration only on visible edges crossing the face number <fi>.

        """
        return _HLRBRep.HLRBRep_Data_InitEdge(self, *args)

    def InitInterference(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Intersect the current edge with the boundary of the hiding face. the interferences are given by the more, next, and value methods.

        """
        return _HLRBRep.HLRBRep_Data_InitInterference(self, *args)

    def Interference(self, *args):
        r"""
        Return
        -------
        HLRAlgo_Interference

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_Interference(self, *args)

    def IsBadFace(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current face is bad.

        """
        return _HLRBRep.HLRBRep_Data_IsBadFace(self, *args)

    def LocalFEGeometry2D(self, *args):
        r"""

        Parameters
        ----------
        FE: int
        Param: float
        Tg: gp_Dir2d
        Nm: gp_Dir2d

        Return
        -------
        Cu: float

        Description
        -----------
        Returns the local description of the projection of the current fedge at parameter <param>.

        """
        return _HLRBRep.HLRBRep_Data_LocalFEGeometry2D(self, *args)

    def LocalLEGeometry2D(self, *args):
        r"""

        Parameters
        ----------
        Param: float
        Tg: gp_Dir2d
        Nm: gp_Dir2d

        Return
        -------
        Cu: float

        Description
        -----------
        Returns the local description of the projection of the current ledge at parameter <param>.

        """
        return _HLRBRep.HLRBRep_Data_LocalLEGeometry2D(self, *args)

    def MoreEdge(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_MoreEdge(self, *args)

    def MoreInterference(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_MoreInterference(self, *args)

    def NbEdges(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_NbEdges(self, *args)

    def NbFaces(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_NbFaces(self, *args)

    def NbVertices(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_NbVertices(self, *args)

    def NextEdge(self, *args):
        r"""

        Parameters
        ----------
        skip: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_NextEdge(self, *args)

    def NextInterference(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_NextInterference(self, *args)

    def Projector(self, *args):
        r"""
        Return
        -------
        HLRAlgo_Projector

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Data_Projector(self, *args)

    def RejectedInterference(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the interference is rejected.

        """
        return _HLRBRep.HLRBRep_Data_RejectedInterference(self, *args)

    def SimplClassify(self, *args):
        r"""

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData
        Nbp: int
        p1: float
        p2: float

        Return
        -------
        TopAbs_State

        Description
        -----------
        Simple classification of part of edge [p1, p2]. returns out if at least 1 of nbp points of edge is out; otherwise returns in. it is used to check 'suspicion' hidden part of edge.

        """
        return _HLRBRep.HLRBRep_Data_SimplClassify(self, *args)

    def SimpleHidingFace(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current hiding face is not an auto-intersected one.

        """
        return _HLRBRep.HLRBRep_Data_SimpleHidingFace(self, *args)

    def Tolerance(self, *args):
        r"""

        Parameters
        ----------
        tol: float

        Return
        -------
        None

        Description
        -----------
        Set the tolerance for the rejections during the exploration.
        Return
        -------
        float

        Description
        -----------
        Returns the tolerance for the rejections during the exploration.

        """
        return _HLRBRep.HLRBRep_Data_Tolerance(self, *args)

    def Update(self, *args):
        r"""

        Parameters
        ----------
        P: HLRAlgo_Projector

        Return
        -------
        None

        Description
        -----------
        End of building of the data and updating all the information linked to the projection.

        """
        return _HLRBRep.HLRBRep_Data_Update(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        DS: HLRBRep_Data
        dv: int
        de: int
        df: int

        Return
        -------
        None

        Description
        -----------
        Write <ds> in me with a translation of <dv>,<de>,<df>.

        """
        return _HLRBRep.HLRBRep_Data_Write(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_Data_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Data

# Register HLRBRep_Data in _HLRBRep:
_HLRBRep.HLRBRep_Data_swigregister(HLRBRep_Data)
class HLRBRep_EdgeBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        VList: HLRBRep_VertexList

        Return
        -------
        None

        Description
        -----------
        Creates an edgebuilder algorithm. <vlist> describes the edge and the interferences. arealimits are created from the vertices. builds(in) is automatically called.

        """
        _HLRBRep.HLRBRep_EdgeBuilder_swiginit(self, _HLRBRep.new_HLRBRep_EdgeBuilder(*args))

    def AreaEdgeState(self, *args):
        r"""
        Return
        -------
        TopAbs_State

        Description
        -----------
        Returns the edge state of the current area.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_AreaEdgeState(self, *args)

    def AreaState(self, *args):
        r"""
        Return
        -------
        TopAbs_State

        Description
        -----------
        Returns the state of the current area.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_AreaState(self, *args)

    def Builds(self, *args):
        r"""

        Parameters
        ----------
        ToBuild: TopAbs_State

        Return
        -------
        None

        Description
        -----------
        Reinitialize the results iteration to the parts with state <tobuild>. if this method is not called after construction the default is <tobuild> = in.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_Builds(self, *args)

    def Current(self, *args):
        r"""
        Return
        -------
        HLRAlgo_Intersection

        Description
        -----------
        Returns the current vertex of the current edge.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_Current(self, *args)

    def Destroy(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_Destroy(self, *args)

    def HasArea(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a current area.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_HasArea(self, *args)

    def InitAreas(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initialize an iteration on the areas.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_InitAreas(self, *args)

    def IsBoundary(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current vertex comes from the boundary of the edge.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_IsBoundary(self, *args)

    def IsInterference(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current vertex was an interference.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_IsInterference(self, *args)

    def LeftLimit(self, *args):
        r"""
        Return
        -------
        opencascade::handle<HLRBRep_AreaLimit>

        Description
        -----------
        Returns the arealimit beginning the current area. this is a null handle when the area is infinite on the left.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_LeftLimit(self, *args)

    def MoreEdges(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are more new edges to build.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_MoreEdges(self, *args)

    def MoreVertices(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        True if there are more vertices in the current new edge.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_MoreVertices(self, *args)

    def NextArea(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Set the current area to the next area.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_NextArea(self, *args)

    def NextEdge(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Proceeds to the next edge to build. skip all remaining vertices on the current edge.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_NextEdge(self, *args)

    def NextVertex(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Proceeds to the next vertex of the current edge.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_NextVertex(self, *args)

    def Orientation(self, *args):
        r"""
        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        Returns the new orientation of the current vertex.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_Orientation(self, *args)

    def PreviousArea(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Set the current area to the previous area.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_PreviousArea(self, *args)

    def RightLimit(self, *args):
        r"""
        Return
        -------
        opencascade::handle<HLRBRep_AreaLimit>

        Description
        -----------
        Returns the arealimit ending the current area. this is a null handle when the area is infinite on the right.

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_RightLimit(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeBuilder

# Register HLRBRep_EdgeBuilder in _HLRBRep:
_HLRBRep.HLRBRep_EdgeBuilder_swigregister(HLRBRep_EdgeBuilder)
class HLRBRep_EdgeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_EdgeData_swiginit(self, _HLRBRep.new_HLRBRep_EdgeData(*args))

    def AutoIntersectionDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_AutoIntersectionDone(self, *args)

    def ChangeGeometry(self, *args):
        r"""
        Return
        -------
        HLRBRep_Curve

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_ChangeGeometry(self, *args)

    def Curve(self, *args):
        r"""
        Return
        -------
        HLRBRep_Curve *

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Curve(self, *args)

    def CutAtEnd(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_CutAtEnd(self, *args)

    def CutAtSta(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_CutAtSta(self, *args)

    def Geometry(self, *args):
        r"""
        Return
        -------
        HLRBRep_Curve

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Geometry(self, *args)

    def HideCount(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_HideCount(self, *args)

    def MinMax(self, *args):
        r"""
        Return
        -------
        HLRAlgo_EdgesBlock::MinMaxIndices

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_MinMax(self, *args)

    def OutLVEnd(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_OutLVEnd(self, *args)

    def OutLVSta(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_OutLVSta(self, *args)

    def Rg1Line(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Rg1Line(self, *args)

    def RgNLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_RgNLine(self, *args)

    def Selected(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Selected(self, *args)

    def Set(self, *args):
        r"""

        Parameters
        ----------
        Reg1: bool
        RegN: bool
        EG: TopoDS_Edge
        V1: int
        V2: int
        Out1: bool
        Out2: bool
        Cut1: bool
        Cut2: bool
        Start: float
        TolStart: float
        End: float
        TolEnd: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Set(self, *args)

    def Simple(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Simple(self, *args)

    def Status(self, *args):
        r"""
        Return
        -------
        HLRAlgo_EdgeStatus

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Status(self, *args)

    def Tolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Tolerance(self, *args)

    def UpdateMinMax(self, *args):
        r"""

        Parameters
        ----------
        theTotMinMax: HLRAlgo_EdgesBlock::MinMaxIndices

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_UpdateMinMax(self, *args)

    def Used(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Used(self, *args)

    def VEnd(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_VEnd(self, *args)

    def VSta(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_VSta(self, *args)

    def VerAtEnd(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_VerAtEnd(self, *args)

    def VerAtSta(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_VerAtSta(self, *args)

    def Vertical(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeData_Vertical(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeData

# Register HLRBRep_EdgeData in _HLRBRep:
_HLRBRep.HLRBRep_EdgeData_swigregister(HLRBRep_EdgeData)
class HLRBRep_EdgeFaceTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CurvatureValue(*args):
        r"""

        Parameters
        ----------
        F: Standard_Address
        U: float
        V: float
        Tg: gp_Dir

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeFaceTool_CurvatureValue(*args)

    @staticmethod
    def UVPoint(*args):
        r"""

        Parameters
        ----------
        Par: float
        E: Standard_Address
        F: Standard_Address

        Return
        -------
        U: float
        V: float

        Description
        -----------
        Return true if u and v are found.

        """
        return _HLRBRep.HLRBRep_EdgeFaceTool_UVPoint(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_EdgeFaceTool_swiginit(self, _HLRBRep.new_HLRBRep_EdgeFaceTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeFaceTool

# Register HLRBRep_EdgeFaceTool in _HLRBRep:
_HLRBRep.HLRBRep_EdgeFaceTool_swigregister(HLRBRep_EdgeFaceTool)
class HLRBRep_EdgeIList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AddInterference(*args):
        r"""

        Parameters
        ----------
        IL: HLRAlgo_InterferenceList
        I: HLRAlgo_Interference
        T: HLRBRep_EdgeInterferenceTool

        Return
        -------
        None

        Description
        -----------
        Add the interference <i> to the list <il>.

        """
        return _HLRBRep.HLRBRep_EdgeIList_AddInterference(*args)

    @staticmethod
    def ProcessComplex(*args):
        r"""

        Parameters
        ----------
        IL: HLRAlgo_InterferenceList
        T: HLRBRep_EdgeInterferenceTool

        Return
        -------
        None

        Description
        -----------
        Process complex transitions on the list il.

        """
        return _HLRBRep.HLRBRep_EdgeIList_ProcessComplex(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_EdgeIList_swiginit(self, _HLRBRep.new_HLRBRep_EdgeIList())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeIList

# Register HLRBRep_EdgeIList in _HLRBRep:
_HLRBRep.HLRBRep_EdgeIList_swigregister(HLRBRep_EdgeIList)
class HLRBRep_EdgeInterferenceTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        DS: HLRBRep_Data

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_EdgeInterferenceTool_swiginit(self, _HLRBRep.new_HLRBRep_EdgeInterferenceTool(*args))

    def CurrentOrientation(self, *args):
        r"""
        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_CurrentOrientation(self, *args)

    def CurrentParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_CurrentParameter(self, *args)

    def CurrentVertex(self, *args):
        r"""
        Return
        -------
        HLRAlgo_Intersection

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_CurrentVertex(self, *args)

    def EdgeGeometry(self, *args):
        r"""

        Parameters
        ----------
        Param: float
        Tgt: gp_Dir
        Nrm: gp_Dir

        Return
        -------
        Curv: float

        Description
        -----------
        Returns local geometric description of the edge at parameter <para>. see method reset of class edgefacetransition from topcnx for other arguments.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_EdgeGeometry(self, *args)

    def InitVertices(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_InitVertices(self, *args)

    def InterferenceBoundaryGeometry(self, *args):
        r"""

        Parameters
        ----------
        I: HLRAlgo_Interference
        Tang: gp_Dir
        Norm: gp_Dir

        Return
        -------
        Curv: float

        Description
        -----------
        Returns the geometry of the boundary at the interference <i>. see the addinterference method of the class edgefacetransition from topcnx for the other arguments.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_InterferenceBoundaryGeometry(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_IsPeriodic(self, *args)

    def LoadEdge(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_LoadEdge(self, *args)

    def MoreVertices(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_MoreVertices(self, *args)

    def NextVertex(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_NextVertex(self, *args)

    def ParameterOfInterference(self, *args):
        r"""

        Parameters
        ----------
        I: HLRAlgo_Interference

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_ParameterOfInterference(self, *args)

    def SameInterferences(self, *args):
        r"""

        Parameters
        ----------
        I1: HLRAlgo_Interference
        I2: HLRAlgo_Interference

        Return
        -------
        bool

        Description
        -----------
        True if the two interferences are on the same geometric locus.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_SameInterferences(self, *args)

    def SameVertexAndInterference(self, *args):
        r"""

        Parameters
        ----------
        I: HLRAlgo_Interference

        Return
        -------
        bool

        Description
        -----------
        True if the interference and the current vertex are on the same geometric locus.

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_SameVertexAndInterference(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeInterferenceTool

# Register HLRBRep_EdgeInterferenceTool in _HLRBRep:
_HLRBRep.HLRBRep_EdgeInterferenceTool_swigregister(HLRBRep_EdgeInterferenceTool)
class HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        Tol: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter(*args))

    def AnErrorOccurred(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_AnErrorOccurred(self, *args)

    def NbRoots(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_NbRoots(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Poly1: HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter
        Poly2: HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter

        Return
        -------
        NumSegOn1: int
        NumSegOn2: int
        ParamOnSeg1: float
        ParamOnSeg2: float

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Uo: float
        Vo: float
        UInf: float
        VInf: float
        USup: float
        VSup: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_Perform(self, *args)

    def Roots(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        U: float
        V: float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_Roots(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter

# Register HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_swigregister(HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter)
class HLRBRep_FaceData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_FaceData_swiginit(self, _HLRBRep.new_HLRBRep_FaceData(*args))

    def Back(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Back(self, *args)

    def Closed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Closed(self, *args)

    def Cone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Cone(self, *args)

    def Cut(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Cut(self, *args)

    def Cylinder(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Cylinder(self, *args)

    def Geometry(self, *args):
        r"""
        Return
        -------
        HLRBRep_Surface

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Geometry(self, *args)

    def Hiding(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Hiding(self, *args)

    def Orientation(self, *args):
        r"""
        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        O: TopAbs_Orientation

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Orientation(self, *args)

    def Plane(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Plane(self, *args)

    def Selected(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Selected(self, *args)

    def Set(self, *args):
        r"""

        Parameters
        ----------
        FG: TopoDS_Face
        Or: TopAbs_Orientation
        Cl: bool
        NW: int

        Return
        -------
        None

        Description
        -----------
        <or> is the orientation of the face. <cl> is true if the face belongs to a closed volume. <nw> is the number of wires ( or block of edges ) of the face.

        """
        return _HLRBRep.HLRBRep_FaceData_Set(self, *args)

    def SetWEdge(self, *args):
        r"""

        Parameters
        ----------
        WI: int
        EWI: int
        EI: int
        Or: TopAbs_Orientation
        OutL: bool
        Inte: bool
        Dble: bool
        IsoL: bool

        Return
        -------
        None

        Description
        -----------
        Set the edge number <ewi> of the wire <wi>.

        """
        return _HLRBRep.HLRBRep_FaceData_SetWEdge(self, *args)

    def SetWire(self, *args):
        r"""

        Parameters
        ----------
        WI: int
        NE: int

        Return
        -------
        None

        Description
        -----------
        Set <ne> the number of edges of the wire number <wi>.

        """
        return _HLRBRep.HLRBRep_FaceData_SetWire(self, *args)

    def Side(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Side(self, *args)

    def Simple(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Simple(self, *args)

    def Size(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Size(self, *args)

    def Sphere(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Sphere(self, *args)

    def Tolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Tolerance(self, *args)

    def Torus(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Torus(self, *args)

    def Wires(self, *args):
        r"""
        Return
        -------
        opencascade::handle<HLRAlgo_WiresBlock>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_Wires(self, *args)

    def WithOutL(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceData_WithOutL(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_FaceData

# Register HLRBRep_FaceData in _HLRBRep:
_HLRBRep.HLRBRep_FaceData_swigregister(HLRBRep_FaceData)
class HLRBRep_FaceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_FaceIterator_swiginit(self, _HLRBRep.new_HLRBRep_FaceIterator(*args))

    def BeginningOfWire(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current edge is the first of a wire.

        """
        return _HLRBRep.HLRBRep_FaceIterator_BeginningOfWire(self, *args)

    def Double(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceIterator_Double(self, *args)

    def Edge(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceIterator_Edge(self, *args)

    def EndOfWire(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current edge is the last of a wire.

        """
        return _HLRBRep.HLRBRep_FaceIterator_EndOfWire(self, *args)

    def InitEdge(self, *args):
        r"""

        Parameters
        ----------
        fd: HLRBRep_FaceData

        Return
        -------
        None

        Description
        -----------
        Begin an exploration of the edges of the face <fd>.

        """
        return _HLRBRep.HLRBRep_FaceIterator_InitEdge(self, *args)

    def Internal(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceIterator_Internal(self, *args)

    def IsoLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceIterator_IsoLine(self, *args)

    def MoreEdge(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceIterator_MoreEdge(self, *args)

    def NextEdge(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceIterator_NextEdge(self, *args)

    def Orientation(self, *args):
        r"""
        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceIterator_Orientation(self, *args)

    def OutLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_FaceIterator_OutLine(self, *args)

    def SkipWire(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Skip the current wire in the exploration.

        """
        return _HLRBRep.HLRBRep_FaceIterator_SkipWire(self, *args)

    def Wire(self, *args):
        r"""
        Return
        -------
        opencascade::handle<HLRAlgo_EdgesBlock>

        Description
        -----------
        Returns the edges of the current wire.

        """
        return _HLRBRep.HLRBRep_FaceIterator_Wire(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_FaceIterator

# Register HLRBRep_FaceIterator in _HLRBRep:
_HLRBRep.HLRBRep_FaceIterator_swigregister(HLRBRep_FaceIterator)
class HLRBRep_HLRToShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        A: HLRBRep_Algo

        Return
        -------
        None

        Description
        -----------
        Constructs a framework for filtering the results of the hlrbrep_algo algorithm, a. use the extraction filters to obtain the results you want for a.

        """
        _HLRBRep.HLRBRep_HLRToShape_swiginit(self, _HLRBRep.new_HLRBRep_HLRToShape(*args))

    def CompoundOfEdges(self, *args):
        r"""

        Parameters
        ----------
        type: HLRBRep_TypeOfResultingEdge
        visible: bool
        In3d: bool

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns compound of resulting edges of required type and visibility, taking into account the kind of space (2d or 3d).

        Parameters
        ----------
        S: TopoDS_Shape
        type: HLRBRep_TypeOfResultingEdge
        visible: bool
        In3d: bool

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        For specified shape returns compound of resulting edges of required type and visibility, taking into account the kind of space (2d or 3d).

        """
        return _HLRBRep.HLRBRep_HLRToShape_CompoundOfEdges(self, *args)

    def HCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_HCompound(self, *args)

    def IsoLineHCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_IsoLineHCompound(self, *args)

    def IsoLineVCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_IsoLineVCompound(self, *args)

    def OutLineHCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_OutLineHCompound(self, *args)

    def OutLineVCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_OutLineVCompound(self, *args)

    def OutLineVCompound3d(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_OutLineVCompound3d(self, *args)

    def Rg1LineHCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_Rg1LineHCompound(self, *args)

    def Rg1LineVCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_Rg1LineVCompound(self, *args)

    def RgNLineHCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_RgNLineHCompound(self, *args)

    def RgNLineVCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_RgNLineVCompound(self, *args)

    def VCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_HLRToShape_VCompound(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_HLRToShape

# Register HLRBRep_HLRToShape in _HLRBRep:
_HLRBRep.HLRBRep_HLRToShape_swigregister(HLRBRep_HLRToShape)
class HLRBRep_Hider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        DS: HLRBRep_Data

        Return
        -------
        None

        Description
        -----------
        Creates a hider processing the set of edges and hiding faces described by <ds>. stores the hidden parts in <ds>.

        """
        _HLRBRep.HLRBRep_Hider_swiginit(self, _HLRBRep.new_HLRBRep_Hider(*args))

    def Hide(self, *args):
        r"""

        Parameters
        ----------
        FI: int
        MST: BRepTopAdaptor_MapOfShapeTool

        Return
        -------
        None

        Description
        -----------
        Removes from the edges, the parts hidden by the hiding face number <fi>.

        """
        return _HLRBRep.HLRBRep_Hider_Hide(self, *args)

    def OwnHiding(self, *args):
        r"""

        Parameters
        ----------
        FI: int

        Return
        -------
        None

        Description
        -----------
        Own hiding the side face number <fi>.

        """
        return _HLRBRep.HLRBRep_Hider_OwnHiding(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Hider

# Register HLRBRep_Hider in _HLRBRep:
_HLRBRep.HLRBRep_Hider_swigregister(HLRBRep_Hider)
class HLRBRep_IntConicCurveOfCInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        L: gp_Lin2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        C: gp_Circ2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        E: gp_Elips2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and a parametric curve.

        Parameters
        ----------
        Prb: gp_Parab2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a parabola and a parametric curve.

        Parameters
        ----------
        H: gp_Hypr2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between the main branch of an hyperbola and a parametric curve.

        """
        _HLRBRep.HLRBRep_IntConicCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_IntConicCurveOfCInter(*args))

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        C: gp_Circ2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        E: gp_Elips2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and a parametric curve.

        Parameters
        ----------
        Prb: gp_Parab2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a parabola and a parametric curve.

        Parameters
        ----------
        H: gp_Hypr2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between the main branch of an hyperbola and a parametric curve.

        """
        return _HLRBRep.HLRBRep_IntConicCurveOfCInter_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_IntConicCurveOfCInter

# Register HLRBRep_IntConicCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_IntConicCurveOfCInter_swigregister(HLRBRep_IntConicCurveOfCInter)
class HLRBRep_InterCSurf(OCC.Core.IntCurveSurface.IntCurveSurface_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _HLRBRep.HLRBRep_InterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_InterCSurf(*args))

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Curve: gp_Lin
        Surface: Standard_Address

        Return
        -------
        None

        Description
        -----------
        Compute the intersection between the curve and the surface.

        Parameters
        ----------
        Curve: gp_Lin
        Polygon: HLRBRep_ThePolygonOfInterCSurf
        Surface: Standard_Address

        Return
        -------
        None

        Description
        -----------
        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon: <polygon> is given.

        Parameters
        ----------
        Curve: gp_Lin
        ThePolygon: HLRBRep_ThePolygonOfInterCSurf
        Surface: Standard_Address
        Polyhedron: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon: <polygon> is given. the surface is also sampled and <polyhedron> is given.

        Parameters
        ----------
        Curve: gp_Lin
        ThePolygon: HLRBRep_ThePolygonOfInterCSurf
        Surface: Standard_Address
        Polyhedron: HLRBRep_ThePolyhedronOfInterCSurf
        BndBSB: Bnd_BoundSortBox

        Return
        -------
        None

        Description
        -----------
        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon: <polygon> is given. the surface is also sampled and <polyhedron> is given.

        Parameters
        ----------
        Curve: gp_Lin
        Surface: Standard_Address
        Polyhedron: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Compute the intersection between the curve and the surface. the surface is already sampled and its polyhedron: <polyhedron> is given.

        """
        return _HLRBRep.HLRBRep_InterCSurf_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_InterCSurf

# Register HLRBRep_InterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_InterCSurf_swigregister(HLRBRep_InterCSurf)
class HLRBRep_InternalAlgo(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        A: HLRBRep_InternalAlgo

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_InternalAlgo_swiginit(self, _HLRBRep.new_HLRBRep_InternalAlgo(*args))

    def DataStructure(self, *args):
        r"""
        Return
        -------
        opencascade::handle<HLRBRep_Data>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_DataStructure(self, *args)

    def Debug(self, *args):
        r"""

        Parameters
        ----------
        deb: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Debug(self, *args)

    def Hide(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Hide all the datastructure.

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Hide the shape <s> by itself.

        Parameters
        ----------
        I: int
        J: int

        Return
        -------
        None

        Description
        -----------
        Hide the shape <s1> by the shape <s2>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Hide(self, *args)

    def HideAll(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Set to hide all the edges.

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Set to hide all the edges of the shape <s>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_HideAll(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner

        Return
        -------
        int

        Description
        -----------
        Return the index of the shape <s> and return 0 if the shape <s> is not found.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Index(self, *args)

    def InitEdgeStatus(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Init the status of the selected edges depending of the back faces of a closed shell.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_InitEdgeStatus(self, *args)

    def Load(self, *args):
        r"""

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        SData: Standard_Transient
        nbIso: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Add the shape <s>.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        nbIso: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Add the shape <s>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Load(self, *args)

    def NbShapes(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_NbShapes(self, *args)

    def PartialHide(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Own hiding of all the shapes of the datastructure without hiding by each other.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_PartialHide(self, *args)

    def Projector(self, *args):
        r"""

        Parameters
        ----------
        P: HLRAlgo_Projector

        Return
        -------
        None

        Description
        -----------
        Set the projector.
        Return
        -------
        HLRAlgo_Projector

        Description
        -----------
        Set the projector.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Projector(self, *args)

    def Remove(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Remove the shape of index <i>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Remove(self, *args)

    def Select(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Select all the datastructure.

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Select only the shape of index <i>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Select(self, *args)

    def SelectEdge(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Select only the edges of the shape <s>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_SelectEdge(self, *args)

    def SelectFace(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Select only the faces of the shape <s>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_SelectFace(self, *args)

    def SeqOfShapeBounds(self, *args):
        r"""
        Return
        -------
        HLRBRep_SeqOfShapeBounds

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_SeqOfShapeBounds(self, *args)

    def ShapeBounds(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        HLRBRep_ShapeBounds

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_ShapeBounds(self, *args)

    def ShapeData(self, *args):
        r"""

        Parameters
        ----------
        I: int
        SData: Standard_Transient

        Return
        -------
        None

        Description
        -----------
        Change the shape data of the shape of index <i>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_ShapeData(self, *args)

    def ShowAll(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Set to visible all the edges.

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Set to visible all the edges of the shape <s>.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_ShowAll(self, *args)

    def Update(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Update the datastructure.

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Update(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_InternalAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_InternalAlgo

# Register HLRBRep_InternalAlgo in _HLRBRep:
_HLRBRep.HLRBRep_InternalAlgo_swigregister(HLRBRep_InternalAlgo)
class HLRBRep_Intersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_Intersector_swiginit(self, _HLRBRep.new_HLRBRep_Intersector(*args))

    def CSPoint(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        IntCurveSurface_IntersectionPoint

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_CSPoint(self, *args)

    def CSSegment(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        IntCurveSurface_IntersectionSegment

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_CSSegment(self, *args)

    def Destroy(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_Destroy(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_IsDone(self, *args)

    def Load(self, *args):
        r"""

        Parameters
        ----------
        A: Standard_Address

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_Load(self, *args)

    def NbPoints(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_NbPoints(self, *args)

    def NbSegments(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_NbSegments(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        A1: Standard_Address
        da1: float
        db1: float

        Return
        -------
        None

        Description
        -----------
        Performs the auto intersection of an edge. the edge domain is cut at start with da1*(b-a) and at end with db1*(b-a).

        Parameters
        ----------
        nA: int
        A1: Standard_Address
        da1: float
        db1: float
        nB: int
        A2: Standard_Address
        da2: float
        db2: float
        NoBound: bool

        Return
        -------
        None

        Description
        -----------
        Performs the intersection between the two edges. the edges domains are cut at start with da*(b-a) and at end with db*(b-a).

        Parameters
        ----------
        L: gp_Lin
        P: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_Perform(self, *args)

    def Point(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        IntRes2d_IntersectionPoint

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_Point(self, *args)

    def Segment(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        IntRes2d_IntersectionSegment

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_Intersector_Segment(self, *args)

    def SimulateOnePoint(self, *args):
        r"""

        Parameters
        ----------
        A1: Standard_Address
        U: float
        A2: Standard_Address
        V: float

        Return
        -------
        None

        Description
        -----------
        Create a single intersectionpoint (u on a1) (v on a2) the point is middle on both curves.

        """
        return _HLRBRep.HLRBRep_Intersector_SimulateOnePoint(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Intersector

# Register HLRBRep_Intersector in _HLRBRep:
_HLRBRep.HLRBRep_Intersector_swigregister(HLRBRep_Intersector)
class HLRBRep_LineTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BSpline(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        opencascade::handle<Geom_BSplineCurve>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_BSpline(*args)

    @staticmethod
    def Bezier(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        opencascade::handle<Geom_BezierCurve>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Bezier(*args)

    @staticmethod
    def Circle(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        gp_Circ

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Circle(*args)

    @staticmethod
    def Continuity(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Continuity(*args)

    @staticmethod
    def D0(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        U: float
        P: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the line.

        """
        return _HLRBRep.HLRBRep_LineTool_D0(*args)

    @staticmethod
    def D1(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        U: float
        P: gp_Pnt
        V: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Computes the point of parameter u on the line with its first derivative. raised if the continuity of the current interval is not c1.

        """
        return _HLRBRep.HLRBRep_LineTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        """
        return _HLRBRep.HLRBRep_LineTool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        """
        return _HLRBRep.HLRBRep_LineTool_D3(*args)

    @staticmethod
    def DN(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        U: float
        N: int

        Return
        -------
        gp_Vec

        Description
        -----------
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        """
        return _HLRBRep.HLRBRep_LineTool_DN(*args)

    @staticmethod
    def Degree(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Degree(*args)

    @staticmethod
    def Ellipse(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        gp_Elips

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Ellipse(*args)

    @staticmethod
    def FirstParameter(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_FirstParameter(*args)

    @staticmethod
    def GetType(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        GeomAbs_CurveType

        Description
        -----------
        Returns the type of the line in the current interval: line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        """
        return _HLRBRep.HLRBRep_LineTool_GetType(*args)

    @staticmethod
    def Hyperbola(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        gp_Hypr

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Hyperbola(*args)

    @staticmethod
    def IntervalContinuity(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_IntervalContinuity(*args)

    @staticmethod
    def IntervalFirst(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        float

        Description
        -----------
        Returns the first parameter of the current interval.

        """
        return _HLRBRep.HLRBRep_LineTool_IntervalFirst(*args)

    @staticmethod
    def IntervalLast(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        float

        Description
        -----------
        Returns the last parameter of the current interval.

        """
        return _HLRBRep.HLRBRep_LineTool_IntervalLast(*args)

    @staticmethod
    def Intervals(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        T: TColStd_Array1OfReal
        Sh: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        Sets the current working interval.

        """
        return _HLRBRep.HLRBRep_LineTool_Intervals(*args)

    @staticmethod
    def IsClosed(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_IsClosed(*args)

    @staticmethod
    def IsPeriodic(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_IsPeriodic(*args)

    @staticmethod
    def IsRational(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_IsRational(*args)

    @staticmethod
    def KnotsAndMultiplicities(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        TK: TColStd_Array1OfReal
        TM: TColStd_Array1OfInteger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_KnotsAndMultiplicities(*args)

    @staticmethod
    def LastParameter(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_LastParameter(*args)

    @staticmethod
    def Line(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        gp_Lin

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Line(*args)

    @staticmethod
    def NbIntervals(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        S: GeomAbs_Shape

        Return
        -------
        int

        Description
        -----------
        If necessary, breaks the line in intervals of continuity <s>. and returns the number of intervals.

        """
        return _HLRBRep.HLRBRep_LineTool_NbIntervals(*args)

    @staticmethod
    def NbKnots(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_NbKnots(*args)

    @staticmethod
    def NbPoles(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_NbPoles(*args)

    @staticmethod
    def NbSamples(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        U0: float
        U1: float

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_NbSamples(*args)

    @staticmethod
    def Parabola(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        gp_Parab

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Parabola(*args)

    @staticmethod
    def Period(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Period(*args)

    @staticmethod
    def Poles(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        TP: TColgp_Array1OfPnt

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_Poles(*args)

    @staticmethod
    def PolesAndWeights(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        TP: TColgp_Array1OfPnt
        TW: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_PolesAndWeights(*args)

    @staticmethod
    def Resolution(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        R3d: float

        Return
        -------
        float

        Description
        -----------
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        """
        return _HLRBRep.HLRBRep_LineTool_Resolution(*args)

    @staticmethod
    def SamplePars(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        U0: float
        U1: float
        Defl: float
        NbMin: int
        Pars: TColStd_HArray1OfReal

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_LineTool_SamplePars(*args)

    @staticmethod
    def Value(*args):
        r"""

        Parameters
        ----------
        C: gp_Lin
        U: float

        Return
        -------
        gp_Pnt

        Description
        -----------
        Computes the point of parameter u on the line.

        """
        return _HLRBRep.HLRBRep_LineTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_LineTool_swiginit(self, _HLRBRep.new_HLRBRep_LineTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_LineTool

# Register HLRBRep_LineTool in _HLRBRep:
_HLRBRep.HLRBRep_LineTool_swigregister(HLRBRep_LineTool)
class HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        IT: IntCurve_IConicTool
        PC: Standard_Address

        Return
        -------
        None

        Description
        -----------
        Constructor of the class.

        """
        _HLRBRep.HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter

# Register HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter_swigregister(HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter)
class HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        C: Standard_Address

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter(*args))

    def Initialize(self, *args):
        r"""

        Parameters
        ----------
        C: Standard_Address

        Return
        -------
        None

        Description
        -----------
        Sets the field mycurve of the function.

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_Initialize(self, *args)

    def IsMin(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        bool

        Description
        -----------
        Shows if the nth distance is a minimum.

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_IsMin(self, *args)

    def NbExt(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Return the number of found extrema.

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_NbExt(self, *args)

    def Point(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        Extrema_POnCurv2d

        Description
        -----------
        Returns the nth extremum.

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_Point(self, *args)

    def SearchOfTolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Computes a tol value. if 1st derivative of curve |d1|<tol, it is considered d1=0.

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_SearchOfTolerance(self, *args)

    def SetPoint(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Sets the field p of the function.

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_SetPoint(self, *args)

    def SquareDistance(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        float

        Description
        -----------
        Returns the nth distance.

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_SquareDistance(self, *args)

    def SubIntervalInitialize(self, *args):
        r"""

        Parameters
        ----------
        theUfirst: float
        theUlast: float

        Return
        -------
        None

        Description
        -----------
        Determines boundaries of subinterval for find of root.

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_SubIntervalInitialize(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter

# Register HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_swigregister(HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter)
class HLRBRep_PolyAlgo(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty framework for the calculation of the visible and hidden lines of a shape in a projection. use the functions: - projector to define the point of view - load to select the shape or shapes to be visualized - update to compute the visible and hidden lines of the shape. warning the shape or shapes to be visualized must have already been triangulated.

        Parameters
        ----------
        A: HLRBRep_PolyAlgo

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_PolyAlgo_swiginit(self, _HLRBRep.new_HLRBRep_PolyAlgo(*args))

    def Algo(self, *args):
        r"""
        Return
        -------
        opencascade::handle<HLRAlgo_PolyAlgo>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Algo(self, *args)

    def Debug(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theDebug: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Debug(self, *args)

    def Hide(self, *args):
        r"""

        Parameters
        ----------
        status: HLRAlgo_EdgeStatus
        S: TopoDS_Shape

        Return
        -------
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Hide(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        int

        Description
        -----------
        Return the index of the shape <s> and return 0 if the shape <s> is not found.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Index(self, *args)

    def InitHide(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_InitHide(self, *args)

    def InitShow(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_InitShow(self, *args)

    def Load(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Loads the shape s into this framework. warning s must have already been triangulated.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Load(self, *args)

    def MoreHide(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_MoreHide(self, *args)

    def MoreShow(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_MoreShow(self, *args)

    def NbShapes(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_NbShapes(self, *args)

    def NextHide(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_NextHide(self, *args)

    def NextShow(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_NextShow(self, *args)

    def OutLinedShape(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Make a shape with the internal outlines in each face.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_OutLinedShape(self, *args)

    def Projector(self, *args):
        r"""
        Return
        -------
        HLRAlgo_Projector

        Description
        -----------
        Sets the parameters of the view for this framework. these parameters are defined by an hlralgo_projector object, which is returned by the projector function on a prs3d_projector object.

        Parameters
        ----------
        theProj: HLRAlgo_Projector

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Projector(self, *args)

    def Remove(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Remove the shape of index <i>.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Remove(self, *args)

    def Shape(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Shape(self, *args)

    def Show(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Show(self, *args)

    def TolAngular(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theTol: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_TolAngular(self, *args)

    def TolCoef(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theTol: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_TolCoef(self, *args)

    def Update(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Launches calculation of outlines of the shape visualized by this framework. used after setting the point of view and defining the shape or shapes to be visualized.

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Update(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_PolyAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_PolyAlgo

# Register HLRBRep_PolyAlgo in _HLRBRep:
_HLRBRep.HLRBRep_PolyAlgo_swigregister(HLRBRep_PolyAlgo)
class HLRBRep_PolyHLRToShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs a framework for filtering the results of the hlrbrep_algo algorithm, a. use the extraction filters to obtain the results you want for a.

        """
        _HLRBRep.HLRBRep_PolyHLRToShape_swiginit(self, _HLRBRep.new_HLRBRep_PolyHLRToShape(*args))

    def HCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_HCompound(self, *args)

    def Hide(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Hide(self, *args)

    def OutLineHCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Sets the extraction filter for hidden outlines. hidden outlines occur, for instance, in tori. in this case, the inner outlines of the torus seen on its side are hidden.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_OutLineHCompound(self, *args)

    def OutLineVCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Sets the extraction filter for visible outlines.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_OutLineVCompound(self, *args)

    def Rg1LineHCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Sets the extraction filter for hidden smooth edges.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Rg1LineHCompound(self, *args)

    def Rg1LineVCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Sets the extraction filter for visible smooth edges.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Rg1LineVCompound(self, *args)

    def RgNLineHCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Sets the extraction filter for hidden sewn edges.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_RgNLineHCompound(self, *args)

    def RgNLineVCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Sets the extraction filter for visible sewn edges.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_RgNLineVCompound(self, *args)

    def Show(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Show(self, *args)

    def Update(self, *args):
        r"""

        Parameters
        ----------
        A: HLRBRep_PolyAlgo

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Update(self, *args)

    def VCompound(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_VCompound(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_PolyHLRToShape

# Register HLRBRep_PolyHLRToShape in _HLRBRep:
_HLRBRep.HLRBRep_PolyHLRToShape_swigregister(HLRBRep_PolyHLRToShape)
class HLRBRep_SLProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        U: float
        V: float
        N: int
        Resolution: float

        Return
        -------
        None

        Description
        -----------
        Initializes the local properties of the surface <s> for the parameter values (<u>, <v>). the current point and the derivatives are computed at the same time, which allows an optimization of the computation time. <n> indicates the maximum number of derivations to be done (0, 1, or 2). for example, to compute only the tangent, n should be equal to 1. <resolution> is the linear tolerance (it is used to test if a vector is null).

        Parameters
        ----------
        S: Standard_Address
        N: int
        Resolution: float

        Return
        -------
        None

        Description
        -----------
        Idem as previous constructor but without setting the value of parameters <u> and <v>.

        Parameters
        ----------
        N: int
        Resolution: float

        Return
        -------
        None

        Description
        -----------
        Idem as previous constructor but without setting the value of parameters <u> and <v> and the surface. the surface can have an empty constructor.

        """
        _HLRBRep.HLRBRep_SLProps_swiginit(self, _HLRBRep.new_HLRBRep_SLProps(*args))

    def CurvatureDirections(self, *args):
        r"""

        Parameters
        ----------
        MaxD: gp_Dir
        MinD: gp_Dir

        Return
        -------
        None

        Description
        -----------
        Returns the direction of the maximum and minimum curvature <maxd> and <mind>.

        """
        return _HLRBRep.HLRBRep_SLProps_CurvatureDirections(self, *args)

    def D1U(self, *args):
        r"""
        Return
        -------
        gp_Vec

        Description
        -----------
        Returns the first u derivative. the derivative is computed if it has not been yet.

        """
        return _HLRBRep.HLRBRep_SLProps_D1U(self, *args)

    def D1V(self, *args):
        r"""
        Return
        -------
        gp_Vec

        Description
        -----------
        Returns the first v derivative. the derivative is computed if it has not been yet.

        """
        return _HLRBRep.HLRBRep_SLProps_D1V(self, *args)

    def D2U(self, *args):
        r"""
        Return
        -------
        gp_Vec

        Description
        -----------
        Returns the second u derivatives the derivative is computed if it has not been yet.

        """
        return _HLRBRep.HLRBRep_SLProps_D2U(self, *args)

    def D2V(self, *args):
        r"""
        Return
        -------
        gp_Vec

        Description
        -----------
        Returns the second v derivative. the derivative is computed if it has not been yet.

        """
        return _HLRBRep.HLRBRep_SLProps_D2V(self, *args)

    def DUV(self, *args):
        r"""
        Return
        -------
        gp_Vec

        Description
        -----------
        Returns the second uv cross-derivative. the derivative is computed if it has not been yet.

        """
        return _HLRBRep.HLRBRep_SLProps_DUV(self, *args)

    def GaussianCurvature(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the gaussian curvature.

        """
        return _HLRBRep.HLRBRep_SLProps_GaussianCurvature(self, *args)

    def IsCurvatureDefined(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the curvature is defined.

        """
        return _HLRBRep.HLRBRep_SLProps_IsCurvatureDefined(self, *args)

    def IsNormalDefined(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Tells if the normal is defined.

        """
        return _HLRBRep.HLRBRep_SLProps_IsNormalDefined(self, *args)

    def IsTangentUDefined(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the u tangent is defined. for example, the tangent is not defined if the two first u derivatives are null.

        """
        return _HLRBRep.HLRBRep_SLProps_IsTangentUDefined(self, *args)

    def IsTangentVDefined(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns if the v tangent is defined. for example, the tangent is not defined if the two first v derivatives are null.

        """
        return _HLRBRep.HLRBRep_SLProps_IsTangentVDefined(self, *args)

    def IsUmbilic(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the point is umbilic (i.e. if the curvature is constant).

        """
        return _HLRBRep.HLRBRep_SLProps_IsUmbilic(self, *args)

    def MaxCurvature(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the maximum curvature.

        """
        return _HLRBRep.HLRBRep_SLProps_MaxCurvature(self, *args)

    def MeanCurvature(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the mean curvature.

        """
        return _HLRBRep.HLRBRep_SLProps_MeanCurvature(self, *args)

    def MinCurvature(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the minimum curvature.

        """
        return _HLRBRep.HLRBRep_SLProps_MinCurvature(self, *args)

    def Normal(self, *args):
        r"""
        Return
        -------
        gp_Dir

        Description
        -----------
        Returns the normal direction.

        """
        return _HLRBRep.HLRBRep_SLProps_Normal(self, *args)

    def SetParameters(self, *args):
        r"""

        Parameters
        ----------
        U: float
        V: float

        Return
        -------
        None

        Description
        -----------
        Initializes the local properties of the surface s for the new parameter values (<u>, <v>).

        """
        return _HLRBRep.HLRBRep_SLProps_SetParameters(self, *args)

    def SetSurface(self, *args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        None

        Description
        -----------
        Initializes the local properties of the surface s for the new surface.

        """
        return _HLRBRep.HLRBRep_SLProps_SetSurface(self, *args)

    def TangentU(self, *args):
        r"""

        Parameters
        ----------
        D: gp_Dir

        Return
        -------
        None

        Description
        -----------
        Returns the tangent direction <d> on the iso-v.

        """
        return _HLRBRep.HLRBRep_SLProps_TangentU(self, *args)

    def TangentV(self, *args):
        r"""

        Parameters
        ----------
        D: gp_Dir

        Return
        -------
        None

        Description
        -----------
        Returns the tangent direction <d> on the iso-v.

        """
        return _HLRBRep.HLRBRep_SLProps_TangentV(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the point.

        """
        return _HLRBRep.HLRBRep_SLProps_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_SLProps

# Register HLRBRep_SLProps in _HLRBRep:
_HLRBRep.HLRBRep_SLProps_swigregister(HLRBRep_SLProps)
class HLRBRep_SLPropsATool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Bounds(*args):
        r"""

        Parameters
        ----------
        A: Standard_Address

        Return
        -------
        U1: float
        V1: float
        U2: float
        V2: float

        Description
        -----------
        Returns the bounds of the surface.

        """
        return _HLRBRep.HLRBRep_SLPropsATool_Bounds(*args)

    @staticmethod
    def Continuity(*args):
        r"""

        Parameters
        ----------
        A: Standard_Address

        Return
        -------
        int

        Description
        -----------
        Returns the order of continuity of the surface <a>. returns 1: first derivative only is computable returns 2: first and second derivative only are computable.

        """
        return _HLRBRep.HLRBRep_SLPropsATool_Continuity(*args)

    @staticmethod
    def D1(*args):
        r"""

        Parameters
        ----------
        A: Standard_Address
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Computes the point <p> and first derivative <d1*> of parameter <u> and <v> on the surface <a>.

        """
        return _HLRBRep.HLRBRep_SLPropsATool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""

        Parameters
        ----------
        A: Standard_Address
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        DUV: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Computes the point <p>, the first derivative <d1*> and second derivative <d2*> of parameter <u> and <v> on the surface <a>.

        """
        return _HLRBRep.HLRBRep_SLPropsATool_D2(*args)

    @staticmethod
    def DN(*args):
        r"""

        Parameters
        ----------
        A: Standard_Address
        U: float
        V: float
        Nu: int
        Nv: int

        Return
        -------
        gp_Vec

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SLPropsATool_DN(*args)

    @staticmethod
    def Value(*args):
        r"""

        Parameters
        ----------
        A: Standard_Address
        U: float
        V: float
        P: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Computes the point <p> of 	parameter <u> and <v> on the surface <a>.

        """
        return _HLRBRep.HLRBRep_SLPropsATool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_SLPropsATool_swiginit(self, _HLRBRep.new_HLRBRep_SLPropsATool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_SLPropsATool

# Register HLRBRep_SLPropsATool in _HLRBRep:
_HLRBRep.HLRBRep_SLPropsATool_swigregister(HLRBRep_SLPropsATool)
class HLRBRep_ShapeBounds(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        SData: Standard_Transient
        nbIso: int
        V1: int
        V2: int
        E1: int
        E2: int
        F1: int
        F2: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        nbIso: int
        V1: int
        V2: int
        E1: int
        E2: int
        F1: int
        F2: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_ShapeBounds_swiginit(self, _HLRBRep.new_HLRBRep_ShapeBounds(*args))

    def Bounds(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        V1: int
        V2: int
        E1: int
        E2: int
        F1: int
        F2: int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ShapeBounds_Bounds(self, *args)

    def MinMax(self, *args):
        r"""
        Return
        -------
        HLRAlgo_EdgesBlock::MinMaxIndices

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ShapeBounds_MinMax(self, *args)

    def NbOfIso(self, *args):
        r"""

        Parameters
        ----------
        nbIso: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ShapeBounds_NbOfIso(self, *args)

    def Shape(self, *args):
        r"""

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<HLRTopoBRep_OutLiner>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ShapeBounds_Shape(self, *args)

    def ShapeData(self, *args):
        r"""

        Parameters
        ----------
        SD: Standard_Transient

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<Standard_Transient>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ShapeBounds_ShapeData(self, *args)

    def Sizes(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        NV: int
        NE: int
        NF: int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ShapeBounds_Sizes(self, *args)

    def Translate(self, *args):
        r"""

        Parameters
        ----------
        NV: int
        NE: int
        NF: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ShapeBounds_Translate(self, *args)

    def UpdateMinMax(self, *args):
        r"""

        Parameters
        ----------
        theTotMinMax: HLRAlgo_EdgesBlock::MinMaxIndices

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ShapeBounds_UpdateMinMax(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ShapeBounds

# Register HLRBRep_ShapeBounds in _HLRBRep:
_HLRBRep.HLRBRep_ShapeBounds_swigregister(HLRBRep_ShapeBounds)
class HLRBRep_ShapeToHLR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Load(*args):
        r"""

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        P: HLRAlgo_Projector
        MST: BRepTopAdaptor_MapOfShapeTool
        nbIso: int (optional, default to 0)

        Return
        -------
        opencascade::handle<HLRBRep_Data>

        Description
        -----------
        Creates a datastructure containing the outliner <s> depending on the projector <p> and nbiso.

        """
        return _HLRBRep.HLRBRep_ShapeToHLR_Load(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_ShapeToHLR_swiginit(self, _HLRBRep.new_HLRBRep_ShapeToHLR())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ShapeToHLR

# Register HLRBRep_ShapeToHLR in _HLRBRep:
_HLRBRep.HLRBRep_ShapeToHLR_swigregister(HLRBRep_ShapeToHLR)
class HLRBRep_SurfaceTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AxeOfRevolution(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        gp_Ax1

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_AxeOfRevolution(*args)

    @staticmethod
    def BSpline(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        opencascade::handle<Geom_BSplineSurface>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_BSpline(*args)

    @staticmethod
    def BasisCurve(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        opencascade::handle<Adaptor3d_Curve>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_BasisCurve(*args)

    @staticmethod
    def BasisSurface(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        opencascade::handle<Adaptor3d_Surface>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_BasisSurface(*args)

    @staticmethod
    def Bezier(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        opencascade::handle<Geom_BezierSurface>

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Bezier(*args)

    @staticmethod
    def Cone(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        gp_Cone

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Cone(*args)

    @staticmethod
    def Cylinder(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        gp_Cylinder

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Cylinder(*args)

    @staticmethod
    def D0(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        P: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_D0(*args)

    @staticmethod
    def D1(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        P: gp_Pnt
        D1u: gp_Vec
        D1v: gp_Vec

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec
        D3U: gp_Vec
        D3V: gp_Vec
        D3UUV: gp_Vec
        D3UVV: gp_Vec

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_D3(*args)

    @staticmethod
    def DN(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        Nu: int
        Nv: int

        Return
        -------
        gp_Vec

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_DN(*args)

    @staticmethod
    def Direction(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        gp_Dir

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Direction(*args)

    @staticmethod
    def FirstUParameter(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_FirstUParameter(*args)

    @staticmethod
    def FirstVParameter(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_FirstVParameter(*args)

    @staticmethod
    def GetType(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        GeomAbs_SurfaceType

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_GetType(*args)

    @staticmethod
    def IsUClosed(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_IsUClosed(*args)

    @staticmethod
    def IsUPeriodic(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_IsUPeriodic(*args)

    @staticmethod
    def IsVClosed(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_IsVClosed(*args)

    @staticmethod
    def IsVPeriodic(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_IsVPeriodic(*args)

    @staticmethod
    def LastUParameter(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_LastUParameter(*args)

    @staticmethod
    def LastVParameter(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_LastVParameter(*args)

    @staticmethod
    def NbSamplesU(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        u1: float
        u2: float

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_NbSamplesU(*args)

    @staticmethod
    def NbSamplesV(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        v1: float
        v2: float

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_NbSamplesV(*args)

    @staticmethod
    def NbUIntervals(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        Sh: GeomAbs_Shape

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_NbUIntervals(*args)

    @staticmethod
    def NbVIntervals(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        Sh: GeomAbs_Shape

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_NbVIntervals(*args)

    @staticmethod
    def OffsetValue(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_OffsetValue(*args)

    @staticmethod
    def Plane(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        gp_Pln

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Plane(*args)

    @staticmethod
    def Sphere(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        gp_Sphere

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Sphere(*args)

    @staticmethod
    def Torus(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        gp_Torus

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Torus(*args)

    @staticmethod
    def UIntervals(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        T: TColStd_Array1OfReal
        Sh: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_UIntervals(*args)

    @staticmethod
    def UPeriod(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_UPeriod(*args)

    @staticmethod
    def UResolution(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        R3d: float

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_UResolution(*args)

    @staticmethod
    def UTrim(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        First: float
        Last: float
        Tol: float

        Return
        -------
        opencascade::handle<Adaptor3d_Surface>

        Description
        -----------
        If <first> >= <last>.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_UTrim(*args)

    @staticmethod
    def VIntervals(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        T: TColStd_Array1OfReal
        Sh: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_VIntervals(*args)

    @staticmethod
    def VPeriod(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_VPeriod(*args)

    @staticmethod
    def VResolution(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        R3d: float

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_VResolution(*args)

    @staticmethod
    def VTrim(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        First: float
        Last: float
        Tol: float

        Return
        -------
        opencascade::handle<Adaptor3d_Surface>

        Description
        -----------
        If <first> >= <last>.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_VTrim(*args)

    @staticmethod
    def Value(*args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float

        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_SurfaceTool_swiginit(self, _HLRBRep.new_HLRBRep_SurfaceTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_SurfaceTool

# Register HLRBRep_SurfaceTool in _HLRBRep:
_HLRBRep.HLRBRep_SurfaceTool_swigregister(HLRBRep_SurfaceTool)
class HLRBRep_TheCSFunctionOfInterCSurf(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        C: gp_Lin

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheCSFunctionOfInterCSurf(*args))

    def AuxillarCurve(self, *args):
        r"""
        Return
        -------
        gp_Lin

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_AuxillarCurve(self, *args)

    def AuxillarSurface(self, *args):
        r"""
        Return
        -------
        Standard_Address

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_AuxillarSurface(self, *args)

    def Point(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_Point(self, *args)

    def Root(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_Root(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheCSFunctionOfInterCSurf

# Register HLRBRep_TheCSFunctionOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_swigregister(HLRBRep_TheCSFunctionOfInterCSurf)
class HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        curve1: Standard_Address
        curve2: Standard_Address

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter

# Register HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_swigregister(HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter)
class HLRBRep_TheExactInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        U: float
        V: float
        W: float
        F: HLRBRep_TheCSFunctionOfInterCSurf
        TolTangency: float
        MarginCoef: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Compute the solution point with the close point margincoef is the coefficient for extension of uv bounds. ex., ufirst -= margincoef*(ulast-ufirst).

        Parameters
        ----------
        F: HLRBRep_TheCSFunctionOfInterCSurf
        TolTangency: float

        Return
        -------
        None

        Description
        -----------
        Initialize the parameters to compute the solution.

        """
        _HLRBRep.HLRBRep_TheExactInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheExactInterCSurf(*args))

    def Function(self, *args):
        r"""
        Return
        -------
        HLRBRep_TheCSFunctionOfInterCSurf

        Description
        -----------
        Return the math function which is used to compute the intersection.

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_Function(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the creation completed without failure.

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_IsDone(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_IsEmpty(self, *args)

    def ParameterOnCurve(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_ParameterOnCurve(self, *args)

    def ParameterOnSurface(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        U: float
        V: float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_ParameterOnSurface(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        U: float
        V: float
        W: float
        Rsnld: math_FunctionSetRoot
        u0: float
        v0: float
        u1: float
        v1: float
        w0: float
        w1: float

        Return
        -------
        None

        Description
        -----------
        Compute the solution it's possible to write to optimize: intimp_intcs inter(s1,c1,toltangency) math_functionsetroot rsnld(inter.function()) while ...{ u=... v=... w=... inter.perform(u,v,w,rsnld) } or intimp_intcs inter(toltangency) inter.setsurface(s); math_functionsetroot rsnld(inter.function()) while ...{ c=... inter.setcurve(c); u=... v=... w=... inter.perform(u,v,w,rsnld) }.

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_Perform(self, *args)

    def Point(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the intersection point the exception notdone is raised if isdone is false. the exception domainerror is raised if isempty is true.

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_Point(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheExactInterCSurf

# Register HLRBRep_TheExactInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheExactInterCSurf_swigregister(HLRBRep_TheExactInterCSurf)
class HLRBRep_TheIntConicCurveOfCInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        L: gp_Lin2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        C: gp_Circ2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        E: gp_Elips2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and a parametric curve.

        Parameters
        ----------
        Prb: gp_Parab2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a parabola and a parametric curve.

        Parameters
        ----------
        H: gp_Hypr2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between the main branch of an hyperbola and a parametric curve.

        """
        _HLRBRep.HLRBRep_TheIntConicCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheIntConicCurveOfCInter(*args))

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        C: gp_Circ2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        E: gp_Elips2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and a parametric curve.

        Parameters
        ----------
        Prb: gp_Parab2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between a parabola and a parametric curve.

        Parameters
        ----------
        H: gp_Hypr2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between the main branch of an hyperbola and a parametric curve.

        """
        return _HLRBRep.HLRBRep_TheIntConicCurveOfCInter_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheIntConicCurveOfCInter

# Register HLRBRep_TheIntConicCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheIntConicCurveOfCInter_swigregister(HLRBRep_TheIntConicCurveOfCInter)
class HLRBRep_TheIntPCurvePCurveOfCInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheIntPCurvePCurveOfCInter(*args))

    def GetMinNbSamples(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_GetMinNbSamples(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Curve1: Standard_Address
        Domain1: IntRes2d_Domain
        Curve2: Standard_Address
        Domain2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Curve1: Standard_Address
        Domain1: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_Perform(self, *args)

    def SetMinNbSamples(self, *args):
        r"""

        Parameters
        ----------
        theMinNbSamples: int

        Return
        -------
        None

        Description
        -----------
        Set / get minimum number of points in polygon for intersection.

        """
        return _HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_SetMinNbSamples(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheIntPCurvePCurveOfCInter

# Register HLRBRep_TheIntPCurvePCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_swigregister(HLRBRep_TheIntPCurvePCurveOfCInter)
class HLRBRep_TheInterferenceOfInterCSurf(OCC.Core.Intf.Intf_Interference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty interference between polygon and polyhedron.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Constructs and computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Constructs and computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Constructs and computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Return
        -------
        None

        Description
        -----------
        Constructs and computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Return
        -------
        None

        Description
        -----------
        Constructs and computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Return
        -------
        None

        Description
        -----------
        Constructs and computes an interference between the straight lines and the polyhedron.

        """
        _HLRBRep.HLRBRep_TheInterferenceOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheInterferenceOfInterCSurf(*args))

    def Interference(self, *args):
        r"""

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Return
        -------
        None

        Description
        -----------
        Compares the boundings between the segment of <thepolyg> and the facets of <thepolyh>.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Compares the boundings between the segment of <thepolyg> and the facets of <thepolyh>.

        """
        return _HLRBRep.HLRBRep_TheInterferenceOfInterCSurf_Interference(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        Computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Return
        -------
        None

        Description
        -----------
        Computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Return
        -------
        None

        Description
        -----------
        Computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Return
        -------
        None

        Description
        -----------
        Computes an interference between the straight lines and the polyhedron.

        """
        return _HLRBRep.HLRBRep_TheInterferenceOfInterCSurf_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheInterferenceOfInterCSurf

# Register HLRBRep_TheInterferenceOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheInterferenceOfInterCSurf_swigregister(HLRBRep_TheInterferenceOfInterCSurf)
class HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        ITool: IntCurve_IConicTool
        Dom1: IntRes2d_Domain
        PCurve: Standard_Address
        Dom2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an implicit curve and a parametrised curve. the exception constructionerror is raised if the domain of the parametrised curve does not verify hasfirstpoint and haslastpoint return true.

        """
        _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter(*args))

    def And_Domaine_Objet1_Intersections(self, *args):
        r"""

        Parameters
        ----------
        TheImpTool: IntCurve_IConicTool
        TheParCurve: Standard_Address
        TheImpCurveDomain: IntRes2d_Domain
        TheParCurveDomain: IntRes2d_Domain
        Inter2_And_Domain2: TColStd_Array1OfReal
        Inter1: TColStd_Array1OfReal
        Resultat1: TColStd_Array1OfReal
        Resultat2: TColStd_Array1OfReal
        EpsNul: float

        Return
        -------
        NbResultats: int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_And_Domaine_Objet1_Intersections(self, *args)

    def FindU(self, *args):
        r"""

        Parameters
        ----------
        parameter: float
        point: gp_Pnt2d
        TheParCurev: Standard_Address
        TheImpTool: IntCurve_IConicTool

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_FindU(self, *args)

    def FindV(self, *args):
        r"""

        Parameters
        ----------
        parameter: float
        point: gp_Pnt2d
        TheImpTool: IntCurve_IConicTool
        ParCurve: Standard_Address
        TheParCurveDomain: IntRes2d_Domain
        V0: float
        V1: float
        Tolerance: float

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_FindV(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        ITool: IntCurve_IConicTool
        Dom1: IntRes2d_Domain
        PCurve: Standard_Address
        Dom2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Intersection between an implicit curve and a parametrised curve. the exception constructionerror is raised if the domain of the parametrised curve does not verify hasfirstpoint and haslastpoint return true.

        """
        return _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter

# Register HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_swigregister(HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter)
class HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        C: Standard_Address
        U0: float
        TolU: float

        Return
        -------
        None

        Description
        -----------
        Calculates the distance with a close point. the close point is defined by the parameter value u0. the function f(u)=distance(p,c(u)) has an extremum when g(u)=df/du=0. the algorithm searches a zero near the close point. tolu is used to decide to stop the iterations. at the nth iteration, the criteria is: abs(un - un-1) < tolu.

        Parameters
        ----------
        P: gp_Pnt2d
        C: Standard_Address
        U0: float
        Umin: float
        Usup: float
        TolU: float

        Return
        -------
        None

        Description
        -----------
        Calculates the distance with a close point. the close point is defined by the parameter value u0. the function f(u)=distance(p,c(u)) has an extremum when g(u)=df/du=0. the algorithm searches a zero near the close point. zeros are searched between umin and usup. tolu is used to decide to stop the iterations. at the nth iteration, the criteria is: abs(un - un-1) < tolu.

        """
        _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter(*args))

    def Initialize(self, *args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        Umin: float
        Usup: float
        TolU: float

        Return
        -------
        None

        Description
        -----------
        Sets the fields of the algorithm.

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_Initialize(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the distance is found.

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_IsDone(self, *args)

    def IsMin(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the extremum distance is a minimum.

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_IsMin(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d
        U0: float

        Return
        -------
        None

        Description
        -----------
        The algorithm is done with the point p. an exception is raised if the fields have not been initialized.

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_Perform(self, *args)

    def Point(self, *args):
        r"""
        Return
        -------
        Extrema_POnCurv2d

        Description
        -----------
        Returns the point of the extremum distance.

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_Point(self, *args)

    def SquareDistance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value of the extremum square distance.

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_SquareDistance(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter

# Register HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_swigregister(HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter)
class HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter(OCC.Core.Intf.Intf_Polygon2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Curve: Standard_Address
        NbPnt: int
        Domain: IntRes2d_Domain
        Tol: float

        Return
        -------
        None

        Description
        -----------
        Compute a polygon on the domain of the curve.

        """
        _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter(*args))

    def ApproxParamOnCurve(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        ParamOnLine: float

        Return
        -------
        float

        Description
        -----------
        Give an approximation of the parameter on the curve according to the discretization of the curve.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_ApproxParamOnCurve(self, *args)

    def AutoIntersectionIsPossible(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_AutoIntersectionIsPossible(self, *args)

    def CalculRegion(self, *args):
        r"""

        Parameters
        ----------
        x: float
        y: float
        x1: float
        x2: float
        y1: float
        y2: float

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_CalculRegion(self, *args)

    def Closed(self, *args):
        r"""

        Parameters
        ----------
        clos: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        bool

        Description
        -----------
        Returns true if the polyline is closed.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_Closed(self, *args)

    def ComputeWithBox(self, *args):
        r"""

        Parameters
        ----------
        Curve: Standard_Address
        OtherBox: Bnd_Box2d

        Return
        -------
        None

        Description
        -----------
        The current polygon is modified if most of the points of the polygon are outside the box <otherbox>. in this situation, bounds are computed to build a polygon inside or near the otherbox.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_ComputeWithBox(self, *args)

    def Dump(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_Dump(self, *args)

    def InfParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the parameter (on the curve) of the first point of the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_InfParameter(self, *args)

    def SetDeflectionOverEstimation(self, *args):
        r"""

        Parameters
        ----------
        x: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_SetDeflectionOverEstimation(self, *args)

    def SupParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the parameter (on the curve) of the last point of the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_SupParameter(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter

# Register HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_swigregister(HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter)
class HLRBRep_ThePolygonOfInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Curve: gp_Lin
        NbPnt: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Curve: gp_Lin
        U1: float
        U2: float
        NbPnt: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Curve: gp_Lin
        Upars: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_ThePolygonOfInterCSurf(*args))

    def ApproxParamOnCurve(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        ParamOnLine: float

        Return
        -------
        float

        Description
        -----------
        Give an approximation of the parameter on the curve according to the discretization of the curve.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_ApproxParamOnCurve(self, *args)

    def BeginOfSeg(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Give the point of range index in the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_BeginOfSeg(self, *args)

    def Bounding(self, *args):
        r"""
        Return
        -------
        Bnd_Box

        Description
        -----------
        Give the bounding box of the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_Bounding(self, *args)

    def Closed(self, *args):
        r"""

        Parameters
        ----------
        flag: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_Closed(self, *args)

    def DeflectionOverEstimation(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_DeflectionOverEstimation(self, *args)

    def Dump(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_Dump(self, *args)

    def EndOfSeg(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Give the point of range index in the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_EndOfSeg(self, *args)

    def InfParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the parameter (on the curve) of the first point of the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_InfParameter(self, *args)

    def NbSegments(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Give the number of segments in the polyline.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_NbSegments(self, *args)

    def SetDeflectionOverEstimation(self, *args):
        r"""

        Parameters
        ----------
        x: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_SetDeflectionOverEstimation(self, *args)

    def SupParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the parameter (on the curve) of the last point of the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_SupParameter(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ThePolygonOfInterCSurf

# Register HLRBRep_ThePolygonOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_ThePolygonOfInterCSurf_swigregister(HLRBRep_ThePolygonOfInterCSurf)
class HLRBRep_ThePolygonToolOfInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BeginOfSeg(*args):
        r"""

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf
        Index: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Give the point of range index in the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_BeginOfSeg(*args)

    @staticmethod
    def Bounding(*args):
        r"""

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Return
        -------
        Bnd_Box

        Description
        -----------
        Give the bounding box of the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Bounding(*args)

    @staticmethod
    def Closed(*args):
        r"""

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Closed(*args)

    @staticmethod
    def DeflectionOverEstimation(*args):
        r"""

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_DeflectionOverEstimation(*args)

    @staticmethod
    def Dump(*args):
        r"""

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Dump(*args)

    @staticmethod
    def EndOfSeg(*args):
        r"""

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf
        Index: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Give the point of range index in the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_EndOfSeg(*args)

    @staticmethod
    def NbSegments(*args):
        r"""

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_NbSegments(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_ThePolygonToolOfInterCSurf())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ThePolygonToolOfInterCSurf

# Register HLRBRep_ThePolygonToolOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_swigregister(HLRBRep_ThePolygonToolOfInterCSurf)
class HLRBRep_ThePolyhedronToolOfInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Bounding(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        Bnd_Box

        Description
        -----------
        Give the bounding box of the polyhedrontool.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Bounding(*args)

    @staticmethod
    def ComponentsBounding(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        opencascade::handle<Bnd_HArray1OfBox>

        Description
        -----------
        Give the array of boxes. the box <n> corresponding to the triangle <n>.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_ComponentsBounding(*args)

    @staticmethod
    def DeflectionOverEstimation(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        float

        Description
        -----------
        Give the tolerance of the polygon.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_DeflectionOverEstimation(*args)

    @staticmethod
    def Dump(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Dump(*args)

    @staticmethod
    def GetBorderDeflection(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        float

        Description
        -----------
        This method returns a border deflection of the polyhedron.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_GetBorderDeflection(*args)

    @staticmethod
    def IsOnBound(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        Index1: int
        Index2: int

        Return
        -------
        bool

        Description
        -----------
        This method returns true if the edge based on points with indices index1 and index2 represents a boundary edge. it is necessary to take into account the boundary deflection for this edge.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_IsOnBound(*args)

    @staticmethod
    def NbTriangles(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Return
        -------
        int

        Description
        -----------
        Give the number of triangles in this polyhedral surface.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_NbTriangles(*args)

    @staticmethod
    def Point(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        Index: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Give the point of index i in the polyhedral surface.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Point(*args)

    @staticmethod
    def TriConnex(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        Triang: int
        Pivot: int
        Pedge: int

        Return
        -------
        TriCon: int
        OtherP: int

        Description
        -----------
        Give the address tricon of the triangle connexe to the triangle of address triang by the edge pivot pedge and the third point of this connexe triangle. when we are on a free edge tricon==0 but the function return the value of the triangle in the other side of pivot on the free edge. used to turn around a vertex.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_TriConnex(*args)

    @staticmethod
    def Triangle(*args):
        r"""

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        Index: int

        Return
        -------
        P1: int
        P2: int
        P3: int

        Description
        -----------
        Give the indices of the 3 points of the triangle of address index in the polyhedrontool.

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Triangle(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_ThePolyhedronToolOfInterCSurf())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ThePolyhedronToolOfInterCSurf

# Register HLRBRep_ThePolyhedronToolOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_swigregister(HLRBRep_ThePolyhedronToolOfInterCSurf)
class HLRBRep_TheProjPCurOfCInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FindParameter(*args):
        r"""

        Parameters
        ----------
        C: Standard_Address
        Pnt: gp_Pnt2d
        Tol: float

        Return
        -------
        float

        Description
        -----------
        Returns the parameter v of the point on the parametric curve corresponding to the point pnt. the correspondence between pnt and the point p(v) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. tol is the tolerance on the distance between a point and the parametrised curve. in that case, no bounds are given. the research of the right parameter has to be made on the natural parametric domain of the curve.

        Parameters
        ----------
        C: Standard_Address
        Pnt: gp_Pnt2d
        LowParameter: float
        HighParameter: float
        Tol: float

        Return
        -------
        float

        Description
        -----------
        Returns the parameter v of the point on the parametric curve corresponding to the point pnt. the correspondence between pnt and the point p(v) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. tol is the tolerance on the distance between a point and the parametrised curve. lowparameter and highparameter give the boundaries of the interval in which the parameter certainly lies. these parameters are given to implement a more efficient algorithm. so, it is not necessary to check that the returned value verifies lowparameter <= value <= highparameter.

        """
        return _HLRBRep.HLRBRep_TheProjPCurOfCInter_FindParameter(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_TheProjPCurOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheProjPCurOfCInter())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheProjPCurOfCInter

# Register HLRBRep_TheProjPCurOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheProjPCurOfCInter_swigregister(HLRBRep_TheProjPCurOfCInter)
class HLRBRep_TheQuadCurvExactInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        S: Standard_Address
        C: gp_Lin

        Return
        -------
        None

        Description
        -----------
        Provides the signed distance function: q(w) and its first derivative dq(w)/dw.

        """
        _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheQuadCurvExactInterCSurf(*args))

    def Intervals(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        U1: float
        U2: float

        Description
        -----------
        U1 and u2 are the parameters of a segment on the curve.

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_Intervals(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_IsDone(self, *args)

    def NbIntervals(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_NbIntervals(self, *args)

    def NbRoots(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_NbRoots(self, *args)

    def Root(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_Root(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheQuadCurvExactInterCSurf

# Register HLRBRep_TheQuadCurvExactInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_swigregister(HLRBRep_TheQuadCurvExactInterCSurf)
class HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Q: IntSurf_Quadric
        C: gp_Lin

        Return
        -------
        None

        Description
        -----------
        Create the function.

        """
        _HLRBRep.HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf

# Register HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf_swigregister(HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf)
class HLRBRep_VertexList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        T: HLRBRep_EdgeInterferenceTool
        I: HLRAlgo_ListIteratorOfInterferenceList

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_VertexList_swiginit(self, _HLRBRep.new_HLRBRep_VertexList(*args))

    def BoundaryTransition(self, *args):
        r"""
        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        Returns the transition of the current vertex relative to the boundary if it is an interference.

        """
        return _HLRBRep.HLRBRep_VertexList_BoundaryTransition(self, *args)

    def Current(self, *args):
        r"""
        Return
        -------
        HLRAlgo_Intersection

        Description
        -----------
        Returns the current vertex.

        """
        return _HLRBRep.HLRBRep_VertexList_Current(self, *args)

    def IsBoundary(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current vertex is on the boundary of the edge.

        """
        return _HLRBRep.HLRBRep_VertexList_IsBoundary(self, *args)

    def IsInterference(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current vertex is an interference.

        """
        return _HLRBRep.HLRBRep_VertexList_IsInterference(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when the curve is periodic.

        """
        return _HLRBRep.HLRBRep_VertexList_IsPeriodic(self, *args)

    def More(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when there are more vertices.

        """
        return _HLRBRep.HLRBRep_VertexList_More(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Proceeds to the next vertex.

        """
        return _HLRBRep.HLRBRep_VertexList_Next(self, *args)

    def Orientation(self, *args):
        r"""
        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        Returns the orientation of the current vertex if it is on the boundary of the edge.

        """
        return _HLRBRep.HLRBRep_VertexList_Orientation(self, *args)

    def Transition(self, *args):
        r"""
        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        Returns the transition of the current vertex if it is an interference.

        """
        return _HLRBRep.HLRBRep_VertexList_Transition(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_VertexList

# Register HLRBRep_VertexList in _HLRBRep:
_HLRBRep.HLRBRep_VertexList_swigregister(HLRBRep_VertexList)
class HLRBRep_Algo(HLRBRep_InternalAlgo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty framework for the calculation of visible and hidden lines of a shape in a projection. use the function: - projector to define the point of view - add to select the shape or shapes to be visualized - update to compute the outlines of the shape, and - hide to compute the visible and hidden lines of the shape.

        Parameters
        ----------
        A: HLRBRep_Algo

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _HLRBRep.HLRBRep_Algo_swiginit(self, _HLRBRep.new_HLRBRep_Algo(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        SData: Standard_Transient
        nbIso: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Add the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape
        nbIso: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Adds the shape s to this framework, and specifies the number of isoparameters nbiso desired in visualizing s. you may add as many shapes as you wish. use the function add once for each shape.

        """
        return _HLRBRep.HLRBRep_Algo_Add(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        int

        Description
        -----------
        Return the index of the shape <s> and return 0 if the shape <s> is not found.

        """
        return _HLRBRep.HLRBRep_Algo_Index(self, *args)

    def OutLinedShapeNullify(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Nullify all the results of outliner from hlrtopobrep.

        """
        return _HLRBRep.HLRBRep_Algo_OutLinedShapeNullify(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_Algo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Algo

# Register HLRBRep_Algo in _HLRBRep:
_HLRBRep.HLRBRep_Algo_swigregister(HLRBRep_Algo)

@classnotwrapped
class HLRBRep_ThePolyhedronOfInterCSurf:
	pass

@classnotwrapped
class HLRBRep_BSurfaceTool:
	pass

@classnotwrapped
class HLRBRep_Surface:
	pass

@classnotwrapped
class HLRBRep_TheCurveLocatorOfTheProjPCurOfCInter:
	pass





@deprecated
def hlrbrep_MakeEdge(*args):
	return hlrbrep.MakeEdge(*args)

@deprecated
def hlrbrep_MakeEdge3d(*args):
	return hlrbrep.MakeEdge3d(*args)

@deprecated
def hlrbrep_PolyHLRAngleAndDeflection(*args):
	return hlrbrep.PolyHLRAngleAndDeflection(*args)

@deprecated
def HLRBRep_BCurveTool_BSpline(*args):
	return HLRBRep_BCurveTool.BSpline(*args)

@deprecated
def HLRBRep_BCurveTool_Bezier(*args):
	return HLRBRep_BCurveTool.Bezier(*args)

@deprecated
def HLRBRep_BCurveTool_Circle(*args):
	return HLRBRep_BCurveTool.Circle(*args)

@deprecated
def HLRBRep_BCurveTool_Continuity(*args):
	return HLRBRep_BCurveTool.Continuity(*args)

@deprecated
def HLRBRep_BCurveTool_D0(*args):
	return HLRBRep_BCurveTool.D0(*args)

@deprecated
def HLRBRep_BCurveTool_D1(*args):
	return HLRBRep_BCurveTool.D1(*args)

@deprecated
def HLRBRep_BCurveTool_D2(*args):
	return HLRBRep_BCurveTool.D2(*args)

@deprecated
def HLRBRep_BCurveTool_D3(*args):
	return HLRBRep_BCurveTool.D3(*args)

@deprecated
def HLRBRep_BCurveTool_DN(*args):
	return HLRBRep_BCurveTool.DN(*args)

@deprecated
def HLRBRep_BCurveTool_Degree(*args):
	return HLRBRep_BCurveTool.Degree(*args)

@deprecated
def HLRBRep_BCurveTool_Ellipse(*args):
	return HLRBRep_BCurveTool.Ellipse(*args)

@deprecated
def HLRBRep_BCurveTool_FirstParameter(*args):
	return HLRBRep_BCurveTool.FirstParameter(*args)

@deprecated
def HLRBRep_BCurveTool_GetType(*args):
	return HLRBRep_BCurveTool.GetType(*args)

@deprecated
def HLRBRep_BCurveTool_Hyperbola(*args):
	return HLRBRep_BCurveTool.Hyperbola(*args)

@deprecated
def HLRBRep_BCurveTool_Intervals(*args):
	return HLRBRep_BCurveTool.Intervals(*args)

@deprecated
def HLRBRep_BCurveTool_IsClosed(*args):
	return HLRBRep_BCurveTool.IsClosed(*args)

@deprecated
def HLRBRep_BCurveTool_IsPeriodic(*args):
	return HLRBRep_BCurveTool.IsPeriodic(*args)

@deprecated
def HLRBRep_BCurveTool_IsRational(*args):
	return HLRBRep_BCurveTool.IsRational(*args)

@deprecated
def HLRBRep_BCurveTool_LastParameter(*args):
	return HLRBRep_BCurveTool.LastParameter(*args)

@deprecated
def HLRBRep_BCurveTool_Line(*args):
	return HLRBRep_BCurveTool.Line(*args)

@deprecated
def HLRBRep_BCurveTool_NbIntervals(*args):
	return HLRBRep_BCurveTool.NbIntervals(*args)

@deprecated
def HLRBRep_BCurveTool_NbKnots(*args):
	return HLRBRep_BCurveTool.NbKnots(*args)

@deprecated
def HLRBRep_BCurveTool_NbPoles(*args):
	return HLRBRep_BCurveTool.NbPoles(*args)

@deprecated
def HLRBRep_BCurveTool_NbSamples(*args):
	return HLRBRep_BCurveTool.NbSamples(*args)

@deprecated
def HLRBRep_BCurveTool_Parabola(*args):
	return HLRBRep_BCurveTool.Parabola(*args)

@deprecated
def HLRBRep_BCurveTool_Period(*args):
	return HLRBRep_BCurveTool.Period(*args)

@deprecated
def HLRBRep_BCurveTool_Poles(*args):
	return HLRBRep_BCurveTool.Poles(*args)

@deprecated
def HLRBRep_BCurveTool_PolesAndWeights(*args):
	return HLRBRep_BCurveTool.PolesAndWeights(*args)

@deprecated
def HLRBRep_BCurveTool_Resolution(*args):
	return HLRBRep_BCurveTool.Resolution(*args)

@deprecated
def HLRBRep_BCurveTool_Value(*args):
	return HLRBRep_BCurveTool.Value(*args)

@deprecated
def HLRBRep_CLPropsATool_Continuity(*args):
	return HLRBRep_CLPropsATool.Continuity(*args)

@deprecated
def HLRBRep_CLPropsATool_D1(*args):
	return HLRBRep_CLPropsATool.D1(*args)

@deprecated
def HLRBRep_CLPropsATool_D2(*args):
	return HLRBRep_CLPropsATool.D2(*args)

@deprecated
def HLRBRep_CLPropsATool_D3(*args):
	return HLRBRep_CLPropsATool.D3(*args)

@deprecated
def HLRBRep_CLPropsATool_FirstParameter(*args):
	return HLRBRep_CLPropsATool.FirstParameter(*args)

@deprecated
def HLRBRep_CLPropsATool_LastParameter(*args):
	return HLRBRep_CLPropsATool.LastParameter(*args)

@deprecated
def HLRBRep_CLPropsATool_Value(*args):
	return HLRBRep_CLPropsATool.Value(*args)

@deprecated
def HLRBRep_CurveTool_BSpline(*args):
	return HLRBRep_CurveTool.BSpline(*args)

@deprecated
def HLRBRep_CurveTool_Bezier(*args):
	return HLRBRep_CurveTool.Bezier(*args)

@deprecated
def HLRBRep_CurveTool_Circle(*args):
	return HLRBRep_CurveTool.Circle(*args)

@deprecated
def HLRBRep_CurveTool_Continuity(*args):
	return HLRBRep_CurveTool.Continuity(*args)

@deprecated
def HLRBRep_CurveTool_D0(*args):
	return HLRBRep_CurveTool.D0(*args)

@deprecated
def HLRBRep_CurveTool_D1(*args):
	return HLRBRep_CurveTool.D1(*args)

@deprecated
def HLRBRep_CurveTool_D2(*args):
	return HLRBRep_CurveTool.D2(*args)

@deprecated
def HLRBRep_CurveTool_D3(*args):
	return HLRBRep_CurveTool.D3(*args)

@deprecated
def HLRBRep_CurveTool_DN(*args):
	return HLRBRep_CurveTool.DN(*args)

@deprecated
def HLRBRep_CurveTool_Degree(*args):
	return HLRBRep_CurveTool.Degree(*args)

@deprecated
def HLRBRep_CurveTool_Ellipse(*args):
	return HLRBRep_CurveTool.Ellipse(*args)

@deprecated
def HLRBRep_CurveTool_EpsX(*args):
	return HLRBRep_CurveTool.EpsX(*args)

@deprecated
def HLRBRep_CurveTool_FirstParameter(*args):
	return HLRBRep_CurveTool.FirstParameter(*args)

@deprecated
def HLRBRep_CurveTool_GetInterval(*args):
	return HLRBRep_CurveTool.GetInterval(*args)

@deprecated
def HLRBRep_CurveTool_GetType(*args):
	return HLRBRep_CurveTool.GetType(*args)

@deprecated
def HLRBRep_CurveTool_Hyperbola(*args):
	return HLRBRep_CurveTool.Hyperbola(*args)

@deprecated
def HLRBRep_CurveTool_Intervals(*args):
	return HLRBRep_CurveTool.Intervals(*args)

@deprecated
def HLRBRep_CurveTool_IsClosed(*args):
	return HLRBRep_CurveTool.IsClosed(*args)

@deprecated
def HLRBRep_CurveTool_IsPeriodic(*args):
	return HLRBRep_CurveTool.IsPeriodic(*args)

@deprecated
def HLRBRep_CurveTool_LastParameter(*args):
	return HLRBRep_CurveTool.LastParameter(*args)

@deprecated
def HLRBRep_CurveTool_Line(*args):
	return HLRBRep_CurveTool.Line(*args)

@deprecated
def HLRBRep_CurveTool_NbIntervals(*args):
	return HLRBRep_CurveTool.NbIntervals(*args)

@deprecated
def HLRBRep_CurveTool_NbSamples(*args):
	return HLRBRep_CurveTool.NbSamples(*args)

@deprecated
def HLRBRep_CurveTool_NbSamples(*args):
	return HLRBRep_CurveTool.NbSamples(*args)

@deprecated
def HLRBRep_CurveTool_Parabola(*args):
	return HLRBRep_CurveTool.Parabola(*args)

@deprecated
def HLRBRep_CurveTool_Period(*args):
	return HLRBRep_CurveTool.Period(*args)

@deprecated
def HLRBRep_CurveTool_Resolution(*args):
	return HLRBRep_CurveTool.Resolution(*args)

@deprecated
def HLRBRep_CurveTool_TheType(*args):
	return HLRBRep_CurveTool.TheType(*args)

@deprecated
def HLRBRep_CurveTool_Value(*args):
	return HLRBRep_CurveTool.Value(*args)

@deprecated
def HLRBRep_EdgeFaceTool_CurvatureValue(*args):
	return HLRBRep_EdgeFaceTool.CurvatureValue(*args)

@deprecated
def HLRBRep_EdgeFaceTool_UVPoint(*args):
	return HLRBRep_EdgeFaceTool.UVPoint(*args)

@deprecated
def HLRBRep_EdgeIList_AddInterference(*args):
	return HLRBRep_EdgeIList.AddInterference(*args)

@deprecated
def HLRBRep_EdgeIList_ProcessComplex(*args):
	return HLRBRep_EdgeIList.ProcessComplex(*args)

@deprecated
def HLRBRep_LineTool_BSpline(*args):
	return HLRBRep_LineTool.BSpline(*args)

@deprecated
def HLRBRep_LineTool_Bezier(*args):
	return HLRBRep_LineTool.Bezier(*args)

@deprecated
def HLRBRep_LineTool_Circle(*args):
	return HLRBRep_LineTool.Circle(*args)

@deprecated
def HLRBRep_LineTool_Continuity(*args):
	return HLRBRep_LineTool.Continuity(*args)

@deprecated
def HLRBRep_LineTool_D0(*args):
	return HLRBRep_LineTool.D0(*args)

@deprecated
def HLRBRep_LineTool_D1(*args):
	return HLRBRep_LineTool.D1(*args)

@deprecated
def HLRBRep_LineTool_D2(*args):
	return HLRBRep_LineTool.D2(*args)

@deprecated
def HLRBRep_LineTool_D3(*args):
	return HLRBRep_LineTool.D3(*args)

@deprecated
def HLRBRep_LineTool_DN(*args):
	return HLRBRep_LineTool.DN(*args)

@deprecated
def HLRBRep_LineTool_Degree(*args):
	return HLRBRep_LineTool.Degree(*args)

@deprecated
def HLRBRep_LineTool_Ellipse(*args):
	return HLRBRep_LineTool.Ellipse(*args)

@deprecated
def HLRBRep_LineTool_FirstParameter(*args):
	return HLRBRep_LineTool.FirstParameter(*args)

@deprecated
def HLRBRep_LineTool_GetType(*args):
	return HLRBRep_LineTool.GetType(*args)

@deprecated
def HLRBRep_LineTool_Hyperbola(*args):
	return HLRBRep_LineTool.Hyperbola(*args)

@deprecated
def HLRBRep_LineTool_IntervalContinuity(*args):
	return HLRBRep_LineTool.IntervalContinuity(*args)

@deprecated
def HLRBRep_LineTool_IntervalFirst(*args):
	return HLRBRep_LineTool.IntervalFirst(*args)

@deprecated
def HLRBRep_LineTool_IntervalLast(*args):
	return HLRBRep_LineTool.IntervalLast(*args)

@deprecated
def HLRBRep_LineTool_Intervals(*args):
	return HLRBRep_LineTool.Intervals(*args)

@deprecated
def HLRBRep_LineTool_IsClosed(*args):
	return HLRBRep_LineTool.IsClosed(*args)

@deprecated
def HLRBRep_LineTool_IsPeriodic(*args):
	return HLRBRep_LineTool.IsPeriodic(*args)

@deprecated
def HLRBRep_LineTool_IsRational(*args):
	return HLRBRep_LineTool.IsRational(*args)

@deprecated
def HLRBRep_LineTool_KnotsAndMultiplicities(*args):
	return HLRBRep_LineTool.KnotsAndMultiplicities(*args)

@deprecated
def HLRBRep_LineTool_LastParameter(*args):
	return HLRBRep_LineTool.LastParameter(*args)

@deprecated
def HLRBRep_LineTool_Line(*args):
	return HLRBRep_LineTool.Line(*args)

@deprecated
def HLRBRep_LineTool_NbIntervals(*args):
	return HLRBRep_LineTool.NbIntervals(*args)

@deprecated
def HLRBRep_LineTool_NbKnots(*args):
	return HLRBRep_LineTool.NbKnots(*args)

@deprecated
def HLRBRep_LineTool_NbPoles(*args):
	return HLRBRep_LineTool.NbPoles(*args)

@deprecated
def HLRBRep_LineTool_NbSamples(*args):
	return HLRBRep_LineTool.NbSamples(*args)

@deprecated
def HLRBRep_LineTool_Parabola(*args):
	return HLRBRep_LineTool.Parabola(*args)

@deprecated
def HLRBRep_LineTool_Period(*args):
	return HLRBRep_LineTool.Period(*args)

@deprecated
def HLRBRep_LineTool_Poles(*args):
	return HLRBRep_LineTool.Poles(*args)

@deprecated
def HLRBRep_LineTool_PolesAndWeights(*args):
	return HLRBRep_LineTool.PolesAndWeights(*args)

@deprecated
def HLRBRep_LineTool_Resolution(*args):
	return HLRBRep_LineTool.Resolution(*args)

@deprecated
def HLRBRep_LineTool_SamplePars(*args):
	return HLRBRep_LineTool.SamplePars(*args)

@deprecated
def HLRBRep_LineTool_Value(*args):
	return HLRBRep_LineTool.Value(*args)

@deprecated
def HLRBRep_SLPropsATool_Bounds(*args):
	return HLRBRep_SLPropsATool.Bounds(*args)

@deprecated
def HLRBRep_SLPropsATool_Continuity(*args):
	return HLRBRep_SLPropsATool.Continuity(*args)

@deprecated
def HLRBRep_SLPropsATool_D1(*args):
	return HLRBRep_SLPropsATool.D1(*args)

@deprecated
def HLRBRep_SLPropsATool_D2(*args):
	return HLRBRep_SLPropsATool.D2(*args)

@deprecated
def HLRBRep_SLPropsATool_DN(*args):
	return HLRBRep_SLPropsATool.DN(*args)

@deprecated
def HLRBRep_SLPropsATool_Value(*args):
	return HLRBRep_SLPropsATool.Value(*args)

@deprecated
def HLRBRep_ShapeToHLR_Load(*args):
	return HLRBRep_ShapeToHLR.Load(*args)

@deprecated
def HLRBRep_SurfaceTool_AxeOfRevolution(*args):
	return HLRBRep_SurfaceTool.AxeOfRevolution(*args)

@deprecated
def HLRBRep_SurfaceTool_BSpline(*args):
	return HLRBRep_SurfaceTool.BSpline(*args)

@deprecated
def HLRBRep_SurfaceTool_BasisCurve(*args):
	return HLRBRep_SurfaceTool.BasisCurve(*args)

@deprecated
def HLRBRep_SurfaceTool_BasisSurface(*args):
	return HLRBRep_SurfaceTool.BasisSurface(*args)

@deprecated
def HLRBRep_SurfaceTool_Bezier(*args):
	return HLRBRep_SurfaceTool.Bezier(*args)

@deprecated
def HLRBRep_SurfaceTool_Cone(*args):
	return HLRBRep_SurfaceTool.Cone(*args)

@deprecated
def HLRBRep_SurfaceTool_Cylinder(*args):
	return HLRBRep_SurfaceTool.Cylinder(*args)

@deprecated
def HLRBRep_SurfaceTool_D0(*args):
	return HLRBRep_SurfaceTool.D0(*args)

@deprecated
def HLRBRep_SurfaceTool_D1(*args):
	return HLRBRep_SurfaceTool.D1(*args)

@deprecated
def HLRBRep_SurfaceTool_D2(*args):
	return HLRBRep_SurfaceTool.D2(*args)

@deprecated
def HLRBRep_SurfaceTool_D3(*args):
	return HLRBRep_SurfaceTool.D3(*args)

@deprecated
def HLRBRep_SurfaceTool_DN(*args):
	return HLRBRep_SurfaceTool.DN(*args)

@deprecated
def HLRBRep_SurfaceTool_Direction(*args):
	return HLRBRep_SurfaceTool.Direction(*args)

@deprecated
def HLRBRep_SurfaceTool_FirstUParameter(*args):
	return HLRBRep_SurfaceTool.FirstUParameter(*args)

@deprecated
def HLRBRep_SurfaceTool_FirstVParameter(*args):
	return HLRBRep_SurfaceTool.FirstVParameter(*args)

@deprecated
def HLRBRep_SurfaceTool_GetType(*args):
	return HLRBRep_SurfaceTool.GetType(*args)

@deprecated
def HLRBRep_SurfaceTool_IsUClosed(*args):
	return HLRBRep_SurfaceTool.IsUClosed(*args)

@deprecated
def HLRBRep_SurfaceTool_IsUPeriodic(*args):
	return HLRBRep_SurfaceTool.IsUPeriodic(*args)

@deprecated
def HLRBRep_SurfaceTool_IsVClosed(*args):
	return HLRBRep_SurfaceTool.IsVClosed(*args)

@deprecated
def HLRBRep_SurfaceTool_IsVPeriodic(*args):
	return HLRBRep_SurfaceTool.IsVPeriodic(*args)

@deprecated
def HLRBRep_SurfaceTool_LastUParameter(*args):
	return HLRBRep_SurfaceTool.LastUParameter(*args)

@deprecated
def HLRBRep_SurfaceTool_LastVParameter(*args):
	return HLRBRep_SurfaceTool.LastVParameter(*args)

@deprecated
def HLRBRep_SurfaceTool_NbSamplesU(*args):
	return HLRBRep_SurfaceTool.NbSamplesU(*args)

@deprecated
def HLRBRep_SurfaceTool_NbSamplesU(*args):
	return HLRBRep_SurfaceTool.NbSamplesU(*args)

@deprecated
def HLRBRep_SurfaceTool_NbSamplesV(*args):
	return HLRBRep_SurfaceTool.NbSamplesV(*args)

@deprecated
def HLRBRep_SurfaceTool_NbSamplesV(*args):
	return HLRBRep_SurfaceTool.NbSamplesV(*args)

@deprecated
def HLRBRep_SurfaceTool_NbUIntervals(*args):
	return HLRBRep_SurfaceTool.NbUIntervals(*args)

@deprecated
def HLRBRep_SurfaceTool_NbVIntervals(*args):
	return HLRBRep_SurfaceTool.NbVIntervals(*args)

@deprecated
def HLRBRep_SurfaceTool_OffsetValue(*args):
	return HLRBRep_SurfaceTool.OffsetValue(*args)

@deprecated
def HLRBRep_SurfaceTool_Plane(*args):
	return HLRBRep_SurfaceTool.Plane(*args)

@deprecated
def HLRBRep_SurfaceTool_Sphere(*args):
	return HLRBRep_SurfaceTool.Sphere(*args)

@deprecated
def HLRBRep_SurfaceTool_Torus(*args):
	return HLRBRep_SurfaceTool.Torus(*args)

@deprecated
def HLRBRep_SurfaceTool_UIntervals(*args):
	return HLRBRep_SurfaceTool.UIntervals(*args)

@deprecated
def HLRBRep_SurfaceTool_UPeriod(*args):
	return HLRBRep_SurfaceTool.UPeriod(*args)

@deprecated
def HLRBRep_SurfaceTool_UResolution(*args):
	return HLRBRep_SurfaceTool.UResolution(*args)

@deprecated
def HLRBRep_SurfaceTool_UTrim(*args):
	return HLRBRep_SurfaceTool.UTrim(*args)

@deprecated
def HLRBRep_SurfaceTool_VIntervals(*args):
	return HLRBRep_SurfaceTool.VIntervals(*args)

@deprecated
def HLRBRep_SurfaceTool_VPeriod(*args):
	return HLRBRep_SurfaceTool.VPeriod(*args)

@deprecated
def HLRBRep_SurfaceTool_VResolution(*args):
	return HLRBRep_SurfaceTool.VResolution(*args)

@deprecated
def HLRBRep_SurfaceTool_VTrim(*args):
	return HLRBRep_SurfaceTool.VTrim(*args)

@deprecated
def HLRBRep_SurfaceTool_Value(*args):
	return HLRBRep_SurfaceTool.Value(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_BeginOfSeg(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.BeginOfSeg(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_Bounding(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.Bounding(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_Closed(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.Closed(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_DeflectionOverEstimation(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.DeflectionOverEstimation(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_Dump(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.Dump(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_EndOfSeg(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.EndOfSeg(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_NbSegments(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.NbSegments(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_Bounding(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.Bounding(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_ComponentsBounding(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.ComponentsBounding(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_DeflectionOverEstimation(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.DeflectionOverEstimation(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_Dump(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.Dump(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_GetBorderDeflection(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.GetBorderDeflection(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_IsOnBound(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.IsOnBound(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_NbTriangles(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.NbTriangles(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_Point(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.Point(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_TriConnex(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.TriConnex(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_Triangle(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.Triangle(*args)

@deprecated
def HLRBRep_TheProjPCurOfCInter_FindParameter(*args):
	return HLRBRep_TheProjPCurOfCInter.FindParameter(*args)

@deprecated
def HLRBRep_TheProjPCurOfCInter_FindParameter(*args):
	return HLRBRep_TheProjPCurOfCInter.FindParameter(*args)



