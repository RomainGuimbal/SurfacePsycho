# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRep')
    _BRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRep', [dirname(__file__)])
        except ImportError:
            import _BRep
            return _BRep
        try:
            _mod = imp.load_module('_BRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRep = swig_import_helper()
    del swig_import_helper
else:
    import _BRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRep.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BRep.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRep.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRep.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BRep.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BRep.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BRep.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BRep.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BRep.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BRep.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRep.process_exception(error, method_name, class_name)
process_exception = _BRep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.GeomAbs
import OCC.Core.Geom
import OCC.Core.TColgp
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.Geom2d

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BRep_CurveRepresentation_Create() -> "opencascade::handle< BRep_CurveRepresentation >":
    return _BRep.Handle_BRep_CurveRepresentation_Create()
Handle_BRep_CurveRepresentation_Create = _BRep.Handle_BRep_CurveRepresentation_Create

def Handle_BRep_CurveRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_CurveRepresentation >":
    return _BRep.Handle_BRep_CurveRepresentation_DownCast(t)
Handle_BRep_CurveRepresentation_DownCast = _BRep.Handle_BRep_CurveRepresentation_DownCast

def Handle_BRep_CurveRepresentation_IsNull(t: 'opencascade::handle< BRep_CurveRepresentation > const &') -> "bool":
    return _BRep.Handle_BRep_CurveRepresentation_IsNull(t)
Handle_BRep_CurveRepresentation_IsNull = _BRep.Handle_BRep_CurveRepresentation_IsNull

def Handle_BRep_PointRepresentation_Create() -> "opencascade::handle< BRep_PointRepresentation >":
    return _BRep.Handle_BRep_PointRepresentation_Create()
Handle_BRep_PointRepresentation_Create = _BRep.Handle_BRep_PointRepresentation_Create

def Handle_BRep_PointRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointRepresentation >":
    return _BRep.Handle_BRep_PointRepresentation_DownCast(t)
Handle_BRep_PointRepresentation_DownCast = _BRep.Handle_BRep_PointRepresentation_DownCast

def Handle_BRep_PointRepresentation_IsNull(t: 'opencascade::handle< BRep_PointRepresentation > const &') -> "bool":
    return _BRep.Handle_BRep_PointRepresentation_IsNull(t)
Handle_BRep_PointRepresentation_IsNull = _BRep.Handle_BRep_PointRepresentation_IsNull

def Handle_BRep_TEdge_Create() -> "opencascade::handle< BRep_TEdge >":
    return _BRep.Handle_BRep_TEdge_Create()
Handle_BRep_TEdge_Create = _BRep.Handle_BRep_TEdge_Create

def Handle_BRep_TEdge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_TEdge >":
    return _BRep.Handle_BRep_TEdge_DownCast(t)
Handle_BRep_TEdge_DownCast = _BRep.Handle_BRep_TEdge_DownCast

def Handle_BRep_TEdge_IsNull(t: 'opencascade::handle< BRep_TEdge > const &') -> "bool":
    return _BRep.Handle_BRep_TEdge_IsNull(t)
Handle_BRep_TEdge_IsNull = _BRep.Handle_BRep_TEdge_IsNull

def Handle_BRep_TFace_Create() -> "opencascade::handle< BRep_TFace >":
    return _BRep.Handle_BRep_TFace_Create()
Handle_BRep_TFace_Create = _BRep.Handle_BRep_TFace_Create

def Handle_BRep_TFace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_TFace >":
    return _BRep.Handle_BRep_TFace_DownCast(t)
Handle_BRep_TFace_DownCast = _BRep.Handle_BRep_TFace_DownCast

def Handle_BRep_TFace_IsNull(t: 'opencascade::handle< BRep_TFace > const &') -> "bool":
    return _BRep.Handle_BRep_TFace_IsNull(t)
Handle_BRep_TFace_IsNull = _BRep.Handle_BRep_TFace_IsNull

def Handle_BRep_TVertex_Create() -> "opencascade::handle< BRep_TVertex >":
    return _BRep.Handle_BRep_TVertex_Create()
Handle_BRep_TVertex_Create = _BRep.Handle_BRep_TVertex_Create

def Handle_BRep_TVertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_TVertex >":
    return _BRep.Handle_BRep_TVertex_DownCast(t)
Handle_BRep_TVertex_DownCast = _BRep.Handle_BRep_TVertex_DownCast

def Handle_BRep_TVertex_IsNull(t: 'opencascade::handle< BRep_TVertex > const &') -> "bool":
    return _BRep.Handle_BRep_TVertex_IsNull(t)
Handle_BRep_TVertex_IsNull = _BRep.Handle_BRep_TVertex_IsNull

def Handle_BRep_CurveOn2Surfaces_Create() -> "opencascade::handle< BRep_CurveOn2Surfaces >":
    return _BRep.Handle_BRep_CurveOn2Surfaces_Create()
Handle_BRep_CurveOn2Surfaces_Create = _BRep.Handle_BRep_CurveOn2Surfaces_Create

def Handle_BRep_CurveOn2Surfaces_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_CurveOn2Surfaces >":
    return _BRep.Handle_BRep_CurveOn2Surfaces_DownCast(t)
Handle_BRep_CurveOn2Surfaces_DownCast = _BRep.Handle_BRep_CurveOn2Surfaces_DownCast

def Handle_BRep_CurveOn2Surfaces_IsNull(t: 'opencascade::handle< BRep_CurveOn2Surfaces > const &') -> "bool":
    return _BRep.Handle_BRep_CurveOn2Surfaces_IsNull(t)
Handle_BRep_CurveOn2Surfaces_IsNull = _BRep.Handle_BRep_CurveOn2Surfaces_IsNull

def Handle_BRep_GCurve_Create() -> "opencascade::handle< BRep_GCurve >":
    return _BRep.Handle_BRep_GCurve_Create()
Handle_BRep_GCurve_Create = _BRep.Handle_BRep_GCurve_Create

def Handle_BRep_GCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_GCurve >":
    return _BRep.Handle_BRep_GCurve_DownCast(t)
Handle_BRep_GCurve_DownCast = _BRep.Handle_BRep_GCurve_DownCast

def Handle_BRep_GCurve_IsNull(t: 'opencascade::handle< BRep_GCurve > const &') -> "bool":
    return _BRep.Handle_BRep_GCurve_IsNull(t)
Handle_BRep_GCurve_IsNull = _BRep.Handle_BRep_GCurve_IsNull

def Handle_BRep_PointOnCurve_Create() -> "opencascade::handle< BRep_PointOnCurve >":
    return _BRep.Handle_BRep_PointOnCurve_Create()
Handle_BRep_PointOnCurve_Create = _BRep.Handle_BRep_PointOnCurve_Create

def Handle_BRep_PointOnCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointOnCurve >":
    return _BRep.Handle_BRep_PointOnCurve_DownCast(t)
Handle_BRep_PointOnCurve_DownCast = _BRep.Handle_BRep_PointOnCurve_DownCast

def Handle_BRep_PointOnCurve_IsNull(t: 'opencascade::handle< BRep_PointOnCurve > const &') -> "bool":
    return _BRep.Handle_BRep_PointOnCurve_IsNull(t)
Handle_BRep_PointOnCurve_IsNull = _BRep.Handle_BRep_PointOnCurve_IsNull

def Handle_BRep_PointsOnSurface_Create() -> "opencascade::handle< BRep_PointsOnSurface >":
    return _BRep.Handle_BRep_PointsOnSurface_Create()
Handle_BRep_PointsOnSurface_Create = _BRep.Handle_BRep_PointsOnSurface_Create

def Handle_BRep_PointsOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointsOnSurface >":
    return _BRep.Handle_BRep_PointsOnSurface_DownCast(t)
Handle_BRep_PointsOnSurface_DownCast = _BRep.Handle_BRep_PointsOnSurface_DownCast

def Handle_BRep_PointsOnSurface_IsNull(t: 'opencascade::handle< BRep_PointsOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PointsOnSurface_IsNull(t)
Handle_BRep_PointsOnSurface_IsNull = _BRep.Handle_BRep_PointsOnSurface_IsNull

def Handle_BRep_Polygon3D_Create() -> "opencascade::handle< BRep_Polygon3D >":
    return _BRep.Handle_BRep_Polygon3D_Create()
Handle_BRep_Polygon3D_Create = _BRep.Handle_BRep_Polygon3D_Create

def Handle_BRep_Polygon3D_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_Polygon3D >":
    return _BRep.Handle_BRep_Polygon3D_DownCast(t)
Handle_BRep_Polygon3D_DownCast = _BRep.Handle_BRep_Polygon3D_DownCast

def Handle_BRep_Polygon3D_IsNull(t: 'opencascade::handle< BRep_Polygon3D > const &') -> "bool":
    return _BRep.Handle_BRep_Polygon3D_IsNull(t)
Handle_BRep_Polygon3D_IsNull = _BRep.Handle_BRep_Polygon3D_IsNull

def Handle_BRep_PolygonOnSurface_Create() -> "opencascade::handle< BRep_PolygonOnSurface >":
    return _BRep.Handle_BRep_PolygonOnSurface_Create()
Handle_BRep_PolygonOnSurface_Create = _BRep.Handle_BRep_PolygonOnSurface_Create

def Handle_BRep_PolygonOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PolygonOnSurface >":
    return _BRep.Handle_BRep_PolygonOnSurface_DownCast(t)
Handle_BRep_PolygonOnSurface_DownCast = _BRep.Handle_BRep_PolygonOnSurface_DownCast

def Handle_BRep_PolygonOnSurface_IsNull(t: 'opencascade::handle< BRep_PolygonOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PolygonOnSurface_IsNull(t)
Handle_BRep_PolygonOnSurface_IsNull = _BRep.Handle_BRep_PolygonOnSurface_IsNull

def Handle_BRep_PolygonOnTriangulation_Create() -> "opencascade::handle< BRep_PolygonOnTriangulation >":
    return _BRep.Handle_BRep_PolygonOnTriangulation_Create()
Handle_BRep_PolygonOnTriangulation_Create = _BRep.Handle_BRep_PolygonOnTriangulation_Create

def Handle_BRep_PolygonOnTriangulation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PolygonOnTriangulation >":
    return _BRep.Handle_BRep_PolygonOnTriangulation_DownCast(t)
Handle_BRep_PolygonOnTriangulation_DownCast = _BRep.Handle_BRep_PolygonOnTriangulation_DownCast

def Handle_BRep_PolygonOnTriangulation_IsNull(t: 'opencascade::handle< BRep_PolygonOnTriangulation > const &') -> "bool":
    return _BRep.Handle_BRep_PolygonOnTriangulation_IsNull(t)
Handle_BRep_PolygonOnTriangulation_IsNull = _BRep.Handle_BRep_PolygonOnTriangulation_IsNull

def Handle_BRep_Curve3D_Create() -> "opencascade::handle< BRep_Curve3D >":
    return _BRep.Handle_BRep_Curve3D_Create()
Handle_BRep_Curve3D_Create = _BRep.Handle_BRep_Curve3D_Create

def Handle_BRep_Curve3D_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_Curve3D >":
    return _BRep.Handle_BRep_Curve3D_DownCast(t)
Handle_BRep_Curve3D_DownCast = _BRep.Handle_BRep_Curve3D_DownCast

def Handle_BRep_Curve3D_IsNull(t: 'opencascade::handle< BRep_Curve3D > const &') -> "bool":
    return _BRep.Handle_BRep_Curve3D_IsNull(t)
Handle_BRep_Curve3D_IsNull = _BRep.Handle_BRep_Curve3D_IsNull

def Handle_BRep_CurveOnSurface_Create() -> "opencascade::handle< BRep_CurveOnSurface >":
    return _BRep.Handle_BRep_CurveOnSurface_Create()
Handle_BRep_CurveOnSurface_Create = _BRep.Handle_BRep_CurveOnSurface_Create

def Handle_BRep_CurveOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_CurveOnSurface >":
    return _BRep.Handle_BRep_CurveOnSurface_DownCast(t)
Handle_BRep_CurveOnSurface_DownCast = _BRep.Handle_BRep_CurveOnSurface_DownCast

def Handle_BRep_CurveOnSurface_IsNull(t: 'opencascade::handle< BRep_CurveOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_CurveOnSurface_IsNull(t)
Handle_BRep_CurveOnSurface_IsNull = _BRep.Handle_BRep_CurveOnSurface_IsNull

def Handle_BRep_PointOnCurveOnSurface_Create() -> "opencascade::handle< BRep_PointOnCurveOnSurface >":
    return _BRep.Handle_BRep_PointOnCurveOnSurface_Create()
Handle_BRep_PointOnCurveOnSurface_Create = _BRep.Handle_BRep_PointOnCurveOnSurface_Create

def Handle_BRep_PointOnCurveOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointOnCurveOnSurface >":
    return _BRep.Handle_BRep_PointOnCurveOnSurface_DownCast(t)
Handle_BRep_PointOnCurveOnSurface_DownCast = _BRep.Handle_BRep_PointOnCurveOnSurface_DownCast

def Handle_BRep_PointOnCurveOnSurface_IsNull(t: 'opencascade::handle< BRep_PointOnCurveOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PointOnCurveOnSurface_IsNull(t)
Handle_BRep_PointOnCurveOnSurface_IsNull = _BRep.Handle_BRep_PointOnCurveOnSurface_IsNull

def Handle_BRep_PointOnSurface_Create() -> "opencascade::handle< BRep_PointOnSurface >":
    return _BRep.Handle_BRep_PointOnSurface_Create()
Handle_BRep_PointOnSurface_Create = _BRep.Handle_BRep_PointOnSurface_Create

def Handle_BRep_PointOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PointOnSurface >":
    return _BRep.Handle_BRep_PointOnSurface_DownCast(t)
Handle_BRep_PointOnSurface_DownCast = _BRep.Handle_BRep_PointOnSurface_DownCast

def Handle_BRep_PointOnSurface_IsNull(t: 'opencascade::handle< BRep_PointOnSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PointOnSurface_IsNull(t)
Handle_BRep_PointOnSurface_IsNull = _BRep.Handle_BRep_PointOnSurface_IsNull

def Handle_BRep_PolygonOnClosedSurface_Create() -> "opencascade::handle< BRep_PolygonOnClosedSurface >":
    return _BRep.Handle_BRep_PolygonOnClosedSurface_Create()
Handle_BRep_PolygonOnClosedSurface_Create = _BRep.Handle_BRep_PolygonOnClosedSurface_Create

def Handle_BRep_PolygonOnClosedSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PolygonOnClosedSurface >":
    return _BRep.Handle_BRep_PolygonOnClosedSurface_DownCast(t)
Handle_BRep_PolygonOnClosedSurface_DownCast = _BRep.Handle_BRep_PolygonOnClosedSurface_DownCast

def Handle_BRep_PolygonOnClosedSurface_IsNull(t: 'opencascade::handle< BRep_PolygonOnClosedSurface > const &') -> "bool":
    return _BRep.Handle_BRep_PolygonOnClosedSurface_IsNull(t)
Handle_BRep_PolygonOnClosedSurface_IsNull = _BRep.Handle_BRep_PolygonOnClosedSurface_IsNull

def Handle_BRep_PolygonOnClosedTriangulation_Create() -> "opencascade::handle< BRep_PolygonOnClosedTriangulation >":
    return _BRep.Handle_BRep_PolygonOnClosedTriangulation_Create()
Handle_BRep_PolygonOnClosedTriangulation_Create = _BRep.Handle_BRep_PolygonOnClosedTriangulation_Create

def Handle_BRep_PolygonOnClosedTriangulation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_PolygonOnClosedTriangulation >":
    return _BRep.Handle_BRep_PolygonOnClosedTriangulation_DownCast(t)
Handle_BRep_PolygonOnClosedTriangulation_DownCast = _BRep.Handle_BRep_PolygonOnClosedTriangulation_DownCast

def Handle_BRep_PolygonOnClosedTriangulation_IsNull(t: 'opencascade::handle< BRep_PolygonOnClosedTriangulation > const &') -> "bool":
    return _BRep.Handle_BRep_PolygonOnClosedTriangulation_IsNull(t)
Handle_BRep_PolygonOnClosedTriangulation_IsNull = _BRep.Handle_BRep_PolygonOnClosedTriangulation_IsNull

def Handle_BRep_CurveOnClosedSurface_Create() -> "opencascade::handle< BRep_CurveOnClosedSurface >":
    return _BRep.Handle_BRep_CurveOnClosedSurface_Create()
Handle_BRep_CurveOnClosedSurface_Create = _BRep.Handle_BRep_CurveOnClosedSurface_Create

def Handle_BRep_CurveOnClosedSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BRep_CurveOnClosedSurface >":
    return _BRep.Handle_BRep_CurveOnClosedSurface_DownCast(t)
Handle_BRep_CurveOnClosedSurface_DownCast = _BRep.Handle_BRep_CurveOnClosedSurface_DownCast

def Handle_BRep_CurveOnClosedSurface_IsNull(t: 'opencascade::handle< BRep_CurveOnClosedSurface > const &') -> "bool":
    return _BRep.Handle_BRep_CurveOnClosedSurface_IsNull(t)
Handle_BRep_CurveOnClosedSurface_IsNull = _BRep.Handle_BRep_CurveOnClosedSurface_IsNull
class BRep_ListIteratorOfListOfCurveRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_ListIteratorOfListOfCurveRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_ListIteratorOfListOfCurveRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BRep.new_BRep_ListIteratorOfListOfCurveRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _BRep.BRep_ListIteratorOfListOfCurveRepresentation_More(self)

    def Next(self) -> "void":
        return _BRep.BRep_ListIteratorOfListOfCurveRepresentation_Next(self)

    def Value(self) -> "opencascade::handle< BRep_CurveRepresentation > const &":
        return _BRep.BRep_ListIteratorOfListOfCurveRepresentation_Value(self)

    def ChangeValue(self) -> "opencascade::handle< BRep_CurveRepresentation > &":
        return _BRep.BRep_ListIteratorOfListOfCurveRepresentation_ChangeValue(self)
    __swig_destroy__ = _BRep.delete_BRep_ListIteratorOfListOfCurveRepresentation
    __del__ = lambda self: None
BRep_ListIteratorOfListOfCurveRepresentation_swigregister = _BRep.BRep_ListIteratorOfListOfCurveRepresentation_swigregister
BRep_ListIteratorOfListOfCurveRepresentation_swigregister(BRep_ListIteratorOfListOfCurveRepresentation)

class BRep_ListIteratorOfListOfPointRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_ListIteratorOfListOfPointRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_ListIteratorOfListOfPointRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BRep.new_BRep_ListIteratorOfListOfPointRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _BRep.BRep_ListIteratorOfListOfPointRepresentation_More(self)

    def Next(self) -> "void":
        return _BRep.BRep_ListIteratorOfListOfPointRepresentation_Next(self)

    def Value(self) -> "opencascade::handle< BRep_PointRepresentation > const &":
        return _BRep.BRep_ListIteratorOfListOfPointRepresentation_Value(self)

    def ChangeValue(self) -> "opencascade::handle< BRep_PointRepresentation > &":
        return _BRep.BRep_ListIteratorOfListOfPointRepresentation_ChangeValue(self)
    __swig_destroy__ = _BRep.delete_BRep_ListIteratorOfListOfPointRepresentation
    __del__ = lambda self: None
BRep_ListIteratorOfListOfPointRepresentation_swigregister = _BRep.BRep_ListIteratorOfListOfPointRepresentation_swigregister
BRep_ListIteratorOfListOfPointRepresentation_swigregister(BRep_ListIteratorOfListOfPointRepresentation)

class BRep_ListOfCurveRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_ListOfCurveRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_ListOfCurveRepresentation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< BRep_CurveRepresentation > >::iterator":
        return _BRep.BRep_ListOfCurveRepresentation_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< BRep_CurveRepresentation > >::iterator":
        return _BRep.BRep_ListOfCurveRepresentation_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< BRep_CurveRepresentation > >::const_iterator":
        return _BRep.BRep_ListOfCurveRepresentation_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< BRep_CurveRepresentation > >::const_iterator":
        return _BRep.BRep_ListOfCurveRepresentation_cend(self)

    def __init__(self, *args):
        this = _BRep.new_BRep_ListOfCurveRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _BRep.BRep_ListOfCurveRepresentation_Size(self)

    def Assign(self, theOther: 'BRep_ListOfCurveRepresentation') -> "NCollection_List< opencascade::handle< BRep_CurveRepresentation > > &":
        return _BRep.BRep_ListOfCurveRepresentation_Assign(self, theOther)

    def Set(self, theOther: 'BRep_ListOfCurveRepresentation') -> "NCollection_List< opencascade::handle< BRep_CurveRepresentation > > &":
        return _BRep.BRep_ListOfCurveRepresentation_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _BRep.BRep_ListOfCurveRepresentation_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< BRep_CurveRepresentation > const &":
        return _BRep.BRep_ListOfCurveRepresentation_First(self)

    def Last(self) -> "opencascade::handle< BRep_CurveRepresentation > const &":
        return _BRep.BRep_ListOfCurveRepresentation_Last(self)

    def Append(self, *args) -> "void":
        return _BRep.BRep_ListOfCurveRepresentation_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _BRep.BRep_ListOfCurveRepresentation_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _BRep.BRep_ListOfCurveRepresentation_RemoveFirst(self)

    def Remove(self, theIter: 'BRep_ListIteratorOfListOfCurveRepresentation') -> "void":
        return _BRep.BRep_ListOfCurveRepresentation_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _BRep.BRep_ListOfCurveRepresentation_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _BRep.BRep_ListOfCurveRepresentation_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _BRep.BRep_ListOfCurveRepresentation_Reverse(self)
    __swig_destroy__ = _BRep.delete_BRep_ListOfCurveRepresentation
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

BRep_ListOfCurveRepresentation_swigregister = _BRep.BRep_ListOfCurveRepresentation_swigregister
BRep_ListOfCurveRepresentation_swigregister(BRep_ListOfCurveRepresentation)

class BRep_ListOfPointRepresentation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_ListOfPointRepresentation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_ListOfPointRepresentation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< opencascade::handle< BRep_PointRepresentation > >::iterator":
        return _BRep.BRep_ListOfPointRepresentation_begin(self)

    def end(self) -> "NCollection_List< opencascade::handle< BRep_PointRepresentation > >::iterator":
        return _BRep.BRep_ListOfPointRepresentation_end(self)

    def cbegin(self) -> "NCollection_List< opencascade::handle< BRep_PointRepresentation > >::const_iterator":
        return _BRep.BRep_ListOfPointRepresentation_cbegin(self)

    def cend(self) -> "NCollection_List< opencascade::handle< BRep_PointRepresentation > >::const_iterator":
        return _BRep.BRep_ListOfPointRepresentation_cend(self)

    def __init__(self, *args):
        this = _BRep.new_BRep_ListOfPointRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _BRep.BRep_ListOfPointRepresentation_Size(self)

    def Assign(self, theOther: 'BRep_ListOfPointRepresentation') -> "NCollection_List< opencascade::handle< BRep_PointRepresentation > > &":
        return _BRep.BRep_ListOfPointRepresentation_Assign(self, theOther)

    def Set(self, theOther: 'BRep_ListOfPointRepresentation') -> "NCollection_List< opencascade::handle< BRep_PointRepresentation > > &":
        return _BRep.BRep_ListOfPointRepresentation_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _BRep.BRep_ListOfPointRepresentation_Clear(self, theAllocator)

    def First(self) -> "opencascade::handle< BRep_PointRepresentation > const &":
        return _BRep.BRep_ListOfPointRepresentation_First(self)

    def Last(self) -> "opencascade::handle< BRep_PointRepresentation > const &":
        return _BRep.BRep_ListOfPointRepresentation_Last(self)

    def Append(self, *args) -> "void":
        return _BRep.BRep_ListOfPointRepresentation_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _BRep.BRep_ListOfPointRepresentation_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _BRep.BRep_ListOfPointRepresentation_RemoveFirst(self)

    def Remove(self, theIter: 'BRep_ListIteratorOfListOfPointRepresentation') -> "void":
        return _BRep.BRep_ListOfPointRepresentation_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _BRep.BRep_ListOfPointRepresentation_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _BRep.BRep_ListOfPointRepresentation_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _BRep.BRep_ListOfPointRepresentation_Reverse(self)
    __swig_destroy__ = _BRep.delete_BRep_ListOfPointRepresentation
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

BRep_ListOfPointRepresentation_swigregister = _BRep.BRep_ListOfPointRepresentation_swigregister
BRep_ListOfPointRepresentation_swigregister(BRep_ListOfPointRepresentation)

class BRep_Builder(OCC.Core.TopoDS.TopoDS_Builder):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TopoDS.TopoDS_Builder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_Builder, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TopoDS.TopoDS_Builder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_Builder, name)
    __repr__ = _swig_repr

    def Continuity(self, *args) -> "void":
        """
        Sets the geometric continuity on the edge.

        Parameters
        ----------
        E: TopoDS_Edge
        F1: TopoDS_Face
        F2: TopoDS_Face
        C: GeomAbs_Shape

        Returns
        -------
        None

        Sets the geometric continuity on the edge.

        Parameters
        ----------
        E: TopoDS_Edge
        S1: Geom_Surface
        S2: Geom_Surface
        L1: TopLoc_Location
        L2: TopLoc_Location
        C: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_Continuity(self, *args)


    def Degenerated(self, *args) -> "void":
        """
        Sets the degenerated flag for the edge <e>.

        Parameters
        ----------
        E: TopoDS_Edge
        D: bool

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_Degenerated(self, *args)


    def MakeEdge(self, *args) -> "void":
        """
        Makes an undefined edge (no geometry).

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        None

        Makes an edge with a curve.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom_Curve
        Tol: float

        Returns
        -------
        None

        Makes an edge with a curve and a location.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom_Curve
        L: TopLoc_Location
        Tol: float

        Returns
        -------
        None

        Makes an edge with a polygon 3d.

        Parameters
        ----------
        E: TopoDS_Edge
        P: Poly_Polygon3D

        Returns
        -------
        None

        Makes an edge polygon on triangulation.

        Parameters
        ----------
        E: TopoDS_Edge
        N: Poly_PolygonOnTriangulation
        T: Poly_Triangulation

        Returns
        -------
        None

        Makes an edge polygon on triangulation.

        Parameters
        ----------
        E: TopoDS_Edge
        N: Poly_PolygonOnTriangulation
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_MakeEdge(self, *args)


    def MakeFace(self, *args) -> "void":
        """
        Makes an undefined face.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        Makes a face with a surface.

        Parameters
        ----------
        F: TopoDS_Face
        S: Geom_Surface
        Tol: float

        Returns
        -------
        None

        Makes a face with a surface and a location.

        Parameters
        ----------
        F: TopoDS_Face
        S: Geom_Surface
        L: TopLoc_Location
        Tol: float

        Returns
        -------
        None

        Makes a face with a triangulation. the triangulation is in the same reference system than the tface.

        Parameters
        ----------
        F: TopoDS_Face
        T: Poly_Triangulation

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_MakeFace(self, *args)


    def MakeVertex(self, *args) -> "void":
        """
        Makes an udefined vertex without geometry.

        Parameters
        ----------
        V: TopoDS_Vertex

        Returns
        -------
        None

        Makes a vertex from a 3d point.

        Parameters
        ----------
        V: TopoDS_Vertex
        P: gp_Pnt
        Tol: float

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_MakeVertex(self, *args)


    def NaturalRestriction(self, *args) -> "void":
        """
        Sets the naturalrestriction flag of the face.

        Parameters
        ----------
        F: TopoDS_Face
        N: bool

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_NaturalRestriction(self, *args)


    def Range(self, *args) -> "void":
        """
        Sets the range of the 3d curve if only3d=true, otherwise sets the range to all the representations.

        Parameters
        ----------
        E: TopoDS_Edge
        First: float
        Last: float
        Only3d: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        Sets the range of the edge on the pcurve on the surface.

        Parameters
        ----------
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location
        First: float
        Last: float

        Returns
        -------
        None

        Sets the range of the edge on the pcurve on the face.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face
        First: float
        Last: float

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_Range(self, *args)


    def SameParameter(self, *args) -> "void":
        """
        Sets the same parameter flag for the edge <e>.

        Parameters
        ----------
        E: TopoDS_Edge
        S: bool

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_SameParameter(self, *args)


    def SameRange(self, *args) -> "void":
        """
        Sets the same range flag for the edge <e>.

        Parameters
        ----------
        E: TopoDS_Edge
        S: bool

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_SameRange(self, *args)


    def Transfert(self, *args) -> "void":
        """
        Add to <eout> the geometric representations of <ein>.

        Parameters
        ----------
        Ein: TopoDS_Edge
        Eout: TopoDS_Edge

        Returns
        -------
        None

        Transfert the parameters of vin on ein as the parameter of vout on eout.

        Parameters
        ----------
        Ein: TopoDS_Edge
        Eout: TopoDS_Edge
        Vin: TopoDS_Vertex
        Vout: TopoDS_Vertex

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_Transfert(self, *args)


    def UpdateEdge(self, *args) -> "void":
        """
        Sets a 3d curve for the edge. if <c> is a null handle, remove any existing 3d curve.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom_Curve
        Tol: float

        Returns
        -------
        None

        Sets a 3d curve for the edge. if <c> is a null handle, remove any existing 3d curve.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom_Curve
        L: TopLoc_Location
        Tol: float

        Returns
        -------
        None

        Sets a pcurve for the edge on the face. if <c> is a null handle, remove any existing pcurve.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom2d_Curve
        F: TopoDS_Face
        Tol: float

        Returns
        -------
        None

        Sets pcurves for the edge on the closed face. if <c1> or <c2> is a null handle, remove any existing pcurve.

        Parameters
        ----------
        E: TopoDS_Edge
        C1: Geom2d_Curve
        C2: Geom2d_Curve
        F: TopoDS_Face
        Tol: float

        Returns
        -------
        None

        Sets a pcurve for the edge on the face. if <c> is a null handle, remove any existing pcurve.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location
        Tol: float

        Returns
        -------
        None

        Sets a pcurve for the edge on the face. if <c> is a null handle, remove any existing pcurve. sets uv bounds for curve repsentation.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location
        Tol: float
        Pf: gp_Pnt2d
        Pl: gp_Pnt2d

        Returns
        -------
        None

        Sets pcurves for the edge on the closed surface. <c1> or <c2> is a null handle, remove any existing pcurve.

        Parameters
        ----------
        E: TopoDS_Edge
        C1: Geom2d_Curve
        C2: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location
        Tol: float

        Returns
        -------
        None

        Sets pcurves for the edge on the closed surface. <c1> or <c2> is a null handle, remove any existing pcurve. sets uv bounds for curve repsentation.

        Parameters
        ----------
        E: TopoDS_Edge
        C1: Geom2d_Curve
        C2: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location
        Tol: float
        Pf: gp_Pnt2d
        Pl: gp_Pnt2d

        Returns
        -------
        None

        Changes an edge 3d polygon. a null polygon removes the 3d polygon.

        Parameters
        ----------
        E: TopoDS_Edge
        P: Poly_Polygon3D

        Returns
        -------
        None

        Changes an edge 3d polygon. a null polygon removes the 3d polygon.

        Parameters
        ----------
        E: TopoDS_Edge
        P: Poly_Polygon3D
        L: TopLoc_Location

        Returns
        -------
        None

        Changes an edge polygon on triangulation.

        Parameters
        ----------
        E: TopoDS_Edge
        N: Poly_PolygonOnTriangulation
        T: Poly_Triangulation

        Returns
        -------
        None

        Changes an edge polygon on triangulation.

        Parameters
        ----------
        E: TopoDS_Edge
        N: Poly_PolygonOnTriangulation
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        None

        Changes an edge polygon on triangulation.

        Parameters
        ----------
        E: TopoDS_Edge
        N1: Poly_PolygonOnTriangulation
        N2: Poly_PolygonOnTriangulation
        T: Poly_Triangulation

        Returns
        -------
        None

        Changes an edge polygon on triangulation.

        Parameters
        ----------
        E: TopoDS_Edge
        N1: Poly_PolygonOnTriangulation
        N2: Poly_PolygonOnTriangulation
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        None

        Changes edge polygon on a face.

        Parameters
        ----------
        E: TopoDS_Edge
        P: Poly_Polygon2D
        S: TopoDS_Face

        Returns
        -------
        None

        Changes edge polygon on a face.

        Parameters
        ----------
        E: TopoDS_Edge
        P: Poly_Polygon2D
        S: Geom_Surface
        T: TopLoc_Location

        Returns
        -------
        None

        Changes edge polygons on a face. //! a null polygon removes the 2d polygon.

        Parameters
        ----------
        E: TopoDS_Edge
        P1: Poly_Polygon2D
        P2: Poly_Polygon2D
        S: TopoDS_Face

        Returns
        -------
        None

        Changes edge polygons on a face. //! a null polygon removes the 2d polygon.

        Parameters
        ----------
        E: TopoDS_Edge
        P1: Poly_Polygon2D
        P2: Poly_Polygon2D
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        None

        Updates the edge tolerance.

        Parameters
        ----------
        E: TopoDS_Edge
        Tol: float

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_UpdateEdge(self, *args)


    def UpdateFace(self, *args) -> "void":
        """
        Updates the face f using the tolerance value tol, surface s and location location.

        Parameters
        ----------
        F: TopoDS_Face
        S: Geom_Surface
        L: TopLoc_Location
        Tol: float

        Returns
        -------
        None

        Changes a face triangulation. //! a null triangulation removes the triangulation.

        Parameters
        ----------
        F: TopoDS_Face
        T: Poly_Triangulation

        Returns
        -------
        None

        Updates the face tolerance.

        Parameters
        ----------
        F: TopoDS_Face
        Tol: float

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_UpdateFace(self, *args)


    def UpdateVertex(self, *args) -> "void":
        """
        Sets a 3d point on the vertex.

        Parameters
        ----------
        V: TopoDS_Vertex
        P: gp_Pnt
        Tol: float

        Returns
        -------
        None

        Sets the parameter for the vertex on the edge curves.

        Parameters
        ----------
        V: TopoDS_Vertex
        P: float
        E: TopoDS_Edge
        Tol: float

        Returns
        -------
        None

        Sets the parameter for the vertex on the edge pcurve on the face.

        Parameters
        ----------
        V: TopoDS_Vertex
        P: float
        E: TopoDS_Edge
        F: TopoDS_Face
        Tol: float

        Returns
        -------
        None

        Sets the parameter for the vertex on the edge pcurve on the surface.

        Parameters
        ----------
        V: TopoDS_Vertex
        P: float
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location
        Tol: float

        Returns
        -------
        None

        Sets the parameters for the vertex on the face.

        Parameters
        ----------
        Ve: TopoDS_Vertex
        U: float
        V: float
        F: TopoDS_Face
        Tol: float

        Returns
        -------
        None

        Updates the vertex tolerance.

        Parameters
        ----------
        V: TopoDS_Vertex
        Tol: float

        Returns
        -------
        None

        """
        return _BRep.BRep_Builder_UpdateVertex(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _BRep.new_BRep_Builder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRep.delete_BRep_Builder
    __del__ = lambda self: None
BRep_Builder_swigregister = _BRep.BRep_Builder_swigregister
BRep_Builder_swigregister(BRep_Builder)

class BRep_CurveRepresentation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_CurveRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_CurveRepresentation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Continuity(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        No available documentation.

        Parameters
        ----------
        C: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_Continuity(self, *args)


    def Copy(self, *args) -> "opencascade::handle< BRep_CurveRepresentation >":
        """
        Return a copy of this representation.

        Returns
        -------
        opencascade::handle<BRep_CurveRepresentation>

        """
        return _BRep.BRep_CurveRepresentation_Copy(self, *args)


    def Curve3D(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_Curve3D(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_CurveRepresentation self, int depth=-1) -> std::string
        DumpJsonToString(BRep_CurveRepresentation self) -> std::string
        """
        return _BRep.BRep_CurveRepresentation_DumpJsonToString(self, depth)


    def IsCurve3D(self, *args) -> "Standard_Boolean":
        """
        A 3d curve representation.

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsCurve3D(self, *args)


    def IsCurveOnClosedSurface(self, *args) -> "Standard_Boolean":
        """
        A curve with two parametric curves on the same surface.

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsCurveOnClosedSurface(self, *args)


    def IsCurveOnSurface(self, *args) -> "Standard_Boolean":
        """
        A curve in the parametric space of a surface.

        Returns
        -------
        bool

        Is it a curve in the parametric space of <s> with location <l>.

        Parameters
        ----------
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsCurveOnSurface(self, *args)


    def IsPolygon3D(self, *args) -> "Standard_Boolean":
        """
        A 3d polygon representation.

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygon3D(self, *args)


    def IsPolygonOnClosedSurface(self, *args) -> "Standard_Boolean":
        """
        Two 2d polygon representations in the parametric space of a surface.

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnClosedSurface(self, *args)


    def IsPolygonOnClosedTriangulation(self, *args) -> "Standard_Boolean":
        """
        A representation by two arrays of nodes on a triangulation.

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnClosedTriangulation(self, *args)


    def IsPolygonOnSurface(self, *args) -> "Standard_Boolean":
        """
        A polygon in the parametric space of a surface.

        Returns
        -------
        bool

        Is it a polygon in the parametric space of <s> with location <l>.

        Parameters
        ----------
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnSurface(self, *args)


    def IsPolygonOnTriangulation(self, *args) -> "Standard_Boolean":
        """
        A representation by an array of nodes on a triangulation.

        Returns
        -------
        bool

        Is it a polygon in the definition of <t> with location <l>.

        Parameters
        ----------
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsPolygonOnTriangulation(self, *args)


    def IsRegularity(self, *args) -> "Standard_Boolean":
        """
        A continuity between two surfaces.

        Returns
        -------
        bool

        Is it a regularity between <s1> and <s2> with location <l1> and <l2>.

        Parameters
        ----------
        S1: Geom_Surface
        S2: Geom_Surface
        L1: TopLoc_Location
        L2: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveRepresentation_IsRegularity(self, *args)


    def Location(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        TopLoc_Location

        No available documentation.

        Parameters
        ----------
        L: TopLoc_Location

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_Location(self, *args)


    def Location2(self, *args) -> "TopLoc_Location const &":
        """
        No available documentation.

        Returns
        -------
        TopLoc_Location

        """
        return _BRep.BRep_CurveRepresentation_Location2(self, *args)


    def PCurve(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_PCurve(self, *args)


    def PCurve2(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_PCurve2(self, *args)


    def Polygon(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_Polygon2D>

        No available documentation.

        Parameters
        ----------
        P: Poly_Polygon2D

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_Polygon(self, *args)


    def Polygon2(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_Polygon2D>

        No available documentation.

        Parameters
        ----------
        P: Poly_Polygon2D

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_Polygon2(self, *args)


    def Polygon3D(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_Polygon3D>

        No available documentation.

        Parameters
        ----------
        P: Poly_Polygon3D

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_Polygon3D(self, *args)


    def PolygonOnTriangulation(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_PolygonOnTriangulation>

        No available documentation.

        Parameters
        ----------
        P: Poly_PolygonOnTriangulation

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_PolygonOnTriangulation(self, *args)


    def PolygonOnTriangulation2(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_PolygonOnTriangulation>

        No available documentation.

        Parameters
        ----------
        P2: Poly_PolygonOnTriangulation

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveRepresentation_PolygonOnTriangulation2(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _BRep.BRep_CurveRepresentation_Surface(self, *args)


    def Surface2(self, *args) -> "opencascade::handle< Geom_Surface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _BRep.BRep_CurveRepresentation_Surface2(self, *args)


    def Triangulation(self, *args) -> "opencascade::handle< Poly_Triangulation > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_Triangulation>

        """
        return _BRep.BRep_CurveRepresentation_Triangulation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_CurveRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_CurveRepresentation
    __del__ = lambda self: None
BRep_CurveRepresentation_swigregister = _BRep.BRep_CurveRepresentation_swigregister
BRep_CurveRepresentation_swigregister(BRep_CurveRepresentation)

class BRep_PointRepresentation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PointRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PointRepresentation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Curve(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_PointRepresentation_Curve(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_PointRepresentation self, int depth=-1) -> std::string
        DumpJsonToString(BRep_PointRepresentation self) -> std::string
        """
        return _BRep.BRep_PointRepresentation_DumpJsonToString(self, depth)


    def IsPointOnCurve(self, *args) -> "Standard_Boolean":
        """
        A point on a 3d curve.

        Returns
        -------
        bool

        A point on the curve <c>.

        Parameters
        ----------
        C: Geom_Curve
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_PointRepresentation_IsPointOnCurve(self, *args)


    def IsPointOnCurveOnSurface(self, *args) -> "Standard_Boolean":
        """
        A point on a 2d curve on a surface.

        Returns
        -------
        bool

        A point on the 2d curve <pc> on the surface <s>.

        Parameters
        ----------
        PC: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_PointRepresentation_IsPointOnCurveOnSurface(self, *args)


    def IsPointOnSurface(self, *args) -> "Standard_Boolean":
        """
        A point on a surface.

        Returns
        -------
        bool

        A point on the surface <s>.

        Parameters
        ----------
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_PointRepresentation_IsPointOnSurface(self, *args)


    def Location(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        TopLoc_Location

        No available documentation.

        Parameters
        ----------
        L: TopLoc_Location

        Returns
        -------
        None

        """
        return _BRep.BRep_PointRepresentation_Location(self, *args)


    def PCurve(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_PointRepresentation_PCurve(self, *args)


    def Parameter(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        P: float

        Returns
        -------
        None

        """
        return _BRep.BRep_PointRepresentation_Parameter(self, *args)


    def Parameter2(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        P: float

        Returns
        -------
        None

        """
        return _BRep.BRep_PointRepresentation_Parameter2(self, *args)


    def Surface(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Surface>

        No available documentation.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        None

        """
        return _BRep.BRep_PointRepresentation_Surface(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointRepresentation
    __del__ = lambda self: None
BRep_PointRepresentation_swigregister = _BRep.BRep_PointRepresentation_swigregister
BRep_PointRepresentation_swigregister(BRep_PointRepresentation)

class BRep_TEdge(OCC.Core.TopoDS.TopoDS_TEdge):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TopoDS.TopoDS_TEdge]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_TEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TopoDS.TopoDS_TEdge]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_TEdge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tedge.

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_TEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeCurves(self, *args) -> "BRep_ListOfCurveRepresentation &":
        """
        No available documentation.

        Returns
        -------
        BRep_ListOfCurveRepresentation

        """
        return _BRep.BRep_TEdge_ChangeCurves(self, *args)


    def Curves(self, *args) -> "BRep_ListOfCurveRepresentation const &":
        """
        No available documentation.

        Returns
        -------
        BRep_ListOfCurveRepresentation

        """
        return _BRep.BRep_TEdge_Curves(self, *args)


    def Degenerated(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        S: bool

        Returns
        -------
        None

        """
        return _BRep.BRep_TEdge_Degenerated(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_TEdge self, int depth=-1) -> std::string
        DumpJsonToString(BRep_TEdge self) -> std::string
        """
        return _BRep.BRep_TEdge_DumpJsonToString(self, depth)


    def SameParameter(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        S: bool

        Returns
        -------
        None

        """
        return _BRep.BRep_TEdge_SameParameter(self, *args)


    def SameRange(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        S: bool

        Returns
        -------
        None

        """
        return _BRep.BRep_TEdge_SameRange(self, *args)


    def Tolerance(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        T: float

        Returns
        -------
        None

        """
        return _BRep.BRep_TEdge_Tolerance(self, *args)


    def UpdateTolerance(self, *args) -> "void":
        """
        Sets the tolerance to the max of <t> and the current tolerance.

        Parameters
        ----------
        T: float

        Returns
        -------
        None

        """
        return _BRep.BRep_TEdge_UpdateTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_TEdge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_TEdge
    __del__ = lambda self: None
BRep_TEdge_swigregister = _BRep.BRep_TEdge_swigregister
BRep_TEdge_swigregister(BRep_TEdge)

class BRep_TFace(OCC.Core.TopoDS.TopoDS_TFace):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TopoDS.TopoDS_TFace]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_TFace, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TopoDS.TopoDS_TFace]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_TFace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tface.

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_TFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_TFace self, int depth=-1) -> std::string
        DumpJsonToString(BRep_TFace self) -> std::string
        """
        return _BRep.BRep_TFace_DumpJsonToString(self, depth)


    def Location(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        TopLoc_Location

        No available documentation.

        Parameters
        ----------
        L: TopLoc_Location

        Returns
        -------
        None

        """
        return _BRep.BRep_TFace_Location(self, *args)


    def NaturalRestriction(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        N: bool

        Returns
        -------
        None

        """
        return _BRep.BRep_TFace_NaturalRestriction(self, *args)


    def Surface(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Surface>

        No available documentation.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        None

        """
        return _BRep.BRep_TFace_Surface(self, *args)


    def Tolerance(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        T: float

        Returns
        -------
        None

        """
        return _BRep.BRep_TFace_Tolerance(self, *args)


    def Triangulation(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_Triangulation>

        No available documentation.

        Parameters
        ----------
        T: Poly_Triangulation

        Returns
        -------
        None

        """
        return _BRep.BRep_TFace_Triangulation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_TFace_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_TFace
    __del__ = lambda self: None
BRep_TFace_swigregister = _BRep.BRep_TFace_swigregister
BRep_TFace_swigregister(BRep_TFace)

class BRep_TVertex(OCC.Core.TopoDS.TopoDS_TVertex):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TopoDS.TopoDS_TVertex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_TVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TopoDS.TopoDS_TVertex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_TVertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_TVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangePoints(self, *args) -> "BRep_ListOfPointRepresentation &":
        """
        No available documentation.

        Returns
        -------
        BRep_ListOfPointRepresentation

        """
        return _BRep.BRep_TVertex_ChangePoints(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_TVertex self, int depth=-1) -> std::string
        DumpJsonToString(BRep_TVertex self) -> std::string
        """
        return _BRep.BRep_TVertex_DumpJsonToString(self, depth)


    def Pnt(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _BRep.BRep_TVertex_Pnt(self, *args)


    def Points(self, *args) -> "BRep_ListOfPointRepresentation const &":
        """
        No available documentation.

        Returns
        -------
        BRep_ListOfPointRepresentation

        """
        return _BRep.BRep_TVertex_Points(self, *args)


    def Tolerance(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        T: float

        Returns
        -------
        None

        """
        return _BRep.BRep_TVertex_Tolerance(self, *args)


    def UpdateTolerance(self, *args) -> "void":
        """
        Sets the tolerance to the max of <t> and the current tolerance.

        Parameters
        ----------
        T: float

        Returns
        -------
        None

        """
        return _BRep.BRep_TVertex_UpdateTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_TVertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_TVertex
    __del__ = lambda self: None
BRep_TVertex_swigregister = _BRep.BRep_TVertex_swigregister
BRep_TVertex_swigregister(BRep_TVertex)

class BRep_Tool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_Tool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_Tool, name)
    __repr__ = _swig_repr

    def Continuity(*args) -> "GeomAbs_Shape":
        """
        Returns the continuity.

        Parameters
        ----------
        E: TopoDS_Edge
        F1: TopoDS_Face
        F2: TopoDS_Face

        Returns
        -------
        GeomAbs_Shape

        Returns the continuity.

        Parameters
        ----------
        E: TopoDS_Edge
        S1: Geom_Surface
        S2: Geom_Surface
        L1: TopLoc_Location
        L2: TopLoc_Location

        Returns
        -------
        GeomAbs_Shape

        """
        return _BRep.BRep_Tool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def Curve(*args) -> "Standard_Real &, Standard_Real &":
        """
        Returns the 3d curve of the edge. may be a null handle. returns in <l> the location for the curve. in <first> and <last> the parameter range.

        Parameters
        ----------
        E: TopoDS_Edge
        L: TopLoc_Location

        Returns
        -------
        First: float
        Last: float

        Returns the 3d curve of the edge. may be a null handle. in <first> and <last> the parameter range. it can be a copy if there is a location.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        First: float
        Last: float

        """
        return _BRep.BRep_Tool_Curve(*args)

    Curve = staticmethod(Curve)

    def CurveOnPlane(*args) -> "Standard_Real &, Standard_Real &":
        """
        For the planar surface builds the 2d curve for the edge by projection of the edge on plane. returns a null handle if the surface is not planar or the projection failed.

        Parameters
        ----------
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        First: float
        Last: float

        """
        return _BRep.BRep_Tool_CurveOnPlane(*args)

    CurveOnPlane = staticmethod(CurveOnPlane)

    def CurveOnSurface(*args) -> "Standard_Real &, Standard_Real &":
        """
        Returns the curve associated to the edge in the parametric space of the face. returns a null handle if this curve does not exist. returns in <first> and <last> the parameter range. if the surface is a plane the curve can be not stored but created a new each time. the flag pointed by <theisstored> serves to indicate storage status. it is valued if the pointer is non-null.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face
        theIsStored: bool *,optional
        	default value is NULL

        Returns
        -------
        First: float
        Last: float

        Returns the curve associated to the edge in the parametric space of the surface. returns a null handle if this curve does not exist. returns in <first> and <last> the parameter range. if the surface is a plane the curve can be not stored but created a new each time. the flag pointed by <theisstored> serves to indicate storage status. it is valued if the pointer is non-null.

        Parameters
        ----------
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location
        theIsStored: bool *,optional
        	default value is NULL

        Returns
        -------
        First: float
        Last: float

        Returns in <c>, <s>, <l> a 2d curve, a surface and a location for the edge <e>. <c> and <s> are null if the edge has no curve on surface. returns in <first> and <last> the parameter range.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        First: float
        Last: float

        Returns in <c>, <s>, <l> the 2d curve, the surface and the location for the edge <e> of rank <index>. <c> and <s> are null if the index is out of range. returns in <first> and <last> the parameter range.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location
        Index: int

        Returns
        -------
        First: float
        Last: float

        """
        return _BRep.BRep_Tool_CurveOnSurface(*args)

    CurveOnSurface = staticmethod(CurveOnSurface)

    def Degenerated(*args) -> "Standard_Boolean":
        """
        Returns true if the edge is degenerated.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        bool

        """
        return _BRep.BRep_Tool_Degenerated(*args)

    Degenerated = staticmethod(Degenerated)

    def HasContinuity(*args) -> "Standard_Boolean":
        """
        Returns true if the edge is on the surfaces of the two faces.

        Parameters
        ----------
        E: TopoDS_Edge
        F1: TopoDS_Face
        F2: TopoDS_Face

        Returns
        -------
        bool

        Returns true if the edge is on the surfaces.

        Parameters
        ----------
        E: TopoDS_Edge
        S1: Geom_Surface
        S2: Geom_Surface
        L1: TopLoc_Location
        L2: TopLoc_Location

        Returns
        -------
        bool

        Returns true if the edge has regularity on some two surfaces.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        bool

        """
        return _BRep.BRep_Tool_HasContinuity(*args)

    HasContinuity = staticmethod(HasContinuity)

    def IsClosed(*args) -> "Standard_Boolean":
        """
        If s is shell, returns true if it has no free boundaries (edges). if s is wire, returns true if it has no free ends (vertices). (internal and external sub-shepes are ignored in these checks) if s is edge, returns true if its vertices are the same. for other shape types returns s.closed().

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        bool

        Returns true if <e> has two pcurves in the parametric space of <f>. i.e. <f> is on a closed surface and <e> is on the closing curve.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Returns
        -------
        bool

        Returns true if <e> has two pcurves in the parametric space of <s>. i.e. <s> is a closed surface and <e> is on the closing curve.

        Parameters
        ----------
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        Returns true if <e> has two arrays of indices in the triangulation <t>.

        Parameters
        ----------
        E: TopoDS_Edge
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_Tool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsGeometric(*args) -> "Standard_Boolean":
        """
        Returns true if <f> has a surface, false otherwise.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        bool

        Returns true if <e> is a 3d curve or a curve on surface.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        bool

        """
        return _BRep.BRep_Tool_IsGeometric(*args)

    IsGeometric = staticmethod(IsGeometric)

    def MaxContinuity(*args) -> "GeomAbs_Shape":
        """
        Returns the max continuity of edge between some surfaces or geomabs_c0 if there no such surfaces.

        Parameters
        ----------
        theEdge: TopoDS_Edge

        Returns
        -------
        GeomAbs_Shape

        """
        return _BRep.BRep_Tool_MaxContinuity(*args)

    MaxContinuity = staticmethod(MaxContinuity)

    def MaxTolerance(*args) -> "Standard_Real":
        """
        Returns the maximum tolerance of input shape subshapes.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theSubShape: TopAbs_ShapeEnum

        Returns
        -------
        float

        """
        return _BRep.BRep_Tool_MaxTolerance(*args)

    MaxTolerance = staticmethod(MaxTolerance)

    def NaturalRestriction(*args) -> "Standard_Boolean":
        """
        Returns the naturalrestriction flag of the face.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        bool

        """
        return _BRep.BRep_Tool_NaturalRestriction(*args)

    NaturalRestriction = staticmethod(NaturalRestriction)

    def Parameter(*args) -> "Standard_Real":
        """
        Finds the parameter of <thev> on <thee>. @param thev [in] input vertex @param thee [in] input edge @param theparam [out] calculated parameter on the curve returns true if done.

        Parameters
        ----------
        theV: TopoDS_Vertex
        theE: TopoDS_Edge

        Returns
        -------
        theParam: float

        Returns the parameter of <v> on <e>. throws standard_nosuchobject if no parameter on edge.

        Parameters
        ----------
        V: TopoDS_Vertex
        E: TopoDS_Edge

        Returns
        -------
        float

        Returns the parameters of the vertex on the pcurve of the edge on the face.

        Parameters
        ----------
        V: TopoDS_Vertex
        E: TopoDS_Edge
        F: TopoDS_Face

        Returns
        -------
        float

        Returns the parameters of the vertex on the pcurve of the edge on the surface.

        Parameters
        ----------
        V: TopoDS_Vertex
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        float

        """
        return _BRep.BRep_Tool_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def Parameters(*args) -> "gp_Pnt2d":
        """
        Returns the parameters of the vertex on the face.

        Parameters
        ----------
        V: TopoDS_Vertex
        F: TopoDS_Face

        Returns
        -------
        gp_Pnt2d

        """
        return _BRep.BRep_Tool_Parameters(*args)

    Parameters = staticmethod(Parameters)

    def Pnt(*args) -> "gp_Pnt":
        """
        Returns the 3d point.

        Parameters
        ----------
        V: TopoDS_Vertex

        Returns
        -------
        gp_Pnt

        """
        return _BRep.BRep_Tool_Pnt(*args)

    Pnt = staticmethod(Pnt)

    def Polygon3D(*args) -> "opencascade::handle< Poly_Polygon3D > const &":
        """
        Returns the 3d polygon of the edge. may be a null handle. returns in <l> the location for the polygon.

        Parameters
        ----------
        E: TopoDS_Edge
        L: TopLoc_Location

        Returns
        -------
        opencascade::handle<Poly_Polygon3D>

        """
        return _BRep.BRep_Tool_Polygon3D(*args)

    Polygon3D = staticmethod(Polygon3D)

    def PolygonOnSurface(*args) -> "void":
        """
        Returns the polygon associated to the edge in the parametric space of the face. returns a null handle if this polygon does not exist.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Returns
        -------
        opencascade::handle<Poly_Polygon2D>

        Returns the polygon associated to the edge in the parametric space of the surface. returns a null handle if this polygon does not exist.

        Parameters
        ----------
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        opencascade::handle<Poly_Polygon2D>

        Returns in <c>, <s>, <l> a 2d curve, a surface and a location for the edge <e>. <c> and <s> are null if the edge has no polygon on surface.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Poly_Polygon2D
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        None

        Returns in <c>, <s>, <l> the 2d curve, the surface and the location for the edge <e> of rank <index>. <c> and <s> are null if the index is out of range.

        Parameters
        ----------
        E: TopoDS_Edge
        C: Poly_Polygon2D
        S: Geom_Surface
        L: TopLoc_Location
        Index: int

        Returns
        -------
        None

        """
        return _BRep.BRep_Tool_PolygonOnSurface(*args)

    PolygonOnSurface = staticmethod(PolygonOnSurface)

    def PolygonOnTriangulation(*args) -> "void":
        """
        Returns the polygon associated to the edge in the parametric space of the face. returns a null handle if this polygon does not exist.

        Parameters
        ----------
        E: TopoDS_Edge
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        opencascade::handle<Poly_PolygonOnTriangulation>

        Returns in <p>, <t>, <l> a polygon on triangulation, a triangulation and a location for the edge <e>. <p> and <t> are null if the edge has no polygon on triangulation.

        Parameters
        ----------
        E: TopoDS_Edge
        P: Poly_PolygonOnTriangulation
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        None

        Returns in <p>, <t>, <l> a polygon on triangulation, a triangulation and a location for the edge <e> for the range index. <c> and <s> are null if the edge has no polygon on triangulation.

        Parameters
        ----------
        E: TopoDS_Edge
        P: Poly_PolygonOnTriangulation
        T: Poly_Triangulation
        L: TopLoc_Location
        Index: int

        Returns
        -------
        None

        """
        return _BRep.BRep_Tool_PolygonOnTriangulation(*args)

    PolygonOnTriangulation = staticmethod(PolygonOnTriangulation)

    def Range(*args) -> "Standard_Real &, Standard_Real &":
        """
        Gets the range of the 3d curve.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        First: float
        Last: float

        Gets the range of the edge on the pcurve on the surface.

        Parameters
        ----------
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        First: float
        Last: float

        Gets the range of the edge on the pcurve on the face.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Returns
        -------
        First: float
        Last: float

        """
        return _BRep.BRep_Tool_Range(*args)

    Range = staticmethod(Range)

    def SameParameter(*args) -> "Standard_Boolean":
        """
        Returns the sameparameter flag for the edge.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        bool

        """
        return _BRep.BRep_Tool_SameParameter(*args)

    SameParameter = staticmethod(SameParameter)

    def SameRange(*args) -> "Standard_Boolean":
        """
        Returns the samerange flag for the edge.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        bool

        """
        return _BRep.BRep_Tool_SameRange(*args)

    SameRange = staticmethod(SameRange)

    def SetUVPoints(*args) -> "void":
        """
        Sets the uv locations of the extremities of the edge.

        Parameters
        ----------
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location
        PFirst: gp_Pnt2d
        PLast: gp_Pnt2d

        Returns
        -------
        None

        Sets the uv locations of the extremities of the edge.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face
        PFirst: gp_Pnt2d
        PLast: gp_Pnt2d

        Returns
        -------
        None

        """
        return _BRep.BRep_Tool_SetUVPoints(*args)

    SetUVPoints = staticmethod(SetUVPoints)

    def Surface(*args) -> "opencascade::handle< Geom_Surface >":
        """
        Returns the geometric surface of the face. returns in <l> the location for the surface.

        Parameters
        ----------
        F: TopoDS_Face
        L: TopLoc_Location

        Returns
        -------
        opencascade::handle<Geom_Surface>

        Returns the geometric surface of the face. it can be a copy if there is a location.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _BRep.BRep_Tool_Surface(*args)

    Surface = staticmethod(Surface)

    def Tolerance(*args) -> "Standard_Real":
        """
        Returns the tolerance of the face.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        float

        Returns the tolerance for <e>.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        float

        Returns the tolerance.

        Parameters
        ----------
        V: TopoDS_Vertex

        Returns
        -------
        float

        """
        return _BRep.BRep_Tool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def Triangulation(*args) -> "opencascade::handle< Poly_Triangulation > const &":
        """
        Returns the triangulation of the face. it is a null handle if there is no triangulation.

        Parameters
        ----------
        F: TopoDS_Face
        L: TopLoc_Location

        Returns
        -------
        opencascade::handle<Poly_Triangulation>

        """
        return _BRep.BRep_Tool_Triangulation(*args)

    Triangulation = staticmethod(Triangulation)

    def UVPoints(*args) -> "void":
        """
        Gets the uv locations of the extremities of the edge.

        Parameters
        ----------
        E: TopoDS_Edge
        S: Geom_Surface
        L: TopLoc_Location
        PFirst: gp_Pnt2d
        PLast: gp_Pnt2d

        Returns
        -------
        None

        Gets the uv locations of the extremities of the edge.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face
        PFirst: gp_Pnt2d
        PLast: gp_Pnt2d

        Returns
        -------
        None

        """
        return _BRep.BRep_Tool_UVPoints(*args)

    UVPoints = staticmethod(UVPoints)

    __repr__ = _dumps_object


    def __init__(self):
        this = _BRep.new_BRep_Tool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRep.delete_BRep_Tool
    __del__ = lambda self: None
BRep_Tool_swigregister = _BRep.BRep_Tool_swigregister
BRep_Tool_swigregister(BRep_Tool)

def BRep_Tool_Continuity(*args) -> "GeomAbs_Shape":
    """
    Returns the continuity.

    Parameters
    ----------
    E: TopoDS_Edge
    F1: TopoDS_Face
    F2: TopoDS_Face

    Returns
    -------
    GeomAbs_Shape

    Returns the continuity.

    Parameters
    ----------
    E: TopoDS_Edge
    S1: Geom_Surface
    S2: Geom_Surface
    L1: TopLoc_Location
    L2: TopLoc_Location

    Returns
    -------
    GeomAbs_Shape

    """
    return _BRep.BRep_Tool_Continuity(*args)

def BRep_Tool_Curve(*args) -> "Standard_Real &, Standard_Real &":
    """
    Returns the 3d curve of the edge. may be a null handle. returns in <l> the location for the curve. in <first> and <last> the parameter range.

    Parameters
    ----------
    E: TopoDS_Edge
    L: TopLoc_Location

    Returns
    -------
    First: float
    Last: float

    Returns the 3d curve of the edge. may be a null handle. in <first> and <last> the parameter range. it can be a copy if there is a location.

    Parameters
    ----------
    E: TopoDS_Edge

    Returns
    -------
    First: float
    Last: float

    """
    return _BRep.BRep_Tool_Curve(*args)

def BRep_Tool_CurveOnPlane(*args) -> "Standard_Real &, Standard_Real &":
    """
    For the planar surface builds the 2d curve for the edge by projection of the edge on plane. returns a null handle if the surface is not planar or the projection failed.

    Parameters
    ----------
    E: TopoDS_Edge
    S: Geom_Surface
    L: TopLoc_Location

    Returns
    -------
    First: float
    Last: float

    """
    return _BRep.BRep_Tool_CurveOnPlane(*args)

def BRep_Tool_CurveOnSurface(*args) -> "Standard_Real &, Standard_Real &":
    """
    Returns the curve associated to the edge in the parametric space of the face. returns a null handle if this curve does not exist. returns in <first> and <last> the parameter range. if the surface is a plane the curve can be not stored but created a new each time. the flag pointed by <theisstored> serves to indicate storage status. it is valued if the pointer is non-null.

    Parameters
    ----------
    E: TopoDS_Edge
    F: TopoDS_Face
    theIsStored: bool *,optional
    	default value is NULL

    Returns
    -------
    First: float
    Last: float

    Returns the curve associated to the edge in the parametric space of the surface. returns a null handle if this curve does not exist. returns in <first> and <last> the parameter range. if the surface is a plane the curve can be not stored but created a new each time. the flag pointed by <theisstored> serves to indicate storage status. it is valued if the pointer is non-null.

    Parameters
    ----------
    E: TopoDS_Edge
    S: Geom_Surface
    L: TopLoc_Location
    theIsStored: bool *,optional
    	default value is NULL

    Returns
    -------
    First: float
    Last: float

    Returns in <c>, <s>, <l> a 2d curve, a surface and a location for the edge <e>. <c> and <s> are null if the edge has no curve on surface. returns in <first> and <last> the parameter range.

    Parameters
    ----------
    E: TopoDS_Edge
    C: Geom2d_Curve
    S: Geom_Surface
    L: TopLoc_Location

    Returns
    -------
    First: float
    Last: float

    Returns in <c>, <s>, <l> the 2d curve, the surface and the location for the edge <e> of rank <index>. <c> and <s> are null if the index is out of range. returns in <first> and <last> the parameter range.

    Parameters
    ----------
    E: TopoDS_Edge
    C: Geom2d_Curve
    S: Geom_Surface
    L: TopLoc_Location
    Index: int

    Returns
    -------
    First: float
    Last: float

    """
    return _BRep.BRep_Tool_CurveOnSurface(*args)

def BRep_Tool_Degenerated(*args) -> "Standard_Boolean":
    """
    Returns true if the edge is degenerated.

    Parameters
    ----------
    E: TopoDS_Edge

    Returns
    -------
    bool

    """
    return _BRep.BRep_Tool_Degenerated(*args)

def BRep_Tool_HasContinuity(*args) -> "Standard_Boolean":
    """
    Returns true if the edge is on the surfaces of the two faces.

    Parameters
    ----------
    E: TopoDS_Edge
    F1: TopoDS_Face
    F2: TopoDS_Face

    Returns
    -------
    bool

    Returns true if the edge is on the surfaces.

    Parameters
    ----------
    E: TopoDS_Edge
    S1: Geom_Surface
    S2: Geom_Surface
    L1: TopLoc_Location
    L2: TopLoc_Location

    Returns
    -------
    bool

    Returns true if the edge has regularity on some two surfaces.

    Parameters
    ----------
    E: TopoDS_Edge

    Returns
    -------
    bool

    """
    return _BRep.BRep_Tool_HasContinuity(*args)

def BRep_Tool_IsClosed(*args) -> "Standard_Boolean":
    """
    If s is shell, returns true if it has no free boundaries (edges). if s is wire, returns true if it has no free ends (vertices). (internal and external sub-shepes are ignored in these checks) if s is edge, returns true if its vertices are the same. for other shape types returns s.closed().

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    bool

    Returns true if <e> has two pcurves in the parametric space of <f>. i.e. <f> is on a closed surface and <e> is on the closing curve.

    Parameters
    ----------
    E: TopoDS_Edge
    F: TopoDS_Face

    Returns
    -------
    bool

    Returns true if <e> has two pcurves in the parametric space of <s>. i.e. <s> is a closed surface and <e> is on the closing curve.

    Parameters
    ----------
    E: TopoDS_Edge
    S: Geom_Surface
    L: TopLoc_Location

    Returns
    -------
    bool

    Returns true if <e> has two arrays of indices in the triangulation <t>.

    Parameters
    ----------
    E: TopoDS_Edge
    T: Poly_Triangulation
    L: TopLoc_Location

    Returns
    -------
    bool

    """
    return _BRep.BRep_Tool_IsClosed(*args)

def BRep_Tool_IsGeometric(*args) -> "Standard_Boolean":
    """
    Returns true if <f> has a surface, false otherwise.

    Parameters
    ----------
    F: TopoDS_Face

    Returns
    -------
    bool

    Returns true if <e> is a 3d curve or a curve on surface.

    Parameters
    ----------
    E: TopoDS_Edge

    Returns
    -------
    bool

    """
    return _BRep.BRep_Tool_IsGeometric(*args)

def BRep_Tool_MaxContinuity(*args) -> "GeomAbs_Shape":
    """
    Returns the max continuity of edge between some surfaces or geomabs_c0 if there no such surfaces.

    Parameters
    ----------
    theEdge: TopoDS_Edge

    Returns
    -------
    GeomAbs_Shape

    """
    return _BRep.BRep_Tool_MaxContinuity(*args)

def BRep_Tool_MaxTolerance(*args) -> "Standard_Real":
    """
    Returns the maximum tolerance of input shape subshapes.

    Parameters
    ----------
    theShape: TopoDS_Shape
    theSubShape: TopAbs_ShapeEnum

    Returns
    -------
    float

    """
    return _BRep.BRep_Tool_MaxTolerance(*args)

def BRep_Tool_NaturalRestriction(*args) -> "Standard_Boolean":
    """
    Returns the naturalrestriction flag of the face.

    Parameters
    ----------
    F: TopoDS_Face

    Returns
    -------
    bool

    """
    return _BRep.BRep_Tool_NaturalRestriction(*args)

def BRep_Tool_Parameter(*args) -> "Standard_Real":
    """
    Finds the parameter of <thev> on <thee>. @param thev [in] input vertex @param thee [in] input edge @param theparam [out] calculated parameter on the curve returns true if done.

    Parameters
    ----------
    theV: TopoDS_Vertex
    theE: TopoDS_Edge

    Returns
    -------
    theParam: float

    Returns the parameter of <v> on <e>. throws standard_nosuchobject if no parameter on edge.

    Parameters
    ----------
    V: TopoDS_Vertex
    E: TopoDS_Edge

    Returns
    -------
    float

    Returns the parameters of the vertex on the pcurve of the edge on the face.

    Parameters
    ----------
    V: TopoDS_Vertex
    E: TopoDS_Edge
    F: TopoDS_Face

    Returns
    -------
    float

    Returns the parameters of the vertex on the pcurve of the edge on the surface.

    Parameters
    ----------
    V: TopoDS_Vertex
    E: TopoDS_Edge
    S: Geom_Surface
    L: TopLoc_Location

    Returns
    -------
    float

    """
    return _BRep.BRep_Tool_Parameter(*args)

def BRep_Tool_Parameters(*args) -> "gp_Pnt2d":
    """
    Returns the parameters of the vertex on the face.

    Parameters
    ----------
    V: TopoDS_Vertex
    F: TopoDS_Face

    Returns
    -------
    gp_Pnt2d

    """
    return _BRep.BRep_Tool_Parameters(*args)

def BRep_Tool_Pnt(*args) -> "gp_Pnt":
    """
    Returns the 3d point.

    Parameters
    ----------
    V: TopoDS_Vertex

    Returns
    -------
    gp_Pnt

    """
    return _BRep.BRep_Tool_Pnt(*args)

def BRep_Tool_Polygon3D(*args) -> "opencascade::handle< Poly_Polygon3D > const &":
    """
    Returns the 3d polygon of the edge. may be a null handle. returns in <l> the location for the polygon.

    Parameters
    ----------
    E: TopoDS_Edge
    L: TopLoc_Location

    Returns
    -------
    opencascade::handle<Poly_Polygon3D>

    """
    return _BRep.BRep_Tool_Polygon3D(*args)

def BRep_Tool_PolygonOnSurface(*args) -> "void":
    """
    Returns the polygon associated to the edge in the parametric space of the face. returns a null handle if this polygon does not exist.

    Parameters
    ----------
    E: TopoDS_Edge
    F: TopoDS_Face

    Returns
    -------
    opencascade::handle<Poly_Polygon2D>

    Returns the polygon associated to the edge in the parametric space of the surface. returns a null handle if this polygon does not exist.

    Parameters
    ----------
    E: TopoDS_Edge
    S: Geom_Surface
    L: TopLoc_Location

    Returns
    -------
    opencascade::handle<Poly_Polygon2D>

    Returns in <c>, <s>, <l> a 2d curve, a surface and a location for the edge <e>. <c> and <s> are null if the edge has no polygon on surface.

    Parameters
    ----------
    E: TopoDS_Edge
    C: Poly_Polygon2D
    S: Geom_Surface
    L: TopLoc_Location

    Returns
    -------
    None

    Returns in <c>, <s>, <l> the 2d curve, the surface and the location for the edge <e> of rank <index>. <c> and <s> are null if the index is out of range.

    Parameters
    ----------
    E: TopoDS_Edge
    C: Poly_Polygon2D
    S: Geom_Surface
    L: TopLoc_Location
    Index: int

    Returns
    -------
    None

    """
    return _BRep.BRep_Tool_PolygonOnSurface(*args)

def BRep_Tool_PolygonOnTriangulation(*args) -> "void":
    """
    Returns the polygon associated to the edge in the parametric space of the face. returns a null handle if this polygon does not exist.

    Parameters
    ----------
    E: TopoDS_Edge
    T: Poly_Triangulation
    L: TopLoc_Location

    Returns
    -------
    opencascade::handle<Poly_PolygonOnTriangulation>

    Returns in <p>, <t>, <l> a polygon on triangulation, a triangulation and a location for the edge <e>. <p> and <t> are null if the edge has no polygon on triangulation.

    Parameters
    ----------
    E: TopoDS_Edge
    P: Poly_PolygonOnTriangulation
    T: Poly_Triangulation
    L: TopLoc_Location

    Returns
    -------
    None

    Returns in <p>, <t>, <l> a polygon on triangulation, a triangulation and a location for the edge <e> for the range index. <c> and <s> are null if the edge has no polygon on triangulation.

    Parameters
    ----------
    E: TopoDS_Edge
    P: Poly_PolygonOnTriangulation
    T: Poly_Triangulation
    L: TopLoc_Location
    Index: int

    Returns
    -------
    None

    """
    return _BRep.BRep_Tool_PolygonOnTriangulation(*args)

def BRep_Tool_Range(*args) -> "Standard_Real &, Standard_Real &":
    """
    Gets the range of the 3d curve.

    Parameters
    ----------
    E: TopoDS_Edge

    Returns
    -------
    First: float
    Last: float

    Gets the range of the edge on the pcurve on the surface.

    Parameters
    ----------
    E: TopoDS_Edge
    S: Geom_Surface
    L: TopLoc_Location

    Returns
    -------
    First: float
    Last: float

    Gets the range of the edge on the pcurve on the face.

    Parameters
    ----------
    E: TopoDS_Edge
    F: TopoDS_Face

    Returns
    -------
    First: float
    Last: float

    """
    return _BRep.BRep_Tool_Range(*args)

def BRep_Tool_SameParameter(*args) -> "Standard_Boolean":
    """
    Returns the sameparameter flag for the edge.

    Parameters
    ----------
    E: TopoDS_Edge

    Returns
    -------
    bool

    """
    return _BRep.BRep_Tool_SameParameter(*args)

def BRep_Tool_SameRange(*args) -> "Standard_Boolean":
    """
    Returns the samerange flag for the edge.

    Parameters
    ----------
    E: TopoDS_Edge

    Returns
    -------
    bool

    """
    return _BRep.BRep_Tool_SameRange(*args)

def BRep_Tool_SetUVPoints(*args) -> "void":
    """
    Sets the uv locations of the extremities of the edge.

    Parameters
    ----------
    E: TopoDS_Edge
    S: Geom_Surface
    L: TopLoc_Location
    PFirst: gp_Pnt2d
    PLast: gp_Pnt2d

    Returns
    -------
    None

    Sets the uv locations of the extremities of the edge.

    Parameters
    ----------
    E: TopoDS_Edge
    F: TopoDS_Face
    PFirst: gp_Pnt2d
    PLast: gp_Pnt2d

    Returns
    -------
    None

    """
    return _BRep.BRep_Tool_SetUVPoints(*args)

def BRep_Tool_Surface(*args) -> "opencascade::handle< Geom_Surface >":
    """
    Returns the geometric surface of the face. returns in <l> the location for the surface.

    Parameters
    ----------
    F: TopoDS_Face
    L: TopLoc_Location

    Returns
    -------
    opencascade::handle<Geom_Surface>

    Returns the geometric surface of the face. it can be a copy if there is a location.

    Parameters
    ----------
    F: TopoDS_Face

    Returns
    -------
    opencascade::handle<Geom_Surface>

    """
    return _BRep.BRep_Tool_Surface(*args)

def BRep_Tool_Tolerance(*args) -> "Standard_Real":
    """
    Returns the tolerance of the face.

    Parameters
    ----------
    F: TopoDS_Face

    Returns
    -------
    float

    Returns the tolerance for <e>.

    Parameters
    ----------
    E: TopoDS_Edge

    Returns
    -------
    float

    Returns the tolerance.

    Parameters
    ----------
    V: TopoDS_Vertex

    Returns
    -------
    float

    """
    return _BRep.BRep_Tool_Tolerance(*args)

def BRep_Tool_Triangulation(*args) -> "opencascade::handle< Poly_Triangulation > const &":
    """
    Returns the triangulation of the face. it is a null handle if there is no triangulation.

    Parameters
    ----------
    F: TopoDS_Face
    L: TopLoc_Location

    Returns
    -------
    opencascade::handle<Poly_Triangulation>

    """
    return _BRep.BRep_Tool_Triangulation(*args)

def BRep_Tool_UVPoints(*args) -> "void":
    """
    Gets the uv locations of the extremities of the edge.

    Parameters
    ----------
    E: TopoDS_Edge
    S: Geom_Surface
    L: TopLoc_Location
    PFirst: gp_Pnt2d
    PLast: gp_Pnt2d

    Returns
    -------
    None

    Gets the uv locations of the extremities of the edge.

    Parameters
    ----------
    E: TopoDS_Edge
    F: TopoDS_Face
    PFirst: gp_Pnt2d
    PLast: gp_Pnt2d

    Returns
    -------
    None

    """
    return _BRep.BRep_Tool_UVPoints(*args)

class BRep_CurveOn2Surfaces(BRep_CurveRepresentation):
    __swig_setmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_CurveOn2Surfaces, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_CurveOn2Surfaces, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Geom_Surface
        S2: Geom_Surface
        L1: TopLoc_Location
        L2: TopLoc_Location
        C: GeomAbs_Shape

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_CurveOn2Surfaces(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Continuity(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        No available documentation.

        Parameters
        ----------
        C: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOn2Surfaces_Continuity(self, *args)


    def D0(self, *args) -> "void":
        """
        Raises an error.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOn2Surfaces_D0(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_CurveOn2Surfaces self, int depth=-1) -> std::string
        DumpJsonToString(BRep_CurveOn2Surfaces self) -> std::string
        """
        return _BRep.BRep_CurveOn2Surfaces_DumpJsonToString(self, depth)


    def IsRegularity(self, *args) -> "Standard_Boolean":
        """
        Returns true.

        Returns
        -------
        bool

        A curve on two surfaces (continuity).

        Parameters
        ----------
        S1: Geom_Surface
        S2: Geom_Surface
        L1: TopLoc_Location
        L2: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveOn2Surfaces_IsRegularity(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_CurveOn2Surfaces_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_CurveOn2Surfaces
    __del__ = lambda self: None
BRep_CurveOn2Surfaces_swigregister = _BRep.BRep_CurveOn2Surfaces_swigregister
BRep_CurveOn2Surfaces_swigregister(BRep_CurveOn2Surfaces)

class BRep_GCurve(BRep_CurveRepresentation):
    __swig_setmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_GCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_GCurve, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D0(self, *args) -> "void":
        """
        Computes the point at parameter u.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _BRep.BRep_GCurve_D0(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_GCurve self, int depth=-1) -> std::string
        DumpJsonToString(BRep_GCurve self) -> std::string
        """
        return _BRep.BRep_GCurve_DumpJsonToString(self, depth)


    def First(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        F: float

        Returns
        -------
        None

        """
        return _BRep.BRep_GCurve_First(self, *args)


    def Last(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        L: float

        Returns
        -------
        None

        """
        return _BRep.BRep_GCurve_Last(self, *args)


    def Range(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        First: float
        Last: float

        """
        return _BRep.BRep_GCurve_Range(self, *args)


    def SetRange(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        """
        return _BRep.BRep_GCurve_SetRange(self, *args)


    def Update(self, *args) -> "void":
        """
        Recomputes any derived data after a modification. this is called when the range is modified.

        Returns
        -------
        None

        """
        return _BRep.BRep_GCurve_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_GCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_GCurve
    __del__ = lambda self: None
BRep_GCurve_swigregister = _BRep.BRep_GCurve_swigregister
BRep_GCurve_swigregister(BRep_GCurve)

class BRep_PointOnCurve(BRep_PointRepresentation):
    __swig_setmethods__ = {}
    for _s in [BRep_PointRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PointOnCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_PointRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PointOnCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P: float
        C: Geom_Curve
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_PointOnCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Curve(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_PointOnCurve_Curve(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_PointOnCurve self, int depth=-1) -> std::string
        DumpJsonToString(BRep_PointOnCurve self) -> std::string
        """
        return _BRep.BRep_PointOnCurve_DumpJsonToString(self, depth)


    def IsPointOnCurve(self, *args) -> "Standard_Boolean":
        """
        Returns true.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        C: Geom_Curve
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_PointOnCurve_IsPointOnCurve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointOnCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointOnCurve
    __del__ = lambda self: None
BRep_PointOnCurve_swigregister = _BRep.BRep_PointOnCurve_swigregister
BRep_PointOnCurve_swigregister(BRep_PointOnCurve)

class BRep_PointsOnSurface(BRep_PointRepresentation):
    __swig_setmethods__ = {}
    for _s in [BRep_PointRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PointsOnSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_PointRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PointsOnSurface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_PointsOnSurface self, int depth=-1) -> std::string
        DumpJsonToString(BRep_PointsOnSurface self) -> std::string
        """
        return _BRep.BRep_PointsOnSurface_DumpJsonToString(self, depth)


    def Surface(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Surface>

        No available documentation.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        None

        """
        return _BRep.BRep_PointsOnSurface_Surface(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointsOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointsOnSurface
    __del__ = lambda self: None
BRep_PointsOnSurface_swigregister = _BRep.BRep_PointsOnSurface_swigregister
BRep_PointsOnSurface_swigregister(BRep_PointsOnSurface)

class BRep_Polygon3D(BRep_CurveRepresentation):
    __swig_setmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_Polygon3D, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_Polygon3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P: Poly_Polygon3D
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_Polygon3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_Polygon3D self, int depth=-1) -> std::string
        DumpJsonToString(BRep_Polygon3D self) -> std::string
        """
        return _BRep.BRep_Polygon3D_DumpJsonToString(self, depth)


    def Polygon3D(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_Polygon3D>

        No available documentation.

        Parameters
        ----------
        P: Poly_Polygon3D

        Returns
        -------
        None

        """
        return _BRep.BRep_Polygon3D_Polygon3D(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_Polygon3D_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_Polygon3D
    __del__ = lambda self: None
BRep_Polygon3D_swigregister = _BRep.BRep_Polygon3D_swigregister
BRep_Polygon3D_swigregister(BRep_Polygon3D)

class BRep_PolygonOnSurface(BRep_CurveRepresentation):
    __swig_setmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PolygonOnSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PolygonOnSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P: Poly_Polygon2D
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_PolygonOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_PolygonOnSurface self, int depth=-1) -> std::string
        DumpJsonToString(BRep_PolygonOnSurface self) -> std::string
        """
        return _BRep.BRep_PolygonOnSurface_DumpJsonToString(self, depth)


    def IsPolygonOnSurface(self, *args) -> "Standard_Boolean":
        """
        A 2d polygon representation in the parametric space of a surface.

        Returns
        -------
        bool

        A 2d polygon representation in the parametric space of a surface.

        Parameters
        ----------
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_PolygonOnSurface_IsPolygonOnSurface(self, *args)


    def Polygon(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_Polygon2D>

        No available documentation.

        Parameters
        ----------
        P: Poly_Polygon2D

        Returns
        -------
        None

        """
        return _BRep.BRep_PolygonOnSurface_Polygon(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PolygonOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PolygonOnSurface
    __del__ = lambda self: None
BRep_PolygonOnSurface_swigregister = _BRep.BRep_PolygonOnSurface_swigregister
BRep_PolygonOnSurface_swigregister(BRep_PolygonOnSurface)

class BRep_PolygonOnTriangulation(BRep_CurveRepresentation):
    __swig_setmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PolygonOnTriangulation, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_CurveRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PolygonOnTriangulation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P: Poly_PolygonOnTriangulation
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_PolygonOnTriangulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_PolygonOnTriangulation self, int depth=-1) -> std::string
        DumpJsonToString(BRep_PolygonOnTriangulation self) -> std::string
        """
        return _BRep.BRep_PolygonOnTriangulation_DumpJsonToString(self, depth)


    def IsPolygonOnTriangulation(self, *args) -> "Standard_Boolean":
        """
        Returns true.

        Returns
        -------
        bool

        Is it a polygon in the definition of <t> with location <l>.

        Parameters
        ----------
        T: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_PolygonOnTriangulation_IsPolygonOnTriangulation(self, *args)


    def PolygonOnTriangulation(self, *args) -> "opencascade::handle< Poly_PolygonOnTriangulation > const &":
        """
        Returns true.

        Parameters
        ----------
        P: Poly_PolygonOnTriangulation

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_PolygonOnTriangulation>

        """
        return _BRep.BRep_PolygonOnTriangulation_PolygonOnTriangulation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PolygonOnTriangulation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PolygonOnTriangulation
    __del__ = lambda self: None
BRep_PolygonOnTriangulation_swigregister = _BRep.BRep_PolygonOnTriangulation_swigregister
BRep_PolygonOnTriangulation_swigregister(BRep_PolygonOnTriangulation)

class BRep_Curve3D(BRep_GCurve):
    __swig_setmethods__ = {}
    for _s in [BRep_GCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_Curve3D, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_GCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_Curve3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: Geom_Curve
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_Curve3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Curve3D(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_Curve3D_Curve3D(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_Curve3D self, int depth=-1) -> std::string
        DumpJsonToString(BRep_Curve3D self) -> std::string
        """
        return _BRep.BRep_Curve3D_DumpJsonToString(self, depth)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_Curve3D_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_Curve3D
    __del__ = lambda self: None
BRep_Curve3D_swigregister = _BRep.BRep_Curve3D_swigregister
BRep_Curve3D_swigregister(BRep_Curve3D)

class BRep_CurveOnSurface(BRep_GCurve):
    __swig_setmethods__ = {}
    for _s in [BRep_GCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_CurveOnSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_GCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_CurveOnSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        PC: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_CurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_CurveOnSurface self, int depth=-1) -> std::string
        DumpJsonToString(BRep_CurveOnSurface self) -> std::string
        """
        return _BRep.BRep_CurveOnSurface_DumpJsonToString(self, depth)


    def IsCurveOnSurface(self, *args) -> "Standard_Boolean":
        """
        Returns true.

        Returns
        -------
        bool

        A curve in the parametric space of a surface.

        Parameters
        ----------
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveOnSurface_IsCurveOnSurface(self, *args)


    def PCurve(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOnSurface_PCurve(self, *args)


    def SetUVPoints(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOnSurface_SetUVPoints(self, *args)


    def UVPoints(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOnSurface_UVPoints(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_CurveOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_CurveOnSurface
    __del__ = lambda self: None
BRep_CurveOnSurface_swigregister = _BRep.BRep_CurveOnSurface_swigregister
BRep_CurveOnSurface_swigregister(BRep_CurveOnSurface)

class BRep_PointOnCurveOnSurface(BRep_PointsOnSurface):
    __swig_setmethods__ = {}
    for _s in [BRep_PointsOnSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PointOnCurveOnSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_PointsOnSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PointOnCurveOnSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P: float
        C: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_PointOnCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_PointOnCurveOnSurface self, int depth=-1) -> std::string
        DumpJsonToString(BRep_PointOnCurveOnSurface self) -> std::string
        """
        return _BRep.BRep_PointOnCurveOnSurface_DumpJsonToString(self, depth)


    def IsPointOnCurveOnSurface(self, *args) -> "Standard_Boolean":
        """
        Returns true.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        PC: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_PointOnCurveOnSurface_IsPointOnCurveOnSurface(self, *args)


    def PCurve(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_PointOnCurveOnSurface_PCurve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointOnCurveOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointOnCurveOnSurface
    __del__ = lambda self: None
BRep_PointOnCurveOnSurface_swigregister = _BRep.BRep_PointOnCurveOnSurface_swigregister
BRep_PointOnCurveOnSurface_swigregister(BRep_PointOnCurveOnSurface)

class BRep_PointOnSurface(BRep_PointsOnSurface):
    __swig_setmethods__ = {}
    for _s in [BRep_PointsOnSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PointOnSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_PointsOnSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PointOnSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P1: float
        P2: float
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_PointOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsPointOnSurface(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_PointOnSurface_IsPointOnSurface(self, *args)


    def Parameter2(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        P: float

        Returns
        -------
        None

        """
        return _BRep.BRep_PointOnSurface_Parameter2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PointOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PointOnSurface
    __del__ = lambda self: None
BRep_PointOnSurface_swigregister = _BRep.BRep_PointOnSurface_swigregister
BRep_PointOnSurface_swigregister(BRep_PointOnSurface)

class BRep_PolygonOnClosedSurface(BRep_PolygonOnSurface):
    __swig_setmethods__ = {}
    for _s in [BRep_PolygonOnSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PolygonOnClosedSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_PolygonOnSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PolygonOnClosedSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P1: Poly_Polygon2D
        P2: Poly_Polygon2D
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_PolygonOnClosedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_PolygonOnClosedSurface self, int depth=-1) -> std::string
        DumpJsonToString(BRep_PolygonOnClosedSurface self) -> std::string
        """
        return _BRep.BRep_PolygonOnClosedSurface_DumpJsonToString(self, depth)


    def Polygon2(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_Polygon2D>

        No available documentation.

        Parameters
        ----------
        P: Poly_Polygon2D

        Returns
        -------
        None

        """
        return _BRep.BRep_PolygonOnClosedSurface_Polygon2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PolygonOnClosedSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PolygonOnClosedSurface
    __del__ = lambda self: None
BRep_PolygonOnClosedSurface_swigregister = _BRep.BRep_PolygonOnClosedSurface_swigregister
BRep_PolygonOnClosedSurface_swigregister(BRep_PolygonOnClosedSurface)

class BRep_PolygonOnClosedTriangulation(BRep_PolygonOnTriangulation):
    __swig_setmethods__ = {}
    for _s in [BRep_PolygonOnTriangulation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_PolygonOnClosedTriangulation, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_PolygonOnTriangulation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_PolygonOnClosedTriangulation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P1: Poly_PolygonOnTriangulation
        P2: Poly_PolygonOnTriangulation
        Tr: Poly_Triangulation
        L: TopLoc_Location

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_PolygonOnClosedTriangulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_PolygonOnClosedTriangulation self, int depth=-1) -> std::string
        DumpJsonToString(BRep_PolygonOnClosedTriangulation self) -> std::string
        """
        return _BRep.BRep_PolygonOnClosedTriangulation_DumpJsonToString(self, depth)


    def PolygonOnTriangulation2(self, *args) -> "opencascade::handle< Poly_PolygonOnTriangulation > const &":
        """
        No available documentation.

        Parameters
        ----------
        P2: Poly_PolygonOnTriangulation

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        opencascade::handle<Poly_PolygonOnTriangulation>

        """
        return _BRep.BRep_PolygonOnClosedTriangulation_PolygonOnTriangulation2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_PolygonOnClosedTriangulation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_PolygonOnClosedTriangulation
    __del__ = lambda self: None
BRep_PolygonOnClosedTriangulation_swigregister = _BRep.BRep_PolygonOnClosedTriangulation_swigregister
BRep_PolygonOnClosedTriangulation_swigregister(BRep_PolygonOnClosedTriangulation)

class BRep_CurveOnClosedSurface(BRep_CurveOnSurface):
    __swig_setmethods__ = {}
    for _s in [BRep_CurveOnSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep_CurveOnClosedSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [BRep_CurveOnSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep_CurveOnClosedSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        PC1: Geom2d_Curve
        PC2: Geom2d_Curve
        S: Geom_Surface
        L: TopLoc_Location
        C: GeomAbs_Shape

        Returns
        -------
        None

        """
        this = _BRep.new_BRep_CurveOnClosedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Continuity(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        No available documentation.

        Parameters
        ----------
        C: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOnClosedSurface_Continuity(self, *args)


    def DumpJsonToString(self, depth: 'int'=-1) -> "std::string":
        """
        DumpJsonToString(BRep_CurveOnClosedSurface self, int depth=-1) -> std::string
        DumpJsonToString(BRep_CurveOnClosedSurface self) -> std::string
        """
        return _BRep.BRep_CurveOnClosedSurface_DumpJsonToString(self, depth)


    def IsRegularity(self, *args) -> "Standard_Boolean":
        """
        Returns true.

        Returns
        -------
        bool

        A curve on two surfaces (continuity).

        Parameters
        ----------
        S1: Geom_Surface
        S2: Geom_Surface
        L1: TopLoc_Location
        L2: TopLoc_Location

        Returns
        -------
        bool

        """
        return _BRep.BRep_CurveOnClosedSurface_IsRegularity(self, *args)


    def PCurve2(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOnClosedSurface_PCurve2(self, *args)


    def SetUVPoints2(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOnClosedSurface_SetUVPoints2(self, *args)


    def UVPoints2(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Returns
        -------
        None

        """
        return _BRep.BRep_CurveOnClosedSurface_UVPoints2(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BRep_CurveOnClosedSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRep.delete_BRep_CurveOnClosedSurface
    __del__ = lambda self: None
BRep_CurveOnClosedSurface_swigregister = _BRep.BRep_CurveOnClosedSurface_swigregister
BRep_CurveOnClosedSurface_swigregister(BRep_CurveOnClosedSurface)



# This file is compatible with both classic and new-style classes.


