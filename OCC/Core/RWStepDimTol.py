# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWStepDimTol module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwstepdimtol.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepDimTol')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepDimTol')
    _RWStepDimTol = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepDimTol', [dirname(__file__)])
        except ImportError:
            import _RWStepDimTol
            return _RWStepDimTol
        try:
            _mod = imp.load_module('_RWStepDimTol', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepDimTol = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepDimTol
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepDimTol.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _RWStepDimTol.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWStepDimTol.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWStepDimTol.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _RWStepDimTol.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepDimTol.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _RWStepDimTol.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _RWStepDimTol.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _RWStepDimTol.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _RWStepDimTol.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWStepDimTol.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepDimTol.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepDimTol.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWStepDimTol.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWStepDimTol.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWStepDimTol.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _RWStepDimTol.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepDimTol.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWStepDimTol.process_exception(error, method_name, class_name)
process_exception = _RWStepDimTol.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepDimTol
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.StepShape
import OCC.Core.StepGeom

from enum import IntEnum
from OCC.Core.Exception import *



class RWStepDimTol_RWAngularityTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWAngularityTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWAngularityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWAngularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads angularitytolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_AngularityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWAngularityTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_AngularityTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWAngularityTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes angularitytolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_AngularityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWAngularityTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWAngularityTolerance
    __del__ = lambda self: None
RWStepDimTol_RWAngularityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWAngularityTolerance_swigregister
RWStepDimTol_RWAngularityTolerance_swigregister(RWStepDimTol_RWAngularityTolerance)

class RWStepDimTol_RWCircularRunoutTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWCircularRunoutTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWCircularRunoutTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWCircularRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads circularrunouttolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_CircularRunoutTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCircularRunoutTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_CircularRunoutTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCircularRunoutTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes circularrunouttolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_CircularRunoutTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCircularRunoutTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWCircularRunoutTolerance
    __del__ = lambda self: None
RWStepDimTol_RWCircularRunoutTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWCircularRunoutTolerance_swigregister
RWStepDimTol_RWCircularRunoutTolerance_swigregister(RWStepDimTol_RWCircularRunoutTolerance)

class RWStepDimTol_RWCoaxialityTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWCoaxialityTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWCoaxialityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWCoaxialityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads coaxialitytolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_CoaxialityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCoaxialityTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_CoaxialityTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCoaxialityTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes coaxialitytolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_CoaxialityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCoaxialityTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWCoaxialityTolerance
    __del__ = lambda self: None
RWStepDimTol_RWCoaxialityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWCoaxialityTolerance_swigregister
RWStepDimTol_RWCoaxialityTolerance_swigregister(RWStepDimTol_RWCoaxialityTolerance)

class RWStepDimTol_RWCommonDatum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWCommonDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWCommonDatum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWCommonDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads commondatum.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_CommonDatum

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCommonDatum_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_CommonDatum
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCommonDatum_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes commondatum.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_CommonDatum

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCommonDatum_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWCommonDatum
    __del__ = lambda self: None
RWStepDimTol_RWCommonDatum_swigregister = _RWStepDimTol.RWStepDimTol_RWCommonDatum_swigregister
RWStepDimTol_RWCommonDatum_swigregister(RWStepDimTol_RWCommonDatum)

class RWStepDimTol_RWConcentricityTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWConcentricityTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWConcentricityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWConcentricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads concentricitytolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_ConcentricityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWConcentricityTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_ConcentricityTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWConcentricityTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes concentricitytolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_ConcentricityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWConcentricityTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWConcentricityTolerance
    __del__ = lambda self: None
RWStepDimTol_RWConcentricityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWConcentricityTolerance_swigregister
RWStepDimTol_RWConcentricityTolerance_swigregister(RWStepDimTol_RWConcentricityTolerance)

class RWStepDimTol_RWCylindricityTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWCylindricityTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWCylindricityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWCylindricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads cylindricitytolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_CylindricityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCylindricityTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_CylindricityTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCylindricityTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes cylindricitytolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_CylindricityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWCylindricityTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWCylindricityTolerance
    __del__ = lambda self: None
RWStepDimTol_RWCylindricityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWCylindricityTolerance_swigregister
RWStepDimTol_RWCylindricityTolerance_swigregister(RWStepDimTol_RWCylindricityTolerance)

class RWStepDimTol_RWDatum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWDatum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads datum.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_Datum

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatum_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_Datum
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatum_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes datum.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_Datum

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatum_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatum
    __del__ = lambda self: None
RWStepDimTol_RWDatum_swigregister = _RWStepDimTol.RWStepDimTol_RWDatum_swigregister
RWStepDimTol_RWDatum_swigregister(RWStepDimTol_RWDatum)

class RWStepDimTol_RWDatumFeature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWDatumFeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWDatumFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads datumfeature.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_DatumFeature

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumFeature_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_DatumFeature
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumFeature_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes datumfeature.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_DatumFeature

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumFeature_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumFeature
    __del__ = lambda self: None
RWStepDimTol_RWDatumFeature_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumFeature_swigregister
RWStepDimTol_RWDatumFeature_swigregister(RWStepDimTol_RWDatumFeature)

class RWStepDimTol_RWDatumReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWDatumReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWDatumReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads datumreference.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_DatumReference

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReference_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_DatumReference
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReference_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes datumreference.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_DatumReference

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReference_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumReference
    __del__ = lambda self: None
RWStepDimTol_RWDatumReference_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumReference_swigregister
RWStepDimTol_RWDatumReference_swigregister(RWStepDimTol_RWDatumReference)

class RWStepDimTol_RWDatumReferenceCompartment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWDatumReferenceCompartment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWDatumReferenceCompartment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads datumreferenceelement.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_DatumReferenceCompartment

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceCompartment_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_DatumReferenceCompartment
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceCompartment_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes datumreferenceelement.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_DatumReferenceCompartment

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceCompartment_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumReferenceCompartment
    __del__ = lambda self: None
RWStepDimTol_RWDatumReferenceCompartment_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumReferenceCompartment_swigregister
RWStepDimTol_RWDatumReferenceCompartment_swigregister(RWStepDimTol_RWDatumReferenceCompartment)

class RWStepDimTol_RWDatumReferenceElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWDatumReferenceElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWDatumReferenceElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads datumreferenceelement.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_DatumReferenceElement

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceElement_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_DatumReferenceElement
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceElement_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes datumreferenceelement.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_DatumReferenceElement

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceElement_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumReferenceElement
    __del__ = lambda self: None
RWStepDimTol_RWDatumReferenceElement_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumReferenceElement_swigregister
RWStepDimTol_RWDatumReferenceElement_swigregister(RWStepDimTol_RWDatumReferenceElement)

class RWStepDimTol_RWDatumReferenceModifierWithValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWDatumReferenceModifierWithValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWDatumReferenceModifierWithValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumReferenceModifierWithValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads datumreferencemodifierwithvalue.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_DatumReferenceModifierWithValue

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceModifierWithValue_ReadStep(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes datumreferencemodifierwithvalue.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_DatumReferenceModifierWithValue

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceModifierWithValue_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumReferenceModifierWithValue
    __del__ = lambda self: None
RWStepDimTol_RWDatumReferenceModifierWithValue_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumReferenceModifierWithValue_swigregister
RWStepDimTol_RWDatumReferenceModifierWithValue_swigregister(RWStepDimTol_RWDatumReferenceModifierWithValue)

class RWStepDimTol_RWDatumSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWDatumSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWDatumSystem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads datumsystem.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_DatumSystem

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumSystem_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_DatumSystem
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumSystem_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes datumsystem.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_DatumSystem

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumSystem_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumSystem
    __del__ = lambda self: None
RWStepDimTol_RWDatumSystem_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumSystem_swigregister
RWStepDimTol_RWDatumSystem_swigregister(RWStepDimTol_RWDatumSystem)

class RWStepDimTol_RWDatumTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWDatumTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWDatumTarget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads datumtarget.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_DatumTarget

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumTarget_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_DatumTarget
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumTarget_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes datumtarget.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_DatumTarget

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumTarget_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumTarget
    __del__ = lambda self: None
RWStepDimTol_RWDatumTarget_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumTarget_swigregister
RWStepDimTol_RWDatumTarget_swigregister(RWStepDimTol_RWDatumTarget)

class RWStepDimTol_RWFlatnessTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWFlatnessTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWFlatnessTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWFlatnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads flatnesstolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_FlatnessTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWFlatnessTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_FlatnessTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWFlatnessTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes flatnesstolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_FlatnessTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWFlatnessTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWFlatnessTolerance
    __del__ = lambda self: None
RWStepDimTol_RWFlatnessTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWFlatnessTolerance_swigregister
RWStepDimTol_RWFlatnessTolerance_swigregister(RWStepDimTol_RWFlatnessTolerance)

class RWStepDimTol_RWGeneralDatumReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeneralDatumReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeneralDatumReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeneralDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads generaldatumreference.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeneralDatumReference

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeneralDatumReference_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_GeneralDatumReference
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeneralDatumReference_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes generaldatumreference.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeneralDatumReference

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeneralDatumReference_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeneralDatumReference
    __del__ = lambda self: None
RWStepDimTol_RWGeneralDatumReference_swigregister = _RWStepDimTol.RWStepDimTol_RWGeneralDatumReference_swigregister
RWStepDimTol_RWGeneralDatumReference_swigregister(RWStepDimTol_RWGeneralDatumReference)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeoTolAndGeoTolWthDatRef

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepDimTol_GeoTolAndGeoTolWthDatRef
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeoTolAndGeoTolWthDatRef

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRef
    __del__ = lambda self: None
RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRef)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
    __del__ = lambda self: None
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod
    __del__ = lambda self: None
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
    __del__ = lambda self: None
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
    __del__ = lambda self: None
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol)

class RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeoTolAndGeoTolWthMaxTol

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepDimTol_GeoTolAndGeoTolWthMaxTol
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeoTolAndGeoTolWthMaxTol

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol
    __del__ = lambda self: None
RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol)

class RWStepDimTol_RWGeoTolAndGeoTolWthMod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthMod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeoTolAndGeoTolWthMod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeoTolAndGeoTolWthMod

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMod_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ent: StepDimTol_GeoTolAndGeoTolWthMod
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMod_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeoTolAndGeoTolWthMod

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMod_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthMod
    __del__ = lambda self: None
RWStepDimTol_RWGeoTolAndGeoTolWthMod_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMod_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthMod_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthMod)

class RWStepDimTol_RWGeometricTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeometricTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeometricTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads geometrictolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeometricTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_GeometricTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes geometrictolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeometricTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricTolerance
    __del__ = lambda self: None
RWStepDimTol_RWGeometricTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricTolerance_swigregister
RWStepDimTol_RWGeometricTolerance_swigregister(RWStepDimTol_RWGeometricTolerance)

class RWStepDimTol_RWGeometricToleranceRelationship(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeometricToleranceRelationship, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeometricToleranceRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads geometrictolerancerelationship.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeometricToleranceRelationship

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceRelationship_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_GeometricToleranceRelationship
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceRelationship_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes geometrictolerancerelationship.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeometricToleranceRelationship

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceRelationship_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceRelationship
    __del__ = lambda self: None
RWStepDimTol_RWGeometricToleranceRelationship_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceRelationship_swigregister
RWStepDimTol_RWGeometricToleranceRelationship_swigregister(RWStepDimTol_RWGeometricToleranceRelationship)

class RWStepDimTol_RWGeometricToleranceWithDatumReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeometricToleranceWithDatumReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeometricToleranceWithDatumReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads geometrictolerancewithdatumreference.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeometricToleranceWithDatumReference

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDatumReference_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_GeometricToleranceWithDatumReference
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDatumReference_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes geometrictolerancewithdatumreference.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeometricToleranceWithDatumReference

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDatumReference_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithDatumReference
    __del__ = lambda self: None
RWStepDimTol_RWGeometricToleranceWithDatumReference_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDatumReference_swigregister
RWStepDimTol_RWGeometricToleranceWithDatumReference_swigregister(RWStepDimTol_RWGeometricToleranceWithDatumReference)

class RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads geometrictolerancewithdefinedareaunit.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeometricToleranceWithDefinedAreaUnit

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_GeometricToleranceWithDefinedAreaUnit
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes geometrictolerancewithdefinedareaunit.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeometricToleranceWithDefinedAreaUnit

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit
    __del__ = lambda self: None
RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_swigregister
RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_swigregister(RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit)

class RWStepDimTol_RWGeometricToleranceWithDefinedUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeometricToleranceWithDefinedUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeometricToleranceWithDefinedUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithDefinedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads geometrictolerancewithdefinedunit.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeometricToleranceWithDefinedUnit

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedUnit_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_GeometricToleranceWithDefinedUnit
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedUnit_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes geometrictolerancewithdefinedunit.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeometricToleranceWithDefinedUnit

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedUnit_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithDefinedUnit
    __del__ = lambda self: None
RWStepDimTol_RWGeometricToleranceWithDefinedUnit_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedUnit_swigregister
RWStepDimTol_RWGeometricToleranceWithDefinedUnit_swigregister(RWStepDimTol_RWGeometricToleranceWithDefinedUnit)

class RWStepDimTol_RWGeometricToleranceWithMaximumTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeometricToleranceWithMaximumTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeometricToleranceWithMaximumTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithMaximumTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads geometrictolerancewithmaximumtolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeometricToleranceWithMaximumTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_GeometricToleranceWithMaximumTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes geometrictolerancewithmaximumtolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeometricToleranceWithMaximumTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithMaximumTolerance
    __del__ = lambda self: None
RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_swigregister
RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_swigregister(RWStepDimTol_RWGeometricToleranceWithMaximumTolerance)

class RWStepDimTol_RWGeometricToleranceWithModifiers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWGeometricToleranceWithModifiers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWGeometricToleranceWithModifiers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithModifiers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads geometrictolerancewithmodifiers.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_GeometricToleranceWithModifiers

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithModifiers_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_GeometricToleranceWithModifiers
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithModifiers_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes geometrictolerancewithmodifiers.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_GeometricToleranceWithModifiers

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithModifiers_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithModifiers
    __del__ = lambda self: None
RWStepDimTol_RWGeometricToleranceWithModifiers_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithModifiers_swigregister
RWStepDimTol_RWGeometricToleranceWithModifiers_swigregister(RWStepDimTol_RWGeometricToleranceWithModifiers)

class RWStepDimTol_RWLineProfileTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWLineProfileTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWLineProfileTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWLineProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads lineprofiletolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_LineProfileTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWLineProfileTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_LineProfileTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWLineProfileTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes lineprofiletolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_LineProfileTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWLineProfileTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWLineProfileTolerance
    __del__ = lambda self: None
RWStepDimTol_RWLineProfileTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWLineProfileTolerance_swigregister
RWStepDimTol_RWLineProfileTolerance_swigregister(RWStepDimTol_RWLineProfileTolerance)

class RWStepDimTol_RWModifiedGeometricTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWModifiedGeometricTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWModifiedGeometricTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWModifiedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads modifiedgeometrictolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_ModifiedGeometricTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWModifiedGeometricTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_ModifiedGeometricTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWModifiedGeometricTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes modifiedgeometrictolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_ModifiedGeometricTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWModifiedGeometricTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWModifiedGeometricTolerance
    __del__ = lambda self: None
RWStepDimTol_RWModifiedGeometricTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWModifiedGeometricTolerance_swigregister
RWStepDimTol_RWModifiedGeometricTolerance_swigregister(RWStepDimTol_RWModifiedGeometricTolerance)

class RWStepDimTol_RWNonUniformZoneDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWNonUniformZoneDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWNonUniformZoneDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWNonUniformZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads nonuniformzonedefinition.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_NonUniformZoneDefinition

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWNonUniformZoneDefinition_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_NonUniformZoneDefinition
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWNonUniformZoneDefinition_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes nonuniformzonedefinition.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_NonUniformZoneDefinition

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWNonUniformZoneDefinition_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWNonUniformZoneDefinition
    __del__ = lambda self: None
RWStepDimTol_RWNonUniformZoneDefinition_swigregister = _RWStepDimTol.RWStepDimTol_RWNonUniformZoneDefinition_swigregister
RWStepDimTol_RWNonUniformZoneDefinition_swigregister(RWStepDimTol_RWNonUniformZoneDefinition)

class RWStepDimTol_RWParallelismTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWParallelismTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWParallelismTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWParallelismTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads parallelismtolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_ParallelismTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWParallelismTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_ParallelismTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWParallelismTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes parallelismtolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_ParallelismTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWParallelismTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWParallelismTolerance
    __del__ = lambda self: None
RWStepDimTol_RWParallelismTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWParallelismTolerance_swigregister
RWStepDimTol_RWParallelismTolerance_swigregister(RWStepDimTol_RWParallelismTolerance)

class RWStepDimTol_RWPerpendicularityTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWPerpendicularityTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWPerpendicularityTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWPerpendicularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads perpendicularitytolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_PerpendicularityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPerpendicularityTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_PerpendicularityTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPerpendicularityTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes perpendicularitytolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_PerpendicularityTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPerpendicularityTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWPerpendicularityTolerance
    __del__ = lambda self: None
RWStepDimTol_RWPerpendicularityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWPerpendicularityTolerance_swigregister
RWStepDimTol_RWPerpendicularityTolerance_swigregister(RWStepDimTol_RWPerpendicularityTolerance)

class RWStepDimTol_RWPlacedDatumTargetFeature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWPlacedDatumTargetFeature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWPlacedDatumTargetFeature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWPlacedDatumTargetFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads placeddatumtargetfeature.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_PlacedDatumTargetFeature

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPlacedDatumTargetFeature_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_PlacedDatumTargetFeature
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPlacedDatumTargetFeature_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes placeddatumtargetfeature.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_PlacedDatumTargetFeature

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPlacedDatumTargetFeature_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWPlacedDatumTargetFeature
    __del__ = lambda self: None
RWStepDimTol_RWPlacedDatumTargetFeature_swigregister = _RWStepDimTol.RWStepDimTol_RWPlacedDatumTargetFeature_swigregister
RWStepDimTol_RWPlacedDatumTargetFeature_swigregister(RWStepDimTol_RWPlacedDatumTargetFeature)

class RWStepDimTol_RWPositionTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWPositionTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWPositionTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWPositionTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads positiontolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_PositionTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPositionTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_PositionTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPositionTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes positiontolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_PositionTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWPositionTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWPositionTolerance
    __del__ = lambda self: None
RWStepDimTol_RWPositionTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWPositionTolerance_swigregister
RWStepDimTol_RWPositionTolerance_swigregister(RWStepDimTol_RWPositionTolerance)

class RWStepDimTol_RWProjectedZoneDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWProjectedZoneDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWProjectedZoneDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWProjectedZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads projectedzonedefinition.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_ProjectedZoneDefinition

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWProjectedZoneDefinition_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_ProjectedZoneDefinition
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWProjectedZoneDefinition_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes projectedzonedefinition.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_ProjectedZoneDefinition

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWProjectedZoneDefinition_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWProjectedZoneDefinition
    __del__ = lambda self: None
RWStepDimTol_RWProjectedZoneDefinition_swigregister = _RWStepDimTol.RWStepDimTol_RWProjectedZoneDefinition_swigregister
RWStepDimTol_RWProjectedZoneDefinition_swigregister(RWStepDimTol_RWProjectedZoneDefinition)

class RWStepDimTol_RWRoundnessTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWRoundnessTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWRoundnessTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWRoundnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads roundnesstolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_RoundnessTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWRoundnessTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_RoundnessTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWRoundnessTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes roundnesstolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_RoundnessTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWRoundnessTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWRoundnessTolerance
    __del__ = lambda self: None
RWStepDimTol_RWRoundnessTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWRoundnessTolerance_swigregister
RWStepDimTol_RWRoundnessTolerance_swigregister(RWStepDimTol_RWRoundnessTolerance)

class RWStepDimTol_RWRunoutZoneDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWRunoutZoneDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWRunoutZoneDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWRunoutZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads runoutzonedefinition.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_RunoutZoneDefinition

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneDefinition_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_RunoutZoneDefinition
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneDefinition_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes runoutzonedefinition.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_RunoutZoneDefinition

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneDefinition_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWRunoutZoneDefinition
    __del__ = lambda self: None
RWStepDimTol_RWRunoutZoneDefinition_swigregister = _RWStepDimTol.RWStepDimTol_RWRunoutZoneDefinition_swigregister
RWStepDimTol_RWRunoutZoneDefinition_swigregister(RWStepDimTol_RWRunoutZoneDefinition)

class RWStepDimTol_RWRunoutZoneOrientation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWRunoutZoneOrientation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWRunoutZoneOrientation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWRunoutZoneOrientation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads runoutzoneorientation.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_RunoutZoneOrientation

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneOrientation_ReadStep(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes runoutzoneorientation.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_RunoutZoneOrientation

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneOrientation_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWRunoutZoneOrientation
    __del__ = lambda self: None
RWStepDimTol_RWRunoutZoneOrientation_swigregister = _RWStepDimTol.RWStepDimTol_RWRunoutZoneOrientation_swigregister
RWStepDimTol_RWRunoutZoneOrientation_swigregister(RWStepDimTol_RWRunoutZoneOrientation)

class RWStepDimTol_RWStraightnessTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWStraightnessTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWStraightnessTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWStraightnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads straightnesstolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_StraightnessTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWStraightnessTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_StraightnessTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWStraightnessTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes straightnesstolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_StraightnessTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWStraightnessTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWStraightnessTolerance
    __del__ = lambda self: None
RWStepDimTol_RWStraightnessTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWStraightnessTolerance_swigregister
RWStepDimTol_RWStraightnessTolerance_swigregister(RWStepDimTol_RWStraightnessTolerance)

class RWStepDimTol_RWSurfaceProfileTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWSurfaceProfileTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWSurfaceProfileTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWSurfaceProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads surfaceprofiletolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_SurfaceProfileTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWSurfaceProfileTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_SurfaceProfileTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWSurfaceProfileTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes surfaceprofiletolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_SurfaceProfileTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWSurfaceProfileTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWSurfaceProfileTolerance
    __del__ = lambda self: None
RWStepDimTol_RWSurfaceProfileTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWSurfaceProfileTolerance_swigregister
RWStepDimTol_RWSurfaceProfileTolerance_swigregister(RWStepDimTol_RWSurfaceProfileTolerance)

class RWStepDimTol_RWSymmetryTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWSymmetryTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWSymmetryTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWSymmetryTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads symmetrytolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_SymmetryTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWSymmetryTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_SymmetryTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWSymmetryTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes symmetrytolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_SymmetryTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWSymmetryTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWSymmetryTolerance
    __del__ = lambda self: None
RWStepDimTol_RWSymmetryTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWSymmetryTolerance_swigregister
RWStepDimTol_RWSymmetryTolerance_swigregister(RWStepDimTol_RWSymmetryTolerance)

class RWStepDimTol_RWToleranceZone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWToleranceZone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWToleranceZone, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWToleranceZone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads tolerancezone.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_ToleranceZone

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZone_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_ToleranceZone
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZone_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes tolerancezone.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_ToleranceZone

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZone_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWToleranceZone
    __del__ = lambda self: None
RWStepDimTol_RWToleranceZone_swigregister = _RWStepDimTol.RWStepDimTol_RWToleranceZone_swigregister
RWStepDimTol_RWToleranceZone_swigregister(RWStepDimTol_RWToleranceZone)

class RWStepDimTol_RWToleranceZoneDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWToleranceZoneDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWToleranceZoneDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWToleranceZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads tolerancezonedefinition.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_ToleranceZoneDefinition

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneDefinition_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_ToleranceZoneDefinition
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneDefinition_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes tolerancezonedefinition.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_ToleranceZoneDefinition

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneDefinition_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWToleranceZoneDefinition
    __del__ = lambda self: None
RWStepDimTol_RWToleranceZoneDefinition_swigregister = _RWStepDimTol.RWStepDimTol_RWToleranceZoneDefinition_swigregister
RWStepDimTol_RWToleranceZoneDefinition_swigregister(RWStepDimTol_RWToleranceZoneDefinition)

class RWStepDimTol_RWToleranceZoneForm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWToleranceZoneForm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWToleranceZoneForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWToleranceZoneForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads tolerancezoneform.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_ToleranceZoneForm

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneForm_ReadStep(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes tolerancezoneform.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_ToleranceZoneForm

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneForm_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWToleranceZoneForm
    __del__ = lambda self: None
RWStepDimTol_RWToleranceZoneForm_swigregister = _RWStepDimTol.RWStepDimTol_RWToleranceZoneForm_swigregister
RWStepDimTol_RWToleranceZoneForm_swigregister(RWStepDimTol_RWToleranceZoneForm)

class RWStepDimTol_RWTotalRunoutTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWTotalRunoutTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWTotalRunoutTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWTotalRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads totalrunouttolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_TotalRunoutTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWTotalRunoutTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_TotalRunoutTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWTotalRunoutTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes totalrunouttolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_TotalRunoutTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWTotalRunoutTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWTotalRunoutTolerance
    __del__ = lambda self: None
RWStepDimTol_RWTotalRunoutTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWTotalRunoutTolerance_swigregister
RWStepDimTol_RWTotalRunoutTolerance_swigregister(RWStepDimTol_RWTotalRunoutTolerance)

class RWStepDimTol_RWUnequallyDisposedGeometricTolerance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepDimTol_RWUnequallyDisposedGeometricTolerance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepDimTol_RWUnequallyDisposedGeometricTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepDimTol.new_RWStepDimTol_RWUnequallyDisposedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads unequallydisposedgeometrictolerance.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepDimTol_UnequallyDisposedGeometricTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWUnequallyDisposedGeometricTolerance_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepDimTol_UnequallyDisposedGeometricTolerance
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWUnequallyDisposedGeometricTolerance_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes unequallydisposedgeometrictolerance.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepDimTol_UnequallyDisposedGeometricTolerance

        Returns
        -------
        None

        """
        return _RWStepDimTol.RWStepDimTol_RWUnequallyDisposedGeometricTolerance_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWUnequallyDisposedGeometricTolerance
    __del__ = lambda self: None
RWStepDimTol_RWUnequallyDisposedGeometricTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWUnequallyDisposedGeometricTolerance_swigregister
RWStepDimTol_RWUnequallyDisposedGeometricTolerance_swigregister(RWStepDimTol_RWUnequallyDisposedGeometricTolerance)



# This file is compatible with both classic and new-style classes.


