# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
AIS module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_ais.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AIS
else:
    import _AIS

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AIS.delete_SwigPyIterator

    def value(self):
        return _AIS.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AIS.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AIS.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AIS.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AIS.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AIS.SwigPyIterator_copy(self)

    def next(self):
        return _AIS.SwigPyIterator_next(self)

    def __next__(self):
        return _AIS.SwigPyIterator___next__(self)

    def previous(self):
        return _AIS.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AIS.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AIS.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AIS.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AIS.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AIS.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AIS.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AIS.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AIS:
_AIS.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _AIS.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.SelectMgr
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.Aspect
import OCC.Core.Image
import OCC.Core.TopLoc
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.OSD
import OCC.Core.Media
import OCC.Core.Select3D
import OCC.Core.SelectBasics
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.V3d
import OCC.Core.TopAbs
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.StdSelect
import OCC.Core.TopTools

from enum import IntEnum
from OCC.Core.Exception import *

AIS_RotationMode_LOWER = _AIS.AIS_RotationMode_LOWER
AIS_RotationMode_UPPER = _AIS.AIS_RotationMode_UPPER
AIS_WireFrame = _AIS.AIS_WireFrame
AIS_Shaded = _AIS.AIS_Shaded
AIS_DragAction_Start = _AIS.AIS_DragAction_Start
AIS_DragAction_Update = _AIS.AIS_DragAction_Update
AIS_DragAction_Stop = _AIS.AIS_DragAction_Stop
AIS_DragAction_Abort = _AIS.AIS_DragAction_Abort
AIS_KindOfInteractive_None = _AIS.AIS_KindOfInteractive_None
AIS_KindOfInteractive_Datum = _AIS.AIS_KindOfInteractive_Datum
AIS_KindOfInteractive_Shape = _AIS.AIS_KindOfInteractive_Shape
AIS_KindOfInteractive_Object = _AIS.AIS_KindOfInteractive_Object
AIS_KindOfInteractive_Relation = _AIS.AIS_KindOfInteractive_Relation
AIS_KindOfInteractive_Dimension = _AIS.AIS_KindOfInteractive_Dimension
AIS_KindOfInteractive_LightSource = _AIS.AIS_KindOfInteractive_LightSource
AIS_KOI_None = _AIS.AIS_KOI_None
AIS_KOI_Datum = _AIS.AIS_KOI_Datum
AIS_KOI_Shape = _AIS.AIS_KOI_Shape
AIS_KOI_Object = _AIS.AIS_KOI_Object
AIS_KOI_Relation = _AIS.AIS_KOI_Relation
AIS_KOI_Dimension = _AIS.AIS_KOI_Dimension
AIS_MM_None = _AIS.AIS_MM_None
AIS_MM_Translation = _AIS.AIS_MM_Translation
AIS_MM_Rotation = _AIS.AIS_MM_Rotation
AIS_MM_Scaling = _AIS.AIS_MM_Scaling
AIS_MM_TranslationPlane = _AIS.AIS_MM_TranslationPlane
AIS_MouseGesture_NONE = _AIS.AIS_MouseGesture_NONE
AIS_MouseGesture_SelectRectangle = _AIS.AIS_MouseGesture_SelectRectangle
AIS_MouseGesture_SelectLasso = _AIS.AIS_MouseGesture_SelectLasso
AIS_MouseGesture_Zoom = _AIS.AIS_MouseGesture_Zoom
AIS_MouseGesture_ZoomWindow = _AIS.AIS_MouseGesture_ZoomWindow
AIS_MouseGesture_Pan = _AIS.AIS_MouseGesture_Pan
AIS_MouseGesture_RotateOrbit = _AIS.AIS_MouseGesture_RotateOrbit
AIS_MouseGesture_RotateView = _AIS.AIS_MouseGesture_RotateView
AIS_MouseGesture_Drag = _AIS.AIS_MouseGesture_Drag
AIS_NavigationMode_Orbit = _AIS.AIS_NavigationMode_Orbit
AIS_NavigationMode_FirstPersonFlight = _AIS.AIS_NavigationMode_FirstPersonFlight
AIS_NavigationMode_FirstPersonWalk = _AIS.AIS_NavigationMode_FirstPersonWalk
AIS_RotationMode_BndBoxActive = _AIS.AIS_RotationMode_BndBoxActive
AIS_RotationMode_PickLast = _AIS.AIS_RotationMode_PickLast
AIS_RotationMode_PickCenter = _AIS.AIS_RotationMode_PickCenter
AIS_RotationMode_CameraAt = _AIS.AIS_RotationMode_CameraAt
AIS_RotationMode_BndBoxScene = _AIS.AIS_RotationMode_BndBoxScene
AIS_SS_Added = _AIS.AIS_SS_Added
AIS_SS_Removed = _AIS.AIS_SS_Removed
AIS_SS_NotDone = _AIS.AIS_SS_NotDone
AIS_SelectionModesConcurrency_Single = _AIS.AIS_SelectionModesConcurrency_Single
AIS_SelectionModesConcurrency_GlobalOrLocal = _AIS.AIS_SelectionModesConcurrency_GlobalOrLocal
AIS_SelectionModesConcurrency_Multiple = _AIS.AIS_SelectionModesConcurrency_Multiple
AIS_SelectionScheme_UNKNOWN = _AIS.AIS_SelectionScheme_UNKNOWN
AIS_SelectionScheme_Replace = _AIS.AIS_SelectionScheme_Replace
AIS_SelectionScheme_Add = _AIS.AIS_SelectionScheme_Add
AIS_SelectionScheme_Remove = _AIS.AIS_SelectionScheme_Remove
AIS_SelectionScheme_XOR = _AIS.AIS_SelectionScheme_XOR
AIS_SelectionScheme_Clear = _AIS.AIS_SelectionScheme_Clear
AIS_SelectionScheme_ReplaceExtra = _AIS.AIS_SelectionScheme_ReplaceExtra
AIS_SOD_Error = _AIS.AIS_SOD_Error
AIS_SOD_Nothing = _AIS.AIS_SOD_Nothing
AIS_SOD_AllBad = _AIS.AIS_SOD_AllBad
AIS_SOD_Selected = _AIS.AIS_SOD_Selected
AIS_SOD_OnlyOneDetected = _AIS.AIS_SOD_OnlyOneDetected
AIS_SOD_OnlyOneGood = _AIS.AIS_SOD_OnlyOneGood
AIS_SOD_SeveralGood = _AIS.AIS_SOD_SeveralGood
AIS_SOP_Error = _AIS.AIS_SOP_Error
AIS_SOP_NothingSelected = _AIS.AIS_SOP_NothingSelected
AIS_SOP_Removed = _AIS.AIS_SOP_Removed
AIS_SOP_OneSelected = _AIS.AIS_SOP_OneSelected
AIS_SOP_SeveralSelected = _AIS.AIS_SOP_SeveralSelected
AIS_TrihedronSelectionMode_EntireObject = _AIS.AIS_TrihedronSelectionMode_EntireObject
AIS_TrihedronSelectionMode_Origin = _AIS.AIS_TrihedronSelectionMode_Origin
AIS_TrihedronSelectionMode_Axes = _AIS.AIS_TrihedronSelectionMode_Axes
AIS_TrihedronSelectionMode_MainPlanes = _AIS.AIS_TrihedronSelectionMode_MainPlanes
AIS_TOA_Line = _AIS.AIS_TOA_Line
AIS_TOA_Dimension = _AIS.AIS_TOA_Dimension
AIS_TOA_Wire = _AIS.AIS_TOA_Wire
AIS_TOA_Plane = _AIS.AIS_TOA_Plane
AIS_TOA_Vector = _AIS.AIS_TOA_Vector
AIS_TOA_UIso = _AIS.AIS_TOA_UIso
AIS_TOA_VIso = _AIS.AIS_TOA_VIso
AIS_TOA_Free = _AIS.AIS_TOA_Free
AIS_TOA_UnFree = _AIS.AIS_TOA_UnFree
AIS_TOA_Section = _AIS.AIS_TOA_Section
AIS_TOA_Hidden = _AIS.AIS_TOA_Hidden
AIS_TOA_Seen = _AIS.AIS_TOA_Seen
AIS_TOA_FaceBoundary = _AIS.AIS_TOA_FaceBoundary
AIS_TOA_FirstAxis = _AIS.AIS_TOA_FirstAxis
AIS_TOA_SecondAxis = _AIS.AIS_TOA_SecondAxis
AIS_TOA_ThirdAxis = _AIS.AIS_TOA_ThirdAxis
AIS_TOAX_Unknown = _AIS.AIS_TOAX_Unknown
AIS_TOAX_XAxis = _AIS.AIS_TOAX_XAxis
AIS_TOAX_YAxis = _AIS.AIS_TOAX_YAxis
AIS_TOAX_ZAxis = _AIS.AIS_TOAX_ZAxis
AIS_TOI_IsoU = _AIS.AIS_TOI_IsoU
AIS_TOI_IsoV = _AIS.AIS_TOI_IsoV
AIS_TOI_Both = _AIS.AIS_TOI_Both
AIS_TOPL_Unknown = _AIS.AIS_TOPL_Unknown
AIS_TOPL_XYPlane = _AIS.AIS_TOPL_XYPlane
AIS_TOPL_XZPlane = _AIS.AIS_TOPL_XZPlane
AIS_TOPL_YZPlane = _AIS.AIS_TOPL_YZPlane
AIS_ViewInputBufferType_UI = _AIS.AIS_ViewInputBufferType_UI
AIS_ViewInputBufferType_GL = _AIS.AIS_ViewInputBufferType_GL
AIS_ViewSelectionTool_Picking = _AIS.AIS_ViewSelectionTool_Picking
AIS_ViewSelectionTool_RubberBand = _AIS.AIS_ViewSelectionTool_RubberBand
AIS_ViewSelectionTool_Polygon = _AIS.AIS_ViewSelectionTool_Polygon
AIS_ViewSelectionTool_ZoomWindow = _AIS.AIS_ViewSelectionTool_ZoomWindow
AIS_WalkRotation_Yaw = _AIS.AIS_WalkRotation_Yaw
AIS_WalkRotation_Pitch = _AIS.AIS_WalkRotation_Pitch
AIS_WalkRotation_Roll = _AIS.AIS_WalkRotation_Roll
AIS_WalkTranslation_Forward = _AIS.AIS_WalkTranslation_Forward
AIS_WalkTranslation_Side = _AIS.AIS_WalkTranslation_Side
AIS_WalkTranslation_Up = _AIS.AIS_WalkTranslation_Up


class AIS_DisplayMode(IntEnum):
	AIS_WireFrame = 0
	AIS_Shaded = 1
AIS_WireFrame = AIS_DisplayMode.AIS_WireFrame
AIS_Shaded = AIS_DisplayMode.AIS_Shaded

class AIS_DragAction(IntEnum):
	AIS_DragAction_Start = 0
	AIS_DragAction_Update = 1
	AIS_DragAction_Stop = 2
	AIS_DragAction_Abort = 3
AIS_DragAction_Start = AIS_DragAction.AIS_DragAction_Start
AIS_DragAction_Update = AIS_DragAction.AIS_DragAction_Update
AIS_DragAction_Stop = AIS_DragAction.AIS_DragAction_Stop
AIS_DragAction_Abort = AIS_DragAction.AIS_DragAction_Abort

class AIS_KindOfInteractive(IntEnum):
	AIS_KindOfInteractive_None = 0
	AIS_KindOfInteractive_Datum = 1
	AIS_KindOfInteractive_Shape = 2
	AIS_KindOfInteractive_Object = 3
	AIS_KindOfInteractive_Relation = 4
	AIS_KindOfInteractive_Dimension = 5
	AIS_KindOfInteractive_LightSource = 6
	AIS_KOI_None = AIS_KindOfInteractive_None
	AIS_KOI_Datum = AIS_KindOfInteractive_Datum
	AIS_KOI_Shape = AIS_KindOfInteractive_Shape
	AIS_KOI_Object = AIS_KindOfInteractive_Object
	AIS_KOI_Relation = AIS_KindOfInteractive_Relation
	AIS_KOI_Dimension = AIS_KindOfInteractive_Dimension
AIS_KindOfInteractive_None = AIS_KindOfInteractive.AIS_KindOfInteractive_None
AIS_KindOfInteractive_Datum = AIS_KindOfInteractive.AIS_KindOfInteractive_Datum
AIS_KindOfInteractive_Shape = AIS_KindOfInteractive.AIS_KindOfInteractive_Shape
AIS_KindOfInteractive_Object = AIS_KindOfInteractive.AIS_KindOfInteractive_Object
AIS_KindOfInteractive_Relation = AIS_KindOfInteractive.AIS_KindOfInteractive_Relation
AIS_KindOfInteractive_Dimension = AIS_KindOfInteractive.AIS_KindOfInteractive_Dimension
AIS_KindOfInteractive_LightSource = AIS_KindOfInteractive.AIS_KindOfInteractive_LightSource
AIS_KOI_None = AIS_KindOfInteractive.AIS_KOI_None
AIS_KOI_Datum = AIS_KindOfInteractive.AIS_KOI_Datum
AIS_KOI_Shape = AIS_KindOfInteractive.AIS_KOI_Shape
AIS_KOI_Object = AIS_KindOfInteractive.AIS_KOI_Object
AIS_KOI_Relation = AIS_KindOfInteractive.AIS_KOI_Relation
AIS_KOI_Dimension = AIS_KindOfInteractive.AIS_KOI_Dimension

class AIS_ManipulatorMode(IntEnum):
	AIS_MM_None = 0
	AIS_MM_Translation = 1
	AIS_MM_Rotation = 2
	AIS_MM_Scaling = 3
	AIS_MM_TranslationPlane = 4
AIS_MM_None = AIS_ManipulatorMode.AIS_MM_None
AIS_MM_Translation = AIS_ManipulatorMode.AIS_MM_Translation
AIS_MM_Rotation = AIS_ManipulatorMode.AIS_MM_Rotation
AIS_MM_Scaling = AIS_ManipulatorMode.AIS_MM_Scaling
AIS_MM_TranslationPlane = AIS_ManipulatorMode.AIS_MM_TranslationPlane

class AIS_MouseGesture(IntEnum):
	AIS_MouseGesture_NONE = 0
	AIS_MouseGesture_SelectRectangle = 1
	AIS_MouseGesture_SelectLasso = 2
	AIS_MouseGesture_Zoom = 3
	AIS_MouseGesture_ZoomWindow = 4
	AIS_MouseGesture_Pan = 5
	AIS_MouseGesture_RotateOrbit = 6
	AIS_MouseGesture_RotateView = 7
	AIS_MouseGesture_Drag = 8
AIS_MouseGesture_NONE = AIS_MouseGesture.AIS_MouseGesture_NONE
AIS_MouseGesture_SelectRectangle = AIS_MouseGesture.AIS_MouseGesture_SelectRectangle
AIS_MouseGesture_SelectLasso = AIS_MouseGesture.AIS_MouseGesture_SelectLasso
AIS_MouseGesture_Zoom = AIS_MouseGesture.AIS_MouseGesture_Zoom
AIS_MouseGesture_ZoomWindow = AIS_MouseGesture.AIS_MouseGesture_ZoomWindow
AIS_MouseGesture_Pan = AIS_MouseGesture.AIS_MouseGesture_Pan
AIS_MouseGesture_RotateOrbit = AIS_MouseGesture.AIS_MouseGesture_RotateOrbit
AIS_MouseGesture_RotateView = AIS_MouseGesture.AIS_MouseGesture_RotateView
AIS_MouseGesture_Drag = AIS_MouseGesture.AIS_MouseGesture_Drag

class AIS_NavigationMode(IntEnum):
	AIS_NavigationMode_Orbit = 0
	AIS_NavigationMode_FirstPersonFlight = 1
	AIS_NavigationMode_FirstPersonWalk = 2
AIS_NavigationMode_Orbit = AIS_NavigationMode.AIS_NavigationMode_Orbit
AIS_NavigationMode_FirstPersonFlight = AIS_NavigationMode.AIS_NavigationMode_FirstPersonFlight
AIS_NavigationMode_FirstPersonWalk = AIS_NavigationMode.AIS_NavigationMode_FirstPersonWalk

class AIS_RotationMode(IntEnum):
	AIS_RotationMode_BndBoxActive = 0
	AIS_RotationMode_PickLast = 1
	AIS_RotationMode_PickCenter = 2
	AIS_RotationMode_CameraAt = 3
	AIS_RotationMode_BndBoxScene = 4
AIS_RotationMode_BndBoxActive = AIS_RotationMode.AIS_RotationMode_BndBoxActive
AIS_RotationMode_PickLast = AIS_RotationMode.AIS_RotationMode_PickLast
AIS_RotationMode_PickCenter = AIS_RotationMode.AIS_RotationMode_PickCenter
AIS_RotationMode_CameraAt = AIS_RotationMode.AIS_RotationMode_CameraAt
AIS_RotationMode_BndBoxScene = AIS_RotationMode.AIS_RotationMode_BndBoxScene

class AIS_SelectStatus(IntEnum):
	AIS_SS_Added = 0
	AIS_SS_Removed = 1
	AIS_SS_NotDone = 2
AIS_SS_Added = AIS_SelectStatus.AIS_SS_Added
AIS_SS_Removed = AIS_SelectStatus.AIS_SS_Removed
AIS_SS_NotDone = AIS_SelectStatus.AIS_SS_NotDone

class AIS_SelectionModesConcurrency(IntEnum):
	AIS_SelectionModesConcurrency_Single = 0
	AIS_SelectionModesConcurrency_GlobalOrLocal = 1
	AIS_SelectionModesConcurrency_Multiple = 2
AIS_SelectionModesConcurrency_Single = AIS_SelectionModesConcurrency.AIS_SelectionModesConcurrency_Single
AIS_SelectionModesConcurrency_GlobalOrLocal = AIS_SelectionModesConcurrency.AIS_SelectionModesConcurrency_GlobalOrLocal
AIS_SelectionModesConcurrency_Multiple = AIS_SelectionModesConcurrency.AIS_SelectionModesConcurrency_Multiple

class AIS_SelectionScheme(IntEnum):
	AIS_SelectionScheme_UNKNOWN = - 1
	AIS_SelectionScheme_Replace = 0
	AIS_SelectionScheme_Add = 1
	AIS_SelectionScheme_Remove = 2
	AIS_SelectionScheme_XOR = 3
	AIS_SelectionScheme_Clear = 4
	AIS_SelectionScheme_ReplaceExtra = 5
AIS_SelectionScheme_UNKNOWN = AIS_SelectionScheme.AIS_SelectionScheme_UNKNOWN
AIS_SelectionScheme_Replace = AIS_SelectionScheme.AIS_SelectionScheme_Replace
AIS_SelectionScheme_Add = AIS_SelectionScheme.AIS_SelectionScheme_Add
AIS_SelectionScheme_Remove = AIS_SelectionScheme.AIS_SelectionScheme_Remove
AIS_SelectionScheme_XOR = AIS_SelectionScheme.AIS_SelectionScheme_XOR
AIS_SelectionScheme_Clear = AIS_SelectionScheme.AIS_SelectionScheme_Clear
AIS_SelectionScheme_ReplaceExtra = AIS_SelectionScheme.AIS_SelectionScheme_ReplaceExtra

class AIS_StatusOfDetection(IntEnum):
	AIS_SOD_Error = 0
	AIS_SOD_Nothing = 1
	AIS_SOD_AllBad = 2
	AIS_SOD_Selected = 3
	AIS_SOD_OnlyOneDetected = 4
	AIS_SOD_OnlyOneGood = 5
	AIS_SOD_SeveralGood = 6
AIS_SOD_Error = AIS_StatusOfDetection.AIS_SOD_Error
AIS_SOD_Nothing = AIS_StatusOfDetection.AIS_SOD_Nothing
AIS_SOD_AllBad = AIS_StatusOfDetection.AIS_SOD_AllBad
AIS_SOD_Selected = AIS_StatusOfDetection.AIS_SOD_Selected
AIS_SOD_OnlyOneDetected = AIS_StatusOfDetection.AIS_SOD_OnlyOneDetected
AIS_SOD_OnlyOneGood = AIS_StatusOfDetection.AIS_SOD_OnlyOneGood
AIS_SOD_SeveralGood = AIS_StatusOfDetection.AIS_SOD_SeveralGood

class AIS_StatusOfPick(IntEnum):
	AIS_SOP_Error = 0
	AIS_SOP_NothingSelected = 1
	AIS_SOP_Removed = 2
	AIS_SOP_OneSelected = 3
	AIS_SOP_SeveralSelected = 4
AIS_SOP_Error = AIS_StatusOfPick.AIS_SOP_Error
AIS_SOP_NothingSelected = AIS_StatusOfPick.AIS_SOP_NothingSelected
AIS_SOP_Removed = AIS_StatusOfPick.AIS_SOP_Removed
AIS_SOP_OneSelected = AIS_StatusOfPick.AIS_SOP_OneSelected
AIS_SOP_SeveralSelected = AIS_StatusOfPick.AIS_SOP_SeveralSelected

class AIS_TrihedronSelectionMode(IntEnum):
	AIS_TrihedronSelectionMode_EntireObject = 0
	AIS_TrihedronSelectionMode_Origin = 1
	AIS_TrihedronSelectionMode_Axes = 2
	AIS_TrihedronSelectionMode_MainPlanes = 3
AIS_TrihedronSelectionMode_EntireObject = AIS_TrihedronSelectionMode.AIS_TrihedronSelectionMode_EntireObject
AIS_TrihedronSelectionMode_Origin = AIS_TrihedronSelectionMode.AIS_TrihedronSelectionMode_Origin
AIS_TrihedronSelectionMode_Axes = AIS_TrihedronSelectionMode.AIS_TrihedronSelectionMode_Axes
AIS_TrihedronSelectionMode_MainPlanes = AIS_TrihedronSelectionMode.AIS_TrihedronSelectionMode_MainPlanes

class AIS_TypeOfAttribute(IntEnum):
	AIS_TOA_Line = 0
	AIS_TOA_Dimension = 1
	AIS_TOA_Wire = 2
	AIS_TOA_Plane = 3
	AIS_TOA_Vector = 4
	AIS_TOA_UIso = 5
	AIS_TOA_VIso = 6
	AIS_TOA_Free = 7
	AIS_TOA_UnFree = 8
	AIS_TOA_Section = 9
	AIS_TOA_Hidden = 10
	AIS_TOA_Seen = 11
	AIS_TOA_FaceBoundary = 12
	AIS_TOA_FirstAxis = 13
	AIS_TOA_SecondAxis = 14
	AIS_TOA_ThirdAxis = 15
AIS_TOA_Line = AIS_TypeOfAttribute.AIS_TOA_Line
AIS_TOA_Dimension = AIS_TypeOfAttribute.AIS_TOA_Dimension
AIS_TOA_Wire = AIS_TypeOfAttribute.AIS_TOA_Wire
AIS_TOA_Plane = AIS_TypeOfAttribute.AIS_TOA_Plane
AIS_TOA_Vector = AIS_TypeOfAttribute.AIS_TOA_Vector
AIS_TOA_UIso = AIS_TypeOfAttribute.AIS_TOA_UIso
AIS_TOA_VIso = AIS_TypeOfAttribute.AIS_TOA_VIso
AIS_TOA_Free = AIS_TypeOfAttribute.AIS_TOA_Free
AIS_TOA_UnFree = AIS_TypeOfAttribute.AIS_TOA_UnFree
AIS_TOA_Section = AIS_TypeOfAttribute.AIS_TOA_Section
AIS_TOA_Hidden = AIS_TypeOfAttribute.AIS_TOA_Hidden
AIS_TOA_Seen = AIS_TypeOfAttribute.AIS_TOA_Seen
AIS_TOA_FaceBoundary = AIS_TypeOfAttribute.AIS_TOA_FaceBoundary
AIS_TOA_FirstAxis = AIS_TypeOfAttribute.AIS_TOA_FirstAxis
AIS_TOA_SecondAxis = AIS_TypeOfAttribute.AIS_TOA_SecondAxis
AIS_TOA_ThirdAxis = AIS_TypeOfAttribute.AIS_TOA_ThirdAxis

class AIS_TypeOfAxis(IntEnum):
	AIS_TOAX_Unknown = 0
	AIS_TOAX_XAxis = 1
	AIS_TOAX_YAxis = 2
	AIS_TOAX_ZAxis = 3
AIS_TOAX_Unknown = AIS_TypeOfAxis.AIS_TOAX_Unknown
AIS_TOAX_XAxis = AIS_TypeOfAxis.AIS_TOAX_XAxis
AIS_TOAX_YAxis = AIS_TypeOfAxis.AIS_TOAX_YAxis
AIS_TOAX_ZAxis = AIS_TypeOfAxis.AIS_TOAX_ZAxis

class AIS_TypeOfIso(IntEnum):
	AIS_TOI_IsoU = 0
	AIS_TOI_IsoV = 1
	AIS_TOI_Both = 2
AIS_TOI_IsoU = AIS_TypeOfIso.AIS_TOI_IsoU
AIS_TOI_IsoV = AIS_TypeOfIso.AIS_TOI_IsoV
AIS_TOI_Both = AIS_TypeOfIso.AIS_TOI_Both

class AIS_TypeOfPlane(IntEnum):
	AIS_TOPL_Unknown = 0
	AIS_TOPL_XYPlane = 1
	AIS_TOPL_XZPlane = 2
	AIS_TOPL_YZPlane = 3
AIS_TOPL_Unknown = AIS_TypeOfPlane.AIS_TOPL_Unknown
AIS_TOPL_XYPlane = AIS_TypeOfPlane.AIS_TOPL_XYPlane
AIS_TOPL_XZPlane = AIS_TypeOfPlane.AIS_TOPL_XZPlane
AIS_TOPL_YZPlane = AIS_TypeOfPlane.AIS_TOPL_YZPlane

class AIS_ViewInputBufferType(IntEnum):
	AIS_ViewInputBufferType_UI = 0
	AIS_ViewInputBufferType_GL = 1
AIS_ViewInputBufferType_UI = AIS_ViewInputBufferType.AIS_ViewInputBufferType_UI
AIS_ViewInputBufferType_GL = AIS_ViewInputBufferType.AIS_ViewInputBufferType_GL

class AIS_ViewSelectionTool(IntEnum):
	AIS_ViewSelectionTool_Picking = 0
	AIS_ViewSelectionTool_RubberBand = 1
	AIS_ViewSelectionTool_Polygon = 2
	AIS_ViewSelectionTool_ZoomWindow = 3
AIS_ViewSelectionTool_Picking = AIS_ViewSelectionTool.AIS_ViewSelectionTool_Picking
AIS_ViewSelectionTool_RubberBand = AIS_ViewSelectionTool.AIS_ViewSelectionTool_RubberBand
AIS_ViewSelectionTool_Polygon = AIS_ViewSelectionTool.AIS_ViewSelectionTool_Polygon
AIS_ViewSelectionTool_ZoomWindow = AIS_ViewSelectionTool.AIS_ViewSelectionTool_ZoomWindow

class AIS_WalkRotation(IntEnum):
	AIS_WalkRotation_Yaw = 0
	AIS_WalkRotation_Pitch = 1
	AIS_WalkRotation_Roll = 2
AIS_WalkRotation_Yaw = AIS_WalkRotation.AIS_WalkRotation_Yaw
AIS_WalkRotation_Pitch = AIS_WalkRotation.AIS_WalkRotation_Pitch
AIS_WalkRotation_Roll = AIS_WalkRotation.AIS_WalkRotation_Roll

class AIS_WalkTranslation(IntEnum):
	AIS_WalkTranslation_Forward = 0
	AIS_WalkTranslation_Side = 1
	AIS_WalkTranslation_Up = 2
AIS_WalkTranslation_Forward = AIS_WalkTranslation.AIS_WalkTranslation_Forward
AIS_WalkTranslation_Side = AIS_WalkTranslation.AIS_WalkTranslation_Side
AIS_WalkTranslation_Up = AIS_WalkTranslation.AIS_WalkTranslation_Up


def Handle_AIS_Animation_Create():
    return _AIS.Handle_AIS_Animation_Create()

def Handle_AIS_Animation_DownCast(t):
    return _AIS.Handle_AIS_Animation_DownCast(t)

def Handle_AIS_Animation_IsNull(t):
    return _AIS.Handle_AIS_Animation_IsNull(t)

def Handle_AIS_AttributeFilter_Create():
    return _AIS.Handle_AIS_AttributeFilter_Create()

def Handle_AIS_AttributeFilter_DownCast(t):
    return _AIS.Handle_AIS_AttributeFilter_DownCast(t)

def Handle_AIS_AttributeFilter_IsNull(t):
    return _AIS.Handle_AIS_AttributeFilter_IsNull(t)

def Handle_AIS_BadEdgeFilter_Create():
    return _AIS.Handle_AIS_BadEdgeFilter_Create()

def Handle_AIS_BadEdgeFilter_DownCast(t):
    return _AIS.Handle_AIS_BadEdgeFilter_DownCast(t)

def Handle_AIS_BadEdgeFilter_IsNull(t):
    return _AIS.Handle_AIS_BadEdgeFilter_IsNull(t)

def Handle_AIS_C0RegularityFilter_Create():
    return _AIS.Handle_AIS_C0RegularityFilter_Create()

def Handle_AIS_C0RegularityFilter_DownCast(t):
    return _AIS.Handle_AIS_C0RegularityFilter_DownCast(t)

def Handle_AIS_C0RegularityFilter_IsNull(t):
    return _AIS.Handle_AIS_C0RegularityFilter_IsNull(t)

def Handle_AIS_ColoredDrawer_Create():
    return _AIS.Handle_AIS_ColoredDrawer_Create()

def Handle_AIS_ColoredDrawer_DownCast(t):
    return _AIS.Handle_AIS_ColoredDrawer_DownCast(t)

def Handle_AIS_ColoredDrawer_IsNull(t):
    return _AIS.Handle_AIS_ColoredDrawer_IsNull(t)

def Handle_AIS_ExclusionFilter_Create():
    return _AIS.Handle_AIS_ExclusionFilter_Create()

def Handle_AIS_ExclusionFilter_DownCast(t):
    return _AIS.Handle_AIS_ExclusionFilter_DownCast(t)

def Handle_AIS_ExclusionFilter_IsNull(t):
    return _AIS.Handle_AIS_ExclusionFilter_IsNull(t)

def Handle_AIS_GlobalStatus_Create():
    return _AIS.Handle_AIS_GlobalStatus_Create()

def Handle_AIS_GlobalStatus_DownCast(t):
    return _AIS.Handle_AIS_GlobalStatus_DownCast(t)

def Handle_AIS_GlobalStatus_IsNull(t):
    return _AIS.Handle_AIS_GlobalStatus_IsNull(t)

def Handle_AIS_InteractiveContext_Create():
    return _AIS.Handle_AIS_InteractiveContext_Create()

def Handle_AIS_InteractiveContext_DownCast(t):
    return _AIS.Handle_AIS_InteractiveContext_DownCast(t)

def Handle_AIS_InteractiveContext_IsNull(t):
    return _AIS.Handle_AIS_InteractiveContext_IsNull(t)

def Handle_AIS_InteractiveObject_Create():
    return _AIS.Handle_AIS_InteractiveObject_Create()

def Handle_AIS_InteractiveObject_DownCast(t):
    return _AIS.Handle_AIS_InteractiveObject_DownCast(t)

def Handle_AIS_InteractiveObject_IsNull(t):
    return _AIS.Handle_AIS_InteractiveObject_IsNull(t)

def Handle_AIS_ManipulatorOwner_Create():
    return _AIS.Handle_AIS_ManipulatorOwner_Create()

def Handle_AIS_ManipulatorOwner_DownCast(t):
    return _AIS.Handle_AIS_ManipulatorOwner_DownCast(t)

def Handle_AIS_ManipulatorOwner_IsNull(t):
    return _AIS.Handle_AIS_ManipulatorOwner_IsNull(t)

def Handle_AIS_Selection_Create():
    return _AIS.Handle_AIS_Selection_Create()

def Handle_AIS_Selection_DownCast(t):
    return _AIS.Handle_AIS_Selection_DownCast(t)

def Handle_AIS_Selection_IsNull(t):
    return _AIS.Handle_AIS_Selection_IsNull(t)

def Handle_AIS_TrihedronOwner_Create():
    return _AIS.Handle_AIS_TrihedronOwner_Create()

def Handle_AIS_TrihedronOwner_DownCast(t):
    return _AIS.Handle_AIS_TrihedronOwner_DownCast(t)

def Handle_AIS_TrihedronOwner_IsNull(t):
    return _AIS.Handle_AIS_TrihedronOwner_IsNull(t)

def Handle_AIS_TypeFilter_Create():
    return _AIS.Handle_AIS_TypeFilter_Create()

def Handle_AIS_TypeFilter_DownCast(t):
    return _AIS.Handle_AIS_TypeFilter_DownCast(t)

def Handle_AIS_TypeFilter_IsNull(t):
    return _AIS.Handle_AIS_TypeFilter_IsNull(t)

def Handle_AIS_AnimationCamera_Create():
    return _AIS.Handle_AIS_AnimationCamera_Create()

def Handle_AIS_AnimationCamera_DownCast(t):
    return _AIS.Handle_AIS_AnimationCamera_DownCast(t)

def Handle_AIS_AnimationCamera_IsNull(t):
    return _AIS.Handle_AIS_AnimationCamera_IsNull(t)

def Handle_AIS_Axis_Create():
    return _AIS.Handle_AIS_Axis_Create()

def Handle_AIS_Axis_DownCast(t):
    return _AIS.Handle_AIS_Axis_DownCast(t)

def Handle_AIS_Axis_IsNull(t):
    return _AIS.Handle_AIS_Axis_IsNull(t)

def Handle_AIS_BaseAnimationObject_Create():
    return _AIS.Handle_AIS_BaseAnimationObject_Create()

def Handle_AIS_BaseAnimationObject_DownCast(t):
    return _AIS.Handle_AIS_BaseAnimationObject_DownCast(t)

def Handle_AIS_BaseAnimationObject_IsNull(t):
    return _AIS.Handle_AIS_BaseAnimationObject_IsNull(t)

def Handle_AIS_Circle_Create():
    return _AIS.Handle_AIS_Circle_Create()

def Handle_AIS_Circle_DownCast(t):
    return _AIS.Handle_AIS_Circle_DownCast(t)

def Handle_AIS_Circle_IsNull(t):
    return _AIS.Handle_AIS_Circle_IsNull(t)

def Handle_AIS_ColorScale_Create():
    return _AIS.Handle_AIS_ColorScale_Create()

def Handle_AIS_ColorScale_DownCast(t):
    return _AIS.Handle_AIS_ColorScale_DownCast(t)

def Handle_AIS_ColorScale_IsNull(t):
    return _AIS.Handle_AIS_ColorScale_IsNull(t)

def Handle_AIS_ConnectedInteractive_Create():
    return _AIS.Handle_AIS_ConnectedInteractive_Create()

def Handle_AIS_ConnectedInteractive_DownCast(t):
    return _AIS.Handle_AIS_ConnectedInteractive_DownCast(t)

def Handle_AIS_ConnectedInteractive_IsNull(t):
    return _AIS.Handle_AIS_ConnectedInteractive_IsNull(t)

def Handle_AIS_Line_Create():
    return _AIS.Handle_AIS_Line_Create()

def Handle_AIS_Line_DownCast(t):
    return _AIS.Handle_AIS_Line_DownCast(t)

def Handle_AIS_Line_IsNull(t):
    return _AIS.Handle_AIS_Line_IsNull(t)

def Handle_AIS_Manipulator_Create():
    return _AIS.Handle_AIS_Manipulator_Create()

def Handle_AIS_Manipulator_DownCast(t):
    return _AIS.Handle_AIS_Manipulator_DownCast(t)

def Handle_AIS_Manipulator_IsNull(t):
    return _AIS.Handle_AIS_Manipulator_IsNull(t)

def Handle_AIS_MultipleConnectedInteractive_Create():
    return _AIS.Handle_AIS_MultipleConnectedInteractive_Create()

def Handle_AIS_MultipleConnectedInteractive_DownCast(t):
    return _AIS.Handle_AIS_MultipleConnectedInteractive_DownCast(t)

def Handle_AIS_MultipleConnectedInteractive_IsNull(t):
    return _AIS.Handle_AIS_MultipleConnectedInteractive_IsNull(t)

def Handle_AIS_Plane_Create():
    return _AIS.Handle_AIS_Plane_Create()

def Handle_AIS_Plane_DownCast(t):
    return _AIS.Handle_AIS_Plane_DownCast(t)

def Handle_AIS_Plane_IsNull(t):
    return _AIS.Handle_AIS_Plane_IsNull(t)

def Handle_AIS_PlaneTrihedron_Create():
    return _AIS.Handle_AIS_PlaneTrihedron_Create()

def Handle_AIS_PlaneTrihedron_DownCast(t):
    return _AIS.Handle_AIS_PlaneTrihedron_DownCast(t)

def Handle_AIS_PlaneTrihedron_IsNull(t):
    return _AIS.Handle_AIS_PlaneTrihedron_IsNull(t)

def Handle_AIS_Point_Create():
    return _AIS.Handle_AIS_Point_Create()

def Handle_AIS_Point_DownCast(t):
    return _AIS.Handle_AIS_Point_DownCast(t)

def Handle_AIS_Point_IsNull(t):
    return _AIS.Handle_AIS_Point_IsNull(t)

def Handle_AIS_PointCloud_Create():
    return _AIS.Handle_AIS_PointCloud_Create()

def Handle_AIS_PointCloud_DownCast(t):
    return _AIS.Handle_AIS_PointCloud_DownCast(t)

def Handle_AIS_PointCloud_IsNull(t):
    return _AIS.Handle_AIS_PointCloud_IsNull(t)

def Handle_AIS_RubberBand_Create():
    return _AIS.Handle_AIS_RubberBand_Create()

def Handle_AIS_RubberBand_DownCast(t):
    return _AIS.Handle_AIS_RubberBand_DownCast(t)

def Handle_AIS_RubberBand_IsNull(t):
    return _AIS.Handle_AIS_RubberBand_IsNull(t)

def Handle_AIS_Shape_Create():
    return _AIS.Handle_AIS_Shape_Create()

def Handle_AIS_Shape_DownCast(t):
    return _AIS.Handle_AIS_Shape_DownCast(t)

def Handle_AIS_Shape_IsNull(t):
    return _AIS.Handle_AIS_Shape_IsNull(t)

def Handle_AIS_SignatureFilter_Create():
    return _AIS.Handle_AIS_SignatureFilter_Create()

def Handle_AIS_SignatureFilter_DownCast(t):
    return _AIS.Handle_AIS_SignatureFilter_DownCast(t)

def Handle_AIS_SignatureFilter_IsNull(t):
    return _AIS.Handle_AIS_SignatureFilter_IsNull(t)

def Handle_AIS_TextLabel_Create():
    return _AIS.Handle_AIS_TextLabel_Create()

def Handle_AIS_TextLabel_DownCast(t):
    return _AIS.Handle_AIS_TextLabel_DownCast(t)

def Handle_AIS_TextLabel_IsNull(t):
    return _AIS.Handle_AIS_TextLabel_IsNull(t)

def Handle_AIS_Triangulation_Create():
    return _AIS.Handle_AIS_Triangulation_Create()

def Handle_AIS_Triangulation_DownCast(t):
    return _AIS.Handle_AIS_Triangulation_DownCast(t)

def Handle_AIS_Triangulation_IsNull(t):
    return _AIS.Handle_AIS_Triangulation_IsNull(t)

def Handle_AIS_Trihedron_Create():
    return _AIS.Handle_AIS_Trihedron_Create()

def Handle_AIS_Trihedron_DownCast(t):
    return _AIS.Handle_AIS_Trihedron_DownCast(t)

def Handle_AIS_Trihedron_IsNull(t):
    return _AIS.Handle_AIS_Trihedron_IsNull(t)

def Handle_AIS_AnimationAxisRotation_Create():
    return _AIS.Handle_AIS_AnimationAxisRotation_Create()

def Handle_AIS_AnimationAxisRotation_DownCast(t):
    return _AIS.Handle_AIS_AnimationAxisRotation_DownCast(t)

def Handle_AIS_AnimationAxisRotation_IsNull(t):
    return _AIS.Handle_AIS_AnimationAxisRotation_IsNull(t)

def Handle_AIS_AnimationObject_Create():
    return _AIS.Handle_AIS_AnimationObject_Create()

def Handle_AIS_AnimationObject_DownCast(t):
    return _AIS.Handle_AIS_AnimationObject_DownCast(t)

def Handle_AIS_AnimationObject_IsNull(t):
    return _AIS.Handle_AIS_AnimationObject_IsNull(t)

def Handle_AIS_ColoredShape_Create():
    return _AIS.Handle_AIS_ColoredShape_Create()

def Handle_AIS_ColoredShape_DownCast(t):
    return _AIS.Handle_AIS_ColoredShape_DownCast(t)

def Handle_AIS_ColoredShape_IsNull(t):
    return _AIS.Handle_AIS_ColoredShape_IsNull(t)

def Handle_AIS_TexturedShape_Create():
    return _AIS.Handle_AIS_TexturedShape_Create()

def Handle_AIS_TexturedShape_DownCast(t):
    return _AIS.Handle_AIS_TexturedShape_DownCast(t)

def Handle_AIS_TexturedShape_IsNull(t):
    return _AIS.Handle_AIS_TexturedShape_IsNull(t)
class AIS_DataMapOfIOStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AIS.AIS_DataMapOfIOStatus_begin(self)

    def end(self):
        return _AIS.AIS_DataMapOfIOStatus_end(self)

    def cbegin(self):
        return _AIS.AIS_DataMapOfIOStatus_cbegin(self)

    def cend(self):
        return _AIS.AIS_DataMapOfIOStatus_cend(self)

    def __init__(self, *args):
        _AIS.AIS_DataMapOfIOStatus_swiginit(self, _AIS.new_AIS_DataMapOfIOStatus(*args))

    def Exchange(self, theOther):
        return _AIS.AIS_DataMapOfIOStatus_Exchange(self, theOther)

    def Assign(self, theOther):
        return _AIS.AIS_DataMapOfIOStatus_Assign(self, theOther)

    def Set(self, theOther):
        return _AIS.AIS_DataMapOfIOStatus_Set(self, theOther)

    def ReSize(self, N):
        return _AIS.AIS_DataMapOfIOStatus_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _AIS.AIS_DataMapOfIOStatus_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _AIS.AIS_DataMapOfIOStatus_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _AIS.AIS_DataMapOfIOStatus_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _AIS.AIS_DataMapOfIOStatus_UnBind(self, theKey)

    def Seek(self, theKey):
        return _AIS.AIS_DataMapOfIOStatus_Seek(self, theKey)

    def Find(self, *args):
        return _AIS.AIS_DataMapOfIOStatus_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _AIS.AIS_DataMapOfIOStatus_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _AIS.AIS_DataMapOfIOStatus_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _AIS.AIS_DataMapOfIOStatus___call__(self, *args)

    def Clear(self, *args):
        return _AIS.AIS_DataMapOfIOStatus_Clear(self, *args)
    __swig_destroy__ = _AIS.delete_AIS_DataMapOfIOStatus

    def Size(self):
        return _AIS.AIS_DataMapOfIOStatus_Size(self)

# Register AIS_DataMapOfIOStatus in _AIS:
_AIS.AIS_DataMapOfIOStatus_swigregister(AIS_DataMapOfIOStatus)
class AIS_DataMapOfShapeDrawer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AIS.AIS_DataMapOfShapeDrawer_begin(self)

    def end(self):
        return _AIS.AIS_DataMapOfShapeDrawer_end(self)

    def cbegin(self):
        return _AIS.AIS_DataMapOfShapeDrawer_cbegin(self)

    def cend(self):
        return _AIS.AIS_DataMapOfShapeDrawer_cend(self)

    def __init__(self, *args):
        _AIS.AIS_DataMapOfShapeDrawer_swiginit(self, _AIS.new_AIS_DataMapOfShapeDrawer(*args))

    def Exchange(self, theOther):
        return _AIS.AIS_DataMapOfShapeDrawer_Exchange(self, theOther)

    def Assign(self, theOther):
        return _AIS.AIS_DataMapOfShapeDrawer_Assign(self, theOther)

    def Set(self, theOther):
        return _AIS.AIS_DataMapOfShapeDrawer_Set(self, theOther)

    def ReSize(self, N):
        return _AIS.AIS_DataMapOfShapeDrawer_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _AIS.AIS_DataMapOfShapeDrawer_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _AIS.AIS_DataMapOfShapeDrawer_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _AIS.AIS_DataMapOfShapeDrawer_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _AIS.AIS_DataMapOfShapeDrawer_UnBind(self, theKey)

    def Seek(self, theKey):
        return _AIS.AIS_DataMapOfShapeDrawer_Seek(self, theKey)

    def Find(self, *args):
        return _AIS.AIS_DataMapOfShapeDrawer_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _AIS.AIS_DataMapOfShapeDrawer_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _AIS.AIS_DataMapOfShapeDrawer_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _AIS.AIS_DataMapOfShapeDrawer___call__(self, *args)

    def Clear(self, *args):
        return _AIS.AIS_DataMapOfShapeDrawer_Clear(self, *args)
    __swig_destroy__ = _AIS.delete_AIS_DataMapOfShapeDrawer

    def Size(self):
        return _AIS.AIS_DataMapOfShapeDrawer_Size(self)

# Register AIS_DataMapOfShapeDrawer in _AIS:
_AIS.AIS_DataMapOfShapeDrawer_swigregister(AIS_DataMapOfShapeDrawer)
class AIS_ListIteratorOfListOfInteractive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AIS.AIS_ListIteratorOfListOfInteractive_swiginit(self, _AIS.new_AIS_ListIteratorOfListOfInteractive(*args))

    def More(self):
        return _AIS.AIS_ListIteratorOfListOfInteractive_More(self)

    def Next(self):
        return _AIS.AIS_ListIteratorOfListOfInteractive_Next(self)

    def Value(self):
        return _AIS.AIS_ListIteratorOfListOfInteractive_Value(self)

    def ChangeValue(self):
        return _AIS.AIS_ListIteratorOfListOfInteractive_ChangeValue(self)
    __swig_destroy__ = _AIS.delete_AIS_ListIteratorOfListOfInteractive

# Register AIS_ListIteratorOfListOfInteractive in _AIS:
_AIS.AIS_ListIteratorOfListOfInteractive_swigregister(AIS_ListIteratorOfListOfInteractive)
class AIS_ListOfInteractive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AIS.AIS_ListOfInteractive_begin(self)

    def end(self):
        return _AIS.AIS_ListOfInteractive_end(self)

    def cbegin(self):
        return _AIS.AIS_ListOfInteractive_cbegin(self)

    def cend(self):
        return _AIS.AIS_ListOfInteractive_cend(self)

    def __init__(self, *args):
        _AIS.AIS_ListOfInteractive_swiginit(self, _AIS.new_AIS_ListOfInteractive(*args))

    def Size(self):
        return _AIS.AIS_ListOfInteractive_Size(self)

    def Assign(self, theOther):
        return _AIS.AIS_ListOfInteractive_Assign(self, theOther)

    def Set(self, theOther):
        return _AIS.AIS_ListOfInteractive_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _AIS.AIS_ListOfInteractive_Clear(self, theAllocator)

    def First(self):
        return _AIS.AIS_ListOfInteractive_First(self)

    def Last(self):
        return _AIS.AIS_ListOfInteractive_Last(self)

    def Append(self, *args):
        return _AIS.AIS_ListOfInteractive_Append(self, *args)

    def Prepend(self, *args):
        return _AIS.AIS_ListOfInteractive_Prepend(self, *args)

    def RemoveFirst(self):
        return _AIS.AIS_ListOfInteractive_RemoveFirst(self)

    def Remove(self, theIter):
        return _AIS.AIS_ListOfInteractive_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _AIS.AIS_ListOfInteractive_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _AIS.AIS_ListOfInteractive_InsertAfter(self, *args)

    def Reverse(self):
        return _AIS.AIS_ListOfInteractive_Reverse(self)
    __swig_destroy__ = _AIS.delete_AIS_ListOfInteractive

    def __len__(self):
        return self.Size()


# Register AIS_ListOfInteractive in _AIS:
_AIS.AIS_ListOfInteractive_swigregister(AIS_ListOfInteractive)
class AIS_MouseGestureMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AIS.AIS_MouseGestureMap_begin(self)

    def end(self):
        return _AIS.AIS_MouseGestureMap_end(self)

    def cbegin(self):
        return _AIS.AIS_MouseGestureMap_cbegin(self)

    def cend(self):
        return _AIS.AIS_MouseGestureMap_cend(self)

    def __init__(self, *args):
        _AIS.AIS_MouseGestureMap_swiginit(self, _AIS.new_AIS_MouseGestureMap(*args))

    def Exchange(self, theOther):
        return _AIS.AIS_MouseGestureMap_Exchange(self, theOther)

    def Assign(self, theOther):
        return _AIS.AIS_MouseGestureMap_Assign(self, theOther)

    def Set(self, theOther):
        return _AIS.AIS_MouseGestureMap_Set(self, theOther)

    def ReSize(self, N):
        return _AIS.AIS_MouseGestureMap_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _AIS.AIS_MouseGestureMap_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _AIS.AIS_MouseGestureMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _AIS.AIS_MouseGestureMap_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _AIS.AIS_MouseGestureMap_UnBind(self, theKey)

    def Seek(self, theKey):
        return _AIS.AIS_MouseGestureMap_Seek(self, theKey)

    def Find(self, *args):
        return _AIS.AIS_MouseGestureMap_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _AIS.AIS_MouseGestureMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _AIS.AIS_MouseGestureMap_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _AIS.AIS_MouseGestureMap___call__(self, *args)

    def Clear(self, *args):
        return _AIS.AIS_MouseGestureMap_Clear(self, *args)
    __swig_destroy__ = _AIS.delete_AIS_MouseGestureMap

    def Size(self):
        return _AIS.AIS_MouseGestureMap_Size(self)

# Register AIS_MouseGestureMap in _AIS:
_AIS.AIS_MouseGestureMap_swigregister(AIS_MouseGestureMap)
class AIS_MouseSelectionSchemeMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AIS.AIS_MouseSelectionSchemeMap_begin(self)

    def end(self):
        return _AIS.AIS_MouseSelectionSchemeMap_end(self)

    def cbegin(self):
        return _AIS.AIS_MouseSelectionSchemeMap_cbegin(self)

    def cend(self):
        return _AIS.AIS_MouseSelectionSchemeMap_cend(self)

    def __init__(self, *args):
        _AIS.AIS_MouseSelectionSchemeMap_swiginit(self, _AIS.new_AIS_MouseSelectionSchemeMap(*args))

    def Exchange(self, theOther):
        return _AIS.AIS_MouseSelectionSchemeMap_Exchange(self, theOther)

    def Assign(self, theOther):
        return _AIS.AIS_MouseSelectionSchemeMap_Assign(self, theOther)

    def Set(self, theOther):
        return _AIS.AIS_MouseSelectionSchemeMap_Set(self, theOther)

    def ReSize(self, N):
        return _AIS.AIS_MouseSelectionSchemeMap_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _AIS.AIS_MouseSelectionSchemeMap_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _AIS.AIS_MouseSelectionSchemeMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _AIS.AIS_MouseSelectionSchemeMap_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _AIS.AIS_MouseSelectionSchemeMap_UnBind(self, theKey)

    def Seek(self, theKey):
        return _AIS.AIS_MouseSelectionSchemeMap_Seek(self, theKey)

    def Find(self, *args):
        return _AIS.AIS_MouseSelectionSchemeMap_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _AIS.AIS_MouseSelectionSchemeMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _AIS.AIS_MouseSelectionSchemeMap_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _AIS.AIS_MouseSelectionSchemeMap___call__(self, *args)

    def Clear(self, *args):
        return _AIS.AIS_MouseSelectionSchemeMap_Clear(self, *args)
    __swig_destroy__ = _AIS.delete_AIS_MouseSelectionSchemeMap

    def Size(self):
        return _AIS.AIS_MouseSelectionSchemeMap_Size(self)

# Register AIS_MouseSelectionSchemeMap in _AIS:
_AIS.AIS_MouseSelectionSchemeMap_swigregister(AIS_MouseSelectionSchemeMap)
class AIS_NArray1OfEntityOwner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AIS.AIS_NArray1OfEntityOwner_begin(self)

    def end(self):
        return _AIS.AIS_NArray1OfEntityOwner_end(self)

    def cbegin(self):
        return _AIS.AIS_NArray1OfEntityOwner_cbegin(self)

    def cend(self):
        return _AIS.AIS_NArray1OfEntityOwner_cend(self)

    def __init__(self, *args):
        _AIS.AIS_NArray1OfEntityOwner_swiginit(self, _AIS.new_AIS_NArray1OfEntityOwner(*args))

    def Init(self, theValue):
        return _AIS.AIS_NArray1OfEntityOwner_Init(self, theValue)

    def Size(self):
        return _AIS.AIS_NArray1OfEntityOwner_Size(self)

    def Length(self):
        return _AIS.AIS_NArray1OfEntityOwner_Length(self)

    def IsEmpty(self):
        return _AIS.AIS_NArray1OfEntityOwner_IsEmpty(self)

    def Lower(self):
        return _AIS.AIS_NArray1OfEntityOwner_Lower(self)

    def Upper(self):
        return _AIS.AIS_NArray1OfEntityOwner_Upper(self)

    def IsDeletable(self):
        return _AIS.AIS_NArray1OfEntityOwner_IsDeletable(self)

    def IsAllocated(self):
        return _AIS.AIS_NArray1OfEntityOwner_IsAllocated(self)

    def Assign(self, theOther):
        return _AIS.AIS_NArray1OfEntityOwner_Assign(self, theOther)

    def Move(self, theOther):
        return _AIS.AIS_NArray1OfEntityOwner_Move(self, theOther)

    def Set(self, *args):
        return _AIS.AIS_NArray1OfEntityOwner_Set(self, *args)

    def First(self):
        return _AIS.AIS_NArray1OfEntityOwner_First(self)

    def ChangeFirst(self):
        return _AIS.AIS_NArray1OfEntityOwner_ChangeFirst(self)

    def Last(self):
        return _AIS.AIS_NArray1OfEntityOwner_Last(self)

    def ChangeLast(self):
        return _AIS.AIS_NArray1OfEntityOwner_ChangeLast(self)

    def Value(self, theIndex):
        return _AIS.AIS_NArray1OfEntityOwner_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _AIS.AIS_NArray1OfEntityOwner_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _AIS.AIS_NArray1OfEntityOwner___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _AIS.AIS_NArray1OfEntityOwner_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _AIS.AIS_NArray1OfEntityOwner_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AIS.delete_AIS_NArray1OfEntityOwner

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AIS_NArray1OfEntityOwner in _AIS:
_AIS.AIS_NArray1OfEntityOwner_swigregister(AIS_NArray1OfEntityOwner)
class AIS_NListOfEntityOwner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AIS.AIS_NListOfEntityOwner_begin(self)

    def end(self):
        return _AIS.AIS_NListOfEntityOwner_end(self)

    def cbegin(self):
        return _AIS.AIS_NListOfEntityOwner_cbegin(self)

    def cend(self):
        return _AIS.AIS_NListOfEntityOwner_cend(self)

    def __init__(self, *args):
        _AIS.AIS_NListOfEntityOwner_swiginit(self, _AIS.new_AIS_NListOfEntityOwner(*args))

    def Size(self):
        return _AIS.AIS_NListOfEntityOwner_Size(self)

    def Assign(self, theOther):
        return _AIS.AIS_NListOfEntityOwner_Assign(self, theOther)

    def Set(self, theOther):
        return _AIS.AIS_NListOfEntityOwner_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _AIS.AIS_NListOfEntityOwner_Clear(self, theAllocator)

    def First(self):
        return _AIS.AIS_NListOfEntityOwner_First(self)

    def Last(self):
        return _AIS.AIS_NListOfEntityOwner_Last(self)

    def Append(self, *args):
        return _AIS.AIS_NListOfEntityOwner_Append(self, *args)

    def Prepend(self, *args):
        return _AIS.AIS_NListOfEntityOwner_Prepend(self, *args)

    def RemoveFirst(self):
        return _AIS.AIS_NListOfEntityOwner_RemoveFirst(self)

    def Remove(self, theIter):
        return _AIS.AIS_NListOfEntityOwner_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _AIS.AIS_NListOfEntityOwner_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _AIS.AIS_NListOfEntityOwner_InsertAfter(self, *args)

    def Reverse(self):
        return _AIS.AIS_NListOfEntityOwner_Reverse(self)
    __swig_destroy__ = _AIS.delete_AIS_NListOfEntityOwner

    def __len__(self):
        return self.Size()


# Register AIS_NListOfEntityOwner in _AIS:
_AIS.AIS_NListOfEntityOwner_swigregister(AIS_NListOfEntityOwner)
class ais(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        _AIS.ais_swiginit(self, _AIS.new_ais())
    __swig_destroy__ = _AIS.delete_ais

# Register ais in _AIS:
_AIS.ais_swigregister(ais)
class AIS_Animation(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theAnimationName: str

        Return
        -------
        None

        Description
        -----------
        Creates empty animation.

        """
        _AIS.AIS_Animation_swiginit(self, _AIS.new_AIS_Animation(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        theAnimation: AIS_Animation

        Return
        -------
        None

        Description
        -----------
        Add single animation to the timeline. @param theanimation input animation.

        """
        return _AIS.AIS_Animation_Add(self, *args)

    def Children(self, *args):
        r"""
        Return
        -------
        NCollection_Sequence<opencascade::handle<AIS_Animation>>

        Description
        -----------
        Return sequence of child animations.

        """
        return _AIS.AIS_Animation_Children(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clear animation timeline - remove all animations from it.

        """
        return _AIS.AIS_Animation_Clear(self, *args)

    def CopyFrom(self, *args):
        r"""

        Parameters
        ----------
        theOther: AIS_Animation

        Return
        -------
        None

        Description
        -----------
        Clears own children and then copy child animations from another object. copy also start time and duration values.

        """
        return _AIS.AIS_Animation_CopyFrom(self, *args)

    def Duration(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return duration of the animation in the timeline.

        """
        return _AIS.AIS_Animation_Duration(self, *args)

    def ElapsedTime(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return elapsed time.

        """
        return _AIS.AIS_Animation_ElapsedTime(self, *args)

    def Find(self, *args):
        r"""

        Parameters
        ----------
        theAnimationName: str

        Return
        -------
        opencascade::handle<AIS_Animation>

        Description
        -----------
        Return the child animation with the given name.

        """
        return _AIS.AIS_Animation_Find(self, *args)

    def HasOwnDuration(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if duration is defined.

        """
        return _AIS.AIS_Animation_HasOwnDuration(self, *args)

    def IsStopped(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Check if animation is to be performed in the animation timeline. return true if it is stopped of finished.

        """
        return _AIS.AIS_Animation_IsStopped(self, *args)

    def Name(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Animation name.

        """
        return _AIS.AIS_Animation_Name(self, *args)

    def OwnDuration(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return own duration of the animation in the timeline.

        """
        return _AIS.AIS_Animation_OwnDuration(self, *args)

    def Pause(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Pause the process timeline.

        """
        return _AIS.AIS_Animation_Pause(self, *args)

    def Remove(self, *args):
        r"""

        Parameters
        ----------
        theAnimation: AIS_Animation

        Return
        -------
        bool

        Description
        -----------
        Remove the child animation.

        """
        return _AIS.AIS_Animation_Remove(self, *args)

    def Replace(self, *args):
        r"""

        Parameters
        ----------
        theAnimationOld: AIS_Animation
        theAnimationNew: AIS_Animation

        Return
        -------
        bool

        Description
        -----------
        Replace the child animation.

        """
        return _AIS.AIS_Animation_Replace(self, *args)

    def SetOwnDuration(self, *args):
        r"""

        Parameters
        ----------
        theDuration: float

        Return
        -------
        None

        Description
        -----------
        Defines duration of the animation.

        """
        return _AIS.AIS_Animation_SetOwnDuration(self, *args)

    def SetStartPts(self, *args):
        r"""

        Parameters
        ----------
        thePtsStart: float

        Return
        -------
        None

        Description
        -----------
        Sets time limits for animation in the animation timeline.

        """
        return _AIS.AIS_Animation_SetStartPts(self, *args)

    def SetTimer(self, *args):
        r"""

        Parameters
        ----------
        theTimer: Media_Timer

        Return
        -------
        None

        Description
        -----------
        Set playback timer.

        """
        return _AIS.AIS_Animation_SetTimer(self, *args)

    def Start(self, *args):
        r"""

        Parameters
        ----------
        theToUpdate: bool

        Return
        -------
        None

        Description
        -----------
        Start animation. this method changes status of the animation to started. this status defines whether animation is to be performed in the timeline or not. @param thetoupdate call update() method.

        """
        return _AIS.AIS_Animation_Start(self, *args)

    def StartPts(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return start time of the animation in the timeline.

        """
        return _AIS.AIS_Animation_StartPts(self, *args)

    def StartTimer(self, *args):
        r"""

        Parameters
        ----------
        theStartPts: float
        thePlaySpeed: float
        theToUpdate: bool
        theToStopTimer: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Start animation with internally defined timer instance. calls ::start() internally. //! note, that this method initializes a timer calculating an elapsed time (presentation timestamps within ais_animation::updatetimer()), not a multimedia timer executing viewer updates at specific intervals! viewer redrawing should be managed at application level, so that ais_animation::updatetimer() is called once right before each redrawing of a viewer content. //! @param thestartpts starting timer position (presentation timestamp) @param theplayspeed playback speed (1.0 means normal speed) @param thetoupdate flag to update defined animations to specified start position @param thetostoptimer flag to pause timer at the starting position.

        """
        return _AIS.AIS_Animation_StartTimer(self, *args)

    def Stop(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Stop animation. this method changed status of the animation to stopped. this status shows that animation will not be performed in the timeline or it is finished.

        """
        return _AIS.AIS_Animation_Stop(self, *args)

    def Timer(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Media_Timer>

        Description
        -----------
        Return playback timer.

        """
        return _AIS.AIS_Animation_Timer(self, *args)

    def Update(self, *args):
        r"""

        Parameters
        ----------
        thePts: float

        Return
        -------
        bool

        Description
        -----------
        Update single frame of animation, update timer state @param thepts [in] the time moment within [0; duration()] return true if timeline is in progress.

        """
        return _AIS.AIS_Animation_Update(self, *args)

    def UpdateTimer(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Update single frame of animation, update timer state return current time of timeline progress.

        """
        return _AIS.AIS_Animation_UpdateTimer(self, *args)

    def UpdateTotalDuration(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Update total duration considering all animations on timeline.

        """
        return _AIS.AIS_Animation_UpdateTotalDuration(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Animation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Animation

# Register AIS_Animation in _AIS:
_AIS.AIS_Animation_swigregister(AIS_Animation)
class AIS_AnimationProgress(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Pts = property(_AIS.AIS_AnimationProgress_Pts_get, _AIS.AIS_AnimationProgress_Pts_set)
    LocalPts = property(_AIS.AIS_AnimationProgress_LocalPts_get, _AIS.AIS_AnimationProgress_LocalPts_set)
    LocalNormalized = property(_AIS.AIS_AnimationProgress_LocalNormalized_get, _AIS.AIS_AnimationProgress_LocalNormalized_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _AIS.AIS_AnimationProgress_swiginit(self, _AIS.new_AIS_AnimationProgress(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AnimationProgress

# Register AIS_AnimationProgress in _AIS:
_AIS.AIS_AnimationProgress_swigregister(AIS_AnimationProgress)
class AIS_AttributeFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty attribute filter object. this filter object determines whether selectable interactive objects have a non-null owner.

        Parameters
        ----------
        aCol: Quantity_NameOfColor

        Return
        -------
        None

        Description
        -----------
        Constructs an attribute filter object defined by the color attribute acol.

        Parameters
        ----------
        aWidth: float

        Return
        -------
        None

        Description
        -----------
        Constructs an attribute filter object defined by the line width attribute awidth.

        """
        _AIS.AIS_AttributeFilter_swiginit(self, _AIS.new_AIS_AttributeFilter(*args))

    def HasColor(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Indicates that the interactive object has the color setting specified by the argument acol at construction time.

        """
        return _AIS.AIS_AttributeFilter_HasColor(self, *args)

    def HasWidth(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Indicates that the interactive object has the width setting specified by the argument awidth at construction time.

        """
        return _AIS.AIS_AttributeFilter_HasWidth(self, *args)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        theCol: Quantity_NameOfColor

        Return
        -------
        None

        Description
        -----------
        Sets the color.

        """
        return _AIS.AIS_AttributeFilter_SetColor(self, *args)

    def SetWidth(self, *args):
        r"""

        Parameters
        ----------
        theWidth: float

        Return
        -------
        None

        Description
        -----------
        Sets the line width.

        """
        return _AIS.AIS_AttributeFilter_SetWidth(self, *args)

    def UnsetColor(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Removes the setting for color from the filter.

        """
        return _AIS.AIS_AttributeFilter_UnsetColor(self, *args)

    def UnsetWidth(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Removes the setting for width from the filter.

        """
        return _AIS.AIS_AttributeFilter_UnsetWidth(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_AttributeFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AttributeFilter

# Register AIS_AttributeFilter in _AIS:
_AIS.AIS_AttributeFilter_swigregister(AIS_AttributeFilter)
class AIS_BadEdgeFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty filter object for bad edges.

        """
        _AIS.AIS_BadEdgeFilter_swiginit(self, _AIS.new_AIS_BadEdgeFilter(*args))

    def AddEdge(self, *args):
        r"""

        Parameters
        ----------
        anEdge: TopoDS_Edge
        Index: int

        Return
        -------
        None

        Description
        -----------
        Adds an edge to the list of non-selectionnable edges.

        """
        return _AIS.AIS_BadEdgeFilter_AddEdge(self, *args)

    def RemoveEdges(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        None

        Description
        -----------
        Removes from the list of non-selectionnable edges all edges in the contour <index>.

        """
        return _AIS.AIS_BadEdgeFilter_RemoveEdges(self, *args)

    def SetContour(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        None

        Description
        -----------
        Sets <mycontour> with current contour. used by isok.

        """
        return _AIS.AIS_BadEdgeFilter_SetContour(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_BadEdgeFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_BadEdgeFilter

# Register AIS_BadEdgeFilter in _AIS:
_AIS.AIS_BadEdgeFilter_swigregister(AIS_BadEdgeFilter)
class AIS_C0RegularityFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _AIS.AIS_C0RegularityFilter_swiginit(self, _AIS.new_AIS_C0RegularityFilter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_C0RegularityFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_C0RegularityFilter

# Register AIS_C0RegularityFilter in _AIS:
_AIS.AIS_C0RegularityFilter_swigregister(AIS_C0RegularityFilter)
class AIS_ColoredDrawer(OCC.Core.Prs3d.Prs3d_Drawer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myIsHidden = property(_AIS.AIS_ColoredDrawer_myIsHidden_get, _AIS.AIS_ColoredDrawer_myIsHidden_set, doc=r"""Json string serializer.""")
    myHasOwnMaterial = property(_AIS.AIS_ColoredDrawer_myHasOwnMaterial_get, _AIS.AIS_ColoredDrawer_myHasOwnMaterial_set, doc=r"""Json string serializer.""")
    myHasOwnColor = property(_AIS.AIS_ColoredDrawer_myHasOwnColor_get, _AIS.AIS_ColoredDrawer_myHasOwnColor_set, doc=r"""Json string serializer.""")
    myHasOwnTransp = property(_AIS.AIS_ColoredDrawer_myHasOwnTransp_get, _AIS.AIS_ColoredDrawer_myHasOwnTransp_set, doc=r"""Json string serializer.""")
    myHasOwnWidth = property(_AIS.AIS_ColoredDrawer_myHasOwnWidth_get, _AIS.AIS_ColoredDrawer_myHasOwnWidth_set, doc=r"""Json string serializer.""")

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theLink: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Default constructor.

        """
        _AIS.AIS_ColoredDrawer_swiginit(self, _AIS.new_AIS_ColoredDrawer(*args))

    def HasOwnColor(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_HasOwnColor(self, *args)

    def HasOwnMaterial(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_HasOwnMaterial(self, *args)

    def HasOwnTransparency(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_HasOwnTransparency(self, *args)

    def HasOwnWidth(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_HasOwnWidth(self, *args)

    def IsHidden(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_IsHidden(self, *args)

    def SetHidden(self, *args):
        r"""

        Parameters
        ----------
        theToHide: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_SetHidden(self, *args)

    def SetOwnColor(self, *args):
        r"""

        Parameters
        ----------
        &: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_SetOwnColor(self, *args)

    def SetOwnMaterial(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_SetOwnMaterial(self, *args)

    def SetOwnTransparency(self, *args):
        r"""

        Parameters
        ----------
        : float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_SetOwnTransparency(self, *args)

    def SetOwnWidth(self, *args):
        r"""

        Parameters
        ----------
        Standard_Real: 

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_SetOwnWidth(self, *args)

    def UnsetOwnColor(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_UnsetOwnColor(self, *args)

    def UnsetOwnMaterial(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_UnsetOwnMaterial(self, *args)

    def UnsetOwnTransparency(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_UnsetOwnTransparency(self, *args)

    def UnsetOwnWidth(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColoredDrawer_UnsetOwnWidth(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ColoredDrawer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ColoredDrawer

# Register AIS_ColoredDrawer in _AIS:
_AIS.AIS_ColoredDrawer_swigregister(AIS_ColoredDrawer)
class AIS_ExclusionFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        ExclusionFlagOn: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Constructs an empty exclusion filter object defined by the flag setting exclusionflagon. by default, the flag is set to true.

        Parameters
        ----------
        TypeToExclude: AIS_KindOfInteractive
        ExclusionFlagOn: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        All the ais objects of <typetoexclude> will be rejected by the isok method.

        Parameters
        ----------
        TypeToExclude: AIS_KindOfInteractive
        SignatureInType: int
        ExclusionFlagOn: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Constructs an exclusion filter object defined by the enumeration value typetoexclude, the signature signatureintype, and the flag setting exclusionflagon. by default, the flag is set to true.

        """
        _AIS.AIS_ExclusionFilter_swiginit(self, _AIS.new_AIS_ExclusionFilter(*args))

    def Add(self, *args):
        r"""

        Parameters
        ----------
        TypeToExclude: AIS_KindOfInteractive

        Return
        -------
        bool

        Description
        -----------
        Adds the type typetoexclude to the list of types.

        Parameters
        ----------
        TypeToExclude: AIS_KindOfInteractive
        SignatureInType: int

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ExclusionFilter_Add(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ExclusionFilter_Clear(self, *args)

    def IsExclusionFlagOn(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ExclusionFilter_IsExclusionFlagOn(self, *args)

    def IsStored(self, *args):
        r"""

        Parameters
        ----------
        aType: AIS_KindOfInteractive

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ExclusionFilter_IsStored(self, *args)

    def ListOfSignature(self, *args):
        r"""

        Parameters
        ----------
        aType: AIS_KindOfInteractive
        TheStoredList: TColStd_ListOfInteger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ExclusionFilter_ListOfSignature(self, *args)

    def ListOfStoredTypes(self, *args):
        r"""

        Parameters
        ----------
        TheList: TColStd_ListOfInteger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ExclusionFilter_ListOfStoredTypes(self, *args)

    def Remove(self, *args):
        r"""

        Parameters
        ----------
        TypeToExclude: AIS_KindOfInteractive

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        TypeToExclude: AIS_KindOfInteractive
        SignatureInType: int

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ExclusionFilter_Remove(self, *args)

    def SetExclusionFlag(self, *args):
        r"""

        Parameters
        ----------
        theStatus: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ExclusionFilter_SetExclusionFlag(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ExclusionFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ExclusionFilter

# Register AIS_ExclusionFilter in _AIS:
_AIS.AIS_ExclusionFilter_swigregister(AIS_ExclusionFilter)
class AIS_GlobalStatus(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Default constructor.

        """
        _AIS.AIS_GlobalStatus_swiginit(self, _AIS.new_AIS_GlobalStatus(*args))

    def AddSelectionMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: int

        Return
        -------
        bool

        Description
        -----------
        Add selection mode.

        """
        return _AIS.AIS_GlobalStatus_AddSelectionMode(self, *args)

    def ClearSelectionModes(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Remove all selection modes.

        """
        return _AIS.AIS_GlobalStatus_ClearSelectionModes(self, *args)

    def DisplayMode(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the display mode.

        """
        return _AIS.AIS_GlobalStatus_DisplayMode(self, *args)

    def HilightStyle(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_Drawer>

        Description
        -----------
        Returns applied highlight style for a particular object.

        """
        return _AIS.AIS_GlobalStatus_HilightStyle(self, *args)

    def IsHilighted(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if object is highlighted.

        """
        return _AIS.AIS_GlobalStatus_IsHilighted(self, *args)

    def IsSModeIn(self, *args):
        r"""

        Parameters
        ----------
        theMode: int

        Return
        -------
        bool

        Description
        -----------
        Return true if selection mode was registered.

        """
        return _AIS.AIS_GlobalStatus_IsSModeIn(self, *args)

    def IsSubIntensityOn(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_GlobalStatus_IsSubIntensityOn(self, *args)

    def RemoveSelectionMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: int

        Return
        -------
        bool

        Description
        -----------
        Remove selection mode.

        """
        return _AIS.AIS_GlobalStatus_RemoveSelectionMode(self, *args)

    def SelectionModes(self, *args):
        r"""
        Return
        -------
        TColStd_ListOfInteger

        Description
        -----------
        Returns active selection modes of the object.

        """
        return _AIS.AIS_GlobalStatus_SelectionModes(self, *args)

    def SetDisplayMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: int

        Return
        -------
        None

        Description
        -----------
        Sets display mode.

        """
        return _AIS.AIS_GlobalStatus_SetDisplayMode(self, *args)

    def SetHilightStatus(self, *args):
        r"""

        Parameters
        ----------
        theStatus: bool

        Return
        -------
        None

        Description
        -----------
        Sets highlighted state.

        """
        return _AIS.AIS_GlobalStatus_SetHilightStatus(self, *args)

    def SetHilightStyle(self, *args):
        r"""

        Parameters
        ----------
        theStyle: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Changes applied highlight style for a particular object.

        """
        return _AIS.AIS_GlobalStatus_SetHilightStyle(self, *args)

    def SetSubIntensity(self, *args):
        r"""

        Parameters
        ----------
        theIsOn: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_GlobalStatus_SetSubIntensity(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_GlobalStatus_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_GlobalStatus

# Register AIS_GlobalStatus in _AIS:
_AIS.AIS_GlobalStatus_swigregister(AIS_GlobalStatus)
class AIS_GraphicTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetInteriorColor(*args):
        r"""

        Parameters
        ----------
        aDrawer: Prs3d_Drawer

        Return
        -------
        Quantity_NameOfColor

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        aDrawer: Prs3d_Drawer
        aColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_GraphicTool_GetInteriorColor(*args)

    @staticmethod
    def GetLineAtt(*args):
        r"""

        Parameters
        ----------
        aDrawer: Prs3d_Drawer
        TheTypeOfAttributes: AIS_TypeOfAttribute
        aCol: Quantity_NameOfColor

        Return
        -------
        aWidth: float
        aTyp: Aspect_TypeOfLine

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_GraphicTool_GetLineAtt(*args)

    @staticmethod
    def GetLineColor(*args):
        r"""

        Parameters
        ----------
        aDrawer: Prs3d_Drawer
        TheTypeOfAttributes: AIS_TypeOfAttribute

        Return
        -------
        Quantity_NameOfColor

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        aDrawer: Prs3d_Drawer
        TheTypeOfAttributes: AIS_TypeOfAttribute
        TheLineColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_GraphicTool_GetLineColor(*args)

    @staticmethod
    def GetLineType(*args):
        r"""

        Parameters
        ----------
        aDrawer: Prs3d_Drawer
        TheTypeOfAttributes: AIS_TypeOfAttribute

        Return
        -------
        Aspect_TypeOfLine

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_GraphicTool_GetLineType(*args)

    @staticmethod
    def GetLineWidth(*args):
        r"""

        Parameters
        ----------
        aDrawer: Prs3d_Drawer
        TheTypeOfAttributes: AIS_TypeOfAttribute

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_GraphicTool_GetLineWidth(*args)

    @staticmethod
    def GetMaterial(*args):
        r"""

        Parameters
        ----------
        aDrawer: Prs3d_Drawer

        Return
        -------
        Graphic3d_MaterialAspect

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_GraphicTool_GetMaterial(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _AIS.AIS_GraphicTool_swiginit(self, _AIS.new_AIS_GraphicTool())
    __swig_destroy__ = _AIS.delete_AIS_GraphicTool

# Register AIS_GraphicTool in _AIS:
_AIS.AIS_GraphicTool_swigregister(AIS_GraphicTool)
class AIS_InteractiveContext(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        MainViewer: V3d_Viewer

        Return
        -------
        None

        Description
        -----------
        Constructs the interactive context object defined by the principal viewer mainviewer.

        """
        _AIS.AIS_InteractiveContext_swiginit(self, _AIS.new_AIS_InteractiveContext(*args))

    def Activate(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theMode: int (optional, default to 0)
        theIsForce: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Activates the selection mode amode whose index is given, for the given interactive entity aniobj.

        Parameters
        ----------
        theMode: int
        theIsForce: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Activates the given selection mode for the all displayed objects.

        """
        return _AIS.AIS_InteractiveContext_Activate(self, *args)

    def ActivatedModes(self, *args):
        r"""

        Parameters
        ----------
        anIobj: AIS_InteractiveObject
        theList: TColStd_ListOfInteger

        Return
        -------
        None

        Description
        -----------
        Returns the list of activated selection modes.

        """
        return _AIS.AIS_InteractiveContext_ActivatedModes(self, *args)

    def AddFilter(self, *args):
        r"""

        Parameters
        ----------
        theFilter: SelectMgr_Filter

        Return
        -------
        None

        Description
        -----------
        Allows you to add the filter.

        """
        return _AIS.AIS_InteractiveContext_AddFilter(self, *args)

    def AddOrRemoveCurrentObject(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theIsToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Allows to add or remove the object given to the list of current and highlight/unhighlight it correspondingly. is valid for global context only; for local context use method addorremoveselected. since this method makes sense only for neutral point selection of a whole object, if 0 selection of the object is empty this method simply does nothing.

        """
        return _AIS.AIS_InteractiveContext_AddOrRemoveCurrentObject(self, *args)

    def AddOrRemoveSelected(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Allows to highlight or unhighlight the owner given depending on its selection status.

        Parameters
        ----------
        theOwner: SelectMgr_EntityOwner
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Allows to highlight or unhighlight the owner given depending on its selection status.

        """
        return _AIS.AIS_InteractiveContext_AddOrRemoveSelected(self, *args)

    def AddSelect(self, *args):
        r"""

        Parameters
        ----------
        theObject: SelectMgr_EntityOwner

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Adds object in the selection.

        Parameters
        ----------
        theObject: AIS_InteractiveObject

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Adds object in the selection.

        """
        return _AIS.AIS_InteractiveContext_AddSelect(self, *args)

    def Applicative(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Standard_Transient>

        Description
        -----------
        Returns selectedinteractive()->getowner(). @sa selectedowner().

        """
        return _AIS.AIS_InteractiveContext_Applicative(self, *args)

    def AutomaticHilight(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the automatic highlight mode is active; true by default. @sa moveto(), select(), hilightwithcolor(), unhilight().

        """
        return _AIS.AIS_InteractiveContext_AutomaticHilight(self, *args)

    def BeginImmediateDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Initializes the list of presentations to be displayed returns false if no local context is opened.

        """
        return _AIS.AIS_InteractiveContext_BeginImmediateDraw(self, *args)

    def BoundingBoxOfSelection(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        Bnd_Box

        Description
        -----------
        Returns bounding box of selected objects.
        Return
        -------
        Bnd_Box

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_BoundingBoxOfSelection(self, *args)

    def ClearActiveSensitive(self, *args):
        r"""

        Parameters
        ----------
        aView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Clear visualization of sensitives.

        """
        return _AIS.AIS_InteractiveContext_ClearActiveSensitive(self, *args)

    def ClearCurrents(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Empties previous current objects in order to get the current objects detected by the selector using updatecurrent. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_ClearCurrents(self, *args)

    def ClearDetected(self, *args):
        r"""

        Parameters
        ----------
        theToRedrawImmediate: bool (optional, default to Standard_False)

        Return
        -------
        bool

        Description
        -----------
        Clears the list of entities detected by moveto() and resets dynamic highlighting. @param thetoredrawimmediate if true, the main viewer will be redrawn on update return true if viewer needs to be updated (e.g. there were actually dynamically highlighted entities).

        """
        return _AIS.AIS_InteractiveContext_ClearDetected(self, *args)

    def ClearPrs(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theMode: int
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Empties the graphic presentation of the mode indexed by amode. warning! removes theiobj. theiobj is still active if it was previously activated.

        """
        return _AIS.AIS_InteractiveContext_ClearPrs(self, *args)

    def ClearSelected(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Empties previous selected objects in order to get the selected objects detected by the selector using updateselected.

        """
        return _AIS.AIS_InteractiveContext_ClearSelected(self, *args)

    def Color(self, *args):
        r"""

        Parameters
        ----------
        aniobj: AIS_InteractiveObject
        acolor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Returns the color of the object in the interactive context.

        """
        return _AIS.AIS_InteractiveContext_Color(self, *args)

    def Current(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Returns the current interactive object. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_Current(self, *args)

    def CurrentViewer(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_Viewer>

        Description
        -----------
        Returns the current viewer.

        """
        return _AIS.AIS_InteractiveContext_CurrentViewer(self, *args)

    def Deactivate(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject

        Return
        -------
        None

        Description
        -----------
        Deactivates all the activated selection modes of an object.

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theMode: int

        Return
        -------
        None

        Description
        -----------
        Deactivates all the activated selection modes of the interactive object aniobj with a given selection mode amode.

        Parameters
        ----------
        theMode: int

        Return
        -------
        None

        Description
        -----------
        Deactivates the given selection mode for all displayed objects.
        Return
        -------
        None

        Description
        -----------
        Deactivates all the activated selection mode at all displayed objects.

        """
        return _AIS.AIS_InteractiveContext_Deactivate(self, *args)

    def DefaultDrawer(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_Drawer>

        Description
        -----------
        Returns the default attribute manager. this contains all the color and line attributes which can be used by interactive objects which do not have their own attributes.

        """
        return _AIS.AIS_InteractiveContext_DefaultDrawer(self, *args)

    def DetectedCurrentObject(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Return current mouse-detected interactive object or null object, if there is no currently detected interactives @sa detectedcurrentowner(), initdetected(), moredetected(), nextdetected().

        """
        return _AIS.AIS_InteractiveContext_DetectedCurrentObject(self, *args)

    def DetectedCurrentOwner(self, *args):
        r"""
        Return
        -------
        opencascade::handle<SelectMgr_EntityOwner>

        Description
        -----------
        Returns the owner from detected list pointed by current iterator position. warning! this method is irrelevant to detectedowner() which returns last picked owner regardless of iterator position! @sa initdetected(), moredetected(), nextdetected().

        """
        return _AIS.AIS_InteractiveContext_DetectedCurrentOwner(self, *args)

    def DetectedCurrentShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Return current mouse-detected shape or empty (null) shape, if current interactive object is not a shape (ais_shape) or there is no current mouse-detected interactive object at all. @sa detectedcurrentowner(), initdetected(), moredetected(), nextdetected().

        """
        return _AIS.AIS_InteractiveContext_DetectedCurrentShape(self, *args)

    def DetectedInteractive(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Returns the interactive objects last detected in context. in general this is just a wrapper for opencascade::handle<ais_interactiveobject>::downcast(detectedowner()->selectable()). @sa detectedowner().

        """
        return _AIS.AIS_InteractiveContext_DetectedInteractive(self, *args)

    def DetectedOwner(self, *args):
        r"""
        Return
        -------
        opencascade::handle<SelectMgr_EntityOwner>

        Description
        -----------
        Returns the owner of the detected sensitive primitive which is currently dynamically highlighted. warning! this method is irrelevant to initdetected()/moredetected()/nextdetected(). @sa hasdetected(), hasnextdetected(), hilightpreviousdetected(), hilightnextdetected().

        """
        return _AIS.AIS_InteractiveContext_DetectedOwner(self, *args)

    def DetectedShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the shape detected in local context. @sa detectedowner().

        """
        return _AIS.AIS_InteractiveContext_DetectedShape(self, *args)

    def DeviationAngle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_DeviationAngle(self, *args)

    def DeviationCoefficient(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the deviation coefficient. drawings of curves or patches are made with respect to a maximal chordal deviation. a deviation coefficient is used in the shading display mode. the shape is seen decomposed into triangles. these are used to calculate reflection of light from the surface of the object. the triangles are formed from chords of the curves in the shape. the deviation coefficient gives the highest value of the angle with which a chord can deviate from a tangent to a curve. if this limit is reached, a new triangle is begun. this deviation is absolute and is set through prs3d_drawer::setmaximalchordialdeviation. the default value is 0.001. in drawing shapes, however, you are allowed to ask for a relative deviation. this deviation will be: sizeofobject * deviationcoefficient.

        """
        return _AIS.AIS_InteractiveContext_DeviationCoefficient(self, *args)

    def DisableDrawHiddenLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_DisableDrawHiddenLine(self, *args)

    def Disconnect(self, *args):
        r"""

        Parameters
        ----------
        theAssembly: AIS_InteractiveObject
        theObjToDisconnect: AIS_InteractiveObject (optional, default to NULL)

        Return
        -------
        None

        Description
        -----------
        Disconnects theobjtodisconnect from theassembly and removes dependent selection structures.

        """
        return _AIS.AIS_InteractiveContext_Disconnect(self, *args)

    def Display(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Displays the object in this context using default display mode. this will be the object's default display mode, if there is one. otherwise, it will be the context mode. the interactive object's default selection mode is activated if getautoactivateselection() is true. in general, this is 0.

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theDispMode: int
        theSelectionMode: int
        theToUpdateViewer: bool
        theDispStatus: PrsMgr_DisplayStatus (optional, default to PrsMgr_DisplayStatus_None)

        Return
        -------
        None

        Description
        -----------
        Sets status, display mode and selection mode for specified object if theselectionmode equals -1, theiobj will not be activated: it will be displayed but will not be selectable.

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theDispMode: int
        theSelectionMode: int
        theToUpdateViewer: bool
        theToAllowDecomposition: bool
        theDispStatus: PrsMgr_DisplayStatus (optional, default to PrsMgr_DisplayStatus_None)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_Display(self, *args)

    def DisplayActiveSensitive(self, *args):
        r"""

        Parameters
        ----------
        aView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Visualization of sensitives - for debugging purposes!.

        Parameters
        ----------
        anObject: AIS_InteractiveObject
        aView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Visualization of sensitives - for debugging purposes!.

        """
        return _AIS.AIS_InteractiveContext_DisplayActiveSensitive(self, *args)

    def DisplayAll(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Displays all hidden objects.

        """
        return _AIS.AIS_InteractiveContext_DisplayAll(self, *args)

    def DisplayMode(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the display mode setting to be used by default.

        """
        return _AIS.AIS_InteractiveContext_DisplayMode(self, *args)

    def DisplayPriority(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject

        Return
        -------
        Graphic3d_DisplayPriority

        Description
        -----------
        Returns the display priority of the object.

        """
        return _AIS.AIS_InteractiveContext_DisplayPriority(self, *args)

    def DisplaySelected(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Displays current objects.

        """
        return _AIS.AIS_InteractiveContext_DisplaySelected(self, *args)

    def DisplayStatus(self, *args):
        r"""

        Parameters
        ----------
        anIobj: AIS_InteractiveObject

        Return
        -------
        PrsMgr_DisplayStatus

        Description
        -----------
        Returns the display status of the entity aniobj. this will be one of the following: - ais_ds_displayed displayed in main viewer - ais_ds_erased hidden in main viewer - ais_ds_temporary temporarily displayed - ais_ds_none nowhere displayed.

        """
        return _AIS.AIS_InteractiveContext_DisplayStatus(self, *args)

    def DisplayedObjects(self, *args):
        r"""

        Parameters
        ----------
        aListOfIO: AIS_ListOfInteractive

        Return
        -------
        None

        Description
        -----------
        Returns the list of displayed objects of a particular type whichkind and signature whichsignature. by default, whichsignature equals -1. this means that there is a check on type only.

        Parameters
        ----------
        theWhichKind: AIS_KindOfInteractive
        theWhichSignature: int
        theListOfIO: AIS_ListOfInteractive

        Return
        -------
        None

        Description
        -----------
        Gives the list of displayed objects of a particular type and signature. by default, <whichsignature> = -1 means control only on <whichkind>.

        """
        return _AIS.AIS_InteractiveContext_DisplayedObjects(self, *args)

    def DrawHiddenLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns standard_true if the hidden lines are to be drawn. by default the hidden lines are not drawn.

        """
        return _AIS.AIS_InteractiveContext_DrawHiddenLine(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _AIS.AIS_InteractiveContext_DumpJsonToString(self, depth)

    def EnableDrawHiddenLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_EnableDrawHiddenLine(self, *args)

    def EndImmediateDraw(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        bool

        Description
        -----------
        Returns true if the immediate display has been done.
        Return
        -------
        bool

        Description
        -----------
        Uses the first active view of main viewer! returns true if the immediate display has been done.

        """
        return _AIS.AIS_InteractiveContext_EndImmediateDraw(self, *args)

    def Erase(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Hides the object. the object's presentations are simply flagged as invisible and therefore excluded from redrawing. to show hidden objects, use display().

        """
        return _AIS.AIS_InteractiveContext_Erase(self, *args)

    def EraseAll(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Hides all objects. the object's presentations are simply flagged as invisible and therefore excluded from redrawing. to show all hidden objects, use displayall().

        """
        return _AIS.AIS_InteractiveContext_EraseAll(self, *args)

    def EraseSelected(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Hides selected objects. the object's presentations are simply flagged as invisible and therefore excluded from redrawing. to show hidden objects, use display().

        """
        return _AIS.AIS_InteractiveContext_EraseSelected(self, *args)

    def ErasedObjects(self, *args):
        r"""

        Parameters
        ----------
        theListOfIO: AIS_ListOfInteractive

        Return
        -------
        None

        Description
        -----------
        Returns the list thelistofio of erased objects (hidden objects) particular type whichkind and signature whichsignature. by default, whichsignature equals 1. this means that there is a check on type only.

        Parameters
        ----------
        theWhichKind: AIS_KindOfInteractive
        theWhichSignature: int
        theListOfIO: AIS_ListOfInteractive

        Return
        -------
        None

        Description
        -----------
        Gives the list of erased objects (hidden objects) type and signature by default, <whichsignature> = -1 means control only on <whichkind>.

        """
        return _AIS.AIS_InteractiveContext_ErasedObjects(self, *args)

    def FilterType(self, *args):
        r"""
        Return
        -------
        SelectMgr_FilterType

        Description
        -----------
        Return the context selection filter type.

        """
        return _AIS.AIS_InteractiveContext_FilterType(self, *args)

    def Filters(self, *args):
        r"""
        Return
        -------
        SelectMgr_ListOfFilter

        Description
        -----------
        Returns the list of filters active in a local context.

        """
        return _AIS.AIS_InteractiveContext_Filters(self, *args)

    def FirstSelectedObject(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Returns the first selected object in the list of current selected.

        """
        return _AIS.AIS_InteractiveContext_FirstSelectedObject(self, *args)

    def FitSelected(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        theMargin: float
        theToUpdate: bool

        Return
        -------
        None

        Description
        -----------
        Fits the view correspondingly to the bounds of selected objects. infinite objects are ignored if infinite state of ais_interactiveobject is set to true.

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Fits the view correspondingly to the bounds of selected objects. infinite objects are ignored if infinite state of ais_interactiveobject is set to true.

        """
        return _AIS.AIS_InteractiveContext_FitSelected(self, *args)

    def GetAutoActivateSelection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Manages displaying the new object should also automatically activate default selection mode; true by default.

        """
        return _AIS.AIS_InteractiveContext_GetAutoActivateSelection(self, *args)

    def GetZLayer(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject

        Return
        -------
        Graphic3d_ZLayerId

        Description
        -----------
        Get z layer id set for displayed interactive object.

        """
        return _AIS.AIS_InteractiveContext_GetZLayer(self, *args)

    def GlobalFilter(self, *args):
        r"""
        Return
        -------
        opencascade::handle<SelectMgr_AndOrFilter>

        Description
        -----------
        Return the context selection global context filter.

        """
        return _AIS.AIS_InteractiveContext_GlobalFilter(self, *args)

    def GravityPoint(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        gp_Pnt

        Description
        -----------
        Return rotation gravity point.

        """
        return _AIS.AIS_InteractiveContext_GravityPoint(self, *args)

    def HasApplicative(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns selectedinteractive()->hasowner(). @sa selectedowner().

        """
        return _AIS.AIS_InteractiveContext_HasApplicative(self, *args)

    def HasColor(self, *args):
        r"""

        Parameters
        ----------
        aniobj: AIS_InteractiveObject

        Return
        -------
        bool

        Description
        -----------
        Returns true if a view of the interactive object has color.

        """
        return _AIS.AIS_InteractiveContext_HasColor(self, *args)

    def HasDetected(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a mouse-detected entity in context. @sa detectedowner(), hasnextdetected(), hilightpreviousdetected(), hilightnextdetected().

        """
        return _AIS.AIS_InteractiveContext_HasDetected(self, *args)

    def HasDetectedShape(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a detected shape in local context. @sa hasdetected(), detectedshape().

        """
        return _AIS.AIS_InteractiveContext_HasDetectedShape(self, *args)

    def HasLocation(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject

        Return
        -------
        bool

        Description
        -----------
        Returns true if the object has a location.

        """
        return _AIS.AIS_InteractiveContext_HasLocation(self, *args)

    def HasNextDetected(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if other entities were detected in the last mouse detection @sa hilightpreviousdetected(), hilightnextdetected().

        """
        return _AIS.AIS_InteractiveContext_HasNextDetected(self, *args)

    def HasPolygonOffsets(self, *args):
        r"""

        Parameters
        ----------
        anObj: AIS_InteractiveObject

        Return
        -------
        bool

        Description
        -----------
        Simply calls ais_interactiveobject::haspolygonoffsets().

        """
        return _AIS.AIS_InteractiveContext_HasPolygonOffsets(self, *args)

    def HasSelectedShape(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the interactive context has a shape selected. @sa selectedshape().

        """
        return _AIS.AIS_InteractiveContext_HasSelectedShape(self, *args)

    def HiddenLineAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Initializes hidden line aspect in the default drawing tool, or drawer. the default values are: color: quantity_noc_yellow type of line: aspect_tol_dash width: 1.

        """
        return _AIS.AIS_InteractiveContext_HiddenLineAspect(self, *args)

    def HighlightStyle(self, *args):
        r"""

        Parameters
        ----------
        theStyleType: Prs3d_TypeOfHighlight

        Return
        -------
        opencascade::handle<Prs3d_Drawer>

        Description
        -----------
        Returns default highlight style settings (could be overridden by prsmgr_presentableobject). //! tip: although highlighting style is defined by prs3d_drawer, only a small set of properties derived from it's base class graphic3d_presentationattributes will be actually used in most cases. //! default highlight style for all types is aspect_tohm_color. other defaults: - prs3d_typeofhighlight_dynamic * color: quantity_noc_cyan1; * layer: graphic3d_zlayerid_top, object highlighting is drawn on top of main scene within immediate layers, so that v3d_view::redrawimmediate() will be enough to see update; - prs3d_typeofhighlight_localdynamic * color: quantity_noc_cyan1; * layer: graphic3d_zlayerid_topmost, object parts highlighting is drawn on top of main scene within immediate layers with depth cleared (even overlapped geometry will be revealed); - prs3d_typeofhighlight_selected * color: quantity_noc_gray80; * layer: graphic3d_zlayerid_unknown, object highlighting is drawn on top of main scene within the same layer as object itself (e.g. graphic3d_zlayerid_default by default) and increased priority. //! @param[in] thestyletype highlight style to modify return drawer associated to specified highlight type //! @sa moveto() using prs3d_typeofhighlight_dynamic and prs3d_typeofhighlight_localdynamic types @sa selectdetected() using prs3d_typeofhighlight_selected and prs3d_typeofhighlight_localselected types @sa prsmgr_presentableobject::dynamichilightattributes() overriding prs3d_typeofhighlight_dynamic and prs3d_typeofhighlight_localdynamic defaults on object level @sa prsmgr_presentableobject::hilightattributes() overriding prs3d_typeofhighlight_selected and prs3d_typeofhighlight_localselected defaults on object level.
        Return
        -------
        opencascade::handle<Prs3d_Drawer>

        Description
        -----------
        Returns current dynamic highlight style settings corresponding to prs3d_typeofhighlight_dynamic. this is just a short-cut to highlightstyle(prs3d_typeofhighlight_dynamic).

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theStyle: Prs3d_Drawer

        Return
        -------
        bool

        Description
        -----------
        Returns highlight style of the object if it is marked as highlighted via global status @param theobj [in] the object to check.

        Parameters
        ----------
        theOwner: SelectMgr_EntityOwner
        theStyle: Prs3d_Drawer

        Return
        -------
        bool

        Description
        -----------
        Returns highlight style of the owner if it is selected @param theowner [in] the owner to check.

        """
        return _AIS.AIS_InteractiveContext_HighlightStyle(self, *args)

    def Hilight(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theIsToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Updates the display in the viewer to take dynamic detection into account. on dynamic detection by the mouse cursor, sensitive primitives are highlighted. the highlight color of entities detected by mouse movement is white by default.

        """
        return _AIS.AIS_InteractiveContext_Hilight(self, *args)

    def HilightCurrents(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Highlights current objects. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_HilightCurrents(self, *args)

    def HilightNextDetected(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        theToRedrawImmediate: bool (optional, default to Standard_True)

        Return
        -------
        int

        Description
        -----------
        If more than 1 object is detected by the selector, only the 'best' owner is hilighted at the mouse position. this method allows the user to hilight one after another the other detected entities. if the method select is called, the selected entity will be the hilighted one! warning: loop method. when all the detected entities have been hilighted, the next call will hilight the first one again. return the rank of hilighted entity @sa hasnextdetected(), hilightpreviousdetected().

        """
        return _AIS.AIS_InteractiveContext_HilightNextDetected(self, *args)

    def HilightPreviousDetected(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        theToRedrawImmediate: bool (optional, default to Standard_True)

        Return
        -------
        int

        Description
        -----------
        Same as previous methods in reverse direction. @sa hasnextdetected(), hilightnextdetected().

        """
        return _AIS.AIS_InteractiveContext_HilightPreviousDetected(self, *args)

    def HilightSelected(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Highlights selected objects.

        """
        return _AIS.AIS_InteractiveContext_HilightSelected(self, *args)

    def HilightWithColor(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theStyle: Prs3d_Drawer
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Changes the color of all the lines of the object in view.

        """
        return _AIS.AIS_InteractiveContext_HilightWithColor(self, *args)

    def ImmediateAdd(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theMode: int (optional, default to 0)

        Return
        -------
        bool

        Description
        -----------
        Returns true if <aniobj> has been stored in the list.

        """
        return _AIS.AIS_InteractiveContext_ImmediateAdd(self, *args)

    def InitCurrent(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes a scan of the current selected objects in neutral point. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_InitCurrent(self, *args)

    def InitDetected(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initialization for iteration through mouse-detected objects in interactive context or in local context if it is opened. @sa detectedcurrentowner(), moredetected(), nextdetected().

        """
        return _AIS.AIS_InteractiveContext_InitDetected(self, *args)

    def InitSelected(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes a scan of the selected objects. @sa selectedowner(), moreselected(), nextselected().

        """
        return _AIS.AIS_InteractiveContext_InitSelected(self, *args)

    def IsCurrent(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject

        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a non-null interactive object in neutral point. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_IsCurrent(self, *args)

    def IsDisplayed(self, *args):
        r"""

        Parameters
        ----------
        anIobj: AIS_InteractiveObject

        Return
        -------
        bool

        Description
        -----------
        Returns true if object is displayed in the interactive context.

        Parameters
        ----------
        aniobj: AIS_InteractiveObject
        aMode: int

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_IsDisplayed(self, *args)

    def IsHilighted(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject

        Return
        -------
        bool

        Description
        -----------
        Returns true if the object is marked as highlighted via its global status @param theobj [in] the object to check.

        Parameters
        ----------
        theOwner: SelectMgr_EntityOwner

        Return
        -------
        bool

        Description
        -----------
        Returns true if the owner is marked as selected @param theowner [in] the owner to check.

        """
        return _AIS.AIS_InteractiveContext_IsHilighted(self, *args)

    def IsImmediateModeOn(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_IsImmediateModeOn(self, *args)

    def IsSelected(self, *args):
        r"""

        Parameters
        ----------
        theOwner: SelectMgr_EntityOwner

        Return
        -------
        bool

        Description
        -----------
        Returns true is the owner given is selected.

        Parameters
        ----------
        theObj: AIS_InteractiveObject

        Return
        -------
        bool

        Description
        -----------
        Returns true is the object given is selected.

        """
        return _AIS.AIS_InteractiveContext_IsSelected(self, *args)

    def IsoNumber(self, *args):
        r"""

        Parameters
        ----------
        WhichIsos: AIS_TypeOfIso (optional, default to AIS_TOI_Both)

        Return
        -------
        int

        Description
        -----------
        Returns the number of u and v isoparameters displayed.

        """
        return _AIS.AIS_InteractiveContext_IsoNumber(self, *args)

    def IsoOnPlane(self, *args):
        r"""

        Parameters
        ----------
        theToSwitchOn: bool

        Return
        -------
        None

        Description
        -----------
        Returns true if drawing isoparameters on planes is enabled.
        Return
        -------
        bool

        Description
        -----------
        Returns true if drawing isoparameters on planes is enabled. if <foruisos> = false,.

        """
        return _AIS.AIS_InteractiveContext_IsoOnPlane(self, *args)

    def IsoOnTriangulation(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool
        theObject: AIS_InteractiveObject

        Return
        -------
        None

        Description
        -----------
        Enables or disables on-triangulation build for isolines for a particular object. in case if on-triangulation builder is disabled, default on-plane builder will compute isolines for the object given.

        Parameters
        ----------
        theToSwitchOn: bool

        Return
        -------
        None

        Description
        -----------
        Enables or disables on-triangulation build for isolines for default drawer. in case if on-triangulation builder is disabled, default on-plane builder will compute isolines for the object given.
        Return
        -------
        bool

        Description
        -----------
        Returns true if drawing isolines on triangulation algorithm is enabled.

        """
        return _AIS.AIS_InteractiveContext_IsoOnTriangulation(self, *args)

    def LastActiveView(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_View>

        Description
        -----------
        Returns last active view (argument of moveto()/select() methods).

        """
        return _AIS.AIS_InteractiveContext_LastActiveView(self, *args)

    def Load(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theSelectionMode: int (optional, default to -1)

        Return
        -------
        None

        Description
        -----------
        Allows you to load the interactive object with a given selection mode, and/or with the desired decomposition option, whether the object is visualized or not. the loaded objects will be selectable but displayable in highlighting only when detected by the selector.

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theSelectionMode: int
        : bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_Load(self, *args)

    def Location(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject

        Return
        -------
        TopLoc_Location

        Description
        -----------
        Returns the location of the object.

        """
        return _AIS.AIS_InteractiveContext_Location(self, *args)

    def MainPrsMgr(self, *args):
        r"""
        Return
        -------
        opencascade::handle<PrsMgr_PresentationManager>

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_MainPrsMgr(self, *args)

    def MainSelector(self, *args):
        r"""
        Return
        -------
        opencascade::handle<StdSelect_ViewerSelector3d>

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_MainSelector(self, *args)

    def MoreCurrent(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is another object found by the scan of the list of current objects. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_MoreCurrent(self, *args)

    def MoreDetected(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if there is more mouse-detected objects after the current one during iteration through mouse-detected interactive objects. @sa detectedcurrentowner(), initdetected(), nextdetected().

        """
        return _AIS.AIS_InteractiveContext_MoreDetected(self, *args)

    def MoreSelected(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is another object found by the scan of the list of selected objects. @sa selectedowner(), initselected(), nextselected().

        """
        return _AIS.AIS_InteractiveContext_MoreSelected(self, *args)

    def MoveTo(self, *args):
        r"""

        Parameters
        ----------
        theXPix: int
        theYPix: int
        theView: V3d_View
        theToRedrawOnUpdate: bool

        Return
        -------
        AIS_StatusOfDetection

        Description
        -----------
        Relays mouse position in pixels thexpix and theypix to the interactive context selectors. this is done by the view theview passing this position to the main viewer and updating it. if thetoredrawonupdate is set to false, callee should call redrawimmediate() to highlight detected object. @sa pickingstrategy() @sa highlightstyle() defining default dynamic highlight styles of detected owners  (prs3d_typeofhighlight_dynamic and prs3d_typeofhighlight_localdynamic) @sa prsmgr_presentableobject::dynamichilightattributes() defining per-object dynamic highlight style of detected owners (overrides defaults).

        Parameters
        ----------
        theAxis: gp_Ax1
        theView: V3d_View
        theToRedrawOnUpdate: bool

        Return
        -------
        AIS_StatusOfDetection

        Description
        -----------
        Relays axis theaxis to the interactive context selectors. this is done by the view theview passing this axis to the main viewer and updating it. if thetoredrawonupdate is set to false, callee should call redrawimmediate() to highlight detected object. @sa pickingstrategy().

        """
        return _AIS.AIS_InteractiveContext_MoveTo(self, *args)

    def NbCurrents(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_NbCurrents(self, *args)

    def NbSelected(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Count a number of selected entities using initselected()+moreselected()+nextselected() iterator. @sa selectedowner(), initselected(), moreselected(), nextselected().

        """
        return _AIS.AIS_InteractiveContext_NbSelected(self, *args)

    def NextCurrent(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Continues the scan to the next object in the list of current objects. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_NextCurrent(self, *args)

    def NextDetected(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Gets next current object during iteration through mouse-detected interactive objects. @sa detectedcurrentowner(), initdetected(), moredetected().

        """
        return _AIS.AIS_InteractiveContext_NextDetected(self, *args)

    def NextSelected(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Continues the scan to the next object in the list of selected objects. @sa selectedowner(), initselected(), moreselected().

        """
        return _AIS.AIS_InteractiveContext_NextSelected(self, *args)

    def ObjectIterator(self, *args):
        r"""
        Return
        -------
        AIS_DataMapIteratorOfDataMapOfIOStatus

        Description
        -----------
        Create iterator through all objects registered in context.

        """
        return _AIS.AIS_InteractiveContext_ObjectIterator(self, *args)

    def ObjectsByDisplayStatus(self, *args):
        r"""

        Parameters
        ----------
        theStatus: PrsMgr_DisplayStatus
        theListOfIO: AIS_ListOfInteractive

        Return
        -------
        None

        Description
        -----------
        Returns the list thelistofio of objects with indicated display status particular type whichkind and signature whichsignature. by default, whichsignature equals 1. this means that there is a check on type only.

        Parameters
        ----------
        WhichKind: AIS_KindOfInteractive
        WhichSignature: int
        theStatus: PrsMgr_DisplayStatus
        theListOfIO: AIS_ListOfInteractive

        Return
        -------
        None

        Description
        -----------
        Gives the list of objects with indicated display status type and signature by default, <whichsignature> = -1 means control only on <whichkind>.

        """
        return _AIS.AIS_InteractiveContext_ObjectsByDisplayStatus(self, *args)

    def ObjectsForView(self, *args):
        r"""

        Parameters
        ----------
        theListOfIO: AIS_ListOfInteractive
        theView: V3d_View
        theIsVisibleInView: bool
        theStatus: PrsMgr_DisplayStatus (optional, default to PrsMgr_DisplayStatus_None)

        Return
        -------
        None

        Description
        -----------
        Query objects visible or hidden in specified view due to affinity mask.

        """
        return _AIS.AIS_InteractiveContext_ObjectsForView(self, *args)

    def ObjectsInside(self, *args):
        r"""

        Parameters
        ----------
        aListOfIO: AIS_ListOfInteractive
        WhichKind: AIS_KindOfInteractive (optional, default to AIS_KindOfInteractive_None)
        WhichSignature: int (optional, default to -1)

        Return
        -------
        None

        Description
        -----------
        Fills <alistofio> with objects of a particular type and signature with no consideration of display status. by default, <whichsignature> = -1 means control only on <whichkind>. if <whichkind> = ais_kindofinteractive_none and <whichsignature> = -1, all the objects are put into the list.

        """
        return _AIS.AIS_InteractiveContext_ObjectsInside(self, *args)

    def PickingStrategy(self, *args):
        r"""
        Return
        -------
        SelectMgr_PickingStrategy

        Description
        -----------
        Return picking strategy; selectmgr_pickingstrategy_firstacceptable by default. @sa moveto(), filters().

        """
        return _AIS.AIS_InteractiveContext_PickingStrategy(self, *args)

    def PixelTolerance(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the pixel tolerance, default is 2. pixel tolerance extends sensitivity within moveto() operation (picking by point) and can be adjusted by application based on user input precision (e.g. screen pixel density, input device precision, etc.).

        """
        return _AIS.AIS_InteractiveContext_PixelTolerance(self, *args)

    def PlaneSize(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        XSize: float
        YSize: float

        Description
        -----------
        Returns true if the length in the x direction xsize is the same as that in the y direction ysize.

        """
        return _AIS.AIS_InteractiveContext_PlaneSize(self, *args)

    def PolygonOffsets(self, *args):
        r"""

        Parameters
        ----------
        anObj: AIS_InteractiveObject

        Return
        -------
        aMode: int
        aFactor: float
        aUnits: float

        Description
        -----------
        Retrieves current polygon offsets settings for object.

        """
        return _AIS.AIS_InteractiveContext_PolygonOffsets(self, *args)

    def RebuildSelectionStructs(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Rebuilds 1st level of bvh selection forcibly.

        """
        return _AIS.AIS_InteractiveContext_RebuildSelectionStructs(self, *args)

    def RecomputePrsOnly(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool
        theAllModes: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Recomputes the displayed presentations, flags the others. doesn't update presentations.

        """
        return _AIS.AIS_InteractiveContext_RecomputePrsOnly(self, *args)

    def RecomputeSelectionOnly(self, *args):
        r"""

        Parameters
        ----------
        anIObj: AIS_InteractiveObject

        Return
        -------
        None

        Description
        -----------
        Recomputes the active selections, flags the others. doesn't update presentations.

        """
        return _AIS.AIS_InteractiveContext_RecomputeSelectionOnly(self, *args)

    def Redisplay(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool
        theAllModes: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Recomputes the seen parts presentation of the object. if theallmodes equals true, all presentations are present in the object even if unseen.

        Parameters
        ----------
        theTypeOfObject: AIS_KindOfInteractive
        theSignature: int
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Recomputes the prs/selection of displayed objects of a given type and a given signature. if signature = -1 doesn't take signature criterion.

        """
        return _AIS.AIS_InteractiveContext_Redisplay(self, *args)

    def RedrawImmediate(self, *args):
        r"""

        Parameters
        ----------
        theViewer: V3d_Viewer

        Return
        -------
        None

        Description
        -----------
        Redraws immediate structures in all views of the viewer given taking into account its visibility.

        """
        return _AIS.AIS_InteractiveContext_RedrawImmediate(self, *args)

    def Remove(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes object from every viewer.

        """
        return _AIS.AIS_InteractiveContext_Remove(self, *args)

    def RemoveAll(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes all the objects from context.

        """
        return _AIS.AIS_InteractiveContext_RemoveAll(self, *args)

    def RemoveFilter(self, *args):
        r"""

        Parameters
        ----------
        theFilter: SelectMgr_Filter

        Return
        -------
        None

        Description
        -----------
        Removes a filter from context.

        """
        return _AIS.AIS_InteractiveContext_RemoveFilter(self, *args)

    def RemoveFilters(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Remove all filters from context.

        """
        return _AIS.AIS_InteractiveContext_RemoveFilters(self, *args)

    def ResetLocation(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject

        Return
        -------
        None

        Description
        -----------
        Puts the object back into its initial position.

        """
        return _AIS.AIS_InteractiveContext_ResetLocation(self, *args)

    def Select(self, *args):
        r"""

        Parameters
        ----------
        theOwners: AIS_NArray1OfEntityOwner
        theSelScheme: AIS_SelectionScheme

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Sets list of owner selected/deselected using specified selection scheme. @param theowners owners to change selection state @param theselscheme selection scheme return picking status.

        Parameters
        ----------
        theXPMin: int
        theYPMin: int
        theXPMax: int
        theYPMax: int
        theView: V3d_View
        theToUpdateViewer: bool

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Selects everything found in the bounding rectangle defined by the pixel minima and maxima, xpmin, ypmin, xpmax, and ypmax in the view. the objects detected are passed to the main viewer, which is then updated.

        Parameters
        ----------
        thePolyline: TColgp_Array1OfPnt2d
        theView: V3d_View
        theToUpdateViewer: bool

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Polyline selection; clears the previous picked list.

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Stores and hilights the previous detected; unhilights the previous picked. @sa moveto().

        """
        return _AIS.AIS_InteractiveContext_Select(self, *args)

    def SelectDetected(self, *args):
        r"""

        Parameters
        ----------
        theSelScheme: AIS_SelectionScheme (optional, default to AIS_SelectionScheme_Replace)

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Select and hilights the previous detected via ais_interactivecontext::moveto() method; unhilights the previous picked. viewer should be explicitly redrawn after selection. @param theselscheme [in] selection scheme return picking status //! @sa highlightstyle() defining default highlight styles of selected owners (prs3d_typeofhighlight_selected and prs3d_typeofhighlight_localselected) @sa prsmgr_presentableobject::hilightattributes() defining per-object highlight style of selected owners (overrides defaults).

        """
        return _AIS.AIS_InteractiveContext_SelectDetected(self, *args)

    def SelectPoint(self, *args):
        r"""

        Parameters
        ----------
        thePnt: Graphic3d_Vec2i
        theView: V3d_View
        theSelScheme: AIS_SelectionScheme (optional, default to AIS_SelectionScheme_Replace)

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Selects the topmost object picked by the point in the view, viewer should be explicitly redrawn after selection. @param thepnt [in] point pixel coordinates within the view @param theview [in] active view where point is defined @param theselscheme [in] selection scheme return picking status.

        """
        return _AIS.AIS_InteractiveContext_SelectPoint(self, *args)

    def SelectPolygon(self, *args):
        r"""

        Parameters
        ----------
        thePolyline: TColgp_Array1OfPnt2d
        theView: V3d_View
        theSelScheme: AIS_SelectionScheme (optional, default to AIS_SelectionScheme_Replace)

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Select everything found in the polygon defined by bounding polyline. viewer should be explicitly redrawn after selection. @param thepolyline [in] polyline defining polygon bounds (in pixels) @param theview [in] active view where polyline is defined @param theselscheme [in] selection scheme return picking status.

        """
        return _AIS.AIS_InteractiveContext_SelectPolygon(self, *args)

    def SelectRectangle(self, *args):
        r"""

        Parameters
        ----------
        thePntMin: Graphic3d_Vec2i
        thePntMax: Graphic3d_Vec2i
        theView: V3d_View
        theSelScheme: AIS_SelectionScheme (optional, default to AIS_SelectionScheme_Replace)

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Selects objects within the bounding rectangle. viewer should be explicitly redrawn after selection. @param thepntmin [in] rectangle lower point (in pixels) @param thepntmax [in] rectangle upper point (in pixels) @param theview [in] active view where rectangle is defined @param theselscheme [in] selection scheme return picking status @sa stdselect_viewerselector3d::allowoverlapdetection().

        """
        return _AIS.AIS_InteractiveContext_SelectRectangle(self, *args)

    def SelectedInteractive(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Return opencascade::handle<ais_interactiveobject>::downcast (selectedowner()->selectable()). @sa selectedowner().

        """
        return _AIS.AIS_InteractiveContext_SelectedInteractive(self, *args)

    def SelectedOwner(self, *args):
        r"""
        Return
        -------
        opencascade::handle<SelectMgr_EntityOwner>

        Description
        -----------
        Returns the owner of the selected entity. @sa initselected(), moreselected(), nextselected().

        """
        return _AIS.AIS_InteractiveContext_SelectedOwner(self, *args)

    def SelectedShape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the selected shape. basically it is just a shape returned stored by stdselect_brepowner with graphic transformation being applied: @code const opencascade::handle<stdselect_brepowner> abrepowner = opencascade::handle<stdselect_brepowner>::downcast (selectedowner()); topods_shape aselshape = abrepowner->shape(); topods_shape alocatedshape = aselshape.located (abrepowner->location() * aselshape.location()); @endcode @sa selectedowner(), hasselectedshape().

        """
        return _AIS.AIS_InteractiveContext_SelectedShape(self, *args)

    def Selection(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_Selection>

        Description
        -----------
        Returns selection instance.

        """
        return _AIS.AIS_InteractiveContext_Selection(self, *args)

    def SelectionManager(self, *args):
        r"""
        Return
        -------
        opencascade::handle<SelectMgr_SelectionManager>

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_SelectionManager(self, *args)

    def SelectionStyle(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_Drawer>

        Description
        -----------
        Returns current selection style settings corrsponding to prs3d_typeofhighlight_selected. this is just a short-cut to highlightstyle(prs3d_typeofhighlight_selected).

        """
        return _AIS.AIS_InteractiveContext_SelectionStyle(self, *args)

    def SetAngleAndDeviation(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theAngle: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Calls the ais_shape setangleanddeviation to set both angle and deviation coefficients.

        """
        return _AIS.AIS_InteractiveContext_SetAngleAndDeviation(self, *args)

    def SetAutoActivateSelection(self, *args):
        r"""

        Parameters
        ----------
        theIsAuto: bool

        Return
        -------
        None

        Description
        -----------
        Enable or disable automatic activation of default selection mode while displaying the object.

        """
        return _AIS.AIS_InteractiveContext_SetAutoActivateSelection(self, *args)

    def SetAutomaticHilight(self, *args):
        r"""

        Parameters
        ----------
        theStatus: bool

        Return
        -------
        None

        Description
        -----------
        Sets the highlighting status of detected and selected entities. this function allows you to disconnect the automatic mode. //! moveto() will fill the list of detected entities and select() will set selected state to detected objects regardless of this flag, but with disabled automatichiligh() their highlighting state will be left unaffected, so that application will be able performing custom highlighting in a different way, if needed. //! this api should be distinguished from selectmgr_selectableobject::setautohilight() that is used to implement custom highlighting logic for a specific interactive object class. //! @sa moveto(), select(), hilightwithcolor(), unhilight().

        """
        return _AIS.AIS_InteractiveContext_SetAutomaticHilight(self, *args)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theColor: Quantity_Color
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the color of the selected entity.

        """
        return _AIS.AIS_InteractiveContext_SetColor(self, *args)

    def SetCurrentFacingModel(self, *args):
        r"""

        Parameters
        ----------
        aniobj: AIS_InteractiveObject
        aModel: Aspect_TypeOfFacingModel (optional, default to Aspect_TOFM_BOTH_SIDE)

        Return
        -------
        None

        Description
        -----------
        Change the current facing model apply on polygons for setcolor(), settransparency(), setmaterial() methods default facing model is aspect_tofm_two_side. this mean that attributes is applying both on the front and back face.

        """
        return _AIS.AIS_InteractiveContext_SetCurrentFacingModel(self, *args)

    def SetCurrentObject(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Updates the view of the current object in open context. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_SetCurrentObject(self, *args)

    def SetDefaultDrawer(self, *args):
        r"""

        Parameters
        ----------
        theDrawer: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Sets the default attribute manager; should be set at context creation time. warning - this setter doesn't update links to the default drawer of already displayed objects!.

        """
        return _AIS.AIS_InteractiveContext_SetDefaultDrawer(self, *args)

    def SetDeviationAngle(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theAngle: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theAngle: float

        Return
        -------
        None

        Description
        -----------
        Default 20 degrees.

        """
        return _AIS.AIS_InteractiveContext_SetDeviationAngle(self, *args)

    def SetDeviationCoefficient(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theCoefficient: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the deviation coefficient thecoefficient. drawings of curves or patches are made with respect to a maximal chordal deviation. a deviation coefficient is used in the shading display mode. the shape is seen decomposed into triangles. these are used to calculate reflection of light from the surface of the object. the triangles are formed from chords of the curves in the shape. the deviation coefficient thecoefficient gives the highest value of the angle with which a chord can deviate from a tangent to a curve. if this limit is reached, a new triangle is begun. this deviation is absolute and is set through the method: setmaximalchordialdeviation. the default value is 0.001. in drawing shapes, however, you are allowed to ask for a relative deviation. this deviation will be: sizeofobject * deviationcoefficient.

        Parameters
        ----------
        theCoefficient: float

        Return
        -------
        None

        Description
        -----------
        Sets the deviation coefficient thecoefficient. drawings of curves or patches are made with respect to a maximal chordal deviation. a deviation coefficient is used in the shading display mode. the shape is seen decomposed into triangles. these are used to calculate reflection of light from the surface of the object. the triangles are formed from chords of the curves in the shape. the deviation coefficient thecoefficient gives the highest value of the angle with which a chord can deviate from a tangent to a curve. if this limit is reached, a new triangle is begun. this deviation is absolute and is set through the method: setmaximalchordialdeviation. the default value is 0.001. in drawing shapes, however, you are allowed to ask for a relative deviation. this deviation will be: sizeofobject * deviationcoefficient.

        """
        return _AIS.AIS_InteractiveContext_SetDeviationCoefficient(self, *args)

    def SetDisplayMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: int
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the display mode of seen interactive objects (which have no overridden display mode).

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theMode: int
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the display mode of seen interactive objects. themode provides the display mode index of the entity theiobj.

        """
        return _AIS.AIS_InteractiveContext_SetDisplayMode(self, *args)

    def SetDisplayPriority(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        thePriority: Graphic3d_DisplayPriority

        Return
        -------
        None

        Description
        -----------
        Sets the display priority of the seen parts presentation of the object.

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        thePriority: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_InteractiveContext_SetDisplayPriority(self, *args)

    def SetFilterType(self, *args):
        r"""

        Parameters
        ----------
        theFilterType: SelectMgr_FilterType

        Return
        -------
        None

        Description
        -----------
        Sets the context selection filter type. selectmgr_typefilter_or selection filter is used by default. @param thefiltertype the filter type.

        """
        return _AIS.AIS_InteractiveContext_SetFilterType(self, *args)

    def SetHiddenLineAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the hidden line aspect anaspect. aspect defines display attributes for hidden lines in hlr projections.

        """
        return _AIS.AIS_InteractiveContext_SetHiddenLineAspect(self, *args)

    def SetHighlightStyle(self, *args):
        r"""

        Parameters
        ----------
        theStyleType: Prs3d_TypeOfHighlight
        theStyle: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Setup highlight style settings. tip: it is better modifying existing style returned by method highlightstyle() instead of creating a new prs3d_drawer to avoid unexpected results due misconfiguration. //! if a new highlight style is created, its presentation zlayer should be checked, otherwise highlighting might not work as expected.

        Parameters
        ----------
        theStyle: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Setup the style of dynamic highlighting corrsponding to prs3d_typeofhighlight_selected. this is just a short-cut to sethighlightstyle(prs3d_typeofhighlight_dynamic,thestyle).

        """
        return _AIS.AIS_InteractiveContext_SetHighlightStyle(self, *args)

    def SetIsoNumber(self, *args):
        r"""

        Parameters
        ----------
        NbIsos: int
        WhichIsos: AIS_TypeOfIso (optional, default to AIS_TOI_Both)

        Return
        -------
        None

        Description
        -----------
        Sets the number of u and v isoparameters displayed.

        """
        return _AIS.AIS_InteractiveContext_SetIsoNumber(self, *args)

    def SetLocalAttributes(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theDrawer: Prs3d_Drawer
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the graphic attributes of the interactive object, such as visualization mode, color, and material.

        """
        return _AIS.AIS_InteractiveContext_SetLocalAttributes(self, *args)

    def SetLocation(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject
        theLocation: TopLoc_Location

        Return
        -------
        None

        Description
        -----------
        Puts the location on the initial graphic representation and the selection for the object.

        """
        return _AIS.AIS_InteractiveContext_SetLocation(self, *args)

    def SetMaterial(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theMaterial: Graphic3d_MaterialAspect
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Provides the type of material setting for the view of the object.

        """
        return _AIS.AIS_InteractiveContext_SetMaterial(self, *args)

    def SetPickingStrategy(self, *args):
        r"""

        Parameters
        ----------
        theStrategy: SelectMgr_PickingStrategy

        Return
        -------
        None

        Description
        -----------
        Setup picking strategy - which entities detected by picking line will be accepted, considering selection filters. by default (selectmgr_pickingstrategy_firstacceptable), selection filters reduce the list of entities so that the context accepts topmost in remaining. //! this means that entities behind non-selectable (by filters) parts can be picked by user. if this behavior is undesirable, and user wants that non-selectable (by filters) parts should remain an obstacle for picking, selectmgr_pickingstrategy_onlytopmost can be set instead. //! notice, that since selection manager operates only objects registered in it, selectmgr_pickingstrategy_onlytopmost will not prevent picking entities behind visible by unregistered in selection manager presentations (e.g. deactivated). hence, selectmgr_pickingstrategy_onlytopmost changes behavior only with selection filters enabled.

        """
        return _AIS.AIS_InteractiveContext_SetPickingStrategy(self, *args)

    def SetPixelTolerance(self, *args):
        r"""

        Parameters
        ----------
        thePrecision: int (optional, default to 2)

        Return
        -------
        None

        Description
        -----------
        Setup pixel tolerance for moveto() operation. @sa moveto().

        """
        return _AIS.AIS_InteractiveContext_SetPixelTolerance(self, *args)

    def SetPlaneSize(self, *args):
        r"""

        Parameters
        ----------
        theSizeX: float
        theSizeY: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the plane size defined by the length in the x direction xsize and that in the y direction ysize.

        Parameters
        ----------
        theSize: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the plane size asize.

        """
        return _AIS.AIS_InteractiveContext_SetPlaneSize(self, *args)

    def SetPolygonOffsets(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theMode: int
        theFactor: float
        theUnits: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets up polygon offsets for the given ais_interactiveobject. it simply calls ais_interactiveobject::setpolygonoffsets().

        """
        return _AIS.AIS_InteractiveContext_SetPolygonOffsets(self, *args)

    def SetSelected(self, *args):
        r"""

        Parameters
        ----------
        theOwners: SelectMgr_EntityOwner
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Unhighlights previously selected owners and marks them as not selected. marks owner given as selected and highlights it. performs selection filters check.

        Parameters
        ----------
        theObject: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Puts the interactive object aniobj in the list of selected objects. performs selection filters check.

        """
        return _AIS.AIS_InteractiveContext_SetSelected(self, *args)

    def SetSelectedAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_BasicAspect
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the graphic basic aspect to the current presentation of all selected objects.

        """
        return _AIS.AIS_InteractiveContext_SetSelectedAspect(self, *args)

    def SetSelectedState(self, *args):
        r"""

        Parameters
        ----------
        theOwner: SelectMgr_EntityOwner
        theIsSelected: bool

        Return
        -------
        bool

        Description
        -----------
        Updates selected state of specified owner without calling hilightselected(). has no effect if selected state is not changed, and redirects to addorremoveselected() otherwise. @param theowner owner object to set selected state @param theisselected new selected state return true if selected state has been changed.

        """
        return _AIS.AIS_InteractiveContext_SetSelectedState(self, *args)

    def SetSelection(self, *args):
        r"""

        Parameters
        ----------
        theSelection: AIS_Selection

        Return
        -------
        None

        Description
        -----------
        Sets selection instance to manipulate a container of selected owners @param theselection an instance of the selection.

        """
        return _AIS.AIS_InteractiveContext_SetSelection(self, *args)

    def SetSelectionModeActive(self, *args):
        r"""

        Parameters
        ----------
        theObj: AIS_InteractiveObject
        theMode: int
        theToActivate: bool
        theConcurrency: AIS_SelectionModesConcurrency (optional, default to AIS_SelectionModesConcurrency_Multiple)
        theIsForce: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Activates or deactivates the selection mode for specified object. has no effect if selection mode was already active/deactivated. @param theobj object to activate/deactivate selection mode @param themode selection mode to activate/deactivate;  deactivation of -1 selection mode will effectively deactivate all selection modes;  activation of -1 selection mode with ais_selectionmodesconcurrency_single  will deactivate all selection modes, and will has no effect otherwise @param thetoactivate activation/deactivation flag @param theconcurrency specifies how to handle already activated selection modes;  default value (ais_selectionmodesconcurrency_multiple) means active selection modes should be left as is,  ais_selectionmodesconcurrency_single can be used if only one selection mode is expected to be active  and ais_selectionmodesconcurrency_globalorlocal can be used if either ais_interactiveobject::globalselectionmode()  or any combination of local selection modes is acceptable;  this value is considered only if thetoactivate set to true @param theisforce when set to true, the display status will be ignored while activating selection mode.

        """
        return _AIS.AIS_InteractiveContext_SetSelectionModeActive(self, *args)

    def SetSelectionSensitivity(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject
        theMode: int
        theNewSensitivity: int

        Return
        -------
        None

        Description
        -----------
        Allows to manage sensitivity of a particular selection of interactive object theobject and changes previous sensitivity value of all sensitive entities in selection with themode to the given thenewsensitivity.

        """
        return _AIS.AIS_InteractiveContext_SetSelectionSensitivity(self, *args)

    def SetSelectionStyle(self, *args):
        r"""

        Parameters
        ----------
        theStyle: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Setup the style of selection highlighting. this is just a short-cut to sethighlightstyle(prs3d_typeofhighlight_selected,thestyle).

        """
        return _AIS.AIS_InteractiveContext_SetSelectionStyle(self, *args)

    def SetSubIntensityColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sub-intensity allows temporary highlighting of particular objects with specified color in a manner of selection highlight, but without actual selection (e.g., global status and owner's selection state will not be updated). the method sets up the color for such highlighting. by default, this is quantity_noc_gray40.

        """
        return _AIS.AIS_InteractiveContext_SetSubIntensityColor(self, *args)

    def SetToHilightSelected(self, *args):
        r"""

        Parameters
        ----------
        toHilight: bool

        Return
        -------
        None

        Description
        -----------
        Specify whether selected object must be hilighted when mouse cursor is moved above it (in moveto method). by default this value is false and selected object is not hilighted in this case. @sa moveto().

        """
        return _AIS.AIS_InteractiveContext_SetToHilightSelected(self, *args)

    def SetTransformPersistence(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject
        theTrsfPers: Graphic3d_TransformPers

        Return
        -------
        None

        Description
        -----------
        Sets transform persistence.

        """
        return _AIS.AIS_InteractiveContext_SetTransformPersistence(self, *args)

    def SetTransparency(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theValue: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Provides the transparency settings for viewing the object. the transparency value avalue may be between 0.0, opaque, and 1.0, fully transparent.

        """
        return _AIS.AIS_InteractiveContext_SetTransparency(self, *args)

    def SetTrihedronSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the size asize of the trihedron. is used to change the default value 100 mm for display of trihedra. use of this function in one of your own interactive objects requires a call to the compute function of the new class. this will recalculate the presentation for every trihedron displayed.

        """
        return _AIS.AIS_InteractiveContext_SetTrihedronSize(self, *args)

    def SetViewAffinity(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theView: V3d_View
        theIsVisible: bool

        Return
        -------
        None

        Description
        -----------
        Setup object visibility in specified view. has no effect if object is not displayed in this context.

        """
        return _AIS.AIS_InteractiveContext_SetViewAffinity(self, *args)

    def SetWidth(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theValue: float
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Sets the width of the object.

        """
        return _AIS.AIS_InteractiveContext_SetWidth(self, *args)

    def SetZLayer(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theLayerId: int

        Return
        -------
        None

        Description
        -----------
        Set z layer id for interactive object. the z layers can be used to display temporarily presentations of some object in front of the other objects in the scene. the ids for z layers are generated by v3d_viewer.

        """
        return _AIS.AIS_InteractiveContext_SetZLayer(self, *args)

    def ShiftSelect(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Adds the last detected to the list of previous picked. if the last detected was already declared as picked, removes it from the picked list. @sa moveto().

        Parameters
        ----------
        thePolyline: TColgp_Array1OfPnt2d
        theView: V3d_View
        theToUpdateViewer: bool

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Adds the last detected to the list of previous picked. if the last detected was already declared as picked, removes it from the picked list.

        Parameters
        ----------
        theXPMin: int
        theYPMin: int
        theXPMax: int
        theYPMax: int
        theView: V3d_View
        theToUpdateViewer: bool

        Return
        -------
        AIS_StatusOfPick

        Description
        -----------
        Rectangle of selection; adds new detected entities into the picked list, removes the detected entities that were already stored.

        """
        return _AIS.AIS_InteractiveContext_ShiftSelect(self, *args)

    def SubIntensityColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Sub-intensity allows temporary highlighting of particular objects with specified color in a manner of selection highlight, but without actual selection (e.g., global status and owner's selection state will not be updated). the method returns the color of such highlighting. by default, it is quantity_noc_gray40.

        """
        return _AIS.AIS_InteractiveContext_SubIntensityColor(self, *args)

    def SubIntensityOff(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes the subintensity option for the entity. if a local context is open, the presentation of the interactive object activates the selection mode.

        """
        return _AIS.AIS_InteractiveContext_SubIntensityOff(self, *args)

    def SubIntensityOn(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Highlights, and removes highlights from, the displayed object which is displayed at neutral point with subintensity color. available only for active local context. there is no effect if there is no local context. if a local context is open, the presentation of the interactive object activates the selection mode.

        """
        return _AIS.AIS_InteractiveContext_SubIntensityOn(self, *args)

    def ToHilightSelected(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return value specified whether selected object must be hilighted when mouse cursor is moved above it @sa moveto().

        """
        return _AIS.AIS_InteractiveContext_ToHilightSelected(self, *args)

    def TrihedronSize(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the current value of trihedron size.

        """
        return _AIS.AIS_InteractiveContext_TrihedronSize(self, *args)

    def Unhilight(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes hilighting from the object.

        """
        return _AIS.AIS_InteractiveContext_Unhilight(self, *args)

    def UnhilightCurrents(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes highlighting from current objects. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_UnhilightCurrents(self, *args)

    def UnhilightSelected(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes highlighting from selected objects.

        """
        return _AIS.AIS_InteractiveContext_UnhilightSelected(self, *args)

    def UnsetColor(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes the color selection for the selected entity.

        """
        return _AIS.AIS_InteractiveContext_UnsetColor(self, *args)

    def UnsetDisplayMode(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Unsets the display mode of seen interactive objects.

        """
        return _AIS.AIS_InteractiveContext_UnsetDisplayMode(self, *args)

    def UnsetLocalAttributes(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes the settings for local attributes of the object and returns to defaults.

        """
        return _AIS.AIS_InteractiveContext_UnsetLocalAttributes(self, *args)

    def UnsetMaterial(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes the type of material setting for viewing the object.

        """
        return _AIS.AIS_InteractiveContext_UnsetMaterial(self, *args)

    def UnsetTransparency(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes the transparency settings for viewing the object.

        """
        return _AIS.AIS_InteractiveContext_UnsetTransparency(self, *args)

    def UnsetWidth(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Removes the width setting of the object.

        """
        return _AIS.AIS_InteractiveContext_UnsetWidth(self, *args)

    def Update(self, *args):
        r"""

        Parameters
        ----------
        theIObj: AIS_InteractiveObject
        theUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Updates displayed interactive object by checking and recomputing its flagged as 'to be recomputed' presentation and selection structures. this method does not force any recomputation on its own. the method recomputes selections even if they are loaded without activation in particular selector.

        """
        return _AIS.AIS_InteractiveContext_Update(self, *args)

    def UpdateCurrent(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Updates the list of current objects, i.e. hilights new current objects, removes hilighting from former current objects. objects selected when there is no open local context are called current objects; those selected in open local context, selected objects.

        """
        return _AIS.AIS_InteractiveContext_UpdateCurrent(self, *args)

    def UpdateCurrentViewer(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Updates the current viewer.

        """
        return _AIS.AIS_InteractiveContext_UpdateCurrentViewer(self, *args)

    def UpdateSelected(self, *args):
        r"""

        Parameters
        ----------
        theToUpdateViewer: bool

        Return
        -------
        None

        Description
        -----------
        Updates the list of selected objects: i.e. highlights the newly selected ones and unhighlights previously selected objects. @sa hilightselected().

        """
        return _AIS.AIS_InteractiveContext_UpdateSelected(self, *args)

    def Width(self, *args):
        r"""

        Parameters
        ----------
        aniobj: AIS_InteractiveObject

        Return
        -------
        float

        Description
        -----------
        Returns the width of the interactive object in the interactive context.

        """
        return _AIS.AIS_InteractiveContext_Width(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_InteractiveContext_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def EntityOwners(self):
    	pass

    @methodnotwrapped
    def Status(self):
    	pass

    __swig_destroy__ = _AIS.delete_AIS_InteractiveContext

# Register AIS_InteractiveContext in _AIS:
_AIS.AIS_InteractiveContext_swigregister(AIS_InteractiveContext)
class AIS_InteractiveObject(OCC.Core.SelectMgr.SelectMgr_SelectableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ClearOwner(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Each interactive object has methods which allow us to attribute an owner to it in the form of a transient. this method removes the owner from the graphic entity.

        """
        return _AIS.AIS_InteractiveObject_ClearOwner(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _AIS.AIS_InteractiveObject_DumpJsonToString(self, depth)

    def GetContext(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_InteractiveContext>

        Description
        -----------
        Returns the context pointer to the interactive context.

        """
        return _AIS.AIS_InteractiveObject_GetContext(self, *args)

    def GetOwner(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Standard_Transient>

        Description
        -----------
        Returns the owner of the interactive object. the owner can be a shape for a set of sub-shapes or a sub-shape for sub-shapes which it is composed of, and takes the form of a transient. there are two types of owners: - direct owners, decomposition shapes such as edges, wires, and faces. - users, presentable objects connecting to sensitive primitives, or a shape which has been decomposed.

        """
        return _AIS.AIS_InteractiveObject_GetOwner(self, *args)

    def HasInteractiveContext(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Indicates whether the interactive object has a pointer to an interactive context.

        """
        return _AIS.AIS_InteractiveObject_HasInteractiveContext(self, *args)

    def HasOwner(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the object has an owner attributed to it. the owner can be a shape for a set of sub-shapes or a sub-shape for sub-shapes which it is composed of, and takes the form of a transient.

        """
        return _AIS.AIS_InteractiveObject_HasOwner(self, *args)

    def HasPresentation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when this object has a presentation in the current displaymode().

        """
        return _AIS.AIS_InteractiveObject_HasPresentation(self, *args)

    def InteractiveContext(self, *args):
        r"""
        Return
        -------
        AIS_InteractiveContext *

        Description
        -----------
        Returns the context pointer to the interactive context.

        """
        return _AIS.AIS_InteractiveObject_InteractiveContext(self, *args)

    def Presentation(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_Presentation>

        Description
        -----------
        Returns the current presentation of this object according to the current displaymode().

        """
        return _AIS.AIS_InteractiveObject_Presentation(self, *args)

    def ProcessDragging(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View
        theOwner: SelectMgr_EntityOwner
        theDragFrom: Graphic3d_Vec2i
        theDragTo: Graphic3d_Vec2i
        theAction: AIS_DragAction

        Return
        -------
        bool

        Description
        -----------
        Drag object in the viewer. @param thectx [in] interactive context @param theview [in] active view @param theowner [in] the owner of detected entity @param thedragfrom [in] drag start point @param thedragto [in] drag end point @param theaction [in] drag action return false if object rejects dragging action (e.g. ais_dragaction_start).

        """
        return _AIS.AIS_InteractiveObject_ProcessDragging(self, *args)

    def Redisplay(self, *args):
        r"""

        Parameters
        ----------
        AllModes: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Updates the active presentation; if <allmodes> = standard_true all the presentations inside are recomputed. important: it is preferable to call redisplay method of corresponding ais_interactivecontext instance for cases when it is accessible. this method just redirects call to myctxptr, so this class field must be up to date for proper result.

        """
        return _AIS.AIS_InteractiveObject_Redisplay(self, *args)

    def SetAspect(self, *args):
        r"""

        Parameters
        ----------
        anAspect: Prs3d_BasicAspect

        Return
        -------
        None

        Description
        -----------
        Sets the graphic basic aspect to the current presentation.

        """
        return _AIS.AIS_InteractiveObject_SetAspect(self, *args)

    def SetContext(self, *args):
        r"""

        Parameters
        ----------
        aCtx: AIS_InteractiveContext

        Return
        -------
        None

        Description
        -----------
        Sets the interactive context actx and provides a link to the default drawing tool or 'drawer' if there is none.

        """
        return _AIS.AIS_InteractiveObject_SetContext(self, *args)

    def SetOwner(self, *args):
        r"""

        Parameters
        ----------
        theApplicativeEntity: Standard_Transient

        Return
        -------
        None

        Description
        -----------
        Allows you to attribute the owner theapplicativeentity to an interactive object. this can be a shape for a set of sub-shapes or a sub-shape for sub-shapes which it is composed of. the owner takes the form of a transient.

        """
        return _AIS.AIS_InteractiveObject_SetOwner(self, *args)

    def Signature(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Specifies additional characteristics of interactive object of type(); -1 by default. among the datums, this signature is attributed to the shape. the remaining datums have the following default signatures: - point signature 1 - axis  signature 2 - trihedron signature 3 - planetrihedron signature 4 - line  signature 5 - circle signature 6 - plane signature 7.

        """
        return _AIS.AIS_InteractiveObject_Signature(self, *args)

    def Type(self, *args):
        r"""
        Return
        -------
        AIS_KindOfInteractive

        Description
        -----------
        Returns the kind of interactive object; ais_kindofinteractive_none by default.

        """
        return _AIS.AIS_InteractiveObject_Type(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_InteractiveObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_InteractiveObject

# Register AIS_InteractiveObject in _AIS:
_AIS.AIS_InteractiveObject_swigregister(AIS_InteractiveObject)
class AIS_LightSourceOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_LightSource
        thePriority: int (optional, default to 5)

        Return
        -------
        None

        Description
        -----------
        Main constructor.

        """
        _AIS.AIS_LightSourceOwner_swiginit(self, _AIS.new_AIS_LightSourceOwner(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_LightSourceOwner

# Register AIS_LightSourceOwner in _AIS:
_AIS.AIS_LightSourceOwner_swigregister(AIS_LightSourceOwner)
class AIS_ManipulatorOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theSelObject: SelectMgr_SelectableObject
        theIndex: int
        theMode: AIS_ManipulatorMode
        thePriority: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _AIS.AIS_ManipulatorOwner_swiginit(self, _AIS.new_AIS_ManipulatorOwner(*args))

    def Index(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Return index of manipulator axis.

        """
        return _AIS.AIS_ManipulatorOwner_Index(self, *args)

    def Mode(self, *args):
        r"""
        Return
        -------
        AIS_ManipulatorMode

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ManipulatorOwner_Mode(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ManipulatorOwner_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ManipulatorOwner

# Register AIS_ManipulatorOwner in _AIS:
_AIS.AIS_ManipulatorOwner_swigregister(AIS_ManipulatorOwner)
class AIS_PointCloudOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theOrigin: AIS_PointCloud

        Return
        -------
        None

        Description
        -----------
        Main constructor.

        """
        _AIS.AIS_PointCloudOwner_swiginit(self, _AIS.new_AIS_PointCloudOwner(*args))

    def DetectedPoints(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TColStd_HPackedMapOfInteger>

        Description
        -----------
        Return last detected points. warning! indexation starts with 0 (shifted by -1 comparing to graphic3d_arrayofpoints::vertice()).

        """
        return _AIS.AIS_PointCloudOwner_DetectedPoints(self, *args)

    def SelectedPoints(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TColStd_HPackedMapOfInteger>

        Description
        -----------
        Return selected points. warning! indexation starts with 0 (shifted by -1 comparing to graphic3d_arrayofpoints::vertice()).

        """
        return _AIS.AIS_PointCloudOwner_SelectedPoints(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_PointCloudOwner

# Register AIS_PointCloudOwner in _AIS:
_AIS.AIS_PointCloudOwner_swigregister(AIS_PointCloudOwner)
class AIS_Selection(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a new selection.

        """
        _AIS.AIS_Selection_swiginit(self, _AIS.new_AIS_Selection(*args))

    def AddSelect(self, *args):
        r"""

        Parameters
        ----------
        theObject: SelectMgr_EntityOwner

        Return
        -------
        AIS_SelectStatus

        Description
        -----------
        The object is always add int the selection. faster when the number of objects selected is great.

        """
        return _AIS.AIS_Selection_AddSelect(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Removes all the object of the selection.

        """
        return _AIS.AIS_Selection_Clear(self, *args)

    def ClearAndSelect(self, *args):
        r"""

        Parameters
        ----------
        theObject: SelectMgr_EntityOwner
        theFilter: SelectMgr_Filter
        theIsDetected: bool

        Return
        -------
        None

        Description
        -----------
        Clears the selection and adds the object in the selection. @param[in] theobject element to change selection state @param[in] thefilter context filter @param[in] theisdetected flag of object detection.

        """
        return _AIS.AIS_Selection_ClearAndSelect(self, *args)

    def Extent(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Return the number of selected objects.

        """
        return _AIS.AIS_Selection_Extent(self, *args)

    def Init(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Start iteration through selected objects.

        """
        return _AIS.AIS_Selection_Init(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if list of selected objects is empty.

        """
        return _AIS.AIS_Selection_IsEmpty(self, *args)

    def IsSelected(self, *args):
        r"""

        Parameters
        ----------
        theObject: SelectMgr_EntityOwner

        Return
        -------
        bool

        Description
        -----------
        Checks if the object is in the selection.

        """
        return _AIS.AIS_Selection_IsSelected(self, *args)

    def More(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if iterator points to selected object.

        """
        return _AIS.AIS_Selection_More(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Continue iteration through selected objects.

        """
        return _AIS.AIS_Selection_Next(self, *args)

    def Objects(self, *args):
        r"""
        Return
        -------
        AIS_NListOfEntityOwner

        Description
        -----------
        Return the list of selected objects.

        """
        return _AIS.AIS_Selection_Objects(self, *args)

    def Select(self, *args):
        r"""

        Parameters
        ----------
        theOwner: SelectMgr_EntityOwner
        theFilter: SelectMgr_Filter
        theSelScheme: AIS_SelectionScheme
        theIsDetected: bool

        Return
        -------
        AIS_SelectStatus

        Description
        -----------
        If the object is not yet in the selection, it will be added. if the object is already in the selection, it will be removed. @param[in] theowner element to change selection state @param[in] thefilter context filter @param[in] theselscheme selection scheme @param[in] theisdetected flag of object detection return result of selection.

        """
        return _AIS.AIS_Selection_Select(self, *args)

    def SelectOwners(self, *args):
        r"""

        Parameters
        ----------
        thePickedOwners: AIS_NArray1OfEntityOwner
        theSelScheme: AIS_SelectionScheme
        theToAllowSelOverlap: bool
        theFilter: SelectMgr_Filter

        Return
        -------
        None

        Description
        -----------
        Select or deselect owners depending on the selection scheme. @param[in] thepickedowners elements to change selection state @param[in] theselscheme selection scheme, defines how owner is selected @param[in] thetoallowseloverlap selection flag, if true - overlapped entities are allowed @param[in] thefilter context filter to skip not acceptable owners.

        """
        return _AIS.AIS_Selection_SelectOwners(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        opencascade::handle<SelectMgr_EntityOwner>

        Description
        -----------
        Return selected object at iterator position.

        """
        return _AIS.AIS_Selection_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Selection_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Selection

# Register AIS_Selection in _AIS:
_AIS.AIS_Selection_swigregister(AIS_Selection)
class AIS_TrihedronOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theSelObject: SelectMgr_SelectableObject
        theDatumPart: Prs3d_DatumParts
        thePriority: int

        Return
        -------
        None

        Description
        -----------
        Creates an owner of ais_trihedron object.

        """
        _AIS.AIS_TrihedronOwner_swiginit(self, _AIS.new_AIS_TrihedronOwner(*args))

    def DatumPart(self, *args):
        r"""
        Return
        -------
        Prs3d_DatumParts

        Description
        -----------
        Returns the datum part identifier.

        """
        return _AIS.AIS_TrihedronOwner_DatumPart(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TrihedronOwner_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_TrihedronOwner

# Register AIS_TrihedronOwner in _AIS:
_AIS.AIS_TrihedronOwner_swigregister(AIS_TrihedronOwner)
class AIS_TypeFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aGivenKind: AIS_KindOfInteractive

        Return
        -------
        None

        Description
        -----------
        Initializes filter for type, agivenkind.

        """
        _AIS.AIS_TypeFilter_swiginit(self, _AIS.new_AIS_TypeFilter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TypeFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_TypeFilter

# Register AIS_TypeFilter in _AIS:
_AIS.AIS_TypeFilter_swigregister(AIS_TypeFilter)
class AIS_ViewController(OCC.Core.Aspect.Aspect_WindowInputListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _AIS.AIS_ViewController_swiginit(self, _AIS.new_AIS_ViewController(*args))

    def AbortViewAnimation(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Interrupt active view animation.

        """
        return _AIS.AIS_ViewController_AbortViewAnimation(self, *args)

    def ChangeInputBuffer(self, *args):
        r"""

        Parameters
        ----------
        theType: AIS_ViewInputBufferType

        Return
        -------
        AIS_ViewInputBuffer

        Description
        -----------
        Return input buffer.

        """
        return _AIS.AIS_ViewController_ChangeInputBuffer(self, *args)

    def ChangeMouseGestureMap(self, *args):
        r"""
        Return
        -------
        AIS_MouseGestureMap

        Description
        -----------
        Return map defining mouse gestures.

        """
        return _AIS.AIS_ViewController_ChangeMouseGestureMap(self, *args)

    def ChangeMouseSelectionSchemes(self, *args):
        r"""
        Return
        -------
        AIS_MouseSelectionSchemeMap

        Description
        -----------
        Return map defining mouse gestures.

        """
        return _AIS.AIS_ViewController_ChangeMouseSelectionSchemes(self, *args)

    def FetchNavigationKeys(self, *args):
        r"""

        Parameters
        ----------
        theCrouchRatio: float
        theRunRatio: float

        Return
        -------
        AIS_WalkDelta

        Description
        -----------
        Fetch active navigation actions.

        """
        return _AIS.AIS_ViewController_FetchNavigationKeys(self, *args)

    def FitAllAuto(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Modify view camera to fit all objects. default implementation fits either all visible and all selected objects (swapped on each call).

        """
        return _AIS.AIS_ViewController_FitAllAuto(self, *args)

    def FlushViewEvents(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View
        theToHandle: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Update buffer for rendering thread. this method is expected to be called within synchronization barrier between gui and rendering threads (e.g. gui thread should be locked beforehand to avoid data races). @param thectx interactive context @param theview active view @param thetohandle if true, the handleviewevents() will be called.

        """
        return _AIS.AIS_ViewController_FlushViewEvents(self, *args)

    def GravityPoint(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        gp_Pnt

        Description
        -----------
        Compute rotation gravity center point depending on rotation mode. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_GravityPoint(self, *args)

    def HandleViewEvents(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Process events within rendering thread.

        """
        return _AIS.AIS_ViewController_HandleViewEvents(self, *args)

    def HasPreviousMoveTo(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if previous position of moveto has been defined.

        """
        return _AIS.AIS_ViewController_HasPreviousMoveTo(self, *args)

    def InputBuffer(self, *args):
        r"""

        Parameters
        ----------
        theType: AIS_ViewInputBufferType

        Return
        -------
        AIS_ViewInputBuffer

        Description
        -----------
        Return input buffer.

        """
        return _AIS.AIS_ViewController_InputBuffer(self, *args)

    def IsContinuousRedraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if continuous redrawing is enabled; false by default. this option would request a next viewer frame to be completely redrawn right after current frame is finished.

        """
        return _AIS.AIS_ViewController_IsContinuousRedraw(self, *args)

    def MinZoomDistance(self, *args):
        r"""
        Return
        -------
        double

        Description
        -----------
        Return minimal camera distance for zoom operation.

        """
        return _AIS.AIS_ViewController_MinZoomDistance(self, *args)

    def MouseAcceleration(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return mouse input acceleration ratio in first person mode; 1.0 by default.

        """
        return _AIS.AIS_ViewController_MouseAcceleration(self, *args)

    def MouseDoubleClickInterval(self, *args):
        r"""
        Return
        -------
        double

        Description
        -----------
        Return double click interval in seconds; 0.4 by default.

        """
        return _AIS.AIS_ViewController_MouseDoubleClickInterval(self, *args)

    def MouseGestureMap(self, *args):
        r"""
        Return
        -------
        AIS_MouseGestureMap

        Description
        -----------
        Return map defining mouse gestures.

        """
        return _AIS.AIS_ViewController_MouseGestureMap(self, *args)

    def MouseSelectionSchemes(self, *args):
        r"""
        Return
        -------
        AIS_MouseSelectionSchemeMap

        Description
        -----------
        Return map defining mouse selection schemes.

        """
        return _AIS.AIS_ViewController_MouseSelectionSchemes(self, *args)

    def NavigationMode(self, *args):
        r"""
        Return
        -------
        AIS_NavigationMode

        Description
        -----------
        Return camera navigation mode; ais_navigationmode_orbit by default.

        """
        return _AIS.AIS_ViewController_NavigationMode(self, *args)

    def ObjectsAnimation(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_Animation>

        Description
        -----------
        Return objects animation; empty (but not null) animation by default.

        """
        return _AIS.AIS_ViewController_ObjectsAnimation(self, *args)

    def OnObjectDragged(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View
        theAction: AIS_DragAction

        Return
        -------
        None

        Description
        -----------
        Callback called by handlemoveto() on dragging object in 3d viewer. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_OnObjectDragged(self, *args)

    def OnSelectionChanged(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Callback called by handlemoveto() on selection in 3d viewer. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_OnSelectionChanged(self, *args)

    def OnSubviewChanged(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theOldView: V3d_View
        theNewView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Callback called by handleviewevents() on selection of another (sub)view. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_OnSubviewChanged(self, *args)

    def OrbitAcceleration(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return orbit rotation acceleration ratio; 1.0 by default.

        """
        return _AIS.AIS_ViewController_OrbitAcceleration(self, *args)

    def PickAxis(self, *args):
        r"""

        Parameters
        ----------
        theTopPnt: gp_Pnt
        theCtx: AIS_InteractiveContext
        theView: V3d_View
        theAxis: gp_Ax1

        Return
        -------
        bool

        Description
        -----------
        Pick closest point by axis. this method is expected to be called from rendering thread. @param thetoppnt [out] result point @param thectx [in] interactive context @param theview [in] active view @param theaxis [in] selection axis return true if result has been found.

        """
        return _AIS.AIS_ViewController_PickAxis(self, *args)

    def PickPoint(self, *args):
        r"""

        Parameters
        ----------
        thePnt: gp_Pnt
        theCtx: AIS_InteractiveContext
        theView: V3d_View
        theCursor: Graphic3d_Vec2i
        theToStickToPickRay: bool

        Return
        -------
        bool

        Description
        -----------
        Pick closest point under mouse cursor. this method is expected to be called from rendering thread. @param thepnt [out] result point @param thectx [in] interactive context @param theview [in] active view @param thecursor [in] mouse cursor @param thetosticktopickray [in] when true, the result point will lie on picking ray return true if result has been found.

        """
        return _AIS.AIS_ViewController_PickPoint(self, *args)

    def PreviousMoveTo(self, *args):
        r"""
        Return
        -------
        Graphic3d_Vec2i

        Description
        -----------
        Return previous position of moveto event in 3d viewer.

        """
        return _AIS.AIS_ViewController_PreviousMoveTo(self, *args)

    def ResetPreviousMoveTo(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset previous position of moveto.

        """
        return _AIS.AIS_ViewController_ResetPreviousMoveTo(self, *args)

    def ResetViewInput(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset input state (pressed keys, mouse buttons, etc.) e.g. on window focus loss. this method is expected to be called from ui thread.

        """
        return _AIS.AIS_ViewController_ResetViewInput(self, *args)

    def RotationMode(self, *args):
        r"""
        Return
        -------
        AIS_RotationMode

        Description
        -----------
        Return camera rotation mode, ais_rotationmode_bndboxactive by default.

        """
        return _AIS.AIS_ViewController_RotationMode(self, *args)

    def SelectInViewer(self, *args):
        r"""

        Parameters
        ----------
        thePnt: Graphic3d_Vec2i
        theScheme: AIS_SelectionScheme (optional, default to AIS_SelectionScheme_Replace)

        Return
        -------
        None

        Description
        -----------
        Perform selection in 3d viewer. this method is expected to be called from ui thread. @param thepnt picking point @param thescheme selection scheme.

        Parameters
        ----------
        thePnts: NCollection_Sequence<Graphic3d_Vec2i>
        theScheme: AIS_SelectionScheme (optional, default to AIS_SelectionScheme_Replace)

        Return
        -------
        None

        Description
        -----------
        Perform selection in 3d viewer. this method is expected to be called from ui thread. @param thepnts picking point @param thescheme selection scheme.

        """
        return _AIS.AIS_ViewController_SelectInViewer(self, *args)

    def SetAllowDragging(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if dynamic highlight on mouse move is allowed.

        """
        return _AIS.AIS_ViewController_SetAllowDragging(self, *args)

    def SetAllowHighlight(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if dragging object is allowed.

        """
        return _AIS.AIS_ViewController_SetAllowHighlight(self, *args)

    def SetAllowPanning(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if panning is allowed.

        """
        return _AIS.AIS_ViewController_SetAllowPanning(self, *args)

    def SetAllowRotation(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if camera rotation is allowed.

        """
        return _AIS.AIS_ViewController_SetAllowRotation(self, *args)

    def SetAllowTouchZRotation(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if z-rotation via two-touches gesture is enabled.

        """
        return _AIS.AIS_ViewController_SetAllowTouchZRotation(self, *args)

    def SetAllowZFocus(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if zfocus change is allowed.

        """
        return _AIS.AIS_ViewController_SetAllowZFocus(self, *args)

    def SetAllowZooming(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if zooming is allowed.

        """
        return _AIS.AIS_ViewController_SetAllowZooming(self, *args)

    def SetContinuousRedraw(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Enable or disable continuous updates.

        """
        return _AIS.AIS_ViewController_SetContinuousRedraw(self, *args)

    def SetDisplayXRAuxDevices(self, *args):
        r"""

        Parameters
        ----------
        theToDisplay: bool

        Return
        -------
        None

        Description
        -----------
        Set if auxiliary tracked xr devices should be displayed.

        """
        return _AIS.AIS_ViewController_SetDisplayXRAuxDevices(self, *args)

    def SetDisplayXRHands(self, *args):
        r"""

        Parameters
        ----------
        theToDisplay: bool

        Return
        -------
        None

        Description
        -----------
        Set if tracked xr hand controllers should be displayed.

        """
        return _AIS.AIS_ViewController_SetDisplayXRHands(self, *args)

    def SetInvertPitch(self, *args):
        r"""

        Parameters
        ----------
        theToInvert: bool

        Return
        -------
        None

        Description
        -----------
        Set flag inverting pitch direction.

        """
        return _AIS.AIS_ViewController_SetInvertPitch(self, *args)

    def SetLockOrbitZUp(self, *args):
        r"""

        Parameters
        ----------
        theToForceUp: bool

        Return
        -------
        None

        Description
        -----------
        Set if camera up orientation within ais_navigationmode_orbit rotation mode should be forced z up.

        """
        return _AIS.AIS_ViewController_SetLockOrbitZUp(self, *args)

    def SetMinZoomDistance(self, *args):
        r"""

        Parameters
        ----------
        theDist: double

        Return
        -------
        None

        Description
        -----------
        Set minimal camera distance for zoom operation.

        """
        return _AIS.AIS_ViewController_SetMinZoomDistance(self, *args)

    def SetMouseAcceleration(self, *args):
        r"""

        Parameters
        ----------
        theRatio: float

        Return
        -------
        None

        Description
        -----------
        Set mouse input acceleration ratio.

        """
        return _AIS.AIS_ViewController_SetMouseAcceleration(self, *args)

    def SetMouseDoubleClickInterval(self, *args):
        r"""

        Parameters
        ----------
        theSeconds: double

        Return
        -------
        None

        Description
        -----------
        Set double click interval in seconds.

        """
        return _AIS.AIS_ViewController_SetMouseDoubleClickInterval(self, *args)

    def SetNavigationMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: AIS_NavigationMode

        Return
        -------
        None

        Description
        -----------
        Set camera navigation mode.

        """
        return _AIS.AIS_ViewController_SetNavigationMode(self, *args)

    def SetObjectsAnimation(self, *args):
        r"""

        Parameters
        ----------
        theAnimation: AIS_Animation

        Return
        -------
        None

        Description
        -----------
        Set object animation to be handled within handleviewredraw().

        """
        return _AIS.AIS_ViewController_SetObjectsAnimation(self, *args)

    def SetOrbitAcceleration(self, *args):
        r"""

        Parameters
        ----------
        theRatio: float

        Return
        -------
        None

        Description
        -----------
        Set orbit rotation acceleration ratio.

        """
        return _AIS.AIS_ViewController_SetOrbitAcceleration(self, *args)

    def SetPauseObjectsAnimation(self, *args):
        r"""

        Parameters
        ----------
        theToPause: bool

        Return
        -------
        None

        Description
        -----------
        Set if object animation should be paused on mouse click.

        """
        return _AIS.AIS_ViewController_SetPauseObjectsAnimation(self, *args)

    def SetRotationMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: AIS_RotationMode

        Return
        -------
        None

        Description
        -----------
        Set camera rotation mode.

        """
        return _AIS.AIS_ViewController_SetRotationMode(self, *args)

    def SetShowPanAnchorPoint(self, *args):
        r"""

        Parameters
        ----------
        theToShow: bool

        Return
        -------
        None

        Description
        -----------
        Set if panning anchor point within perspective projection should be displayed in 3d viewer.

        """
        return _AIS.AIS_ViewController_SetShowPanAnchorPoint(self, *args)

    def SetShowRotateCenter(self, *args):
        r"""

        Parameters
        ----------
        theToShow: bool

        Return
        -------
        None

        Description
        -----------
        Set if rotation point should be displayed in 3d viewer.

        """
        return _AIS.AIS_ViewController_SetShowRotateCenter(self, *args)

    def SetStickToRayOnRotation(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if picked point should be projected to picking ray on rotating around point.

        """
        return _AIS.AIS_ViewController_SetStickToRayOnRotation(self, *args)

    def SetStickToRayOnZoom(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if picked point should be projected to picking ray on zooming at point.

        """
        return _AIS.AIS_ViewController_SetStickToRayOnZoom(self, *args)

    def SetThrustSpeed(self, *args):
        r"""

        Parameters
        ----------
        theSpeed: float

        Return
        -------
        None

        Description
        -----------
        Set active thrust value.

        """
        return _AIS.AIS_ViewController_SetThrustSpeed(self, *args)

    def SetTouchToleranceScale(self, *args):
        r"""

        Parameters
        ----------
        theTolerance: float

        Return
        -------
        None

        Description
        -----------
        Set scale factor for adjusting tolerances for starting multi-touch gestures.

        """
        return _AIS.AIS_ViewController_SetTouchToleranceScale(self, *args)

    def SetViewAnimation(self, *args):
        r"""

        Parameters
        ----------
        theAnimation: AIS_AnimationCamera

        Return
        -------
        None

        Description
        -----------
        Set view animation to be handled within handleviewredraw().

        """
        return _AIS.AIS_ViewController_SetViewAnimation(self, *args)

    def SetWalkSpeedAbsolute(self, *args):
        r"""

        Parameters
        ----------
        theSpeed: float

        Return
        -------
        None

        Description
        -----------
        Set normal walking speed, in m/s; 1.5 by default.

        """
        return _AIS.AIS_ViewController_SetWalkSpeedAbsolute(self, *args)

    def SetWalkSpeedRelative(self, *args):
        r"""

        Parameters
        ----------
        theFactor: float

        Return
        -------
        None

        Description
        -----------
        Set walking speed relative to scene bounding box.

        """
        return _AIS.AIS_ViewController_SetWalkSpeedRelative(self, *args)

    def ThrustSpeed(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return active thrust value; 0.0f by default.

        """
        return _AIS.AIS_ViewController_ThrustSpeed(self, *args)

    def ToAllowDragging(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if dragging object is allowed; true by default.

        """
        return _AIS.AIS_ViewController_ToAllowDragging(self, *args)

    def ToAllowHighlight(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if dynamic highlight on mouse move is allowed; true by default.

        """
        return _AIS.AIS_ViewController_ToAllowHighlight(self, *args)

    def ToAllowPanning(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if panning is allowed; true by default.

        """
        return _AIS.AIS_ViewController_ToAllowPanning(self, *args)

    def ToAllowRotation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if camera rotation is allowed; true by default.

        """
        return _AIS.AIS_ViewController_ToAllowRotation(self, *args)

    def ToAllowTouchZRotation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if z-rotation via two-touches gesture is enabled; false by default.

        """
        return _AIS.AIS_ViewController_ToAllowTouchZRotation(self, *args)

    def ToAllowZFocus(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if zfocus change is allowed; true by default.

        """
        return _AIS.AIS_ViewController_ToAllowZFocus(self, *args)

    def ToAllowZooming(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if zooming is allowed; true by default.

        """
        return _AIS.AIS_ViewController_ToAllowZooming(self, *args)

    def ToDisplayXRAuxDevices(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true to display auxiliary tracked xr devices (like tracking stations).

        """
        return _AIS.AIS_ViewController_ToDisplayXRAuxDevices(self, *args)

    def ToDisplayXRHands(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true to display xr hand controllers.

        """
        return _AIS.AIS_ViewController_ToDisplayXRHands(self, *args)

    def ToInvertPitch(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if pitch direction should be inverted while processing aspect_vkey_navlookup/aspect_vkey_navlookdown; false by default.

        """
        return _AIS.AIS_ViewController_ToInvertPitch(self, *args)

    def ToLockOrbitZUp(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if camera up orientation within ais_navigationmode_orbit rotation mode should be forced z up; false by default.

        """
        return _AIS.AIS_ViewController_ToLockOrbitZUp(self, *args)

    def ToPauseObjectsAnimation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if object animation should be paused on mouse click; false by default.

        """
        return _AIS.AIS_ViewController_ToPauseObjectsAnimation(self, *args)

    def ToShowPanAnchorPoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if panning anchor point within perspective projection should be displayed in 3d viewer; true by default.

        """
        return _AIS.AIS_ViewController_ToShowPanAnchorPoint(self, *args)

    def ToShowRotateCenter(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if rotation point should be displayed in 3d viewer; true by default.

        """
        return _AIS.AIS_ViewController_ToShowRotateCenter(self, *args)

    def ToStickToRayOnRotation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if picked point should be projected to picking ray on rotating around point; true by default.

        """
        return _AIS.AIS_ViewController_ToStickToRayOnRotation(self, *args)

    def ToStickToRayOnZoom(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if picked point should be projected to picking ray on zooming at point; true by default.

        """
        return _AIS.AIS_ViewController_ToStickToRayOnZoom(self, *args)

    def TouchToleranceScale(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return scale factor for adjusting tolerances for starting multi-touch gestures; 1.0 by default this scale factor is expected to be computed from touch screen resolution.

        """
        return _AIS.AIS_ViewController_TouchToleranceScale(self, *args)

    def UpdateMouseClick(self, *args):
        r"""

        Parameters
        ----------
        thePoint: Graphic3d_Vec2i
        theButton: Aspect_VKeyMouse
        theModifiers: Aspect_VKeyFlags
        theIsDoubleClick: bool

        Return
        -------
        bool

        Description
        -----------
        Handle mouse button click event (emulated by updatemousebuttons() while releasing single button). note that as this method is called by updatemousebuttons(), it should be executed from ui thread. default implementation redirects to selectinviewer(). this method is expected to be called from ui thread. @param thepoint mouse cursor position @param thebutton clicked button @param themodifiers key modifiers @param theisdoubleclick flag indicating double mouse click return true if view should be redrawn.

        """
        return _AIS.AIS_ViewController_UpdateMouseClick(self, *args)

    def UpdatePolySelection(self, *args):
        r"""

        Parameters
        ----------
        thePnt: Graphic3d_Vec2i
        theToAppend: bool

        Return
        -------
        None

        Description
        -----------
        Update polygonal selection tool. this method is expected to be called from ui thread. @param thepnt new point to add to polygon @param thetoappend append new point or update the last point.

        """
        return _AIS.AIS_ViewController_UpdatePolySelection(self, *args)

    def UpdateRubberBand(self, *args):
        r"""

        Parameters
        ----------
        thePntFrom: Graphic3d_Vec2i
        thePntTo: Graphic3d_Vec2i

        Return
        -------
        None

        Description
        -----------
        Update rectangle selection tool. this method is expected to be called from ui thread. @param thepntfrom rectangle first corner @param thepntto rectangle another corner.

        """
        return _AIS.AIS_ViewController_UpdateRubberBand(self, *args)

    def UpdateViewOrientation(self, *args):
        r"""

        Parameters
        ----------
        theOrientation: V3d_TypeOfOrientation
        theToFitAll: bool

        Return
        -------
        None

        Description
        -----------
        Reset view orientation. this method is expected to be called from ui thread.

        """
        return _AIS.AIS_ViewController_UpdateViewOrientation(self, *args)

    def UpdateZRotation(self, *args):
        r"""

        Parameters
        ----------
        theAngle: double

        Return
        -------
        bool

        Description
        -----------
        Update z rotation event. @param theangle rotation angle, in radians. return true if new zoom event has been created or false if existing one has been updated.

        """
        return _AIS.AIS_ViewController_UpdateZRotation(self, *args)

    def UpdateZoom(self, *args):
        r"""

        Parameters
        ----------
        theDelta: Aspect_ScrollDelta

        Return
        -------
        bool

        Description
        -----------
        Update zoom event (e.g. from mouse scroll). this method is expected to be called from ui thread. @param thedelta mouse cursor position to zoom at and zoom delta return true if new zoom event has been created or false if existing one has been updated.

        """
        return _AIS.AIS_ViewController_UpdateZoom(self, *args)

    def ViewAnimation(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_AnimationCamera>

        Description
        -----------
        Return view animation; empty (but not null) animation by default.

        """
        return _AIS.AIS_ViewController_ViewAnimation(self, *args)

    def WalkSpeedAbsolute(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return normal walking speed, in m/s; 1.5 by default.

        """
        return _AIS.AIS_ViewController_WalkSpeedAbsolute(self, *args)

    def WalkSpeedRelative(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return walking speed relative to scene bounding box; 0.1 by default.

        """
        return _AIS.AIS_ViewController_WalkSpeedRelative(self, *args)

    def handleCameraActions(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View
        theWalk: AIS_WalkDelta

        Return
        -------
        None

        Description
        -----------
        Perform immediate camera actions (rotate/zoom/pan) on gesture progress. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_handleCameraActions(self, *args)

    def handleMoveTo(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Perform moveto/selection/dragging. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_handleMoveTo(self, *args)

    def handleNavigationKeys(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        AIS_WalkDelta

        Description
        -----------
        Perform navigation (aspect_vkey_navforward and similar keys). this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_handleNavigationKeys(self, *args)

    def handleOrbitRotation(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        thePnt: gp_Pnt
        theToLockZUp: bool

        Return
        -------
        None

        Description
        -----------
        Handle orbital rotation events mygl.orbitrotation. @param theview view to modify @param thepnt 3d point to rotate around @param thetolockzup amend camera to exclude roll angle (put camera up vector to plane containing global z and view direction).

        """
        return _AIS.AIS_ViewController_handleOrbitRotation(self, *args)

    def handlePanning(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Handle panning event mygl.panning.

        """
        return _AIS.AIS_ViewController_handlePanning(self, *args)

    def handleViewOrientationKeys(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Handle hot-keys defining new camera orientation (aspect_vkey_viewtop and similar keys). default implementation starts an animated transaction from the current to the target camera orientation, when specific action key was pressed. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_handleViewOrientationKeys(self, *args)

    def handleViewRedraw(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Handle view redraw. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_handleViewRedraw(self, *args)

    def handleViewRotation(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        theYawExtra: double
        thePitchExtra: double
        theRoll: double
        theToRestartOnIncrement: bool

        Return
        -------
        None

        Description
        -----------
        Handle view direction rotation events mygl.viewrotation. this method is expected to be called from rendering thread. @param theview camera to modify @param theyawextra extra yaw increment @param thepitchextra extra pitch increment @param theroll roll value @param thetorestartonincrement flag indicating flight mode.

        """
        return _AIS.AIS_ViewController_handleViewRotation(self, *args)

    def handleXRHighlight(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Perform dynamic highlighting for active hand.

        """
        return _AIS.AIS_ViewController_handleXRHighlight(self, *args)

    def handleXRInput(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View
        theWalk: AIS_WalkDelta

        Return
        -------
        None

        Description
        -----------
        Perform xr input. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_handleXRInput(self, *args)

    def handleXRMoveTo(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View
        thePose: gp_Trsf
        theToHighlight: bool

        Return
        -------
        int

        Description
        -----------
        Perform picking with/without dynamic highlighting for xr pose.

        """
        return _AIS.AIS_ViewController_handleXRMoveTo(self, *args)

    def handleXRPicking(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Handle picking on trigger click.

        """
        return _AIS.AIS_ViewController_handleXRPicking(self, *args)

    def handleXRPresentations(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Display auxiliary xr presentations.

        """
        return _AIS.AIS_ViewController_handleXRPresentations(self, *args)

    def handleXRTeleport(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Handle trackpad teleportation action.

        """
        return _AIS.AIS_ViewController_handleXRTeleport(self, *args)

    def handleXRTurnPad(self, *args):
        r"""

        Parameters
        ----------
        theCtx: AIS_InteractiveContext
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Handle trackpad view turn action.

        """
        return _AIS.AIS_ViewController_handleXRTurnPad(self, *args)

    def handleZFocusScroll(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        theParams: Aspect_ScrollDelta

        Return
        -------
        None

        Description
        -----------
        Handle zscroll event mygl.zoomactions. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_handleZFocusScroll(self, *args)

    def handleZRotate(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Handle z rotation event mygl.zrotate.

        """
        return _AIS.AIS_ViewController_handleZRotate(self, *args)

    def handleZoom(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View
        theParams: Aspect_ScrollDelta
        thePnt: gp_Pnt *

        Return
        -------
        None

        Description
        -----------
        Handle zoom event mygl.zoomactions. this method is expected to be called from rendering thread.

        """
        return _AIS.AIS_ViewController_handleZoom(self, *args)

    def hasPanningAnchorPoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return if panning anchor point has been defined.

        """
        return _AIS.AIS_ViewController_hasPanningAnchorPoint(self, *args)

    def panningAnchorPoint(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Return active panning anchor point.

        """
        return _AIS.AIS_ViewController_panningAnchorPoint(self, *args)

    def setAskNextFrame(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool (optional, default to true)

        Return
        -------
        None

        Description
        -----------
        Set if another frame should be drawn right after this one.

        """
        return _AIS.AIS_ViewController_setAskNextFrame(self, *args)

    def setPanningAnchorPoint(self, *args):
        r"""

        Parameters
        ----------
        thePnt: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Set active panning anchor point.

        """
        return _AIS.AIS_ViewController_setPanningAnchorPoint(self, *args)

    def toAskNextFrame(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if another frame should be drawn right after this one.

        """
        return _AIS.AIS_ViewController_toAskNextFrame(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewController

# Register AIS_ViewController in _AIS:
_AIS.AIS_ViewController_swigregister(AIS_ViewController)
class AIS_ViewCubeOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_ViewCube
        theOrient: V3d_TypeOfOrientation
        thePriority: int (optional, default to 5)

        Return
        -------
        None

        Description
        -----------
        Main constructor.

        """
        _AIS.AIS_ViewCubeOwner_swiginit(self, _AIS.new_AIS_ViewCubeOwner(*args))

    def MainOrientation(self, *args):
        r"""
        Return
        -------
        V3d_TypeOfOrientation

        Description
        -----------
        Return new orientation to set.

        """
        return _AIS.AIS_ViewCubeOwner_MainOrientation(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewCubeOwner

# Register AIS_ViewCubeOwner in _AIS:
_AIS.AIS_ViewCubeOwner_swigregister(AIS_ViewCubeOwner)
class AIS_ViewCubeSensitive(OCC.Core.Select3D.Select3D_SensitivePrimitiveArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theOwner: SelectMgr_EntityOwner
        theTris: Graphic3d_ArrayOfTriangles

        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _AIS.AIS_ViewCubeSensitive_swiginit(self, _AIS.new_AIS_ViewCubeSensitive(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewCubeSensitive

# Register AIS_ViewCubeSensitive in _AIS:
_AIS.AIS_ViewCubeSensitive_swigregister(AIS_ViewCubeSensitive)
class AIS_ViewInputBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsNewGesture = property(_AIS.AIS_ViewInputBuffer_IsNewGesture_get, _AIS.AIS_ViewInputBuffer_IsNewGesture_set)
    ZoomActions = property(_AIS.AIS_ViewInputBuffer_ZoomActions_get, _AIS.AIS_ViewInputBuffer_ZoomActions_set)
    Orientation = property(_AIS.AIS_ViewInputBuffer_Orientation_get, _AIS.AIS_ViewInputBuffer_Orientation_set)
    MoveTo = property(_AIS.AIS_ViewInputBuffer_MoveTo_get, _AIS.AIS_ViewInputBuffer_MoveTo_set)
    Selection = property(_AIS.AIS_ViewInputBuffer_Selection_get, _AIS.AIS_ViewInputBuffer_Selection_set)
    Panning = property(_AIS.AIS_ViewInputBuffer_Panning_get, _AIS.AIS_ViewInputBuffer_Panning_set)
    Dragging = property(_AIS.AIS_ViewInputBuffer_Dragging_get, _AIS.AIS_ViewInputBuffer_Dragging_set)
    OrbitRotation = property(_AIS.AIS_ViewInputBuffer_OrbitRotation_get, _AIS.AIS_ViewInputBuffer_OrbitRotation_set)
    ViewRotation = property(_AIS.AIS_ViewInputBuffer_ViewRotation_get, _AIS.AIS_ViewInputBuffer_ViewRotation_set)
    ZRotate = property(_AIS.AIS_ViewInputBuffer_ZRotate_get, _AIS.AIS_ViewInputBuffer_ZRotate_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _AIS.AIS_ViewInputBuffer_swiginit(self, _AIS.new_AIS_ViewInputBuffer(*args))

    def Reset(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset events buffer.

        """
        return _AIS.AIS_ViewInputBuffer_Reset(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewInputBuffer

# Register AIS_ViewInputBuffer in _AIS:
_AIS.AIS_ViewInputBuffer_swigregister(AIS_ViewInputBuffer)
class AIS_WalkDelta(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _AIS.AIS_WalkDelta_swiginit(self, _AIS.new_AIS_WalkDelta(*args))

    def IsCrouching(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return crouching state.

        """
        return _AIS.AIS_WalkDelta_IsCrouching(self, *args)

    def IsDefined(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if navigation keys are pressed even if delta from the previous frame is empty.

        """
        return _AIS.AIS_WalkDelta_IsDefined(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true when both rotation and translation deltas are empty.

        """
        return _AIS.AIS_WalkDelta_IsEmpty(self, *args)

    def IsJumping(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return jumping state.

        """
        return _AIS.AIS_WalkDelta_IsJumping(self, *args)

    def IsRunning(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return running state.

        """
        return _AIS.AIS_WalkDelta_IsRunning(self, *args)

    def SetCrouching(self, *args):
        r"""

        Parameters
        ----------
        theIsCrouching: bool

        Return
        -------
        None

        Description
        -----------
        Set crouching state.

        """
        return _AIS.AIS_WalkDelta_SetCrouching(self, *args)

    def SetDefined(self, *args):
        r"""

        Parameters
        ----------
        theIsDefined: bool

        Return
        -------
        None

        Description
        -----------
        Set if any navigation key is pressed.

        """
        return _AIS.AIS_WalkDelta_SetDefined(self, *args)

    def SetJumping(self, *args):
        r"""

        Parameters
        ----------
        theIsJumping: bool

        Return
        -------
        None

        Description
        -----------
        Set jumping state.

        """
        return _AIS.AIS_WalkDelta_SetJumping(self, *args)

    def SetRunning(self, *args):
        r"""

        Parameters
        ----------
        theIsRunning: bool

        Return
        -------
        None

        Description
        -----------
        Set running state.

        """
        return _AIS.AIS_WalkDelta_SetRunning(self, *args)

    def ToMove(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if translation delta is defined.

        """
        return _AIS.AIS_WalkDelta_ToMove(self, *args)

    def ToRotate(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if rotation delta is defined.

        """
        return _AIS.AIS_WalkDelta_ToRotate(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_WalkDelta

# Register AIS_WalkDelta in _AIS:
_AIS.AIS_WalkDelta_swigregister(AIS_WalkDelta)
class AIS_WalkPart(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Value = property(_AIS.AIS_WalkPart_Value_get, _AIS.AIS_WalkPart_Value_set)
    Pressure = property(_AIS.AIS_WalkPart_Pressure_get, _AIS.AIS_WalkPart_Pressure_set)
    Duration = property(_AIS.AIS_WalkPart_Duration_get, _AIS.AIS_WalkPart_Duration_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _AIS.AIS_WalkPart_swiginit(self, _AIS.new_AIS_WalkPart(*args))

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if delta is empty.

        """
        return _AIS.AIS_WalkPart_IsEmpty(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_WalkPart

# Register AIS_WalkPart in _AIS:
_AIS.AIS_WalkPart_swigregister(AIS_WalkPart)
class AIS_AnimationCamera(AIS_Animation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theAnimationName: str
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Main constructor.

        """
        _AIS.AIS_AnimationCamera_swiginit(self, _AIS.new_AIS_AnimationCamera(*args))

    def CameraEnd(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_Camera>

        Description
        -----------
        Return camera end position.

        """
        return _AIS.AIS_AnimationCamera_CameraEnd(self, *args)

    def CameraStart(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_Camera>

        Description
        -----------
        Return camera start position.

        """
        return _AIS.AIS_AnimationCamera_CameraStart(self, *args)

    def SetCameraEnd(self, *args):
        r"""

        Parameters
        ----------
        theCameraEnd: Graphic3d_Camera

        Return
        -------
        None

        Description
        -----------
        Define camera end position.

        """
        return _AIS.AIS_AnimationCamera_SetCameraEnd(self, *args)

    def SetCameraStart(self, *args):
        r"""

        Parameters
        ----------
        theCameraStart: Graphic3d_Camera

        Return
        -------
        None

        Description
        -----------
        Define camera start position.

        """
        return _AIS.AIS_AnimationCamera_SetCameraStart(self, *args)

    def SetView(self, *args):
        r"""

        Parameters
        ----------
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Set target view.

        """
        return _AIS.AIS_AnimationCamera_SetView(self, *args)

    def View(self, *args):
        r"""
        Return
        -------
        opencascade::handle<V3d_View>

        Description
        -----------
        Return the target view.

        """
        return _AIS.AIS_AnimationCamera_View(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_AnimationCamera_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AnimationCamera

# Register AIS_AnimationCamera in _AIS:
_AIS.AIS_AnimationCamera_swigregister(AIS_AnimationCamera)
class AIS_Axis(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Line

        Return
        -------
        None

        Description
        -----------
        Initializes the line acomponent.

        Parameters
        ----------
        aComponent: Geom_Axis2Placement
        anAxisType: AIS_TypeOfAxis

        Return
        -------
        None

        Description
        -----------
        Initializes the axis2 position acomponent. the coordinate system used is right-handed.

        Parameters
        ----------
        anAxis: Geom_Axis1Placement

        Return
        -------
        None

        Description
        -----------
        Initializes the axis1 position anaxis.

        Parameters
        ----------
        theAxis: gp_Ax1
        theLength: float (optional, default to -1)

        Return
        -------
        None

        Description
        -----------
        Initializes the ray as axis with start point and direction @param[in] theaxis start point and direction of the ray @param[in] thelength optional length of the ray (ray is infinite by default).

        """
        _AIS.AIS_Axis_swiginit(self, _AIS.new_AIS_Axis(*args))

    def Axis2Placement(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Axis2Placement>

        Description
        -----------
        Returns the position of axis2 and positions it by identifying it as the x, y, or z axis and giving its direction in 3d space. the coordinate system used is right-handed.

        """
        return _AIS.AIS_Axis_Axis2Placement(self, *args)

    def Component(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Line>

        Description
        -----------
        Returns the axis entity acomponent and identifies it as a component of a shape.

        """
        return _AIS.AIS_Axis_Component(self, *args)

    def IsXYZAxis(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns a signature of 2 for axis datums. when you activate mode 2 by a signature, you pick ais objects of type ais_axis.

        """
        return _AIS.AIS_Axis_IsXYZAxis(self, *args)

    def SetAxis1Placement(self, *args):
        r"""

        Parameters
        ----------
        anAxis: Geom_Axis1Placement

        Return
        -------
        None

        Description
        -----------
        Constructs a new line to serve as the axis anaxis in 3d space.

        """
        return _AIS.AIS_Axis_SetAxis1Placement(self, *args)

    def SetAxis2Placement(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Axis2Placement
        anAxisType: AIS_TypeOfAxis

        Return
        -------
        None

        Description
        -----------
        Allows you to provide settings for acomponent:the position and direction of an axis in 3d space. the coordinate system used is right-handed.

        """
        return _AIS.AIS_Axis_SetAxis2Placement(self, *args)

    def SetComponent(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Line

        Return
        -------
        None

        Description
        -----------
        Sets the coordinates of the lin acomponent.

        """
        return _AIS.AIS_Axis_SetComponent(self, *args)

    def SetDisplayAspect(self, *args):
        r"""

        Parameters
        ----------
        theNewDatumAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Set required visualization parameters.

        """
        return _AIS.AIS_Axis_SetDisplayAspect(self, *args)

    def SetTypeOfAxis(self, *args):
        r"""

        Parameters
        ----------
        theTypeAxis: AIS_TypeOfAxis

        Return
        -------
        None

        Description
        -----------
        Constructs the entity thetypeaxis to stock information concerning type of axis.

        """
        return _AIS.AIS_Axis_SetTypeOfAxis(self, *args)

    def TypeOfAxis(self, *args):
        r"""
        Return
        -------
        AIS_TypeOfAxis

        Description
        -----------
        Returns the type of axis.

        """
        return _AIS.AIS_Axis_TypeOfAxis(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Axis_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Axis

# Register AIS_Axis in _AIS:
_AIS.AIS_Axis_swigregister(AIS_Axis)
class AIS_BaseAnimationObject(AIS_Animation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_AIS_BaseAnimationObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_BaseAnimationObject

# Register AIS_BaseAnimationObject in _AIS:
_AIS.AIS_BaseAnimationObject_swigregister(AIS_BaseAnimationObject)
class AIS_CameraFrustum(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SelectionMode_Edges = _AIS.AIS_CameraFrustum_SelectionMode_Edges
    r"""Json string serializer."""
    SelectionMode_Volume = _AIS.AIS_CameraFrustum_SelectionMode_Volume
    r"""Json string serializer."""


    class SelectionMode(IntEnum):
    	SelectionMode_Edges = 0
    	SelectionMode_Volume = 1
    SelectionMode_Edges = SelectionMode.SelectionMode_Edges
    SelectionMode_Volume = SelectionMode.SelectionMode_Volume


    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs camera frustum with default configuration.

        """
        _AIS.AIS_CameraFrustum_swiginit(self, _AIS.new_AIS_CameraFrustum(*args))

    def SetCameraFrustum(self, *args):
        r"""

        Parameters
        ----------
        theCamera: Graphic3d_Camera

        Return
        -------
        None

        Description
        -----------
        Sets camera frustum.

        """
        return _AIS.AIS_CameraFrustum_SetCameraFrustum(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_CameraFrustum

# Register AIS_CameraFrustum in _AIS:
_AIS.AIS_CameraFrustum_swigregister(AIS_CameraFrustum)
class AIS_Circle(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aCircle: Geom_Circle

        Return
        -------
        None

        Description
        -----------
        Initializes this algorithm for constructing ais circle datums initializes the circle acircle.

        Parameters
        ----------
        theCircle: Geom_Circle
        theUStart: float
        theUEnd: float
        theIsFilledCircleSens: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Initializes this algorithm for constructing ais circle datums. initializes the circle thecircle, the arc starting point theustart, the arc ending point theuend, and the type of sensitivity theisfilledcirclesens.

        """
        _AIS.AIS_Circle_swiginit(self, _AIS.new_AIS_Circle(*args))

    def Circle(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Circle>

        Description
        -----------
        Returns the circle component defined in setcircle.

        """
        return _AIS.AIS_Circle_Circle(self, *args)

    def IsFilledCircleSens(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the type of sensitivity for the circle;.

        """
        return _AIS.AIS_Circle_IsFilledCircleSens(self, *args)

    def Parameters(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theU1: float
        theU2: float

        Description
        -----------
        Constructs instances of the starting point and the end point parameters, theu1 and theu2.

        """
        return _AIS.AIS_Circle_Parameters(self, *args)

    def SetCircle(self, *args):
        r"""

        Parameters
        ----------
        theCircle: Geom_Circle

        Return
        -------
        None

        Description
        -----------
        Allows you to provide settings for the circle datum acircle.

        """
        return _AIS.AIS_Circle_SetCircle(self, *args)

    def SetFilledCircleSens(self, *args):
        r"""

        Parameters
        ----------
        theIsFilledCircleSens: bool

        Return
        -------
        None

        Description
        -----------
        Sets the type of sensitivity for the circle. if theisfilledcirclesens set to standard_true then the whole circle will be detectable, otherwise only the boundary of the circle.

        """
        return _AIS.AIS_Circle_SetFilledCircleSens(self, *args)

    def SetFirstParam(self, *args):
        r"""

        Parameters
        ----------
        theU: float

        Return
        -------
        None

        Description
        -----------
        Allows you to set the parameter theu for the starting point of an arc.

        """
        return _AIS.AIS_Circle_SetFirstParam(self, *args)

    def SetLastParam(self, *args):
        r"""

        Parameters
        ----------
        theU: float

        Return
        -------
        None

        Description
        -----------
        Allows you to provide the parameter theu for the end point of an arc.

        """
        return _AIS.AIS_Circle_SetLastParam(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Circle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Circle

# Register AIS_Circle in _AIS:
_AIS.AIS_Circle_swigregister(AIS_Circle)
class AIS_ColorScale(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Default constructor.

        """
        _AIS.AIS_ColorScale_swiginit(self, _AIS.new_AIS_ColorScale(*args))

    def ColorRange(self, *args):
        r"""

        Parameters
        ----------
        theMinColor: Quantity_Color
        theMaxColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Returns color range corresponding to minimum and maximum values, blue to red by default.

        """
        return _AIS.AIS_ColorScale_ColorRange(self, *args)

    def Compute(self, *args):
        r"""

        Parameters
        ----------
        thePrsMgr: PrsMgr_PresentationManager
        thePresentation: Prs3d_Presentation
        theMode: int

        Return
        -------
        None

        Description
        -----------
        Compute presentation.

        """
        return _AIS.AIS_ColorScale_Compute(self, *args)

    def FindColor(self, *args):
        r"""

        Parameters
        ----------
        theValue: float
        theMin: float
        theMax: float
        theColorsCount: int
        theColorHlsMin: Graphic3d_Vec3d
        theColorHlsMax: Graphic3d_Vec3d
        theColor: Quantity_Color

        Return
        -------
        bool

        Description
        -----------
        Calculate color according passed value; returns true if value is in range or false, if isn't.

        Parameters
        ----------
        theValue: float
        theMin: float
        theMax: float
        theColorsCount: int
        theColor: Quantity_Color

        Return
        -------
        bool

        Description
        -----------
        Calculate color according passed value; returns true if value is in range or false, if isn't.

        Parameters
        ----------
        theValue: float
        theColor: Quantity_Color

        Return
        -------
        bool

        Description
        -----------
        Calculate color according passed value; returns true if value is in range or false, if isn't.

        """
        return _AIS.AIS_ColorScale_FindColor(self, *args)

    def Format(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns the format of text.

        """
        return _AIS.AIS_ColorScale_Format(self, *args)

    def GetBreadth(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the breadth of color bar, 0 by default (e.g. should be set by user explicitly before displaying).

        """
        return _AIS.AIS_ColorScale_GetBreadth(self, *args)

    def GetColorType(self, *args):
        r"""
        Return
        -------
        Aspect_TypeOfColorScaleData

        Description
        -----------
        Returns the type of colors, aspect_tocsd_auto by default. aspect_tocsd_auto - value between red and blue aspect_tocsd_user - user specified color from color map.

        """
        return _AIS.AIS_ColorScale_GetColorType(self, *args)

    def GetColors(self, *args):
        r"""

        Parameters
        ----------
        theColors: Aspect_SequenceOfColor

        Return
        -------
        None

        Description
        -----------
        Returns the user specified colors.
        Return
        -------
        Aspect_SequenceOfColor

        Description
        -----------
        Returns the user specified colors.

        """
        return _AIS.AIS_ColorScale_GetColors(self, *args)

    def GetFormat(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns the format for numbers, '%.4g' by default. the same like format for function printf(). used if getlabeltype() is tocsd_auto;.

        """
        return _AIS.AIS_ColorScale_GetFormat(self, *args)

    def GetHeight(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the height of color bar, 0 by default (e.g. should be set by user explicitly before displaying).

        """
        return _AIS.AIS_ColorScale_GetHeight(self, *args)

    def GetIntervalColor(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int

        Return
        -------
        Quantity_Color

        Description
        -----------
        Returns the user specified color from color map with index (starts at 1). returns default color if index is out of range in color map.

        """
        return _AIS.AIS_ColorScale_GetIntervalColor(self, *args)

    def GetLabel(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int

        Return
        -------
        TCollection_ExtendedString

        Description
        -----------
        Returns the user specified label with index theindex. index is in range from 1 to getnumberofintervals() or to getnumberofintervals() + 1 if islabelatborder() is true. returns empty string if label not defined.

        """
        return _AIS.AIS_ColorScale_GetLabel(self, *args)

    def GetLabelPosition(self, *args):
        r"""
        Return
        -------
        Aspect_TypeOfColorScalePosition

        Description
        -----------
        Returns the position of labels concerning color filled rectangles, aspect_tocsp_right by default.

        """
        return _AIS.AIS_ColorScale_GetLabelPosition(self, *args)

    def GetLabelType(self, *args):
        r"""
        Return
        -------
        Aspect_TypeOfColorScaleData

        Description
        -----------
        Returns the type of labels, aspect_tocsd_auto by default. aspect_tocsd_auto - labels as boundary values for intervals aspect_tocsd_user - user specified label is used.

        """
        return _AIS.AIS_ColorScale_GetLabelType(self, *args)

    def GetLabels(self, *args):
        r"""

        Parameters
        ----------
        theLabels: TColStd_SequenceOfExtendedString

        Return
        -------
        None

        Description
        -----------
        Returns the user specified labels.

        """
        return _AIS.AIS_ColorScale_GetLabels(self, *args)

    def GetMax(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns maximal value of color scale, 1.0 by default.

        """
        return _AIS.AIS_ColorScale_GetMax(self, *args)

    def GetMin(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns minimal value of color scale, 0.0 by default.

        """
        return _AIS.AIS_ColorScale_GetMin(self, *args)

    def GetNumberOfIntervals(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of color scale intervals, 10 by default.

        """
        return _AIS.AIS_ColorScale_GetNumberOfIntervals(self, *args)

    def GetPosition(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theX: float
        theY: float

        Description
        -----------
        Returns the bottom-left position of color scale, 0x0 by default.

        """
        return _AIS.AIS_ColorScale_GetPosition(self, *args)

    def GetRange(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theMin: float
        theMax: float

        Description
        -----------
        Returns minimal and maximal values of color scale, 0.0 to 1.0 by default.

        """
        return _AIS.AIS_ColorScale_GetRange(self, *args)

    def GetSize(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theBreadth: int
        theHeight: int

        Description
        -----------
        Returns the size of color bar, 0 and 0 by default (e.g. should be set by user explicitly before displaying).

        """
        return _AIS.AIS_ColorScale_GetSize(self, *args)

    def GetTextHeight(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the font height of text labels, 20 by default.

        """
        return _AIS.AIS_ColorScale_GetTextHeight(self, *args)

    def GetTitle(self, *args):
        r"""
        Return
        -------
        TCollection_ExtendedString

        Description
        -----------
        Returns the color scale title string, empty string by default.

        """
        return _AIS.AIS_ColorScale_GetTitle(self, *args)

    def GetTitlePosition(self, *args):
        r"""
        Return
        -------
        Aspect_TypeOfColorScalePosition

        Description
        -----------
        Returns the position of color scale title, aspect_tocsp_left by default.

        """
        return _AIS.AIS_ColorScale_GetTitlePosition(self, *args)

    def GetXPosition(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the left position of color scale, 0 by default.

        """
        return _AIS.AIS_ColorScale_GetXPosition(self, *args)

    def GetYPosition(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the bottom position of color scale, 0 by default.

        """
        return _AIS.AIS_ColorScale_GetYPosition(self, *args)

    def HueMax(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the hue angle corresponding to maximum value, 0 by default (red).

        """
        return _AIS.AIS_ColorScale_HueMax(self, *args)

    def HueMin(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the hue angle corresponding to minimum value, 230 by default (blue).

        """
        return _AIS.AIS_ColorScale_HueMin(self, *args)

    def HueRange(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theMinAngle: float
        theMaxAngle: float

        Description
        -----------
        Returns the hue angle range corresponding to minimum and maximum values, 230 to 0 by default (blue to red).

        """
        return _AIS.AIS_ColorScale_HueRange(self, *args)

    def IsLabelAtBorder(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the labels are placed at border of color intervals, true by default. the automatically generated label will show value exactly on the current position: - value connecting two neighbor intervals (true) - value in the middle of interval (false).

        """
        return _AIS.AIS_ColorScale_IsLabelAtBorder(self, *args)

    def IsLogarithmic(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the color scale has logarithmic intervals, false by default.

        """
        return _AIS.AIS_ColorScale_IsLogarithmic(self, *args)

    def IsReversed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the labels and colors used in reversed order, false by default. - normal, bottom-up order with minimal value on the bottom and maximum value on top. - reversed, top-down order with maximum value on the bottom and minimum value on top.

        """
        return _AIS.AIS_ColorScale_IsReversed(self, *args)

    def IsSmoothTransition(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if color transition between neighbor intervals should be linearly interpolated, false by default.

        """
        return _AIS.AIS_ColorScale_IsSmoothTransition(self, *args)

    def Labels(self, *args):
        r"""
        Return
        -------
        TColStd_SequenceOfExtendedString

        Description
        -----------
        Returns the user specified labels.

        """
        return _AIS.AIS_ColorScale_Labels(self, *args)

    @staticmethod
    def MakeUniformColors(*args):
        r"""

        Parameters
        ----------
        theNbColors: int
        theLightness: float
        theHueFrom: float
        theHueTo: float

        Return
        -------
        Aspect_SequenceOfColor

        Description
        -----------
        Generates sequence of colors of the same lightness value in cie lch color space (see #quantity_toc_cielch), with hue values in the specified range. the colors are distributed across the range such as to have perceptually same difference between neighbour colors. for each color, maximal chroma value fitting in srgb gamut is used. //! @param thenbcolors - number of colors to generate @param thelightness - lightness to be used (0 is black, 100 is white, 32 is lightness of pure blue) @param thehuefrom - hue value at the start of the scale @param thehueto - hue value defining the end of the scale hue value can be out of the range [0, 360], interpreted as modulo 360. the colors of the scale will be in the order of increasing hue if thehueto > thehuefrom, and decreasing otherwise.

        """
        return _AIS.AIS_ColorScale_MakeUniformColors(*args)

    def SetBreadth(self, *args):
        r"""

        Parameters
        ----------
        theBreadth: int

        Return
        -------
        None

        Description
        -----------
        Sets the width of color bar.

        """
        return _AIS.AIS_ColorScale_SetBreadth(self, *args)

    def SetColorRange(self, *args):
        r"""

        Parameters
        ----------
        theMinColor: Quantity_Color
        theMaxColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color range corresponding to minimum and maximum values.

        """
        return _AIS.AIS_ColorScale_SetColorRange(self, *args)

    def SetColorType(self, *args):
        r"""

        Parameters
        ----------
        theType: Aspect_TypeOfColorScaleData

        Return
        -------
        None

        Description
        -----------
        Sets the type of colors. aspect_tocsd_auto - value between red and blue aspect_tocsd_user - user specified color from color map.

        """
        return _AIS.AIS_ColorScale_SetColorType(self, *args)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        theSeq: Aspect_SequenceOfColor

        Return
        -------
        None

        Description
        -----------
        Sets the color scale colors. the length of the sequence should be equal to getnumberofintervals().

        """
        return _AIS.AIS_ColorScale_SetColors(self, *args)

    def SetFormat(self, *args):
        r"""

        Parameters
        ----------
        theFormat: str

        Return
        -------
        None

        Description
        -----------
        Sets the color scale auto label format specification.

        """
        return _AIS.AIS_ColorScale_SetFormat(self, *args)

    def SetHeight(self, *args):
        r"""

        Parameters
        ----------
        theHeight: int

        Return
        -------
        None

        Description
        -----------
        Sets the height of color bar.

        """
        return _AIS.AIS_ColorScale_SetHeight(self, *args)

    def SetHueRange(self, *args):
        r"""

        Parameters
        ----------
        theMinAngle: float
        theMaxAngle: float

        Return
        -------
        None

        Description
        -----------
        Sets hue angle range corresponding to minimum and maximum values. the valid angle range is [0, 360], see quantity_color and quantity_toc_hls for more details.

        """
        return _AIS.AIS_ColorScale_SetHueRange(self, *args)

    def SetIntervalColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color
        theIndex: int

        Return
        -------
        None

        Description
        -----------
        Sets the color of the specified interval. note that list is automatically resized to include specified index. @param thecolor color value to set @param theindex index in range [1, getnumberofintervals()];  appended to the end of list if -1 is specified.

        """
        return _AIS.AIS_ColorScale_SetIntervalColor(self, *args)

    def SetLabel(self, *args):
        r"""

        Parameters
        ----------
        theLabel: str
        theIndex: int

        Return
        -------
        None

        Description
        -----------
        Sets the color scale label at index. note that list is automatically resized to include specified index. @param thelabel new label text @param theindex index in range [1, getnumberofintervals()] or [1, getnumberofintervals() + 1] if islabelatborder() is true;  label is appended to the end of list if negative index is specified.

        """
        return _AIS.AIS_ColorScale_SetLabel(self, *args)

    def SetLabelAtBorder(self, *args):
        r"""

        Parameters
        ----------
        theOn: bool

        Return
        -------
        None

        Description
        -----------
        Sets true if the labels are placed at border of color intervals (true by default). if set to false, labels will be drawn at color intervals rather than at borders.

        """
        return _AIS.AIS_ColorScale_SetLabelAtBorder(self, *args)

    def SetLabelPosition(self, *args):
        r"""

        Parameters
        ----------
        thePos: Aspect_TypeOfColorScalePosition

        Return
        -------
        None

        Description
        -----------
        Sets the color scale labels position relative to color bar.

        """
        return _AIS.AIS_ColorScale_SetLabelPosition(self, *args)

    def SetLabelType(self, *args):
        r"""

        Parameters
        ----------
        theType: Aspect_TypeOfColorScaleData

        Return
        -------
        None

        Description
        -----------
        Sets the type of labels. aspect_tocsd_auto - labels as boundary values for intervals aspect_tocsd_user - user specified label is used.

        """
        return _AIS.AIS_ColorScale_SetLabelType(self, *args)

    def SetLabels(self, *args):
        r"""

        Parameters
        ----------
        theSeq: TColStd_SequenceOfExtendedString

        Return
        -------
        None

        Description
        -----------
        Sets the color scale labels. the length of the sequence should be equal to getnumberofintervals() or to getnumberofintervals() + 1 if islabelatborder() is true. if length of the sequence does not much the number of intervals, then these labels will be considered as 'free' and will be located at the virtual intervals corresponding to the number of labels (with flag islabelatborder() having the same effect as in normal case).

        """
        return _AIS.AIS_ColorScale_SetLabels(self, *args)

    def SetLogarithmic(self, *args):
        r"""

        Parameters
        ----------
        isLogarithmic: bool

        Return
        -------
        None

        Description
        -----------
        Sets true if the color scale has logarithmic intervals.

        """
        return _AIS.AIS_ColorScale_SetLogarithmic(self, *args)

    def SetMax(self, *args):
        r"""

        Parameters
        ----------
        theMax: float

        Return
        -------
        None

        Description
        -----------
        Sets the maximal value of color scale.

        """
        return _AIS.AIS_ColorScale_SetMax(self, *args)

    def SetMin(self, *args):
        r"""

        Parameters
        ----------
        theMin: float

        Return
        -------
        None

        Description
        -----------
        Sets the minimal value of color scale.

        """
        return _AIS.AIS_ColorScale_SetMin(self, *args)

    def SetNumberOfIntervals(self, *args):
        r"""

        Parameters
        ----------
        theNum: int

        Return
        -------
        None

        Description
        -----------
        Sets the number of color scale intervals.

        """
        return _AIS.AIS_ColorScale_SetNumberOfIntervals(self, *args)

    def SetPosition(self, *args):
        r"""

        Parameters
        ----------
        theX: int
        theY: int

        Return
        -------
        None

        Description
        -----------
        Sets the position of color scale.

        """
        return _AIS.AIS_ColorScale_SetPosition(self, *args)

    def SetRange(self, *args):
        r"""

        Parameters
        ----------
        theMin: float
        theMax: float

        Return
        -------
        None

        Description
        -----------
        Sets the minimal and maximal value of color scale. note that values order will be ignored - the minimum and maximum values will be swapped if needed. ::setreversed() should be called to swap displaying order.

        """
        return _AIS.AIS_ColorScale_SetRange(self, *args)

    def SetReversed(self, *args):
        r"""

        Parameters
        ----------
        theReverse: bool

        Return
        -------
        None

        Description
        -----------
        Sets true if the labels and colors used in reversed order.

        """
        return _AIS.AIS_ColorScale_SetReversed(self, *args)

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        theBreadth: int
        theHeight: int

        Return
        -------
        None

        Description
        -----------
        Sets the size of color bar.

        """
        return _AIS.AIS_ColorScale_SetSize(self, *args)

    def SetSmoothTransition(self, *args):
        r"""

        Parameters
        ----------
        theIsSmooth: bool

        Return
        -------
        None

        Description
        -----------
        Setup smooth color transition.

        """
        return _AIS.AIS_ColorScale_SetSmoothTransition(self, *args)

    def SetTextHeight(self, *args):
        r"""

        Parameters
        ----------
        theHeight: int

        Return
        -------
        None

        Description
        -----------
        Sets the height of text of color scale.

        """
        return _AIS.AIS_ColorScale_SetTextHeight(self, *args)

    def SetTitle(self, *args):
        r"""

        Parameters
        ----------
        theTitle: str

        Return
        -------
        None

        Description
        -----------
        Sets the color scale title string.

        """
        return _AIS.AIS_ColorScale_SetTitle(self, *args)

    def SetTitlePosition(self, *args):
        r"""

        Parameters
        ----------
        thePos: Aspect_TypeOfColorScalePosition

        Return
        -------
        None

        Description
        -----------
        Sets the color scale title position.

        """
        return _AIS.AIS_ColorScale_SetTitlePosition(self, *args)

    def SetUniformColors(self, *args):
        r"""

        Parameters
        ----------
        theLightness: float
        theHueFrom: float
        theHueTo: float

        Return
        -------
        None

        Description
        -----------
        Populates colors scale by colors of the same lightness value in cie lch color space, distributed by hue, with perceptually uniform differences between consequent colors. see makeuniformcolors() for description of parameters.

        """
        return _AIS.AIS_ColorScale_SetUniformColors(self, *args)

    def SetXPosition(self, *args):
        r"""

        Parameters
        ----------
        theX: int

        Return
        -------
        None

        Description
        -----------
        Sets the left position of color scale.

        """
        return _AIS.AIS_ColorScale_SetXPosition(self, *args)

    def SetYPosition(self, *args):
        r"""

        Parameters
        ----------
        theY: int

        Return
        -------
        None

        Description
        -----------
        Sets the bottom position of color scale.

        """
        return _AIS.AIS_ColorScale_SetYPosition(self, *args)

    def TextHeight(self, *args):
        r"""

        Parameters
        ----------
        theText: str

        Return
        -------
        int

        Description
        -----------
        Returns the height of text. @param thetext [in] the text of which to calculate height.

        """
        return _AIS.AIS_ColorScale_TextHeight(self, *args)

    def TextSize(self, *args):
        r"""

        Parameters
        ----------
        theText: str
        theHeight: int

        Return
        -------
        theWidth: int
        theAscent: int
        theDescent: int

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_ColorScale_TextSize(self, *args)

    def TextWidth(self, *args):
        r"""

        Parameters
        ----------
        theText: str

        Return
        -------
        int

        Description
        -----------
        Returns the width of text. @param thetext [in] the text of which to calculate width.

        """
        return _AIS.AIS_ColorScale_TextWidth(self, *args)

    @staticmethod
    def hueToValidRange(*args):
        r"""

        Parameters
        ----------
        theHue: float

        Return
        -------
        float

        Description
        -----------
        Shift hue into valid range. lightness and saturation should be specified in valid range [0.0, 1.0], however hue might be given out of quantity_color range to specify desired range for interpolation.

        """
        return _AIS.AIS_ColorScale_hueToValidRange(*args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ColorScale_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ColorScale

# Register AIS_ColorScale in _AIS:
_AIS.AIS_ColorScale_swigregister(AIS_ColorScale)
class AIS_ConnectedInteractive(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aTypeOfPresentation3d: PrsMgr_TypeOfPresentation3d (optional, default to PrsMgr_TOP_AllView)

        Return
        -------
        None

        Description
        -----------
        Disconnects the previous view and sets highlight mode to 0. this highlights the wireframe presentation atypeofpresentation3d. top_allview deactivates hidden line removal.

        """
        _AIS.AIS_ConnectedInteractive_swiginit(self, _AIS.new_AIS_ConnectedInteractive(*args))

    def Connect(self, *args):
        r"""

        Parameters
        ----------
        theAnotherObj: AIS_InteractiveObject

        Return
        -------
        None

        Description
        -----------
        Establishes the connection between the connected interactive object, anotheriobj, and its reference.

        Parameters
        ----------
        theAnotherObj: AIS_InteractiveObject
        theLocation: gp_Trsf

        Return
        -------
        None

        Description
        -----------
        Establishes the connection between the connected interactive object, anotheriobj, and its reference. locates instance in alocation.

        Parameters
        ----------
        theAnotherObj: AIS_InteractiveObject
        theLocation: TopLoc_Datum3D

        Return
        -------
        None

        Description
        -----------
        Establishes the connection between the connected interactive object, anotheriobj, and its reference. locates instance in alocation.

        """
        return _AIS.AIS_ConnectedInteractive_Connect(self, *args)

    def ConnectedTo(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Returns the connection with the reference interactive object.

        """
        return _AIS.AIS_ConnectedInteractive_ConnectedTo(self, *args)

    def Disconnect(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clears the connection with a source reference. the presentation will no longer be displayed. warning must be done before deleting the presentation.

        """
        return _AIS.AIS_ConnectedInteractive_Disconnect(self, *args)

    def HasConnection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a connection established between the presentation and its source reference.

        """
        return _AIS.AIS_ConnectedInteractive_HasConnection(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ConnectedInteractive_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ConnectedInteractive

# Register AIS_ConnectedInteractive in _AIS:
_AIS.AIS_ConnectedInteractive_swigregister(AIS_ConnectedInteractive)
class AIS_LightSource(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theLightSource: Graphic3d_CLight

        Return
        -------
        None

        Description
        -----------
        Initializes the light source by copying graphic3d_clight settings.

        """
        _AIS.AIS_LightSource_swiginit(self, _AIS.new_AIS_LightSource(*args))

    def ArcSize(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns sensitive sphere arc size in pixels; 20 by default.

        """
        return _AIS.AIS_LightSource_ArcSize(self, *args)

    def IsZoomable(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if transform-persistence is allowed; true by default for ambient and directional lights and false by default for positional and spot lights.

        """
        return _AIS.AIS_LightSource_IsZoomable(self, *args)

    def Light(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_CLight>

        Description
        -----------
        Returns the light.

        """
        return _AIS.AIS_LightSource_Light(self, *args)

    def MarkerImage(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        opencascade::handle<Graphic3d_MarkerImage>

        Description
        -----------
        Returns light source icon. @param theisenabled [in] marker index for enabled/disabled light source states.

        """
        return _AIS.AIS_LightSource_MarkerImage(self, *args)

    def MarkerType(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        Aspect_TypeOfMarker

        Description
        -----------
        Returns light source icon. @param theisenabled [in] marker index for enabled/disabled light source states.

        """
        return _AIS.AIS_LightSource_MarkerType(self, *args)

    def NbArrows(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns a number of directional light arrows to display; 5 by default.

        """
        return _AIS.AIS_LightSource_NbArrows(self, *args)

    def NbSplitsArrow(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns tessellation level for arrows; 20 by default.

        """
        return _AIS.AIS_LightSource_NbSplitsArrow(self, *args)

    def NbSplitsQuadric(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns tessellation level for quadric surfaces; 30 by default.

        """
        return _AIS.AIS_LightSource_NbSplitsQuadric(self, *args)

    def SetArcSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: int

        Return
        -------
        None

        Description
        -----------
        Sets the size of sensitive sphere arc.

        """
        return _AIS.AIS_LightSource_SetArcSize(self, *args)

    def SetDisplayName(self, *args):
        r"""

        Parameters
        ----------
        theToDisplay: bool

        Return
        -------
        None

        Description
        -----------
        Show/hide light source name.

        """
        return _AIS.AIS_LightSource_SetDisplayName(self, *args)

    def SetDisplayRange(self, *args):
        r"""

        Parameters
        ----------
        theToDisplay: bool

        Return
        -------
        None

        Description
        -----------
        Show/hide light source range shaded presentation.

        """
        return _AIS.AIS_LightSource_SetDisplayRange(self, *args)

    def SetDraggable(self, *args):
        r"""

        Parameters
        ----------
        theIsDraggable: bool

        Return
        -------
        None

        Description
        -----------
        Sets if dragging is allowed.

        """
        return _AIS.AIS_LightSource_SetDraggable(self, *args)

    def SetLight(self, *args):
        r"""

        Parameters
        ----------
        theLight: Graphic3d_CLight

        Return
        -------
        None

        Description
        -----------
        Set the light.

        """
        return _AIS.AIS_LightSource_SetLight(self, *args)

    def SetMarkerImage(self, *args):
        r"""

        Parameters
        ----------
        theImage: Graphic3d_MarkerImage
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Sets custom icon to light source.

        """
        return _AIS.AIS_LightSource_SetMarkerImage(self, *args)

    def SetMarkerType(self, *args):
        r"""

        Parameters
        ----------
        theType: Aspect_TypeOfMarker
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Sets standard icon to light source.

        """
        return _AIS.AIS_LightSource_SetMarkerType(self, *args)

    def SetNbArrows(self, *args):
        r"""

        Parameters
        ----------
        theNbArrows: int

        Return
        -------
        None

        Description
        -----------
        Returns a number of directional light arrows to display (supported values: 1, 3, 5, 9).

        """
        return _AIS.AIS_LightSource_SetNbArrows(self, *args)

    def SetNbSplitsArrow(self, *args):
        r"""

        Parameters
        ----------
        theNbSplits: int

        Return
        -------
        None

        Description
        -----------
        Sets tessellation level for arrows.

        """
        return _AIS.AIS_LightSource_SetNbSplitsArrow(self, *args)

    def SetNbSplitsQuadric(self, *args):
        r"""

        Parameters
        ----------
        theNbSplits: int

        Return
        -------
        None

        Description
        -----------
        Sets tessellation level for quadric surfaces.

        """
        return _AIS.AIS_LightSource_SetNbSplitsQuadric(self, *args)

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: float

        Return
        -------
        None

        Description
        -----------
        Sets the size of presentation.

        """
        return _AIS.AIS_LightSource_SetSize(self, *args)

    def SetSwitchOnClick(self, *args):
        r"""

        Parameters
        ----------
        theToHandle: bool

        Return
        -------
        None

        Description
        -----------
        Sets if mouse click should turn light on/off.

        """
        return _AIS.AIS_LightSource_SetSwitchOnClick(self, *args)

    def SetZoomable(self, *args):
        r"""

        Parameters
        ----------
        theIsZoomable: bool

        Return
        -------
        None

        Description
        -----------
        Sets if transform-persistence is allowed.

        """
        return _AIS.AIS_LightSource_SetZoomable(self, *args)

    def Size(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the size of presentation; 50 by default.

        """
        return _AIS.AIS_LightSource_Size(self, *args)

    def ToDisplayName(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the light source name should be displayed; true by default.

        """
        return _AIS.AIS_LightSource_ToDisplayName(self, *args)

    def ToDisplayRange(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true to display light source range as sphere (positional light) or cone (spot light); true by default. has no effect for non-zoomable presentation.

        """
        return _AIS.AIS_LightSource_ToDisplayRange(self, *args)

    def ToSwitchOnClick(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if mouse click will turn light on/off; true by default.

        """
        return _AIS.AIS_LightSource_ToSwitchOnClick(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_LightSource

# Register AIS_LightSource in _AIS:
_AIS.AIS_LightSource_swigregister(AIS_LightSource)
class AIS_Line(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aLine: Geom_Line

        Return
        -------
        None

        Description
        -----------
        Initializes the line aline.

        Parameters
        ----------
        aStartPoint: Geom_Point
        aEndPoint: Geom_Point

        Return
        -------
        None

        Description
        -----------
        Initializes a starting point astartpoint and a finishing point aendpoint for the line.

        """
        _AIS.AIS_Line_swiginit(self, _AIS.new_AIS_Line(*args))

    def Line(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Line>

        Description
        -----------
        Constructs an infinite line.

        """
        return _AIS.AIS_Line_Line(self, *args)

    def Points(self, *args):
        r"""

        Parameters
        ----------
        thePStart: Geom_Point
        thePEnd: Geom_Point

        Return
        -------
        None

        Description
        -----------
        Returns the starting point thepstart and the end point thepend of the line set by setpoints.

        """
        return _AIS.AIS_Line_Points(self, *args)

    def SetLine(self, *args):
        r"""

        Parameters
        ----------
        theLine: Geom_Line

        Return
        -------
        None

        Description
        -----------
        Instantiates an infinite line.

        """
        return _AIS.AIS_Line_SetLine(self, *args)

    def SetPoints(self, *args):
        r"""

        Parameters
        ----------
        thePStart: Geom_Point
        thePEnd: Geom_Point

        Return
        -------
        None

        Description
        -----------
        Sets the starting point thepstart and ending point thepend of the infinite line to create a finite line segment.

        """
        return _AIS.AIS_Line_SetPoints(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Line_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Line

# Register AIS_Line in _AIS:
_AIS.AIS_Line_swigregister(AIS_Line)
class AIS_Manipulator(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs a manipulator object with default placement and all parts to be displayed.

        Parameters
        ----------
        thePosition: gp_Ax2

        Return
        -------
        None

        Description
        -----------
        Constructs a manipulator object with input location and positions of axes and all parts to be displayed.

        """
        _AIS.AIS_Manipulator_swiginit(self, _AIS.new_AIS_Manipulator(*args))

    def ActiveAxisIndex(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Manipulator_ActiveAxisIndex(self, *args)

    def ActiveMode(self, *args):
        r"""
        Return
        -------
        AIS_ManipulatorMode

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Manipulator_ActiveMode(self, *args)

    def Attach(self, *args):
        r"""

        Parameters
        ----------
        theObject: AIS_InteractiveObject
        theOptions: OptionsForAttach (optional, default to OptionsForAttach())

        Return
        -------
        None

        Description
        -----------
        Attaches himself to the input interactive object and become displayed in the same context. it is placed in the center of object bounding box, and its size is adjusted to the object bounding box.

        Parameters
        ----------
        theObject: AIS_ManipulatorObjectSequence
        theOptions: OptionsForAttach (optional, default to OptionsForAttach())

        Return
        -------
        None

        Description
        -----------
        Attaches himself to the input interactive object group and become displayed in the same context. it become attached to the first object, baut manage manipulation of the whole group. it is placed in the center of object bounding box, and its size is adjusted to the object bounding box.

        """
        return _AIS.AIS_Manipulator_Attach(self, *args)

    def Compute(self, *args):
        r"""

        Parameters
        ----------
        thePrsMgr: PrsMgr_PresentationManager
        thePrs: Prs3d_Presentation
        theMode: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Fills presentation. @note manipulator presentation does not use display mode and for all modes has the same presentation.

        """
        return _AIS.AIS_Manipulator_Compute(self, *args)

    def DeactivateCurrentMode(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Make inactive the current selected manipulator part and reset current axis index and current mode. after its call hasactivemode() returns false. @sa hasactivemode().

        """
        return _AIS.AIS_Manipulator_DeactivateCurrentMode(self, *args)

    def Detach(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Detaches himself from the owner object, and removes itself from context.

        """
        return _AIS.AIS_Manipulator_Detach(self, *args)

    def EnableMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: AIS_ManipulatorMode

        Return
        -------
        None

        Description
        -----------
        Enable manipualtion mode. @warning it activates selection mode in the current context. if manipulator is not displayed, no mode will be activated.

        """
        return _AIS.AIS_Manipulator_EnableMode(self, *args)

    def HasActiveMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if some part of manipulator is selected (transformation mode is active, and owning object can be transformed).

        """
        return _AIS.AIS_Manipulator_HasActiveMode(self, *args)

    def HasActiveTransformation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Manipulator_HasActiveTransformation(self, *args)

    def IsAttached(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if manipulator is attached to some interactive object (has owning object).

        """
        return _AIS.AIS_Manipulator_IsAttached(self, *args)

    def IsModeActivationOnDetection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if manual mode activation is enabled.

        """
        return _AIS.AIS_Manipulator_IsModeActivationOnDetection(self, *args)

    def Object(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Return the first (leading) object of the owning objects.

        Parameters
        ----------
        theIndex: int

        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Return one of the owning objects. @warning raises program error if theindex is more than owning objects count or less than 1.

        """
        return _AIS.AIS_Manipulator_Object(self, *args)

    def ObjectTransformation(self, *args):
        r"""

        Parameters
        ----------
        theX: int
        theY: int
        theView: V3d_View
        theTrsf: gp_Trsf

        Return
        -------
        bool

        Description
        -----------
        Computes transformation of parent object according to the active mode and input motion vector. you can use this method to get object transformation according to current mode or use own algorithm to implement any other transformation for modes. return transformation of parent object.

        """
        return _AIS.AIS_Manipulator_ObjectTransformation(self, *args)

    def Objects(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_ManipulatorObjectSequence>

        Description
        -----------
        Return all owning objects.

        """
        return _AIS.AIS_Manipulator_Objects(self, *args)

    def Position(self, *args):
        r"""
        Return
        -------
        gp_Ax2

        Description
        -----------
        Return poition of manipulator interactive object.

        """
        return _AIS.AIS_Manipulator_Position(self, *args)

    def SetGap(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Sets gaps between translator, scaler and rotator sub-presentations.

        """
        return _AIS.AIS_Manipulator_SetGap(self, *args)

    def SetModeActivationOnDetection(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Enables mode activation on detection (highlighting). by default, mode is activated on selection of manipulator part. @warning if this mode is enabled, selection of parts does nothing.

        """
        return _AIS.AIS_Manipulator_SetModeActivationOnDetection(self, *args)

    def SetPart(self, *args):
        r"""

        Parameters
        ----------
        theAxisIndex: int
        theMode: AIS_ManipulatorMode
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Disable or enable visual parts for translation, rotation or scaling for some axis. by default all parts are enabled (will be displayed). @warning enabling or disabling of visual parts of manipulator does not manage the manipulation (selection) mode. @warning raises program error if axis index is < 0 or > 2.

        Parameters
        ----------
        theMode: AIS_ManipulatorMode
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Disable or enable visual parts for translation, rotation or scaling for all axes. by default all parts are enabled (will be displayed). @warning enabling or disabling of visual parts of manipulator does not manage the manipulation (selection) mode. @warning raises program error if axis index is < 0 or > 2.

        """
        return _AIS.AIS_Manipulator_SetPart(self, *args)

    def SetPosition(self, *args):
        r"""

        Parameters
        ----------
        thePosition: gp_Ax2

        Return
        -------
        None

        Description
        -----------
        Sets position of the manipulator object.

        """
        return _AIS.AIS_Manipulator_SetPosition(self, *args)

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        theSideLength: float

        Return
        -------
        None

        Description
        -----------
        Sets size (length of side of the manipulator cubic bounding box.

        """
        return _AIS.AIS_Manipulator_SetSize(self, *args)

    def SetZoomPersistence(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Enable or disable zoom persistence mode for the manipulator. with this mode turned on the presentation will keep fixed screen size. @warning when turned on this option overrides transform persistence properties and local transformation to achieve necessary visual effect. @warning revise use of adjustsize argument of of \sa attachtoobjects method when enabling zoom persistence.

        """
        return _AIS.AIS_Manipulator_SetZoomPersistence(self, *args)

    def Size(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Manipulator_Size(self, *args)

    def StartTransform(self, *args):
        r"""

        Parameters
        ----------
        theX: int
        theY: int
        theView: V3d_View

        Return
        -------
        None

        Description
        -----------
        Init start (reference) transformation. @warning it is used in chain with starttransform-transform(gp_trsf)-stoptransform and is used only for custom transform set. if transform(const standard_integer, const standard_integer) is used, initial data is set automatically, and it is reset on deactivatecurrentmode call if it is not reset yet.

        """
        return _AIS.AIS_Manipulator_StartTransform(self, *args)

    def StartTransformation(self, *args):
        r"""
        Return
        -------
        gp_Trsf

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theIndex: int

        Return
        -------
        gp_Trsf

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Manipulator_StartTransformation(self, *args)

    def StopTransform(self, *args):
        r"""

        Parameters
        ----------
        theToApply: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Reset start (reference) transformation. @param thetoapply [in] option to apply or to cancel the started transformation. @warning it is used in chain with starttransform-transform(gp_trsf)-stoptransform and is used only for custom transform set.

        """
        return _AIS.AIS_Manipulator_StopTransform(self, *args)

    def Transform(self, *args):
        r"""

        Parameters
        ----------
        aTrsf: gp_Trsf

        Return
        -------
        None

        Description
        -----------
        Apply to the owning objects the input transformation. @remark the transformation is set using setlocaltransformation for owning objects. the location of the manipulator is stored also in local transformation, so that there's no need to redisplay objects. @warning it is used in chain with starttransform-transform(gp_trsf)-stoptransform and is used only for custom transform set. @warning it will does nothing if transformation is not initiated (with starttransform() call).

        Parameters
        ----------
        theX: int
        theY: int
        theView: V3d_View

        Return
        -------
        gp_Trsf

        Description
        -----------
        Apply transformation made from mouse moving from start position (save on the first transform() call and reset on deactivatecurrentmode() call.) to the in/out mouse position (thex, they).

        """
        return _AIS.AIS_Manipulator_Transform(self, *args)

    def ZoomPersistence(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns state of zoom persistence mode, whether it turned on or off.

        """
        return _AIS.AIS_Manipulator_ZoomPersistence(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Manipulator_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def TransformBehavior(self):
    	pass

    @methodnotwrapped
    def ChangeTransformBehavior(self):
    	pass

    @methodnotwrapped
    def SetTransformBehavior(self):
    	pass

    __swig_destroy__ = _AIS.delete_AIS_Manipulator

# Register AIS_Manipulator in _AIS:
_AIS.AIS_Manipulator_swigregister(AIS_Manipulator)
class AIS_MediaPlayer(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _AIS.AIS_MediaPlayer_swiginit(self, _AIS.new_AIS_MediaPlayer(*args))

    def Duration(self, *args):
        r"""
        Return
        -------
        double

        Description
        -----------
        Return duration.

        """
        return _AIS.AIS_MediaPlayer_Duration(self, *args)

    def OpenInput(self, *args):
        r"""

        Parameters
        ----------
        thePath: str
        theToWait: bool

        Return
        -------
        None

        Description
        -----------
        Open specified file.

        """
        return _AIS.AIS_MediaPlayer_OpenInput(self, *args)

    def PlayPause(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Switch playback state.

        """
        return _AIS.AIS_MediaPlayer_PlayPause(self, *args)

    def PlayerContext(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Media_PlayerContext>

        Description
        -----------
        Return player context.

        """
        return _AIS.AIS_MediaPlayer_PlayerContext(self, *args)

    def PresentFrame(self, *args):
        r"""

        Parameters
        ----------
        theLeftCorner: Graphic3d_Vec2i
        theMaxSize: Graphic3d_Vec2i

        Return
        -------
        bool

        Description
        -----------
        Display new frame.

        """
        return _AIS.AIS_MediaPlayer_PresentFrame(self, *args)

    def SetCallback(self, *args):
        r"""

        Parameters
        ----------
        theCallbackFunction: Graphic3d_MediaTextureSet::CallbackOnUpdate_t
        theCallbackUserPtr: void *

        Return
        -------
        None

        Description
        -----------
        Setup callback to be called on queue progress (e.g. when new frame should be displayed).

        """
        return _AIS.AIS_MediaPlayer_SetCallback(self, *args)

    def SetClosePlayer(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Schedule player to be closed.

        """
        return _AIS.AIS_MediaPlayer_SetClosePlayer(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_MediaPlayer

# Register AIS_MediaPlayer in _AIS:
_AIS.AIS_MediaPlayer_swigregister(AIS_MediaPlayer)
class AIS_MultipleConnectedInteractive(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Initializes the interactive object with multiple connections to ais_interactive objects.

        """
        _AIS.AIS_MultipleConnectedInteractive_swiginit(self, _AIS.new_AIS_MultipleConnectedInteractive(*args))

    def Connect(self, *args):
        r"""

        Parameters
        ----------
        theAnotherObj: AIS_InteractiveObject
        theLocation: TopLoc_Datum3D
        theTrsfPers: Graphic3d_TransformPers

        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Establishes the connection between the connected interactive object, theinteractive, and its reference. locates instance in thelocation and applies specified transformation persistence mode. return created instance object (ais_connectedinteractive or ais_multipleconnectedinteractive).

        Parameters
        ----------
        theAnotherObj: AIS_InteractiveObject

        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Establishes the connection between the connected interactive object, theinteractive, and its reference. copies local transformation and transformation persistence mode from theinteractive. return created instance object (ais_connectedinteractive or ais_multipleconnectedinteractive).

        Parameters
        ----------
        theAnotherObj: AIS_InteractiveObject
        theLocation: gp_Trsf

        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Establishes the connection between the connected interactive object, theinteractive, and its reference. locates instance in thelocation and copies transformation persistence mode from theinteractive. return created instance object (ais_connectedinteractive or ais_multipleconnectedinteractive).

        Parameters
        ----------
        theAnotherObj: AIS_InteractiveObject
        theLocation: gp_Trsf
        theTrsfPers: Graphic3d_TransformPers

        Return
        -------
        opencascade::handle<AIS_InteractiveObject>

        Description
        -----------
        Establishes the connection between the connected interactive object, theinteractive, and its reference. locates instance in thelocation and applies specified transformation persistence mode. return created instance object (ais_connectedinteractive or ais_multipleconnectedinteractive).

        """
        return _AIS.AIS_MultipleConnectedInteractive_Connect(self, *args)

    def Disconnect(self, *args):
        r"""

        Parameters
        ----------
        theInteractive: AIS_InteractiveObject

        Return
        -------
        None

        Description
        -----------
        Removes the connection with theinteractive.

        """
        return _AIS.AIS_MultipleConnectedInteractive_Disconnect(self, *args)

    def DisconnectAll(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clears all the connections to objects.

        """
        return _AIS.AIS_MultipleConnectedInteractive_DisconnectAll(self, *args)

    def HasConnection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the object is connected to others.

        """
        return _AIS.AIS_MultipleConnectedInteractive_HasConnection(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_MultipleConnectedInteractive_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_MultipleConnectedInteractive

# Register AIS_MultipleConnectedInteractive in _AIS:
_AIS.AIS_MultipleConnectedInteractive_swigregister(AIS_MultipleConnectedInteractive)
class AIS_Plane(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Plane
        aCurrentMode: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Initializes the plane acomponent. if the mode acurrentmode equals true, the drawing tool, 'drawer' is not initialized.

        Parameters
        ----------
        aComponent: Geom_Plane
        aCenter: gp_Pnt
        aCurrentMode: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Initializes the plane acomponent and the point acenter. if the mode acurrentmode equals true, the drawing tool, 'drawer' is not initialized. acurrentmode equals true, the drawing tool, 'drawer' is not initialized.

        Parameters
        ----------
        aComponent: Geom_Plane
        aCenter: gp_Pnt
        aPmin: gp_Pnt
        aPmax: gp_Pnt
        aCurrentMode: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Initializes the plane acomponent, the point acenter, and the minimum and maximum points, apmin and apmax. if the mode acurrentmode equals true, the drawing tool, 'drawer' is not initialized.

        Parameters
        ----------
        aComponent: Geom_Axis2Placement
        aPlaneType: AIS_TypeOfPlane
        aCurrentMode: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _AIS.AIS_Plane_swiginit(self, _AIS.new_AIS_Plane(*args))

    def Axis2Placement(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Axis2Placement>

        Description
        -----------
        Returns the position of the plane's axis2 system identifying the x, y, or z axis and giving the plane a direction in 3d space. an axis2 system is a right-handed coordinate system.

        """
        return _AIS.AIS_Plane_Axis2Placement(self, *args)

    def Center(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the coordinates of the center point.

        """
        return _AIS.AIS_Plane_Center(self, *args)

    def Component(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Plane>

        Description
        -----------
        Returns the component specified in setcomponent.

        """
        return _AIS.AIS_Plane_Component(self, *args)

    def CurrentMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the non-default current display mode set by setcurrentmode.

        """
        return _AIS.AIS_Plane_CurrentMode(self, *args)

    def HasMinimumSize(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if transform persistence for zoom is set.

        """
        return _AIS.AIS_Plane_HasMinimumSize(self, *args)

    def HasOwnSize(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Plane_HasOwnSize(self, *args)

    def IsXYZPlane(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the type of plane - xy, yz, or xz.

        """
        return _AIS.AIS_Plane_IsXYZPlane(self, *args)

    def PlaneAttributes(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Plane
        aCenter: gp_Pnt
        aPmin: gp_Pnt
        aPmax: gp_Pnt

        Return
        -------
        bool

        Description
        -----------
        Returns the settings for the selected plane acomponent, provided in setplaneattributes. these include the points acenter, apmin, and apmax.

        """
        return _AIS.AIS_Plane_PlaneAttributes(self, *args)

    def SetAxis2Placement(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Axis2Placement
        aPlaneType: AIS_TypeOfPlane

        Return
        -------
        None

        Description
        -----------
        Allows you to provide settings for the position and direction of one of the plane's axes, acomponent, in 3d space. the coordinate system used is right-handed, and the type of plane aplanetype is one of: - ais_ topl_unknown - ais_ topl_xyplane - ais_ topl_xzplane - ais_ topl_yzplane}.

        """
        return _AIS.AIS_Plane_SetAxis2Placement(self, *args)

    def SetCenter(self, *args):
        r"""

        Parameters
        ----------
        theCenter: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Provides settings for the center thecenter other than (0, 0, 0).

        """
        return _AIS.AIS_Plane_SetCenter(self, *args)

    def SetComponent(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Plane

        Return
        -------
        None

        Description
        -----------
        Creates an instance of the plane acomponent.

        """
        return _AIS.AIS_Plane_SetComponent(self, *args)

    def SetCurrentMode(self, *args):
        r"""

        Parameters
        ----------
        theCurrentMode: bool

        Return
        -------
        None

        Description
        -----------
        Allows you to provide settings for a non-default current display mode.

        """
        return _AIS.AIS_Plane_SetCurrentMode(self, *args)

    def SetMinimumSize(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Sets transform persistence for zoom with value of minimum size.

        """
        return _AIS.AIS_Plane_SetMinimumSize(self, *args)

    def SetPlaneAttributes(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Plane
        aCenter: gp_Pnt
        aPmin: gp_Pnt
        aPmax: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Allows you to provide settings other than default ones for the selected plane. these include: center point acenter, maximum apmax and minimum apmin.

        """
        return _AIS.AIS_Plane_SetPlaneAttributes(self, *args)

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        aValue: float

        Return
        -------
        None

        Description
        -----------
        Same value for x and y directions.

        Parameters
        ----------
        Xval: float
        YVal: float

        Return
        -------
        None

        Description
        -----------
        Sets the size defined by the length along the x axis xval and the length along the y axis yval.

        """
        return _AIS.AIS_Plane_SetSize(self, *args)

    def SetTypeOfSensitivity(self, *args):
        r"""

        Parameters
        ----------
        theTypeOfSensitivity: Select3D_TypeOfSensitivity

        Return
        -------
        None

        Description
        -----------
        Sets the type of sensitivity for the plane.

        """
        return _AIS.AIS_Plane_SetTypeOfSensitivity(self, *args)

    def Size(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        X: float
        Y: float

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Plane_Size(self, *args)

    def TypeOfPlane(self, *args):
        r"""
        Return
        -------
        AIS_TypeOfPlane

        Description
        -----------
        Returns the type of plane - xy, yz, xz or unknown.

        """
        return _AIS.AIS_Plane_TypeOfPlane(self, *args)

    def TypeOfSensitivity(self, *args):
        r"""
        Return
        -------
        Select3D_TypeOfSensitivity

        Description
        -----------
        Returns the type of sensitivity for the plane;.

        """
        return _AIS.AIS_Plane_TypeOfSensitivity(self, *args)

    def UnsetMinimumSize(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Unsets transform persistence zoom.

        """
        return _AIS.AIS_Plane_UnsetMinimumSize(self, *args)

    def UnsetSize(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Plane_UnsetSize(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Plane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Plane

# Register AIS_Plane in _AIS:
_AIS.AIS_Plane_swigregister(AIS_Plane)
class AIS_PlaneTrihedron(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aPlane: Geom_Plane

        Return
        -------
        None

        Description
        -----------
        Initializes the plane aplane. the plane trihedron is constructed from this and an axis.

        """
        _AIS.AIS_PlaneTrihedron_swiginit(self, _AIS.new_AIS_PlaneTrihedron(*args))

    def Component(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Plane>

        Description
        -----------
        Returns the component specified in setcomponent.

        """
        return _AIS.AIS_PlaneTrihedron_Component(self, *args)

    def GetLength(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the length of x and y axes.

        """
        return _AIS.AIS_PlaneTrihedron_GetLength(self, *args)

    def Position(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_Point>

        Description
        -----------
        Returns the point of origin of the plane trihedron.

        """
        return _AIS.AIS_PlaneTrihedron_Position(self, *args)

    def SetComponent(self, *args):
        r"""

        Parameters
        ----------
        aPlane: Geom_Plane

        Return
        -------
        None

        Description
        -----------
        Creates an instance of the component object aplane.

        """
        return _AIS.AIS_PlaneTrihedron_SetComponent(self, *args)

    def SetLength(self, *args):
        r"""

        Parameters
        ----------
        theLength: float

        Return
        -------
        None

        Description
        -----------
        Sets the length of the x and y axes.

        """
        return _AIS.AIS_PlaneTrihedron_SetLength(self, *args)

    def SetXLabel(self, *args):
        r"""

        Parameters
        ----------
        theLabel: str

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_PlaneTrihedron_SetXLabel(self, *args)

    def SetYLabel(self, *args):
        r"""

        Parameters
        ----------
        theLabel: str

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_PlaneTrihedron_SetYLabel(self, *args)

    def XAxis(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_Line>

        Description
        -----------
        Returns the 'xaxis'.

        """
        return _AIS.AIS_PlaneTrihedron_XAxis(self, *args)

    def YAxis(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_Line>

        Description
        -----------
        Returns the 'yaxis'.

        """
        return _AIS.AIS_PlaneTrihedron_YAxis(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_PlaneTrihedron_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_PlaneTrihedron

# Register AIS_PlaneTrihedron in _AIS:
_AIS.AIS_PlaneTrihedron_swigregister(AIS_PlaneTrihedron)
class AIS_Point(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Point

        Return
        -------
        None

        Description
        -----------
        Initializes the point acomponent from which the point datum will be built.

        """
        _AIS.AIS_Point_swiginit(self, _AIS.new_AIS_Point(*args))

    def Component(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Point>

        Description
        -----------
        Returns the component specified in setcomponent.

        """
        return _AIS.AIS_Point_Component(self, *args)

    def HasMarker(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the point datum has a marker.

        """
        return _AIS.AIS_Point_HasMarker(self, *args)

    def SetComponent(self, *args):
        r"""

        Parameters
        ----------
        aComponent: Geom_Point

        Return
        -------
        None

        Description
        -----------
        Constructs an instance of the point acomponent.

        """
        return _AIS.AIS_Point_SetComponent(self, *args)

    def SetMarker(self, *args):
        r"""

        Parameters
        ----------
        aType: Aspect_TypeOfMarker

        Return
        -------
        None

        Description
        -----------
        Allows you to provide settings for a marker. these include - type of marker, - marker color, - scale factor.

        """
        return _AIS.AIS_Point_SetMarker(self, *args)

    def UnsetMarker(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Removes the marker settings.

        """
        return _AIS.AIS_Point_UnsetMarker(self, *args)

    def Vertex(self, *args):
        r"""
        Return
        -------
        TopoDS_Vertex

        Description
        -----------
        Converts a point into a vertex.

        """
        return _AIS.AIS_Point_Vertex(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Point_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Point

# Register AIS_Point in _AIS:
_AIS.AIS_Point_swigregister(AIS_Point)
class AIS_PointCloud(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DM_Points = _AIS.AIS_PointCloud_DM_Points
    r"""Json string serializer."""
    DM_BndBox = _AIS.AIS_PointCloud_DM_BndBox
    r"""Json string serializer."""
    SM_Points = _AIS.AIS_PointCloud_SM_Points
    r"""Json string serializer."""
    SM_SubsetOfPoints = _AIS.AIS_PointCloud_SM_SubsetOfPoints
    r"""Json string serializer."""
    SM_BndBox = _AIS.AIS_PointCloud_SM_BndBox
    r"""Json string serializer."""


    class DisplayMode(IntEnum):
    	DM_Points = 0
    	DM_BndBox = 2
    DM_Points = DisplayMode.DM_Points
    DM_BndBox = DisplayMode.DM_BndBox

    class SelectionMode(IntEnum):
    	SM_Points = 0
    	SM_SubsetOfPoints = 1
    	SM_BndBox = 2
    SM_Points = SelectionMode.SM_Points
    SM_SubsetOfPoints = SelectionMode.SM_SubsetOfPoints
    SM_BndBox = SelectionMode.SM_BndBox


    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _AIS.AIS_PointCloud_swiginit(self, _AIS.new_AIS_PointCloud(*args))

    def GetBoundingBox(self, *args):
        r"""
        Return
        -------
        Bnd_Box

        Description
        -----------
        Get bounding box for presentation.

        """
        return _AIS.AIS_PointCloud_GetBoundingBox(self, *args)

    def GetPoints(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfPoints>

        Description
        -----------
        Get the points array. method might be overridden to fill in points array dynamically from application data structures. return the array of points.

        """
        return _AIS.AIS_PointCloud_GetPoints(self, *args)

    def SetPoints(self, *args):
        r"""

        Parameters
        ----------
        thePoints: Graphic3d_ArrayOfPoints

        Return
        -------
        None

        Description
        -----------
        Sets the points from array of points. method will not copy the input data - array will be stored as handle. @param thepoints [in] the array of points.

        Parameters
        ----------
        theCoords: TColgp_HArray1OfPnt
        theColors: Quantity_HArray1OfColor (optional, default to NULL)
        theNormals: TColgp_HArray1OfDir (optional, default to NULL)

        Return
        -------
        None

        Description
        -----------
        Sets the points with optional colors. the input data will be copied into internal buffer. the input arrays should have equal length, otherwise the presentation will not be computed and displayed. @param thecoords [in] the array of coordinates @param thecolors [in] optional array of colors @param thenormals [in] optional array of normals.

        """
        return _AIS.AIS_PointCloud_SetPoints(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_PointCloud_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_PointCloud

# Register AIS_PointCloud in _AIS:
_AIS.AIS_PointCloud_swigregister(AIS_PointCloud)
class AIS_RubberBand(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs rubber band with default configuration: empty filling and white solid lines. @warning it binds this object with graphic3d_zlayerid_toposd layer.

        Parameters
        ----------
        theLineColor: Quantity_Color
        theType: Aspect_TypeOfLine
        theLineWidth: float (optional, default to 1.0)
        theIsPolygonClosed: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Consructs the rubber band with empty filling and defined line style. @param thelinecolor [in] color of rubber band lines @param thetype [in] type of rubber band lines @param thelinewidth [in] width of rubber band line. by default it is 1. @warning it binds this object with graphic3d_zlayerid_toposd layer.

        Parameters
        ----------
        theLineColor: Quantity_Color
        theType: Aspect_TypeOfLine
        theFillColor: Quantity_Color
        theTransparency: float (optional, default to 1.0)
        theLineWidth: float (optional, default to 1.0)
        theIsPolygonClosed: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Constructs the rubber band with defined filling and line parameters. @param thelinecolor [in] color of rubber band lines @param thetype [in] type of rubber band lines @param thefillcolor [in] color of rubber band filling @param thetransparency [in] transparency of the filling. 0 is for opaque filling. by default it is transparent. @param thelinewidth [in] width of rubber band line. by default it is 1. @warning it binds this object with graphic3d_zlayerid_toposd layer.

        """
        _AIS.AIS_RubberBand_swiginit(self, _AIS.new_AIS_RubberBand(*args))

    def AddPoint(self, *args):
        r"""

        Parameters
        ----------
        thePoint: Graphic3d_Vec2i

        Return
        -------
        None

        Description
        -----------
        Adds last point to the list of points. they are used to build polygon for rubber band. @sa removelastpoint(), getpoints().

        """
        return _AIS.AIS_RubberBand_AddPoint(self, *args)

    def ClearPoints(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Remove all points for the rubber band polygon.

        """
        return _AIS.AIS_RubberBand_ClearPoints(self, *args)

    def FillColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Return the color of rubber band filling.

        """
        return _AIS.AIS_RubberBand_FillColor(self, *args)

    def FillTransparency(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return fill transparency.

        """
        return _AIS.AIS_RubberBand_FillTransparency(self, *args)

    def IsFilling(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if filling of rubber band is enabled.

        """
        return _AIS.AIS_RubberBand_IsFilling(self, *args)

    def IsPolygonClosed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if automatic closing of rubber band is enabled.

        """
        return _AIS.AIS_RubberBand_IsPolygonClosed(self, *args)

    def LineColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Return the color attributes.

        """
        return _AIS.AIS_RubberBand_LineColor(self, *args)

    def LineType(self, *args):
        r"""
        Return
        -------
        Aspect_TypeOfLine

        Description
        -----------
        Return type of lines.

        """
        return _AIS.AIS_RubberBand_LineType(self, *args)

    def LineWidth(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return width of lines.

        """
        return _AIS.AIS_RubberBand_LineWidth(self, *args)

    def Points(self, *args):
        r"""
        Return
        -------
        NCollection_Sequence<Graphic3d_Vec2i>

        Description
        -----------
        Return points for the rubber band polygon.

        """
        return _AIS.AIS_RubberBand_Points(self, *args)

    def RemoveLastPoint(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Remove last point from the list of points for the rubber band polygon. @sa addpoint(), getpoints().

        """
        return _AIS.AIS_RubberBand_RemoveLastPoint(self, *args)

    def SetFillColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of rubber band filling.

        """
        return _AIS.AIS_RubberBand_SetFillColor(self, *args)

    def SetFillTransparency(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Sets fill transparency. @param thevalue [in] the transparency value. 1.0 is for transparent background.

        """
        return _AIS.AIS_RubberBand_SetFillTransparency(self, *args)

    def SetFilling(self, *args):
        r"""

        Parameters
        ----------
        theIsFilling: bool

        Return
        -------
        None

        Description
        -----------
        Enable or disable filling of rubber band.

        Parameters
        ----------
        theColor: Quantity_Color
        theTransparency: float

        Return
        -------
        None

        Description
        -----------
        Enable filling of rubber band with defined parameters. @param thecolor [in] color of filling @param thetransparency [in] transparency of the filling. 0 is for opaque filling.

        """
        return _AIS.AIS_RubberBand_SetFilling(self, *args)

    def SetLineColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of lines for rubber band presentation.

        """
        return _AIS.AIS_RubberBand_SetLineColor(self, *args)

    def SetLineType(self, *args):
        r"""

        Parameters
        ----------
        theType: Aspect_TypeOfLine

        Return
        -------
        None

        Description
        -----------
        Sets type of line for rubber band presentation.

        """
        return _AIS.AIS_RubberBand_SetLineType(self, *args)

    def SetLineWidth(self, *args):
        r"""

        Parameters
        ----------
        theWidth: float

        Return
        -------
        None

        Description
        -----------
        Sets width of line for rubber band presentation.

        """
        return _AIS.AIS_RubberBand_SetLineWidth(self, *args)

    def SetPolygonClosed(self, *args):
        r"""

        Parameters
        ----------
        theIsPolygonClosed: bool

        Return
        -------
        None

        Description
        -----------
        Automatically create an additional line connecting the first and the last screen points to close the boundary polyline.

        """
        return _AIS.AIS_RubberBand_SetPolygonClosed(self, *args)

    def SetRectangle(self, *args):
        r"""

        Parameters
        ----------
        theMinX: int
        theMinY: int
        theMaxX: int
        theMaxY: int

        Return
        -------
        None

        Description
        -----------
        Sets rectangle bounds.

        """
        return _AIS.AIS_RubberBand_SetRectangle(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_RubberBand_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_RubberBand

# Register AIS_RubberBand in _AIS:
_AIS.AIS_RubberBand_swigregister(AIS_RubberBand)
class AIS_Shape(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        shap: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Initializes construction of the shape shap from wires, edges and vertices.

        """
        _AIS.AIS_Shape_swiginit(self, _AIS.new_AIS_Shape(*args))

    def BoundingBox(self, *args):
        r"""
        Return
        -------
        Bnd_Box

        Description
        -----------
        Constructs a bounding box with which to reconstruct compound topological shapes for presentation.

        """
        return _AIS.AIS_Shape_BoundingBox(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _AIS.AIS_Shape_DumpJsonToString(self, depth)

    def OwnDeviationAngle(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        anAngle: float
        aPreviousAngle: float

        Description
        -----------
        Returns true and the values of the deviation angle anangle and the previous deviation angle apreviousangle. if these values are not already set, false is returned.

        """
        return _AIS.AIS_Shape_OwnDeviationAngle(self, *args)

    def OwnDeviationCoefficient(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        aCoefficient: float
        aPreviousCoefficient: float

        Description
        -----------
        Returns true and the values of the deviation coefficient acoefficient and the previous deviation coefficient apreviouscoefficient. if these values are not already set, false is returned.

        """
        return _AIS.AIS_Shape_OwnDeviationCoefficient(self, *args)

    @staticmethod
    def SelectionMode(*args):
        r"""

        Parameters
        ----------
        theShapeType: TopAbs_ShapeEnum

        Return
        -------
        int

        Description
        -----------
        Return selection mode for specified shape type.

        """
        return _AIS.AIS_Shape_SelectionMode(*args)

    @staticmethod
    def SelectionType(*args):
        r"""

        Parameters
        ----------
        theSelMode: int

        Return
        -------
        TopAbs_ShapeEnum

        Description
        -----------
        Return shape type for specified selection mode.

        """
        return _AIS.AIS_Shape_SelectionType(*args)

    def Set(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Alias for ::setshape().

        """
        return _AIS.AIS_Shape_Set(self, *args)

    def SetAngleAndDeviation(self, *args):
        r"""

        Parameters
        ----------
        anAngle: float

        Return
        -------
        None

        Description
        -----------
        This compute a new angle and deviation from the value anangle and set the values stored in mydrawer with these that become local to the shape.

        """
        return _AIS.AIS_Shape_SetAngleAndDeviation(self, *args)

    def SetOwnDeviationAngle(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Sets a local value for deviation angle for this specific shape.

        Parameters
        ----------
        anAngle: float

        Return
        -------
        None

        Description
        -----------
        Sets myowndeviationangle field in prs3d_drawer & recomputes presentation.

        """
        return _AIS.AIS_Shape_SetOwnDeviationAngle(self, *args)

    def SetOwnDeviationCoefficient(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Sets a local value for deviation coefficient for this specific shape.

        Parameters
        ----------
        aCoefficient: float

        Return
        -------
        None

        Description
        -----------
        Sets a local value for deviation coefficient for this specific shape.

        """
        return _AIS.AIS_Shape_SetOwnDeviationCoefficient(self, *args)

    def SetShape(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Constructs an instance of the shape object theshape.

        """
        return _AIS.AIS_Shape_SetShape(self, *args)

    def SetTextureOriginUV(self, *args):
        r"""

        Parameters
        ----------
        theOriginUV: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Use this method to change the origin of the texture. the texel (0,0) will be mapped to the surface (myuvorigin.x(), myuvorigin.y()).

        """
        return _AIS.AIS_Shape_SetTextureOriginUV(self, *args)

    def SetTextureRepeatUV(self, *args):
        r"""

        Parameters
        ----------
        theRepeatUV: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Sets the number of occurrences of the texture on each face. the texture itself is parameterized in (0,1) by (0,1). each face of the shape to be textured is parameterized in uv space (umin,umax) by (vmin,vmax).

        """
        return _AIS.AIS_Shape_SetTextureRepeatUV(self, *args)

    def SetTextureScaleUV(self, *args):
        r"""

        Parameters
        ----------
        theScaleUV: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Use this method to scale the texture (percent of the face). you can specify a scale factor for both u and v. example: if you set scaleu and scalev to 0.5 and you enable texture repeat, the texture will appear twice on the face in each direction.

        """
        return _AIS.AIS_Shape_SetTextureScaleUV(self, *args)

    def SetTypeOfHLR(self, *args):
        r"""

        Parameters
        ----------
        theTypeOfHLR: Prs3d_TypeOfHLR

        Return
        -------
        None

        Description
        -----------
        Sets the type of hlr algorithm used by the shape.

        """
        return _AIS.AIS_Shape_SetTypeOfHLR(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns this shape object.

        """
        return _AIS.AIS_Shape_Shape(self, *args)

    def TextureOriginUV(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Return texture origin uv position; (0, 0) by default.

        """
        return _AIS.AIS_Shape_TextureOriginUV(self, *args)

    def TextureRepeatUV(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Return texture repeat uv values; (1, 1) by default.

        """
        return _AIS.AIS_Shape_TextureRepeatUV(self, *args)

    def TextureScaleUV(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Return scale factor for uv coordinates; (1, 1) by default.

        """
        return _AIS.AIS_Shape_TextureScaleUV(self, *args)

    def TypeOfHLR(self, *args):
        r"""
        Return
        -------
        Prs3d_TypeOfHLR

        Description
        -----------
        Gets the type of hlr algorithm.

        """
        return _AIS.AIS_Shape_TypeOfHLR(self, *args)

    def UserAngle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Gives back the angle initial value put by the user.

        """
        return _AIS.AIS_Shape_UserAngle(self, *args)

    @staticmethod
    def computeHlrPresentation(*args):
        r"""

        Parameters
        ----------
        theProjector: Graphic3d_Camera
        thePrs: Prs3d_Presentation
        theShape: TopoDS_Shape
        theDrawer: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Compute hlr presentation for specified shape.

        """
        return _AIS.AIS_Shape_computeHlrPresentation(*args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Shape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Shape

# Register AIS_Shape in _AIS:
_AIS.AIS_Shape_swigregister(AIS_Shape)
class AIS_SignatureFilter(AIS_TypeFilter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aGivenKind: AIS_KindOfInteractive
        aGivenSignature: int

        Return
        -------
        None

        Description
        -----------
        Initializes the signature filter, adding the signature specification, agivensignature, to that for type, agivenkind, in ais_typefilter.

        """
        _AIS.AIS_SignatureFilter_swiginit(self, _AIS.new_AIS_SignatureFilter(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_SignatureFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_SignatureFilter

# Register AIS_SignatureFilter in _AIS:
_AIS.AIS_SignatureFilter_swigregister(AIS_SignatureFilter)
class AIS_TextLabel(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Default constructor.

        """
        _AIS.AIS_TextLabel_swiginit(self, _AIS.new_AIS_TextLabel(*args))

    def FontAspect(self, *args):
        r"""
        Return
        -------
        Font_FontAspect

        Description
        -----------
        Returns the font aspect of the label text.

        """
        return _AIS.AIS_TextLabel_FontAspect(self, *args)

    def FontName(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns the font of the label text.

        """
        return _AIS.AIS_TextLabel_FontName(self, *args)

    def HasFlipping(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_TextLabel_HasFlipping(self, *args)

    def HasOrientation3D(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current text placement mode uses text orientation in the model 3d space.

        """
        return _AIS.AIS_TextLabel_HasOrientation3D(self, *args)

    def HasOwnAnchorPoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns flag if text uses position as point of attach.

        """
        return _AIS.AIS_TextLabel_HasOwnAnchorPoint(self, *args)

    def Orientation3D(self, *args):
        r"""
        Return
        -------
        gp_Ax2

        Description
        -----------
        Returns label orientation in the model 3d space.

        """
        return _AIS.AIS_TextLabel_Orientation3D(self, *args)

    def Position(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns position.

        """
        return _AIS.AIS_TextLabel_Position(self, *args)

    def SetAngle(self, *args):
        r"""

        Parameters
        ----------
        theAngle: float

        Return
        -------
        None

        Description
        -----------
        Setup angle.

        """
        return _AIS.AIS_TextLabel_SetAngle(self, *args)

    def SetColorSubTitle(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Modifies the colour of the subtitle for the todt_subtitle textdisplaytype and the colour of backgroubd for the todt_dekale textdisplaytype.

        """
        return _AIS.AIS_TextLabel_SetColorSubTitle(self, *args)

    def SetDisplayType(self, *args):
        r"""

        Parameters
        ----------
        theDisplayType: Aspect_TypeOfDisplayText

        Return
        -------
        None

        Description
        -----------
        Define the display type of the text. //! todt_normal default display. text only. todt_subtitle there is a subtitle under the text. todt_dekale the text is displayed with a 3d style. todt_blend the text is displayed in xor. todt_dimension dimension line under text will be invisible.

        """
        return _AIS.AIS_TextLabel_SetDisplayType(self, *args)

    def SetFlipping(self, *args):
        r"""

        Parameters
        ----------
        theIsFlipping: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_TextLabel_SetFlipping(self, *args)

    def SetFont(self, *args):
        r"""

        Parameters
        ----------
        theFont: str

        Return
        -------
        None

        Description
        -----------
        Setup font.

        """
        return _AIS.AIS_TextLabel_SetFont(self, *args)

    def SetFontAspect(self, *args):
        r"""

        Parameters
        ----------
        theFontAspect: Font_FontAspect

        Return
        -------
        None

        Description
        -----------
        Setup font aspect.

        """
        return _AIS.AIS_TextLabel_SetFontAspect(self, *args)

    def SetHJustification(self, *args):
        r"""

        Parameters
        ----------
        theHJust: Graphic3d_HorizontalTextAlignment

        Return
        -------
        None

        Description
        -----------
        Setup horizontal justification.

        """
        return _AIS.AIS_TextLabel_SetHJustification(self, *args)

    def SetHeight(self, *args):
        r"""

        Parameters
        ----------
        theHeight: float

        Return
        -------
        None

        Description
        -----------
        Setup height.

        """
        return _AIS.AIS_TextLabel_SetHeight(self, *args)

    def SetOrientation3D(self, *args):
        r"""

        Parameters
        ----------
        theOrientation: gp_Ax2

        Return
        -------
        None

        Description
        -----------
        Setup label orientation in the model 3d space.

        """
        return _AIS.AIS_TextLabel_SetOrientation3D(self, *args)

    def SetOwnAnchorPoint(self, *args):
        r"""

        Parameters
        ----------
        theOwnAnchorPoint: bool

        Return
        -------
        None

        Description
        -----------
        Set flag if text uses position as point of attach.

        """
        return _AIS.AIS_TextLabel_SetOwnAnchorPoint(self, *args)

    def SetPosition(self, *args):
        r"""

        Parameters
        ----------
        thePosition: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Setup position.

        """
        return _AIS.AIS_TextLabel_SetPosition(self, *args)

    def SetText(self, *args):
        r"""

        Parameters
        ----------
        theText: str

        Return
        -------
        None

        Description
        -----------
        Setup text.

        """
        return _AIS.AIS_TextLabel_SetText(self, *args)

    def SetTextFormatter(self, *args):
        r"""

        Parameters
        ----------
        theFormatter: Font_TextFormatter

        Return
        -------
        None

        Description
        -----------
        Setup text formatter for presentation. it's empty by default.

        """
        return _AIS.AIS_TextLabel_SetTextFormatter(self, *args)

    def SetVJustification(self, *args):
        r"""

        Parameters
        ----------
        theVJust: Graphic3d_VerticalTextAlignment

        Return
        -------
        None

        Description
        -----------
        Setup vertical justification.

        """
        return _AIS.AIS_TextLabel_SetVJustification(self, *args)

    def SetZoomable(self, *args):
        r"""

        Parameters
        ----------
        theIsZoomable: bool

        Return
        -------
        None

        Description
        -----------
        Setup zoomable property.

        """
        return _AIS.AIS_TextLabel_SetZoomable(self, *args)

    def Text(self, *args):
        r"""
        Return
        -------
        TCollection_ExtendedString

        Description
        -----------
        Returns the label text.

        """
        return _AIS.AIS_TextLabel_Text(self, *args)

    def TextFormatter(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Font_TextFormatter>

        Description
        -----------
        Returns text presentation formatter; null by default, which means standard text formatter will be used.

        """
        return _AIS.AIS_TextLabel_TextFormatter(self, *args)

    def UnsetOrientation3D(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset label orientation in the model 3d space.

        """
        return _AIS.AIS_TextLabel_UnsetOrientation3D(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TextLabel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_TextLabel

# Register AIS_TextLabel in _AIS:
_AIS.AIS_TextLabel_swigregister(AIS_TextLabel)
class AIS_Triangulation(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aTriangulation: Poly_Triangulation

        Return
        -------
        None

        Description
        -----------
        Constructs the triangulation display object.

        """
        _AIS.AIS_Triangulation_swiginit(self, _AIS.new_AIS_Triangulation(*args))

    def GetColors(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TColStd_HArray1OfInteger>

        Description
        -----------
        Get the color for each node. each 32-bit color is alpha << 24 + blue << 16 + green << 8 + red.

        """
        return _AIS.AIS_Triangulation_GetColors(self, *args)

    def GetTriangulation(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Poly_Triangulation>

        Description
        -----------
        Returns poly_triangulation .

        """
        return _AIS.AIS_Triangulation_GetTriangulation(self, *args)

    def HasVertexColors(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if triangulation has vertex colors.

        """
        return _AIS.AIS_Triangulation_HasVertexColors(self, *args)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        aColor: TColStd_HArray1OfInteger

        Return
        -------
        None

        Description
        -----------
        Set the color for each node. each 32-bit color is alpha << 24 + blue << 16 + green << 8 + red order of color components is essential for further usage by opengl.

        """
        return _AIS.AIS_Triangulation_SetColors(self, *args)

    def SetTriangulation(self, *args):
        r"""

        Parameters
        ----------
        aTriangulation: Poly_Triangulation

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AIS.AIS_Triangulation_SetTriangulation(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Triangulation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Triangulation

# Register AIS_Triangulation in _AIS:
_AIS.AIS_Triangulation_swigregister(AIS_Triangulation)
class AIS_Trihedron(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theComponent: Geom_Axis2Placement

        Return
        -------
        None

        Description
        -----------
        Initializes a trihedron entity.

        """
        _AIS.AIS_Trihedron_swiginit(self, _AIS.new_AIS_Trihedron(*args))

    def ArrowColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Returns trihedron arrow color.

        """
        return _AIS.AIS_Trihedron_ArrowColor(self, *args)

    def Component(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Axis2Placement>

        Description
        -----------
        Returns the right-handed coordinate system set in setcomponent.

        """
        return _AIS.AIS_Trihedron_Component(self, *args)

    def DatumDisplayMode(self, *args):
        r"""
        Return
        -------
        Prs3d_DatumMode

        Description
        -----------
        Returns datum display mode.

        """
        return _AIS.AIS_Trihedron_DatumDisplayMode(self, *args)

    def DatumPartColor(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        Quantity_Color

        Description
        -----------
        Returns color of datum part: origin or some of trihedron axes.

        """
        return _AIS.AIS_Trihedron_DatumPartColor(self, *args)

    def HasArrowColor(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if trihedron has own arrow color.

        """
        return _AIS.AIS_Trihedron_HasArrowColor(self, *args)

    def HasOwnSize(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the trihedron object has a size other than the default size of 100 mm. along each axis.

        """
        return _AIS.AIS_Trihedron_HasOwnSize(self, *args)

    def HasTextColor(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if trihedron has own text color.

        """
        return _AIS.AIS_Trihedron_HasTextColor(self, *args)

    def Label(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        TCollection_ExtendedString

        Description
        -----------
        Returns text of axis. parameter thepart should be xaxis, yaxis or zaxis.

        """
        return _AIS.AIS_Trihedron_Label(self, *args)

    def SelectionPriority(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        int

        Description
        -----------
        Returns priority of selection for owner of the given type.

        """
        return _AIS.AIS_Trihedron_SelectionPriority(self, *args)

    def SetArrowColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of arrow of trihedron axes.

        Parameters
        ----------
        thePart: Prs3d_DatumParts
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of arrow of trihedron axes.

        """
        return _AIS.AIS_Trihedron_SetArrowColor(self, *args)

    def SetAxisColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of z-axis. //standard_deprecated('this method is deprecated - setcolor() should be called instead').

        """
        return _AIS.AIS_Trihedron_SetAxisColor(self, *args)

    def SetComponent(self, *args):
        r"""

        Parameters
        ----------
        theComponent: Geom_Axis2Placement

        Return
        -------
        None

        Description
        -----------
        Constructs the right-handed coordinate system acomponent.

        """
        return _AIS.AIS_Trihedron_SetComponent(self, *args)

    def SetDatumDisplayMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: Prs3d_DatumMode

        Return
        -------
        None

        Description
        -----------
        Sets shading or wireframe display mode, triangle or segment graphic group is used relatively.

        """
        return _AIS.AIS_Trihedron_SetDatumDisplayMode(self, *args)

    def SetDatumPartColor(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of datum part: origin or some of trihedron axes. if presentation is shading mode, this color is set for both sides of facing model.

        """
        return _AIS.AIS_Trihedron_SetDatumPartColor(self, *args)

    def SetDrawArrows(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool

        Return
        -------
        None

        Description
        -----------
        Sets whether to draw the arrows in visualization.

        """
        return _AIS.AIS_Trihedron_SetDrawArrows(self, *args)

    def SetLabel(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts
        theName: str

        Return
        -------
        None

        Description
        -----------
        Sets text label for trihedron axis. parameter thepart should be xaxis, yaxis or zaxis.

        """
        return _AIS.AIS_Trihedron_SetLabel(self, *args)

    def SetOriginColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of origin. //standard_deprecated('this method is deprecated - setcolor() should be called instead').

        """
        return _AIS.AIS_Trihedron_SetOriginColor(self, *args)

    def SetSelectionPriority(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts
        thePriority: int

        Return
        -------
        None

        Description
        -----------
        Sets priority of selection for owner of the given type.

        """
        return _AIS.AIS_Trihedron_SetSelectionPriority(self, *args)

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Sets the size of trihedron object.

        """
        return _AIS.AIS_Trihedron_SetSize(self, *args)

    def SetTextColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of label of trihedron axes.

        Parameters
        ----------
        thePart: Prs3d_DatumParts
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of label of trihedron axis.

        """
        return _AIS.AIS_Trihedron_SetTextColor(self, *args)

    def SetXAxisColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of x-axis. //standard_deprecated('this method is deprecated - setcolor() should be called instead').

        """
        return _AIS.AIS_Trihedron_SetXAxisColor(self, *args)

    def SetYAxisColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets color of y-axis. //standard_deprecated('this method is deprecated - setcolor() should be called instead').

        """
        return _AIS.AIS_Trihedron_SetYAxisColor(self, *args)

    def Size(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the size of trihedron object; 100.0 by default.

        """
        return _AIS.AIS_Trihedron_Size(self, *args)

    def TextColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Returns trihedron text color.

        """
        return _AIS.AIS_Trihedron_TextColor(self, *args)

    def ToDrawArrows(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if arrows are to be drawn.

        """
        return _AIS.AIS_Trihedron_ToDrawArrows(self, *args)

    def UnsetSize(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Removes any non-default settings for size of this trihedron object. if the object has 1 color, the default size of the drawer is reproduced, otherwise datumaspect becomes null.

        """
        return _AIS.AIS_Trihedron_UnsetSize(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_Trihedron_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_Trihedron

# Register AIS_Trihedron in _AIS:
_AIS.AIS_Trihedron_swigregister(AIS_Trihedron)
class AIS_ViewCube(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _AIS.AIS_ViewCube_swiginit(self, _AIS.new_AIS_ViewCube(*args))

    def AxesConeRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns radius of cone of axes of the trihedron; 3.0 by default.

        """
        return _AIS.AIS_ViewCube_AxesConeRadius(self, *args)

    def AxesPadding(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return padding between axes and 3d part (box); 10 by default.

        """
        return _AIS.AIS_ViewCube_AxesPadding(self, *args)

    def AxesRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns radius of axes of the trihedron; 1.0 by default.

        """
        return _AIS.AIS_ViewCube_AxesRadius(self, *args)

    def AxesSphereRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns radius of sphere (central point) of the trihedron; 4.0 by default.

        """
        return _AIS.AIS_ViewCube_AxesSphereRadius(self, *args)

    def AxisLabel(self, *args):
        r"""

        Parameters
        ----------
        theAxis: Prs3d_DatumParts

        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Return axes labels or empty string if undefined. default labels: x, y, z.

        """
        return _AIS.AIS_ViewCube_AxisLabel(self, *args)

    def BoxColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Return value of front color for the 3d part of object.

        """
        return _AIS.AIS_ViewCube_BoxColor(self, *args)

    def BoxCornerMinSize(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return minimal size of box corner; 2 by default.

        """
        return _AIS.AIS_ViewCube_BoxCornerMinSize(self, *args)

    def BoxCornerStyle(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_ShadingAspect>

        Description
        -----------
        Return shading style of box corners.

        """
        return _AIS.AIS_ViewCube_BoxCornerStyle(self, *args)

    def BoxEdgeGap(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return gap between box edges and box sides; 0 by default.

        """
        return _AIS.AIS_ViewCube_BoxEdgeGap(self, *args)

    def BoxEdgeMinSize(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return minimal size of box edge; 2 by default.

        """
        return _AIS.AIS_ViewCube_BoxEdgeMinSize(self, *args)

    def BoxEdgeStyle(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_ShadingAspect>

        Description
        -----------
        Return shading style of box edges.

        """
        return _AIS.AIS_ViewCube_BoxEdgeStyle(self, *args)

    def BoxFacetExtension(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return box facet extension to edge/corner facet split; 10 by default.

        """
        return _AIS.AIS_ViewCube_BoxFacetExtension(self, *args)

    def BoxSideLabel(self, *args):
        r"""

        Parameters
        ----------
        theSide: V3d_TypeOfOrientation

        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Return box side label or empty string if undefined. default labels: front, back, left, right, top, bottom.

        """
        return _AIS.AIS_ViewCube_BoxSideLabel(self, *args)

    def BoxSideStyle(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_ShadingAspect>

        Description
        -----------
        Return shading style of box sides.

        """
        return _AIS.AIS_ViewCube_BoxSideStyle(self, *args)

    def BoxTransparency(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return transparency for 3d part of object.

        """
        return _AIS.AIS_ViewCube_BoxTransparency(self, *args)

    def Compute(self, *args):
        r"""

        Parameters
        ----------
        thePrsMgr: PrsMgr_PresentationManager
        thePrs: Prs3d_Presentation
        theMode: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Compute 3d part of view cube. @param theprsmgr [in] presentation manager. @param theprs [in] input presentation that is to be filled with flat presentation primitives. @param themode [in] display mode. @warning this object accept only 0 display mode.

        """
        return _AIS.AIS_ViewCube_Compute(self, *args)

    def Duration(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return duration of animation in seconds; 0.5 sec by default.

        """
        return _AIS.AIS_ViewCube_Duration(self, *args)

    def Font(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Return font name that is used for displaying of sides and axes text. alias for: @code attributes()->textaspect()->aspect()->setfont() @endcode.

        """
        return _AIS.AIS_ViewCube_Font(self, *args)

    def FontHeight(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return height of font.

        """
        return _AIS.AIS_ViewCube_FontHeight(self, *args)

    def HandleClick(self, *args):
        r"""

        Parameters
        ----------
        theOwner: AIS_ViewCubeOwner

        Return
        -------
        None

        Description
        -----------
        Perform camera transformation corresponding to the input detected owner.

        """
        return _AIS.AIS_ViewCube_HandleClick(self, *args)

    def HasAnimation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if view cube has unfinished animation of view camera.

        """
        return _AIS.AIS_ViewCube_HasAnimation(self, *args)

    def InnerColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Return color of sides back material.

        """
        return _AIS.AIS_ViewCube_InnerColor(self, *args)

    @staticmethod
    def IsBoxCorner(*args):
        r"""

        Parameters
        ----------
        theOrient: V3d_TypeOfOrientation

        Return
        -------
        bool

        Description
        -----------
        Return true if specified orientation belongs to box corner (vertex).

        """
        return _AIS.AIS_ViewCube_IsBoxCorner(*args)

    @staticmethod
    def IsBoxEdge(*args):
        r"""

        Parameters
        ----------
        theOrient: V3d_TypeOfOrientation

        Return
        -------
        bool

        Description
        -----------
        Return true if specified orientation belongs to box edge.

        """
        return _AIS.AIS_ViewCube_IsBoxEdge(*args)

    @staticmethod
    def IsBoxSide(*args):
        r"""

        Parameters
        ----------
        theOrient: V3d_TypeOfOrientation

        Return
        -------
        bool

        Description
        -----------
        Return true if specified orientation belongs to box side.

        """
        return _AIS.AIS_ViewCube_IsBoxSide(*args)

    def IsFixedAnimationLoop(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if camera animation should be done in uninterruptible loop; true by default.

        """
        return _AIS.AIS_ViewCube_IsFixedAnimationLoop(self, *args)

    def IsYup(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if application expects y-up viewer orientation instead of z-up; false by default.

        """
        return _AIS.AIS_ViewCube_IsYup(self, *args)

    def ResetStyles(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset all size and style parameters to default. @warning it doesn't reset position of view cube.

        """
        return _AIS.AIS_ViewCube_ResetStyles(self, *args)

    def RoundRadius(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return relative radius of side corners (round rectangle); 0.0 by default. the value in within [0, 0.5] range meaning absolute radius = roundradius() / size().

        """
        return _AIS.AIS_ViewCube_RoundRadius(self, *args)

    def SetAutoStartAnimation(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Enable/disable automatic camera transformation on selection (highlighting). the automatic logic can be disabled if application wants performing action manually basing on picking results (ais_viewcubeowner).

        """
        return _AIS.AIS_ViewCube_SetAutoStartAnimation(self, *args)

    def SetAxesConeRadius(self, *args):
        r"""

        Parameters
        ----------
        theRadius: float

        Return
        -------
        None

        Description
        -----------
        Sets radius of cone of axes of the trihedron.

        """
        return _AIS.AIS_ViewCube_SetAxesConeRadius(self, *args)

    def SetAxesLabels(self, *args):
        r"""

        Parameters
        ----------
        theX: str
        theY: str
        theZ: str

        Return
        -------
        None

        Description
        -----------
        Set axes labels.

        """
        return _AIS.AIS_ViewCube_SetAxesLabels(self, *args)

    def SetAxesPadding(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Set new value of padding between axes and 3d part (box).

        """
        return _AIS.AIS_ViewCube_SetAxesPadding(self, *args)

    def SetAxesRadius(self, *args):
        r"""

        Parameters
        ----------
        theRadius: float

        Return
        -------
        None

        Description
        -----------
        Sets radius of axes of the trihedron.

        """
        return _AIS.AIS_ViewCube_SetAxesRadius(self, *args)

    def SetAxesSphereRadius(self, *args):
        r"""

        Parameters
        ----------
        theRadius: float

        Return
        -------
        None

        Description
        -----------
        Sets radius of sphere (central point) of the trihedron.

        """
        return _AIS.AIS_ViewCube_SetAxesSphereRadius(self, *args)

    def SetBoxColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Set new value of front color for the 3d part of object. @param thecolor [in] input color value.

        """
        return _AIS.AIS_ViewCube_SetBoxColor(self, *args)

    def SetBoxCornerMinSize(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Set new value of box corner minimal size.

        """
        return _AIS.AIS_ViewCube_SetBoxCornerMinSize(self, *args)

    def SetBoxEdgeGap(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Set new value of box edges gap.

        """
        return _AIS.AIS_ViewCube_SetBoxEdgeGap(self, *args)

    def SetBoxEdgeMinSize(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Set new value of box edge minimal size.

        """
        return _AIS.AIS_ViewCube_SetBoxEdgeMinSize(self, *args)

    def SetBoxFacetExtension(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Set new value of box facet extension.

        """
        return _AIS.AIS_ViewCube_SetBoxFacetExtension(self, *args)

    def SetBoxSideLabel(self, *args):
        r"""

        Parameters
        ----------
        theSide: V3d_TypeOfOrientation
        theLabel: str

        Return
        -------
        None

        Description
        -----------
        Set box side label.

        """
        return _AIS.AIS_ViewCube_SetBoxSideLabel(self, *args)

    def SetBoxTransparency(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Set new value of transparency for 3d part of object. @param thevalue [in] input transparency value.

        """
        return _AIS.AIS_ViewCube_SetBoxTransparency(self, *args)

    def SetDrawAxes(self, *args):
        r"""

        Parameters
        ----------
        theValue: bool

        Return
        -------
        None

        Description
        -----------
        Enable/disable drawing of trihedron.

        """
        return _AIS.AIS_ViewCube_SetDrawAxes(self, *args)

    def SetDrawEdges(self, *args):
        r"""

        Parameters
        ----------
        theValue: bool

        Return
        -------
        None

        Description
        -----------
        Enable/disable drawing of edges of view cube.

        """
        return _AIS.AIS_ViewCube_SetDrawEdges(self, *args)

    def SetDrawVertices(self, *args):
        r"""

        Parameters
        ----------
        theValue: bool

        Return
        -------
        None

        Description
        -----------
        Enable/disable drawing of vertices (corners) of view cube.

        """
        return _AIS.AIS_ViewCube_SetDrawVertices(self, *args)

    def SetDuration(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Set duration of animation. @param thevalue [in] input value of duration in seconds.

        """
        return _AIS.AIS_ViewCube_SetDuration(self, *args)

    def SetFitSelected(self, *args):
        r"""

        Parameters
        ----------
        theToFitSelected: bool

        Return
        -------
        None

        Description
        -----------
        Set if animation should fit selected objects or to fit entire scene.

        """
        return _AIS.AIS_ViewCube_SetFitSelected(self, *args)

    def SetFixedAnimationLoop(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Set if camera animation should be done in uninterruptible loop.

        """
        return _AIS.AIS_ViewCube_SetFixedAnimationLoop(self, *args)

    def SetFont(self, *args):
        r"""

        Parameters
        ----------
        theFont: str

        Return
        -------
        None

        Description
        -----------
        Set font name that is used for displaying of sides and axes text. alias for: @code attributes()->textaspect()->setfont() @endcode.

        """
        return _AIS.AIS_ViewCube_SetFont(self, *args)

    def SetFontHeight(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Change font height. alias for: @code attributes()->textaspect()->setheight() @endcode.

        """
        return _AIS.AIS_ViewCube_SetFontHeight(self, *args)

    def SetInnerColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Set color of sides back material. alias for: @code attributes()->shadingaspect()->aspect()->changebackmaterial().setcolor() @endcode.

        """
        return _AIS.AIS_ViewCube_SetInnerColor(self, *args)

    def SetResetCamera(self, *args):
        r"""

        Parameters
        ----------
        theToReset: bool

        Return
        -------
        None

        Description
        -----------
        Set if new camera up direction should be always set to default value for a new camera direction.

        """
        return _AIS.AIS_ViewCube_SetResetCamera(self, *args)

    def SetRoundRadius(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Set relative radius of view cube sides corners (round rectangle). the value should be within [0, 0.5] range.

        """
        return _AIS.AIS_ViewCube_SetRoundRadius(self, *args)

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        theValue: float
        theToAdaptAnother: bool (optional, default to true)

        Return
        -------
        None

        Description
        -----------
        Sets size (width and height) of view cube sides. @param thetoadaptanother if true, then other parameters will be adapted to specified size.

        """
        return _AIS.AIS_ViewCube_SetSize(self, *args)

    def SetTextColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Set color of text labels on box sides. alias for: @code attributes()->textaspect()->setcolor() @endcode.

        """
        return _AIS.AIS_ViewCube_SetTextColor(self, *args)

    def SetViewAnimation(self, *args):
        r"""

        Parameters
        ----------
        theAnimation: AIS_AnimationCamera

        Return
        -------
        None

        Description
        -----------
        Set view animation.

        """
        return _AIS.AIS_ViewCube_SetViewAnimation(self, *args)

    def SetYup(self, *args):
        r"""

        Parameters
        ----------
        theIsYup: bool
        theToUpdateLabels: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Set if application expects y-up viewer orientation instead of z-up.

        """
        return _AIS.AIS_ViewCube_SetYup(self, *args)

    def Size(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return size (width and height) of view cube sides; 100 by default.

        """
        return _AIS.AIS_ViewCube_Size(self, *args)

    def StartAnimation(self, *args):
        r"""

        Parameters
        ----------
        theOwner: AIS_ViewCubeOwner

        Return
        -------
        None

        Description
        -----------
        Start camera transformation corresponding to the input detected owner. @param theowner [in] detected owner.

        """
        return _AIS.AIS_ViewCube_StartAnimation(self, *args)

    def TextColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Return text color of labels of box sides; black by default.

        """
        return _AIS.AIS_ViewCube_TextColor(self, *args)

    def ToAutoStartAnimation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if automatic camera transformation on selection (highlighting) is enabled; true by default.

        """
        return _AIS.AIS_ViewCube_ToAutoStartAnimation(self, *args)

    def ToDrawAxes(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if trihedron is drawn; true by default.

        """
        return _AIS.AIS_ViewCube_ToDrawAxes(self, *args)

    def ToDrawEdges(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if edges of view cube is drawn; true by default.

        """
        return _AIS.AIS_ViewCube_ToDrawEdges(self, *args)

    def ToDrawVertices(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if vertices (vertex) of view cube is drawn; true by default.

        """
        return _AIS.AIS_ViewCube_ToDrawVertices(self, *args)

    def ToFitSelected(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if animation should fit selected objects and false to fit entire scene; true by default.

        """
        return _AIS.AIS_ViewCube_ToFitSelected(self, *args)

    def ToResetCameraUp(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if new camera up direction should be always set to default value for a new camera direction; false by default. when this flag is false, the new camera up will be set as current up orthogonalized to the new camera direction, and will set to default up on second click.

        """
        return _AIS.AIS_ViewCube_ToResetCameraUp(self, *args)

    def UpdateAnimation(self, *args):
        r"""

        Parameters
        ----------
        theToUpdate: bool

        Return
        -------
        bool

        Description
        -----------
        Perform one step of current camera transformation. thetoupdate [in] enable/disable update of view. return true if animation is not stopped.

        """
        return _AIS.AIS_ViewCube_UpdateAnimation(self, *args)

    def ViewAnimation(self, *args):
        r"""
        Return
        -------
        opencascade::handle<AIS_AnimationCamera>

        Description
        -----------
        Return view animation.

        """
        return _AIS.AIS_ViewCube_ViewAnimation(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ViewCube

# Register AIS_ViewCube in _AIS:
_AIS.AIS_ViewCube_swigregister(AIS_ViewCube)
class AIS_XRTrackedDevice(AIS_InteractiveObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theTris: Graphic3d_ArrayOfTriangles
        theTexture: Image_Texture

        Return
        -------
        None

        Description
        -----------
        Main constructor.
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _AIS.AIS_XRTrackedDevice_swiginit(self, _AIS.new_AIS_XRTrackedDevice(*args))

    def LaserColor(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Return laser color.

        """
        return _AIS.AIS_XRTrackedDevice_LaserColor(self, *args)

    def LaserLength(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return laser length.

        """
        return _AIS.AIS_XRTrackedDevice_LaserLength(self, *args)

    def Role(self, *args):
        r"""
        Return
        -------
        Aspect_XRTrackedDeviceRole

        Description
        -----------
        Return device role.

        """
        return _AIS.AIS_XRTrackedDevice_Role(self, *args)

    def SetLaserColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Set laser color.

        """
        return _AIS.AIS_XRTrackedDevice_SetLaserColor(self, *args)

    def SetLaserLength(self, *args):
        r"""

        Parameters
        ----------
        theLength: float

        Return
        -------
        None

        Description
        -----------
        Set laser length.

        """
        return _AIS.AIS_XRTrackedDevice_SetLaserLength(self, *args)

    def SetRole(self, *args):
        r"""

        Parameters
        ----------
        theRole: Aspect_XRTrackedDeviceRole

        Return
        -------
        None

        Description
        -----------
        Set device role.

        """
        return _AIS.AIS_XRTrackedDevice_SetRole(self, *args)

    def SetUnitFactor(self, *args):
        r"""

        Parameters
        ----------
        theFactor: float

        Return
        -------
        None

        Description
        -----------
        Set unit scale factor.

        """
        return _AIS.AIS_XRTrackedDevice_SetUnitFactor(self, *args)

    def UnitFactor(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return unit scale factor.

        """
        return _AIS.AIS_XRTrackedDevice_UnitFactor(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_XRTrackedDevice

# Register AIS_XRTrackedDevice in _AIS:
_AIS.AIS_XRTrackedDevice_swigregister(AIS_XRTrackedDevice)
class AIS_AnimationAxisRotation(AIS_BaseAnimationObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theAnimationName: str
        theContext: AIS_InteractiveContext
        theObject: AIS_InteractiveObject
        theAxis: gp_Ax1
        theAngleStart: float
        theAngleEnd: float

        Return
        -------
        None

        Description
        -----------
        Constructor with initialization. @param[in] theanimationname animation identifier @param[in] thecontext interactive context where object have been displayed @param[in] theobject object to apply rotation @param[in] theaxis rotation axis @param[in] theanglestart rotation angle at the start of animation @param[in] theangleend rotation angle at the end of animation.

        """
        _AIS.AIS_AnimationAxisRotation_swiginit(self, _AIS.new_AIS_AnimationAxisRotation(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_AnimationAxisRotation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AnimationAxisRotation

# Register AIS_AnimationAxisRotation in _AIS:
_AIS.AIS_AnimationAxisRotation_swigregister(AIS_AnimationAxisRotation)
class AIS_AnimationObject(AIS_BaseAnimationObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theAnimationName: str
        theContext: AIS_InteractiveContext
        theObject: AIS_InteractiveObject
        theTrsfStart: gp_Trsf
        theTrsfEnd: gp_Trsf

        Return
        -------
        None

        Description
        -----------
        Constructor with initialization. note that start/end transformations specify exactly local transformation of the object, not the transformation to be applied to existing local transformation. @param[in] theanimationname animation identifier @param[in] thecontext interactive context where object have been displayed @param[in] theobject object to apply local transformation @param[in] thetrsfstart local transformation at the start of animation (e.g. theobject->localtransformation()) @param[in] thetrsfend local transformation at the end of animation.

        """
        _AIS.AIS_AnimationObject_swiginit(self, _AIS.new_AIS_AnimationObject(*args))


    @staticmethod
    def DownCast(t):
      return Handle_AIS_AnimationObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_AnimationObject

# Register AIS_AnimationObject in _AIS:
_AIS.AIS_AnimationObject_swigregister(AIS_AnimationObject)
class AIS_ColoredShape(AIS_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Default constructor.

        Parameters
        ----------
        theShape: AIS_Shape

        Return
        -------
        None

        Description
        -----------
        Copy constructor.

        """
        _AIS.AIS_ColoredShape_swiginit(self, _AIS.new_AIS_ColoredShape(*args))

    def ChangeCustomAspectsMap(self, *args):
        r"""
        Return
        -------
        AIS_DataMapOfShapeDrawer

        Description
        -----------
        Return the map of custom aspects.

        """
        return _AIS.AIS_ColoredShape_ChangeCustomAspectsMap(self, *args)

    def ClearCustomAspects(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset the map of custom sub-shape aspects.

        """
        return _AIS.AIS_ColoredShape_ClearCustomAspects(self, *args)

    def CustomAspects(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        opencascade::handle<AIS_ColoredDrawer>

        Description
        -----------
        Customize properties of specified sub-shape. the shape will be stored in the map but ignored, if it is not sub-shape of main shape! this method can be used to mark sub-shapes with customizable properties.

        """
        return _AIS.AIS_ColoredShape_CustomAspects(self, *args)

    def CustomAspectsMap(self, *args):
        r"""
        Return
        -------
        AIS_DataMapOfShapeDrawer

        Description
        -----------
        Return the map of custom aspects.

        """
        return _AIS.AIS_ColoredShape_CustomAspectsMap(self, *args)

    def SetCustomColor(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Customize color of specified sub-shape.

        """
        return _AIS.AIS_ColoredShape_SetCustomColor(self, *args)

    def SetCustomTransparency(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theTransparency: float

        Return
        -------
        None

        Description
        -----------
        Customize transparency of specified sub-shape.

        """
        return _AIS.AIS_ColoredShape_SetCustomTransparency(self, *args)

    def SetCustomWidth(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theLineWidth: float

        Return
        -------
        None

        Description
        -----------
        Customize line width of specified sub-shape.

        """
        return _AIS.AIS_ColoredShape_SetCustomWidth(self, *args)

    def UnsetCustomAspects(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theToUnregister: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Reset custom properties of specified sub-shape. @param thetounregister unregister or not sub-shape from the map.

        """
        return _AIS.AIS_ColoredShape_UnsetCustomAspects(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_ColoredShape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AIS.delete_AIS_ColoredShape

# Register AIS_ColoredShape in _AIS:
_AIS.AIS_ColoredShape_swigregister(AIS_ColoredShape)
class AIS_TexturedShape(AIS_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Initializes the textured shape.

        """
        _AIS.AIS_TexturedShape_swiginit(self, _AIS.new_AIS_TexturedShape(*args))

    def DisableTextureModulate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Disables texture modulation.

        """
        return _AIS.AIS_TexturedShape_DisableTextureModulate(self, *args)

    def EnableTextureModulate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Enables texture modulation.

        """
        return _AIS.AIS_TexturedShape_EnableTextureModulate(self, *args)

    def SetTextureFileName(self, *args):
        r"""

        Parameters
        ----------
        theTextureFileName: str

        Return
        -------
        None

        Description
        -----------
        Sets the texture source. <thetexturefilename> can specify path to texture image or one of the standard predefined textures. the accepted file types are those used in image_alienpixmap with extensions such as rgb, png, jpg and more. to specify the standard predefined texture, the <thetexturefilename> should contain integer - the graphic3d_nameoftexture2d enumeration index. setting texture source using this method resets the source pixmap (if was set previously).

        """
        return _AIS.AIS_TexturedShape_SetTextureFileName(self, *args)

    def SetTextureMapOff(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Disables texture mapping.

        """
        return _AIS.AIS_TexturedShape_SetTextureMapOff(self, *args)

    def SetTextureMapOn(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Enables texture mapping.

        """
        return _AIS.AIS_TexturedShape_SetTextureMapOn(self, *args)

    def SetTextureOrigin(self, *args):
        r"""

        Parameters
        ----------
        theToSetTextureOrigin: bool
        theUOrigin: float (optional, default to 0.0)
        theVOrigin: float (optional, default to 0.0)

        Return
        -------
        None

        Description
        -----------
        Use this method to change the origin of the texture. the texel (0,0) will be mapped to the surface (uorigin,vorigin).

        """
        return _AIS.AIS_TexturedShape_SetTextureOrigin(self, *args)

    def SetTexturePixMap(self, *args):
        r"""

        Parameters
        ----------
        theTexturePixMap: Image_PixMap

        Return
        -------
        None

        Description
        -----------
        Sets the texture source. <thetexturepixmap> specifies image data. please note that the data should be in bottom-up order, the flag of image_pixmap::istopdown() will be ignored by graphic driver. setting texture source using this method resets the source by filename (if was set previously).

        """
        return _AIS.AIS_TexturedShape_SetTexturePixMap(self, *args)

    def SetTextureRepeat(self, *args):
        r"""

        Parameters
        ----------
        theToRepeat: bool
        theURepeat: float (optional, default to 1.0)
        theVRepeat: float (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        Sets the number of occurrences of the texture on each face. the texture itself is parameterized in (0,1) by (0,1). each face of the shape to be textured is parameterized in uv space (umin,umax) by (vmin,vmax). if repeatyn is set to false, texture coordinates are clamped in the range (0,1)x(0,1) of the face.

        """
        return _AIS.AIS_TexturedShape_SetTextureRepeat(self, *args)

    def SetTextureScale(self, *args):
        r"""

        Parameters
        ----------
        theToSetTextureScale: bool
        theScaleU: float (optional, default to 1.0)
        theScaleV: float (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        Use this method to scale the texture (percent of the face). you can specify a scale factor for both u and v. example: if you set scaleu and scalev to 0.5 and you enable texture repeat, the texture will appear twice on the face in each direction.

        """
        return _AIS.AIS_TexturedShape_SetTextureScale(self, *args)

    def TextureFile(self, *args):
        r"""
        Return
        -------
        str

        Description
        -----------
        Return path to the texture file.

        """
        return _AIS.AIS_TexturedShape_TextureFile(self, *args)

    def TextureMapState(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return flag to control texture mapping (for presentation mode 3).

        """
        return _AIS.AIS_TexturedShape_TextureMapState(self, *args)

    def TextureModulate(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if texture color modulation is turned on.

        """
        return _AIS.AIS_TexturedShape_TextureModulate(self, *args)

    def TextureOrigin(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if texture uv origin has been modified.

        """
        return _AIS.AIS_TexturedShape_TextureOrigin(self, *args)

    def TexturePixMap(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Image_PixMap>

        Description
        -----------
        Return the source pixmap for texture map.

        """
        return _AIS.AIS_TexturedShape_TexturePixMap(self, *args)

    def TextureRepeat(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return texture repeat flag.

        """
        return _AIS.AIS_TexturedShape_TextureRepeat(self, *args)

    def TextureScale(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if scale factor should be applied to texture mapping.

        """
        return _AIS.AIS_TexturedShape_TextureScale(self, *args)

    def TextureScaleU(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return scale factor for u coordinate (1.0 by default).

        """
        return _AIS.AIS_TexturedShape_TextureScaleU(self, *args)

    def TextureScaleV(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return scale factor for v coordinate (1.0 by default).

        """
        return _AIS.AIS_TexturedShape_TextureScaleV(self, *args)

    def TextureUOrigin(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return texture origin u position (0.0 by default).

        """
        return _AIS.AIS_TexturedShape_TextureUOrigin(self, *args)

    def TextureVOrigin(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return texture origin v position (0.0 by default).

        """
        return _AIS.AIS_TexturedShape_TextureVOrigin(self, *args)

    def URepeat(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return texture repeat u value.

        """
        return _AIS.AIS_TexturedShape_URepeat(self, *args)

    def UpdateAttributes(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Use this method to display the textured shape without recomputing the whole presentation. use this method when only the texture content has been changed. if other parameters (ie: scale factors, texture origin, texture repeat...) have changed, the whole presentation has to be recomputed: @code if (myshape->displaymode() == 3) { myaiscontext->recomputeprsonly (myshape); } else { myaiscontext->setdisplaymode (myshape, 3, standard_false); myaiscontext->display (myshape, standard_true); } @endcode.

        """
        return _AIS.AIS_TexturedShape_UpdateAttributes(self, *args)

    def VRepeat(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return texture repeat v value.

        """
        return _AIS.AIS_TexturedShape_VRepeat(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_AIS_TexturedShape_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def ShowTriangles(self):
    	pass

    __swig_destroy__ = _AIS.delete_AIS_TexturedShape

# Register AIS_TexturedShape in _AIS:
_AIS.AIS_TexturedShape_swigregister(AIS_TexturedShape)

AIS_AnimationTimer=OCC.Core.Media.Media_Timer
AIS_DisplayStatus=OCC.Core.PrsMgr.PrsMgr_DisplayStatus


@deprecated
def AIS_GraphicTool_GetInteriorColor(*args):
	return AIS_GraphicTool.GetInteriorColor(*args)

@deprecated
def AIS_GraphicTool_GetInteriorColor(*args):
	return AIS_GraphicTool.GetInteriorColor(*args)

@deprecated
def AIS_GraphicTool_GetLineAtt(*args):
	return AIS_GraphicTool.GetLineAtt(*args)

@deprecated
def AIS_GraphicTool_GetLineColor(*args):
	return AIS_GraphicTool.GetLineColor(*args)

@deprecated
def AIS_GraphicTool_GetLineColor(*args):
	return AIS_GraphicTool.GetLineColor(*args)

@deprecated
def AIS_GraphicTool_GetLineType(*args):
	return AIS_GraphicTool.GetLineType(*args)

@deprecated
def AIS_GraphicTool_GetLineWidth(*args):
	return AIS_GraphicTool.GetLineWidth(*args)

@deprecated
def AIS_GraphicTool_GetMaterial(*args):
	return AIS_GraphicTool.GetMaterial(*args)

@deprecated
def AIS_ColorScale_FindColor(*args):
	return AIS_ColorScale.FindColor(*args)

@deprecated
def AIS_ColorScale_FindColor(*args):
	return AIS_ColorScale.FindColor(*args)

@deprecated
def AIS_ColorScale_MakeUniformColors(*args):
	return AIS_ColorScale.MakeUniformColors(*args)

@deprecated
def AIS_ColorScale_hueToValidRange(*args):
	return AIS_ColorScale.hueToValidRange(*args)

@deprecated
def AIS_Shape_SelectionMode(*args):
	return AIS_Shape.SelectionMode(*args)

@deprecated
def AIS_Shape_SelectionType(*args):
	return AIS_Shape.SelectionType(*args)

@deprecated
def AIS_Shape_computeHlrPresentation(*args):
	return AIS_Shape.computeHlrPresentation(*args)

@deprecated
def AIS_ViewCube_IsBoxCorner(*args):
	return AIS_ViewCube.IsBoxCorner(*args)

@deprecated
def AIS_ViewCube_IsBoxEdge(*args):
	return AIS_ViewCube.IsBoxEdge(*args)

@deprecated
def AIS_ViewCube_IsBoxSide(*args):
	return AIS_ViewCube.IsBoxSide(*args)



