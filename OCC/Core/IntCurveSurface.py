# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntCurveSurface module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intcurvesurface.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntCurveSurface')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntCurveSurface')
    _IntCurveSurface = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntCurveSurface', [dirname(__file__)])
        except ImportError:
            import _IntCurveSurface
            return _IntCurveSurface
        try:
            _mod = imp.load_module('_IntCurveSurface', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntCurveSurface = swig_import_helper()
    del swig_import_helper
else:
    import _IntCurveSurface
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntCurveSurface.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _IntCurveSurface.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IntCurveSurface.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IntCurveSurface.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _IntCurveSurface.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _IntCurveSurface.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _IntCurveSurface.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _IntCurveSurface.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _IntCurveSurface.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _IntCurveSurface.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IntCurveSurface.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _IntCurveSurface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _IntCurveSurface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IntCurveSurface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IntCurveSurface.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IntCurveSurface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _IntCurveSurface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IntCurveSurface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IntCurveSurface.process_exception(error, method_name, class_name)
process_exception = _IntCurveSurface.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf

from enum import IntEnum
from OCC.Core.Exception import *

IntCurveSurface_Tangent = _IntCurveSurface.IntCurveSurface_Tangent
IntCurveSurface_In = _IntCurveSurface.IntCurveSurface_In
IntCurveSurface_Out = _IntCurveSurface.IntCurveSurface_Out


class IntCurveSurface_TransitionOnCurve(IntEnum):
	IntCurveSurface_Tangent = 0
	IntCurveSurface_In = 1
	IntCurveSurface_Out = 2
IntCurveSurface_Tangent = IntCurveSurface_TransitionOnCurve.IntCurveSurface_Tangent
IntCurveSurface_In = IntCurveSurface_TransitionOnCurve.IntCurveSurface_In
IntCurveSurface_Out = IntCurveSurface_TransitionOnCurve.IntCurveSurface_Out

class IntCurveSurface_SequenceOfPnt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_SequenceOfPnt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_SequenceOfPnt, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< IntCurveSurface_IntersectionPoint >::iterator":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_begin(self)

    def end(self) -> "NCollection_Sequence< IntCurveSurface_IntersectionPoint >::iterator":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_end(self)

    def cbegin(self) -> "NCollection_Sequence< IntCurveSurface_IntersectionPoint >::const_iterator":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_cbegin(self)

    def cend(self) -> "NCollection_Sequence< IntCurveSurface_IntersectionPoint >::const_iterator":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_cend(self)

    def __init__(self, *args):
        this = _IntCurveSurface.new_IntCurveSurface_SequenceOfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Size(self)

    def Length(self) -> "Standard_Integer":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_IsEmpty(self)

    def Reverse(self) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_IntCurveSurface.IntCurveSurface_SequenceOfPnt_delNode)
    else:
        delNode = _IntCurveSurface.IntCurveSurface_SequenceOfPnt_delNode

    def Clear(self, theAllocator: 'IntSurf_Allocator'=0) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Clear(self, theAllocator)

    def Assign(self, theOther: 'IntCurveSurface_SequenceOfPnt') -> "NCollection_Sequence< IntCurveSurface_IntersectionPoint > &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Assign(self, theOther)

    def Set(self, theOther: 'IntCurveSurface_SequenceOfPnt') -> "NCollection_Sequence< IntCurveSurface_IntersectionPoint > &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'IntCurveSurface_SequenceOfPnt') -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Split(self, theIndex, theSeq)

    def First(self) -> "IntCurveSurface_IntersectionPoint const &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_First(self)

    def ChangeFirst(self) -> "IntCurveSurface_IntersectionPoint &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_ChangeFirst(self)

    def Last(self) -> "IntCurveSurface_IntersectionPoint const &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Last(self)

    def ChangeLast(self) -> "IntCurveSurface_IntersectionPoint &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "IntCurveSurface_IntersectionPoint const &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "IntCurveSurface_IntersectionPoint &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "IntCurveSurface_IntersectionPoint &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'IntCurveSurface_IntersectionPoint') -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_SequenceOfPnt
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

IntCurveSurface_SequenceOfPnt_swigregister = _IntCurveSurface.IntCurveSurface_SequenceOfPnt_swigregister
IntCurveSurface_SequenceOfPnt_swigregister(IntCurveSurface_SequenceOfPnt)

def IntCurveSurface_SequenceOfPnt_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntCurveSurface.IntCurveSurface_SequenceOfPnt_delNode(theNode, theAl)
IntCurveSurface_SequenceOfPnt_delNode = _IntCurveSurface.IntCurveSurface_SequenceOfPnt_delNode

class IntCurveSurface_SequenceOfSeg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_SequenceOfSeg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_SequenceOfSeg, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< IntCurveSurface_IntersectionSegment >::iterator":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_begin(self)

    def end(self) -> "NCollection_Sequence< IntCurveSurface_IntersectionSegment >::iterator":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_end(self)

    def cbegin(self) -> "NCollection_Sequence< IntCurveSurface_IntersectionSegment >::const_iterator":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_cbegin(self)

    def cend(self) -> "NCollection_Sequence< IntCurveSurface_IntersectionSegment >::const_iterator":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_cend(self)

    def __init__(self, *args):
        this = _IntCurveSurface.new_IntCurveSurface_SequenceOfSeg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Size(self)

    def Length(self) -> "Standard_Integer":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_IsEmpty(self)

    def Reverse(self) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_IntCurveSurface.IntCurveSurface_SequenceOfSeg_delNode)
    else:
        delNode = _IntCurveSurface.IntCurveSurface_SequenceOfSeg_delNode

    def Clear(self, theAllocator: 'IntSurf_Allocator'=0) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Clear(self, theAllocator)

    def Assign(self, theOther: 'IntCurveSurface_SequenceOfSeg') -> "NCollection_Sequence< IntCurveSurface_IntersectionSegment > &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Assign(self, theOther)

    def Set(self, theOther: 'IntCurveSurface_SequenceOfSeg') -> "NCollection_Sequence< IntCurveSurface_IntersectionSegment > &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'IntCurveSurface_SequenceOfSeg') -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Split(self, theIndex, theSeq)

    def First(self) -> "IntCurveSurface_IntersectionSegment const &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_First(self)

    def ChangeFirst(self) -> "IntCurveSurface_IntersectionSegment &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_ChangeFirst(self)

    def Last(self) -> "IntCurveSurface_IntersectionSegment const &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Last(self)

    def ChangeLast(self) -> "IntCurveSurface_IntersectionSegment &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "IntCurveSurface_IntersectionSegment const &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "IntCurveSurface_IntersectionSegment &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "IntCurveSurface_IntersectionSegment &":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'IntCurveSurface_IntersectionSegment') -> "void":
        return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_SequenceOfSeg
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

IntCurveSurface_SequenceOfSeg_swigregister = _IntCurveSurface.IntCurveSurface_SequenceOfSeg_swigregister
IntCurveSurface_SequenceOfSeg_swigregister(IntCurveSurface_SequenceOfSeg)

def IntCurveSurface_SequenceOfSeg_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _IntCurveSurface.IntCurveSurface_SequenceOfSeg_delNode(theNode, theAl)
IntCurveSurface_SequenceOfSeg_delNode = _IntCurveSurface.IntCurveSurface_SequenceOfSeg_delNode

class IntCurveSurface_Intersection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_Intersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_Intersection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Dump(self, *args) -> "void":
        """
        Dump all the fields.

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_Dump(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns the <done> field.

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        Returns true if curve is parallel or belongs surface this case is recognized only for some pairs of analytical curves and surfaces (plane - line, ...).

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_IsParallel(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of intersectionpoint if isdone returns true. else notdone is raised.

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_NbPoints(self, *args)


    def NbSegments(self, *args) -> "Standard_Integer":
        """
        Returns the number of intersectionsegment if isdone returns true. else notdone is raised.

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_NbSegments(self, *args)


    def Point(self, *args) -> "IntCurveSurface_IntersectionPoint const &":
        """
        Returns the intersectionpoint of range <index> raises notdone if the computation has failed or if the computation has not been done raises outofrange if index is not in the range <1..nbpoints>.

        Parameters
        ----------
        Index: int

        Returns
        -------
        IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_Point(self, *args)


    def Segment(self, *args) -> "IntCurveSurface_IntersectionSegment const &":
        """
        Returns the intersectionsegment of range <index> raises notdone if the computation has failed or if the computation has not been done raises outofrange if index is not in the range <1..nbsegment>.

        Parameters
        ----------
        Index: int

        Returns
        -------
        IntCurveSurface_IntersectionSegment

        """
        return _IntCurveSurface.IntCurveSurface_Intersection_Segment(self, *args)


    __repr__ = _dumps_object

IntCurveSurface_Intersection_swigregister = _IntCurveSurface.IntCurveSurface_Intersection_swigregister
IntCurveSurface_Intersection_swigregister(IntCurveSurface_Intersection)

class IntCurveSurface_IntersectionPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_IntersectionPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_IntersectionPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        Create an intersectionpoint.

        Parameters
        ----------
        P: gp_Pnt
        USurf: float
        VSurf: float
        UCurv: float
        TrCurv: IntCurveSurface_TransitionOnCurve

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_IntersectionPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dump(self, *args) -> "void":
        """
        Dump all the fields.

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_Dump(self, *args)


    def Pnt(self, *args) -> "gp_Pnt const":
        """
        Returns the geometric point.

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_Pnt(self, *args)


    def SetValues(self, *args) -> "void":
        """
        Set the fields of the current intersectionpoint.

        Parameters
        ----------
        P: gp_Pnt
        USurf: float
        VSurf: float
        UCurv: float
        TrCurv: IntCurveSurface_TransitionOnCurve

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_SetValues(self, *args)


    def Transition(self, *args) -> "IntCurveSurface_TransitionOnCurve":
        """
        Returns the transition of the point.

        Returns
        -------
        IntCurveSurface_TransitionOnCurve

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_Transition(self, *args)


    def U(self, *args) -> "Standard_Real":
        """
        Returns the u parameter on the surface.

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_U(self, *args)


    def V(self, *args) -> "Standard_Real":
        """
        Returns the v parameter on the surface.

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_V(self, *args)


    def Values(self, *args) -> "void":
        """
        Get the fields of the current intersectionpoint.

        Parameters
        ----------
        P: gp_Pnt

        Returns
        -------
        USurf: float
        VSurf: float
        UCurv: float
        TrCurv: IntCurveSurface_TransitionOnCurve

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_Values(self, *args)


    def W(self, *args) -> "Standard_Real":
        """
        Returns the parameter on the curve.

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionPoint_W(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_IntersectionPoint
    __del__ = lambda self: None
IntCurveSurface_IntersectionPoint_swigregister = _IntCurveSurface.IntCurveSurface_IntersectionPoint_swigregister
IntCurveSurface_IntersectionPoint_swigregister(IntCurveSurface_IntersectionPoint)

class IntCurveSurface_IntersectionSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_IntersectionSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_IntersectionSegment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P1: IntCurveSurface_IntersectionPoint
        P2: IntCurveSurface_IntersectionPoint

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_IntersectionSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dump(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_Dump(self, *args)


    def FirstPoint(self, *args) -> "IntCurveSurface_IntersectionPoint const &":
        """
        No available documentation.

        Parameters
        ----------
        P1: IntCurveSurface_IntersectionPoint

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_FirstPoint(self, *args)


    def SecondPoint(self, *args) -> "IntCurveSurface_IntersectionPoint const &":
        """
        No available documentation.

        Parameters
        ----------
        P2: IntCurveSurface_IntersectionPoint

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        IntCurveSurface_IntersectionPoint

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_SecondPoint(self, *args)


    def SetValues(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P1: IntCurveSurface_IntersectionPoint
        P2: IntCurveSurface_IntersectionPoint

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_SetValues(self, *args)


    def Values(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P1: IntCurveSurface_IntersectionPoint
        P2: IntCurveSurface_IntersectionPoint

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_IntersectionSegment_Values(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_IntersectionSegment
    __del__ = lambda self: None
IntCurveSurface_IntersectionSegment_swigregister = _IntCurveSurface.IntCurveSurface_IntersectionSegment_swigregister
IntCurveSurface_IntersectionSegment_swigregister(IntCurveSurface_IntersectionSegment)

class IntCurveSurface_TheCSFunctionOfHInter(OCC.Core.math.math_FunctionSetWithDerivatives):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionSetWithDerivatives]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_TheCSFunctionOfHInter, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionSetWithDerivatives]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_TheCSFunctionOfHInter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_TheCSFunctionOfHInter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AuxillarCurve(self, *args) -> "opencascade::handle< Adaptor3d_HCurve > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HCurve>

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_AuxillarCurve(self, *args)


    def AuxillarSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_AuxillarSurface(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Point(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_Root(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_TheCSFunctionOfHInter
    __del__ = lambda self: None
IntCurveSurface_TheCSFunctionOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheCSFunctionOfHInter_swigregister
IntCurveSurface_TheCSFunctionOfHInter_swigregister(IntCurveSurface_TheCSFunctionOfHInter)

class IntCurveSurface_TheExactHInter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_TheExactHInter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_TheExactHInter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Compute the solution point with the close point margincoef is the coefficient for extension of uv bounds. ex., ufirst -= margincoef*(ulast-ufirst).

        Parameters
        ----------
        U: float
        V: float
        W: float
        F: IntCurveSurface_TheCSFunctionOfHInter
        TolTangency: float
        MarginCoef: float,optional
        	default value is 0.0

        Returns
        -------
        None

        Initialize the parameters to compute the solution.

        Parameters
        ----------
        F: IntCurveSurface_TheCSFunctionOfHInter
        TolTangency: float

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_TheExactHInter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Function(self, *args) -> "IntCurveSurface_TheCSFunctionOfHInter &":
        """
        Return the math function which is used to compute the intersection.

        Returns
        -------
        IntCurveSurface_TheCSFunctionOfHInter

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_Function(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns true if the creation completed without failure.

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_IsEmpty(self, *args)


    def ParameterOnCurve(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_ParameterOnCurve(self, *args)


    def ParameterOnSurface(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        U: float
        V: float

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_ParameterOnSurface(self, *args)


    def Perform(self, *args) -> "void":
        """
        Compute the solution it's possible to write to optimize: intimp_intcs inter(s1,c1,toltangency) math_functionsetroot rsnld(inter.function()) while ...{ u=... v=... w=... inter.perform(u,v,w,rsnld) } or intimp_intcs inter(toltangency) inter.setsurface(s); math_functionsetroot rsnld(inter.function()) while ...{ c=... inter.setcurve(c); u=... v=... w=... inter.perform(u,v,w,rsnld) }.

        Parameters
        ----------
        U: float
        V: float
        W: float
        Rsnld: math_FunctionSetRoot
        u0: float
        v0: float
        u1: float
        v1: float
        w0: float
        w1: float

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_Perform(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        Returns the intersection point the exception notdone is raised if isdone is false. the exception domainerror is raised if isempty is true.

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_TheExactHInter_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_TheExactHInter
    __del__ = lambda self: None
IntCurveSurface_TheExactHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheExactHInter_swigregister
IntCurveSurface_TheExactHInter_swigregister(IntCurveSurface_TheExactHInter)

class IntCurveSurface_TheHCurveTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_TheHCurveTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_TheHCurveTool, name)
    __repr__ = _swig_repr

    def BSpline(*args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def Bezier(*args) -> "opencascade::handle< Geom_BezierCurve >":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def Circle(*args) -> "gp_Circ":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        gp_Circ

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Continuity(*args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        GeomAbs_Shape

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def D0(*args) -> "void":
        """
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args) -> "void":
        """
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args) -> "gp_Vec":
        """
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_DN(*args)

    DN = staticmethod(DN)

    def Ellipse(*args) -> "gp_Elips":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        gp_Elips

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def FirstParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def GetType(*args) -> "GeomAbs_CurveType":
        """
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        GeomAbs_CurveType

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Hyperbola(*args) -> "gp_Hypr":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        gp_Hypr

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Intervals(*args) -> "void":
        """
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accomodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        C: Adaptor3d_HCurve
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsClosed(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsPeriodic(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def LastParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Line(*args) -> "gp_Lin":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        gp_Lin

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Line(*args)

    Line = staticmethod(Line)

    def NbIntervals(*args) -> "Standard_Integer":
        """
        Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def NbSamples(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        U0: float
        U1: float

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def Parabola(*args) -> "gp_Parab":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        gp_Parab

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Period(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Period(*args)

    Period = staticmethod(Period)

    def Resolution(*args) -> "Standard_Real":
        """
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        R3d: float

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def SamplePars(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        U0: float
        U1: float
        Defl: float
        NbMin: int
        Pars: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_SamplePars(*args)

    SamplePars = staticmethod(SamplePars)

    def Value(*args) -> "gp_Pnt":
        """
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        C: Adaptor3d_HCurve
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        this = _IntCurveSurface.new_IntCurveSurface_TheHCurveTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_TheHCurveTool
    __del__ = lambda self: None
IntCurveSurface_TheHCurveTool_swigregister = _IntCurveSurface.IntCurveSurface_TheHCurveTool_swigregister
IntCurveSurface_TheHCurveTool_swigregister(IntCurveSurface_TheHCurveTool)

def IntCurveSurface_TheHCurveTool_BSpline(*args) -> "opencascade::handle< Geom_BSplineCurve >":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    opencascade::handle<Geom_BSplineCurve>

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_BSpline(*args)

def IntCurveSurface_TheHCurveTool_Bezier(*args) -> "opencascade::handle< Geom_BezierCurve >":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    opencascade::handle<Geom_BezierCurve>

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Bezier(*args)

def IntCurveSurface_TheHCurveTool_Circle(*args) -> "gp_Circ":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    gp_Circ

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Circle(*args)

def IntCurveSurface_TheHCurveTool_Continuity(*args) -> "GeomAbs_Shape":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    GeomAbs_Shape

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Continuity(*args)

def IntCurveSurface_TheHCurveTool_D0(*args) -> "void":
    """
    Computes the point of parameter u on the curve.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    U: float
    P: gp_Pnt

    Returns
    -------
    None

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D0(*args)

def IntCurveSurface_TheHCurveTool_D1(*args) -> "void":
    """
    Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    U: float
    P: gp_Pnt
    V: gp_Vec

    Returns
    -------
    None

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D1(*args)

def IntCurveSurface_TheHCurveTool_D2(*args) -> "void":
    """
    Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    U: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D2(*args)

def IntCurveSurface_TheHCurveTool_D3(*args) -> "void":
    """
    Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    U: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_D3(*args)

def IntCurveSurface_TheHCurveTool_DN(*args) -> "gp_Vec":
    """
    The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    U: float
    N: int

    Returns
    -------
    gp_Vec

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_DN(*args)

def IntCurveSurface_TheHCurveTool_Ellipse(*args) -> "gp_Elips":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    gp_Elips

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Ellipse(*args)

def IntCurveSurface_TheHCurveTool_FirstParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    float

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_FirstParameter(*args)

def IntCurveSurface_TheHCurveTool_GetType(*args) -> "GeomAbs_CurveType":
    """
    Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    GeomAbs_CurveType

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_GetType(*args)

def IntCurveSurface_TheHCurveTool_Hyperbola(*args) -> "gp_Hypr":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    gp_Hypr

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Hyperbola(*args)

def IntCurveSurface_TheHCurveTool_Intervals(*args) -> "void":
    """
    Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accomodate for the parameters. i.e. t.length() > nbintervals().

    Parameters
    ----------
    C: Adaptor3d_HCurve
    T: TColStd_Array1OfReal
    S: GeomAbs_Shape

    Returns
    -------
    None

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Intervals(*args)

def IntCurveSurface_TheHCurveTool_IsClosed(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    bool

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_IsClosed(*args)

def IntCurveSurface_TheHCurveTool_IsPeriodic(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    bool

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_IsPeriodic(*args)

def IntCurveSurface_TheHCurveTool_LastParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    float

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_LastParameter(*args)

def IntCurveSurface_TheHCurveTool_Line(*args) -> "gp_Lin":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    gp_Lin

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Line(*args)

def IntCurveSurface_TheHCurveTool_NbIntervals(*args) -> "Standard_Integer":
    """
    Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    S: GeomAbs_Shape

    Returns
    -------
    int

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_NbIntervals(*args)

def IntCurveSurface_TheHCurveTool_NbSamples(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    U0: float
    U1: float

    Returns
    -------
    int

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_NbSamples(*args)

def IntCurveSurface_TheHCurveTool_Parabola(*args) -> "gp_Parab":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    gp_Parab

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Parabola(*args)

def IntCurveSurface_TheHCurveTool_Period(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve

    Returns
    -------
    float

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Period(*args)

def IntCurveSurface_TheHCurveTool_Resolution(*args) -> "Standard_Real":
    """
    Returns the parametric resolution corresponding to the real space resolution <r3d>.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    R3d: float

    Returns
    -------
    float

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Resolution(*args)

def IntCurveSurface_TheHCurveTool_SamplePars(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    U0: float
    U1: float
    Defl: float
    NbMin: int
    Pars: TColStd_HArray1OfReal

    Returns
    -------
    None

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_SamplePars(*args)

def IntCurveSurface_TheHCurveTool_Value(*args) -> "gp_Pnt":
    """
    Computes the point of parameter u on the curve.

    Parameters
    ----------
    C: Adaptor3d_HCurve
    U: float

    Returns
    -------
    gp_Pnt

    """
    return _IntCurveSurface.IntCurveSurface_TheHCurveTool_Value(*args)

class IntCurveSurface_TheInterferenceOfHInter(OCC.Core.Intf.Intf_Interference):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Intf.Intf_Interference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_TheInterferenceOfHInter, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Intf.Intf_Interference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_TheInterferenceOfHInter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs an empty interference between polygon and polyhedron.

        Returns
        -------
        None

        Constructs and computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        thePolyg: IntCurveSurface_ThePolygonOfHInter
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        Constructs and computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        Constructs and computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        Constructs and computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        thePolyg: IntCurveSurface_ThePolygonOfHInter
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        Constructs and computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        Constructs and computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_TheInterferenceOfHInter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Interference(self, *args) -> "void":
        """
        Compares the boundings between the segment of <thepolyg> and the facets of <thepolyh>.

        Parameters
        ----------
        thePolyg: IntCurveSurface_ThePolygonOfHInter
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        Compares the boundings between the segment of <thepolyg> and the facets of <thepolyh>.

        Parameters
        ----------
        thePolyg: IntCurveSurface_ThePolygonOfHInter
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_Interference(self, *args)


    def Perform(self, *args) -> "void":
        """
        Computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        thePolyg: IntCurveSurface_ThePolygonOfHInter
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        Computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        Computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        Computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        thePolyg: IntCurveSurface_ThePolygonOfHInter
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        Computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        Computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_TheInterferenceOfHInter
    __del__ = lambda self: None
IntCurveSurface_TheInterferenceOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheInterferenceOfHInter_swigregister
IntCurveSurface_TheInterferenceOfHInter_swigregister(IntCurveSurface_TheInterferenceOfHInter)

class IntCurveSurface_ThePolygonOfHInter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_ThePolygonOfHInter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_ThePolygonOfHInter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        Curve: Adaptor3d_HCurve
        NbPnt: int

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Curve: Adaptor3d_HCurve
        U1: float
        U2: float
        NbPnt: int

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Curve: Adaptor3d_HCurve
        Upars: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_ThePolygonOfHInter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ApproxParamOnCurve(self, *args) -> "Standard_Real":
        """
        Give an approximation of the parameter on the curve according to the discretization of the curve.

        Parameters
        ----------
        Index: int
        ParamOnLine: float

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_ApproxParamOnCurve(self, *args)


    def BeginOfSeg(self, *args) -> "gp_Pnt const":
        """
        Give the point of range index in the polygon.

        Parameters
        ----------
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_BeginOfSeg(self, *args)


    def Bounding(self, *args) -> "Bnd_Box const &":
        """
        Give the bounding box of the polygon.

        Returns
        -------
        Bnd_Box

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Bounding(self, *args)


    def Closed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        clos: bool

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Closed(self, *args)


    def DeflectionOverEstimation(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_DeflectionOverEstimation(self, *args)


    def Dump(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_Dump(self, *args)


    def EndOfSeg(self, *args) -> "gp_Pnt const":
        """
        Give the point of range index in the polygon.

        Parameters
        ----------
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_EndOfSeg(self, *args)


    def InfParameter(self, *args) -> "Standard_Real":
        """
        Returns the parameter (on the curve) of the first point of the polygon.

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_InfParameter(self, *args)


    def NbSegments(self, *args) -> "Standard_Integer":
        """
        Give the number of segments in the polyline.

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_NbSegments(self, *args)


    def SetDeflectionOverEstimation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        x: float

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_SetDeflectionOverEstimation(self, *args)


    def SupParameter(self, *args) -> "Standard_Real":
        """
        Returns the parameter (on the curve) of the last point of the polygon.

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_SupParameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_ThePolygonOfHInter
    __del__ = lambda self: None
IntCurveSurface_ThePolygonOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_ThePolygonOfHInter_swigregister
IntCurveSurface_ThePolygonOfHInter_swigregister(IntCurveSurface_ThePolygonOfHInter)

class IntCurveSurface_ThePolygonToolOfHInter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_ThePolygonToolOfHInter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_ThePolygonToolOfHInter, name)
    __repr__ = _swig_repr

    def BeginOfSeg(*args) -> "gp_Pnt const":
        """
        Give the point of range index in the polygon.

        Parameters
        ----------
        thePolygon: IntCurveSurface_ThePolygonOfHInter
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_BeginOfSeg(*args)

    BeginOfSeg = staticmethod(BeginOfSeg)

    def Bounding(*args) -> "Bnd_Box const &":
        """
        Give the bounding box of the polygon.

        Parameters
        ----------
        thePolygon: IntCurveSurface_ThePolygonOfHInter

        Returns
        -------
        Bnd_Box

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Bounding(*args)

    Bounding = staticmethod(Bounding)

    def Closed(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        thePolygon: IntCurveSurface_ThePolygonOfHInter

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Closed(*args)

    Closed = staticmethod(Closed)

    def DeflectionOverEstimation(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        thePolygon: IntCurveSurface_ThePolygonOfHInter

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_DeflectionOverEstimation(*args)

    DeflectionOverEstimation = staticmethod(DeflectionOverEstimation)

    def Dump(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        thePolygon: IntCurveSurface_ThePolygonOfHInter

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Dump(*args)

    Dump = staticmethod(Dump)

    def EndOfSeg(*args) -> "gp_Pnt const":
        """
        Give the point of range index in the polygon.

        Parameters
        ----------
        thePolygon: IntCurveSurface_ThePolygonOfHInter
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_EndOfSeg(*args)

    EndOfSeg = staticmethod(EndOfSeg)

    def NbSegments(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        thePolygon: IntCurveSurface_ThePolygonOfHInter

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_NbSegments(*args)

    NbSegments = staticmethod(NbSegments)

    __repr__ = _dumps_object


    def __init__(self):
        this = _IntCurveSurface.new_IntCurveSurface_ThePolygonToolOfHInter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_ThePolygonToolOfHInter
    __del__ = lambda self: None
IntCurveSurface_ThePolygonToolOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_swigregister
IntCurveSurface_ThePolygonToolOfHInter_swigregister(IntCurveSurface_ThePolygonToolOfHInter)

def IntCurveSurface_ThePolygonToolOfHInter_BeginOfSeg(*args) -> "gp_Pnt const":
    """
    Give the point of range index in the polygon.

    Parameters
    ----------
    thePolygon: IntCurveSurface_ThePolygonOfHInter
    Index: int

    Returns
    -------
    gp_Pnt

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_BeginOfSeg(*args)

def IntCurveSurface_ThePolygonToolOfHInter_Bounding(*args) -> "Bnd_Box const &":
    """
    Give the bounding box of the polygon.

    Parameters
    ----------
    thePolygon: IntCurveSurface_ThePolygonOfHInter

    Returns
    -------
    Bnd_Box

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Bounding(*args)

def IntCurveSurface_ThePolygonToolOfHInter_Closed(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    thePolygon: IntCurveSurface_ThePolygonOfHInter

    Returns
    -------
    bool

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Closed(*args)

def IntCurveSurface_ThePolygonToolOfHInter_DeflectionOverEstimation(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    thePolygon: IntCurveSurface_ThePolygonOfHInter

    Returns
    -------
    float

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_DeflectionOverEstimation(*args)

def IntCurveSurface_ThePolygonToolOfHInter_Dump(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    thePolygon: IntCurveSurface_ThePolygonOfHInter

    Returns
    -------
    None

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_Dump(*args)

def IntCurveSurface_ThePolygonToolOfHInter_EndOfSeg(*args) -> "gp_Pnt const":
    """
    Give the point of range index in the polygon.

    Parameters
    ----------
    thePolygon: IntCurveSurface_ThePolygonOfHInter
    Index: int

    Returns
    -------
    gp_Pnt

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_EndOfSeg(*args)

def IntCurveSurface_ThePolygonToolOfHInter_NbSegments(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    thePolygon: IntCurveSurface_ThePolygonOfHInter

    Returns
    -------
    int

    """
    return _IntCurveSurface.IntCurveSurface_ThePolygonToolOfHInter_NbSegments(*args)

class IntCurveSurface_ThePolyhedronToolOfHInter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_ThePolyhedronToolOfHInter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_ThePolyhedronToolOfHInter, name)
    __repr__ = _swig_repr

    def Bounding(*args) -> "Bnd_Box const &":
        """
        Give the bounding box of the polyhedrontool.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        Bnd_Box

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Bounding(*args)

    Bounding = staticmethod(Bounding)

    def ComponentsBounding(*args) -> "opencascade::handle< Bnd_HArray1OfBox > const &":
        """
        Give the array of boxes. the box <n> corresponding to the triangle <n>.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        opencascade::handle<Bnd_HArray1OfBox>

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_ComponentsBounding(*args)

    ComponentsBounding = staticmethod(ComponentsBounding)

    def DeflectionOverEstimation(*args) -> "Standard_Real":
        """
        Give the tolerance of the polygon.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_DeflectionOverEstimation(*args)

    DeflectionOverEstimation = staticmethod(DeflectionOverEstimation)

    def Dump(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Dump(*args)

    Dump = staticmethod(Dump)

    def GetBorderDeflection(*args) -> "Standard_Real":
        """
        This method returns a border deflection of the polyhedron.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_GetBorderDeflection(*args)

    GetBorderDeflection = staticmethod(GetBorderDeflection)

    def IsOnBound(*args) -> "Standard_Boolean":
        """
        This method returns true if the edge based on points with indices index1 and index2 represents a boundary edge. it is necessary to take into account the boundary deflection for this edge.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        Index1: int
        Index2: int

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_IsOnBound(*args)

    IsOnBound = staticmethod(IsOnBound)

    def NbTriangles(*args) -> "Standard_Integer":
        """
        Give the number of triangles in this polyedral surface.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_NbTriangles(*args)

    NbTriangles = staticmethod(NbTriangles)

    def Point(*args) -> "gp_Pnt const":
        """
        Give the point of index i in the polyedral surface.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Point(*args)

    Point = staticmethod(Point)

    def TriConnex(*args) -> "Standard_Integer &, Standard_Integer &":
        """
        Give the addresse tricon of the triangle connexe to the triangle of address triang by the edge pivot pedge and the third point of this connexe triangle. when we are on a free edge tricon==0 but the function return the value of the triangle in the other side of pivot on the free edge. used to turn around a vertex.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        Triang: int
        Pivot: int
        Pedge: int

        Returns
        -------
        TriCon: int
        OtherP: int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_TriConnex(*args)

    TriConnex = staticmethod(TriConnex)

    def Triangle(*args) -> "Standard_Integer &, Standard_Integer &, Standard_Integer &":
        """
        Give the indices of the 3 points of the triangle of address index in the polyhedrontool.

        Parameters
        ----------
        thePolyh: IntCurveSurface_ThePolyhedronOfHInter
        Index: int

        Returns
        -------
        P1: int
        P2: int
        P3: int

        """
        return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Triangle(*args)

    Triangle = staticmethod(Triangle)

    __repr__ = _dumps_object


    def __init__(self):
        this = _IntCurveSurface.new_IntCurveSurface_ThePolyhedronToolOfHInter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_ThePolyhedronToolOfHInter
    __del__ = lambda self: None
IntCurveSurface_ThePolyhedronToolOfHInter_swigregister = _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_swigregister
IntCurveSurface_ThePolyhedronToolOfHInter_swigregister(IntCurveSurface_ThePolyhedronToolOfHInter)

def IntCurveSurface_ThePolyhedronToolOfHInter_Bounding(*args) -> "Bnd_Box const &":
    """
    Give the bounding box of the polyhedrontool.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter

    Returns
    -------
    Bnd_Box

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Bounding(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_ComponentsBounding(*args) -> "opencascade::handle< Bnd_HArray1OfBox > const &":
    """
    Give the array of boxes. the box <n> corresponding to the triangle <n>.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter

    Returns
    -------
    opencascade::handle<Bnd_HArray1OfBox>

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_ComponentsBounding(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_DeflectionOverEstimation(*args) -> "Standard_Real":
    """
    Give the tolerance of the polygon.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter

    Returns
    -------
    float

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_DeflectionOverEstimation(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_Dump(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter

    Returns
    -------
    None

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Dump(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_GetBorderDeflection(*args) -> "Standard_Real":
    """
    This method returns a border deflection of the polyhedron.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter

    Returns
    -------
    float

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_GetBorderDeflection(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_IsOnBound(*args) -> "Standard_Boolean":
    """
    This method returns true if the edge based on points with indices index1 and index2 represents a boundary edge. it is necessary to take into account the boundary deflection for this edge.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter
    Index1: int
    Index2: int

    Returns
    -------
    bool

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_IsOnBound(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_NbTriangles(*args) -> "Standard_Integer":
    """
    Give the number of triangles in this polyedral surface.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter

    Returns
    -------
    int

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_NbTriangles(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_Point(*args) -> "gp_Pnt const":
    """
    Give the point of index i in the polyedral surface.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter
    Index: int

    Returns
    -------
    gp_Pnt

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Point(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_TriConnex(*args) -> "Standard_Integer &, Standard_Integer &":
    """
    Give the addresse tricon of the triangle connexe to the triangle of address triang by the edge pivot pedge and the third point of this connexe triangle. when we are on a free edge tricon==0 but the function return the value of the triangle in the other side of pivot on the free edge. used to turn around a vertex.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter
    Triang: int
    Pivot: int
    Pedge: int

    Returns
    -------
    TriCon: int
    OtherP: int

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_TriConnex(*args)

def IntCurveSurface_ThePolyhedronToolOfHInter_Triangle(*args) -> "Standard_Integer &, Standard_Integer &, Standard_Integer &":
    """
    Give the indices of the 3 points of the triangle of address index in the polyhedrontool.

    Parameters
    ----------
    thePolyh: IntCurveSurface_ThePolyhedronOfHInter
    Index: int

    Returns
    -------
    P1: int
    P2: int
    P3: int

    """
    return _IntCurveSurface.IntCurveSurface_ThePolyhedronToolOfHInter_Triangle(*args)

class IntCurveSurface_TheQuadCurvExactHInter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_TheQuadCurvExactHInter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_TheQuadCurvExactHInter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Provides the signed distance function : q(w) and its first derivative dq(w)/dw.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_TheQuadCurvExactHInter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Intervals(self, *args) -> "void":
        """
        U1 and u2 are the parameters of a segment on the curve.

        Parameters
        ----------
        Index: int

        Returns
        -------
        U1: float
        U2: float

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_Intervals(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_IsDone(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_NbIntervals(self, *args)


    def NbRoots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_NbRoots(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_Root(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_TheQuadCurvExactHInter
    __del__ = lambda self: None
IntCurveSurface_TheQuadCurvExactHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheQuadCurvExactHInter_swigregister
IntCurveSurface_TheQuadCurvExactHInter_swigregister(IntCurveSurface_TheQuadCurvExactHInter)

class IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter(OCC.Core.math.math_FunctionWithDerivative):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Create the function.

        Parameters
        ----------
        Q: IntSurf_Quadric
        C: Adaptor3d_HCurve

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter
    __del__ = lambda self: None
IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_swigregister = _IntCurveSurface.IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_swigregister
IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter_swigregister(IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter)

class IntCurveSurface_HInter(IntCurveSurface_Intersection):
    __swig_setmethods__ = {}
    for _s in [IntCurveSurface_Intersection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurveSurface_HInter, name, value)
    __swig_getmethods__ = {}
    for _s in [IntCurveSurface_Intersection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurveSurface_HInter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _IntCurveSurface.new_IntCurveSurface_HInter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args) -> "void":
        """
        Compute the intersection between the curve and the surface.

        Parameters
        ----------
        Curve: Adaptor3d_HCurve
        Surface: Adaptor3d_HSurface

        Returns
        -------
        None

        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon : <polygon> is given.

        Parameters
        ----------
        Curve: Adaptor3d_HCurve
        Polygon: IntCurveSurface_ThePolygonOfHInter
        Surface: Adaptor3d_HSurface

        Returns
        -------
        None

        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon : <polygon> is given. the surface is also sampled and <polyhedron> is given.

        Parameters
        ----------
        Curve: Adaptor3d_HCurve
        ThePolygon: IntCurveSurface_ThePolygonOfHInter
        Surface: Adaptor3d_HSurface
        Polyhedron: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon : <polygon> is given. the surface is also sampled and <polyhedron> is given.

        Parameters
        ----------
        Curve: Adaptor3d_HCurve
        ThePolygon: IntCurveSurface_ThePolygonOfHInter
        Surface: Adaptor3d_HSurface
        Polyhedron: IntCurveSurface_ThePolyhedronOfHInter
        BndBSB: Bnd_BoundSortBox

        Returns
        -------
        None

        Compute the intersection between the curve and the surface. the surface is already sampled and its polyhedron : <polyhedron> is given.

        Parameters
        ----------
        Curve: Adaptor3d_HCurve
        Surface: Adaptor3d_HSurface
        Polyhedron: IntCurveSurface_ThePolyhedronOfHInter

        Returns
        -------
        None

        """
        return _IntCurveSurface.IntCurveSurface_HInter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurveSurface.delete_IntCurveSurface_HInter
    __del__ = lambda self: None
IntCurveSurface_HInter_swigregister = _IntCurveSurface.IntCurveSurface_HInter_swigregister
IntCurveSurface_HInter_swigregister(IntCurveSurface_HInter)


@classnotwrapped
class IntCurveSurface_ThePolyhedronOfHInter:
	pass




# This file is compatible with both classic and new-style classes.


