# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
TopAbs module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_topabs.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TopAbs
else:
    import _TopAbs

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopAbs.delete_SwigPyIterator

    def value(self):
        return _TopAbs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopAbs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopAbs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopAbs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopAbs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopAbs.SwigPyIterator_copy(self)

    def next(self):
        return _TopAbs.SwigPyIterator_next(self)

    def __next__(self):
        return _TopAbs.SwigPyIterator___next__(self)

    def previous(self):
        return _TopAbs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopAbs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopAbs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopAbs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopAbs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopAbs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopAbs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopAbs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TopAbs:
_TopAbs.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _TopAbs.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _TopAbs.ios_base_erase_event
    imbue_event = _TopAbs.ios_base_imbue_event
    copyfmt_event = _TopAbs.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _TopAbs.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _TopAbs.ios_base_flags(self, *args)

    def setf(self, *args):
        return _TopAbs.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _TopAbs.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _TopAbs.ios_base_precision(self, *args)

    def width(self, *args):
        return _TopAbs.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _TopAbs.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _TopAbs.ios_base_imbue(self, __loc)

    def getloc(self):
        return _TopAbs.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _TopAbs.ios_base_xalloc()

    def iword(self, __ix):
        return _TopAbs.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _TopAbs.ios_base_pword(self, __ix)
    __swig_destroy__ = _TopAbs.delete_ios_base

# Register ios_base in _TopAbs:
_TopAbs.ios_base_swigregister(ios_base)
cvar = _TopAbs.cvar
ios_base.boolalpha = _TopAbs.cvar.ios_base_boolalpha
ios_base.dec = _TopAbs.cvar.ios_base_dec
ios_base.fixed = _TopAbs.cvar.ios_base_fixed
ios_base.hex = _TopAbs.cvar.ios_base_hex
ios_base.internal = _TopAbs.cvar.ios_base_internal
ios_base.left = _TopAbs.cvar.ios_base_left
ios_base.oct = _TopAbs.cvar.ios_base_oct
ios_base.right = _TopAbs.cvar.ios_base_right
ios_base.scientific = _TopAbs.cvar.ios_base_scientific
ios_base.showbase = _TopAbs.cvar.ios_base_showbase
ios_base.showpoint = _TopAbs.cvar.ios_base_showpoint
ios_base.showpos = _TopAbs.cvar.ios_base_showpos
ios_base.skipws = _TopAbs.cvar.ios_base_skipws
ios_base.unitbuf = _TopAbs.cvar.ios_base_unitbuf
ios_base.uppercase = _TopAbs.cvar.ios_base_uppercase
ios_base.adjustfield = _TopAbs.cvar.ios_base_adjustfield
ios_base.basefield = _TopAbs.cvar.ios_base_basefield
ios_base.floatfield = _TopAbs.cvar.ios_base_floatfield
ios_base.badbit = _TopAbs.cvar.ios_base_badbit
ios_base.eofbit = _TopAbs.cvar.ios_base_eofbit
ios_base.failbit = _TopAbs.cvar.ios_base_failbit
ios_base.goodbit = _TopAbs.cvar.ios_base_goodbit
ios_base.app = _TopAbs.cvar.ios_base_app
ios_base.ate = _TopAbs.cvar.ios_base_ate
ios_base.binary = _TopAbs.cvar.ios_base_binary
ios_base.ios_base_in = _TopAbs.cvar.ios_base_ios_base_in
ios_base.out = _TopAbs.cvar.ios_base_out
ios_base.trunc = _TopAbs.cvar.ios_base_trunc
ios_base.beg = _TopAbs.cvar.ios_base_beg
ios_base.cur = _TopAbs.cvar.ios_base_cur
ios_base.end = _TopAbs.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _TopAbs.ios_rdstate(self)

    def clear(self, *args):
        return _TopAbs.ios_clear(self, *args)

    def setstate(self, __state):
        return _TopAbs.ios_setstate(self, __state)

    def good(self):
        return _TopAbs.ios_good(self)

    def eof(self):
        return _TopAbs.ios_eof(self)

    def fail(self):
        return _TopAbs.ios_fail(self)

    def bad(self):
        return _TopAbs.ios_bad(self)

    def exceptions(self, *args):
        return _TopAbs.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _TopAbs.ios_swiginit(self, _TopAbs.new_ios(__sb))
    __swig_destroy__ = _TopAbs.delete_ios

    def tie(self, *args):
        return _TopAbs.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _TopAbs.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _TopAbs.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _TopAbs.ios_fill(self, *args)

    def imbue(self, __loc):
        return _TopAbs.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _TopAbs.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _TopAbs.ios_widen(self, __c)

# Register ios in _TopAbs:
_TopAbs.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _TopAbs.ostream_swiginit(self, _TopAbs.new_ostream(__sb))
    __swig_destroy__ = _TopAbs.delete_ostream

    def __lshift__(self, *args):
        return _TopAbs.ostream___lshift__(self, *args)

    def put(self, __c):
        return _TopAbs.ostream_put(self, __c)

    def write(self, __s, __n):
        return _TopAbs.ostream_write(self, __s, __n)

    def flush(self):
        return _TopAbs.ostream_flush(self)

    def tellp(self):
        return _TopAbs.ostream_tellp(self)

    def seekp(self, *args):
        return _TopAbs.ostream_seekp(self, *args)

# Register ostream in _TopAbs:
_TopAbs.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _TopAbs.istream_swiginit(self, _TopAbs.new_istream(__sb))
    __swig_destroy__ = _TopAbs.delete_istream

    def __rshift__(self, *args):
        return _TopAbs.istream___rshift__(self, *args)

    def gcount(self):
        return _TopAbs.istream_gcount(self)

    def get(self, *args):
        return _TopAbs.istream_get(self, *args)

    def getline(self, *args):
        return _TopAbs.istream_getline(self, *args)

    def ignore(self, *args):
        return _TopAbs.istream_ignore(self, *args)

    def peek(self):
        return _TopAbs.istream_peek(self)

    def read(self, __s, __n):
        return _TopAbs.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _TopAbs.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _TopAbs.istream_putback(self, __c)

    def unget(self):
        return _TopAbs.istream_unget(self)

    def sync(self):
        return _TopAbs.istream_sync(self)

    def tellg(self):
        return _TopAbs.istream_tellg(self)

    def seekg(self, *args):
        return _TopAbs.istream_seekg(self, *args)

# Register istream in _TopAbs:
_TopAbs.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _TopAbs.iostream_swiginit(self, _TopAbs.new_iostream(__sb))
    __swig_destroy__ = _TopAbs.delete_iostream

# Register iostream in _TopAbs:
_TopAbs.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _TopAbs.endl_cb_ptr
endl = _TopAbs.endl
ends_cb_ptr = _TopAbs.ends_cb_ptr
ends = _TopAbs.ends
flush_cb_ptr = _TopAbs.flush_cb_ptr
flush = _TopAbs.flush
import OCC.Core.Standard
import OCC.Core.NCollection

from enum import IntEnum
from OCC.Core.Exception import *

TopAbs_FORWARD = _TopAbs.TopAbs_FORWARD
TopAbs_REVERSED = _TopAbs.TopAbs_REVERSED
TopAbs_INTERNAL = _TopAbs.TopAbs_INTERNAL
TopAbs_EXTERNAL = _TopAbs.TopAbs_EXTERNAL
TopAbs_COMPOUND = _TopAbs.TopAbs_COMPOUND
TopAbs_COMPSOLID = _TopAbs.TopAbs_COMPSOLID
TopAbs_SOLID = _TopAbs.TopAbs_SOLID
TopAbs_SHELL = _TopAbs.TopAbs_SHELL
TopAbs_FACE = _TopAbs.TopAbs_FACE
TopAbs_WIRE = _TopAbs.TopAbs_WIRE
TopAbs_EDGE = _TopAbs.TopAbs_EDGE
TopAbs_VERTEX = _TopAbs.TopAbs_VERTEX
TopAbs_SHAPE = _TopAbs.TopAbs_SHAPE
TopAbs_IN = _TopAbs.TopAbs_IN
TopAbs_OUT = _TopAbs.TopAbs_OUT
TopAbs_ON = _TopAbs.TopAbs_ON
TopAbs_UNKNOWN = _TopAbs.TopAbs_UNKNOWN


class TopAbs_Orientation(IntEnum):
	TopAbs_FORWARD = 0
	TopAbs_REVERSED = 1
	TopAbs_INTERNAL = 2
	TopAbs_EXTERNAL = 3
TopAbs_FORWARD = TopAbs_Orientation.TopAbs_FORWARD
TopAbs_REVERSED = TopAbs_Orientation.TopAbs_REVERSED
TopAbs_INTERNAL = TopAbs_Orientation.TopAbs_INTERNAL
TopAbs_EXTERNAL = TopAbs_Orientation.TopAbs_EXTERNAL

class TopAbs_ShapeEnum(IntEnum):
	TopAbs_COMPOUND = 0
	TopAbs_COMPSOLID = 1
	TopAbs_SOLID = 2
	TopAbs_SHELL = 3
	TopAbs_FACE = 4
	TopAbs_WIRE = 5
	TopAbs_EDGE = 6
	TopAbs_VERTEX = 7
	TopAbs_SHAPE = 8
TopAbs_COMPOUND = TopAbs_ShapeEnum.TopAbs_COMPOUND
TopAbs_COMPSOLID = TopAbs_ShapeEnum.TopAbs_COMPSOLID
TopAbs_SOLID = TopAbs_ShapeEnum.TopAbs_SOLID
TopAbs_SHELL = TopAbs_ShapeEnum.TopAbs_SHELL
TopAbs_FACE = TopAbs_ShapeEnum.TopAbs_FACE
TopAbs_WIRE = TopAbs_ShapeEnum.TopAbs_WIRE
TopAbs_EDGE = TopAbs_ShapeEnum.TopAbs_EDGE
TopAbs_VERTEX = TopAbs_ShapeEnum.TopAbs_VERTEX
TopAbs_SHAPE = TopAbs_ShapeEnum.TopAbs_SHAPE

class TopAbs_State(IntEnum):
	TopAbs_IN = 0
	TopAbs_OUT = 1
	TopAbs_ON = 2
	TopAbs_UNKNOWN = 3
TopAbs_IN = TopAbs_State.TopAbs_IN
TopAbs_OUT = TopAbs_State.TopAbs_OUT
TopAbs_ON = TopAbs_State.TopAbs_ON
TopAbs_UNKNOWN = TopAbs_State.TopAbs_UNKNOWN

class topabs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Complement(*args):
        r"""

        Parameters
        ----------
        Or: TopAbs_Orientation

        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        Reverses the interior/exterior status of each side of the object. so, to take the complement of an object means to reverse the interior/exterior status of its boundary, i.e. inside becomes outside. the method returns the complementary orientation, following the rules in the table below: forward reversed reversed forward internal external external internal //! complement complements the material side. inside becomes outside.

        """
        return _TopAbs.topabs_Complement(*args)

    @staticmethod
    def Compose(*args):
        r"""

        Parameters
        ----------
        Or1: TopAbs_Orientation
        Or2: TopAbs_Orientation

        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        Compose the orientation <or1> and <or2>. this composition is not symmetric (if you switch <or1> and <or2> the result is different). it assumes that <or1> is the orientation of a shape s1 containing a shape s2 of orientation or2. the result is the cumulated orientation of s2 in s1. the composition law is: //! \ or2 forward reversed internal external or1 ------------------------------------- forward | forward reversed internal external | reversed | reversed forward internal external | internal | internal internal internal internal | external | external external external external note: the top corner in the table is the most important for the purposes of open cascade topology and shape sharing.

        """
        return _TopAbs.topabs_Compose(*args)

    @staticmethod
    def Print(*args):
        r"""

        Parameters
        ----------
        theShapeType: TopAbs_ShapeEnum

        Return
        -------
        theStream: Standard_OStream

        Description
        -----------
        Prints the name of shape type as a string on the stream.

        Parameters
        ----------
        theOrientation: TopAbs_Orientation

        Return
        -------
        theStream: Standard_OStream

        Description
        -----------
        Prints the name of the orientation as a string on the stream.

        Parameters
        ----------
        St: TopAbs_State

        Return
        -------
        S: Standard_OStream

        Description
        -----------
        Prints the name of the state <st> as a string on the stream <s> and returns <s>.

        """
        return _TopAbs.topabs_Print(*args)

    @staticmethod
    def Reverse(*args):
        r"""

        Parameters
        ----------
        Or: TopAbs_Orientation

        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        Xchanges the interior/exterior status of the two sides. this is what happens when the sense of direction is reversed. the following rules apply: //! forward reversed reversed forward internal internal external external //! reverse exchange the material sides.

        """
        return _TopAbs.topabs_Reverse(*args)

    @staticmethod
    def ShapeOrientationFromString(*args):
        r"""

        Parameters
        ----------
        theOrientationString: str

        Return
        -------
        TopAbs_Orientation

        Description
        -----------
        Returns the shape orientation from the given string identifier (using case-insensitive comparison). @param theorientationstring string identifier return shape orientation or topabs_forward if string identifier is invalid.

        Parameters
        ----------
        theOrientationString: str

        Return
        -------
        theOrientation: TopAbs_Orientation

        Description
        -----------
        Determines the shape orientation from the given string identifier (using case-insensitive comparison). @param theorientationstring string identifier @param theorientation detected shape orientation return true if string identifier is known.

        """
        return _TopAbs.topabs_ShapeOrientationFromString(*args)

    @staticmethod
    def ShapeOrientationToString(*args):
        r"""

        Parameters
        ----------
        theOrientation: TopAbs_Orientation

        Return
        -------
        str

        Description
        -----------
        Returns the string name for a given shape orientation. @param theorientation shape orientation return string identifier from the list forward, reversed, internal, external.

        """
        return _TopAbs.topabs_ShapeOrientationToString(*args)

    @staticmethod
    def ShapeTypeFromString(*args):
        r"""

        Parameters
        ----------
        theTypeString: str

        Return
        -------
        TopAbs_ShapeEnum

        Description
        -----------
        Returns the shape type from the given string identifier (using case-insensitive comparison). @param thetypestring string identifier return shape type or topabs_shape if string identifier is invalid.

        Parameters
        ----------
        theTypeString: str

        Return
        -------
        theType: TopAbs_ShapeEnum

        Description
        -----------
        Determines the shape type from the given string identifier (using case-insensitive comparison). @param thetypestring string identifier @param thetype detected shape type return true if string identifier is known.

        """
        return _TopAbs.topabs_ShapeTypeFromString(*args)

    @staticmethod
    def ShapeTypeToString(*args):
        r"""

        Parameters
        ----------
        theType: TopAbs_ShapeEnum

        Return
        -------
        str

        Description
        -----------
        Returns the string name for a given shape type. @param thetype shape type return string identifier from the list compound, compsolid, solid, shell, face, wire, edge, vertex, shape.

        """
        return _TopAbs.topabs_ShapeTypeToString(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _TopAbs.topabs_swiginit(self, _TopAbs.new_topabs())
    __swig_destroy__ = _TopAbs.delete_topabs

# Register topabs in _TopAbs:
_TopAbs.topabs_swigregister(topabs)



@deprecated
def topabs_Complement(*args):
	return topabs.Complement(*args)

@deprecated
def topabs_Compose(*args):
	return topabs.Compose(*args)

@deprecated
def topabs_Print(*args):
	return topabs.Print(*args)

@deprecated
def topabs_Print(*args):
	return topabs.Print(*args)

@deprecated
def topabs_Print(*args):
	return topabs.Print(*args)

@deprecated
def topabs_Reverse(*args):
	return topabs.Reverse(*args)

@deprecated
def topabs_ShapeOrientationFromString(*args):
	return topabs.ShapeOrientationFromString(*args)

@deprecated
def topabs_ShapeOrientationFromString(*args):
	return topabs.ShapeOrientationFromString(*args)

@deprecated
def topabs_ShapeOrientationToString(*args):
	return topabs.ShapeOrientationToString(*args)

@deprecated
def topabs_ShapeTypeFromString(*args):
	return topabs.ShapeTypeFromString(*args)

@deprecated
def topabs_ShapeTypeFromString(*args):
	return topabs.ShapeTypeFromString(*args)

@deprecated
def topabs_ShapeTypeToString(*args):
	return topabs.ShapeTypeToString(*args)



