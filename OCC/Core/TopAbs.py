# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopAbs module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topabs.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopAbs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopAbs')
    _TopAbs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopAbs', [dirname(__file__)])
        except ImportError:
            import _TopAbs
            return _TopAbs
        try:
            _mod = imp.load_module('_TopAbs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopAbs = swig_import_helper()
    del swig_import_helper
else:
    import _TopAbs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopAbs.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TopAbs.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopAbs.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopAbs.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TopAbs.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TopAbs.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TopAbs.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TopAbs.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TopAbs.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TopAbs.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopAbs.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TopAbs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TopAbs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopAbs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopAbs.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopAbs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TopAbs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopAbs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopAbs.process_exception(error, method_name, class_name)
process_exception = _TopAbs.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection

from enum import IntEnum
from OCC.Core.Exception import *

TopAbs_FORWARD = _TopAbs.TopAbs_FORWARD
TopAbs_REVERSED = _TopAbs.TopAbs_REVERSED
TopAbs_INTERNAL = _TopAbs.TopAbs_INTERNAL
TopAbs_EXTERNAL = _TopAbs.TopAbs_EXTERNAL
TopAbs_COMPOUND = _TopAbs.TopAbs_COMPOUND
TopAbs_COMPSOLID = _TopAbs.TopAbs_COMPSOLID
TopAbs_SOLID = _TopAbs.TopAbs_SOLID
TopAbs_SHELL = _TopAbs.TopAbs_SHELL
TopAbs_FACE = _TopAbs.TopAbs_FACE
TopAbs_WIRE = _TopAbs.TopAbs_WIRE
TopAbs_EDGE = _TopAbs.TopAbs_EDGE
TopAbs_VERTEX = _TopAbs.TopAbs_VERTEX
TopAbs_SHAPE = _TopAbs.TopAbs_SHAPE
TopAbs_IN = _TopAbs.TopAbs_IN
TopAbs_OUT = _TopAbs.TopAbs_OUT
TopAbs_ON = _TopAbs.TopAbs_ON
TopAbs_UNKNOWN = _TopAbs.TopAbs_UNKNOWN


class TopAbs_Orientation(IntEnum):
	TopAbs_FORWARD = 0
	TopAbs_REVERSED = 1
	TopAbs_INTERNAL = 2
	TopAbs_EXTERNAL = 3
TopAbs_FORWARD = TopAbs_Orientation.TopAbs_FORWARD
TopAbs_REVERSED = TopAbs_Orientation.TopAbs_REVERSED
TopAbs_INTERNAL = TopAbs_Orientation.TopAbs_INTERNAL
TopAbs_EXTERNAL = TopAbs_Orientation.TopAbs_EXTERNAL

class TopAbs_ShapeEnum(IntEnum):
	TopAbs_COMPOUND = 0
	TopAbs_COMPSOLID = 1
	TopAbs_SOLID = 2
	TopAbs_SHELL = 3
	TopAbs_FACE = 4
	TopAbs_WIRE = 5
	TopAbs_EDGE = 6
	TopAbs_VERTEX = 7
	TopAbs_SHAPE = 8
TopAbs_COMPOUND = TopAbs_ShapeEnum.TopAbs_COMPOUND
TopAbs_COMPSOLID = TopAbs_ShapeEnum.TopAbs_COMPSOLID
TopAbs_SOLID = TopAbs_ShapeEnum.TopAbs_SOLID
TopAbs_SHELL = TopAbs_ShapeEnum.TopAbs_SHELL
TopAbs_FACE = TopAbs_ShapeEnum.TopAbs_FACE
TopAbs_WIRE = TopAbs_ShapeEnum.TopAbs_WIRE
TopAbs_EDGE = TopAbs_ShapeEnum.TopAbs_EDGE
TopAbs_VERTEX = TopAbs_ShapeEnum.TopAbs_VERTEX
TopAbs_SHAPE = TopAbs_ShapeEnum.TopAbs_SHAPE

class TopAbs_State(IntEnum):
	TopAbs_IN = 0
	TopAbs_OUT = 1
	TopAbs_ON = 2
	TopAbs_UNKNOWN = 3
TopAbs_IN = TopAbs_State.TopAbs_IN
TopAbs_OUT = TopAbs_State.TopAbs_OUT
TopAbs_ON = TopAbs_State.TopAbs_ON
TopAbs_UNKNOWN = TopAbs_State.TopAbs_UNKNOWN

class topabs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, topabs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, topabs, name)
    __repr__ = _swig_repr

    def Complement(*args) -> "TopAbs_Orientation":
        """
        Reverses the interior/exterior status of each side of the object. so, to take the complement of an object means to reverse the interior/exterior status of its boundary, i.e. inside becomes outside. the method returns the complementary orientation, following the rules in the table below: forward reversed reversed forward internal external external internal //! complement complements the material side. inside becomes outside.

        Parameters
        ----------
        Or: TopAbs_Orientation

        Returns
        -------
        TopAbs_Orientation

        """
        return _TopAbs.topabs_Complement(*args)

    Complement = staticmethod(Complement)

    def Compose(*args) -> "TopAbs_Orientation":
        """
        Compose the orientation <or1> and <or2>. this composition is not symmetric (if you switch <or1> and <or2> the result is different). it assumes that <or1> is the orientation of a shape s1 containing a shape s2 of orientation or2. the result is the cumulated orientation of s2 in s1. the composition law is : //! \ or2 forward reversed internal external or1 ------------------------------------- forward | forward reversed internal external | reversed | reversed forward internal external | internal | internal internal internal internal | external | external external external external note: the top corner in the table is the most important for the purposes of open cascade topology and shape sharing.

        Parameters
        ----------
        Or1: TopAbs_Orientation
        Or2: TopAbs_Orientation

        Returns
        -------
        TopAbs_Orientation

        """
        return _TopAbs.topabs_Compose(*args)

    Compose = staticmethod(Compose)

    def Reverse(*args) -> "TopAbs_Orientation":
        """
        Xchanges the interior/exterior status of the two sides. this is what happens when the sense of direction is reversed. the following rules apply: //! forward reversed reversed forward internal internal external external //! reverse exchange the material sides.

        Parameters
        ----------
        Or: TopAbs_Orientation

        Returns
        -------
        TopAbs_Orientation

        """
        return _TopAbs.topabs_Reverse(*args)

    Reverse = staticmethod(Reverse)

    def ShapeOrientationFromString(*args) -> "TopAbs_Orientation &":
        """
        Returns the shape orientation from the given string identifier (using case-insensitive comparison). @param theorientationstring string identifier returns shape orientation or topabs_forward if string identifier is invalid.

        Parameters
        ----------
        theOrientationString: char *

        Returns
        -------
        TopAbs_Orientation

        Determines the shape orientation from the given string identifier (using case-insensitive comparison). @param theorientationstring string identifier @param theorientation detected shape orientation returns true if string identifier is known.

        Parameters
        ----------
        theOrientationString: char *

        Returns
        -------
        theOrientation: TopAbs_Orientation

        """
        return _TopAbs.topabs_ShapeOrientationFromString(*args)

    ShapeOrientationFromString = staticmethod(ShapeOrientationFromString)

    def ShapeOrientationToString(*args) -> "char const *":
        """
        Returns the string name for a given shape orientation. @param theorientation shape orientation returns string identifier from the list forward, reversed, internal, external.

        Parameters
        ----------
        theOrientation: TopAbs_Orientation

        Returns
        -------
        char *

        """
        return _TopAbs.topabs_ShapeOrientationToString(*args)

    ShapeOrientationToString = staticmethod(ShapeOrientationToString)

    def ShapeTypeFromString(*args) -> "TopAbs_ShapeEnum &":
        """
        Returns the shape type from the given string identifier (using case-insensitive comparison). @param thetypestring string identifier returns shape type or topabs_shape if string identifier is invalid.

        Parameters
        ----------
        theTypeString: char *

        Returns
        -------
        TopAbs_ShapeEnum

        Determines the shape type from the given string identifier (using case-insensitive comparison). @param thetypestring string identifier @param thetype detected shape type returns true if string identifier is known.

        Parameters
        ----------
        theTypeString: char *

        Returns
        -------
        theType: TopAbs_ShapeEnum

        """
        return _TopAbs.topabs_ShapeTypeFromString(*args)

    ShapeTypeFromString = staticmethod(ShapeTypeFromString)

    def ShapeTypeToString(*args) -> "char const *":
        """
        Returns the string name for a given shape type. @param thetype shape type returns string identifier from the list compound, compsolid, solid, shell, face, wire, edge, vertex, shape.

        Parameters
        ----------
        theType: TopAbs_ShapeEnum

        Returns
        -------
        char *

        """
        return _TopAbs.topabs_ShapeTypeToString(*args)

    ShapeTypeToString = staticmethod(ShapeTypeToString)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TopAbs.new_topabs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopAbs.delete_topabs
    __del__ = lambda self: None
topabs_swigregister = _TopAbs.topabs_swigregister
topabs_swigregister(topabs)

def topabs_Complement(*args) -> "TopAbs_Orientation":
    """
    Reverses the interior/exterior status of each side of the object. so, to take the complement of an object means to reverse the interior/exterior status of its boundary, i.e. inside becomes outside. the method returns the complementary orientation, following the rules in the table below: forward reversed reversed forward internal external external internal //! complement complements the material side. inside becomes outside.

    Parameters
    ----------
    Or: TopAbs_Orientation

    Returns
    -------
    TopAbs_Orientation

    """
    return _TopAbs.topabs_Complement(*args)

def topabs_Compose(*args) -> "TopAbs_Orientation":
    """
    Compose the orientation <or1> and <or2>. this composition is not symmetric (if you switch <or1> and <or2> the result is different). it assumes that <or1> is the orientation of a shape s1 containing a shape s2 of orientation or2. the result is the cumulated orientation of s2 in s1. the composition law is : //! \ or2 forward reversed internal external or1 ------------------------------------- forward | forward reversed internal external | reversed | reversed forward internal external | internal | internal internal internal internal | external | external external external external note: the top corner in the table is the most important for the purposes of open cascade topology and shape sharing.

    Parameters
    ----------
    Or1: TopAbs_Orientation
    Or2: TopAbs_Orientation

    Returns
    -------
    TopAbs_Orientation

    """
    return _TopAbs.topabs_Compose(*args)

def topabs_Reverse(*args) -> "TopAbs_Orientation":
    """
    Xchanges the interior/exterior status of the two sides. this is what happens when the sense of direction is reversed. the following rules apply: //! forward reversed reversed forward internal internal external external //! reverse exchange the material sides.

    Parameters
    ----------
    Or: TopAbs_Orientation

    Returns
    -------
    TopAbs_Orientation

    """
    return _TopAbs.topabs_Reverse(*args)

def topabs_ShapeOrientationFromString(*args) -> "TopAbs_Orientation &":
    """
    Returns the shape orientation from the given string identifier (using case-insensitive comparison). @param theorientationstring string identifier returns shape orientation or topabs_forward if string identifier is invalid.

    Parameters
    ----------
    theOrientationString: char *

    Returns
    -------
    TopAbs_Orientation

    Determines the shape orientation from the given string identifier (using case-insensitive comparison). @param theorientationstring string identifier @param theorientation detected shape orientation returns true if string identifier is known.

    Parameters
    ----------
    theOrientationString: char *

    Returns
    -------
    theOrientation: TopAbs_Orientation

    """
    return _TopAbs.topabs_ShapeOrientationFromString(*args)

def topabs_ShapeOrientationToString(*args) -> "char const *":
    """
    Returns the string name for a given shape orientation. @param theorientation shape orientation returns string identifier from the list forward, reversed, internal, external.

    Parameters
    ----------
    theOrientation: TopAbs_Orientation

    Returns
    -------
    char *

    """
    return _TopAbs.topabs_ShapeOrientationToString(*args)

def topabs_ShapeTypeFromString(*args) -> "TopAbs_ShapeEnum &":
    """
    Returns the shape type from the given string identifier (using case-insensitive comparison). @param thetypestring string identifier returns shape type or topabs_shape if string identifier is invalid.

    Parameters
    ----------
    theTypeString: char *

    Returns
    -------
    TopAbs_ShapeEnum

    Determines the shape type from the given string identifier (using case-insensitive comparison). @param thetypestring string identifier @param thetype detected shape type returns true if string identifier is known.

    Parameters
    ----------
    theTypeString: char *

    Returns
    -------
    theType: TopAbs_ShapeEnum

    """
    return _TopAbs.topabs_ShapeTypeFromString(*args)

def topabs_ShapeTypeToString(*args) -> "char const *":
    """
    Returns the string name for a given shape type. @param thetype shape type returns string identifier from the list compound, compsolid, solid, shell, face, wire, edge, vertex, shape.

    Parameters
    ----------
    theType: TopAbs_ShapeEnum

    Returns
    -------
    char *

    """
    return _TopAbs.topabs_ShapeTypeToString(*args)



# This file is compatible with both classic and new-style classes.


