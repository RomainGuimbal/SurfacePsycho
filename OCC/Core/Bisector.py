# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Bisector module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_bisector.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Bisector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Bisector')
    _Bisector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Bisector', [dirname(__file__)])
        except ImportError:
            import _Bisector
            return _Bisector
        try:
            _mod = imp.load_module('_Bisector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Bisector = swig_import_helper()
    del swig_import_helper
else:
    import _Bisector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Bisector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Bisector.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Bisector.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Bisector.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Bisector.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Bisector.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Bisector.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Bisector.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Bisector.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Bisector.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Bisector.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Bisector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Bisector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Bisector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Bisector.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Bisector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Bisector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Bisector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Bisector.process_exception(error, method_name, class_name)
process_exception = _Bisector.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.IntRes2d

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_Bisector_Curve_Create() -> "opencascade::handle< Bisector_Curve >":
    return _Bisector.Handle_Bisector_Curve_Create()
Handle_Bisector_Curve_Create = _Bisector.Handle_Bisector_Curve_Create

def Handle_Bisector_Curve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Bisector_Curve >":
    return _Bisector.Handle_Bisector_Curve_DownCast(t)
Handle_Bisector_Curve_DownCast = _Bisector.Handle_Bisector_Curve_DownCast

def Handle_Bisector_Curve_IsNull(t: 'opencascade::handle< Bisector_Curve > const &') -> "bool":
    return _Bisector.Handle_Bisector_Curve_IsNull(t)
Handle_Bisector_Curve_IsNull = _Bisector.Handle_Bisector_Curve_IsNull

def Handle_Bisector_BisecAna_Create() -> "opencascade::handle< Bisector_BisecAna >":
    return _Bisector.Handle_Bisector_BisecAna_Create()
Handle_Bisector_BisecAna_Create = _Bisector.Handle_Bisector_BisecAna_Create

def Handle_Bisector_BisecAna_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Bisector_BisecAna >":
    return _Bisector.Handle_Bisector_BisecAna_DownCast(t)
Handle_Bisector_BisecAna_DownCast = _Bisector.Handle_Bisector_BisecAna_DownCast

def Handle_Bisector_BisecAna_IsNull(t: 'opencascade::handle< Bisector_BisecAna > const &') -> "bool":
    return _Bisector.Handle_Bisector_BisecAna_IsNull(t)
Handle_Bisector_BisecAna_IsNull = _Bisector.Handle_Bisector_BisecAna_IsNull

def Handle_Bisector_BisecCC_Create() -> "opencascade::handle< Bisector_BisecCC >":
    return _Bisector.Handle_Bisector_BisecCC_Create()
Handle_Bisector_BisecCC_Create = _Bisector.Handle_Bisector_BisecCC_Create

def Handle_Bisector_BisecCC_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Bisector_BisecCC >":
    return _Bisector.Handle_Bisector_BisecCC_DownCast(t)
Handle_Bisector_BisecCC_DownCast = _Bisector.Handle_Bisector_BisecCC_DownCast

def Handle_Bisector_BisecCC_IsNull(t: 'opencascade::handle< Bisector_BisecCC > const &') -> "bool":
    return _Bisector.Handle_Bisector_BisecCC_IsNull(t)
Handle_Bisector_BisecCC_IsNull = _Bisector.Handle_Bisector_BisecCC_IsNull

def Handle_Bisector_BisecPC_Create() -> "opencascade::handle< Bisector_BisecPC >":
    return _Bisector.Handle_Bisector_BisecPC_Create()
Handle_Bisector_BisecPC_Create = _Bisector.Handle_Bisector_BisecPC_Create

def Handle_Bisector_BisecPC_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Bisector_BisecPC >":
    return _Bisector.Handle_Bisector_BisecPC_DownCast(t)
Handle_Bisector_BisecPC_DownCast = _Bisector.Handle_Bisector_BisecPC_DownCast

def Handle_Bisector_BisecPC_IsNull(t: 'opencascade::handle< Bisector_BisecPC > const &') -> "bool":
    return _Bisector.Handle_Bisector_BisecPC_IsNull(t)
Handle_Bisector_BisecPC_IsNull = _Bisector.Handle_Bisector_BisecPC_IsNull
class bisector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bisector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bisector, name)
    __repr__ = _swig_repr

    def IsConvex(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Cu: Geom2d_Curve
        Sign: float

        Returns
        -------
        bool

        """
        return _Bisector.bisector_IsConvex(*args)

    IsConvex = staticmethod(IsConvex)

    __repr__ = _dumps_object


    def __init__(self):
        this = _Bisector.new_bisector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Bisector.delete_bisector
    __del__ = lambda self: None
bisector_swigregister = _Bisector.bisector_swigregister
bisector_swigregister(bisector)

def bisector_IsConvex(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    Cu: Geom2d_Curve
    Sign: float

    Returns
    -------
    bool

    """
    return _Bisector.bisector_IsConvex(*args)

class Bisector_Bisec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_Bisec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_Bisec, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_Bisec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeValue(self, *args) -> "opencascade::handle< Geom2d_TrimmedCurve > const &":
        """
        Returns the curve of <self>.

        Returns
        -------
        opencascade::handle<Geom2d_TrimmedCurve>

        """
        return _Bisector.Bisector_Bisec_ChangeValue(self, *args)


    def Perform(self, *args) -> "void":
        """
        Performs the bisecting line between the curves <cu1> and <cu2>. <oncurve> is true if the point <p> is common to <cu1> and <cu2>.

        Parameters
        ----------
        Cu1: Geom2d_Curve
        Cu2: Geom2d_Curve
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        Sense: float
        ajointype: GeomAbs_JoinType
        Tolerance: float
        oncurve: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        Performs the bisecting line between the curve <cu1> and the point <pnt>. <oncurve> is true if the point <p> is the point <pnt>.

        Parameters
        ----------
        Cu: Geom2d_Curve
        Pnt: Geom2d_Point
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        Sense: float
        Tolerance: float
        oncurve: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        Performs the bisecting line between the curve <cu> and the point <pnt>. <oncurve> is true if the point <p> is the point <pnt>.

        Parameters
        ----------
        Pnt: Geom2d_Point
        Cu: Geom2d_Curve
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        Sense: float
        Tolerance: float
        oncurve: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        Performs the bisecting line between the two points <pnt1> and <pnt2>.

        Parameters
        ----------
        Pnt1: Geom2d_Point
        Pnt2: Geom2d_Point
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        Sense: float
        Tolerance: float,optional
        	default value is 0.0
        oncurve: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _Bisector.Bisector_Bisec_Perform(self, *args)


    def Value(self, *args) -> "opencascade::handle< Geom2d_TrimmedCurve > const &":
        """
        Returns the curve of <self>.

        Returns
        -------
        opencascade::handle<Geom2d_TrimmedCurve>

        """
        return _Bisector.Bisector_Bisec_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_Bisec
    __del__ = lambda self: None
Bisector_Bisec_swigregister = _Bisector.Bisector_Bisec_swigregister
Bisector_Bisec_swigregister(Bisector_Bisec)

class Bisector_Curve(OCC.Core.Geom2d.Geom2d_Curve):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Geom2d.Geom2d_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Geom2d.Geom2d_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_Curve, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IntervalFirst(self, *args) -> "Standard_Real":
        """
        Returns the first parameter of the current interval.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _Bisector.Bisector_Curve_IntervalFirst(self, *args)


    def IntervalLast(self, *args) -> "Standard_Real":
        """
        Returns the last parameter of the current interval.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _Bisector.Bisector_Curve_IntervalLast(self, *args)


    def IsExtendAtEnd(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Bisector.Bisector_Curve_IsExtendAtEnd(self, *args)


    def IsExtendAtStart(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Bisector.Bisector_Curve_IsExtendAtStart(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        If necessary, breaks the curve in intervals of continuity <c1>. and returns the number of intervals.

        Returns
        -------
        int

        """
        return _Bisector.Bisector_Curve_NbIntervals(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        float

        """
        return _Bisector.Bisector_Curve_Parameter(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Bisector_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_Curve
    __del__ = lambda self: None
Bisector_Curve_swigregister = _Bisector.Bisector_Curve_swigregister
Bisector_Curve_swigregister(Bisector_Curve)

class Bisector_FunctionH(OCC.Core.math.math_FunctionWithDerivative):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_FunctionH, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_FunctionH, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C2: Geom2d_Curve
        P1: gp_Pnt2d
        T1: gp_Vec2d

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_FunctionH(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_FunctionH
    __del__ = lambda self: None
Bisector_FunctionH_swigregister = _Bisector.Bisector_FunctionH_swigregister
Bisector_FunctionH_swigregister(Bisector_FunctionH)

class Bisector_FunctionInter(OCC.Core.math.math_FunctionWithDerivative):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_FunctionInter, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_FunctionInter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve
        Bis1: Bisector_Curve
        Bis2: Bisector_Curve

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_FunctionInter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve
        Bis1: Bisector_Curve
        Bis2: Bisector_Curve

        Returns
        -------
        None

        """
        return _Bisector.Bisector_FunctionInter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_FunctionInter
    __del__ = lambda self: None
Bisector_FunctionInter_swigregister = _Bisector.Bisector_FunctionInter_swigregister
Bisector_FunctionInter_swigregister(Bisector_FunctionInter)

class Bisector_Inter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IntRes2d.IntRes2d_Intersection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_Inter, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IntRes2d.IntRes2d_Intersection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_Inter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Intersection between 2 curves. c1 separates the element a and b. c2 separates the elements c et d. if b an c have the same geometry. <comunelement> has to be true. it permits an optimiztion of the computation.

        Parameters
        ----------
        C1: Bisector_Bisec
        D1: IntRes2d_Domain
        C2: Bisector_Bisec
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float
        ComunElement: bool

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_Inter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args) -> "void":
        """
        Intersection between 2 curves. c1 separates the element a and b. c2 separates the elements c et d. if b an c have the same geometry. <comunelement> has to be true. it permits an optimiztion of the computation.

        Parameters
        ----------
        C1: Bisector_Bisec
        D1: IntRes2d_Domain
        C2: Bisector_Bisec
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float
        ComunElement: bool

        Returns
        -------
        None

        """
        return _Bisector.Bisector_Inter_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_Inter
    __del__ = lambda self: None
Bisector_Inter_swigregister = _Bisector.Bisector_Inter_swigregister
Bisector_Inter_swigregister(Bisector_Inter)

class Bisector_PointOnBis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_PointOnBis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_PointOnBis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Param1: float
        Param2: float
        ParamBis: float
        Distance: float
        Point: gp_Pnt2d

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_PointOnBis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Distance(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Distance: float

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        float

        """
        return _Bisector.Bisector_PointOnBis_Distance(self, *args)


    def Dump(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Bisector.Bisector_PointOnBis_Dump(self, *args)


    def IsInfinite(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Infinite: bool

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        bool

        """
        return _Bisector.Bisector_PointOnBis_IsInfinite(self, *args)


    def ParamOnBis(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        float

        """
        return _Bisector.Bisector_PointOnBis_ParamOnBis(self, *args)


    def ParamOnC1(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        float

        """
        return _Bisector.Bisector_PointOnBis_ParamOnC1(self, *args)


    def ParamOnC2(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        float

        """
        return _Bisector.Bisector_PointOnBis_ParamOnC2(self, *args)


    def Point(self, *args) -> "gp_Pnt2d":
        """
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        gp_Pnt2d

        """
        return _Bisector.Bisector_PointOnBis_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_PointOnBis
    __del__ = lambda self: None
Bisector_PointOnBis_swigregister = _Bisector.Bisector_PointOnBis_swigregister
Bisector_PointOnBis_swigregister(Bisector_PointOnBis)

class Bisector_PolyBis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_PolyBis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_PolyBis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_PolyBis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Append(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Point: Bisector_PointOnBis

        Returns
        -------
        None

        """
        return _Bisector.Bisector_PolyBis_Append(self, *args)


    def First(self, *args) -> "Bisector_PointOnBis const &":
        """
        No available documentation.

        Returns
        -------
        Bisector_PointOnBis

        """
        return _Bisector.Bisector_PolyBis_First(self, *args)


    def Interval(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        U: float

        Returns
        -------
        int

        """
        return _Bisector.Bisector_PolyBis_Interval(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Bisector.Bisector_PolyBis_IsEmpty(self, *args)


    def Last(self, *args) -> "Bisector_PointOnBis const &":
        """
        No available documentation.

        Returns
        -------
        Bisector_PointOnBis

        """
        return _Bisector.Bisector_PolyBis_Last(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Bisector.Bisector_PolyBis_Length(self, *args)


    def Transform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Bisector.Bisector_PolyBis_Transform(self, *args)


    def Value(self, *args) -> "Bisector_PointOnBis const &":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Bisector_PointOnBis

        """
        return _Bisector.Bisector_PolyBis_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_PolyBis
    __del__ = lambda self: None
Bisector_PolyBis_swigregister = _Bisector.Bisector_PolyBis_swigregister
Bisector_PolyBis_swigregister(Bisector_PolyBis)

class Bisector_BisecAna(Bisector_Curve):
    __swig_setmethods__ = {}
    for _s in [Bisector_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_BisecAna, name, value)
    __swig_getmethods__ = {}
    for _s in [Bisector_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_BisecAna, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_BisecAna(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dump(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Deep: int,optional
        	default value is 0
        Offset: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _Bisector.Bisector_BisecAna_Dump(self, *args)


    def Geom2dCurve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _Bisector.Bisector_BisecAna_Geom2dCurve(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        bisector: Geom2d_TrimmedCurve

        Returns
        -------
        None

        """
        return _Bisector.Bisector_BisecAna_Init(self, *args)


    def ParameterOfEndPoint(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Bisector.Bisector_BisecAna_ParameterOfEndPoint(self, *args)


    def ParameterOfStartPoint(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Bisector.Bisector_BisecAna_ParameterOfStartPoint(self, *args)


    def Perform(self, *args) -> "void":
        """
        Performs the bisecting line between the curves <cu1> and <cu2>. <oncurve> is true if the point <p> is common to <cu1> and <cu2>.

        Parameters
        ----------
        Cu1: Geom2d_Curve
        Cu2: Geom2d_Curve
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        Sense: float
        jointype: GeomAbs_JoinType
        Tolerance: float
        oncurve: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        Performs the bisecting line between the curve <cu1> and the point <pnt>. <oncurve> is true if the point <p> is the point <pnt>.

        Parameters
        ----------
        Cu: Geom2d_Curve
        Pnt: Geom2d_Point
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        Sense: float
        Tolerance: float
        oncurve: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        Performs the bisecting line between the curve <cu> and the point <pnt>. <oncurve> is true if the point <p> is the point <pnt>.

        Parameters
        ----------
        Pnt: Geom2d_Point
        Cu: Geom2d_Curve
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        Sense: float
        Tolerance: float
        oncurve: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        Performs the bisecting line between the two points <pnt1> and <pnt2>.

        Parameters
        ----------
        Pnt1: Geom2d_Point
        Pnt2: Geom2d_Point
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        Sense: float
        Tolerance: float,optional
        	default value is 0.0
        oncurve: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _Bisector.Bisector_BisecAna_Perform(self, *args)


    def SetTrim(self, *args) -> "void":
        """
        Trim <self> by a domain defined by the curve <cu>. this domain is the set of the points which are nearest from <cu> than the extremitis of <cu>.

        Parameters
        ----------
        Cu: Geom2d_Curve

        Returns
        -------
        None

        Trim <self> by a domain defined by uf and ul.

        Parameters
        ----------
        uf: float
        ul: float

        Returns
        -------
        None

        """
        return _Bisector.Bisector_BisecAna_SetTrim(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Bisector_BisecAna_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_BisecAna
    __del__ = lambda self: None
Bisector_BisecAna_swigregister = _Bisector.Bisector_BisecAna_swigregister
Bisector_BisecAna_swigregister(Bisector_BisecAna)

class Bisector_BisecCC(Bisector_Curve):
    __swig_setmethods__ = {}
    for _s in [Bisector_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_BisecCC, name, value)
    __swig_getmethods__ = {}
    for _s in [Bisector_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_BisecCC, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Constructs the bisector between the curves <cu1> and <cu2>. //! <side1> (resp <side2>) = 1 if the bisector curve is on the left of <cu1> (resp <cu2>) else <side1> (resp <side2>) = -1. //! the bisector is trimmed by the point <origin>. <distmax> is used to trim the bisector.the distance between the points of the bisector and <cu> is smaller than <distmax>.

        Parameters
        ----------
        Cu1: Geom2d_Curve
        Cu2: Geom2d_Curve
        Side1: float
        Side2: float
        Origin: gp_Pnt2d
        DistMax: float,optional
        	default value is 500

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_BisecCC(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeGuide(self, *args) -> "opencascade::handle< Bisector_BisecCC >":
        """
        The parameter on <self> is linked to the parameter on the first curve. this method creates the same bisector where the curves are inversed.

        Returns
        -------
        opencascade::handle<Bisector_BisecCC>

        """
        return _Bisector.Bisector_BisecCC_ChangeGuide(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        IndCurve: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _Bisector.Bisector_BisecCC_Curve(self, *args)


    def Dump(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Deep: int,optional
        	default value is 0
        Offset: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _Bisector.Bisector_BisecCC_Dump(self, *args)


    def IntervalContinuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Bisector.Bisector_BisecCC_IntervalContinuity(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Bisector.Bisector_BisecCC_IsEmpty(self, *args)


    def LinkBisCurve(self, *args) -> "Standard_Real":
        """
        Returns the parameter on the curve1 of the projection of the point of parameter u on <self>.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Bisector.Bisector_BisecCC_LinkBisCurve(self, *args)


    def LinkCurveBis(self, *args) -> "Standard_Real":
        """
        Returns the reciproque of linkbiscurve.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Bisector.Bisector_BisecCC_LinkCurveBis(self, *args)


    def Perform(self, *args) -> "void":
        """
        Computes the bisector between the curves <cu1> and <cu2>. //! <side1> (resp <side2>) = 1 if the bisector curve is on the left of <cu1> (resp <cu2>) else <side1> (resp <side2>) = -1. //! the bisector is trimmed by the point <origin>. //! <distmax> is used to trim the bisector.the distance between the points of the bisector and <cu> is smaller than <distmax>.

        Parameters
        ----------
        Cu1: Geom2d_Curve
        Cu2: Geom2d_Curve
        Side1: float
        Side2: float
        Origin: gp_Pnt2d
        DistMax: float,optional
        	default value is 500

        Returns
        -------
        None

        """
        return _Bisector.Bisector_BisecCC_Perform(self, *args)


    def Polygon(self, *args) -> "Bisector_PolyBis const &":
        """
        No available documentation.

        Returns
        -------
        Bisector_PolyBis

        """
        return _Bisector.Bisector_BisecCC_Polygon(self, *args)


    def ValueAndDist(self, *args) -> "gp_Pnt2d":
        """
        Returns the point of parameter u. computes the distance between the current point and the two curves i separate. computes the parameters on each curve corresponding of the projection of the current point.

        Parameters
        ----------
        U: float

        Returns
        -------
        U1: float
        U2: float
        Distance: float

        """
        return _Bisector.Bisector_BisecCC_ValueAndDist(self, *args)


    def ValueByInt(self, *args) -> "gp_Pnt2d":
        """
        Returns the point of parameter u. computes the distance between the current point and the two curves i separate. computes the parameters on each curve corresponding of the projection of the current point.

        Parameters
        ----------
        U: float

        Returns
        -------
        U1: float
        U2: float
        Distance: float

        """
        return _Bisector.Bisector_BisecCC_ValueByInt(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Bisector_BisecCC_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_BisecCC
    __del__ = lambda self: None
Bisector_BisecCC_swigregister = _Bisector.Bisector_BisecCC_swigregister
Bisector_BisecCC_swigregister(Bisector_BisecCC)

class Bisector_BisecPC(Bisector_Curve):
    __swig_setmethods__ = {}
    for _s in [Bisector_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bisector_BisecPC, name, value)
    __swig_getmethods__ = {}
    for _s in [Bisector_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bisector_BisecPC, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Constructs the bisector between the point <p> and the curve <cu>. <side> = 1. if the bisector curve is on the left of <cu> else <side> = -1. <distmax> is used to trim the bisector.the distance between the points of the bisector and <cu> is smaller than <distmax>.

        Parameters
        ----------
        Cu: Geom2d_Curve
        P: gp_Pnt2d
        Side: float
        DistMax: float,optional
        	default value is 500

        Returns
        -------
        None

        Constructs the bisector between the point <p> and the curve <cu> trimmed by <umin> and <umax> <side> = 1. if the bisector curve is on the left of <cu> else <side> = -1. warning: the bisector is supposed all over defined between <umin> and <umax>.

        Parameters
        ----------
        Cu: Geom2d_Curve
        P: gp_Pnt2d
        Side: float
        UMin: float
        UMax: float

        Returns
        -------
        None

        """
        this = _Bisector.new_Bisector_BisecPC(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Distance(self, *args) -> "Standard_Real":
        """
        Returns the distance between the point of parameter u on <self> and my point or my curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Bisector.Bisector_BisecPC_Distance(self, *args)


    def Dump(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Deep: int,optional
        	default value is 0
        Offset: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _Bisector.Bisector_BisecPC_Dump(self, *args)


    def IntervalContinuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Bisector.Bisector_BisecPC_IntervalContinuity(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        Returns <true> if the bisector is empty.

        Returns
        -------
        bool

        """
        return _Bisector.Bisector_BisecPC_IsEmpty(self, *args)


    def LinkBisCurve(self, *args) -> "Standard_Real":
        """
        Returns the parameter on the curve1 of the projection of the point of parameter u on <self>.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Bisector.Bisector_BisecPC_LinkBisCurve(self, *args)


    def LinkCurveBis(self, *args) -> "Standard_Real":
        """
        Returns the reciproque of linkbiscurve.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Bisector.Bisector_BisecPC_LinkCurveBis(self, *args)


    def Perform(self, *args) -> "void":
        """
        Construct the bisector between the point <p> and the curve <cu>. <side> = 1. if the bisector curve is on the left of <cu> else <side> = -1. <distmax> is used to trim the bisector.the distance between the points of the bisector and <cu> is smaller than <distmax>.

        Parameters
        ----------
        Cu: Geom2d_Curve
        P: gp_Pnt2d
        Side: float
        DistMax: float,optional
        	default value is 500

        Returns
        -------
        None

        """
        return _Bisector.Bisector_BisecPC_Perform(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Bisector_BisecPC_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Bisector.delete_Bisector_BisecPC
    __del__ = lambda self: None
Bisector_BisecPC_swigregister = _Bisector.Bisector_BisecPC_swigregister
Bisector_BisecPC_swigregister(Bisector_BisecPC)



# This file is compatible with both classic and new-style classes.


