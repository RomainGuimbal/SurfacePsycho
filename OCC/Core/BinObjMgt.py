# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinObjMgt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_binobjmgt.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinObjMgt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinObjMgt')
    _BinObjMgt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinObjMgt', [dirname(__file__)])
        except ImportError:
            import _BinObjMgt
            return _BinObjMgt
        try:
            _mod = imp.load_module('_BinObjMgt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinObjMgt = swig_import_helper()
    del swig_import_helper
else:
    import _BinObjMgt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinObjMgt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BinObjMgt.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinObjMgt.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinObjMgt.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BinObjMgt.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BinObjMgt.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BinObjMgt.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BinObjMgt.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BinObjMgt.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BinObjMgt.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinObjMgt.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BinObjMgt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BinObjMgt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinObjMgt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinObjMgt.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinObjMgt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BinObjMgt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinObjMgt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinObjMgt.process_exception(error, method_name, class_name)
process_exception = _BinObjMgt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TDF
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *



class BinObjMgt_Persistent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinObjMgt_Persistent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinObjMgt_Persistent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _BinObjMgt.new_BinObjMgt_Persistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Destroy(self, *args) -> "void":
        """
        Frees the allocated memory; this object can be reused after call to init.

        Returns
        -------
        None

        """
        return _BinObjMgt.BinObjMgt_Persistent_Destroy(self, *args)


    def GetAsciiString(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: TCollection_AsciiString

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetAsciiString(self, *args)


    def GetBoolean(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        theValue: bool

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetBoolean(self, *args)


    def GetByte(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_Byte

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetByte(self, *args)


    def GetByteArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        Get c array of unsigned chars, thelength is the number of elements; thearray must point to a space enough to place thelength elements.

        Parameters
        ----------
        theArray: BinObjMgt_PByte
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetByteArray(self, *args)


    def GetCharArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        Get c array of char, thelength is the number of elements; thearray must point to a space enough to place thelength elements.

        Parameters
        ----------
        theArray: BinObjMgt_PChar
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetCharArray(self, *args)


    def GetCharacter(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_Character

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetCharacter(self, *args)


    def GetExtCharArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        Get c array of extcharacter, thelength is the number of elements; thearray must point to a space enough to place thelength elements.

        Parameters
        ----------
        theArray: BinObjMgt_PExtChar
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetExtCharArray(self, *args)


    def GetExtCharacter(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_ExtCharacter

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetExtCharacter(self, *args)


    def GetExtendedString(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: TCollection_ExtendedString

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetExtendedString(self, *args)


    def GetGUID(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_GUID

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetGUID(self, *args)


    def GetIntArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        Get c array of int, thelength is the number of elements; thearray must point to a space enough to place thelength elements.

        Parameters
        ----------
        theArray: BinObjMgt_PInteger
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetIntArray(self, *args)


    def GetInteger(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        theValue: int

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetInteger(self, *args)


    def GetLabel(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------
        theDS: TDF_Data
        theValue: TDF_Label

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetLabel(self, *args)


    def GetReal(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        theValue: float

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetReal(self, *args)


    def GetRealArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        Get c array of double, thelength is the number of elements; thearray must point to a space enough to place thelength elements.

        Parameters
        ----------
        theArray: BinObjMgt_PReal
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetRealArray(self, *args)


    def GetShortReal(self, *args) -> "BinObjMgt_Persistent const &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_ShortReal

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetShortReal(self, *args)


    def GetShortRealArray(self, *args) -> "BinObjMgt_Persistent const &":
        """
        Get c array of float, thelength is the number of elements; thearray must point to a space enough to place thelength elements.

        Parameters
        ----------
        theArray: BinObjMgt_PShortReal
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_GetShortRealArray(self, *args)


    def Id(self, *args) -> "Standard_Integer":
        """
        Returns the id of the object.

        Returns
        -------
        int

        """
        return _BinObjMgt.BinObjMgt_Persistent_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        Initializes me to reuse again.

        Returns
        -------
        None

        """
        return _BinObjMgt.BinObjMgt_Persistent_Init(self, *args)


    def IsError(self, *args) -> "Standard_Boolean":
        """
        Indicates an error after get methods or setposition.

        Returns
        -------
        bool

        """
        return _BinObjMgt.BinObjMgt_Persistent_IsError(self, *args)


    def IsOK(self, *args) -> "Standard_Boolean":
        """
        Indicates a good state after get methods or setposition.

        Returns
        -------
        bool

        """
        return _BinObjMgt.BinObjMgt_Persistent_IsOK(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        Returns the length of data.

        Returns
        -------
        int

        """
        return _BinObjMgt.BinObjMgt_Persistent_Length(self, *args)


    def Position(self, *args) -> "Standard_Integer":
        """
        Tells the current position for get/put.

        Returns
        -------
        int

        """
        return _BinObjMgt.BinObjMgt_Persistent_Position(self, *args)


    def PutAsciiString(self, *args) -> "BinObjMgt_Persistent &":
        """
        Offset in output buffer is word-aligned.

        Parameters
        ----------
        theValue: TCollection_AsciiString

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutAsciiString(self, *args)


    def PutBoolean(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: bool

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutBoolean(self, *args)


    def PutByte(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_Byte

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutByte(self, *args)


    def PutByteArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        Put c array of unsigned chars, thelength is the number of elements.

        Parameters
        ----------
        theArray: BinObjMgt_PByte
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutByteArray(self, *args)


    def PutCString(self, *args) -> "BinObjMgt_Persistent &":
        """
        Offset in output buffer is not aligned.

        Parameters
        ----------
        theValue: char *

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCString(self, *args)


    def PutCharArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        Put c array of char, thelength is the number of elements.

        Parameters
        ----------
        theArray: BinObjMgt_PChar
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCharArray(self, *args)


    def PutCharacter(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_Character

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutCharacter(self, *args)


    def PutExtCharArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        Put c array of extcharacter, thelength is the number of elements.

        Parameters
        ----------
        theArray: BinObjMgt_PExtChar
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtCharArray(self, *args)


    def PutExtCharacter(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_ExtCharacter

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtCharacter(self, *args)


    def PutExtendedString(self, *args) -> "BinObjMgt_Persistent &":
        """
        Offset in output buffer is word-aligned.

        Parameters
        ----------
        theValue: TCollection_ExtendedString

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutExtendedString(self, *args)


    def PutGUID(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_GUID

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutGUID(self, *args)


    def PutIntArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        Put c array of int, thelength is the number of elements.

        Parameters
        ----------
        theArray: BinObjMgt_PInteger
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutIntArray(self, *args)


    def PutInteger(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutInteger(self, *args)


    def PutLabel(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: TDF_Label

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutLabel(self, *args)


    def PutReal(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: float

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutReal(self, *args)


    def PutRealArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        Put c array of double, thelength is the number of elements.

        Parameters
        ----------
        theArray: BinObjMgt_PReal
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutRealArray(self, *args)


    def PutShortReal(self, *args) -> "BinObjMgt_Persistent &":
        """
        No available documentation.

        Parameters
        ----------
        theValue: Standard_ShortReal

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutShortReal(self, *args)


    def PutShortRealArray(self, *args) -> "BinObjMgt_Persistent &":
        """
        Put c array of float, thelength is the number of elements.

        Parameters
        ----------
        theArray: BinObjMgt_PShortReal
        theLength: int

        Returns
        -------
        BinObjMgt_Persistent

        """
        return _BinObjMgt.BinObjMgt_Persistent_PutShortRealArray(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinObjMgt_Persistent self, std::string src)"""
        return _BinObjMgt.BinObjMgt_Persistent_ReadFromString(self, src)


    def SetId(self, *args) -> "void":
        """
        Sets the id of the object.

        Parameters
        ----------
        theId: int

        Returns
        -------
        None

        """
        return _BinObjMgt.BinObjMgt_Persistent_SetId(self, *args)


    def SetPosition(self, *args) -> "Standard_Boolean":
        """
        Sets the current position for get/put. resets an error state depending on the validity of thepos. returns the new state (value of isok()).

        Parameters
        ----------
        thePos: int

        Returns
        -------
        bool

        """
        return _BinObjMgt.BinObjMgt_Persistent_SetPosition(self, *args)


    def SetTypeId(self, *args) -> "void":
        """
        Sets the id of the type of the object.

        Parameters
        ----------
        theId: int

        Returns
        -------
        None

        """
        return _BinObjMgt.BinObjMgt_Persistent_SetTypeId(self, *args)


    def Truncate(self, *args) -> "void":
        """
        Truncates the buffer by current position, i.e. updates mysize.

        Returns
        -------
        None

        """
        return _BinObjMgt.BinObjMgt_Persistent_Truncate(self, *args)


    def TypeId(self, *args) -> "Standard_Integer":
        """
        Returns the id of the type of the object.

        Returns
        -------
        int

        """
        return _BinObjMgt.BinObjMgt_Persistent_TypeId(self, *args)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinObjMgt_Persistent self) -> std::string"""
        return _BinObjMgt.BinObjMgt_Persistent_WriteToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinObjMgt.delete_BinObjMgt_Persistent
    __del__ = lambda self: None
BinObjMgt_Persistent_swigregister = _BinObjMgt.BinObjMgt_Persistent_swigregister
BinObjMgt_Persistent_swigregister(BinObjMgt_Persistent)

class BinObjMgt_RRelocationTable(OCC.Core.TColStd.TColStd_DataMapOfIntegerTransient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.TColStd.TColStd_DataMapOfIntegerTransient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinObjMgt_RRelocationTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.TColStd.TColStd_DataMapOfIntegerTransient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinObjMgt_RRelocationTable, name)
    __repr__ = _swig_repr

    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        doReleaseMemory: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _BinObjMgt.BinObjMgt_RRelocationTable_Clear(self, *args)


    def GetHeaderData(self, *args) -> "opencascade::handle< Storage_HeaderData > const &":
        """
        Returns a handle to the header data of the file that is begin read.

        Returns
        -------
        opencascade::handle<Storage_HeaderData>

        """
        return _BinObjMgt.BinObjMgt_RRelocationTable_GetHeaderData(self, *args)


    def SetHeaderData(self, *args) -> "void":
        """
        Sets the storage header data. //! @param theheaderdata header data of the file that is begin read.

        Parameters
        ----------
        theHeaderData: Storage_HeaderData

        Returns
        -------
        None

        """
        return _BinObjMgt.BinObjMgt_RRelocationTable_SetHeaderData(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _BinObjMgt.new_BinObjMgt_RRelocationTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinObjMgt.delete_BinObjMgt_RRelocationTable
    __del__ = lambda self: None
BinObjMgt_RRelocationTable_swigregister = _BinObjMgt.BinObjMgt_RRelocationTable_swigregister
BinObjMgt_RRelocationTable_swigregister(BinObjMgt_RRelocationTable)


BinObjMgt_SRelocationTable=OCC.Core.TColStd.TColStd_IndexedMapOfTransient

# This file is compatible with both classic and new-style classes.


