# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ChFi2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_chfi2d.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ChFi2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ChFi2d')
    _ChFi2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ChFi2d', [dirname(__file__)])
        except ImportError:
            import _ChFi2d
            return _ChFi2d
        try:
            _mod = imp.load_module('_ChFi2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ChFi2d = swig_import_helper()
    del swig_import_helper
else:
    import _ChFi2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFi2d.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _ChFi2d.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ChFi2d.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ChFi2d.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _ChFi2d.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _ChFi2d.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _ChFi2d.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _ChFi2d.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _ChFi2d.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _ChFi2d.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ChFi2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _ChFi2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _ChFi2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ChFi2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ChFi2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ChFi2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _ChFi2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ChFi2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ChFi2d.process_exception(error, method_name, class_name)
process_exception = _ChFi2d.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TopTools

from enum import IntEnum
from OCC.Core.Exception import *

ChFi2d_NotPlanar = _ChFi2d.ChFi2d_NotPlanar
ChFi2d_NoFace = _ChFi2d.ChFi2d_NoFace
ChFi2d_InitialisationError = _ChFi2d.ChFi2d_InitialisationError
ChFi2d_ParametersError = _ChFi2d.ChFi2d_ParametersError
ChFi2d_Ready = _ChFi2d.ChFi2d_Ready
ChFi2d_IsDone = _ChFi2d.ChFi2d_IsDone
ChFi2d_ComputationError = _ChFi2d.ChFi2d_ComputationError
ChFi2d_ConnexionError = _ChFi2d.ChFi2d_ConnexionError
ChFi2d_TangencyError = _ChFi2d.ChFi2d_TangencyError
ChFi2d_FirstEdgeDegenerated = _ChFi2d.ChFi2d_FirstEdgeDegenerated
ChFi2d_LastEdgeDegenerated = _ChFi2d.ChFi2d_LastEdgeDegenerated
ChFi2d_BothEdgesDegenerated = _ChFi2d.ChFi2d_BothEdgesDegenerated
ChFi2d_NotAuthorized = _ChFi2d.ChFi2d_NotAuthorized


class ChFi2d_ConstructionError(IntEnum):
	ChFi2d_NotPlanar = 0
	ChFi2d_NoFace = 1
	ChFi2d_InitialisationError = 2
	ChFi2d_ParametersError = 3
	ChFi2d_Ready = 4
	ChFi2d_IsDone = 5
	ChFi2d_ComputationError = 6
	ChFi2d_ConnexionError = 7
	ChFi2d_TangencyError = 8
	ChFi2d_FirstEdgeDegenerated = 9
	ChFi2d_LastEdgeDegenerated = 10
	ChFi2d_BothEdgesDegenerated = 11
	ChFi2d_NotAuthorized = 12
ChFi2d_NotPlanar = ChFi2d_ConstructionError.ChFi2d_NotPlanar
ChFi2d_NoFace = ChFi2d_ConstructionError.ChFi2d_NoFace
ChFi2d_InitialisationError = ChFi2d_ConstructionError.ChFi2d_InitialisationError
ChFi2d_ParametersError = ChFi2d_ConstructionError.ChFi2d_ParametersError
ChFi2d_Ready = ChFi2d_ConstructionError.ChFi2d_Ready
ChFi2d_IsDone = ChFi2d_ConstructionError.ChFi2d_IsDone
ChFi2d_ComputationError = ChFi2d_ConstructionError.ChFi2d_ComputationError
ChFi2d_ConnexionError = ChFi2d_ConstructionError.ChFi2d_ConnexionError
ChFi2d_TangencyError = ChFi2d_ConstructionError.ChFi2d_TangencyError
ChFi2d_FirstEdgeDegenerated = ChFi2d_ConstructionError.ChFi2d_FirstEdgeDegenerated
ChFi2d_LastEdgeDegenerated = ChFi2d_ConstructionError.ChFi2d_LastEdgeDegenerated
ChFi2d_BothEdgesDegenerated = ChFi2d_ConstructionError.ChFi2d_BothEdgesDegenerated
ChFi2d_NotAuthorized = ChFi2d_ConstructionError.ChFi2d_NotAuthorized

class chfi2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chfi2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chfi2d, name)
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        this = _ChFi2d.new_chfi2d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChFi2d.delete_chfi2d
    __del__ = lambda self: None
chfi2d_swigregister = _ChFi2d.chfi2d_swigregister
chfi2d_swigregister(chfi2d)

class ChFi2d_AnaFilletAlgo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChFi2d_AnaFilletAlgo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChFi2d_AnaFilletAlgo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        An empty constructor. use the method init() to initialize the class.

        Returns
        -------
        None

        A constructor. it expects a wire consisting of two edges of type (any combination of): - segment - arc of circle.

        Parameters
        ----------
        theWire: TopoDS_Wire
        thePlane: gp_Pln

        Returns
        -------
        None

        A constructor. it expects two edges having a common point of type: - segment - arc of circle.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        thePlane: gp_Pln

        Returns
        -------
        None

        """
        this = _ChFi2d.new_ChFi2d_AnaFilletAlgo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initializes the class by a wire consisting of two edges.

        Parameters
        ----------
        theWire: TopoDS_Wire
        thePlane: gp_Pln

        Returns
        -------
        None

        Initializes the class by two edges.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        thePlane: gp_Pln

        Returns
        -------
        None

        """
        return _ChFi2d.ChFi2d_AnaFilletAlgo_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        Calculates a fillet.

        Parameters
        ----------
        radius: float

        Returns
        -------
        bool

        """
        return _ChFi2d.ChFi2d_AnaFilletAlgo_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Edge const":
        """
        Retrieves a result (fillet and shrinked neighbours).

        Parameters
        ----------
        e1: TopoDS_Edge
        e2: TopoDS_Edge

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_AnaFilletAlgo_Result(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_AnaFilletAlgo
    __del__ = lambda self: None
ChFi2d_AnaFilletAlgo_swigregister = _ChFi2d.ChFi2d_AnaFilletAlgo_swigregister
ChFi2d_AnaFilletAlgo_swigregister(ChFi2d_AnaFilletAlgo)

class ChFi2d_Builder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChFi2d_Builder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChFi2d_Builder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        The face <f> can be build on a closed or an open wire.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        this = _ChFi2d.new_ChFi2d_Builder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddChamfer(self, *args) -> "TopoDS_Edge":
        """
        Add a chamfer on the wire between the two edges connected <e1> and <e2>. <addchamfer> returns the chamfer edge. this edge has sense only if the status <status> is <isdone>.

        Parameters
        ----------
        E1: TopoDS_Edge
        E2: TopoDS_Edge
        D1: float
        D2: float

        Returns
        -------
        TopoDS_Edge

        Add a chamfer on the wire between the two edges connected to the vertex <v>. the chamfer will make an angle <ang> with the edge <e>, and one of its extremities will be on <e> at distance <d>. the returned edge has sense only if the status <status> is <isdone>. warning: the value of <ang> must be expressed in radian.

        Parameters
        ----------
        E: TopoDS_Edge
        V: TopoDS_Vertex
        D: float
        Ang: float

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_AddChamfer(self, *args)


    def AddFillet(self, *args) -> "TopoDS_Edge":
        """
        Add a fillet of radius <radius> on the wire between the two edges connected to the vertex <v>. <addfillet> returns the fillet edge. the returned edge has sense only if the status <status> is <isdone>.

        Parameters
        ----------
        V: TopoDS_Vertex
        Radius: float

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_AddFillet(self, *args)


    def BasisEdge(self, *args) -> "TopoDS_Edge const":
        """
        Returns the parent edge of <e> warning: if <e>is a basis edge, the returned edge would be equal to <e>.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_BasisEdge(self, *args)


    def ChamferEdges(self, *args) -> "TopTools_SequenceOfShape const &":
        """
        Returns the list of new edges.

        Returns
        -------
        TopTools_SequenceOfShape

        """
        return _ChFi2d.ChFi2d_Builder_ChamferEdges(self, *args)


    def DescendantEdge(self, *args) -> "TopoDS_Edge const":
        """
        Returns the modified edge if <e> has descendant or <e> in the other case.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_DescendantEdge(self, *args)


    def FilletEdges(self, *args) -> "TopTools_SequenceOfShape const &":
        """
        Returns the list of new edges.

        Returns
        -------
        TopTools_SequenceOfShape

        """
        return _ChFi2d.ChFi2d_Builder_FilletEdges(self, *args)


    def HasDescendant(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        bool

        """
        return _ChFi2d.ChFi2d_Builder_HasDescendant(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        RefFace: TopoDS_Face
        ModFace: TopoDS_Face

        Returns
        -------
        None

        """
        return _ChFi2d.ChFi2d_Builder_Init(self, *args)


    def IsModified(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        bool

        """
        return _ChFi2d.ChFi2d_Builder_IsModified(self, *args)


    def ModifyChamfer(self, *args) -> "TopoDS_Edge":
        """
        Modify the chamfer <chamfer> and returns the new chamfer edge. this edge as sense only if the status <status> is <isdone>.

        Parameters
        ----------
        Chamfer: TopoDS_Edge
        E1: TopoDS_Edge
        E2: TopoDS_Edge
        D1: float
        D2: float

        Returns
        -------
        TopoDS_Edge

        Modify the chamfer <chamfer> and returns the new chamfer edge. this edge as sense only if the status <status> is <isdone>. warning: the value of <ang> must be expressed in radian.

        Parameters
        ----------
        Chamfer: TopoDS_Edge
        E: TopoDS_Edge
        D: float
        Ang: float

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_ModifyChamfer(self, *args)


    def ModifyFillet(self, *args) -> "TopoDS_Edge":
        """
        Modify the fillet radius and return the new fillet edge. this edge has sense only if the status <status> is <isdone>.

        Parameters
        ----------
        Fillet: TopoDS_Edge
        Radius: float

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_ModifyFillet(self, *args)


    def NbChamfer(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _ChFi2d.ChFi2d_Builder_NbChamfer(self, *args)


    def NbFillet(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _ChFi2d.ChFi2d_Builder_NbFillet(self, *args)


    def RemoveChamfer(self, *args) -> "TopoDS_Vertex":
        """
        Removes the chamfer <chamfer> and returns the vertex connecting the two adjacent edges to this chamfer.

        Parameters
        ----------
        Chamfer: TopoDS_Edge

        Returns
        -------
        TopoDS_Vertex

        """
        return _ChFi2d.ChFi2d_Builder_RemoveChamfer(self, *args)


    def RemoveFillet(self, *args) -> "TopoDS_Vertex":
        """
        Removes the fillet <fillet> and returns the vertex connecting the two adjacent edges to this fillet.

        Parameters
        ----------
        Fillet: TopoDS_Edge

        Returns
        -------
        TopoDS_Vertex

        """
        return _ChFi2d.ChFi2d_Builder_RemoveFillet(self, *args)


    def Result(self, *args) -> "TopoDS_Face":
        """
        Returns the modified face.

        Returns
        -------
        TopoDS_Face

        """
        return _ChFi2d.ChFi2d_Builder_Result(self, *args)


    def Status(self, *args) -> "ChFi2d_ConstructionError":
        """
        No available documentation.

        Returns
        -------
        ChFi2d_ConstructionError

        """
        return _ChFi2d.ChFi2d_Builder_Status(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_Builder
    __del__ = lambda self: None
ChFi2d_Builder_swigregister = _ChFi2d.ChFi2d_Builder_swigregister
ChFi2d_Builder_swigregister(ChFi2d_Builder)

class ChFi2d_ChamferAPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChFi2d_ChamferAPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChFi2d_ChamferAPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        An empty constructor.

        Returns
        -------
        None

        A constructor accepting a wire consisting of two linear edges.

        Parameters
        ----------
        theWire: TopoDS_Wire

        Returns
        -------
        None

        A constructor accepting two linear edges.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge

        Returns
        -------
        None

        """
        this = _ChFi2d.new_ChFi2d_ChamferAPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initializes the class by a wire consisting of two libear edges.

        Parameters
        ----------
        theWire: TopoDS_Wire

        Returns
        -------
        None

        Initializes the class by two linear edges.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge

        Returns
        -------
        None

        """
        return _ChFi2d.ChFi2d_ChamferAPI_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        Constructs a chamfer edge. returns true if the edge is constructed.

        Returns
        -------
        bool

        """
        return _ChFi2d.ChFi2d_ChamferAPI_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Edge":
        """
        No available documentation.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        theLength1: float
        theLength2: float

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_ChamferAPI_Result(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_ChamferAPI
    __del__ = lambda self: None
ChFi2d_ChamferAPI_swigregister = _ChFi2d.ChFi2d_ChamferAPI_swigregister
ChFi2d_ChamferAPI_swigregister(ChFi2d_ChamferAPI)

class ChFi2d_FilletAPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChFi2d_FilletAPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChFi2d_FilletAPI, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        An empty constructor of the fillet algorithm. call a method init() to initialize the algorithm before calling of a perform() method.

        Returns
        -------
        None

        A constructor of a fillet algorithm: accepts a wire consisting of two edges in a plane.

        Parameters
        ----------
        theWire: TopoDS_Wire
        thePlane: gp_Pln

        Returns
        -------
        None

        A constructor of a fillet algorithm: accepts two edges in a plane.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        thePlane: gp_Pln

        Returns
        -------
        None

        """
        this = _ChFi2d.new_ChFi2d_FilletAPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initializes a fillet algorithm: accepts a wire consisting of two edges in a plane.

        Parameters
        ----------
        theWire: TopoDS_Wire
        thePlane: gp_Pln

        Returns
        -------
        None

        Initializes a fillet algorithm: accepts two edges in a plane.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        thePlane: gp_Pln

        Returns
        -------
        None

        """
        return _ChFi2d.ChFi2d_FilletAPI_Init(self, *args)


    def NbResults(self, *args) -> "Standard_Integer":
        """
        Returns number of possible solutions. <thepoint> chooses a particular fillet in case of several fillets may be constructed (for example, a circle intersecting a segment in 2 points). put the intersecting (or common) point of the edges.

        Parameters
        ----------
        thePoint: gp_Pnt

        Returns
        -------
        int

        """
        return _ChFi2d.ChFi2d_FilletAPI_NbResults(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        Constructs a fillet edge. returns true if at least one result was found.

        Parameters
        ----------
        theRadius: float

        Returns
        -------
        bool

        """
        return _ChFi2d.ChFi2d_FilletAPI_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Edge":
        """
        Returns result (fillet edge, modified edge1, modified edge2), nearest to the given point <thepoint> if isolution == -1 <thepoint> chooses a particular fillet in case of several fillets may be constructed (for example, a circle intersecting a segment in 2 points). put the intersecting (or common) point of the edges.

        Parameters
        ----------
        thePoint: gp_Pnt
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        iSolution: int,optional
        	default value is -1

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_FilletAPI_Result(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_FilletAPI
    __del__ = lambda self: None
ChFi2d_FilletAPI_swigregister = _ChFi2d.ChFi2d_FilletAPI_swigregister
ChFi2d_FilletAPI_swigregister(ChFi2d_FilletAPI)

class ChFi2d_FilletAlgo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChFi2d_FilletAlgo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChFi2d_FilletAlgo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        An empty constructor of the fillet algorithm. call a method init() to initialize the algorithm before calling of a perform() method.

        Returns
        -------
        None

        A constructor of a fillet algorithm: accepts a wire consisting of two edges in a plane.

        Parameters
        ----------
        theWire: TopoDS_Wire
        thePlane: gp_Pln

        Returns
        -------
        None

        A constructor of a fillet algorithm: accepts two edges in a plane.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        thePlane: gp_Pln

        Returns
        -------
        None

        """
        this = _ChFi2d.new_ChFi2d_FilletAlgo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initializes a fillet algorithm: accepts a wire consisting of two edges in a plane.

        Parameters
        ----------
        theWire: TopoDS_Wire
        thePlane: gp_Pln

        Returns
        -------
        None

        Initializes a fillet algorithm: accepts two edges in a plane.

        Parameters
        ----------
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        thePlane: gp_Pln

        Returns
        -------
        None

        """
        return _ChFi2d.ChFi2d_FilletAlgo_Init(self, *args)


    def NbResults(self, *args) -> "Standard_Integer":
        """
        Returns number of possible solutions. <thepoint> chooses a particular fillet in case of several fillets may be constructed (for example, a circle intersecting a segment in 2 points). put the intersecting (or common) point of the edges.

        Parameters
        ----------
        thePoint: gp_Pnt

        Returns
        -------
        int

        """
        return _ChFi2d.ChFi2d_FilletAlgo_NbResults(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        Constructs a fillet edge. returns true, if at least one result was found.

        Parameters
        ----------
        theRadius: float

        Returns
        -------
        bool

        """
        return _ChFi2d.ChFi2d_FilletAlgo_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Edge":
        """
        Returns result (fillet edge, modified edge1, modified edge2), neares to the given point <thepoint> if isolution == -1. <thepoint> chooses a particular fillet in case of several fillets may be constructed (for example, a circle intersecting a segment in 2 points). put the intersecting (or common) point of the edges.

        Parameters
        ----------
        thePoint: gp_Pnt
        theEdge1: TopoDS_Edge
        theEdge2: TopoDS_Edge
        iSolution: int,optional
        	default value is -1

        Returns
        -------
        TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_FilletAlgo_Result(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_FilletAlgo
    __del__ = lambda self: None
ChFi2d_FilletAlgo_swigregister = _ChFi2d.ChFi2d_FilletAlgo_swigregister
ChFi2d_FilletAlgo_swigregister(ChFi2d_FilletAlgo)



# This file is compatible with both classic and new-style classes.


