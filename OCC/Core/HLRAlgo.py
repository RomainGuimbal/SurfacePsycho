# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HLRAlgo module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hlralgo.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HLRAlgo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HLRAlgo')
    _HLRAlgo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRAlgo', [dirname(__file__)])
        except ImportError:
            import _HLRAlgo
            return _HLRAlgo
        try:
            _mod = imp.load_module('_HLRAlgo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HLRAlgo = swig_import_helper()
    del swig_import_helper
else:
    import _HLRAlgo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRAlgo.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _HLRAlgo.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _HLRAlgo.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _HLRAlgo.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _HLRAlgo.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _HLRAlgo.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _HLRAlgo.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _HLRAlgo.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _HLRAlgo.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _HLRAlgo.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _HLRAlgo.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _HLRAlgo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _HLRAlgo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _HLRAlgo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _HLRAlgo.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _HLRAlgo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _HLRAlgo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _HLRAlgo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _HLRAlgo.process_exception(error, method_name, class_name)
process_exception = _HLRAlgo.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopAbs
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TColgp
import OCC.Core.gp

from enum import IntEnum
from OCC.Core.Exception import *

HLRAlgo_PolyMask_EMskOutLin1 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin1
HLRAlgo_PolyMask_EMskOutLin2 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin2
HLRAlgo_PolyMask_EMskOutLin3 = _HLRAlgo.HLRAlgo_PolyMask_EMskOutLin3
HLRAlgo_PolyMask_EMskGrALin1 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin1
HLRAlgo_PolyMask_EMskGrALin2 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin2
HLRAlgo_PolyMask_EMskGrALin3 = _HLRAlgo.HLRAlgo_PolyMask_EMskGrALin3
HLRAlgo_PolyMask_FMskBack = _HLRAlgo.HLRAlgo_PolyMask_FMskBack
HLRAlgo_PolyMask_FMskSide = _HLRAlgo.HLRAlgo_PolyMask_FMskSide
HLRAlgo_PolyMask_FMskHiding = _HLRAlgo.HLRAlgo_PolyMask_FMskHiding
HLRAlgo_PolyMask_FMskFlat = _HLRAlgo.HLRAlgo_PolyMask_FMskFlat
HLRAlgo_PolyMask_FMskOnOutL = _HLRAlgo.HLRAlgo_PolyMask_FMskOnOutL
HLRAlgo_PolyMask_FMskOrBack = _HLRAlgo.HLRAlgo_PolyMask_FMskOrBack
HLRAlgo_PolyMask_FMskFrBack = _HLRAlgo.HLRAlgo_PolyMask_FMskFrBack


class HLRAlgo_PolyMask(IntEnum):
	HLRAlgo_PolyMask_EMskOutLin1 = 1
	HLRAlgo_PolyMask_EMskOutLin2 = 2
	HLRAlgo_PolyMask_EMskOutLin3 = 4
	HLRAlgo_PolyMask_EMskGrALin1 = 8
	HLRAlgo_PolyMask_EMskGrALin2 = 16
	HLRAlgo_PolyMask_EMskGrALin3 = 32
	HLRAlgo_PolyMask_FMskBack = 64
	HLRAlgo_PolyMask_FMskSide = 128
	HLRAlgo_PolyMask_FMskHiding = 256
	HLRAlgo_PolyMask_FMskFlat = 512
	HLRAlgo_PolyMask_FMskOnOutL = 1024
	HLRAlgo_PolyMask_FMskOrBack = 2048
	HLRAlgo_PolyMask_FMskFrBack = 4096
HLRAlgo_PolyMask_EMskOutLin1 = HLRAlgo_PolyMask.HLRAlgo_PolyMask_EMskOutLin1
HLRAlgo_PolyMask_EMskOutLin2 = HLRAlgo_PolyMask.HLRAlgo_PolyMask_EMskOutLin2
HLRAlgo_PolyMask_EMskOutLin3 = HLRAlgo_PolyMask.HLRAlgo_PolyMask_EMskOutLin3
HLRAlgo_PolyMask_EMskGrALin1 = HLRAlgo_PolyMask.HLRAlgo_PolyMask_EMskGrALin1
HLRAlgo_PolyMask_EMskGrALin2 = HLRAlgo_PolyMask.HLRAlgo_PolyMask_EMskGrALin2
HLRAlgo_PolyMask_EMskGrALin3 = HLRAlgo_PolyMask.HLRAlgo_PolyMask_EMskGrALin3
HLRAlgo_PolyMask_FMskBack = HLRAlgo_PolyMask.HLRAlgo_PolyMask_FMskBack
HLRAlgo_PolyMask_FMskSide = HLRAlgo_PolyMask.HLRAlgo_PolyMask_FMskSide
HLRAlgo_PolyMask_FMskHiding = HLRAlgo_PolyMask.HLRAlgo_PolyMask_FMskHiding
HLRAlgo_PolyMask_FMskFlat = HLRAlgo_PolyMask.HLRAlgo_PolyMask_FMskFlat
HLRAlgo_PolyMask_FMskOnOutL = HLRAlgo_PolyMask.HLRAlgo_PolyMask_FMskOnOutL
HLRAlgo_PolyMask_FMskOrBack = HLRAlgo_PolyMask.HLRAlgo_PolyMask_FMskOrBack
HLRAlgo_PolyMask_FMskFrBack = HLRAlgo_PolyMask.HLRAlgo_PolyMask_FMskFrBack


def Handle_HLRAlgo_EdgesBlock_Create() -> "opencascade::handle< HLRAlgo_EdgesBlock >":
    return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Create()
Handle_HLRAlgo_EdgesBlock_Create = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_Create

def Handle_HLRAlgo_EdgesBlock_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_EdgesBlock >":
    return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast(t)
Handle_HLRAlgo_EdgesBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_DownCast

def Handle_HLRAlgo_EdgesBlock_IsNull(t: 'opencascade::handle< HLRAlgo_EdgesBlock > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsNull(t)
Handle_HLRAlgo_EdgesBlock_IsNull = _HLRAlgo.Handle_HLRAlgo_EdgesBlock_IsNull

def Handle_HLRAlgo_PolyAlgo_Create() -> "opencascade::handle< HLRAlgo_PolyAlgo >":
    return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Create()
Handle_HLRAlgo_PolyAlgo_Create = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_Create

def Handle_HLRAlgo_PolyAlgo_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyAlgo >":
    return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast(t)
Handle_HLRAlgo_PolyAlgo_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_DownCast

def Handle_HLRAlgo_PolyAlgo_IsNull(t: 'opencascade::handle< HLRAlgo_PolyAlgo > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsNull(t)
Handle_HLRAlgo_PolyAlgo_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyAlgo_IsNull

def Handle_HLRAlgo_PolyData_Create() -> "opencascade::handle< HLRAlgo_PolyData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyData_Create()
Handle_HLRAlgo_PolyData_Create = _HLRAlgo.Handle_HLRAlgo_PolyData_Create

def Handle_HLRAlgo_PolyData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast(t)
Handle_HLRAlgo_PolyData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyData_DownCast

def Handle_HLRAlgo_PolyData_IsNull(t: 'opencascade::handle< HLRAlgo_PolyData > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyData_IsNull(t)
Handle_HLRAlgo_PolyData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyData_IsNull

def Handle_HLRAlgo_PolyInternalData_Create() -> "opencascade::handle< HLRAlgo_PolyInternalData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Create()
Handle_HLRAlgo_PolyInternalData_Create = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_Create

def Handle_HLRAlgo_PolyInternalData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyInternalData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast(t)
Handle_HLRAlgo_PolyInternalData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_DownCast

def Handle_HLRAlgo_PolyInternalData_IsNull(t: 'opencascade::handle< HLRAlgo_PolyInternalData > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsNull(t)
Handle_HLRAlgo_PolyInternalData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyInternalData_IsNull

def Handle_HLRAlgo_PolyInternalNode_Create() -> "opencascade::handle< HLRAlgo_PolyInternalNode >":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Create()
Handle_HLRAlgo_PolyInternalNode_Create = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_Create

def Handle_HLRAlgo_PolyInternalNode_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyInternalNode >":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast(t)
Handle_HLRAlgo_PolyInternalNode_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_DownCast

def Handle_HLRAlgo_PolyInternalNode_IsNull(t: 'opencascade::handle< HLRAlgo_PolyInternalNode > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsNull(t)
Handle_HLRAlgo_PolyInternalNode_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyInternalNode_IsNull

def Handle_HLRAlgo_PolyShellData_Create() -> "opencascade::handle< HLRAlgo_PolyShellData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyShellData_Create()
Handle_HLRAlgo_PolyShellData_Create = _HLRAlgo.Handle_HLRAlgo_PolyShellData_Create

def Handle_HLRAlgo_PolyShellData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_PolyShellData >":
    return _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast(t)
Handle_HLRAlgo_PolyShellData_DownCast = _HLRAlgo.Handle_HLRAlgo_PolyShellData_DownCast

def Handle_HLRAlgo_PolyShellData_IsNull(t: 'opencascade::handle< HLRAlgo_PolyShellData > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_PolyShellData_IsNull(t)
Handle_HLRAlgo_PolyShellData_IsNull = _HLRAlgo.Handle_HLRAlgo_PolyShellData_IsNull

def Handle_HLRAlgo_WiresBlock_Create() -> "opencascade::handle< HLRAlgo_WiresBlock >":
    return _HLRAlgo.Handle_HLRAlgo_WiresBlock_Create()
Handle_HLRAlgo_WiresBlock_Create = _HLRAlgo.Handle_HLRAlgo_WiresBlock_Create

def Handle_HLRAlgo_WiresBlock_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_WiresBlock >":
    return _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast(t)
Handle_HLRAlgo_WiresBlock_DownCast = _HLRAlgo.Handle_HLRAlgo_WiresBlock_DownCast

def Handle_HLRAlgo_WiresBlock_IsNull(t: 'opencascade::handle< HLRAlgo_WiresBlock > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_WiresBlock_IsNull(t)
Handle_HLRAlgo_WiresBlock_IsNull = _HLRAlgo.Handle_HLRAlgo_WiresBlock_IsNull

def Handle_HLRAlgo_HArray1OfPINod_Create() -> "opencascade::handle< HLRAlgo_HArray1OfPINod >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Create()
Handle_HLRAlgo_HArray1OfPINod_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_Create

def Handle_HLRAlgo_HArray1OfPINod_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_HArray1OfPINod >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast(t)
Handle_HLRAlgo_HArray1OfPINod_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_DownCast

def Handle_HLRAlgo_HArray1OfPINod_IsNull(t: 'opencascade::handle< HLRAlgo_HArray1OfPINod > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsNull(t)
Handle_HLRAlgo_HArray1OfPINod_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPINod_IsNull

def Handle_HLRAlgo_HArray1OfPHDat_Create() -> "opencascade::handle< HLRAlgo_HArray1OfPHDat >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Create()
Handle_HLRAlgo_HArray1OfPHDat_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_Create

def Handle_HLRAlgo_HArray1OfPHDat_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_HArray1OfPHDat >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast(t)
Handle_HLRAlgo_HArray1OfPHDat_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_DownCast

def Handle_HLRAlgo_HArray1OfPHDat_IsNull(t: 'opencascade::handle< HLRAlgo_HArray1OfPHDat > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsNull(t)
Handle_HLRAlgo_HArray1OfPHDat_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPHDat_IsNull

def Handle_HLRAlgo_HArray1OfTData_Create() -> "opencascade::handle< HLRAlgo_HArray1OfTData >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Create()
Handle_HLRAlgo_HArray1OfTData_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_Create

def Handle_HLRAlgo_HArray1OfTData_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_HArray1OfTData >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast(t)
Handle_HLRAlgo_HArray1OfTData_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_DownCast

def Handle_HLRAlgo_HArray1OfTData_IsNull(t: 'opencascade::handle< HLRAlgo_HArray1OfTData > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsNull(t)
Handle_HLRAlgo_HArray1OfTData_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfTData_IsNull

def Handle_HLRAlgo_HArray1OfPISeg_Create() -> "opencascade::handle< HLRAlgo_HArray1OfPISeg >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Create()
Handle_HLRAlgo_HArray1OfPISeg_Create = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_Create

def Handle_HLRAlgo_HArray1OfPISeg_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< HLRAlgo_HArray1OfPISeg >":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast(t)
Handle_HLRAlgo_HArray1OfPISeg_DownCast = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_DownCast

def Handle_HLRAlgo_HArray1OfPISeg_IsNull(t: 'opencascade::handle< HLRAlgo_HArray1OfPISeg > const &') -> "bool":
    return _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsNull(t)
Handle_HLRAlgo_HArray1OfPISeg_IsNull = _HLRAlgo.Handle_HLRAlgo_HArray1OfPISeg_IsNull
class HLRAlgo_Array1OfPINod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_Array1OfPINod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_Array1OfPINod, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > >::iterator":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > >::iterator":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > >::const_iterator":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > >::const_iterator":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_cend(self)

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_Array1OfPINod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< HLRAlgo_PolyInternalNode > const &') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Size(self)

    def Length(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_IsAllocated(self)

    def Assign(self, theOther: 'HLRAlgo_Array1OfPINod') -> "NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > > &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Assign(self, theOther)

    def Move(self, theOther: 'HLRAlgo_Array1OfPINod') -> "NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > > &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< HLRAlgo_PolyInternalNode > > &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Set(self, *args)

    def First(self) -> "opencascade::handle< HLRAlgo_PolyInternalNode > const &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_First(self)

    def ChangeFirst(self) -> "opencascade::handle< HLRAlgo_PolyInternalNode > &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< HLRAlgo_PolyInternalNode > const &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Last(self)

    def ChangeLast(self) -> "opencascade::handle< HLRAlgo_PolyInternalNode > &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< HLRAlgo_PolyInternalNode > const &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< HLRAlgo_PolyInternalNode > &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< HLRAlgo_PolyInternalNode > &":
        return _HLRAlgo.HLRAlgo_Array1OfPINod___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< HLRAlgo_PolyInternalNode > const &') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfPINod_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfPINod
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

HLRAlgo_Array1OfPINod_swigregister = _HLRAlgo.HLRAlgo_Array1OfPINod_swigregister
HLRAlgo_Array1OfPINod_swigregister(HLRAlgo_Array1OfPINod)

class HLRAlgo_Array1OfPISeg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_Array1OfPISeg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_Array1OfPISeg, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< HLRAlgo_PolyInternalSegment >::iterator":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_begin(self)

    def end(self) -> "NCollection_Array1< HLRAlgo_PolyInternalSegment >::iterator":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_end(self)

    def cbegin(self) -> "NCollection_Array1< HLRAlgo_PolyInternalSegment >::const_iterator":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_cbegin(self)

    def cend(self) -> "NCollection_Array1< HLRAlgo_PolyInternalSegment >::const_iterator":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_cend(self)

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_Array1OfPISeg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'HLRAlgo_PolyInternalSegment const &') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Size(self)

    def Length(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_IsAllocated(self)

    def Assign(self, theOther: 'HLRAlgo_Array1OfPISeg') -> "NCollection_Array1< HLRAlgo_PolyInternalSegment > &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Assign(self, theOther)

    def Move(self, theOther: 'HLRAlgo_Array1OfPISeg') -> "NCollection_Array1< HLRAlgo_PolyInternalSegment > &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< HLRAlgo_PolyInternalSegment > &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Set(self, *args)

    def First(self) -> "HLRAlgo_PolyInternalSegment const &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_First(self)

    def ChangeFirst(self) -> "HLRAlgo_PolyInternalSegment &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeFirst(self)

    def Last(self) -> "HLRAlgo_PolyInternalSegment const &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Last(self)

    def ChangeLast(self) -> "HLRAlgo_PolyInternalSegment &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "HLRAlgo_PolyInternalSegment const &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "HLRAlgo_PolyInternalSegment &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "HLRAlgo_PolyInternalSegment &":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'HLRAlgo_PolyInternalSegment const &') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfPISeg_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfPISeg
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

HLRAlgo_Array1OfPISeg_swigregister = _HLRAlgo.HLRAlgo_Array1OfPISeg_swigregister
HLRAlgo_Array1OfPISeg_swigregister(HLRAlgo_Array1OfPISeg)

class HLRAlgo_Array1OfTData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_Array1OfTData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_Array1OfTData, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< HLRAlgo_TriangleData >::iterator":
        return _HLRAlgo.HLRAlgo_Array1OfTData_begin(self)

    def end(self) -> "NCollection_Array1< HLRAlgo_TriangleData >::iterator":
        return _HLRAlgo.HLRAlgo_Array1OfTData_end(self)

    def cbegin(self) -> "NCollection_Array1< HLRAlgo_TriangleData >::const_iterator":
        return _HLRAlgo.HLRAlgo_Array1OfTData_cbegin(self)

    def cend(self) -> "NCollection_Array1< HLRAlgo_TriangleData >::const_iterator":
        return _HLRAlgo.HLRAlgo_Array1OfTData_cend(self)

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_Array1OfTData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'HLRAlgo_TriangleData const &') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Size(self)

    def Length(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfTData_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfTData_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_Array1OfTData_IsAllocated(self)

    def Assign(self, theOther: 'HLRAlgo_Array1OfTData') -> "NCollection_Array1< HLRAlgo_TriangleData > &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Assign(self, theOther)

    def Move(self, theOther: 'HLRAlgo_Array1OfTData') -> "NCollection_Array1< HLRAlgo_TriangleData > &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< HLRAlgo_TriangleData > &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Set(self, *args)

    def First(self) -> "HLRAlgo_TriangleData const &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_First(self)

    def ChangeFirst(self) -> "HLRAlgo_TriangleData &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_ChangeFirst(self)

    def Last(self) -> "HLRAlgo_TriangleData const &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Last(self)

    def ChangeLast(self) -> "HLRAlgo_TriangleData &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "HLRAlgo_TriangleData const &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "HLRAlgo_TriangleData &":
        return _HLRAlgo.HLRAlgo_Array1OfTData_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "HLRAlgo_TriangleData &":
        return _HLRAlgo.HLRAlgo_Array1OfTData___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'HLRAlgo_TriangleData const &') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfTData_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _HLRAlgo.HLRAlgo_Array1OfTData_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Array1OfTData
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

HLRAlgo_Array1OfTData_swigregister = _HLRAlgo.HLRAlgo_Array1OfTData_swigregister
HLRAlgo_Array1OfTData_swigregister(HLRAlgo_Array1OfTData)

class HLRAlgo_InterferenceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_InterferenceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_InterferenceList, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< HLRAlgo_Interference >::iterator":
        return _HLRAlgo.HLRAlgo_InterferenceList_begin(self)

    def end(self) -> "NCollection_List< HLRAlgo_Interference >::iterator":
        return _HLRAlgo.HLRAlgo_InterferenceList_end(self)

    def cbegin(self) -> "NCollection_List< HLRAlgo_Interference >::const_iterator":
        return _HLRAlgo.HLRAlgo_InterferenceList_cbegin(self)

    def cend(self) -> "NCollection_List< HLRAlgo_Interference >::const_iterator":
        return _HLRAlgo.HLRAlgo_InterferenceList_cend(self)

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_InterferenceList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_InterferenceList_Size(self)

    def Assign(self, theOther: 'HLRAlgo_InterferenceList') -> "NCollection_List< HLRAlgo_Interference > &":
        return _HLRAlgo.HLRAlgo_InterferenceList_Assign(self, theOther)

    def Set(self, theOther: 'HLRAlgo_InterferenceList') -> "NCollection_List< HLRAlgo_Interference > &":
        return _HLRAlgo.HLRAlgo_InterferenceList_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _HLRAlgo.HLRAlgo_InterferenceList_Clear(self, theAllocator)

    def First(self) -> "HLRAlgo_Interference const &":
        return _HLRAlgo.HLRAlgo_InterferenceList_First(self)

    def Last(self) -> "HLRAlgo_Interference const &":
        return _HLRAlgo.HLRAlgo_InterferenceList_Last(self)

    def Append(self, *args) -> "void":
        return _HLRAlgo.HLRAlgo_InterferenceList_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _HLRAlgo.HLRAlgo_InterferenceList_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _HLRAlgo.HLRAlgo_InterferenceList_RemoveFirst(self)

    def Remove(self, theIter: 'HLRAlgo_ListIteratorOfInterferenceList') -> "void":
        return _HLRAlgo.HLRAlgo_InterferenceList_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _HLRAlgo.HLRAlgo_InterferenceList_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _HLRAlgo.HLRAlgo_InterferenceList_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _HLRAlgo.HLRAlgo_InterferenceList_Reverse(self)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_InterferenceList
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

HLRAlgo_InterferenceList_swigregister = _HLRAlgo.HLRAlgo_InterferenceList_swigregister
HLRAlgo_InterferenceList_swigregister(HLRAlgo_InterferenceList)

class HLRAlgo_ListIteratorOfInterferenceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_ListIteratorOfInterferenceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_ListIteratorOfInterferenceList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_ListIteratorOfInterferenceList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_More(self)

    def Next(self) -> "void":
        return _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Next(self)

    def Value(self) -> "HLRAlgo_Interference const &":
        return _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_Value(self)

    def ChangeValue(self) -> "HLRAlgo_Interference &":
        return _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_ChangeValue(self)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListIteratorOfInterferenceList
    __del__ = lambda self: None
HLRAlgo_ListIteratorOfInterferenceList_swigregister = _HLRAlgo.HLRAlgo_ListIteratorOfInterferenceList_swigregister
HLRAlgo_ListIteratorOfInterferenceList_swigregister(HLRAlgo_ListIteratorOfInterferenceList)

class HLRAlgo_ListIteratorOfListOfBPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_ListIteratorOfListOfBPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_ListIteratorOfListOfBPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_ListIteratorOfListOfBPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self) -> "Standard_Boolean":
        return _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_More(self)

    def Next(self) -> "void":
        return _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Next(self)

    def Value(self) -> "HLRAlgo_BiPoint const &":
        return _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_Value(self)

    def ChangeValue(self) -> "HLRAlgo_BiPoint &":
        return _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_ChangeValue(self)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListIteratorOfListOfBPoint
    __del__ = lambda self: None
HLRAlgo_ListIteratorOfListOfBPoint_swigregister = _HLRAlgo.HLRAlgo_ListIteratorOfListOfBPoint_swigregister
HLRAlgo_ListIteratorOfListOfBPoint_swigregister(HLRAlgo_ListIteratorOfListOfBPoint)

class HLRAlgo_ListOfBPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_ListOfBPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_ListOfBPoint, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_List< HLRAlgo_BiPoint >::iterator":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_begin(self)

    def end(self) -> "NCollection_List< HLRAlgo_BiPoint >::iterator":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_end(self)

    def cbegin(self) -> "NCollection_List< HLRAlgo_BiPoint >::const_iterator":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_cbegin(self)

    def cend(self) -> "NCollection_List< HLRAlgo_BiPoint >::const_iterator":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_cend(self)

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_ListOfBPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Size(self)

    def Assign(self, theOther: 'HLRAlgo_ListOfBPoint') -> "NCollection_List< HLRAlgo_BiPoint > &":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Assign(self, theOther)

    def Set(self, theOther: 'HLRAlgo_ListOfBPoint') -> "NCollection_List< HLRAlgo_BiPoint > &":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Set(self, theOther)

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Clear(self, theAllocator)

    def First(self) -> "HLRAlgo_BiPoint const &":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_First(self)

    def Last(self) -> "HLRAlgo_BiPoint const &":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Last(self)

    def Append(self, *args) -> "void":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Prepend(self, *args)

    def RemoveFirst(self) -> "void":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_RemoveFirst(self)

    def Remove(self, theIter: 'HLRAlgo_ListIteratorOfListOfBPoint') -> "void":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Remove(self, theIter)

    def InsertBefore(self, *args) -> "void":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_InsertAfter(self, *args)

    def Reverse(self) -> "void":
        return _HLRAlgo.HLRAlgo_ListOfBPoint_Reverse(self)
    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_ListOfBPoint
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

HLRAlgo_ListOfBPoint_swigregister = _HLRAlgo.HLRAlgo_ListOfBPoint_swigregister
HLRAlgo_ListOfBPoint_swigregister(HLRAlgo_ListOfBPoint)

class hlralgo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hlralgo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hlralgo, name)
    __repr__ = _swig_repr

    def AddMinMax(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        IMin: HLRAlgo_EdgesBlock::MinMaxIndices
        IMax: HLRAlgo_EdgesBlock::MinMaxIndices
        OMin: HLRAlgo_EdgesBlock::MinMaxIndices
        OMax: HLRAlgo_EdgesBlock::MinMaxIndices

        Returns
        -------
        None

        """
        return _HLRAlgo.hlralgo_AddMinMax(*args)

    AddMinMax = staticmethod(AddMinMax)

    def CopyMinMax(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        IMin: HLRAlgo_EdgesBlock::MinMaxIndices
        IMax: HLRAlgo_EdgesBlock::MinMaxIndices
        OMin: HLRAlgo_EdgesBlock::MinMaxIndices
        OMax: HLRAlgo_EdgesBlock::MinMaxIndices

        Returns
        -------
        None

        """
        return _HLRAlgo.hlralgo_CopyMinMax(*args)

    CopyMinMax = staticmethod(CopyMinMax)

    def DecodeMinMax(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        MinMax: HLRAlgo_EdgesBlock::MinMaxIndices
        Min: HLRAlgo_EdgesBlock::MinMaxIndices
        Max: HLRAlgo_EdgesBlock::MinMaxIndices

        Returns
        -------
        None

        """
        return _HLRAlgo.hlralgo_DecodeMinMax(*args)

    DecodeMinMax = staticmethod(DecodeMinMax)

    def EncodeMinMax(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Min: HLRAlgo_EdgesBlock::MinMaxIndices
        Max: HLRAlgo_EdgesBlock::MinMaxIndices
        MinMax: HLRAlgo_EdgesBlock::MinMaxIndices

        Returns
        -------
        None

        """
        return _HLRAlgo.hlralgo_EncodeMinMax(*args)

    EncodeMinMax = staticmethod(EncodeMinMax)

    def EnlargeMinMax(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        tol: float
        Min: float
        Max: float

        Returns
        -------
        None

        """
        return _HLRAlgo.hlralgo_EnlargeMinMax(*args)

    EnlargeMinMax = staticmethod(EnlargeMinMax)

    def InitMinMax(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Big: float
        Min: float
        Max: float

        Returns
        -------
        None

        """
        return _HLRAlgo.hlralgo_InitMinMax(*args)

    InitMinMax = staticmethod(InitMinMax)

    def SizeBox(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Min: HLRAlgo_EdgesBlock::MinMaxIndices
        Max: HLRAlgo_EdgesBlock::MinMaxIndices

        Returns
        -------
        float

        """
        return _HLRAlgo.hlralgo_SizeBox(*args)

    SizeBox = staticmethod(SizeBox)

    def UpdateMinMax(*args) -> "void":
        """
        Iterator on the visible or hidden parts of an edgestatus.

        Parameters
        ----------
        x: float
        y: float
        z: float
        Min: float
        Max: float

        Returns
        -------
        None

        """
        return _HLRAlgo.hlralgo_UpdateMinMax(*args)

    UpdateMinMax = staticmethod(UpdateMinMax)

    __repr__ = _dumps_object


    def __init__(self):
        this = _HLRAlgo.new_hlralgo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRAlgo.delete_hlralgo
    __del__ = lambda self: None
hlralgo_swigregister = _HLRAlgo.hlralgo_swigregister
hlralgo_swigregister(hlralgo)

def hlralgo_AddMinMax(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    IMin: HLRAlgo_EdgesBlock::MinMaxIndices
    IMax: HLRAlgo_EdgesBlock::MinMaxIndices
    OMin: HLRAlgo_EdgesBlock::MinMaxIndices
    OMax: HLRAlgo_EdgesBlock::MinMaxIndices

    Returns
    -------
    None

    """
    return _HLRAlgo.hlralgo_AddMinMax(*args)

def hlralgo_CopyMinMax(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    IMin: HLRAlgo_EdgesBlock::MinMaxIndices
    IMax: HLRAlgo_EdgesBlock::MinMaxIndices
    OMin: HLRAlgo_EdgesBlock::MinMaxIndices
    OMax: HLRAlgo_EdgesBlock::MinMaxIndices

    Returns
    -------
    None

    """
    return _HLRAlgo.hlralgo_CopyMinMax(*args)

def hlralgo_DecodeMinMax(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    MinMax: HLRAlgo_EdgesBlock::MinMaxIndices
    Min: HLRAlgo_EdgesBlock::MinMaxIndices
    Max: HLRAlgo_EdgesBlock::MinMaxIndices

    Returns
    -------
    None

    """
    return _HLRAlgo.hlralgo_DecodeMinMax(*args)

def hlralgo_EncodeMinMax(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    Min: HLRAlgo_EdgesBlock::MinMaxIndices
    Max: HLRAlgo_EdgesBlock::MinMaxIndices
    MinMax: HLRAlgo_EdgesBlock::MinMaxIndices

    Returns
    -------
    None

    """
    return _HLRAlgo.hlralgo_EncodeMinMax(*args)

def hlralgo_EnlargeMinMax(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    tol: float
    Min: float
    Max: float

    Returns
    -------
    None

    """
    return _HLRAlgo.hlralgo_EnlargeMinMax(*args)

def hlralgo_InitMinMax(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    Big: float
    Min: float
    Max: float

    Returns
    -------
    None

    """
    return _HLRAlgo.hlralgo_InitMinMax(*args)

def hlralgo_SizeBox(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    Min: HLRAlgo_EdgesBlock::MinMaxIndices
    Max: HLRAlgo_EdgesBlock::MinMaxIndices

    Returns
    -------
    float

    """
    return _HLRAlgo.hlralgo_SizeBox(*args)

def hlralgo_UpdateMinMax(*args) -> "void":
    """
    Iterator on the visible or hidden parts of an edgestatus.

    Parameters
    ----------
    x: float
    y: float
    z: float
    Min: float
    Max: float

    Returns
    -------
    None

    """
    return _HLRAlgo.hlralgo_UpdateMinMax(*args)

class HLRAlgo_BiPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_BiPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_BiPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        X1: float
        Y1: float
        Z1: float
        X2: float
        Y2: float
        Z2: float
        XT1: float
        YT1: float
        ZT1: float
        XT2: float
        YT2: float
        ZT2: float
        Index: int
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        X1: float
        Y1: float
        Z1: float
        X2: float
        Y2: float
        Z2: float
        XT1: float
        YT1: float
        ZT1: float
        XT2: float
        YT2: float
        ZT2: float
        Index: int
        flag: int

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        X1: float
        Y1: float
        Z1: float
        X2: float
        Y2: float
        Z2: float
        XT1: float
        YT1: float
        ZT1: float
        XT2: float
        YT2: float
        ZT2: float
        Index: int
        i1: int
        i1p1: int
        i1p2: int
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        X1: float
        Y1: float
        Z1: float
        X2: float
        Y2: float
        Z2: float
        XT1: float
        YT1: float
        ZT1: float
        XT2: float
        YT2: float
        ZT2: float
        Index: int
        i1: int
        i1p1: int
        i1p2: int
        flag: int

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        X1: float
        Y1: float
        Z1: float
        X2: float
        Y2: float
        Z2: float
        XT1: float
        YT1: float
        ZT1: float
        XT2: float
        YT2: float
        ZT2: float
        Index: int
        i1: int
        i1p1: int
        i1p2: int
        i2: int
        i2p1: int
        i2p2: int
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        X1: float
        Y1: float
        Z1: float
        X2: float
        Y2: float
        Z2: float
        XT1: float
        YT1: float
        ZT1: float
        XT2: float
        YT2: float
        ZT2: float
        Index: int
        i1: int
        i1p1: int
        i1p2: int
        i2: int
        i2p1: int
        i2p2: int
        flag: int

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_BiPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Hidden(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Hidden(self, *args)


    def IntLine(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_IntLine(self, *args)


    def OutLine(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_OutLine(self, *args)


    def Rg1Line(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_Rg1Line(self, *args)


    def RgNLine(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_BiPoint_RgNLine(self, *args)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Indices(self):
    	pass

    @methodnotwrapped
    def Points(self):
    	pass

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_BiPoint
    __del__ = lambda self: None
HLRAlgo_BiPoint_swigregister = _HLRAlgo.HLRAlgo_BiPoint_swigregister
HLRAlgo_BiPoint_swigregister(HLRAlgo_BiPoint)

class HLRAlgo_Coincidence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_Coincidence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_Coincidence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_Coincidence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set2D(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        FE: int
        Param: float

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_Coincidence_Set2D(self, *args)


    def SetState3D(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        stbef: TopAbs_State
        staft: TopAbs_State

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_Coincidence_SetState3D(self, *args)


    def State3D(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        stbef: TopAbs_State
        staft: TopAbs_State

        """
        return _HLRAlgo.HLRAlgo_Coincidence_State3D(self, *args)


    def Value2D(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        FE: int
        Param: float

        """
        return _HLRAlgo.HLRAlgo_Coincidence_Value2D(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Coincidence
    __del__ = lambda self: None
HLRAlgo_Coincidence_swigregister = _HLRAlgo.HLRAlgo_Coincidence_swigregister
HLRAlgo_Coincidence_swigregister(HLRAlgo_Coincidence)

class HLRAlgo_EdgeIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_EdgeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_EdgeIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Iterator on the visible or hidden parts of an edge.

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_EdgeIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Hidden(self, *args) -> "void":
        """
        Returns the bounds and the tolerances of the current hidden interval.

        Parameters
        ----------
        TolStart: Standard_ShortReal
        TolEnd: Standard_ShortReal

        Returns
        -------
        Start: float
        End: float

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_Hidden(self, *args)


    def InitHidden(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        status: HLRAlgo_EdgeStatus

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_InitHidden(self, *args)


    def InitVisible(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        status: HLRAlgo_EdgeStatus

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_InitVisible(self, *args)


    def MoreHidden(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_MoreHidden(self, *args)


    def MoreVisible(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_MoreVisible(self, *args)


    def NextHidden(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_NextHidden(self, *args)


    def NextVisible(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_NextVisible(self, *args)


    def Visible(self, *args) -> "void":
        """
        Returns the bounds and the tolerances of the current visible interval.

        Parameters
        ----------
        TolStart: Standard_ShortReal
        TolEnd: Standard_ShortReal

        Returns
        -------
        Start: float
        End: float

        """
        return _HLRAlgo.HLRAlgo_EdgeIterator_Visible(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgeIterator
    __del__ = lambda self: None
HLRAlgo_EdgeIterator_swigregister = _HLRAlgo.HLRAlgo_EdgeIterator_swigregister
HLRAlgo_EdgeIterator_swigregister(HLRAlgo_EdgeIterator)

class HLRAlgo_EdgeStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_EdgeStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_EdgeStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Creates a new edgestatus. default visible. the edge is bounded by the interval <start>, <end> with the tolerances <tolstart>, <tolend>.

        Parameters
        ----------
        Start: float
        TolStart: Standard_ShortReal
        End: float
        TolEnd: Standard_ShortReal

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_EdgeStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AllHidden(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_AllHidden(self, *args)


    def AllVisible(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_AllVisible(self, *args)


    def Bounds(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theTolStart: Standard_ShortReal
        theTolEnd: Standard_ShortReal

        Returns
        -------
        theStart: float
        theEnd: float

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Bounds(self, *args)


    def Hide(self, *args) -> "void":
        """
        Hides the interval <start>, <end> with the tolerances <tolstart>, <tolend>. this interval is subtracted from the visible parts. if the hidden part is on ( or under ) the face the flag <onface> is true ( or false ). if the hidden part is on ( or inside ) the boundary of the face the flag <onboundary> is true ( or false ).

        Parameters
        ----------
        Start: float
        TolStart: Standard_ShortReal
        End: float
        TolEnd: Standard_ShortReal
        OnFace: bool
        OnBoundary: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Hide(self, *args)


    def HideAll(self, *args) -> "void":
        """
        Hide the whole edge.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_HideAll(self, *args)


    def Initialize(self, *args) -> "void":
        """
        Initialize an edgestatus. default visible. the edge is bounded by the interval <start>, <end> with the tolerances <tolstart>, <tolend>.

        Parameters
        ----------
        Start: float
        TolStart: Standard_ShortReal
        End: float
        TolEnd: Standard_ShortReal

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_Initialize(self, *args)


    def NbVisiblePart(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_NbVisiblePart(self, *args)


    def ShowAll(self, *args) -> "void":
        """
        Show the whole edge.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_ShowAll(self, *args)


    def VisiblePart(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Index: int
        TolStart: Standard_ShortReal
        TolEnd: Standard_ShortReal

        Returns
        -------
        Start: float
        End: float

        """
        return _HLRAlgo.HLRAlgo_EdgeStatus_VisiblePart(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgeStatus
    __del__ = lambda self: None
HLRAlgo_EdgeStatus_swigregister = _HLRAlgo.HLRAlgo_EdgeStatus_swigregister
HLRAlgo_EdgeStatus_swigregister(HLRAlgo_EdgeStatus)

class HLRAlgo_EdgesBlock(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_EdgesBlock, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_EdgesBlock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Create a block of edges for a wire.

        Parameters
        ----------
        NbEdges: int

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_EdgesBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Double(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        I: int
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Double(self, *args)


    def Edge(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        I: int
        EI: int

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Edge(self, *args)


    def Internal(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        I: int
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Internal(self, *args)


    def IsoLine(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        I: int
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_IsoLine(self, *args)


    def MinMax(self, *args) -> "HLRAlgo_EdgesBlock::MinMaxIndices":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_EdgesBlock::MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_MinMax(self, *args)


    def NbEdges(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_NbEdges(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        No available documentation.

        Parameters
        ----------
        I: int
        Or: TopAbs_Orientation

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_Orientation(self, *args)


    def OutLine(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        I: int
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_EdgesBlock_OutLine(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_EdgesBlock_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def UpdateMinMax(self):
    	pass

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_EdgesBlock
    __del__ = lambda self: None
HLRAlgo_EdgesBlock_swigregister = _HLRAlgo.HLRAlgo_EdgesBlock_swigregister
HLRAlgo_EdgesBlock_swigregister(HLRAlgo_EdgesBlock)

class HLRAlgo_Interference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_Interference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_Interference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Inters: HLRAlgo_Intersection
        Bound: HLRAlgo_Coincidence
        Orient: TopAbs_Orientation
        Trans: TopAbs_Orientation
        BTrans: TopAbs_Orientation

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_Interference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Boundary(self, *args) -> "HLRAlgo_Coincidence const &":
        """
        No available documentation.

        Parameters
        ----------
        B: HLRAlgo_Coincidence

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        HLRAlgo_Coincidence

        """
        return _HLRAlgo.HLRAlgo_Interference_Boundary(self, *args)


    def BoundaryTransition(self, *args) -> "TopAbs_Orientation":
        """
        No available documentation.

        Parameters
        ----------
        BTr: TopAbs_Orientation

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_BoundaryTransition(self, *args)


    def ChangeBoundary(self, *args) -> "HLRAlgo_Coincidence &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_Coincidence

        """
        return _HLRAlgo.HLRAlgo_Interference_ChangeBoundary(self, *args)


    def ChangeIntersection(self, *args) -> "HLRAlgo_Intersection &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_Intersection

        """
        return _HLRAlgo.HLRAlgo_Interference_ChangeIntersection(self, *args)


    def Intersection(self, *args) -> "HLRAlgo_Intersection const &":
        """
        No available documentation.

        Parameters
        ----------
        I: HLRAlgo_Intersection

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        HLRAlgo_Intersection

        """
        return _HLRAlgo.HLRAlgo_Interference_Intersection(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        No available documentation.

        Parameters
        ----------
        O: TopAbs_Orientation

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_Orientation(self, *args)


    def Transition(self, *args) -> "TopAbs_Orientation":
        """
        No available documentation.

        Parameters
        ----------
        Tr: TopAbs_Orientation

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Interference_Transition(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Interference
    __del__ = lambda self: None
HLRAlgo_Interference_swigregister = _HLRAlgo.HLRAlgo_Interference_swigregister
HLRAlgo_Interference_swigregister(HLRAlgo_Interference)

class HLRAlgo_Intersection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_Intersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_Intersection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Ori: TopAbs_Orientation
        Lev: int
        SegInd: int
        Ind: int
        P: float
        Tol: Standard_ShortReal
        S: TopAbs_State

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_Intersection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Index(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        Ind: int

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_Intersection_Index(self, *args)


    def Level(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        Lev: int

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_Intersection_Level(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        No available documentation.

        Parameters
        ----------
        Ori: TopAbs_Orientation

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRAlgo.HLRAlgo_Intersection_Orientation(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        P: float

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        float

        """
        return _HLRAlgo.HLRAlgo_Intersection_Parameter(self, *args)


    def SegIndex(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        SegInd: int

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_Intersection_SegIndex(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        No available documentation.

        Parameters
        ----------
        S: TopAbs_State

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        TopAbs_State

        """
        return _HLRAlgo.HLRAlgo_Intersection_State(self, *args)


    def Tolerance(self, *args) -> "Standard_ShortReal":
        """
        No available documentation.

        Parameters
        ----------
        T: Standard_ShortReal

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        Standard_ShortReal

        """
        return _HLRAlgo.HLRAlgo_Intersection_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Intersection
    __del__ = lambda self: None
HLRAlgo_Intersection_swigregister = _HLRAlgo.HLRAlgo_Intersection_swigregister
HLRAlgo_Intersection_swigregister(HLRAlgo_Intersection)

class HLRAlgo_PolyAlgo(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_PolyAlgo, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_PolyAlgo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_PolyAlgo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Clear(self, *args)


    def Hide(self, *args) -> "HLRAlgo_BiPoint::PointsT &":
        """
        Process hiding between <pt1> and <pt2>.

        Parameters
        ----------
        status: HLRAlgo_EdgeStatus

        Returns
        -------
        Index: int
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Hide(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        HShell: TColStd_HArray1OfTransient

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Init(self, *args)


    def InitHide(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_InitHide(self, *args)


    def InitShow(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_InitShow(self, *args)


    def MoreHide(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_MoreHide(self, *args)


    def MoreShow(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_MoreShow(self, *args)


    def NextHide(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_NextHide(self, *args)


    def NextShow(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_NextShow(self, *args)


    def PolyShell(self, *args) -> "TColStd_Array1OfTransient &":
        """
        No available documentation.

        Returns
        -------
        TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_PolyShell(self, *args)


    def Show(self, *args) -> "HLRAlgo_BiPoint::PointsT &":
        """
        Process hiding between <pt1> and <pt2>.

        Parameters
        ----------

        Returns
        -------
        Index: int
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Show(self, *args)


    def Update(self, *args) -> "void":
        """
        Prepare all the data to process the algo.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyAlgo_Update(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyAlgo
    __del__ = lambda self: None
HLRAlgo_PolyAlgo_swigregister = _HLRAlgo.HLRAlgo_PolyAlgo_swigregister
HLRAlgo_PolyAlgo_swigregister(HLRAlgo_PolyAlgo)

class HLRAlgo_PolyData(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_PolyData, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_PolyData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_PolyData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FaceIndex(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_PolyData_FaceIndex(self, *args)


    def HNodes(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        HNodes: TColgp_HArray1OfXYZ

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyData_HNodes(self, *args)


    def HPHDat(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        HPHDat: HLRAlgo_HArray1OfPHDat

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyData_HPHDat(self, *args)


    def HTData(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        HTData: HLRAlgo_HArray1OfTData

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyData_HTData(self, *args)


    def Hiding(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRAlgo.HLRAlgo_PolyData_Hiding(self, *args)


    def Nodes(self, *args) -> "TColgp_Array1OfXYZ &":
        """
        No available documentation.

        Returns
        -------
        TColgp_Array1OfXYZ

        """
        return _HLRAlgo.HLRAlgo_PolyData_Nodes(self, *args)


    def PHDat(self, *args) -> "HLRAlgo_Array1OfPHDat &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_Array1OfPHDat

        """
        return _HLRAlgo.HLRAlgo_PolyData_PHDat(self, *args)


    def TData(self, *args) -> "HLRAlgo_Array1OfTData &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_PolyData_TData(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyData_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def UpdateGlobalMinMax(self):
    	pass

    @methodnotwrapped
    def HideByPolyData(self):
    	pass

    @methodnotwrapped
    def Indices(self):
    	pass

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyData
    __del__ = lambda self: None
HLRAlgo_PolyData_swigregister = _HLRAlgo.HLRAlgo_PolyData_swigregister
HLRAlgo_PolyData_swigregister(HLRAlgo_PolyData)

class HLRAlgo_PolyInternalData(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_PolyInternalData, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_PolyInternalData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        nbNod: int
        nbTri: int

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_PolyInternalData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddNode(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        Nod1RValues: HLRAlgo_PolyInternalNode::NodeData
        Nod2RValues: HLRAlgo_PolyInternalNode::NodeData
        PINod1: HLRAlgo_Array1OfPINod *
        PINod2: HLRAlgo_Array1OfPINod *
        coef1: float
        X3: float
        Y3: float
        Z3: float

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_AddNode(self, *args)


    def DecPINod(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecPINod(self, *args)


    def DecPISeg(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecPISeg(self, *args)


    def DecTData(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_DecTData(self, *args)


    def Dump(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_Dump(self, *args)


    def IncPINod(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        PINod1: HLRAlgo_Array1OfPINod *
        PINod2: HLRAlgo_Array1OfPINod *

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncPINod(self, *args)


    def IncPISeg(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        PISeg1: HLRAlgo_Array1OfPISeg *
        PISeg2: HLRAlgo_Array1OfPISeg *

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncPISeg(self, *args)


    def IncTData(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        TData1: HLRAlgo_Array1OfTData *
        TData2: HLRAlgo_Array1OfTData *

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IncTData(self, *args)


    def IntOutL(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_IntOutL(self, *args)


    def NbPINod(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbPINod(self, *args)


    def NbPISeg(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbPISeg(self, *args)


    def NbTData(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_NbTData(self, *args)


    def PINod(self, *args) -> "HLRAlgo_Array1OfPINod &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_Array1OfPINod

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_PINod(self, *args)


    def PISeg(self, *args) -> "HLRAlgo_Array1OfPISeg &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_Array1OfPISeg

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_PISeg(self, *args)


    def Planar(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_Planar(self, *args)


    def TData(self, *args) -> "HLRAlgo_Array1OfTData &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_Array1OfTData

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_TData(self, *args)


    def UpdateLinks(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        TData: HLRAlgo_Array1OfTData *
        PISeg: HLRAlgo_Array1OfPISeg *
        PINod: HLRAlgo_Array1OfPINod *

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        ip1: int
        ip2: int
        ip3: int
        TData1: HLRAlgo_Array1OfTData *
        TData2: HLRAlgo_Array1OfTData *
        PISeg1: HLRAlgo_Array1OfPISeg *
        PISeg2: HLRAlgo_Array1OfPISeg *
        PINod1: HLRAlgo_Array1OfPINod *
        PINod2: HLRAlgo_Array1OfPINod *

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyInternalData_UpdateLinks(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyInternalData_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyInternalData
    __del__ = lambda self: None
HLRAlgo_PolyInternalData_swigregister = _HLRAlgo.HLRAlgo_PolyInternalData_swigregister
HLRAlgo_PolyInternalData_swigregister(HLRAlgo_PolyInternalData)

class HLRAlgo_PolyInternalNode(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_PolyInternalNode, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_PolyInternalNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_PolyInternalNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyInternalNode_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Indices(self):
    	pass

    @methodnotwrapped
    def Data(self):
    	pass

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyInternalNode
    __del__ = lambda self: None
HLRAlgo_PolyInternalNode_swigregister = _HLRAlgo.HLRAlgo_PolyInternalNode_swigregister
HLRAlgo_PolyInternalNode_swigregister(HLRAlgo_PolyInternalNode)

class HLRAlgo_PolyShellData(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_PolyShellData, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_PolyShellData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        nbFace: int

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_PolyShellData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Edges(self, *args) -> "HLRAlgo_ListOfBPoint &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_ListOfBPoint

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_Edges(self, *args)


    def Hiding(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_Hiding(self, *args)


    def HidingPolyData(self, *args) -> "TColStd_Array1OfTransient &":
        """
        No available documentation.

        Returns
        -------
        TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_HidingPolyData(self, *args)


    def PolyData(self, *args) -> "TColStd_Array1OfTransient &":
        """
        No available documentation.

        Returns
        -------
        TColStd_Array1OfTransient

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_PolyData(self, *args)


    def UpdateGlobalMinMax(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theBox: HLRAlgo_PolyData::Box

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_UpdateGlobalMinMax(self, *args)


    def UpdateHiding(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        nbHiding: int

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_PolyShellData_UpdateHiding(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_PolyShellData_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Indices(self):
    	pass

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_PolyShellData
    __del__ = lambda self: None
HLRAlgo_PolyShellData_swigregister = _HLRAlgo.HLRAlgo_PolyShellData_swigregister
HLRAlgo_PolyShellData_swigregister(HLRAlgo_PolyShellData)

class HLRAlgo_Projector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_Projector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_Projector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Creates an axonometric projector. <cs> is the viewing coordinate system.

        Parameters
        ----------
        CS: gp_Ax2

        Returns
        -------
        None

        Creates a perspective projector. <cs> is the viewing coordinate system.

        Parameters
        ----------
        CS: gp_Ax2
        Focus: float

        Returns
        -------
        None

        Build a projector with automatic minmax directions.

        Parameters
        ----------
        T: gp_Trsf
        Persp: bool
        Focus: float

        Returns
        -------
        None

        Build a projector with given minmax directions.

        Parameters
        ----------
        T: gp_Trsf
        Persp: bool
        Focus: float
        v1: gp_Vec2d
        v2: gp_Vec2d
        v3: gp_Vec2d

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_Projector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Directions(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        D1: gp_Vec2d
        D2: gp_Vec2d
        D3: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_Projector_Directions(self, *args)


    def Focus(self, *args) -> "Standard_Real":
        """
        Returns the focal length.

        Returns
        -------
        float

        """
        return _HLRAlgo.HLRAlgo_Projector_Focus(self, *args)


    def FullTransformation(self, *args) -> "gp_Trsf const":
        """
        Returns the original transformation.

        Returns
        -------
        gp_Trsf

        """
        return _HLRAlgo.HLRAlgo_Projector_FullTransformation(self, *args)


    def InvertedTransformation(self, *args) -> "gp_Trsf const":
        """
        Returns the active inverted transformation.

        Returns
        -------
        gp_Trsf

        """
        return _HLRAlgo.HLRAlgo_Projector_InvertedTransformation(self, *args)


    def Perspective(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a perspective transformation.

        Returns
        -------
        bool

        """
        return _HLRAlgo.HLRAlgo_Projector_Perspective(self, *args)


    def Project(self, *args) -> "void":
        """
        Transform and apply perspective if needed.

        Parameters
        ----------
        P: gp_Pnt
        Pout: gp_Pnt2d

        Returns
        -------
        None

        Transform and apply perspective if needed.

        Parameters
        ----------
        P: gp_Pnt

        Returns
        -------
        X: float
        Y: float
        Z: float

        Transform and apply perspective if needed.

        Parameters
        ----------
        P: gp_Pnt
        D1: gp_Vec
        Pout: gp_Pnt2d
        D1out: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_Projector_Project(self, *args)


    def Scaled(self, *args) -> "void":
        """
        To compute with the given scale and translation.

        Parameters
        ----------
        On: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_Projector_Scaled(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        T: gp_Trsf
        Persp: bool
        Focus: float

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_Projector_Set(self, *args)


    def Shoot(self, *args) -> "gp_Lin":
        """
        Return a line going through the eye towards the 2d point <x,y>.

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        gp_Lin

        """
        return _HLRAlgo.HLRAlgo_Projector_Shoot(self, *args)


    def Transform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        D: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Pnt: gp_Pnt

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_Projector_Transform(self, *args)


    def Transformation(self, *args) -> "gp_Trsf const":
        """
        Returns the active transformation.

        Returns
        -------
        gp_Trsf

        """
        return _HLRAlgo.HLRAlgo_Projector_Transformation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_Projector
    __del__ = lambda self: None
HLRAlgo_Projector_swigregister = _HLRAlgo.HLRAlgo_Projector_swigregister
HLRAlgo_Projector_swigregister(HLRAlgo_Projector)

class HLRAlgo_WiresBlock(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_WiresBlock, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_WiresBlock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Create a block of blocks.

        Parameters
        ----------
        NbWires: int

        Returns
        -------
        None

        """
        this = _HLRAlgo.new_HLRAlgo_WiresBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def MinMax(self, *args) -> "HLRAlgo_EdgesBlock::MinMaxIndices &":
        """
        No available documentation.

        Returns
        -------
        HLRAlgo_EdgesBlock::MinMaxIndices

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_MinMax(self, *args)


    def NbWires(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_NbWires(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        I: int
        W: HLRAlgo_EdgesBlock

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_Set(self, *args)


    def UpdateMinMax(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theMinMaxes: HLRAlgo_EdgesBlock::MinMaxIndices

        Returns
        -------
        None

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_UpdateMinMax(self, *args)


    def Wire(self, *args) -> "opencascade::handle< HLRAlgo_EdgesBlock > &":
        """
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        opencascade::handle<HLRAlgo_EdgesBlock>

        """
        return _HLRAlgo.HLRAlgo_WiresBlock_Wire(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_WiresBlock_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_WiresBlock
    __del__ = lambda self: None
HLRAlgo_WiresBlock_swigregister = _HLRAlgo.HLRAlgo_WiresBlock_swigregister
HLRAlgo_WiresBlock_swigregister(HLRAlgo_WiresBlock)


@classnotwrapped
class HLRAlgo_TriangleData:
	pass

@classnotwrapped
class HLRAlgo_PolyInternalSegment:
	pass

@classnotwrapped
class HLRAlgo_PolyHidingData:
	pass


class HLRAlgo_HArray1OfPINod(HLRAlgo_Array1OfPINod, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [HLRAlgo_Array1OfPINod, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_HArray1OfPINod, name, value)
    __swig_getmethods__ = {}
    for _s in [HLRAlgo_Array1OfPINod, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_HArray1OfPINod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_HArray1OfPINod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "HLRAlgo_Array1OfPINod const &":
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_Array1(self)

    def ChangeArray1(self) -> "HLRAlgo_Array1OfPINod &":
        return _HLRAlgo.HLRAlgo_HArray1OfPINod_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPINod_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPINod
    __del__ = lambda self: None
HLRAlgo_HArray1OfPINod_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPINod_swigregister
HLRAlgo_HArray1OfPINod_swigregister(HLRAlgo_HArray1OfPINod)

class HLRAlgo_HArray1OfPHDat(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_HArray1OfPHDat, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_HArray1OfPHDat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_HArray1OfPHDat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "HLRAlgo_Array1OfPHDat const &":
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_Array1(self)

    def ChangeArray1(self) -> "HLRAlgo_Array1OfPHDat &":
        return _HLRAlgo.HLRAlgo_HArray1OfPHDat_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPHDat_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPHDat
    __del__ = lambda self: None
HLRAlgo_HArray1OfPHDat_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPHDat_swigregister
HLRAlgo_HArray1OfPHDat_swigregister(HLRAlgo_HArray1OfPHDat)

class HLRAlgo_HArray1OfTData(HLRAlgo_Array1OfTData, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [HLRAlgo_Array1OfTData, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_HArray1OfTData, name, value)
    __swig_getmethods__ = {}
    for _s in [HLRAlgo_Array1OfTData, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_HArray1OfTData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_HArray1OfTData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "HLRAlgo_Array1OfTData const &":
        return _HLRAlgo.HLRAlgo_HArray1OfTData_Array1(self)

    def ChangeArray1(self) -> "HLRAlgo_Array1OfTData &":
        return _HLRAlgo.HLRAlgo_HArray1OfTData_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfTData_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfTData
    __del__ = lambda self: None
HLRAlgo_HArray1OfTData_swigregister = _HLRAlgo.HLRAlgo_HArray1OfTData_swigregister
HLRAlgo_HArray1OfTData_swigregister(HLRAlgo_HArray1OfTData)

class HLRAlgo_HArray1OfPISeg(HLRAlgo_Array1OfPISeg, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [HLRAlgo_Array1OfPISeg, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HLRAlgo_HArray1OfPISeg, name, value)
    __swig_getmethods__ = {}
    for _s in [HLRAlgo_Array1OfPISeg, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HLRAlgo_HArray1OfPISeg, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _HLRAlgo.new_HLRAlgo_HArray1OfPISeg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "HLRAlgo_Array1OfPISeg const &":
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_Array1(self)

    def ChangeArray1(self) -> "HLRAlgo_Array1OfPISeg &":
        return _HLRAlgo.HLRAlgo_HArray1OfPISeg_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_HLRAlgo_HArray1OfPISeg_DownCast(t)

    __swig_destroy__ = _HLRAlgo.delete_HLRAlgo_HArray1OfPISeg
    __del__ = lambda self: None
HLRAlgo_HArray1OfPISeg_swigregister = _HLRAlgo.HLRAlgo_HArray1OfPISeg_swigregister
HLRAlgo_HArray1OfPISeg_swigregister(HLRAlgo_HArray1OfPISeg)



# This file is compatible with both classic and new-style classes.


