# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinMDF module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_binmdf.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMDF')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMDF')
    _BinMDF = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMDF', [dirname(__file__)])
        except ImportError:
            import _BinMDF
            return _BinMDF
        try:
            _mod = imp.load_module('_BinMDF', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMDF = swig_import_helper()
    del swig_import_helper
else:
    import _BinMDF
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMDF.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BinMDF.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinMDF.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinMDF.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BinMDF.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BinMDF.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BinMDF.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BinMDF.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BinMDF.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BinMDF.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinMDF.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BinMDF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BinMDF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinMDF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinMDF.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinMDF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BinMDF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMDF.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinMDF.process_exception(error, method_name, class_name)
process_exception = _BinMDF.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BinMDF_ADriver_Create() -> "opencascade::handle< BinMDF_ADriver >":
    return _BinMDF.Handle_BinMDF_ADriver_Create()
Handle_BinMDF_ADriver_Create = _BinMDF.Handle_BinMDF_ADriver_Create

def Handle_BinMDF_ADriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMDF_ADriver >":
    return _BinMDF.Handle_BinMDF_ADriver_DownCast(t)
Handle_BinMDF_ADriver_DownCast = _BinMDF.Handle_BinMDF_ADriver_DownCast

def Handle_BinMDF_ADriver_IsNull(t: 'opencascade::handle< BinMDF_ADriver > const &') -> "bool":
    return _BinMDF.Handle_BinMDF_ADriver_IsNull(t)
Handle_BinMDF_ADriver_IsNull = _BinMDF.Handle_BinMDF_ADriver_IsNull

def Handle_BinMDF_ADriverTable_Create() -> "opencascade::handle< BinMDF_ADriverTable >":
    return _BinMDF.Handle_BinMDF_ADriverTable_Create()
Handle_BinMDF_ADriverTable_Create = _BinMDF.Handle_BinMDF_ADriverTable_Create

def Handle_BinMDF_ADriverTable_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMDF_ADriverTable >":
    return _BinMDF.Handle_BinMDF_ADriverTable_DownCast(t)
Handle_BinMDF_ADriverTable_DownCast = _BinMDF.Handle_BinMDF_ADriverTable_DownCast

def Handle_BinMDF_ADriverTable_IsNull(t: 'opencascade::handle< BinMDF_ADriverTable > const &') -> "bool":
    return _BinMDF.Handle_BinMDF_ADriverTable_IsNull(t)
Handle_BinMDF_ADriverTable_IsNull = _BinMDF.Handle_BinMDF_ADriverTable_IsNull

def Handle_BinMDF_DerivedDriver_Create() -> "opencascade::handle< BinMDF_DerivedDriver >":
    return _BinMDF.Handle_BinMDF_DerivedDriver_Create()
Handle_BinMDF_DerivedDriver_Create = _BinMDF.Handle_BinMDF_DerivedDriver_Create

def Handle_BinMDF_DerivedDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMDF_DerivedDriver >":
    return _BinMDF.Handle_BinMDF_DerivedDriver_DownCast(t)
Handle_BinMDF_DerivedDriver_DownCast = _BinMDF.Handle_BinMDF_DerivedDriver_DownCast

def Handle_BinMDF_DerivedDriver_IsNull(t: 'opencascade::handle< BinMDF_DerivedDriver > const &') -> "bool":
    return _BinMDF.Handle_BinMDF_DerivedDriver_IsNull(t)
Handle_BinMDF_DerivedDriver_IsNull = _BinMDF.Handle_BinMDF_DerivedDriver_IsNull

def Handle_BinMDF_ReferenceDriver_Create() -> "opencascade::handle< BinMDF_ReferenceDriver >":
    return _BinMDF.Handle_BinMDF_ReferenceDriver_Create()
Handle_BinMDF_ReferenceDriver_Create = _BinMDF.Handle_BinMDF_ReferenceDriver_Create

def Handle_BinMDF_ReferenceDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMDF_ReferenceDriver >":
    return _BinMDF.Handle_BinMDF_ReferenceDriver_DownCast(t)
Handle_BinMDF_ReferenceDriver_DownCast = _BinMDF.Handle_BinMDF_ReferenceDriver_DownCast

def Handle_BinMDF_ReferenceDriver_IsNull(t: 'opencascade::handle< BinMDF_ReferenceDriver > const &') -> "bool":
    return _BinMDF.Handle_BinMDF_ReferenceDriver_IsNull(t)
Handle_BinMDF_ReferenceDriver_IsNull = _BinMDF.Handle_BinMDF_ReferenceDriver_IsNull

def Handle_BinMDF_TagSourceDriver_Create() -> "opencascade::handle< BinMDF_TagSourceDriver >":
    return _BinMDF.Handle_BinMDF_TagSourceDriver_Create()
Handle_BinMDF_TagSourceDriver_Create = _BinMDF.Handle_BinMDF_TagSourceDriver_Create

def Handle_BinMDF_TagSourceDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< BinMDF_TagSourceDriver >":
    return _BinMDF.Handle_BinMDF_TagSourceDriver_DownCast(t)
Handle_BinMDF_TagSourceDriver_DownCast = _BinMDF.Handle_BinMDF_TagSourceDriver_DownCast

def Handle_BinMDF_TagSourceDriver_IsNull(t: 'opencascade::handle< BinMDF_TagSourceDriver > const &') -> "bool":
    return _BinMDF.Handle_BinMDF_TagSourceDriver_IsNull(t)
Handle_BinMDF_TagSourceDriver_IsNull = _BinMDF.Handle_BinMDF_TagSourceDriver_IsNull
class BinMDF_TypeADriverMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMDF_TypeADriverMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinMDF_TypeADriverMap, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< BinMDF_ADriver >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _BinMDF.BinMDF_TypeADriverMap_begin(self)

    def end(self) -> "NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< BinMDF_ADriver >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _BinMDF.BinMDF_TypeADriverMap_end(self)

    def cbegin(self) -> "NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< BinMDF_ADriver >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _BinMDF.BinMDF_TypeADriverMap_cbegin(self)

    def cend(self) -> "NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< BinMDF_ADriver >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _BinMDF.BinMDF_TypeADriverMap_cend(self)

    def __init__(self, *args):
        this = _BinMDF.new_BinMDF_TypeADriverMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'BinMDF_TypeADriverMap') -> "void":
        return _BinMDF.BinMDF_TypeADriverMap_Exchange(self, theOther)

    def Assign(self, theOther: 'BinMDF_TypeADriverMap') -> "NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< BinMDF_ADriver >,TColStd_MapTransientHasher > &":
        return _BinMDF.BinMDF_TypeADriverMap_Assign(self, theOther)

    def Set(self, theOther: 'BinMDF_TypeADriverMap') -> "NCollection_DataMap< opencascade::handle< Standard_Type >,opencascade::handle< BinMDF_ADriver >,TColStd_MapTransientHasher > &":
        return _BinMDF.BinMDF_TypeADriverMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _BinMDF.BinMDF_TypeADriverMap_ReSize(self, N)

    def Bind(self, theKey: 'opencascade::handle< Standard_Type > const &', theItem: 'opencascade::handle< BinMDF_ADriver > const &') -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeADriverMap_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'opencascade::handle< Standard_Type > const &', theItem: 'opencascade::handle< BinMDF_ADriver > const &') -> "opencascade::handle< BinMDF_ADriver > *":
        return _BinMDF.BinMDF_TypeADriverMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'opencascade::handle< Standard_Type > const &') -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeADriverMap_IsBound(self, theKey)

    def UnBind(self, theKey: 'opencascade::handle< Standard_Type > const &') -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeADriverMap_UnBind(self, theKey)

    def Seek(self, theKey: 'opencascade::handle< Standard_Type > const &') -> "opencascade::handle< BinMDF_ADriver > const *":
        return _BinMDF.BinMDF_TypeADriverMap_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeADriverMap_Find(self, *args)

    def ChangeSeek(self, theKey: 'opencascade::handle< Standard_Type > const &') -> "opencascade::handle< BinMDF_ADriver > *":
        return _BinMDF.BinMDF_TypeADriverMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'opencascade::handle< Standard_Type > const &') -> "opencascade::handle< BinMDF_ADriver > &":
        return _BinMDF.BinMDF_TypeADriverMap_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< BinMDF_ADriver > &":
        return _BinMDF.BinMDF_TypeADriverMap___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _BinMDF.BinMDF_TypeADriverMap_Clear(self, *args)
    __swig_destroy__ = _BinMDF.delete_BinMDF_TypeADriverMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _BinMDF.BinMDF_TypeADriverMap_Size(self)
BinMDF_TypeADriverMap_swigregister = _BinMDF.BinMDF_TypeADriverMap_swigregister
BinMDF_TypeADriverMap_swigregister(BinMDF_TypeADriverMap)

class BinMDF_TypeIdMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMDF_TypeIdMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinMDF_TypeIdMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BinMDF.new_BinMDF_TypeIdMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'BinMDF_TypeIdMap') -> "void":
        return _BinMDF.BinMDF_TypeIdMap_Exchange(self, theOther)

    def Assign(self, theOther: 'BinMDF_TypeIdMap') -> "NCollection_DoubleMap< opencascade::handle< Standard_Type >,Standard_Integer,TColStd_MapTransientHasher,TColStd_MapIntegerHasher > &":
        return _BinMDF.BinMDF_TypeIdMap_Assign(self, theOther)

    def Set(self, theOther: 'BinMDF_TypeIdMap') -> "NCollection_DoubleMap< opencascade::handle< Standard_Type >,Standard_Integer,TColStd_MapTransientHasher,TColStd_MapIntegerHasher > &":
        return _BinMDF.BinMDF_TypeIdMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _BinMDF.BinMDF_TypeIdMap_ReSize(self, N)

    def Bind(self, theKey1: 'opencascade::handle< Standard_Type > const &', theKey2: 'int const &') -> "void":
        return _BinMDF.BinMDF_TypeIdMap_Bind(self, theKey1, theKey2)

    def AreBound(self, theKey1: 'opencascade::handle< Standard_Type > const &', theKey2: 'int const &') -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeIdMap_AreBound(self, theKey1, theKey2)

    def IsBound1(self, theKey1: 'opencascade::handle< Standard_Type > const &') -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeIdMap_IsBound1(self, theKey1)

    def IsBound2(self, theKey2: 'int const &') -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeIdMap_IsBound2(self, theKey2)

    def UnBind1(self, theKey1: 'opencascade::handle< Standard_Type > const &') -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeIdMap_UnBind1(self, theKey1)

    def UnBind2(self, theKey2: 'int const &') -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeIdMap_UnBind2(self, theKey2)

    def Find1(self, *args) -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeIdMap_Find1(self, *args)

    def Seek1(self, theKey1: 'opencascade::handle< Standard_Type > const &') -> "int const *":
        return _BinMDF.BinMDF_TypeIdMap_Seek1(self, theKey1)

    def Find2(self, *args) -> "Standard_Boolean":
        return _BinMDF.BinMDF_TypeIdMap_Find2(self, *args)

    def Seek2(self, theKey2: 'int const &') -> "opencascade::handle< Standard_Type > const *":
        return _BinMDF.BinMDF_TypeIdMap_Seek2(self, theKey2)

    def Clear(self, *args) -> "void":
        return _BinMDF.BinMDF_TypeIdMap_Clear(self, *args)
    __swig_destroy__ = _BinMDF.delete_BinMDF_TypeIdMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _BinMDF.BinMDF_TypeIdMap_Size(self)
BinMDF_TypeIdMap_swigregister = _BinMDF.BinMDF_TypeIdMap_swigregister
BinMDF_TypeIdMap_swigregister(BinMDF_TypeIdMap)

class binmdf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, binmdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, binmdf, name)
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        Adds the attribute storage drivers to <adrivertable>.

        Parameters
        ----------
        aDriverTable: BinMDF_ADriverTable
        aMsgDrv: Message_Messenger

        Returns
        -------
        None

        """
        return _BinMDF.binmdf_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    __repr__ = _dumps_object


    def __init__(self):
        this = _BinMDF.new_binmdf()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDF.delete_binmdf
    __del__ = lambda self: None
binmdf_swigregister = _BinMDF.binmdf_swigregister
binmdf_swigregister(binmdf)

def binmdf_AddDrivers(*args) -> "void":
    """
    Adds the attribute storage drivers to <adrivertable>.

    Parameters
    ----------
    aDriverTable: BinMDF_ADriverTable
    aMsgDrv: Message_Messenger

    Returns
    -------
    None

    """
    return _BinMDF.binmdf_AddDrivers(*args)

class BinMDF_ADriver(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMDF_ADriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMDF_ADriver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MessageDriver(self, *args) -> "opencascade::handle< Message_Messenger > const &":
        """
        Returns the current message driver of this driver.

        Returns
        -------
        opencascade::handle<Message_Messenger>

        """
        return _BinMDF.BinMDF_ADriver_MessageDriver(self, *args)


    def NewEmpty(self, *args) -> "opencascade::handle< TDF_Attribute >":
        """
        Creates a new attribute from tdf.

        Returns
        -------
        opencascade::handle<TDF_Attribute>

        """
        return _BinMDF.BinMDF_ADriver_NewEmpty(self, *args)


    def Paste(self, *args) -> "void":
        """
        Translate the contents of <asource> and put it into <atarget>, using the relocation table <areloctable> to keep the sharings.

        Parameters
        ----------
        aSource: BinObjMgt_Persistent
        aTarget: TDF_Attribute
        aRelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        Translate the contents of <asource> and put it into <atarget>, using the relocation table <areloctable> to keep the sharings.

        Parameters
        ----------
        aSource: TDF_Attribute
        aTarget: BinObjMgt_Persistent
        aRelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMDF.BinMDF_ADriver_Paste(self, *args)


    def SourceType(self, *args) -> "opencascade::handle< Standard_Type > const &":
        """
        Returns the type of source object, inheriting from attribute from tdf.

        Returns
        -------
        opencascade::handle<Standard_Type>

        """
        return _BinMDF.BinMDF_ADriver_SourceType(self, *args)


    def TypeName(self, *args) -> "TCollection_AsciiString const &":
        """
        Returns the type name of the attribute object.

        Returns
        -------
        TCollection_AsciiString

        """
        return _BinMDF.BinMDF_ADriver_TypeName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_ADriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_ADriver
    __del__ = lambda self: None
BinMDF_ADriver_swigregister = _BinMDF.BinMDF_ADriver_swigregister
BinMDF_ADriver_swigregister(BinMDF_ADriver)

class BinMDF_ADriverTable(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMDF_ADriverTable, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMDF_ADriverTable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Returns
        -------
        None

        """
        this = _BinMDF.new_BinMDF_ADriverTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddDerivedDriver(self, *args) -> "opencascade::handle< Standard_Type > const &":
        """
        Adds a translation driver for the derived attribute. the base driver must be already added. @param theinstance is newly created attribute, detached from any label.

        Parameters
        ----------
        theInstance: TDF_Attribute

        Returns
        -------
        None

        Adds a translation driver for the derived attribute. the base driver must be already added. @param thederivedtype is registered attribute type using implement_derived_attribute macro.

        Parameters
        ----------
        theDerivedType: char *

        Returns
        -------
        opencascade::handle<Standard_Type>

        """
        return _BinMDF.BinMDF_ADriverTable_AddDerivedDriver(self, *args)


    def AddDriver(self, *args) -> "void":
        """
        Adds a translation driver <thedriver>.

        Parameters
        ----------
        theDriver: BinMDF_ADriver

        Returns
        -------
        None

        """
        return _BinMDF.BinMDF_ADriverTable_AddDriver(self, *args)


    def AssignIds(self, *args) -> "void":
        """
        Assigns the ids to the drivers of the given types. it uses indices in the map as ids. useful in storage procedure.

        Parameters
        ----------
        theTypes: TColStd_IndexedMapOfTransient

        Returns
        -------
        None

        Assigns the ids to the drivers of the given type names; it uses indices in the sequence as ids. useful in retrieval procedure.

        Parameters
        ----------
        theTypeNames: TColStd_SequenceOfAsciiString

        Returns
        -------
        None

        """
        return _BinMDF.BinMDF_ADriverTable_AssignIds(self, *args)


    def GetDriver(self, *args) -> "opencascade::handle< BinMDF_ADriver >":
        """
        Gets a driver <thedriver> according to <thetype>. returns type id if the driver was assigned an id; 0 otherwise.

        Parameters
        ----------
        theType: Standard_Type
        theDriver: BinMDF_ADriver

        Returns
        -------
        int

        Returns a driver according to <thetypeid>. returns null handle if a driver is not found.

        Parameters
        ----------
        theTypeId: int

        Returns
        -------
        opencascade::handle<BinMDF_ADriver>

        """
        return _BinMDF.BinMDF_ADriverTable_GetDriver(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_ADriverTable_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_ADriverTable
    __del__ = lambda self: None
BinMDF_ADriverTable_swigregister = _BinMDF.BinMDF_ADriverTable_swigregister
BinMDF_ADriverTable_swigregister(BinMDF_ADriverTable)

class BinMDF_DerivedDriver(BinMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [BinMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMDF_DerivedDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [BinMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMDF_DerivedDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a derivative persistence driver for thederivative attribute by reusage of thebasedriver @param thederivative an instance of the attribute, just created, detached from any label @param thebasedriver a driver of the base attribute, called by paste methods.

        Parameters
        ----------
        theDerivative: TDF_Attribute
        theBaseDriver: BinMDF_ADriver

        Returns
        -------
        None

        """
        this = _BinMDF.new_BinMDF_DerivedDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        Reuses the base driver to read the base fields.

        Parameters
        ----------
        theSource: BinObjMgt_Persistent
        theTarget: TDF_Attribute
        theRelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        Reuses the base driver to store the base fields.

        Parameters
        ----------
        theSource: TDF_Attribute
        theTarget: BinObjMgt_Persistent
        theRelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMDF.BinMDF_DerivedDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_DerivedDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_DerivedDriver
    __del__ = lambda self: None
BinMDF_DerivedDriver_swigregister = _BinMDF.BinMDF_DerivedDriver_swigregister
BinMDF_DerivedDriver_swigregister(BinMDF_DerivedDriver)

class BinMDF_ReferenceDriver(BinMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [BinMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMDF_ReferenceDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [BinMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMDF_ReferenceDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _BinMDF.new_BinMDF_ReferenceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMDF.BinMDF_ReferenceDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_ReferenceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_ReferenceDriver
    __del__ = lambda self: None
BinMDF_ReferenceDriver_swigregister = _BinMDF.BinMDF_ReferenceDriver_swigregister
BinMDF_ReferenceDriver_swigregister(BinMDF_ReferenceDriver)

class BinMDF_TagSourceDriver(BinMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [BinMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinMDF_TagSourceDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [BinMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinMDF_TagSourceDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _BinMDF.new_BinMDF_TagSourceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: BinObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: BinObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: BinObjMgt_Persistent
        RelocTable: BinObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _BinMDF.BinMDF_TagSourceDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_BinMDF_TagSourceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinMDF.delete_BinMDF_TagSourceDriver
    __del__ = lambda self: None
BinMDF_TagSourceDriver_swigregister = _BinMDF.BinMDF_TagSourceDriver_swigregister
BinMDF_TagSourceDriver_swigregister(BinMDF_TagSourceDriver)


BinMDF_StringIdMap=OCC.Core.TColStd.TColStd_DataMapOfAsciiStringInteger

# This file is compatible with both classic and new-style classes.


