# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Contap module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_contap.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Contap')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Contap')
    _Contap = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Contap', [dirname(__file__)])
        except ImportError:
            import _Contap
            return _Contap
        try:
            _mod = imp.load_module('_Contap', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Contap = swig_import_helper()
    del swig_import_helper
else:
    import _Contap
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Contap.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Contap.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Contap.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Contap.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Contap.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Contap.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Contap.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Contap.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Contap.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Contap.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Contap.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Contap.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Contap.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Contap.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Contap.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Contap.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Contap.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Contap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Contap.process_exception(error, method_name, class_name)
process_exception = _Contap.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.IntSurf
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d

from enum import IntEnum
from OCC.Core.Exception import *

Contap_Lin = _Contap.Contap_Lin
Contap_Circle = _Contap.Contap_Circle
Contap_Walking = _Contap.Contap_Walking
Contap_Restriction = _Contap.Contap_Restriction
Contap_ContourStd = _Contap.Contap_ContourStd
Contap_ContourPrs = _Contap.Contap_ContourPrs
Contap_DraftStd = _Contap.Contap_DraftStd
Contap_DraftPrs = _Contap.Contap_DraftPrs


class Contap_IType(IntEnum):
	Contap_Lin = 0
	Contap_Circle = 1
	Contap_Walking = 2
	Contap_Restriction = 3
Contap_Lin = Contap_IType.Contap_Lin
Contap_Circle = Contap_IType.Contap_Circle
Contap_Walking = Contap_IType.Contap_Walking
Contap_Restriction = Contap_IType.Contap_Restriction

class Contap_TFunction(IntEnum):
	Contap_ContourStd = 0
	Contap_ContourPrs = 1
	Contap_DraftStd = 2
	Contap_DraftPrs = 3
Contap_ContourStd = Contap_TFunction.Contap_ContourStd
Contap_ContourPrs = Contap_TFunction.Contap_ContourPrs
Contap_DraftStd = Contap_TFunction.Contap_DraftStd
Contap_DraftPrs = Contap_TFunction.Contap_DraftPrs


def Handle_Contap_TheIWLineOfTheIWalking_Create() -> "opencascade::handle< Contap_TheIWLineOfTheIWalking >":
    return _Contap.Handle_Contap_TheIWLineOfTheIWalking_Create()
Handle_Contap_TheIWLineOfTheIWalking_Create = _Contap.Handle_Contap_TheIWLineOfTheIWalking_Create

def Handle_Contap_TheIWLineOfTheIWalking_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Contap_TheIWLineOfTheIWalking >":
    return _Contap.Handle_Contap_TheIWLineOfTheIWalking_DownCast(t)
Handle_Contap_TheIWLineOfTheIWalking_DownCast = _Contap.Handle_Contap_TheIWLineOfTheIWalking_DownCast

def Handle_Contap_TheIWLineOfTheIWalking_IsNull(t: 'opencascade::handle< Contap_TheIWLineOfTheIWalking > const &') -> "bool":
    return _Contap.Handle_Contap_TheIWLineOfTheIWalking_IsNull(t)
Handle_Contap_TheIWLineOfTheIWalking_IsNull = _Contap.Handle_Contap_TheIWLineOfTheIWalking_IsNull

def Handle_Contap_TheHSequenceOfPoint_Create() -> "opencascade::handle< Contap_TheHSequenceOfPoint >":
    return _Contap.Handle_Contap_TheHSequenceOfPoint_Create()
Handle_Contap_TheHSequenceOfPoint_Create = _Contap.Handle_Contap_TheHSequenceOfPoint_Create

def Handle_Contap_TheHSequenceOfPoint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Contap_TheHSequenceOfPoint >":
    return _Contap.Handle_Contap_TheHSequenceOfPoint_DownCast(t)
Handle_Contap_TheHSequenceOfPoint_DownCast = _Contap.Handle_Contap_TheHSequenceOfPoint_DownCast

def Handle_Contap_TheHSequenceOfPoint_IsNull(t: 'opencascade::handle< Contap_TheHSequenceOfPoint > const &') -> "bool":
    return _Contap.Handle_Contap_TheHSequenceOfPoint_IsNull(t)
Handle_Contap_TheHSequenceOfPoint_IsNull = _Contap.Handle_Contap_TheHSequenceOfPoint_IsNull
class Contap_SequenceOfIWLineOfTheIWalking(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_SequenceOfIWLineOfTheIWalking, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_SequenceOfIWLineOfTheIWalking, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Contap_TheIWLineOfTheIWalking > >::iterator":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Contap_TheIWLineOfTheIWalking > >::iterator":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Contap_TheIWLineOfTheIWalking > >::const_iterator":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Contap_TheIWLineOfTheIWalking > >::const_iterator":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_cend(self)

    def __init__(self, *args):
        this = _Contap.new_Contap_SequenceOfIWLineOfTheIWalking(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Contap.Contap_SequenceOfIWLineOfTheIWalking_delNode)
    else:
        delNode = _Contap.Contap_SequenceOfIWLineOfTheIWalking_delNode

    def Clear(self, theAllocator: 'IntSurf_Allocator'=0) -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Clear(self, theAllocator)

    def Assign(self, theOther: 'Contap_SequenceOfIWLineOfTheIWalking') -> "NCollection_Sequence< opencascade::handle< Contap_TheIWLineOfTheIWalking > > &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Assign(self, theOther)

    def Set(self, theOther: 'Contap_SequenceOfIWLineOfTheIWalking') -> "NCollection_Sequence< opencascade::handle< Contap_TheIWLineOfTheIWalking > > &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Contap_SequenceOfIWLineOfTheIWalking') -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > const &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > const &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > const &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > &":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Contap_TheIWLineOfTheIWalking > const &') -> "void":
        return _Contap.Contap_SequenceOfIWLineOfTheIWalking_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Contap.delete_Contap_SequenceOfIWLineOfTheIWalking
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Contap_SequenceOfIWLineOfTheIWalking_swigregister = _Contap.Contap_SequenceOfIWLineOfTheIWalking_swigregister
Contap_SequenceOfIWLineOfTheIWalking_swigregister(Contap_SequenceOfIWLineOfTheIWalking)

def Contap_SequenceOfIWLineOfTheIWalking_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_SequenceOfIWLineOfTheIWalking_delNode(theNode, theAl)
Contap_SequenceOfIWLineOfTheIWalking_delNode = _Contap.Contap_SequenceOfIWLineOfTheIWalking_delNode

class Contap_SequenceOfPathPointOfTheSearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_SequenceOfPathPointOfTheSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_SequenceOfPathPointOfTheSearch, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Contap_ThePathPointOfTheSearch >::iterator":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_begin(self)

    def end(self) -> "NCollection_Sequence< Contap_ThePathPointOfTheSearch >::iterator":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_end(self)

    def cbegin(self) -> "NCollection_Sequence< Contap_ThePathPointOfTheSearch >::const_iterator":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Contap_ThePathPointOfTheSearch >::const_iterator":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_cend(self)

    def __init__(self, *args):
        this = _Contap.new_Contap_SequenceOfPathPointOfTheSearch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Contap.Contap_SequenceOfPathPointOfTheSearch_delNode)
    else:
        delNode = _Contap.Contap_SequenceOfPathPointOfTheSearch_delNode

    def Clear(self, theAllocator: 'IntSurf_Allocator'=0) -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Clear(self, theAllocator)

    def Assign(self, theOther: 'Contap_SequenceOfPathPointOfTheSearch') -> "NCollection_Sequence< Contap_ThePathPointOfTheSearch > &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Assign(self, theOther)

    def Set(self, theOther: 'Contap_SequenceOfPathPointOfTheSearch') -> "NCollection_Sequence< Contap_ThePathPointOfTheSearch > &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Contap_SequenceOfPathPointOfTheSearch') -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Split(self, theIndex, theSeq)

    def First(self) -> "Contap_ThePathPointOfTheSearch const &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_First(self)

    def ChangeFirst(self) -> "Contap_ThePathPointOfTheSearch &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_ChangeFirst(self)

    def Last(self) -> "Contap_ThePathPointOfTheSearch const &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Last(self)

    def ChangeLast(self) -> "Contap_ThePathPointOfTheSearch &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Contap_ThePathPointOfTheSearch const &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Contap_ThePathPointOfTheSearch &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Contap_ThePathPointOfTheSearch &":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Contap_ThePathPointOfTheSearch') -> "void":
        return _Contap.Contap_SequenceOfPathPointOfTheSearch_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Contap.delete_Contap_SequenceOfPathPointOfTheSearch
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Contap_SequenceOfPathPointOfTheSearch_swigregister = _Contap.Contap_SequenceOfPathPointOfTheSearch_swigregister
Contap_SequenceOfPathPointOfTheSearch_swigregister(Contap_SequenceOfPathPointOfTheSearch)

def Contap_SequenceOfPathPointOfTheSearch_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_SequenceOfPathPointOfTheSearch_delNode(theNode, theAl)
Contap_SequenceOfPathPointOfTheSearch_delNode = _Contap.Contap_SequenceOfPathPointOfTheSearch_delNode

class Contap_SequenceOfSegmentOfTheSearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_SequenceOfSegmentOfTheSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_SequenceOfSegmentOfTheSearch, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Contap_TheSegmentOfTheSearch >::iterator":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_begin(self)

    def end(self) -> "NCollection_Sequence< Contap_TheSegmentOfTheSearch >::iterator":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_end(self)

    def cbegin(self) -> "NCollection_Sequence< Contap_TheSegmentOfTheSearch >::const_iterator":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Contap_TheSegmentOfTheSearch >::const_iterator":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_cend(self)

    def __init__(self, *args):
        this = _Contap.new_Contap_SequenceOfSegmentOfTheSearch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Contap.Contap_SequenceOfSegmentOfTheSearch_delNode)
    else:
        delNode = _Contap.Contap_SequenceOfSegmentOfTheSearch_delNode

    def Clear(self, theAllocator: 'IntSurf_Allocator'=0) -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Clear(self, theAllocator)

    def Assign(self, theOther: 'Contap_SequenceOfSegmentOfTheSearch') -> "NCollection_Sequence< Contap_TheSegmentOfTheSearch > &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Assign(self, theOther)

    def Set(self, theOther: 'Contap_SequenceOfSegmentOfTheSearch') -> "NCollection_Sequence< Contap_TheSegmentOfTheSearch > &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Contap_SequenceOfSegmentOfTheSearch') -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Split(self, theIndex, theSeq)

    def First(self) -> "Contap_TheSegmentOfTheSearch const &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_First(self)

    def ChangeFirst(self) -> "Contap_TheSegmentOfTheSearch &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_ChangeFirst(self)

    def Last(self) -> "Contap_TheSegmentOfTheSearch const &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Last(self)

    def ChangeLast(self) -> "Contap_TheSegmentOfTheSearch &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Contap_TheSegmentOfTheSearch const &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Contap_TheSegmentOfTheSearch &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Contap_TheSegmentOfTheSearch &":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Contap_TheSegmentOfTheSearch') -> "void":
        return _Contap.Contap_SequenceOfSegmentOfTheSearch_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Contap.delete_Contap_SequenceOfSegmentOfTheSearch
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Contap_SequenceOfSegmentOfTheSearch_swigregister = _Contap.Contap_SequenceOfSegmentOfTheSearch_swigregister
Contap_SequenceOfSegmentOfTheSearch_swigregister(Contap_SequenceOfSegmentOfTheSearch)

def Contap_SequenceOfSegmentOfTheSearch_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_SequenceOfSegmentOfTheSearch_delNode(theNode, theAl)
Contap_SequenceOfSegmentOfTheSearch_delNode = _Contap.Contap_SequenceOfSegmentOfTheSearch_delNode

class Contap_TheSequenceOfLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_TheSequenceOfLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_TheSequenceOfLine, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Contap_Line >::iterator":
        return _Contap.Contap_TheSequenceOfLine_begin(self)

    def end(self) -> "NCollection_Sequence< Contap_Line >::iterator":
        return _Contap.Contap_TheSequenceOfLine_end(self)

    def cbegin(self) -> "NCollection_Sequence< Contap_Line >::const_iterator":
        return _Contap.Contap_TheSequenceOfLine_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Contap_Line >::const_iterator":
        return _Contap.Contap_TheSequenceOfLine_cend(self)

    def __init__(self, *args):
        this = _Contap.new_Contap_TheSequenceOfLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Contap.Contap_TheSequenceOfLine_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Contap.Contap_TheSequenceOfLine_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Contap.Contap_TheSequenceOfLine_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Contap.Contap_TheSequenceOfLine_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Contap.Contap_TheSequenceOfLine_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Contap.Contap_TheSequenceOfLine_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Contap.Contap_TheSequenceOfLine_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Contap.Contap_TheSequenceOfLine_delNode)
    else:
        delNode = _Contap.Contap_TheSequenceOfLine_delNode

    def Clear(self, theAllocator: 'IntSurf_Allocator'=0) -> "void":
        return _Contap.Contap_TheSequenceOfLine_Clear(self, theAllocator)

    def Assign(self, theOther: 'Contap_TheSequenceOfLine') -> "NCollection_Sequence< Contap_Line > &":
        return _Contap.Contap_TheSequenceOfLine_Assign(self, theOther)

    def Set(self, theOther: 'Contap_TheSequenceOfLine') -> "NCollection_Sequence< Contap_Line > &":
        return _Contap.Contap_TheSequenceOfLine_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfLine_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfLine_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfLine_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfLine_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfLine_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Contap_TheSequenceOfLine') -> "void":
        return _Contap.Contap_TheSequenceOfLine_Split(self, theIndex, theSeq)

    def First(self) -> "Contap_Line const &":
        return _Contap.Contap_TheSequenceOfLine_First(self)

    def ChangeFirst(self) -> "Contap_Line &":
        return _Contap.Contap_TheSequenceOfLine_ChangeFirst(self)

    def Last(self) -> "Contap_Line const &":
        return _Contap.Contap_TheSequenceOfLine_Last(self)

    def ChangeLast(self) -> "Contap_Line &":
        return _Contap.Contap_TheSequenceOfLine_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Contap_Line const &":
        return _Contap.Contap_TheSequenceOfLine_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Contap_Line &":
        return _Contap.Contap_TheSequenceOfLine_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Contap_Line &":
        return _Contap.Contap_TheSequenceOfLine___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Contap_Line') -> "void":
        return _Contap.Contap_TheSequenceOfLine_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Contap.delete_Contap_TheSequenceOfLine
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Contap_TheSequenceOfLine_swigregister = _Contap.Contap_TheSequenceOfLine_swigregister
Contap_TheSequenceOfLine_swigregister(Contap_TheSequenceOfLine)

def Contap_TheSequenceOfLine_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_TheSequenceOfLine_delNode(theNode, theAl)
Contap_TheSequenceOfLine_delNode = _Contap.Contap_TheSequenceOfLine_delNode

class Contap_TheSequenceOfPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_TheSequenceOfPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_TheSequenceOfPoint, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< Contap_Point >::iterator":
        return _Contap.Contap_TheSequenceOfPoint_begin(self)

    def end(self) -> "NCollection_Sequence< Contap_Point >::iterator":
        return _Contap.Contap_TheSequenceOfPoint_end(self)

    def cbegin(self) -> "NCollection_Sequence< Contap_Point >::const_iterator":
        return _Contap.Contap_TheSequenceOfPoint_cbegin(self)

    def cend(self) -> "NCollection_Sequence< Contap_Point >::const_iterator":
        return _Contap.Contap_TheSequenceOfPoint_cend(self)

    def __init__(self, *args):
        this = _Contap.new_Contap_TheSequenceOfPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Contap.Contap_TheSequenceOfPoint_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Contap.Contap_TheSequenceOfPoint_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Contap.Contap_TheSequenceOfPoint_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Contap.Contap_TheSequenceOfPoint_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Contap.Contap_TheSequenceOfPoint_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Contap.Contap_TheSequenceOfPoint_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Contap.Contap_TheSequenceOfPoint_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Contap.Contap_TheSequenceOfPoint_delNode)
    else:
        delNode = _Contap.Contap_TheSequenceOfPoint_delNode

    def Clear(self, theAllocator: 'IntSurf_Allocator'=0) -> "void":
        return _Contap.Contap_TheSequenceOfPoint_Clear(self, theAllocator)

    def Assign(self, theOther: 'Contap_TheSequenceOfPoint') -> "NCollection_Sequence< Contap_Point > &":
        return _Contap.Contap_TheSequenceOfPoint_Assign(self, theOther)

    def Set(self, theOther: 'Contap_TheSequenceOfPoint') -> "NCollection_Sequence< Contap_Point > &":
        return _Contap.Contap_TheSequenceOfPoint_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfPoint_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfPoint_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfPoint_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfPoint_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Contap.Contap_TheSequenceOfPoint_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Contap_TheSequenceOfPoint') -> "void":
        return _Contap.Contap_TheSequenceOfPoint_Split(self, theIndex, theSeq)

    def First(self) -> "Contap_Point const &":
        return _Contap.Contap_TheSequenceOfPoint_First(self)

    def ChangeFirst(self) -> "Contap_Point &":
        return _Contap.Contap_TheSequenceOfPoint_ChangeFirst(self)

    def Last(self) -> "Contap_Point const &":
        return _Contap.Contap_TheSequenceOfPoint_Last(self)

    def ChangeLast(self) -> "Contap_Point &":
        return _Contap.Contap_TheSequenceOfPoint_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "Contap_Point const &":
        return _Contap.Contap_TheSequenceOfPoint_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "Contap_Point &":
        return _Contap.Contap_TheSequenceOfPoint_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "Contap_Point &":
        return _Contap.Contap_TheSequenceOfPoint___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'Contap_Point') -> "void":
        return _Contap.Contap_TheSequenceOfPoint_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Contap.delete_Contap_TheSequenceOfPoint
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Contap_TheSequenceOfPoint_swigregister = _Contap.Contap_TheSequenceOfPoint_swigregister
Contap_TheSequenceOfPoint_swigregister(Contap_TheSequenceOfPoint)

def Contap_TheSequenceOfPoint_delNode(theNode: 'NCollection_SeqNode *', theAl: 'IntSurf_Allocator') -> "void":
    return _Contap.Contap_TheSequenceOfPoint_delNode(theNode, theAl)
Contap_TheSequenceOfPoint_delNode = _Contap.Contap_TheSequenceOfPoint_delNode

class Contap_ArcFunction(OCC.Core.math.math_FunctionWithDerivative):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_ArcFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_ArcFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_ArcFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LastComputedPoint(self, *args) -> "gp_Pnt const":
        """
        Returns the point, which has been computed while the last calling value() method.

        Returns
        -------
        gp_Pnt

        """
        return _Contap.Contap_ArcFunction_LastComputedPoint(self, *args)


    def NbSamples(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Contap.Contap_ArcFunction_NbSamples(self, *args)


    def Quadric(self, *args) -> "IntSurf_Quadric const &":
        """
        No available documentation.

        Returns
        -------
        IntSurf_Quadric

        """
        return _Contap.Contap_ArcFunction_Quadric(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Direction: gp_Dir

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Direction: gp_Dir
        Angle: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Eye: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Eye: gp_Pnt
        Angle: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: Adaptor2d_HCurve2d

        Returns
        -------
        None

        """
        return _Contap.Contap_ArcFunction_Set(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        Returns mysurf field.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Contap.Contap_ArcFunction_Surface(self, *args)


    def Valpoint(self, *args) -> "gp_Pnt const":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _Contap.Contap_ArcFunction_Valpoint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_ArcFunction
    __del__ = lambda self: None
Contap_ArcFunction_swigregister = _Contap.Contap_ArcFunction_swigregister
Contap_ArcFunction_swigregister(Contap_ArcFunction)

class Contap_ContAna(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_ContAna, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_ContAna, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_ContAna(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Circle(self, *args) -> "gp_Circ":
        """
        No available documentation.

        Returns
        -------
        gp_Circ

        """
        return _Contap.Contap_ContAna_Circle(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Contap.Contap_ContAna_IsDone(self, *args)


    def Line(self, *args) -> "gp_Lin":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        gp_Lin

        """
        return _Contap.Contap_ContAna_Line(self, *args)


    def NbContours(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Contap.Contap_ContAna_NbContours(self, *args)


    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: gp_Sphere
        D: gp_Dir

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Sphere
        D: gp_Dir
        Ang: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: gp_Sphere
        Eye: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Cylinder
        D: gp_Dir

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Cylinder
        D: gp_Dir
        Ang: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Cylinder
        Eye: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Cone
        D: gp_Dir

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Cone
        D: gp_Dir
        Ang: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Cone
        Eye: gp_Pnt

        Returns
        -------
        None

        """
        return _Contap.Contap_ContAna_Perform(self, *args)


    def TypeContour(self, *args) -> "GeomAbs_CurveType":
        """
        Returns geomabs_line or geomabs_circle, when isdone() returns true.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _Contap.Contap_ContAna_TypeContour(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_ContAna
    __del__ = lambda self: None
Contap_ContAna_swigregister = _Contap.Contap_ContAna_swigregister
Contap_ContAna_swigregister(Contap_ContAna)

class Contap_Contour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_Contour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_Contour, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Direction: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Direction: gp_Vec
        Angle: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Eye: gp_Pnt

        Returns
        -------
        None

        Creates the contour in a given direction.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        Domain: Adaptor3d_TopolTool
        Direction: gp_Vec

        Returns
        -------
        None

        Creates the contour in a given direction.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        Domain: Adaptor3d_TopolTool
        Direction: gp_Vec
        Angle: float

        Returns
        -------
        None

        Creates the contour for a perspective view.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        Domain: Adaptor3d_TopolTool
        Eye: gp_Pnt

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_Contour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Direction: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Direction: gp_Vec
        Angle: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Eye: gp_Pnt

        Returns
        -------
        None

        """
        return _Contap.Contap_Contour_Init(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Contap.Contap_Contour_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        Returns true if the is no line.

        Returns
        -------
        bool

        """
        return _Contap.Contap_Contour_IsEmpty(self, *args)


    def Line(self, *args) -> "Contap_Line const &":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Contap_Line

        """
        return _Contap.Contap_Contour_Line(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Contap.Contap_Contour_NbLines(self, *args)


    def Perform(self, *args) -> "void":
        """
        Creates the contour in a given direction.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        Domain: Adaptor3d_TopolTool

        Returns
        -------
        None

        Creates the contour in a given direction.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        Domain: Adaptor3d_TopolTool
        Direction: gp_Vec

        Returns
        -------
        None

        Creates the contour in a given direction.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        Domain: Adaptor3d_TopolTool
        Direction: gp_Vec
        Angle: float

        Returns
        -------
        None

        Creates the contour for a perspective view.

        Parameters
        ----------
        Surf: Adaptor3d_HSurface
        Domain: Adaptor3d_TopolTool
        Eye: gp_Pnt

        Returns
        -------
        None

        """
        return _Contap.Contap_Contour_Perform(self, *args)


    def SurfaceFunction(self, *args) -> "Contap_SurfFunction &":
        """
        Returns a reference on the internal surfacefunction. this is used to compute tangents on the lines.

        Returns
        -------
        Contap_SurfFunction

        """
        return _Contap.Contap_Contour_SurfaceFunction(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_Contour
    __del__ = lambda self: None
Contap_Contour_swigregister = _Contap.Contap_Contour_swigregister
Contap_Contour_swigregister(Contap_Contour)

class Contap_HContTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_HContTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_HContTool, name)
    __repr__ = _swig_repr

    def Bounds(*args) -> "Standard_Real &, Standard_Real &":
        """
        Returns the parametric limits on the arc c. these limits must be finite : they are either the real limits of the arc, for a finite arc, or a bounding box for an infinite arc.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        Ufirst: float
        Ulast: float

        """
        return _Contap.Contap_HContTool_Bounds(*args)

    Bounds = staticmethod(Bounds)

    def HasBeenSeen(*args) -> "Standard_Boolean":
        """
        Returns true if all the intersection point and edges are known on the arc. the intersection point are given as vertices. the intersection edges are given as intervals between two vertices.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        bool

        """
        return _Contap.Contap_HContTool_HasBeenSeen(*args)

    HasBeenSeen = staticmethod(HasBeenSeen)

    def HasFirstPoint(*args) -> "Standard_Integer &":
        """
        Returns true when the segment of range index is not open at the left side. in that case, indfirst is the range in the list intersection points (see nbpoints) of the one which defines the left bound of the segment. otherwise, the method has to return false, and indfirst has no meaning.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        Index: int

        Returns
        -------
        IndFirst: int

        """
        return _Contap.Contap_HContTool_HasFirstPoint(*args)

    HasFirstPoint = staticmethod(HasFirstPoint)

    def HasLastPoint(*args) -> "Standard_Integer &":
        """
        Returns true when the segment of range index is not open at the right side. in that case, indlast is the range in the list intersection points (see nbpoints) of the one which defines the right bound of the segment. otherwise, the method has to return false, and indlast has no meaning.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        Index: int

        Returns
        -------
        IndLast: int

        """
        return _Contap.Contap_HContTool_HasLastPoint(*args)

    HasLastPoint = staticmethod(HasLastPoint)

    def IsAllSolution(*args) -> "Standard_Boolean":
        """
        Returns true when the whole restriction is solution of the intersection problem.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        bool

        """
        return _Contap.Contap_HContTool_IsAllSolution(*args)

    IsAllSolution = staticmethod(IsAllSolution)

    def IsVertex(*args) -> "Standard_Boolean":
        """
        Returns true if the intersection point of range index corresponds with a vertex on the arc a.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        Index: int

        Returns
        -------
        bool

        """
        return _Contap.Contap_HContTool_IsVertex(*args)

    IsVertex = staticmethod(IsVertex)

    def NbPoints(*args) -> "Standard_Integer":
        """
        Returns the number of intersection points on the arc a.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        int

        """
        return _Contap.Contap_HContTool_NbPoints(*args)

    NbPoints = staticmethod(NbPoints)

    def NbSamplePoints(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        int

        """
        return _Contap.Contap_HContTool_NbSamplePoints(*args)

    NbSamplePoints = staticmethod(NbSamplePoints)

    def NbSamplesOnArc(*args) -> "Standard_Integer":
        """
        Returns the number of points which is used to make a sample on the arc. this number is a function of the surface and the curveonsurface complexity.

        Parameters
        ----------
        A: Adaptor2d_HCurve2d

        Returns
        -------
        int

        """
        return _Contap.Contap_HContTool_NbSamplesOnArc(*args)

    NbSamplesOnArc = staticmethod(NbSamplesOnArc)

    def NbSamplesU(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        u1: float
        u2: float

        Returns
        -------
        int

        """
        return _Contap.Contap_HContTool_NbSamplesU(*args)

    NbSamplesU = staticmethod(NbSamplesU)

    def NbSamplesV(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        v1: float
        v2: float

        Returns
        -------
        int

        """
        return _Contap.Contap_HContTool_NbSamplesV(*args)

    NbSamplesV = staticmethod(NbSamplesV)

    def NbSegments(*args) -> "Standard_Integer":
        """
        Returns the number of part of a solution of the of intersection problem.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        int

        """
        return _Contap.Contap_HContTool_NbSegments(*args)

    NbSegments = staticmethod(NbSegments)

    def Parameter(*args) -> "Standard_Real":
        """
        Returns the parameter of the vertex v on the arc a.

        Parameters
        ----------
        V: Adaptor3d_HVertex
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        """
        return _Contap.Contap_HContTool_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def Project(*args) -> "Standard_Real &":
        """
        Projects the point p on the arc c. if the methods returns standard_true, the projection is successful, and paramproj is the parameter on the arc of the projected point, ptproj is the projected point. if the method returns standard_false, param proj and ptproj are not significant.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        P: gp_Pnt2d
        Ptproj: gp_Pnt2d

        Returns
        -------
        Paramproj: float

        """
        return _Contap.Contap_HContTool_Project(*args)

    Project = staticmethod(Project)

    def SamplePoint(*args) -> "Standard_Real &, Standard_Real &":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        Index: int

        Returns
        -------
        U: float
        V: float

        """
        return _Contap.Contap_HContTool_SamplePoint(*args)

    SamplePoint = staticmethod(SamplePoint)

    def Tolerance(*args) -> "Standard_Real":
        """
        Returns the parametric tolerance used to consider that the vertex and another point meet, i-e if abs(parameter(vertex) - parameter(otherpnt))<= tolerance, the points are 'merged'.

        Parameters
        ----------
        V: Adaptor3d_HVertex
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        """
        return _Contap.Contap_HContTool_Tolerance(*args)

    Tolerance = staticmethod(Tolerance)

    def Value(*args) -> "Standard_Real &, Standard_Real &":
        """
        Returns the value (pt), the tolerance (tol), and the parameter (u) on the arc a , of the intersection point of range index.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        Index: int
        Pt: gp_Pnt

        Returns
        -------
        Tol: float
        U: float

        """
        return _Contap.Contap_HContTool_Value(*args)

    Value = staticmethod(Value)

    def Vertex(*args) -> "void":
        """
        When isvertex returns true, this method returns the vertex on the arc a.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        Index: int
        V: Adaptor3d_HVertex

        Returns
        -------
        None

        """
        return _Contap.Contap_HContTool_Vertex(*args)

    Vertex = staticmethod(Vertex)

    __repr__ = _dumps_object


    def __init__(self):
        this = _Contap.new_Contap_HContTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Contap.delete_Contap_HContTool
    __del__ = lambda self: None
Contap_HContTool_swigregister = _Contap.Contap_HContTool_swigregister
Contap_HContTool_swigregister(Contap_HContTool)

def Contap_HContTool_Bounds(*args) -> "Standard_Real &, Standard_Real &":
    """
    Returns the parametric limits on the arc c. these limits must be finite : they are either the real limits of the arc, for a finite arc, or a bounding box for an infinite arc.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    Ufirst: float
    Ulast: float

    """
    return _Contap.Contap_HContTool_Bounds(*args)

def Contap_HContTool_HasBeenSeen(*args) -> "Standard_Boolean":
    """
    Returns true if all the intersection point and edges are known on the arc. the intersection point are given as vertices. the intersection edges are given as intervals between two vertices.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    bool

    """
    return _Contap.Contap_HContTool_HasBeenSeen(*args)

def Contap_HContTool_HasFirstPoint(*args) -> "Standard_Integer &":
    """
    Returns true when the segment of range index is not open at the left side. in that case, indfirst is the range in the list intersection points (see nbpoints) of the one which defines the left bound of the segment. otherwise, the method has to return false, and indfirst has no meaning.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    Index: int

    Returns
    -------
    IndFirst: int

    """
    return _Contap.Contap_HContTool_HasFirstPoint(*args)

def Contap_HContTool_HasLastPoint(*args) -> "Standard_Integer &":
    """
    Returns true when the segment of range index is not open at the right side. in that case, indlast is the range in the list intersection points (see nbpoints) of the one which defines the right bound of the segment. otherwise, the method has to return false, and indlast has no meaning.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    Index: int

    Returns
    -------
    IndLast: int

    """
    return _Contap.Contap_HContTool_HasLastPoint(*args)

def Contap_HContTool_IsAllSolution(*args) -> "Standard_Boolean":
    """
    Returns true when the whole restriction is solution of the intersection problem.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    bool

    """
    return _Contap.Contap_HContTool_IsAllSolution(*args)

def Contap_HContTool_IsVertex(*args) -> "Standard_Boolean":
    """
    Returns true if the intersection point of range index corresponds with a vertex on the arc a.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    Index: int

    Returns
    -------
    bool

    """
    return _Contap.Contap_HContTool_IsVertex(*args)

def Contap_HContTool_NbPoints(*args) -> "Standard_Integer":
    """
    Returns the number of intersection points on the arc a.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    int

    """
    return _Contap.Contap_HContTool_NbPoints(*args)

def Contap_HContTool_NbSamplePoints(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    int

    """
    return _Contap.Contap_HContTool_NbSamplePoints(*args)

def Contap_HContTool_NbSamplesOnArc(*args) -> "Standard_Integer":
    """
    Returns the number of points which is used to make a sample on the arc. this number is a function of the surface and the curveonsurface complexity.

    Parameters
    ----------
    A: Adaptor2d_HCurve2d

    Returns
    -------
    int

    """
    return _Contap.Contap_HContTool_NbSamplesOnArc(*args)

def Contap_HContTool_NbSamplesU(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    u1: float
    u2: float

    Returns
    -------
    int

    """
    return _Contap.Contap_HContTool_NbSamplesU(*args)

def Contap_HContTool_NbSamplesV(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    v1: float
    v2: float

    Returns
    -------
    int

    """
    return _Contap.Contap_HContTool_NbSamplesV(*args)

def Contap_HContTool_NbSegments(*args) -> "Standard_Integer":
    """
    Returns the number of part of a solution of the of intersection problem.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    int

    """
    return _Contap.Contap_HContTool_NbSegments(*args)

def Contap_HContTool_Parameter(*args) -> "Standard_Real":
    """
    Returns the parameter of the vertex v on the arc a.

    Parameters
    ----------
    V: Adaptor3d_HVertex
    C: Adaptor2d_HCurve2d

    Returns
    -------
    float

    """
    return _Contap.Contap_HContTool_Parameter(*args)

def Contap_HContTool_Project(*args) -> "Standard_Real &":
    """
    Projects the point p on the arc c. if the methods returns standard_true, the projection is successful, and paramproj is the parameter on the arc of the projected point, ptproj is the projected point. if the method returns standard_false, param proj and ptproj are not significant.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    P: gp_Pnt2d
    Ptproj: gp_Pnt2d

    Returns
    -------
    Paramproj: float

    """
    return _Contap.Contap_HContTool_Project(*args)

def Contap_HContTool_SamplePoint(*args) -> "Standard_Real &, Standard_Real &":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    Index: int

    Returns
    -------
    U: float
    V: float

    """
    return _Contap.Contap_HContTool_SamplePoint(*args)

def Contap_HContTool_Tolerance(*args) -> "Standard_Real":
    """
    Returns the parametric tolerance used to consider that the vertex and another point meet, i-e if abs(parameter(vertex) - parameter(otherpnt))<= tolerance, the points are 'merged'.

    Parameters
    ----------
    V: Adaptor3d_HVertex
    C: Adaptor2d_HCurve2d

    Returns
    -------
    float

    """
    return _Contap.Contap_HContTool_Tolerance(*args)

def Contap_HContTool_Value(*args) -> "Standard_Real &, Standard_Real &":
    """
    Returns the value (pt), the tolerance (tol), and the parameter (u) on the arc a , of the intersection point of range index.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    Index: int
    Pt: gp_Pnt

    Returns
    -------
    Tol: float
    U: float

    """
    return _Contap.Contap_HContTool_Value(*args)

def Contap_HContTool_Vertex(*args) -> "void":
    """
    When isvertex returns true, this method returns the vertex on the arc a.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    Index: int
    V: Adaptor3d_HVertex

    Returns
    -------
    None

    """
    return _Contap.Contap_HContTool_Vertex(*args)

class Contap_HCurve2dTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_HCurve2dTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_HCurve2dTool, name)
    __repr__ = _swig_repr

    def BSpline(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _Contap.Contap_HCurve2dTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def Bezier(*args) -> "opencascade::handle< Geom2d_BezierCurve >":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        opencascade::handle<Geom2d_BezierCurve>

        """
        return _Contap.Contap_HCurve2dTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def Circle(*args) -> "gp_Circ2d":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        gp_Circ2d

        """
        return _Contap.Contap_HCurve2dTool_Circle(*args)

    Circle = staticmethod(Circle)

    def Continuity(*args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        GeomAbs_Shape

        """
        return _Contap.Contap_HCurve2dTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def D0(*args) -> "void":
        """
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Contap.Contap_HCurve2dTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args) -> "void":
        """
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Returns
        -------
        None

        """
        return _Contap.Contap_HCurve2dTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Contap.Contap_HCurve2dTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Contap.Contap_HCurve2dTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args) -> "gp_Vec2d":
        """
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Contap.Contap_HCurve2dTool_DN(*args)

    DN = staticmethod(DN)

    def Ellipse(*args) -> "gp_Elips2d":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        gp_Elips2d

        """
        return _Contap.Contap_HCurve2dTool_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def FirstParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        """
        return _Contap.Contap_HCurve2dTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def GetType(*args) -> "GeomAbs_CurveType":
        """
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        GeomAbs_CurveType

        """
        return _Contap.Contap_HCurve2dTool_GetType(*args)

    GetType = staticmethod(GetType)

    def Hyperbola(*args) -> "gp_Hypr2d":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        gp_Hypr2d

        """
        return _Contap.Contap_HCurve2dTool_Hyperbola(*args)

    Hyperbola = staticmethod(Hyperbola)

    def Intervals(*args) -> "void":
        """
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accomodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Contap.Contap_HCurve2dTool_Intervals(*args)

    Intervals = staticmethod(Intervals)

    def IsClosed(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        bool

        """
        return _Contap.Contap_HCurve2dTool_IsClosed(*args)

    IsClosed = staticmethod(IsClosed)

    def IsPeriodic(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        bool

        """
        return _Contap.Contap_HCurve2dTool_IsPeriodic(*args)

    IsPeriodic = staticmethod(IsPeriodic)

    def LastParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        """
        return _Contap.Contap_HCurve2dTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def Line(*args) -> "gp_Lin2d":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        gp_Lin2d

        """
        return _Contap.Contap_HCurve2dTool_Line(*args)

    Line = staticmethod(Line)

    def NbIntervals(*args) -> "Standard_Integer":
        """
        Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Contap.Contap_HCurve2dTool_NbIntervals(*args)

    NbIntervals = staticmethod(NbIntervals)

    def NbSamples(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        U0: float
        U1: float

        Returns
        -------
        int

        """
        return _Contap.Contap_HCurve2dTool_NbSamples(*args)

    NbSamples = staticmethod(NbSamples)

    def Parabola(*args) -> "gp_Parab2d":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        gp_Parab2d

        """
        return _Contap.Contap_HCurve2dTool_Parabola(*args)

    Parabola = staticmethod(Parabola)

    def Period(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        """
        return _Contap.Contap_HCurve2dTool_Period(*args)

    Period = staticmethod(Period)

    def Resolution(*args) -> "Standard_Real":
        """
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        R3d: float

        Returns
        -------
        float

        """
        return _Contap.Contap_HCurve2dTool_Resolution(*args)

    Resolution = staticmethod(Resolution)

    def Value(*args) -> "gp_Pnt2d":
        """
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        U: float

        Returns
        -------
        gp_Pnt2d

        """
        return _Contap.Contap_HCurve2dTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        this = _Contap.new_Contap_HCurve2dTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Contap.delete_Contap_HCurve2dTool
    __del__ = lambda self: None
Contap_HCurve2dTool_swigregister = _Contap.Contap_HCurve2dTool_swigregister
Contap_HCurve2dTool_swigregister(Contap_HCurve2dTool)

def Contap_HCurve2dTool_BSpline(*args) -> "opencascade::handle< Geom2d_BSplineCurve >":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    opencascade::handle<Geom2d_BSplineCurve>

    """
    return _Contap.Contap_HCurve2dTool_BSpline(*args)

def Contap_HCurve2dTool_Bezier(*args) -> "opencascade::handle< Geom2d_BezierCurve >":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    opencascade::handle<Geom2d_BezierCurve>

    """
    return _Contap.Contap_HCurve2dTool_Bezier(*args)

def Contap_HCurve2dTool_Circle(*args) -> "gp_Circ2d":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    gp_Circ2d

    """
    return _Contap.Contap_HCurve2dTool_Circle(*args)

def Contap_HCurve2dTool_Continuity(*args) -> "GeomAbs_Shape":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    GeomAbs_Shape

    """
    return _Contap.Contap_HCurve2dTool_Continuity(*args)

def Contap_HCurve2dTool_D0(*args) -> "void":
    """
    Computes the point of parameter u on the curve.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    U: float
    P: gp_Pnt2d

    Returns
    -------
    None

    """
    return _Contap.Contap_HCurve2dTool_D0(*args)

def Contap_HCurve2dTool_D1(*args) -> "void":
    """
    Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    U: float
    P: gp_Pnt2d
    V: gp_Vec2d

    Returns
    -------
    None

    """
    return _Contap.Contap_HCurve2dTool_D1(*args)

def Contap_HCurve2dTool_D2(*args) -> "void":
    """
    Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    U: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    """
    return _Contap.Contap_HCurve2dTool_D2(*args)

def Contap_HCurve2dTool_D3(*args) -> "void":
    """
    Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    U: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    """
    return _Contap.Contap_HCurve2dTool_D3(*args)

def Contap_HCurve2dTool_DN(*args) -> "gp_Vec2d":
    """
    The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    U: float
    N: int

    Returns
    -------
    gp_Vec2d

    """
    return _Contap.Contap_HCurve2dTool_DN(*args)

def Contap_HCurve2dTool_Ellipse(*args) -> "gp_Elips2d":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    gp_Elips2d

    """
    return _Contap.Contap_HCurve2dTool_Ellipse(*args)

def Contap_HCurve2dTool_FirstParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    float

    """
    return _Contap.Contap_HCurve2dTool_FirstParameter(*args)

def Contap_HCurve2dTool_GetType(*args) -> "GeomAbs_CurveType":
    """
    Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    GeomAbs_CurveType

    """
    return _Contap.Contap_HCurve2dTool_GetType(*args)

def Contap_HCurve2dTool_Hyperbola(*args) -> "gp_Hypr2d":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    gp_Hypr2d

    """
    return _Contap.Contap_HCurve2dTool_Hyperbola(*args)

def Contap_HCurve2dTool_Intervals(*args) -> "void":
    """
    Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accomodate for the parameters. i.e. t.length() > nbintervals().

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    T: TColStd_Array1OfReal
    S: GeomAbs_Shape

    Returns
    -------
    None

    """
    return _Contap.Contap_HCurve2dTool_Intervals(*args)

def Contap_HCurve2dTool_IsClosed(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    bool

    """
    return _Contap.Contap_HCurve2dTool_IsClosed(*args)

def Contap_HCurve2dTool_IsPeriodic(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    bool

    """
    return _Contap.Contap_HCurve2dTool_IsPeriodic(*args)

def Contap_HCurve2dTool_LastParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    float

    """
    return _Contap.Contap_HCurve2dTool_LastParameter(*args)

def Contap_HCurve2dTool_Line(*args) -> "gp_Lin2d":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    gp_Lin2d

    """
    return _Contap.Contap_HCurve2dTool_Line(*args)

def Contap_HCurve2dTool_NbIntervals(*args) -> "Standard_Integer":
    """
    Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    S: GeomAbs_Shape

    Returns
    -------
    int

    """
    return _Contap.Contap_HCurve2dTool_NbIntervals(*args)

def Contap_HCurve2dTool_NbSamples(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    U0: float
    U1: float

    Returns
    -------
    int

    """
    return _Contap.Contap_HCurve2dTool_NbSamples(*args)

def Contap_HCurve2dTool_Parabola(*args) -> "gp_Parab2d":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    gp_Parab2d

    """
    return _Contap.Contap_HCurve2dTool_Parabola(*args)

def Contap_HCurve2dTool_Period(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d

    Returns
    -------
    float

    """
    return _Contap.Contap_HCurve2dTool_Period(*args)

def Contap_HCurve2dTool_Resolution(*args) -> "Standard_Real":
    """
    Returns the parametric resolution corresponding to the real space resolution <r3d>.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    R3d: float

    Returns
    -------
    float

    """
    return _Contap.Contap_HCurve2dTool_Resolution(*args)

def Contap_HCurve2dTool_Value(*args) -> "gp_Pnt2d":
    """
    Computes the point of parameter u on the curve.

    Parameters
    ----------
    C: Adaptor2d_HCurve2d
    U: float

    Returns
    -------
    gp_Pnt2d

    """
    return _Contap.Contap_HCurve2dTool_Value(*args)

class Contap_Line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_Line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_Line, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_Line(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P: IntSurf_PntOn2S

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: Contap_Point

        Returns
        -------
        None

        """
        return _Contap.Contap_Line_Add(self, *args)


    def Arc(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Contap.Contap_Line_Arc(self, *args)


    def Circle(self, *args) -> "gp_Circ":
        """
        No available documentation.

        Returns
        -------
        gp_Circ

        """
        return _Contap.Contap_Line_Circle(self, *args)


    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Contap.Contap_Line_Clear(self, *args)


    def Line(self, *args) -> "gp_Lin":
        """
        No available documentation.

        Returns
        -------
        gp_Lin

        """
        return _Contap.Contap_Line_Line(self, *args)


    def LineOn2S(self, *args) -> "opencascade::handle< IntSurf_LineOn2S > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<IntSurf_LineOn2S>

        """
        return _Contap.Contap_Line_LineOn2S(self, *args)


    def NbPnts(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Contap.Contap_Line_NbPnts(self, *args)


    def NbVertex(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Contap.Contap_Line_NbVertex(self, *args)


    def Point(self, *args) -> "IntSurf_PntOn2S const &":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        IntSurf_PntOn2S

        """
        return _Contap.Contap_Line_Point(self, *args)


    def ResetSeqOfVertex(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Contap.Contap_Line_ResetSeqOfVertex(self, *args)


    def SetLineOn2S(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        L: IntSurf_LineOn2S

        Returns
        -------
        None

        """
        return _Contap.Contap_Line_SetLineOn2S(self, *args)


    def SetTransitionOnS(self, *args) -> "void":
        """
        Set the tansition of the line.

        Parameters
        ----------
        T: IntSurf_TypeTrans

        Returns
        -------
        None

        """
        return _Contap.Contap_Line_SetTransitionOnS(self, *args)


    def SetValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        L: gp_Lin

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Circ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: Adaptor2d_HCurve2d

        Returns
        -------
        None

        """
        return _Contap.Contap_Line_SetValue(self, *args)


    def TransitionOnS(self, *args) -> "IntSurf_TypeTrans":
        """
        Returns in if at the 'left' of the line, the normale of the surface is oriented to the observator.

        Returns
        -------
        IntSurf_TypeTrans

        """
        return _Contap.Contap_Line_TransitionOnS(self, *args)


    def TypeContour(self, *args) -> "Contap_IType":
        """
        Returns contap_lin for a line, contap_circle for a circle, and contap_walking for a walking line, contap_restriction for a part of boundarie.

        Returns
        -------
        Contap_IType

        """
        return _Contap.Contap_Line_TypeContour(self, *args)


    def Vertex(self, *args) -> "Contap_Point &":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Contap_Point

        """
        return _Contap.Contap_Line_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_Line
    __del__ = lambda self: None
Contap_Line_swigregister = _Contap.Contap_Line_swigregister
Contap_Line_swigregister(Contap_Line)

class Contap_Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_Point, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        Creates a point.

        Parameters
        ----------
        Pt: gp_Pnt
        U: float
        V: float

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Arc(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        Returns the arc of restriction containing the vertex.

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Contap.Contap_Point_Arc(self, *args)


    def IsInternal(self, *args) -> "Standard_Boolean":
        """
        Returns true if the point is an internal one, i.e if the tangent to the line on the point and the eye direction are parallel.

        Returns
        -------
        bool

        """
        return _Contap.Contap_Point_IsInternal(self, *args)


    def IsMultiple(self, *args) -> "Standard_Boolean":
        """
        Returns true if the point belongs to several lines.

        Returns
        -------
        bool

        """
        return _Contap.Contap_Point_IsMultiple(self, *args)


    def IsOnArc(self, *args) -> "Standard_Boolean":
        """
        Returns true when the point is an intersection between the contour and a restriction.

        Returns
        -------
        bool

        """
        return _Contap.Contap_Point_IsOnArc(self, *args)


    def IsVertex(self, *args) -> "Standard_Boolean":
        """
        Returns true if the point is a vertex on the initial restriction facet of the surface.

        Returns
        -------
        bool

        """
        return _Contap.Contap_Point_IsVertex(self, *args)


    def ParameterOnArc(self, *args) -> "Standard_Real":
        """
        Returns the parameter of the point on the arc returned by the method arc().

        Returns
        -------
        float

        """
        return _Contap.Contap_Point_ParameterOnArc(self, *args)


    def ParameterOnLine(self, *args) -> "Standard_Real":
        """
        This method returns the parameter of the point on the intersection line. if the points does not belong to an intersection line, the value returned does not have any sens.

        Returns
        -------
        float

        """
        return _Contap.Contap_Point_ParameterOnLine(self, *args)


    def Parameters(self, *args) -> "void":
        """
        Returns the parameters on the surface of the point.

        Parameters
        ----------

        Returns
        -------
        U1: float
        V1: float

        """
        return _Contap.Contap_Point_Parameters(self, *args)


    def SetArc(self, *args) -> "void":
        """
        Sets the value of the arc and of the parameter on this arc of the point.

        Parameters
        ----------
        A: Adaptor2d_HCurve2d
        Param: float
        TLine: IntSurf_Transition
        TArc: IntSurf_Transition

        Returns
        -------
        None

        """
        return _Contap.Contap_Point_SetArc(self, *args)


    def SetInternal(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Contap.Contap_Point_SetInternal(self, *args)


    def SetMultiple(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Contap.Contap_Point_SetMultiple(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        Set the value of the parameter on the intersection line.

        Parameters
        ----------
        Para: float

        Returns
        -------
        None

        """
        return _Contap.Contap_Point_SetParameter(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Sets the values for a point.

        Parameters
        ----------
        Pt: gp_Pnt
        U: float
        V: float

        Returns
        -------
        None

        """
        return _Contap.Contap_Point_SetValue(self, *args)


    def SetVertex(self, *args) -> "void":
        """
        Sets the values of a point which is a vertex on the initial facet of restriction of one of the surface.

        Parameters
        ----------
        V: Adaptor3d_HVertex

        Returns
        -------
        None

        """
        return _Contap.Contap_Point_SetVertex(self, *args)


    def TransitionOnArc(self, *args) -> "IntSurf_Transition const &":
        """
        Returns the transition of the point on the arc.

        Returns
        -------
        IntSurf_Transition

        """
        return _Contap.Contap_Point_TransitionOnArc(self, *args)


    def TransitionOnLine(self, *args) -> "IntSurf_Transition const &":
        """
        Returns the transition of the point on the contour.

        Returns
        -------
        IntSurf_Transition

        """
        return _Contap.Contap_Point_TransitionOnLine(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        Returns the intersection point (geometric information).

        Returns
        -------
        gp_Pnt

        """
        return _Contap.Contap_Point_Value(self, *args)


    def Vertex(self, *args) -> "opencascade::handle< Adaptor3d_HVertex > const &":
        """
        Returns the information about the point when it is on the domain of the patch, i-e when the function isvertex returns true. otherwise, an exception is raised.

        Returns
        -------
        opencascade::handle<Adaptor3d_HVertex>

        """
        return _Contap.Contap_Point_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_Point
    __del__ = lambda self: None
Contap_Point_swigregister = _Contap.Contap_Point_swigregister
Contap_Point_swigregister(Contap_Point)

class Contap_SurfFunction(OCC.Core.math.math_FunctionSetWithDerivatives):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionSetWithDerivatives]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_SurfFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionSetWithDerivatives]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_SurfFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_SurfFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angle(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Contap.Contap_SurfFunction_Angle(self, *args)


    def Direction(self, *args) -> "gp_Dir const":
        """
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _Contap.Contap_SurfFunction_Direction(self, *args)


    def Direction2d(self, *args) -> "gp_Dir2d const":
        """
        No available documentation.

        Returns
        -------
        gp_Dir2d

        """
        return _Contap.Contap_SurfFunction_Direction2d(self, *args)


    def Direction3d(self, *args) -> "gp_Vec const":
        """
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _Contap.Contap_SurfFunction_Direction3d(self, *args)


    def Eye(self, *args) -> "gp_Pnt const":
        """
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _Contap.Contap_SurfFunction_Eye(self, *args)


    def FunctionType(self, *args) -> "Contap_TFunction":
        """
        No available documentation.

        Returns
        -------
        Contap_TFunction

        """
        return _Contap.Contap_SurfFunction_FunctionType(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Contap.Contap_SurfFunction_IsTangent(self, *args)


    def PSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        Method is entered for compatibility with intpatch_thesurffunction.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Contap.Contap_SurfFunction_PSurface(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        Returns the value of the solution point on the surface.

        Returns
        -------
        gp_Pnt

        """
        return _Contap.Contap_SurfFunction_Point(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        Root is the value of the function at the solution. it is a vector of dimension 1, i-e a real.

        Returns
        -------
        float

        """
        return _Contap.Contap_SurfFunction_Root(self, *args)


    def Set(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Eye: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Dir: gp_Dir

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Dir: gp_Dir
        Angle: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Eye: gp_Pnt
        Angle: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Tolerance: float

        Returns
        -------
        None

        """
        return _Contap.Contap_SurfFunction_Set(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Contap.Contap_SurfFunction_Surface(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        Returns the value tol so that if abs(func.root())<tol the function is considered null.

        Returns
        -------
        float

        """
        return _Contap.Contap_SurfFunction_Tolerance(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_SurfFunction
    __del__ = lambda self: None
Contap_SurfFunction_swigregister = _Contap.Contap_SurfFunction_swigregister
Contap_SurfFunction_swigregister(Contap_SurfFunction)

class Contap_SurfProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_SurfProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_SurfProps, name)
    __repr__ = _swig_repr

    def DerivAndNorm(*args) -> "void":
        """
        Computes the point <p>, and normal vector <n> on <s> at parameters u,v.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        U: float
        V: float
        P: gp_Pnt
        d1u: gp_Vec
        d1v: gp_Vec
        N: gp_Vec

        Returns
        -------
        None

        """
        return _Contap.Contap_SurfProps_DerivAndNorm(*args)

    DerivAndNorm = staticmethod(DerivAndNorm)

    def NormAndDn(*args) -> "void":
        """
        Computes the point <p>, normal vector <n>, and its derivatives <dnu> and <dnv> on <s> at parameters u,v.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        U: float
        V: float
        P: gp_Pnt
        N: gp_Vec
        Dnu: gp_Vec
        Dnv: gp_Vec

        Returns
        -------
        None

        """
        return _Contap.Contap_SurfProps_NormAndDn(*args)

    NormAndDn = staticmethod(NormAndDn)

    def Normale(*args) -> "void":
        """
        Computes the point <p>, and normal vector <n> on <s> at parameters u,v.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        U: float
        V: float
        P: gp_Pnt
        N: gp_Vec

        Returns
        -------
        None

        """
        return _Contap.Contap_SurfProps_Normale(*args)

    Normale = staticmethod(Normale)

    __repr__ = _dumps_object


    def __init__(self):
        this = _Contap.new_Contap_SurfProps()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Contap.delete_Contap_SurfProps
    __del__ = lambda self: None
Contap_SurfProps_swigregister = _Contap.Contap_SurfProps_swigregister
Contap_SurfProps_swigregister(Contap_SurfProps)

def Contap_SurfProps_DerivAndNorm(*args) -> "void":
    """
    Computes the point <p>, and normal vector <n> on <s> at parameters u,v.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    U: float
    V: float
    P: gp_Pnt
    d1u: gp_Vec
    d1v: gp_Vec
    N: gp_Vec

    Returns
    -------
    None

    """
    return _Contap.Contap_SurfProps_DerivAndNorm(*args)

def Contap_SurfProps_NormAndDn(*args) -> "void":
    """
    Computes the point <p>, normal vector <n>, and its derivatives <dnu> and <dnv> on <s> at parameters u,v.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    U: float
    V: float
    P: gp_Pnt
    N: gp_Vec
    Dnu: gp_Vec
    Dnv: gp_Vec

    Returns
    -------
    None

    """
    return _Contap.Contap_SurfProps_NormAndDn(*args)

def Contap_SurfProps_Normale(*args) -> "void":
    """
    Computes the point <p>, and normal vector <n> on <s> at parameters u,v.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    U: float
    V: float
    P: gp_Pnt
    N: gp_Vec

    Returns
    -------
    None

    """
    return _Contap.Contap_SurfProps_Normale(*args)

class Contap_TheIWLineOfTheIWalking(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_TheIWLineOfTheIWalking, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_TheIWLineOfTheIWalking, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theAllocator: IntSurf_Allocator,optional
        	default value is 0

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_TheIWLineOfTheIWalking(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddIndexPassing(self, *args) -> "void":
        """
        Associer a l 'indice du point sur la ligne l'indice du point passant dans l'iterateur de depart.

        Parameters
        ----------
        Index: int

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddIndexPassing(self, *args)


    def AddPoint(self, *args) -> "void":
        """
        Add a point in the line.

        Parameters
        ----------
        P: IntSurf_PntOn2S

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddPoint(self, *args)


    def AddStatusFirst(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Closed: bool
        HasFirst: bool

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Closed: bool
        HasLast: bool
        Index: int
        P: IntSurf_PathPoint

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddStatusFirst(self, *args)


    def AddStatusFirstLast(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Closed: bool
        HasFirst: bool
        HasLast: bool

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddStatusFirstLast(self, *args)


    def AddStatusLast(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        HasLast: bool

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        HasLast: bool
        Index: int
        P: IntSurf_PathPoint

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_AddStatusLast(self, *args)


    def Cut(self, *args) -> "void":
        """
        Cut the line at the point of rank index.

        Parameters
        ----------
        Index: int

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_Cut(self, *args)


    def FirstPoint(self, *args) -> "IntSurf_PathPoint const &":
        """
        Returns the first point of the line when it is a marching point. an exception is raised if hasfirstpoint returns false.

        Returns
        -------
        IntSurf_PathPoint

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_FirstPoint(self, *args)


    def FirstPointIndex(self, *args) -> "Standard_Integer":
        """
        Returns the index of first point of the line when it is a marching point.this index is the index in the pointstartiterator. an exception is raised if hasfirstpoint returns false.

        Returns
        -------
        int

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_FirstPointIndex(self, *args)


    def HasFirstPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if the first point of the line is a marching point . when is hasfirstpoint==false ,the line begins on the natural bound of the surface.the line can be too long.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_HasFirstPoint(self, *args)


    def HasLastPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if the end point of the line is a marching point (point from intws). when is hasfirstpoint==false ,the line ends on the natural bound of the surface.the line can be too long.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_HasLastPoint(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """
        Returns true if the line is closed.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_IsClosed(self, *args)


    def IsTangentAtBegining(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_IsTangentAtBegining(self, *args)


    def IsTangentAtEnd(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_IsTangentAtEnd(self, *args)


    def LastPoint(self, *args) -> "IntSurf_PathPoint const &":
        """
        Returns the last point of the line when it is a marching point. an exception is raised if haslastpoint returns false.

        Returns
        -------
        IntSurf_PathPoint

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_LastPoint(self, *args)


    def LastPointIndex(self, *args) -> "Standard_Integer":
        """
        Returns the index of last point of the line when it is a marching point.this index is the index in the pointstartiterator. an exception is raised if haslastpoint returns false.

        Returns
        -------
        int

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_LastPointIndex(self, *args)


    def Line(self, *args) -> "opencascade::handle< IntSurf_LineOn2S > const &":
        """
        Returns the lineon2s contained in the walking line.

        Returns
        -------
        opencascade::handle<IntSurf_LineOn2S>

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_Line(self, *args)


    def NbPassingPoint(self, *args) -> "Standard_Integer":
        """
        Returns the number of points belonging to pnts1 which are passing point.

        Returns
        -------
        int

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_NbPassingPoint(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of points of the line (including first point and end point : see haslastpoint and hasfirstpoint).

        Returns
        -------
        int

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_NbPoints(self, *args)


    def PassingPoint(self, *args) -> "void":
        """
        Returns the index of the point belonging to the line which is associated to the passing point belonging to pnts1 an exception is raised if index > nbpassingpoint().

        Parameters
        ----------
        Index: int

        Returns
        -------
        IndexLine: int
        IndexPnts: int

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_PassingPoint(self, *args)


    def Reverse(self, *args) -> "void":
        """
        Reverse the points in the line. hasfirst, haslast are kept.

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_Reverse(self, *args)


    def SetTangencyAtBegining(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        IsTangent: bool

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_SetTangencyAtBegining(self, *args)


    def SetTangencyAtEnd(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        IsTangent: bool

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_SetTangencyAtEnd(self, *args)


    def SetTangentVector(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        V: gp_Vec
        Index: int

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_SetTangentVector(self, *args)


    def TangentVector(self, *args) -> "gp_Vec const":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        Index: int

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_TangentVector(self, *args)


    def Value(self, *args) -> "IntSurf_PntOn2S const &":
        """
        Returns the point of range index. if index <= 0 or index > nbpoints, an exception is raised.

        Parameters
        ----------
        Index: int

        Returns
        -------
        IntSurf_PntOn2S

        """
        return _Contap.Contap_TheIWLineOfTheIWalking_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Contap_TheIWLineOfTheIWalking_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheIWLineOfTheIWalking
    __del__ = lambda self: None
Contap_TheIWLineOfTheIWalking_swigregister = _Contap.Contap_TheIWLineOfTheIWalking_swigregister
Contap_TheIWLineOfTheIWalking_swigregister(Contap_TheIWLineOfTheIWalking)

class Contap_TheIWalking(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_TheIWalking, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_TheIWalking, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Deflection is the maximum deflection admitted between two consecutive points on a resulting polyline. step is the maximum increment admitted between two consecutive points (in 2d space). epsilon is the tolerance beyond which 2 points are confused. thetofillholes is the flag defining whether possible holes between resulting curves are filled or not in case of contap walking thetofillholes is true.

        Parameters
        ----------
        Epsilon: float
        Deflection: float
        Step: float
        theToFillHoles: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_TheIWalking(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns true if the calculus was successful.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheIWalking_IsDone(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """
        Returns the number of resulting polylines. an exception is raised if isdone returns false.

        Returns
        -------
        int

        """
        return _Contap.Contap_TheIWalking_NbLines(self, *args)


    def NbSinglePnts(self, *args) -> "Standard_Integer":
        """
        Returns the number of points belonging to pnts on which no line starts or ends. an exception is raised if isdone returns false.

        Returns
        -------
        int

        """
        return _Contap.Contap_TheIWalking_NbSinglePnts(self, *args)


    def Perform(self, *args) -> "void":
        """
        Searches a set of polylines starting on a point of pnts1 or pnts2. each point on a resulting polyline verifies f(u,v)=0.

        Parameters
        ----------
        Pnts1: IntSurf_SequenceOfPathPoint
        Pnts2: IntSurf_SequenceOfInteriorPoint
        Func: Contap_SurfFunction
        S: Adaptor3d_HSurface
        Reversed: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        Searches a set of polylines starting on a point of pnts1. each point on a resulting polyline verifies f(u,v)=0.

        Parameters
        ----------
        Pnts1: IntSurf_SequenceOfPathPoint
        Func: Contap_SurfFunction
        S: Adaptor3d_HSurface
        Reversed: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWalking_Perform(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        Deflection is the maximum deflection admitted between two consecutive points on a resulting polyline. step is the maximum increment admitted between two consecutive points (in 2d space). epsilon is the tolerance beyond which 2 points are confused.

        Parameters
        ----------
        Epsilon: float
        Deflection: float
        Step: float

        Returns
        -------
        None

        """
        return _Contap.Contap_TheIWalking_SetTolerance(self, *args)


    def SinglePnt(self, *args) -> "IntSurf_PathPoint const &":
        """
        Returns the point of range index . an exception is raised if isdone returns false. an exception is raised if index<=0 or index > nbsinglepnts.

        Parameters
        ----------
        Index: int

        Returns
        -------
        IntSurf_PathPoint

        """
        return _Contap.Contap_TheIWalking_SinglePnt(self, *args)


    def Value(self, *args) -> "opencascade::handle< Contap_TheIWLineOfTheIWalking > const &":
        """
        Returns the polyline of range index. an exception is raised if isdone is false. an exception is raised if index<=0 or index>nblines.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Contap_TheIWLineOfTheIWalking>

        """
        return _Contap.Contap_TheIWalking_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheIWalking
    __del__ = lambda self: None
Contap_TheIWalking_swigregister = _Contap.Contap_TheIWalking_swigregister
Contap_TheIWalking_swigregister(Contap_TheIWalking)

class Contap_ThePathPointOfTheSearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_ThePathPointOfTheSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_ThePathPointOfTheSearch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: gp_Pnt
        Tol: float
        V: Adaptor3d_HVertex
        A: Adaptor2d_HCurve2d
        Parameter: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: gp_Pnt
        Tol: float
        A: Adaptor2d_HCurve2d
        Parameter: float

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_ThePathPointOfTheSearch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Arc(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Contap.Contap_ThePathPointOfTheSearch_Arc(self, *args)


    def IsNew(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Contap.Contap_ThePathPointOfTheSearch_IsNew(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Contap.Contap_ThePathPointOfTheSearch_Parameter(self, *args)


    def SetValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt
        Tol: float
        V: Adaptor3d_HVertex
        A: Adaptor2d_HCurve2d
        Parameter: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: gp_Pnt
        Tol: float
        A: Adaptor2d_HCurve2d
        Parameter: float

        Returns
        -------
        None

        """
        return _Contap.Contap_ThePathPointOfTheSearch_SetValue(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Contap.Contap_ThePathPointOfTheSearch_Tolerance(self, *args)


    def Value(self, *args) -> "gp_Pnt const":
        """
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _Contap.Contap_ThePathPointOfTheSearch_Value(self, *args)


    def Vertex(self, *args) -> "opencascade::handle< Adaptor3d_HVertex > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HVertex>

        """
        return _Contap.Contap_ThePathPointOfTheSearch_Vertex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_ThePathPointOfTheSearch
    __del__ = lambda self: None
Contap_ThePathPointOfTheSearch_swigregister = _Contap.Contap_ThePathPointOfTheSearch_swigregister
Contap_ThePathPointOfTheSearch_swigregister(Contap_ThePathPointOfTheSearch)

class Contap_TheSearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_TheSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_TheSearch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_TheSearch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AllArcSolution(self, *args) -> "Standard_Boolean":
        """
        Returns true if all arc of the arcs are solution (inside the surface). an exception is raised if isdone returns false.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheSearch_AllArcSolution(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns true if the calculus was successful.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheSearch_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of resulting points. an exception is raised if isdone returns false (notdone).

        Returns
        -------
        int

        """
        return _Contap.Contap_TheSearch_NbPoints(self, *args)


    def NbSegments(self, *args) -> "Standard_Integer":
        """
        Returns the number of the resulting segments. an exception is raised if isdone returns false (notdone).

        Returns
        -------
        int

        """
        return _Contap.Contap_TheSearch_NbSegments(self, *args)


    def Perform(self, *args) -> "void":
        """
        Algorithm to find the points and parts of curves of domain (domain of of restriction of a surface) which verify f = 0. tolboundary defines if a curve is on q. toltangency defines if a point is on q.

        Parameters
        ----------
        F: Contap_ArcFunction
        Domain: Adaptor3d_TopolTool
        TolBoundary: float
        TolTangency: float
        RecheckOnRegularity: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _Contap.Contap_TheSearch_Perform(self, *args)


    def Point(self, *args) -> "Contap_ThePathPointOfTheSearch const &":
        """
        Returns the resulting point of range index. the exception notdone is raised if isdone() returns false. the exception outofrange is raised if index <= 0 or index > nbpoints.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Contap_ThePathPointOfTheSearch

        """
        return _Contap.Contap_TheSearch_Point(self, *args)


    def Segment(self, *args) -> "Contap_TheSegmentOfTheSearch const &":
        """
        Returns the resulting segment of range index. the exception notdone is raised if isdone() returns false. the exception outofrange is raised if index <= 0 or index > nbpoints.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Contap_TheSegmentOfTheSearch

        """
        return _Contap.Contap_TheSearch_Segment(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheSearch
    __del__ = lambda self: None
Contap_TheSearch_swigregister = _Contap.Contap_TheSearch_swigregister
Contap_TheSearch_swigregister(Contap_TheSearch)

class Contap_TheSearchInside(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_TheSearchInside, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_TheSearchInside, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        F: Contap_SurfFunction
        Surf: Adaptor3d_HSurface
        T: Adaptor3d_TopolTool
        Epsilon: float

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_TheSearchInside(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheSearchInside_IsDone(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of points. the exception notdone if raised if isdone returns false.

        Returns
        -------
        int

        """
        return _Contap.Contap_TheSearchInside_NbPoints(self, *args)


    def Perform(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        F: Contap_SurfFunction
        Surf: Adaptor3d_HSurface
        T: Adaptor3d_TopolTool
        Epsilon: float

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        F: Contap_SurfFunction
        Surf: Adaptor3d_HSurface
        UStart: float
        VStart: float

        Returns
        -------
        None

        """
        return _Contap.Contap_TheSearchInside_Perform(self, *args)


    def Value(self, *args) -> "IntSurf_InteriorPoint const &":
        """
        Returns the point of range index. the exception notdone if raised if isdone returns false. the exception outofrange if raised if index <= 0 or index > nbpoints.

        Parameters
        ----------
        Index: int

        Returns
        -------
        IntSurf_InteriorPoint

        """
        return _Contap.Contap_TheSearchInside_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheSearchInside
    __del__ = lambda self: None
Contap_TheSearchInside_swigregister = _Contap.Contap_TheSearchInside_swigregister
Contap_TheSearchInside_swigregister(Contap_TheSearchInside)

class Contap_TheSegmentOfTheSearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_TheSegmentOfTheSearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_TheSegmentOfTheSearch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _Contap.new_Contap_TheSegmentOfTheSearch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Curve(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        Returns the geometric curve on the surface 's domain which is solution.

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Contap.Contap_TheSegmentOfTheSearch_Curve(self, *args)


    def FirstPoint(self, *args) -> "Contap_ThePathPointOfTheSearch const &":
        """
        Returns the first point.

        Returns
        -------
        Contap_ThePathPointOfTheSearch

        """
        return _Contap.Contap_TheSegmentOfTheSearch_FirstPoint(self, *args)


    def HasFirstPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a vertex (thepathpoint) defining the lowest valid parameter on the arc.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheSegmentOfTheSearch_HasFirstPoint(self, *args)


    def HasLastPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a vertex (thepathpoint) defining the greatest valid parameter on the arc.

        Returns
        -------
        bool

        """
        return _Contap.Contap_TheSegmentOfTheSearch_HasLastPoint(self, *args)


    def LastPoint(self, *args) -> "Contap_ThePathPointOfTheSearch const &":
        """
        Returns the last point.

        Returns
        -------
        Contap_ThePathPointOfTheSearch

        """
        return _Contap.Contap_TheSegmentOfTheSearch_LastPoint(self, *args)


    def SetLimitPoint(self, *args) -> "void":
        """
        Defines the first point or the last point, depending on the value of the boolean first.

        Parameters
        ----------
        V: Contap_ThePathPointOfTheSearch
        First: bool

        Returns
        -------
        None

        """
        return _Contap.Contap_TheSegmentOfTheSearch_SetLimitPoint(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Defines the concerned arc.

        Parameters
        ----------
        A: Adaptor2d_HCurve2d

        Returns
        -------
        None

        """
        return _Contap.Contap_TheSegmentOfTheSearch_SetValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Contap.delete_Contap_TheSegmentOfTheSearch
    __del__ = lambda self: None
Contap_TheSegmentOfTheSearch_swigregister = _Contap.Contap_TheSegmentOfTheSearch_swigregister
Contap_TheSegmentOfTheSearch_swigregister(Contap_TheSegmentOfTheSearch)

class Contap_TheHSequenceOfPoint(Contap_TheSequenceOfPoint, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [Contap_TheSequenceOfPoint, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contap_TheHSequenceOfPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Contap_TheSequenceOfPoint, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Contap_TheHSequenceOfPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Contap.new_Contap_TheHSequenceOfPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "Contap_TheSequenceOfPoint const &":
        return _Contap.Contap_TheHSequenceOfPoint_Sequence(self)

    def Append(self, *args) -> "void":
        return _Contap.Contap_TheHSequenceOfPoint_Append(self, *args)

    def ChangeSequence(self) -> "Contap_TheSequenceOfPoint &":
        return _Contap.Contap_TheHSequenceOfPoint_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_Contap_TheHSequenceOfPoint_DownCast(t)

    __swig_destroy__ = _Contap.delete_Contap_TheHSequenceOfPoint
    __del__ = lambda self: None
Contap_TheHSequenceOfPoint_swigregister = _Contap.Contap_TheHSequenceOfPoint_swigregister
Contap_TheHSequenceOfPoint_swigregister(Contap_TheHSequenceOfPoint)



# This file is compatible with both classic and new-style classes.


