# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
AppParCurves module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_appparcurves.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AppParCurves
else:
    import _AppParCurves

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppParCurves.delete_SwigPyIterator

    def value(self):
        return _AppParCurves.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AppParCurves.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AppParCurves.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AppParCurves.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AppParCurves.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AppParCurves.SwigPyIterator_copy(self)

    def next(self):
        return _AppParCurves.SwigPyIterator_next(self)

    def __next__(self):
        return _AppParCurves.SwigPyIterator___next__(self)

    def previous(self):
        return _AppParCurves.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AppParCurves.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AppParCurves.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AppParCurves.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AppParCurves.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AppParCurves.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AppParCurves.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AppParCurves.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AppParCurves:
_AppParCurves.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _AppParCurves.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *

AppParCurves_NoConstraint = _AppParCurves.AppParCurves_NoConstraint
AppParCurves_PassPoint = _AppParCurves.AppParCurves_PassPoint
AppParCurves_TangencyPoint = _AppParCurves.AppParCurves_TangencyPoint
AppParCurves_CurvaturePoint = _AppParCurves.AppParCurves_CurvaturePoint


class AppParCurves_Constraint(IntEnum):
	AppParCurves_NoConstraint = 0
	AppParCurves_PassPoint = 1
	AppParCurves_TangencyPoint = 2
	AppParCurves_CurvaturePoint = 3
AppParCurves_NoConstraint = AppParCurves_Constraint.AppParCurves_NoConstraint
AppParCurves_PassPoint = AppParCurves_Constraint.AppParCurves_PassPoint
AppParCurves_TangencyPoint = AppParCurves_Constraint.AppParCurves_TangencyPoint
AppParCurves_CurvaturePoint = AppParCurves_Constraint.AppParCurves_CurvaturePoint


def Handle_AppParCurves_HArray1OfMultiPoint_Create():
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_Create()

def Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t):
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t)

def Handle_AppParCurves_HArray1OfMultiPoint_IsNull(t):
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_IsNull(t)

def Handle_AppParCurves_HArray1OfMultiBSpCurve_Create():
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_Create()

def Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t):
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t)

def Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull(t):
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull(t)

def Handle_AppParCurves_HArray1OfMultiCurve_Create():
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_Create()

def Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t):
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t)

def Handle_AppParCurves_HArray1OfMultiCurve_IsNull(t):
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_IsNull(t)

def Handle_AppParCurves_HArray1OfConstraintCouple_Create():
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_Create()

def Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t):
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t)

def Handle_AppParCurves_HArray1OfConstraintCouple_IsNull(t):
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_IsNull(t)
class AppParCurves_Array1OfConstraintCouple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_begin(self)

    def end(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_end(self)

    def cbegin(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_cbegin(self)

    def cend(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_cend(self)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfConstraintCouple(*args))

    def Init(self, theValue):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Init(self, theValue)

    def Size(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Size(self)

    def Length(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Length(self)

    def IsEmpty(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_IsEmpty(self)

    def Lower(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Lower(self)

    def Upper(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Upper(self)

    def IsDeletable(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_IsDeletable(self)

    def IsAllocated(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_IsAllocated(self)

    def Assign(self, theOther):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Assign(self, theOther)

    def Move(self, theOther):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Move(self, theOther)

    def Set(self, *args):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Set(self, *args)

    def First(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_First(self)

    def ChangeFirst(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeFirst(self)

    def Last(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Last(self)

    def ChangeLast(self):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeLast(self)

    def Value(self, theIndex):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfConstraintCouple

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AppParCurves_Array1OfConstraintCouple in _AppParCurves:
_AppParCurves.AppParCurves_Array1OfConstraintCouple_swigregister(AppParCurves_Array1OfConstraintCouple)
class AppParCurves_Array1OfMultiBSpCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_begin(self)

    def end(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_end(self)

    def cbegin(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_cbegin(self)

    def cend(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_cend(self)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiBSpCurve(*args))

    def Init(self, theValue):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Init(self, theValue)

    def Size(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Size(self)

    def Length(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Length(self)

    def IsEmpty(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsEmpty(self)

    def Lower(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Lower(self)

    def Upper(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Upper(self)

    def IsDeletable(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsDeletable(self)

    def IsAllocated(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsAllocated(self)

    def Assign(self, theOther):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Assign(self, theOther)

    def Move(self, theOther):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Move(self, theOther)

    def Set(self, *args):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Set(self, *args)

    def First(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_First(self)

    def ChangeFirst(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeFirst(self)

    def Last(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Last(self)

    def ChangeLast(self):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiBSpCurve

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AppParCurves_Array1OfMultiBSpCurve in _AppParCurves:
_AppParCurves.AppParCurves_Array1OfMultiBSpCurve_swigregister(AppParCurves_Array1OfMultiBSpCurve)
class AppParCurves_Array1OfMultiCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_begin(self)

    def end(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_end(self)

    def cbegin(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_cbegin(self)

    def cend(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_cend(self)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiCurve(*args))

    def Init(self, theValue):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Init(self, theValue)

    def Size(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Size(self)

    def Length(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Length(self)

    def IsEmpty(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_IsEmpty(self)

    def Lower(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Lower(self)

    def Upper(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Upper(self)

    def IsDeletable(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_IsDeletable(self)

    def IsAllocated(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_IsAllocated(self)

    def Assign(self, theOther):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Assign(self, theOther)

    def Move(self, theOther):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Move(self, theOther)

    def Set(self, *args):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Set(self, *args)

    def First(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_First(self)

    def ChangeFirst(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeFirst(self)

    def Last(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Last(self)

    def ChangeLast(self):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiCurve

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AppParCurves_Array1OfMultiCurve in _AppParCurves:
_AppParCurves.AppParCurves_Array1OfMultiCurve_swigregister(AppParCurves_Array1OfMultiCurve)
class AppParCurves_Array1OfMultiPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_begin(self)

    def end(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_end(self)

    def cbegin(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_cbegin(self)

    def cend(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_cend(self)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_Array1OfMultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_Array1OfMultiPoint(*args))

    def Init(self, theValue):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Init(self, theValue)

    def Size(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Size(self)

    def Length(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Length(self)

    def IsEmpty(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_IsEmpty(self)

    def Lower(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Lower(self)

    def Upper(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Upper(self)

    def IsDeletable(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_IsDeletable(self)

    def IsAllocated(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_IsAllocated(self)

    def Assign(self, theOther):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Assign(self, theOther)

    def Move(self, theOther):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Move(self, theOther)

    def Set(self, *args):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Set(self, *args)

    def First(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_First(self)

    def ChangeFirst(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeFirst(self)

    def Last(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Last(self)

    def ChangeLast(self):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeLast(self)

    def Value(self, theIndex):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiPoint

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register AppParCurves_Array1OfMultiPoint in _AppParCurves:
_AppParCurves.AppParCurves_Array1OfMultiPoint_swigregister(AppParCurves_Array1OfMultiPoint)
class AppParCurves_SequenceOfMultiBSpCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_begin(self)

    def end(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_end(self)

    def cbegin(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_cbegin(self)

    def cend(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_cend(self)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_SequenceOfMultiBSpCurve(*args))

    def Size(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Size(self)

    def Length(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Length(self)

    def Lower(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Lower(self)

    def Upper(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Upper(self)

    def IsEmpty(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_IsEmpty(self)

    def Reverse(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Reverse(self)

    def Exchange(self, I, J):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Assign(self, theOther)

    def Set(self, theOther):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Set(self, theOther)

    def Remove(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Remove(self, *args)

    def Append(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Append(self, *args)

    def Prepend(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Split(self, theIndex, theSeq)

    def First(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_First(self)

    def ChangeFirst(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeFirst(self)

    def Last(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Last(self)

    def ChangeLast(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_SequenceOfMultiBSpCurve

    def __len__(self):
        return self.Size()


# Register AppParCurves_SequenceOfMultiBSpCurve in _AppParCurves:
_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_swigregister(AppParCurves_SequenceOfMultiBSpCurve)
class AppParCurves_SequenceOfMultiCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_begin(self)

    def end(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_end(self)

    def cbegin(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_cbegin(self)

    def cend(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_cend(self)

    def __init__(self, *args):
        _AppParCurves.AppParCurves_SequenceOfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_SequenceOfMultiCurve(*args))

    def Size(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Size(self)

    def Length(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Length(self)

    def Lower(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Lower(self)

    def Upper(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Upper(self)

    def IsEmpty(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_IsEmpty(self)

    def Reverse(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Reverse(self)

    def Exchange(self, I, J):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Assign(self, theOther)

    def Set(self, theOther):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Set(self, theOther)

    def Remove(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Remove(self, *args)

    def Append(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Append(self, *args)

    def Prepend(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Split(self, theIndex, theSeq)

    def First(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_First(self)

    def ChangeFirst(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeFirst(self)

    def Last(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Last(self)

    def ChangeLast(self):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_SequenceOfMultiCurve

    def __len__(self):
        return self.Size()


# Register AppParCurves_SequenceOfMultiCurve in _AppParCurves:
_AppParCurves.AppParCurves_SequenceOfMultiCurve_swigregister(AppParCurves_SequenceOfMultiCurve)
class appparcurves(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Bernstein(*args):
        r"""

        Parameters
        ----------
        NbPoles: int
        U: math_Vector
        A: math_Matrix
        DA: math_Matrix

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AppParCurves.appparcurves_Bernstein(*args)

    @staticmethod
    def BernsteinMatrix(*args):
        r"""

        Parameters
        ----------
        NbPoles: int
        U: math_Vector
        A: math_Matrix

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AppParCurves.appparcurves_BernsteinMatrix(*args)

    @staticmethod
    def SecondDerivativeBernstein(*args):
        r"""

        Parameters
        ----------
        U: float
        DDA: math_Vector

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AppParCurves.appparcurves_SecondDerivativeBernstein(*args)

    @staticmethod
    def SplineFunction(*args):
        r"""

        Parameters
        ----------
        NbPoles: int
        Degree: int
        Parameters: math_Vector
        FlatKnots: math_Vector
        A: math_Matrix
        DA: math_Matrix
        Index: math_IntegerVector

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _AppParCurves.appparcurves_SplineFunction(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _AppParCurves.appparcurves_swiginit(self, _AppParCurves.new_appparcurves())
    __swig_destroy__ = _AppParCurves.delete_appparcurves

# Register appparcurves in _AppParCurves:
_AppParCurves.appparcurves_swigregister(appparcurves)
class AppParCurves_ConstraintCouple(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Returns an indefinite constraintcouple.

        Parameters
        ----------
        TheIndex: int
        Cons: AppParCurves_Constraint

        Return
        -------
        None

        Description
        -----------
        Create a couple the object <index> will have the constraint <cons>.

        """
        _AppParCurves.AppParCurves_ConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_ConstraintCouple(*args))

    def Constraint(self, *args):
        r"""
        Return
        -------
        AppParCurves_Constraint

        Description
        -----------
        Returns the constraint of the object.

        """
        return _AppParCurves.AppParCurves_ConstraintCouple_Constraint(self, *args)

    def Index(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the index of the constraint object.

        """
        return _AppParCurves.AppParCurves_ConstraintCouple_Index(self, *args)

    def SetConstraint(self, *args):
        r"""

        Parameters
        ----------
        Cons: AppParCurves_Constraint

        Return
        -------
        None

        Description
        -----------
        Changes the constraint of the object.

        """
        return _AppParCurves.AppParCurves_ConstraintCouple_SetConstraint(self, *args)

    def SetIndex(self, *args):
        r"""

        Parameters
        ----------
        TheIndex: int

        Return
        -------
        None

        Description
        -----------
        Changes the index of the constraint object.

        """
        return _AppParCurves.AppParCurves_ConstraintCouple_SetIndex(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_ConstraintCouple

# Register AppParCurves_ConstraintCouple in _AppParCurves:
_AppParCurves.AppParCurves_ConstraintCouple_swigregister(AppParCurves_ConstraintCouple)
class AppParCurves_MultiCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Returns an indefinite multicurve.

        Parameters
        ----------
        NbPol: int

        Return
        -------
        None

        Description
        -----------
        Creates a multicurve, describing bezier curves all containing the same number of multipoint. an exception is raised if degree < 0.

        Parameters
        ----------
        tabMU: AppParCurves_Array1OfMultiPoint

        Return
        -------
        None

        Description
        -----------
        Creates a multicurve, describing bezier curves all containing the same number of multipoint. each multipoint must have nbcurves poles.

        """
        _AppParCurves.AppParCurves_MultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_MultiCurve(*args))

    def Curve(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        TabPnt: TColgp_Array1OfPnt

        Return
        -------
        None

        Description
        -----------
        Returns the pole array of the curve of range cuindex. an exception is raised if the dimension of the curve is 2d.

        Parameters
        ----------
        CuIndex: int
        TabPnt: TColgp_Array1OfPnt2d

        Return
        -------
        None

        Description
        -----------
        Returns the pole array of the curve of range cuindex. an exception is raised if the dimension of the curve is 3d.

        """
        return _AppParCurves.AppParCurves_MultiCurve_Curve(self, *args)

    def D1(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt
        V1: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d
        V1: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        """
        return _AppParCurves.AppParCurves_MultiCurve_D1(self, *args)

    def D2(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        """
        return _AppParCurves.AppParCurves_MultiCurve_D2(self, *args)

    def Degree(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the degree of the curves.

        """
        return _AppParCurves.AppParCurves_MultiCurve_Degree(self, *args)

    def Dimension(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int

        Return
        -------
        int

        Description
        -----------
        Returns the dimension of the cuindex curve. an exception is raised if cuindex<0 or cuindex>nbcurves.

        """
        return _AppParCurves.AppParCurves_MultiCurve_Dimension(self, *args)

    def DumpToString(self):
        r"""DumpToString(AppParCurves_MultiCurve self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiCurve_DumpToString(self)

    def NbCurves(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of curves resulting from the approximation of a multiline.

        """
        return _AppParCurves.AppParCurves_MultiCurve_NbCurves(self, *args)

    def NbPoles(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of poles on curves resulting from the approximation of a multiline.

        """
        return _AppParCurves.AppParCurves_MultiCurve_NbPoles(self, *args)

    def Pole(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        Nieme: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the nieme pole of the cuindex curve. the curve must be a 3d curve.

        """
        return _AppParCurves.AppParCurves_MultiCurve_Pole(self, *args)

    def Pole2d(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        Nieme: int

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the nieme pole of the cuindex curve. the curve must be a 2d curve.

        """
        return _AppParCurves.AppParCurves_MultiCurve_Pole2d(self, *args)

    def SetNbPoles(self, *args):
        r"""

        Parameters
        ----------
        nbPoles: int

        Return
        -------
        None

        Description
        -----------
        The number of poles of the multicurve will be set to <nbpoles>.

        """
        return _AppParCurves.AppParCurves_MultiCurve_SetNbPoles(self, *args)

    def SetValue(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        MPoint: AppParCurves_MultiPoint

        Return
        -------
        None

        Description
        -----------
        Sets the multipoint of range index to the value <mpoint>. an exception is raised if index <0 or index >nbmpoint.

        """
        return _AppParCurves.AppParCurves_MultiCurve_SetValue(self, *args)

    def Transform(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        x: float
        dx: float
        y: float
        dy: float
        z: float
        dz: float

        Return
        -------
        None

        Description
        -----------
        Applies a transformation to the curve of range <cuindex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve. newz = z + dz*oldz.

        """
        return _AppParCurves.AppParCurves_MultiCurve_Transform(self, *args)

    def Transform2d(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        x: float
        dx: float
        y: float
        dy: float

        Return
        -------
        None

        Description
        -----------
        Applies a transformation to the curve of range <cuindex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve.

        """
        return _AppParCurves.AppParCurves_MultiCurve_Transform2d(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        AppParCurves_MultiPoint

        Description
        -----------
        Returns the index multipoint. an exception is raised if index <0 or index >degree+1.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        """
        return _AppParCurves.AppParCurves_MultiCurve_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiCurve

# Register AppParCurves_MultiCurve in _AppParCurves:
_AppParCurves.AppParCurves_MultiCurve_swigregister(AppParCurves_MultiCurve)
class AppParCurves_MultiPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an indefinite multipoint.

        Parameters
        ----------
        NbPoints: int
        NbPoints2d: int

        Return
        -------
        None

        Description
        -----------
        Constructs a set of points used to approximate a multiline. these points can be of 2 or 3 dimensions. points will be initialized with setpoint and setpoint2d. nbpoints is the number of 3d points. nbpoints2d is the number of 2d points.

        Parameters
        ----------
        tabP: TColgp_Array1OfPnt

        Return
        -------
        None

        Description
        -----------
        Creates a multipoint only composed of 3d points.

        Parameters
        ----------
        tabP2d: TColgp_Array1OfPnt2d

        Return
        -------
        None

        Description
        -----------
        Creates a multipoint only composed of 2d points.

        Parameters
        ----------
        tabP: TColgp_Array1OfPnt
        tabP2d: TColgp_Array1OfPnt2d

        Return
        -------
        None

        Description
        -----------
        Constructs a set of points used to approximate a multiline. these points can be of 2 or 3 dimensions. points will be initialized with setpoint and setpoint2d. nbpoints is the total number of points.

        """
        _AppParCurves.AppParCurves_MultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_MultiPoint(*args))

    def Dimension(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        int

        Description
        -----------
        Returns the dimension of the point of range index. an exception is raised if index <0 or index > nbcurves.

        """
        return _AppParCurves.AppParCurves_MultiPoint_Dimension(self, *args)

    def DumpToString(self):
        r"""DumpToString(AppParCurves_MultiPoint self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiPoint_DumpToString(self)

    def NbPoints(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of points of dimension 3d.

        """
        return _AppParCurves.AppParCurves_MultiPoint_NbPoints(self, *args)

    def NbPoints2d(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of points of dimension 2d.

        """
        return _AppParCurves.AppParCurves_MultiPoint_NbPoints2d(self, *args)

    def Point(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the 3d point of range index. an exception is raised if index < 0 or index < number of 3d points.

        """
        return _AppParCurves.AppParCurves_MultiPoint_Point(self, *args)

    def Point2d(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the 2d point of range index. an exception is raised if index <= number of 3d points or index > total number of points.

        """
        return _AppParCurves.AppParCurves_MultiPoint_Point2d(self, *args)

    def SetPoint(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        Point: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        The 3d point of range index of this multipoint is set to <point>. an exception is raised if index < 0 or index > number of 3d points.

        """
        return _AppParCurves.AppParCurves_MultiPoint_SetPoint(self, *args)

    def SetPoint2d(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        Point: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        The 2d point of range index is set to <point>. an exception is raised if index > 3d points or index > total number of points.

        """
        return _AppParCurves.AppParCurves_MultiPoint_SetPoint2d(self, *args)

    def Transform(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        x: float
        dx: float
        y: float
        dy: float
        z: float
        dz: float

        Return
        -------
        None

        Description
        -----------
        Applies a transformation to the curve of range <cuindex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve. newz = z + dz*oldz.

        """
        return _AppParCurves.AppParCurves_MultiPoint_Transform(self, *args)

    def Transform2d(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        x: float
        dx: float
        y: float
        dy: float

        Return
        -------
        None

        Description
        -----------
        Applies a transformation to the curve of range <cuindex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve.

        """
        return _AppParCurves.AppParCurves_MultiPoint_Transform2d(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiPoint

# Register AppParCurves_MultiPoint in _AppParCurves:
_AppParCurves.AppParCurves_MultiPoint_swigregister(AppParCurves_MultiPoint)
class AppParCurves_MultiBSpCurve(AppParCurves_MultiCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Returns an indefinite multibspcurve.

        Parameters
        ----------
        NbPol: int

        Return
        -------
        None

        Description
        -----------
        Creates a multibspcurve, describing bspline curves all containing the same number of multipoint. an exception is raised if degree < 0.

        Parameters
        ----------
        tabMU: AppParCurves_Array1OfMultiPoint
        Knots: TColStd_Array1OfReal
        Mults: TColStd_Array1OfInteger

        Return
        -------
        None

        Description
        -----------
        Creates a multibspcurve, describing bspline curves all containing the same number of multipoint. each multipoint must have nbcurves poles.

        Parameters
        ----------
        SC: AppParCurves_MultiCurve
        Knots: TColStd_Array1OfReal
        Mults: TColStd_Array1OfInteger

        Return
        -------
        None

        Description
        -----------
        Creates a multibspcurve, describing bspline curves, taking control points from <sc>.

        """
        _AppParCurves.AppParCurves_MultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_MultiBSpCurve(*args))

    def D1(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt
        V1: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d
        V1: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_D1(self, *args)

    def D2(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_D2(self, *args)

    def DumpToString(self):
        r"""DumpToString(AppParCurves_MultiBSpCurve self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiBSpCurve_DumpToString(self)

    def Knots(self, *args):
        r"""
        Return
        -------
        TColStd_Array1OfReal

        Description
        -----------
        Returns an array of reals containing the multiplicities of curves resulting from the approximation.

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Knots(self, *args)

    def Multiplicities(self, *args):
        r"""
        Return
        -------
        TColStd_Array1OfInteger

        Description
        -----------
        Returns an array of reals containing the multiplicities of curves resulting from the approximation.

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Multiplicities(self, *args)

    def SetKnots(self, *args):
        r"""

        Parameters
        ----------
        theKnots: TColStd_Array1OfReal

        Return
        -------
        None

        Description
        -----------
        Knots of the multibspcurve are assigned to <theknots>.

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_SetKnots(self, *args)

    def SetMultiplicities(self, *args):
        r"""

        Parameters
        ----------
        theMults: TColStd_Array1OfInteger

        Return
        -------
        None

        Description
        -----------
        Multiplicities of the multibspcurve are assigned to <themults>.

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_SetMultiplicities(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiBSpCurve

# Register AppParCurves_MultiBSpCurve in _AppParCurves:
_AppParCurves.AppParCurves_MultiBSpCurve_swigregister(AppParCurves_MultiBSpCurve)
class AppParCurves_HArray1OfMultiPoint(AppParCurves_Array1OfMultiPoint, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiPoint_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiPoint(*args))

    def Array1(self):
        return _AppParCurves.AppParCurves_HArray1OfMultiPoint_Array1(self)

    def ChangeArray1(self):
        return _AppParCurves.AppParCurves_HArray1OfMultiPoint_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiPoint

# Register AppParCurves_HArray1OfMultiPoint in _AppParCurves:
_AppParCurves.AppParCurves_HArray1OfMultiPoint_swigregister(AppParCurves_HArray1OfMultiPoint)
class AppParCurves_HArray1OfMultiBSpCurve(AppParCurves_Array1OfMultiBSpCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiBSpCurve(*args))

    def Array1(self):
        return _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_Array1(self)

    def ChangeArray1(self):
        return _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiBSpCurve

# Register AppParCurves_HArray1OfMultiBSpCurve in _AppParCurves:
_AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_swigregister(AppParCurves_HArray1OfMultiBSpCurve)
class AppParCurves_HArray1OfMultiCurve(AppParCurves_Array1OfMultiCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfMultiCurve_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfMultiCurve(*args))

    def Array1(self):
        return _AppParCurves.AppParCurves_HArray1OfMultiCurve_Array1(self)

    def ChangeArray1(self):
        return _AppParCurves.AppParCurves_HArray1OfMultiCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiCurve

# Register AppParCurves_HArray1OfMultiCurve in _AppParCurves:
_AppParCurves.AppParCurves_HArray1OfMultiCurve_swigregister(AppParCurves_HArray1OfMultiCurve)
class AppParCurves_HArray1OfConstraintCouple(AppParCurves_Array1OfConstraintCouple, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AppParCurves.AppParCurves_HArray1OfConstraintCouple_swiginit(self, _AppParCurves.new_AppParCurves_HArray1OfConstraintCouple(*args))

    def Array1(self):
        return _AppParCurves.AppParCurves_HArray1OfConstraintCouple_Array1(self)

    def ChangeArray1(self):
        return _AppParCurves.AppParCurves_HArray1OfConstraintCouple_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfConstraintCouple

# Register AppParCurves_HArray1OfConstraintCouple in _AppParCurves:
_AppParCurves.AppParCurves_HArray1OfConstraintCouple_swigregister(AppParCurves_HArray1OfConstraintCouple)



@deprecated
def appparcurves_Bernstein(*args):
	return appparcurves.Bernstein(*args)

@deprecated
def appparcurves_BernsteinMatrix(*args):
	return appparcurves.BernsteinMatrix(*args)

@deprecated
def appparcurves_SecondDerivativeBernstein(*args):
	return appparcurves.SecondDerivativeBernstein(*args)

@deprecated
def appparcurves_SplineFunction(*args):
	return appparcurves.SplineFunction(*args)



