# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AppParCurves module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_appparcurves.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AppParCurves')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AppParCurves')
    _AppParCurves = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AppParCurves', [dirname(__file__)])
        except ImportError:
            import _AppParCurves
            return _AppParCurves
        try:
            _mod = imp.load_module('_AppParCurves', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AppParCurves = swig_import_helper()
    del swig_import_helper
else:
    import _AppParCurves
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppParCurves.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _AppParCurves.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _AppParCurves.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _AppParCurves.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _AppParCurves.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _AppParCurves.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _AppParCurves.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _AppParCurves.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _AppParCurves.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _AppParCurves.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _AppParCurves.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _AppParCurves.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _AppParCurves.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _AppParCurves.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _AppParCurves.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _AppParCurves.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _AppParCurves.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AppParCurves.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _AppParCurves.process_exception(error, method_name, class_name)
process_exception = _AppParCurves.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *

AppParCurves_NoConstraint = _AppParCurves.AppParCurves_NoConstraint
AppParCurves_PassPoint = _AppParCurves.AppParCurves_PassPoint
AppParCurves_TangencyPoint = _AppParCurves.AppParCurves_TangencyPoint
AppParCurves_CurvaturePoint = _AppParCurves.AppParCurves_CurvaturePoint


class AppParCurves_Constraint(IntEnum):
	AppParCurves_NoConstraint = 0
	AppParCurves_PassPoint = 1
	AppParCurves_TangencyPoint = 2
	AppParCurves_CurvaturePoint = 3
AppParCurves_NoConstraint = AppParCurves_Constraint.AppParCurves_NoConstraint
AppParCurves_PassPoint = AppParCurves_Constraint.AppParCurves_PassPoint
AppParCurves_TangencyPoint = AppParCurves_Constraint.AppParCurves_TangencyPoint
AppParCurves_CurvaturePoint = AppParCurves_Constraint.AppParCurves_CurvaturePoint


def Handle_AppParCurves_HArray1OfMultiCurve_Create() -> "opencascade::handle< AppParCurves_HArray1OfMultiCurve >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_Create()
Handle_AppParCurves_HArray1OfMultiCurve_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_Create

def Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AppParCurves_HArray1OfMultiCurve >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t)
Handle_AppParCurves_HArray1OfMultiCurve_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_DownCast

def Handle_AppParCurves_HArray1OfMultiCurve_IsNull(t: 'opencascade::handle< AppParCurves_HArray1OfMultiCurve > const &') -> "bool":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_IsNull(t)
Handle_AppParCurves_HArray1OfMultiCurve_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiCurve_IsNull

def Handle_AppParCurves_HArray1OfConstraintCouple_Create() -> "opencascade::handle< AppParCurves_HArray1OfConstraintCouple >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_Create()
Handle_AppParCurves_HArray1OfConstraintCouple_Create = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_Create

def Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AppParCurves_HArray1OfConstraintCouple >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t)
Handle_AppParCurves_HArray1OfConstraintCouple_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_DownCast

def Handle_AppParCurves_HArray1OfConstraintCouple_IsNull(t: 'opencascade::handle< AppParCurves_HArray1OfConstraintCouple > const &') -> "bool":
    return _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_IsNull(t)
Handle_AppParCurves_HArray1OfConstraintCouple_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfConstraintCouple_IsNull

def Handle_AppParCurves_HArray1OfMultiPoint_Create() -> "opencascade::handle< AppParCurves_HArray1OfMultiPoint >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_Create()
Handle_AppParCurves_HArray1OfMultiPoint_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_Create

def Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AppParCurves_HArray1OfMultiPoint >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t)
Handle_AppParCurves_HArray1OfMultiPoint_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_DownCast

def Handle_AppParCurves_HArray1OfMultiPoint_IsNull(t: 'opencascade::handle< AppParCurves_HArray1OfMultiPoint > const &') -> "bool":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_IsNull(t)
Handle_AppParCurves_HArray1OfMultiPoint_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiPoint_IsNull

def Handle_AppParCurves_HArray1OfMultiBSpCurve_Create() -> "opencascade::handle< AppParCurves_HArray1OfMultiBSpCurve >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_Create()
Handle_AppParCurves_HArray1OfMultiBSpCurve_Create = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_Create

def Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AppParCurves_HArray1OfMultiBSpCurve >":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t)
Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast

def Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull(t: 'opencascade::handle< AppParCurves_HArray1OfMultiBSpCurve > const &') -> "bool":
    return _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull(t)
Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull = _AppParCurves.Handle_AppParCurves_HArray1OfMultiBSpCurve_IsNull
class AppParCurves_Array1OfConstraintCouple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_Array1OfConstraintCouple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_Array1OfConstraintCouple, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< AppParCurves_ConstraintCouple >::iterator":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_begin(self)

    def end(self) -> "NCollection_Array1< AppParCurves_ConstraintCouple >::iterator":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_end(self)

    def cbegin(self) -> "NCollection_Array1< AppParCurves_ConstraintCouple >::const_iterator":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_cbegin(self)

    def cend(self) -> "NCollection_Array1< AppParCurves_ConstraintCouple >::const_iterator":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_cend(self)

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_Array1OfConstraintCouple(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'AppParCurves_ConstraintCouple') -> "void":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_IsAllocated(self)

    def Assign(self, theOther: 'AppParCurves_Array1OfConstraintCouple') -> "NCollection_Array1< AppParCurves_ConstraintCouple > &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Assign(self, theOther)

    def Move(self, theOther: 'AppParCurves_Array1OfConstraintCouple') -> "NCollection_Array1< AppParCurves_ConstraintCouple > &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< AppParCurves_ConstraintCouple > &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Set(self, *args)

    def First(self) -> "AppParCurves_ConstraintCouple const &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_First(self)

    def ChangeFirst(self) -> "AppParCurves_ConstraintCouple &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeFirst(self)

    def Last(self) -> "AppParCurves_ConstraintCouple const &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Last(self)

    def ChangeLast(self) -> "AppParCurves_ConstraintCouple &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "AppParCurves_ConstraintCouple const &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "AppParCurves_ConstraintCouple &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "AppParCurves_ConstraintCouple &":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'AppParCurves_ConstraintCouple') -> "void":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _AppParCurves.AppParCurves_Array1OfConstraintCouple_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfConstraintCouple
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

AppParCurves_Array1OfConstraintCouple_swigregister = _AppParCurves.AppParCurves_Array1OfConstraintCouple_swigregister
AppParCurves_Array1OfConstraintCouple_swigregister(AppParCurves_Array1OfConstraintCouple)

class AppParCurves_Array1OfMultiBSpCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_Array1OfMultiBSpCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_Array1OfMultiBSpCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< AppParCurves_MultiBSpCurve >::iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_begin(self)

    def end(self) -> "NCollection_Array1< AppParCurves_MultiBSpCurve >::iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_end(self)

    def cbegin(self) -> "NCollection_Array1< AppParCurves_MultiBSpCurve >::const_iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_cbegin(self)

    def cend(self) -> "NCollection_Array1< AppParCurves_MultiBSpCurve >::const_iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_cend(self)

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_Array1OfMultiBSpCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'AppParCurves_MultiBSpCurve') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_IsAllocated(self)

    def Assign(self, theOther: 'AppParCurves_Array1OfMultiBSpCurve') -> "NCollection_Array1< AppParCurves_MultiBSpCurve > &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Assign(self, theOther)

    def Move(self, theOther: 'AppParCurves_Array1OfMultiBSpCurve') -> "NCollection_Array1< AppParCurves_MultiBSpCurve > &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< AppParCurves_MultiBSpCurve > &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Set(self, *args)

    def First(self) -> "AppParCurves_MultiBSpCurve const &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_First(self)

    def ChangeFirst(self) -> "AppParCurves_MultiBSpCurve &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeFirst(self)

    def Last(self) -> "AppParCurves_MultiBSpCurve const &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Last(self)

    def ChangeLast(self) -> "AppParCurves_MultiBSpCurve &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiBSpCurve const &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiBSpCurve &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "AppParCurves_MultiBSpCurve &":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'AppParCurves_MultiBSpCurve') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiBSpCurve
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

AppParCurves_Array1OfMultiBSpCurve_swigregister = _AppParCurves.AppParCurves_Array1OfMultiBSpCurve_swigregister
AppParCurves_Array1OfMultiBSpCurve_swigregister(AppParCurves_Array1OfMultiBSpCurve)

class AppParCurves_Array1OfMultiCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_Array1OfMultiCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_Array1OfMultiCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< AppParCurves_MultiCurve >::iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_begin(self)

    def end(self) -> "NCollection_Array1< AppParCurves_MultiCurve >::iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_end(self)

    def cbegin(self) -> "NCollection_Array1< AppParCurves_MultiCurve >::const_iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_cbegin(self)

    def cend(self) -> "NCollection_Array1< AppParCurves_MultiCurve >::const_iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_cend(self)

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_Array1OfMultiCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'AppParCurves_MultiCurve') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_IsAllocated(self)

    def Assign(self, theOther: 'AppParCurves_Array1OfMultiCurve') -> "NCollection_Array1< AppParCurves_MultiCurve > &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Assign(self, theOther)

    def Move(self, theOther: 'AppParCurves_Array1OfMultiCurve') -> "NCollection_Array1< AppParCurves_MultiCurve > &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< AppParCurves_MultiCurve > &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Set(self, *args)

    def First(self) -> "AppParCurves_MultiCurve const &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_First(self)

    def ChangeFirst(self) -> "AppParCurves_MultiCurve &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeFirst(self)

    def Last(self) -> "AppParCurves_MultiCurve const &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Last(self)

    def ChangeLast(self) -> "AppParCurves_MultiCurve &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiCurve const &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiCurve &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "AppParCurves_MultiCurve &":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'AppParCurves_MultiCurve') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiCurve_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiCurve
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

AppParCurves_Array1OfMultiCurve_swigregister = _AppParCurves.AppParCurves_Array1OfMultiCurve_swigregister
AppParCurves_Array1OfMultiCurve_swigregister(AppParCurves_Array1OfMultiCurve)

class AppParCurves_Array1OfMultiPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_Array1OfMultiPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_Array1OfMultiPoint, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< AppParCurves_MultiPoint >::iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_begin(self)

    def end(self) -> "NCollection_Array1< AppParCurves_MultiPoint >::iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_end(self)

    def cbegin(self) -> "NCollection_Array1< AppParCurves_MultiPoint >::const_iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_cbegin(self)

    def cend(self) -> "NCollection_Array1< AppParCurves_MultiPoint >::const_iterator":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_cend(self)

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_Array1OfMultiPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'AppParCurves_MultiPoint') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_IsAllocated(self)

    def Assign(self, theOther: 'AppParCurves_Array1OfMultiPoint') -> "NCollection_Array1< AppParCurves_MultiPoint > &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Assign(self, theOther)

    def Move(self, theOther: 'AppParCurves_Array1OfMultiPoint') -> "NCollection_Array1< AppParCurves_MultiPoint > &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< AppParCurves_MultiPoint > &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Set(self, *args)

    def First(self) -> "AppParCurves_MultiPoint const &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_First(self)

    def ChangeFirst(self) -> "AppParCurves_MultiPoint &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeFirst(self)

    def Last(self) -> "AppParCurves_MultiPoint const &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Last(self)

    def ChangeLast(self) -> "AppParCurves_MultiPoint &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiPoint const &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiPoint &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "AppParCurves_MultiPoint &":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'AppParCurves_MultiPoint') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _AppParCurves.AppParCurves_Array1OfMultiPoint_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_Array1OfMultiPoint
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

AppParCurves_Array1OfMultiPoint_swigregister = _AppParCurves.AppParCurves_Array1OfMultiPoint_swigregister
AppParCurves_Array1OfMultiPoint_swigregister(AppParCurves_Array1OfMultiPoint)

class AppParCurves_SequenceOfMultiBSpCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_SequenceOfMultiBSpCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_SequenceOfMultiBSpCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< AppParCurves_MultiBSpCurve >::iterator":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_begin(self)

    def end(self) -> "NCollection_Sequence< AppParCurves_MultiBSpCurve >::iterator":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_end(self)

    def cbegin(self) -> "NCollection_Sequence< AppParCurves_MultiBSpCurve >::const_iterator":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_cbegin(self)

    def cend(self) -> "NCollection_Sequence< AppParCurves_MultiBSpCurve >::const_iterator":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_cend(self)

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_SequenceOfMultiBSpCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_IsEmpty(self)

    def Reverse(self) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode)
    else:
        delNode = _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Clear(self, theAllocator)

    def Assign(self, theOther: 'AppParCurves_SequenceOfMultiBSpCurve') -> "NCollection_Sequence< AppParCurves_MultiBSpCurve > &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Assign(self, theOther)

    def Set(self, theOther: 'AppParCurves_SequenceOfMultiBSpCurve') -> "NCollection_Sequence< AppParCurves_MultiBSpCurve > &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'AppParCurves_SequenceOfMultiBSpCurve') -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Split(self, theIndex, theSeq)

    def First(self) -> "AppParCurves_MultiBSpCurve const &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_First(self)

    def ChangeFirst(self) -> "AppParCurves_MultiBSpCurve &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeFirst(self)

    def Last(self) -> "AppParCurves_MultiBSpCurve const &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Last(self)

    def ChangeLast(self) -> "AppParCurves_MultiBSpCurve &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiBSpCurve const &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiBSpCurve &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "AppParCurves_MultiBSpCurve &":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'AppParCurves_MultiBSpCurve') -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_SequenceOfMultiBSpCurve
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

AppParCurves_SequenceOfMultiBSpCurve_swigregister = _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_swigregister
AppParCurves_SequenceOfMultiBSpCurve_swigregister(AppParCurves_SequenceOfMultiBSpCurve)

def AppParCurves_SequenceOfMultiBSpCurve_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode(theNode, theAl)
AppParCurves_SequenceOfMultiBSpCurve_delNode = _AppParCurves.AppParCurves_SequenceOfMultiBSpCurve_delNode

class AppParCurves_SequenceOfMultiCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_SequenceOfMultiCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_SequenceOfMultiCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< AppParCurves_MultiCurve >::iterator":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_begin(self)

    def end(self) -> "NCollection_Sequence< AppParCurves_MultiCurve >::iterator":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_end(self)

    def cbegin(self) -> "NCollection_Sequence< AppParCurves_MultiCurve >::const_iterator":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_cbegin(self)

    def cend(self) -> "NCollection_Sequence< AppParCurves_MultiCurve >::const_iterator":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_cend(self)

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_SequenceOfMultiCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_IsEmpty(self)

    def Reverse(self) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode)
    else:
        delNode = _AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Clear(self, theAllocator)

    def Assign(self, theOther: 'AppParCurves_SequenceOfMultiCurve') -> "NCollection_Sequence< AppParCurves_MultiCurve > &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Assign(self, theOther)

    def Set(self, theOther: 'AppParCurves_SequenceOfMultiCurve') -> "NCollection_Sequence< AppParCurves_MultiCurve > &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'AppParCurves_SequenceOfMultiCurve') -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Split(self, theIndex, theSeq)

    def First(self) -> "AppParCurves_MultiCurve const &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_First(self)

    def ChangeFirst(self) -> "AppParCurves_MultiCurve &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeFirst(self)

    def Last(self) -> "AppParCurves_MultiCurve const &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Last(self)

    def ChangeLast(self) -> "AppParCurves_MultiCurve &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiCurve const &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "AppParCurves_MultiCurve &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "AppParCurves_MultiCurve &":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'AppParCurves_MultiCurve') -> "void":
        return _AppParCurves.AppParCurves_SequenceOfMultiCurve_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _AppParCurves.delete_AppParCurves_SequenceOfMultiCurve
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

AppParCurves_SequenceOfMultiCurve_swigregister = _AppParCurves.AppParCurves_SequenceOfMultiCurve_swigregister
AppParCurves_SequenceOfMultiCurve_swigregister(AppParCurves_SequenceOfMultiCurve)

def AppParCurves_SequenceOfMultiCurve_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode(theNode, theAl)
AppParCurves_SequenceOfMultiCurve_delNode = _AppParCurves.AppParCurves_SequenceOfMultiCurve_delNode

class appparcurves(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, appparcurves, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, appparcurves, name)
    __repr__ = _swig_repr

    def Bernstein(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        NbPoles: int
        U: math_Vector
        A: math_Matrix
        DA: math_Matrix

        Returns
        -------
        None

        """
        return _AppParCurves.appparcurves_Bernstein(*args)

    Bernstein = staticmethod(Bernstein)

    def BernsteinMatrix(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        NbPoles: int
        U: math_Vector
        A: math_Matrix

        Returns
        -------
        None

        """
        return _AppParCurves.appparcurves_BernsteinMatrix(*args)

    BernsteinMatrix = staticmethod(BernsteinMatrix)

    def SecondDerivativeBernstein(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        DDA: math_Vector

        Returns
        -------
        None

        """
        return _AppParCurves.appparcurves_SecondDerivativeBernstein(*args)

    SecondDerivativeBernstein = staticmethod(SecondDerivativeBernstein)

    def SplineFunction(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        NbPoles: int
        Degree: int
        Parameters: math_Vector
        FlatKnots: math_Vector
        A: math_Matrix
        DA: math_Matrix
        Index: math_IntegerVector

        Returns
        -------
        None

        """
        return _AppParCurves.appparcurves_SplineFunction(*args)

    SplineFunction = staticmethod(SplineFunction)

    __repr__ = _dumps_object


    def __init__(self):
        this = _AppParCurves.new_appparcurves()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AppParCurves.delete_appparcurves
    __del__ = lambda self: None
appparcurves_swigregister = _AppParCurves.appparcurves_swigregister
appparcurves_swigregister(appparcurves)

def appparcurves_Bernstein(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    NbPoles: int
    U: math_Vector
    A: math_Matrix
    DA: math_Matrix

    Returns
    -------
    None

    """
    return _AppParCurves.appparcurves_Bernstein(*args)

def appparcurves_BernsteinMatrix(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    NbPoles: int
    U: math_Vector
    A: math_Matrix

    Returns
    -------
    None

    """
    return _AppParCurves.appparcurves_BernsteinMatrix(*args)

def appparcurves_SecondDerivativeBernstein(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    DDA: math_Vector

    Returns
    -------
    None

    """
    return _AppParCurves.appparcurves_SecondDerivativeBernstein(*args)

def appparcurves_SplineFunction(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    NbPoles: int
    Degree: int
    Parameters: math_Vector
    FlatKnots: math_Vector
    A: math_Matrix
    DA: math_Matrix
    Index: math_IntegerVector

    Returns
    -------
    None

    """
    return _AppParCurves.appparcurves_SplineFunction(*args)

class AppParCurves_ConstraintCouple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_ConstraintCouple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_ConstraintCouple, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns an indefinite constraintcouple.

        Returns
        -------
        None

        Create a couple the object <index> will have the constraint <cons>.

        Parameters
        ----------
        TheIndex: int
        Cons: AppParCurves_Constraint

        Returns
        -------
        None

        """
        this = _AppParCurves.new_AppParCurves_ConstraintCouple(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Constraint(self, *args) -> "AppParCurves_Constraint":
        """
        Returns the constraint of the object.

        Returns
        -------
        AppParCurves_Constraint

        """
        return _AppParCurves.AppParCurves_ConstraintCouple_Constraint(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of the constraint object.

        Returns
        -------
        int

        """
        return _AppParCurves.AppParCurves_ConstraintCouple_Index(self, *args)


    def SetConstraint(self, *args) -> "void":
        """
        Changes the constraint of the object.

        Parameters
        ----------
        Cons: AppParCurves_Constraint

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_ConstraintCouple_SetConstraint(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        Changes the index of the constraint object.

        Parameters
        ----------
        TheIndex: int

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_ConstraintCouple_SetIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_ConstraintCouple
    __del__ = lambda self: None
AppParCurves_ConstraintCouple_swigregister = _AppParCurves.AppParCurves_ConstraintCouple_swigregister
AppParCurves_ConstraintCouple_swigregister(AppParCurves_ConstraintCouple)

class AppParCurves_MultiCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_MultiCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_MultiCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns an indefinite multicurve.

        Returns
        -------
        None

        Creates a multicurve, describing bezier curves all containing the same number of multipoint. an exception is raised if degree < 0.

        Parameters
        ----------
        NbPol: int

        Returns
        -------
        None

        Creates a multicurve, describing bezier curves all containing the same number of multipoint. each multipoint must have nbcurves poles.

        Parameters
        ----------
        tabMU: AppParCurves_Array1OfMultiPoint

        Returns
        -------
        None

        """
        this = _AppParCurves.new_AppParCurves_MultiCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Curve(self, *args) -> "void":
        """
        Returns the pole array of the curve of range cuindex. an exception is raised if the dimension of the curve is 2d.

        Parameters
        ----------
        CuIndex: int
        TabPnt: TColgp_Array1OfPnt

        Returns
        -------
        None

        Returns the pole array of the curve of range cuindex. an exception is raised if the dimension of the curve is 3d.

        Parameters
        ----------
        CuIndex: int
        TabPnt: TColgp_Array1OfPnt2d

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiCurve_Curve(self, *args)


    def D1(self, *args) -> "void":
        """
        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiCurve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiCurve_D2(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        Returns the degree of the curves.

        Returns
        -------
        int

        """
        return _AppParCurves.AppParCurves_MultiCurve_Degree(self, *args)


    def Dimension(self, *args) -> "Standard_Integer":
        """
        Returns the dimension of the cuindex curve. an exception is raised if cuindex<0 or cuindex>nbcurves.

        Parameters
        ----------
        CuIndex: int

        Returns
        -------
        int

        """
        return _AppParCurves.AppParCurves_MultiCurve_Dimension(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AppParCurves_MultiCurve self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiCurve_DumpToString(self)


    def NbCurves(self, *args) -> "Standard_Integer":
        """
        Returns the number of curves resulting from the approximation of a multiline.

        Returns
        -------
        int

        """
        return _AppParCurves.AppParCurves_MultiCurve_NbCurves(self, *args)


    def NbPoles(self, *args) -> "Standard_Integer":
        """
        Returns the number of poles on curves resulting from the approximation of a multiline.

        Returns
        -------
        int

        """
        return _AppParCurves.AppParCurves_MultiCurve_NbPoles(self, *args)


    def Pole(self, *args) -> "gp_Pnt const":
        """
        Returns the nieme pole of the cuindex curve. the curve must be a 3d curve.

        Parameters
        ----------
        CuIndex: int
        Nieme: int

        Returns
        -------
        gp_Pnt

        """
        return _AppParCurves.AppParCurves_MultiCurve_Pole(self, *args)


    def Pole2d(self, *args) -> "gp_Pnt2d const":
        """
        Returns the nieme pole of the cuindex curve. the curve must be a 2d curve.

        Parameters
        ----------
        CuIndex: int
        Nieme: int

        Returns
        -------
        gp_Pnt2d

        """
        return _AppParCurves.AppParCurves_MultiCurve_Pole2d(self, *args)


    def SetNbPoles(self, *args) -> "void":
        """
        The number of poles of the multicurve will be set to <nbpoles>.

        Parameters
        ----------
        nbPoles: int

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiCurve_SetNbPoles(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Sets the multipoint of range index to the value <mpoint>. an exception is raised if index <0 or index >nbmpoint.

        Parameters
        ----------
        Index: int
        MPoint: AppParCurves_MultiPoint

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiCurve_SetValue(self, *args)


    def Transform(self, *args) -> "void":
        """
        Applies a transformation to the curve of range <cuindex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve. newz = z + dz*oldz.

        Parameters
        ----------
        CuIndex: int
        x: float
        dx: float
        y: float
        dy: float
        z: float
        dz: float

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiCurve_Transform(self, *args)


    def Transform2d(self, *args) -> "void":
        """
        Applies a transformation to the curve of range <cuindex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve.

        Parameters
        ----------
        CuIndex: int
        x: float
        dx: float
        y: float
        dy: float

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiCurve_Transform2d(self, *args)


    def Value(self, *args) -> "void":
        """
        Returns the index multipoint. an exception is raised if index <0 or index >degree+1.

        Parameters
        ----------
        Index: int

        Returns
        -------
        AppParCurves_MultiPoint

        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt

        Returns
        -------
        None

        Returns the value of the point with a parameter u on the bezier curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiCurve
    __del__ = lambda self: None
AppParCurves_MultiCurve_swigregister = _AppParCurves.AppParCurves_MultiCurve_swigregister
AppParCurves_MultiCurve_swigregister(AppParCurves_MultiCurve)

class AppParCurves_MultiPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_MultiPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_MultiPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an indefinite multipoint.

        Returns
        -------
        None

        Constructs a set of points used to approximate a multiline. these points can be of 2 or 3 dimensions. points will be initialized with setpoint and setpoint2d. nbpoints is the number of 3d points. nbpoints2d is the number of 2d points.

        Parameters
        ----------
        NbPoints: int
        NbPoints2d: int

        Returns
        -------
        None

        Creates a multipoint only composed of 3d points.

        Parameters
        ----------
        tabP: TColgp_Array1OfPnt

        Returns
        -------
        None

        Creates a multipoint only composed of 2d points.

        Parameters
        ----------
        tabP2d: TColgp_Array1OfPnt2d

        Returns
        -------
        None

        Constructs a set of points used to approximate a multiline. these points can be of 2 or 3 dimensions. points will be initialized with setpoint and setpoint2d. nbpoints is the total number of points.

        Parameters
        ----------
        tabP: TColgp_Array1OfPnt
        tabP2d: TColgp_Array1OfPnt2d

        Returns
        -------
        None

        """
        this = _AppParCurves.new_AppParCurves_MultiPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimension(self, *args) -> "Standard_Integer":
        """
        Returns the dimension of the point of range index. an exception is raised if index <0 or index > nbcurves.

        Parameters
        ----------
        Index: int

        Returns
        -------
        int

        """
        return _AppParCurves.AppParCurves_MultiPoint_Dimension(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AppParCurves_MultiPoint self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiPoint_DumpToString(self)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of points of dimension 3d.

        Returns
        -------
        int

        """
        return _AppParCurves.AppParCurves_MultiPoint_NbPoints(self, *args)


    def NbPoints2d(self, *args) -> "Standard_Integer":
        """
        Returns the number of points of dimension 2d.

        Returns
        -------
        int

        """
        return _AppParCurves.AppParCurves_MultiPoint_NbPoints2d(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        Returns the 3d point of range index. an exception is raised if index < 0 or index < number of 3d points.

        Parameters
        ----------
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _AppParCurves.AppParCurves_MultiPoint_Point(self, *args)


    def Point2d(self, *args) -> "gp_Pnt2d const":
        """
        Returns the 2d point of range index. an exception is raised if index <= number of 3d points or index > total number of points.

        Parameters
        ----------
        Index: int

        Returns
        -------
        gp_Pnt2d

        """
        return _AppParCurves.AppParCurves_MultiPoint_Point2d(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        The 3d point of range index of this multipoint is set to <point>. an exception is raised if index < 0 or index > number of 3d points.

        Parameters
        ----------
        Index: int
        Point: gp_Pnt

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiPoint_SetPoint(self, *args)


    def SetPoint2d(self, *args) -> "void":
        """
        The 2d point of range index is set to <point>. an exception is raised if index > 3d points or index > total number of points.

        Parameters
        ----------
        Index: int
        Point: gp_Pnt2d

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiPoint_SetPoint2d(self, *args)


    def Transform(self, *args) -> "void":
        """
        Applies a transformation to the curve of range <cuindex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve. newz = z + dz*oldz.

        Parameters
        ----------
        CuIndex: int
        x: float
        dx: float
        y: float
        dy: float
        z: float
        dz: float

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiPoint_Transform(self, *args)


    def Transform2d(self, *args) -> "void":
        """
        Applies a transformation to the curve of range <cuindex>. newx = x + dx*oldx newy = y + dy*oldy for all points of the curve.

        Parameters
        ----------
        CuIndex: int
        x: float
        dx: float
        y: float
        dy: float

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiPoint_Transform2d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiPoint
    __del__ = lambda self: None
AppParCurves_MultiPoint_swigregister = _AppParCurves.AppParCurves_MultiPoint_swigregister
AppParCurves_MultiPoint_swigregister(AppParCurves_MultiPoint)

class AppParCurves_MultiBSpCurve(AppParCurves_MultiCurve):
    __swig_setmethods__ = {}
    for _s in [AppParCurves_MultiCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_MultiBSpCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [AppParCurves_MultiCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_MultiBSpCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns an indefinite multibspcurve.

        Returns
        -------
        None

        Creates a multibspcurve, describing bspline curves all containing the same number of multipoint. an exception is raised if degree < 0.

        Parameters
        ----------
        NbPol: int

        Returns
        -------
        None

        Creates a multibspcurve, describing bspline curves all containing the same number of multipoint. each multipoint must have nbcurves poles.

        Parameters
        ----------
        tabMU: AppParCurves_Array1OfMultiPoint
        Knots: TColStd_Array1OfReal
        Mults: TColStd_Array1OfInteger

        Returns
        -------
        None

        Creates a multibspcurve, describing bspline curves, taking control points from <sc>.

        Parameters
        ----------
        SC: AppParCurves_MultiCurve
        Knots: TColStd_Array1OfReal
        Mults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        this = _AppParCurves.new_AppParCurves_MultiBSpCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def D1(self, *args) -> "void":
        """
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_D2(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AppParCurves_MultiBSpCurve self) -> std::string"""
        return _AppParCurves.AppParCurves_MultiBSpCurve_DumpToString(self)


    def Knots(self, *args) -> "TColStd_Array1OfReal const &":
        """
        Returns an array of reals containing the multiplicities of curves resulting from the approximation.

        Returns
        -------
        TColStd_Array1OfReal

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Knots(self, *args)


    def Multiplicities(self, *args) -> "TColStd_Array1OfInteger const &":
        """
        Returns an array of reals containing the multiplicities of curves resulting from the approximation.

        Returns
        -------
        TColStd_Array1OfInteger

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Multiplicities(self, *args)


    def SetKnots(self, *args) -> "void":
        """
        Knots of the multibspcurve are assigned to <theknots>.

        Parameters
        ----------
        theKnots: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_SetKnots(self, *args)


    def SetMultiplicities(self, *args) -> "void":
        """
        Multiplicities of the multibspcurve are assigned to <themults>.

        Parameters
        ----------
        theMults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_SetMultiplicities(self, *args)


    def Value(self, *args) -> "void":
        """
        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 2d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt

        Returns
        -------
        None

        Returns the value of the point with a parameter u on the bspline curve number cuindex. an exception is raised if cuindex <0 or > nbcurves. an exception is raised if the curve dimension is 3d.

        Parameters
        ----------
        CuIndex: int
        U: float
        Pt: gp_Pnt2d

        Returns
        -------
        None

        """
        return _AppParCurves.AppParCurves_MultiBSpCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_MultiBSpCurve
    __del__ = lambda self: None
AppParCurves_MultiBSpCurve_swigregister = _AppParCurves.AppParCurves_MultiBSpCurve_swigregister
AppParCurves_MultiBSpCurve_swigregister(AppParCurves_MultiBSpCurve)

class AppParCurves_HArray1OfMultiCurve(AppParCurves_Array1OfMultiCurve, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [AppParCurves_Array1OfMultiCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_HArray1OfMultiCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [AppParCurves_Array1OfMultiCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_HArray1OfMultiCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_HArray1OfMultiCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "AppParCurves_Array1OfMultiCurve const &":
        return _AppParCurves.AppParCurves_HArray1OfMultiCurve_Array1(self)

    def ChangeArray1(self) -> "AppParCurves_Array1OfMultiCurve &":
        return _AppParCurves.AppParCurves_HArray1OfMultiCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiCurve_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiCurve
    __del__ = lambda self: None
AppParCurves_HArray1OfMultiCurve_swigregister = _AppParCurves.AppParCurves_HArray1OfMultiCurve_swigregister
AppParCurves_HArray1OfMultiCurve_swigregister(AppParCurves_HArray1OfMultiCurve)

class AppParCurves_HArray1OfConstraintCouple(AppParCurves_Array1OfConstraintCouple, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [AppParCurves_Array1OfConstraintCouple, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_HArray1OfConstraintCouple, name, value)
    __swig_getmethods__ = {}
    for _s in [AppParCurves_Array1OfConstraintCouple, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_HArray1OfConstraintCouple, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_HArray1OfConstraintCouple(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "AppParCurves_Array1OfConstraintCouple const &":
        return _AppParCurves.AppParCurves_HArray1OfConstraintCouple_Array1(self)

    def ChangeArray1(self) -> "AppParCurves_Array1OfConstraintCouple &":
        return _AppParCurves.AppParCurves_HArray1OfConstraintCouple_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfConstraintCouple_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfConstraintCouple
    __del__ = lambda self: None
AppParCurves_HArray1OfConstraintCouple_swigregister = _AppParCurves.AppParCurves_HArray1OfConstraintCouple_swigregister
AppParCurves_HArray1OfConstraintCouple_swigregister(AppParCurves_HArray1OfConstraintCouple)

class AppParCurves_HArray1OfMultiPoint(AppParCurves_Array1OfMultiPoint, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [AppParCurves_Array1OfMultiPoint, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_HArray1OfMultiPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [AppParCurves_Array1OfMultiPoint, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_HArray1OfMultiPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_HArray1OfMultiPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "AppParCurves_Array1OfMultiPoint const &":
        return _AppParCurves.AppParCurves_HArray1OfMultiPoint_Array1(self)

    def ChangeArray1(self) -> "AppParCurves_Array1OfMultiPoint &":
        return _AppParCurves.AppParCurves_HArray1OfMultiPoint_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiPoint_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiPoint
    __del__ = lambda self: None
AppParCurves_HArray1OfMultiPoint_swigregister = _AppParCurves.AppParCurves_HArray1OfMultiPoint_swigregister
AppParCurves_HArray1OfMultiPoint_swigregister(AppParCurves_HArray1OfMultiPoint)

class AppParCurves_HArray1OfMultiBSpCurve(AppParCurves_Array1OfMultiBSpCurve, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [AppParCurves_Array1OfMultiBSpCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppParCurves_HArray1OfMultiBSpCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [AppParCurves_Array1OfMultiBSpCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppParCurves_HArray1OfMultiBSpCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _AppParCurves.new_AppParCurves_HArray1OfMultiBSpCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "AppParCurves_Array1OfMultiBSpCurve const &":
        return _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_Array1(self)

    def ChangeArray1(self) -> "AppParCurves_Array1OfMultiBSpCurve &":
        return _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_AppParCurves_HArray1OfMultiBSpCurve_DownCast(t)

    __swig_destroy__ = _AppParCurves.delete_AppParCurves_HArray1OfMultiBSpCurve
    __del__ = lambda self: None
AppParCurves_HArray1OfMultiBSpCurve_swigregister = _AppParCurves.AppParCurves_HArray1OfMultiBSpCurve_swigregister
AppParCurves_HArray1OfMultiBSpCurve_swigregister(AppParCurves_HArray1OfMultiBSpCurve)



# This file is compatible with both classic and new-style classes.


