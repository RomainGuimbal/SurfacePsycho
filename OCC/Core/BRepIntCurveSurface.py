# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepIntCurveSurface module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepintcurvesurface.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepIntCurveSurface')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepIntCurveSurface')
    _BRepIntCurveSurface = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepIntCurveSurface', [dirname(__file__)])
        except ImportError:
            import _BRepIntCurveSurface
            return _BRepIntCurveSurface
        try:
            _mod = imp.load_module('_BRepIntCurveSurface', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepIntCurveSurface = swig_import_helper()
    del swig_import_helper
else:
    import _BRepIntCurveSurface
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepIntCurveSurface.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BRepIntCurveSurface.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepIntCurveSurface.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepIntCurveSurface.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BRepIntCurveSurface.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BRepIntCurveSurface.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BRepIntCurveSurface.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BRepIntCurveSurface.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BRepIntCurveSurface.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BRepIntCurveSurface.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepIntCurveSurface.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepIntCurveSurface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepIntCurveSurface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepIntCurveSurface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepIntCurveSurface.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepIntCurveSurface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BRepIntCurveSurface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepIntCurveSurface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepIntCurveSurface.process_exception(error, method_name, class_name)
process_exception = _BRepIntCurveSurface.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.GeomAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf

from enum import IntEnum
from OCC.Core.Exception import *



class BRepIntCurveSurface_Inter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepIntCurveSurface_Inter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BRepIntCurveSurface_Inter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor;.

        Returns
        -------
        None

        """
        this = _BRepIntCurveSurface.new_BRepIntCurveSurface_Inter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Face(self, *args) -> "TopoDS_Face const":
        """
        Returns the current face.

        Returns
        -------
        TopoDS_Face

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Face(self, *args)


    def Init(self, *args) -> "void":
        """
        Load the shape, the curve and initialize the tolerance used for the classification.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theCurve: GeomAdaptor_Curve
        theTol: float

        Returns
        -------
        None

        Load the shape, the curve and initialize the tolerance used for the classification.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theLine: gp_Lin
        theTol: float

        Returns
        -------
        None

        Method to find intersections of specified curve with loaded shape.

        Parameters
        ----------
        theCurve: GeomAdaptor_Curve

        Returns
        -------
        None

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Init(self, *args)


    def Load(self, *args) -> "void":
        """
        Load the shape, and initialize the tolerance used for the classification.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theTol: float

        Returns
        -------
        None

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Load(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a current face.

        Returns
        -------
        bool

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Sets the next intersection point to check.

        Returns
        -------
        None

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Next(self, *args)


    def Pnt(self, *args) -> "gp_Pnt const":
        """
        Returns the current geometric point.

        Returns
        -------
        gp_Pnt

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Pnt(self, *args)


    def Point(self, *args) -> "IntCurveSurface_IntersectionPoint":
        """
        Returns the current intersection point.

        Returns
        -------
        IntCurveSurface_IntersectionPoint

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Point(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        Returns the current state (in or on).

        Returns
        -------
        TopAbs_State

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_State(self, *args)


    def Transition(self, *args) -> "IntCurveSurface_TransitionOnCurve":
        """
        Returns the transition of the line on the surface (in or out or unknown).

        Returns
        -------
        IntCurveSurface_TransitionOnCurve

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Transition(self, *args)


    def U(self, *args) -> "Standard_Real":
        """
        Returns the u parameter of the current point on the current face.

        Returns
        -------
        float

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_U(self, *args)


    def V(self, *args) -> "Standard_Real":
        """
        Returns the v parameter of the current point on the current face.

        Returns
        -------
        float

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_V(self, *args)


    def W(self, *args) -> "Standard_Real":
        """
        Returns the parameter of the current point on the curve.

        Returns
        -------
        float

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_W(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepIntCurveSurface.delete_BRepIntCurveSurface_Inter
    __del__ = lambda self: None
BRepIntCurveSurface_Inter_swigregister = _BRepIntCurveSurface.BRepIntCurveSurface_Inter_swigregister
BRepIntCurveSurface_Inter_swigregister(BRepIntCurveSurface_Inter)



# This file is compatible with both classic and new-style classes.


