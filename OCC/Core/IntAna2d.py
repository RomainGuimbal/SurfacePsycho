# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntAna2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intana2d.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntAna2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntAna2d')
    _IntAna2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntAna2d', [dirname(__file__)])
        except ImportError:
            import _IntAna2d
            return _IntAna2d
        try:
            _mod = imp.load_module('_IntAna2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntAna2d = swig_import_helper()
    del swig_import_helper
else:
    import _IntAna2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntAna2d.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _IntAna2d.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IntAna2d.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IntAna2d.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _IntAna2d.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _IntAna2d.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _IntAna2d.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _IntAna2d.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _IntAna2d.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _IntAna2d.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IntAna2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _IntAna2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _IntAna2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IntAna2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IntAna2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IntAna2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _IntAna2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IntAna2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IntAna2d.process_exception(error, method_name, class_name)
process_exception = _IntAna2d.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *



class IntAna2d_AnaIntersection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntAna2d_AnaIntersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntAna2d_AnaIntersection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor. isdone returns false.

        Returns
        -------
        None

        Intersection between two lines.

        Parameters
        ----------
        L1: gp_Lin2d
        L2: gp_Lin2d

        Returns
        -------
        None

        Intersection between two circles.

        Parameters
        ----------
        C1: gp_Circ2d
        C2: gp_Circ2d

        Returns
        -------
        None

        Intersection between a line and a circle.

        Parameters
        ----------
        L: gp_Lin2d
        C: gp_Circ2d

        Returns
        -------
        None

        Intersection between a line and a conic.

        Parameters
        ----------
        L: gp_Lin2d
        C: IntAna2d_Conic

        Returns
        -------
        None

        Intersection between a circle and another conic.

        Parameters
        ----------
        C: gp_Circ2d
        Co: IntAna2d_Conic

        Returns
        -------
        None

        Intersection between an ellipse and another conic.

        Parameters
        ----------
        E: gp_Elips2d
        C: IntAna2d_Conic

        Returns
        -------
        None

        Intersection between a parabola and another conic.

        Parameters
        ----------
        P: gp_Parab2d
        C: IntAna2d_Conic

        Returns
        -------
        None

        Intersection between an hyperbola and another conic.

        Parameters
        ----------
        H: gp_Hypr2d
        C: IntAna2d_Conic

        Returns
        -------
        None

        """
        this = _IntAna2d.new_IntAna2d_AnaIntersection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IdenticalElements(self, *args) -> "Standard_Boolean":
        """
        For the intersection between an element of gp and a conic known by an implicit equation, the result will be true if the element of gp verifies the implicit equation. for the intersection between two lin2d or two circ2d, the result will be true if the elements are identical. the function returns false in all the other cases.

        Returns
        -------
        bool

        """
        return _IntAna2d.IntAna2d_AnaIntersection_IdenticalElements(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns true if the computation was succesfull.

        Returns
        -------
        bool

        """
        return _IntAna2d.IntAna2d_AnaIntersection_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        Returns true when there is no intersection, i-e - no intersection point - the elements are not identical. the element may be parallel in this case.

        Returns
        -------
        bool

        """
        return _IntAna2d.IntAna2d_AnaIntersection_IsEmpty(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of intpoint between the 2 curves.

        Returns
        -------
        int

        """
        return _IntAna2d.IntAna2d_AnaIntersection_NbPoints(self, *args)


    def ParallelElements(self, *args) -> "Standard_Boolean":
        """
        For the intersection between two lin2d or two circ2d, the function returns true if the elements are parallel. the function returns false in all the other cases.

        Returns
        -------
        bool

        """
        return _IntAna2d.IntAna2d_AnaIntersection_ParallelElements(self, *args)


    def Perform(self, *args) -> "void":
        """
        Intersection between two lines.

        Parameters
        ----------
        L1: gp_Lin2d
        L2: gp_Lin2d

        Returns
        -------
        None

        Intersection between two circles.

        Parameters
        ----------
        C1: gp_Circ2d
        C2: gp_Circ2d

        Returns
        -------
        None

        Intersection between a line and a circle.

        Parameters
        ----------
        L: gp_Lin2d
        C: gp_Circ2d

        Returns
        -------
        None

        Intersection between a line and a conic.

        Parameters
        ----------
        L: gp_Lin2d
        C: IntAna2d_Conic

        Returns
        -------
        None

        Intersection between a circle and another conic.

        Parameters
        ----------
        C: gp_Circ2d
        Co: IntAna2d_Conic

        Returns
        -------
        None

        Intersection between an ellipse and another conic.

        Parameters
        ----------
        E: gp_Elips2d
        C: IntAna2d_Conic

        Returns
        -------
        None

        Intersection between a parabola and another conic.

        Parameters
        ----------
        P: gp_Parab2d
        C: IntAna2d_Conic

        Returns
        -------
        None

        Intersection between an hyperbola and another conic.

        Parameters
        ----------
        H: gp_Hypr2d
        C: IntAna2d_Conic

        Returns
        -------
        None

        """
        return _IntAna2d.IntAna2d_AnaIntersection_Perform(self, *args)


    def Point(self, *args) -> "IntAna2d_IntPoint const &":
        """
        Returns the intersection point of range n; if (n<=0) or (n>nbpoints), an exception is raised.

        Parameters
        ----------
        N: int

        Returns
        -------
        IntAna2d_IntPoint

        """
        return _IntAna2d.IntAna2d_AnaIntersection_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_AnaIntersection
    __del__ = lambda self: None
IntAna2d_AnaIntersection_swigregister = _IntAna2d.IntAna2d_AnaIntersection_swigregister
IntAna2d_AnaIntersection_swigregister(IntAna2d_AnaIntersection)

class IntAna2d_Conic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntAna2d_Conic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntAna2d_Conic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: gp_Circ2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Lin2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Parab2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Hypr2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: gp_Elips2d

        Returns
        -------
        None

        """
        this = _IntAna2d.new_IntAna2d_Conic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Coefficients(self, *args) -> "void":
        """
        Returns the coefficients of the polynomial equation wich defines the conic: a.x**2 + b.y**2 + 2.c.x*y + 2.d.x + 2.e.y + f = 0.

        Parameters
        ----------

        Returns
        -------
        A: float
        B: float
        C: float
        D: float
        E: float
        F: float

        """
        return _IntAna2d.IntAna2d_Conic_Coefficients(self, *args)


    def Grad(self, *args) -> "gp_XY":
        """
        Returns the value of the gradient of f at the point x,y.

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        gp_XY

        """
        return _IntAna2d.IntAna2d_Conic_Grad(self, *args)


    def NewCoefficients(self, *args) -> "void":
        """
        Returns the coefficients of the polynomial equation ( written in the natural coordinates system ) a x x + b y y + 2 c x y + 2 d x + 2 e y + f in the local coordinates system defined by axis.

        Parameters
        ----------
        Axis: gp_Ax2d

        Returns
        -------
        A: float
        B: float
        C: float
        D: float
        E: float
        F: float

        """
        return _IntAna2d.IntAna2d_Conic_NewCoefficients(self, *args)


    def ValAndGrad(self, *args) -> "void":
        """
        Returns the value of the function and its gradient at the point x,y.

        Parameters
        ----------
        X: float
        Y: float
        Grd: gp_XY

        Returns
        -------
        Val: float

        """
        return _IntAna2d.IntAna2d_Conic_ValAndGrad(self, *args)


    def Value(self, *args) -> "Standard_Real":
        """
        Value of the function f at the point x,y.

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        float

        """
        return _IntAna2d.IntAna2d_Conic_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_Conic
    __del__ = lambda self: None
IntAna2d_Conic_swigregister = _IntAna2d.IntAna2d_Conic_swigregister
IntAna2d_Conic_swigregister(IntAna2d_Conic)

class IntAna2d_IntPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntAna2d_IntPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntAna2d_IntPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Create an intersection point between 2 parametric 2d lines. x,y are the coordinate of the point. u1 is the parameter on the first element, u2 the parameter on the second one.

        Parameters
        ----------
        X: float
        Y: float
        U1: float
        U2: float

        Returns
        -------
        None

        Create an intersection point between a parametric 2d line, and a line given by an implicit equation (implicitcurve). x,y are the coordinate of the point. u1 is the parameter on the parametric element. empty constructor. it's necessary to use one of the setvalue method after this one.

        Parameters
        ----------
        X: float
        Y: float
        U1: float

        Returns
        -------
        None

        No available documentation.

        Returns
        -------
        None

        """
        this = _IntAna2d.new_IntAna2d_IntPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ParamOnFirst(self, *args) -> "Standard_Real":
        """
        Returns the parameter on the first element.

        Returns
        -------
        float

        """
        return _IntAna2d.IntAna2d_IntPoint_ParamOnFirst(self, *args)


    def ParamOnSecond(self, *args) -> "Standard_Real":
        """
        Returns the parameter on the second element. if the second element is an implicit curve, an exception is raised.

        Returns
        -------
        float

        """
        return _IntAna2d.IntAna2d_IntPoint_ParamOnSecond(self, *args)


    def SecondIsImplicit(self, *args) -> "Standard_Boolean":
        """
        Returns true if the second curve is implicit.

        Returns
        -------
        bool

        """
        return _IntAna2d.IntAna2d_IntPoint_SecondIsImplicit(self, *args)


    def SetValue(self, *args) -> "void":
        """
        Set the values for a 'non-implicit' point.

        Parameters
        ----------
        X: float
        Y: float
        U1: float
        U2: float

        Returns
        -------
        None

        Set the values for an 'implicit' point.

        Parameters
        ----------
        X: float
        Y: float
        U1: float

        Returns
        -------
        None

        """
        return _IntAna2d.IntAna2d_IntPoint_SetValue(self, *args)


    def Value(self, *args) -> "gp_Pnt2d const":
        """
        Returns the geometric point.

        Returns
        -------
        gp_Pnt2d

        """
        return _IntAna2d.IntAna2d_IntPoint_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_IntPoint
    __del__ = lambda self: None
IntAna2d_IntPoint_swigregister = _IntAna2d.IntAna2d_IntPoint_swigregister
IntAna2d_IntPoint_swigregister(IntAna2d_IntPoint)



# This file is compatible with both classic and new-style classes.


