# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
IntAna2d module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_intana2d.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IntAna2d
else:
    import _IntAna2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntAna2d.delete_SwigPyIterator

    def value(self):
        return _IntAna2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IntAna2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IntAna2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IntAna2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IntAna2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IntAna2d.SwigPyIterator_copy(self)

    def next(self):
        return _IntAna2d.SwigPyIterator_next(self)

    def __next__(self):
        return _IntAna2d.SwigPyIterator___next__(self)

    def previous(self):
        return _IntAna2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IntAna2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IntAna2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IntAna2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IntAna2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IntAna2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IntAna2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IntAna2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IntAna2d:
_IntAna2d.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _IntAna2d.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _IntAna2d.ios_base_erase_event
    imbue_event = _IntAna2d.ios_base_imbue_event
    copyfmt_event = _IntAna2d.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _IntAna2d.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _IntAna2d.ios_base_flags(self, *args)

    def setf(self, *args):
        return _IntAna2d.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _IntAna2d.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _IntAna2d.ios_base_precision(self, *args)

    def width(self, *args):
        return _IntAna2d.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _IntAna2d.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _IntAna2d.ios_base_imbue(self, __loc)

    def getloc(self):
        return _IntAna2d.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _IntAna2d.ios_base_xalloc()

    def iword(self, __ix):
        return _IntAna2d.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _IntAna2d.ios_base_pword(self, __ix)
    __swig_destroy__ = _IntAna2d.delete_ios_base

# Register ios_base in _IntAna2d:
_IntAna2d.ios_base_swigregister(ios_base)
cvar = _IntAna2d.cvar
ios_base.boolalpha = _IntAna2d.cvar.ios_base_boolalpha
ios_base.dec = _IntAna2d.cvar.ios_base_dec
ios_base.fixed = _IntAna2d.cvar.ios_base_fixed
ios_base.hex = _IntAna2d.cvar.ios_base_hex
ios_base.internal = _IntAna2d.cvar.ios_base_internal
ios_base.left = _IntAna2d.cvar.ios_base_left
ios_base.oct = _IntAna2d.cvar.ios_base_oct
ios_base.right = _IntAna2d.cvar.ios_base_right
ios_base.scientific = _IntAna2d.cvar.ios_base_scientific
ios_base.showbase = _IntAna2d.cvar.ios_base_showbase
ios_base.showpoint = _IntAna2d.cvar.ios_base_showpoint
ios_base.showpos = _IntAna2d.cvar.ios_base_showpos
ios_base.skipws = _IntAna2d.cvar.ios_base_skipws
ios_base.unitbuf = _IntAna2d.cvar.ios_base_unitbuf
ios_base.uppercase = _IntAna2d.cvar.ios_base_uppercase
ios_base.adjustfield = _IntAna2d.cvar.ios_base_adjustfield
ios_base.basefield = _IntAna2d.cvar.ios_base_basefield
ios_base.floatfield = _IntAna2d.cvar.ios_base_floatfield
ios_base.badbit = _IntAna2d.cvar.ios_base_badbit
ios_base.eofbit = _IntAna2d.cvar.ios_base_eofbit
ios_base.failbit = _IntAna2d.cvar.ios_base_failbit
ios_base.goodbit = _IntAna2d.cvar.ios_base_goodbit
ios_base.app = _IntAna2d.cvar.ios_base_app
ios_base.ate = _IntAna2d.cvar.ios_base_ate
ios_base.binary = _IntAna2d.cvar.ios_base_binary
ios_base.ios_base_in = _IntAna2d.cvar.ios_base_ios_base_in
ios_base.out = _IntAna2d.cvar.ios_base_out
ios_base.trunc = _IntAna2d.cvar.ios_base_trunc
ios_base.beg = _IntAna2d.cvar.ios_base_beg
ios_base.cur = _IntAna2d.cvar.ios_base_cur
ios_base.end = _IntAna2d.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _IntAna2d.ios_rdstate(self)

    def clear(self, *args):
        return _IntAna2d.ios_clear(self, *args)

    def setstate(self, __state):
        return _IntAna2d.ios_setstate(self, __state)

    def good(self):
        return _IntAna2d.ios_good(self)

    def eof(self):
        return _IntAna2d.ios_eof(self)

    def fail(self):
        return _IntAna2d.ios_fail(self)

    def bad(self):
        return _IntAna2d.ios_bad(self)

    def exceptions(self, *args):
        return _IntAna2d.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _IntAna2d.ios_swiginit(self, _IntAna2d.new_ios(__sb))
    __swig_destroy__ = _IntAna2d.delete_ios

    def tie(self, *args):
        return _IntAna2d.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _IntAna2d.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _IntAna2d.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _IntAna2d.ios_fill(self, *args)

    def imbue(self, __loc):
        return _IntAna2d.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _IntAna2d.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _IntAna2d.ios_widen(self, __c)

# Register ios in _IntAna2d:
_IntAna2d.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _IntAna2d.ostream_swiginit(self, _IntAna2d.new_ostream(__sb))
    __swig_destroy__ = _IntAna2d.delete_ostream

    def __lshift__(self, *args):
        return _IntAna2d.ostream___lshift__(self, *args)

    def put(self, __c):
        return _IntAna2d.ostream_put(self, __c)

    def write(self, __s, __n):
        return _IntAna2d.ostream_write(self, __s, __n)

    def flush(self):
        return _IntAna2d.ostream_flush(self)

    def tellp(self):
        return _IntAna2d.ostream_tellp(self)

    def seekp(self, *args):
        return _IntAna2d.ostream_seekp(self, *args)

# Register ostream in _IntAna2d:
_IntAna2d.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _IntAna2d.istream_swiginit(self, _IntAna2d.new_istream(__sb))
    __swig_destroy__ = _IntAna2d.delete_istream

    def __rshift__(self, *args):
        return _IntAna2d.istream___rshift__(self, *args)

    def gcount(self):
        return _IntAna2d.istream_gcount(self)

    def get(self, *args):
        return _IntAna2d.istream_get(self, *args)

    def getline(self, *args):
        return _IntAna2d.istream_getline(self, *args)

    def ignore(self, *args):
        return _IntAna2d.istream_ignore(self, *args)

    def peek(self):
        return _IntAna2d.istream_peek(self)

    def read(self, __s, __n):
        return _IntAna2d.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _IntAna2d.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _IntAna2d.istream_putback(self, __c)

    def unget(self):
        return _IntAna2d.istream_unget(self)

    def sync(self):
        return _IntAna2d.istream_sync(self)

    def tellg(self):
        return _IntAna2d.istream_tellg(self)

    def seekg(self, *args):
        return _IntAna2d.istream_seekg(self, *args)

# Register istream in _IntAna2d:
_IntAna2d.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _IntAna2d.iostream_swiginit(self, _IntAna2d.new_iostream(__sb))
    __swig_destroy__ = _IntAna2d.delete_iostream

# Register iostream in _IntAna2d:
_IntAna2d.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _IntAna2d.endl_cb_ptr
endl = _IntAna2d.endl
ends_cb_ptr = _IntAna2d.ends_cb_ptr
ends = _IntAna2d.ends
flush_cb_ptr = _IntAna2d.flush_cb_ptr
flush = _IntAna2d.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *



class IntAna2d_AnaIntersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor. isdone returns false.

        Parameters
        ----------
        L1: gp_Lin2d
        L2: gp_Lin2d

        Return
        -------
        None

        Description
        -----------
        Intersection between two lines.

        Parameters
        ----------
        C1: gp_Circ2d
        C2: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        Intersection between two circles.

        Parameters
        ----------
        L: gp_Lin2d
        C: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a circle.

        Parameters
        ----------
        L: gp_Lin2d
        C: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a conic.

        Parameters
        ----------
        C: gp_Circ2d
        Co: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between a circle and another conic.

        Parameters
        ----------
        E: gp_Elips2d
        C: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and another conic.

        Parameters
        ----------
        P: gp_Parab2d
        C: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between a parabola and another conic.

        Parameters
        ----------
        H: gp_Hypr2d
        C: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between an hyperbola and another conic.

        """
        _IntAna2d.IntAna2d_AnaIntersection_swiginit(self, _IntAna2d.new_IntAna2d_AnaIntersection(*args))

    def IdenticalElements(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        For the intersection between an element of gp and a conic known by an implicit equation, the result will be true if the element of gp verifies the implicit equation. for the intersection between two lin2d or two circ2d, the result will be true if the elements are identical. the function returns false in all the other cases.

        """
        return _IntAna2d.IntAna2d_AnaIntersection_IdenticalElements(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the computation was successful.

        """
        return _IntAna2d.IntAna2d_AnaIntersection_IsDone(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when there is no intersection, i-e - no intersection point - the elements are not identical. the element may be parallel in this case.

        """
        return _IntAna2d.IntAna2d_AnaIntersection_IsEmpty(self, *args)

    def NbPoints(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of intpoint between the 2 curves.

        """
        return _IntAna2d.IntAna2d_AnaIntersection_NbPoints(self, *args)

    def ParallelElements(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        For the intersection between two lin2d or two circ2d, the function returns true if the elements are parallel. the function returns false in all the other cases.

        """
        return _IntAna2d.IntAna2d_AnaIntersection_ParallelElements(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        L1: gp_Lin2d
        L2: gp_Lin2d

        Return
        -------
        None

        Description
        -----------
        Intersection between two lines.

        Parameters
        ----------
        C1: gp_Circ2d
        C2: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        Intersection between two circles.

        Parameters
        ----------
        L: gp_Lin2d
        C: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a circle.

        Parameters
        ----------
        L: gp_Lin2d
        C: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between a line and a conic.

        Parameters
        ----------
        C: gp_Circ2d
        Co: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between a circle and another conic.

        Parameters
        ----------
        E: gp_Elips2d
        C: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between an ellipse and another conic.

        Parameters
        ----------
        P: gp_Parab2d
        C: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between a parabola and another conic.

        Parameters
        ----------
        H: gp_Hypr2d
        C: IntAna2d_Conic

        Return
        -------
        None

        Description
        -----------
        Intersection between an hyperbola and another conic.

        """
        return _IntAna2d.IntAna2d_AnaIntersection_Perform(self, *args)

    def Point(self, *args):
        r"""

        Parameters
        ----------
        N: int

        Return
        -------
        IntAna2d_IntPoint

        Description
        -----------
        Returns the intersection point of range n; if (n<=0) or (n>nbpoints), an exception is raised.

        """
        return _IntAna2d.IntAna2d_AnaIntersection_Point(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_AnaIntersection

# Register IntAna2d_AnaIntersection in _IntAna2d:
_IntAna2d.IntAna2d_AnaIntersection_swigregister(IntAna2d_AnaIntersection)
class IntAna2d_Conic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        C: gp_Circ2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: gp_Lin2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: gp_Parab2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: gp_Hypr2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        C: gp_Elips2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _IntAna2d.IntAna2d_Conic_swiginit(self, _IntAna2d.new_IntAna2d_Conic(*args))

    def Coefficients(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        A: float
        B: float
        C: float
        D: float
        E: float
        F: float

        Description
        -----------
        Returns the coefficients of the polynomial equation which defines the conic: a.x**2 + b.y**2 + 2.c.x*y + 2.d.x + 2.e.y + f = 0.

        """
        return _IntAna2d.IntAna2d_Conic_Coefficients(self, *args)

    def Grad(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        gp_XY

        Description
        -----------
        Returns the value of the gradient of f at the point x,y.

        """
        return _IntAna2d.IntAna2d_Conic_Grad(self, *args)

    def NewCoefficients(self, *args):
        r"""

        Parameters
        ----------
        Axis: gp_Ax2d

        Return
        -------
        A: float
        B: float
        C: float
        D: float
        E: float
        F: float

        Description
        -----------
        Returns the coefficients of the polynomial equation ( written in the natural coordinates system ) a x x + b y y + 2 c x y + 2 d x + 2 e y + f in the local coordinates system defined by axis.

        """
        return _IntAna2d.IntAna2d_Conic_NewCoefficients(self, *args)

    def ValAndGrad(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float
        Grd: gp_XY

        Return
        -------
        Val: float

        Description
        -----------
        Returns the value of the function and its gradient at the point x,y.

        """
        return _IntAna2d.IntAna2d_Conic_ValAndGrad(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        float

        Description
        -----------
        Value of the function f at the point x,y.

        """
        return _IntAna2d.IntAna2d_Conic_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_Conic

# Register IntAna2d_Conic in _IntAna2d:
_IntAna2d.IntAna2d_Conic_swigregister(IntAna2d_Conic)
class IntAna2d_IntPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float
        U1: float
        U2: float

        Return
        -------
        None

        Description
        -----------
        Create an intersection point between 2 parametric 2d lines. x,y are the coordinate of the point. u1 is the parameter on the first element, u2 the parameter on the second one.

        Parameters
        ----------
        X: float
        Y: float
        U1: float

        Return
        -------
        None

        Description
        -----------
        Create an intersection point between a parametric 2d line, and a line given by an implicit equation (implicitcurve). x,y are the coordinate of the point. u1 is the parameter on the parametric element. empty constructor. it's necessary to use one of the setvalue method after this one.
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _IntAna2d.IntAna2d_IntPoint_swiginit(self, _IntAna2d.new_IntAna2d_IntPoint(*args))

    def ParamOnFirst(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the parameter on the first element.

        """
        return _IntAna2d.IntAna2d_IntPoint_ParamOnFirst(self, *args)

    def ParamOnSecond(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the parameter on the second element. if the second element is an implicit curve, an exception is raised.

        """
        return _IntAna2d.IntAna2d_IntPoint_ParamOnSecond(self, *args)

    def SecondIsImplicit(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the second curve is implicit.

        """
        return _IntAna2d.IntAna2d_IntPoint_SecondIsImplicit(self, *args)

    def SetValue(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float
        U1: float
        U2: float

        Return
        -------
        None

        Description
        -----------
        Set the values for a 'non-implicit' point.

        Parameters
        ----------
        X: float
        Y: float
        U1: float

        Return
        -------
        None

        Description
        -----------
        Set the values for an 'implicit' point.

        """
        return _IntAna2d.IntAna2d_IntPoint_SetValue(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Returns the geometric point.

        """
        return _IntAna2d.IntAna2d_IntPoint_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntAna2d.delete_IntAna2d_IntPoint

# Register IntAna2d_IntPoint in _IntAna2d:
_IntAna2d.IntAna2d_IntPoint_swigregister(IntAna2d_IntPoint)



