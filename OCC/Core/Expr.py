# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Expr module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_expr.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Expr')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Expr')
    _Expr = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Expr', [dirname(__file__)])
        except ImportError:
            import _Expr
            return _Expr
        try:
            _mod = imp.load_module('_Expr', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Expr = swig_import_helper()
    del swig_import_helper
else:
    import _Expr
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Expr.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Expr.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Expr.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Expr.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Expr.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Expr.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Expr.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Expr.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Expr.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Expr.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Expr.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Expr.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Expr.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Expr.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Expr.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Expr.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Expr.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Expr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Expr.process_exception(error, method_name, class_name)
process_exception = _Expr.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_Expr_GeneralExpression_Create() -> "opencascade::handle< Expr_GeneralExpression >":
    return _Expr.Handle_Expr_GeneralExpression_Create()
Handle_Expr_GeneralExpression_Create = _Expr.Handle_Expr_GeneralExpression_Create

def Handle_Expr_GeneralExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GeneralExpression >":
    return _Expr.Handle_Expr_GeneralExpression_DownCast(t)
Handle_Expr_GeneralExpression_DownCast = _Expr.Handle_Expr_GeneralExpression_DownCast

def Handle_Expr_GeneralExpression_IsNull(t: 'opencascade::handle< Expr_GeneralExpression > const &') -> "bool":
    return _Expr.Handle_Expr_GeneralExpression_IsNull(t)
Handle_Expr_GeneralExpression_IsNull = _Expr.Handle_Expr_GeneralExpression_IsNull

def Handle_Expr_GeneralFunction_Create() -> "opencascade::handle< Expr_GeneralFunction >":
    return _Expr.Handle_Expr_GeneralFunction_Create()
Handle_Expr_GeneralFunction_Create = _Expr.Handle_Expr_GeneralFunction_Create

def Handle_Expr_GeneralFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GeneralFunction >":
    return _Expr.Handle_Expr_GeneralFunction_DownCast(t)
Handle_Expr_GeneralFunction_DownCast = _Expr.Handle_Expr_GeneralFunction_DownCast

def Handle_Expr_GeneralFunction_IsNull(t: 'opencascade::handle< Expr_GeneralFunction > const &') -> "bool":
    return _Expr.Handle_Expr_GeneralFunction_IsNull(t)
Handle_Expr_GeneralFunction_IsNull = _Expr.Handle_Expr_GeneralFunction_IsNull

def Handle_Expr_GeneralRelation_Create() -> "opencascade::handle< Expr_GeneralRelation >":
    return _Expr.Handle_Expr_GeneralRelation_Create()
Handle_Expr_GeneralRelation_Create = _Expr.Handle_Expr_GeneralRelation_Create

def Handle_Expr_GeneralRelation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GeneralRelation >":
    return _Expr.Handle_Expr_GeneralRelation_DownCast(t)
Handle_Expr_GeneralRelation_DownCast = _Expr.Handle_Expr_GeneralRelation_DownCast

def Handle_Expr_GeneralRelation_IsNull(t: 'opencascade::handle< Expr_GeneralRelation > const &') -> "bool":
    return _Expr.Handle_Expr_GeneralRelation_IsNull(t)
Handle_Expr_GeneralRelation_IsNull = _Expr.Handle_Expr_GeneralRelation_IsNull

def Handle_Expr_BinaryExpression_Create() -> "opencascade::handle< Expr_BinaryExpression >":
    return _Expr.Handle_Expr_BinaryExpression_Create()
Handle_Expr_BinaryExpression_Create = _Expr.Handle_Expr_BinaryExpression_Create

def Handle_Expr_BinaryExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_BinaryExpression >":
    return _Expr.Handle_Expr_BinaryExpression_DownCast(t)
Handle_Expr_BinaryExpression_DownCast = _Expr.Handle_Expr_BinaryExpression_DownCast

def Handle_Expr_BinaryExpression_IsNull(t: 'opencascade::handle< Expr_BinaryExpression > const &') -> "bool":
    return _Expr.Handle_Expr_BinaryExpression_IsNull(t)
Handle_Expr_BinaryExpression_IsNull = _Expr.Handle_Expr_BinaryExpression_IsNull

def Handle_Expr_FunctionDerivative_Create() -> "opencascade::handle< Expr_FunctionDerivative >":
    return _Expr.Handle_Expr_FunctionDerivative_Create()
Handle_Expr_FunctionDerivative_Create = _Expr.Handle_Expr_FunctionDerivative_Create

def Handle_Expr_FunctionDerivative_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_FunctionDerivative >":
    return _Expr.Handle_Expr_FunctionDerivative_DownCast(t)
Handle_Expr_FunctionDerivative_DownCast = _Expr.Handle_Expr_FunctionDerivative_DownCast

def Handle_Expr_FunctionDerivative_IsNull(t: 'opencascade::handle< Expr_FunctionDerivative > const &') -> "bool":
    return _Expr.Handle_Expr_FunctionDerivative_IsNull(t)
Handle_Expr_FunctionDerivative_IsNull = _Expr.Handle_Expr_FunctionDerivative_IsNull

def Handle_Expr_NamedExpression_Create() -> "opencascade::handle< Expr_NamedExpression >":
    return _Expr.Handle_Expr_NamedExpression_Create()
Handle_Expr_NamedExpression_Create = _Expr.Handle_Expr_NamedExpression_Create

def Handle_Expr_NamedExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NamedExpression >":
    return _Expr.Handle_Expr_NamedExpression_DownCast(t)
Handle_Expr_NamedExpression_DownCast = _Expr.Handle_Expr_NamedExpression_DownCast

def Handle_Expr_NamedExpression_IsNull(t: 'opencascade::handle< Expr_NamedExpression > const &') -> "bool":
    return _Expr.Handle_Expr_NamedExpression_IsNull(t)
Handle_Expr_NamedExpression_IsNull = _Expr.Handle_Expr_NamedExpression_IsNull

def Handle_Expr_NamedFunction_Create() -> "opencascade::handle< Expr_NamedFunction >":
    return _Expr.Handle_Expr_NamedFunction_Create()
Handle_Expr_NamedFunction_Create = _Expr.Handle_Expr_NamedFunction_Create

def Handle_Expr_NamedFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NamedFunction >":
    return _Expr.Handle_Expr_NamedFunction_DownCast(t)
Handle_Expr_NamedFunction_DownCast = _Expr.Handle_Expr_NamedFunction_DownCast

def Handle_Expr_NamedFunction_IsNull(t: 'opencascade::handle< Expr_NamedFunction > const &') -> "bool":
    return _Expr.Handle_Expr_NamedFunction_IsNull(t)
Handle_Expr_NamedFunction_IsNull = _Expr.Handle_Expr_NamedFunction_IsNull

def Handle_Expr_NumericValue_Create() -> "opencascade::handle< Expr_NumericValue >":
    return _Expr.Handle_Expr_NumericValue_Create()
Handle_Expr_NumericValue_Create = _Expr.Handle_Expr_NumericValue_Create

def Handle_Expr_NumericValue_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NumericValue >":
    return _Expr.Handle_Expr_NumericValue_DownCast(t)
Handle_Expr_NumericValue_DownCast = _Expr.Handle_Expr_NumericValue_DownCast

def Handle_Expr_NumericValue_IsNull(t: 'opencascade::handle< Expr_NumericValue > const &') -> "bool":
    return _Expr.Handle_Expr_NumericValue_IsNull(t)
Handle_Expr_NumericValue_IsNull = _Expr.Handle_Expr_NumericValue_IsNull

def Handle_Expr_PolyExpression_Create() -> "opencascade::handle< Expr_PolyExpression >":
    return _Expr.Handle_Expr_PolyExpression_Create()
Handle_Expr_PolyExpression_Create = _Expr.Handle_Expr_PolyExpression_Create

def Handle_Expr_PolyExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_PolyExpression >":
    return _Expr.Handle_Expr_PolyExpression_DownCast(t)
Handle_Expr_PolyExpression_DownCast = _Expr.Handle_Expr_PolyExpression_DownCast

def Handle_Expr_PolyExpression_IsNull(t: 'opencascade::handle< Expr_PolyExpression > const &') -> "bool":
    return _Expr.Handle_Expr_PolyExpression_IsNull(t)
Handle_Expr_PolyExpression_IsNull = _Expr.Handle_Expr_PolyExpression_IsNull

def Handle_Expr_SingleRelation_Create() -> "opencascade::handle< Expr_SingleRelation >":
    return _Expr.Handle_Expr_SingleRelation_Create()
Handle_Expr_SingleRelation_Create = _Expr.Handle_Expr_SingleRelation_Create

def Handle_Expr_SingleRelation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_SingleRelation >":
    return _Expr.Handle_Expr_SingleRelation_DownCast(t)
Handle_Expr_SingleRelation_DownCast = _Expr.Handle_Expr_SingleRelation_DownCast

def Handle_Expr_SingleRelation_IsNull(t: 'opencascade::handle< Expr_SingleRelation > const &') -> "bool":
    return _Expr.Handle_Expr_SingleRelation_IsNull(t)
Handle_Expr_SingleRelation_IsNull = _Expr.Handle_Expr_SingleRelation_IsNull

def Handle_Expr_SystemRelation_Create() -> "opencascade::handle< Expr_SystemRelation >":
    return _Expr.Handle_Expr_SystemRelation_Create()
Handle_Expr_SystemRelation_Create = _Expr.Handle_Expr_SystemRelation_Create

def Handle_Expr_SystemRelation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_SystemRelation >":
    return _Expr.Handle_Expr_SystemRelation_DownCast(t)
Handle_Expr_SystemRelation_DownCast = _Expr.Handle_Expr_SystemRelation_DownCast

def Handle_Expr_SystemRelation_IsNull(t: 'opencascade::handle< Expr_SystemRelation > const &') -> "bool":
    return _Expr.Handle_Expr_SystemRelation_IsNull(t)
Handle_Expr_SystemRelation_IsNull = _Expr.Handle_Expr_SystemRelation_IsNull

def Handle_Expr_UnaryExpression_Create() -> "opencascade::handle< Expr_UnaryExpression >":
    return _Expr.Handle_Expr_UnaryExpression_Create()
Handle_Expr_UnaryExpression_Create = _Expr.Handle_Expr_UnaryExpression_Create

def Handle_Expr_UnaryExpression_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_UnaryExpression >":
    return _Expr.Handle_Expr_UnaryExpression_DownCast(t)
Handle_Expr_UnaryExpression_DownCast = _Expr.Handle_Expr_UnaryExpression_DownCast

def Handle_Expr_UnaryExpression_IsNull(t: 'opencascade::handle< Expr_UnaryExpression > const &') -> "bool":
    return _Expr.Handle_Expr_UnaryExpression_IsNull(t)
Handle_Expr_UnaryExpression_IsNull = _Expr.Handle_Expr_UnaryExpression_IsNull

def Handle_Expr_Absolute_Create() -> "opencascade::handle< Expr_Absolute >":
    return _Expr.Handle_Expr_Absolute_Create()
Handle_Expr_Absolute_Create = _Expr.Handle_Expr_Absolute_Create

def Handle_Expr_Absolute_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Absolute >":
    return _Expr.Handle_Expr_Absolute_DownCast(t)
Handle_Expr_Absolute_DownCast = _Expr.Handle_Expr_Absolute_DownCast

def Handle_Expr_Absolute_IsNull(t: 'opencascade::handle< Expr_Absolute > const &') -> "bool":
    return _Expr.Handle_Expr_Absolute_IsNull(t)
Handle_Expr_Absolute_IsNull = _Expr.Handle_Expr_Absolute_IsNull

def Handle_Expr_ArcCosine_Create() -> "opencascade::handle< Expr_ArcCosine >":
    return _Expr.Handle_Expr_ArcCosine_Create()
Handle_Expr_ArcCosine_Create = _Expr.Handle_Expr_ArcCosine_Create

def Handle_Expr_ArcCosine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArcCosine >":
    return _Expr.Handle_Expr_ArcCosine_DownCast(t)
Handle_Expr_ArcCosine_DownCast = _Expr.Handle_Expr_ArcCosine_DownCast

def Handle_Expr_ArcCosine_IsNull(t: 'opencascade::handle< Expr_ArcCosine > const &') -> "bool":
    return _Expr.Handle_Expr_ArcCosine_IsNull(t)
Handle_Expr_ArcCosine_IsNull = _Expr.Handle_Expr_ArcCosine_IsNull

def Handle_Expr_ArcSine_Create() -> "opencascade::handle< Expr_ArcSine >":
    return _Expr.Handle_Expr_ArcSine_Create()
Handle_Expr_ArcSine_Create = _Expr.Handle_Expr_ArcSine_Create

def Handle_Expr_ArcSine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArcSine >":
    return _Expr.Handle_Expr_ArcSine_DownCast(t)
Handle_Expr_ArcSine_DownCast = _Expr.Handle_Expr_ArcSine_DownCast

def Handle_Expr_ArcSine_IsNull(t: 'opencascade::handle< Expr_ArcSine > const &') -> "bool":
    return _Expr.Handle_Expr_ArcSine_IsNull(t)
Handle_Expr_ArcSine_IsNull = _Expr.Handle_Expr_ArcSine_IsNull

def Handle_Expr_ArcTangent_Create() -> "opencascade::handle< Expr_ArcTangent >":
    return _Expr.Handle_Expr_ArcTangent_Create()
Handle_Expr_ArcTangent_Create = _Expr.Handle_Expr_ArcTangent_Create

def Handle_Expr_ArcTangent_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArcTangent >":
    return _Expr.Handle_Expr_ArcTangent_DownCast(t)
Handle_Expr_ArcTangent_DownCast = _Expr.Handle_Expr_ArcTangent_DownCast

def Handle_Expr_ArcTangent_IsNull(t: 'opencascade::handle< Expr_ArcTangent > const &') -> "bool":
    return _Expr.Handle_Expr_ArcTangent_IsNull(t)
Handle_Expr_ArcTangent_IsNull = _Expr.Handle_Expr_ArcTangent_IsNull

def Handle_Expr_ArgCosh_Create() -> "opencascade::handle< Expr_ArgCosh >":
    return _Expr.Handle_Expr_ArgCosh_Create()
Handle_Expr_ArgCosh_Create = _Expr.Handle_Expr_ArgCosh_Create

def Handle_Expr_ArgCosh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArgCosh >":
    return _Expr.Handle_Expr_ArgCosh_DownCast(t)
Handle_Expr_ArgCosh_DownCast = _Expr.Handle_Expr_ArgCosh_DownCast

def Handle_Expr_ArgCosh_IsNull(t: 'opencascade::handle< Expr_ArgCosh > const &') -> "bool":
    return _Expr.Handle_Expr_ArgCosh_IsNull(t)
Handle_Expr_ArgCosh_IsNull = _Expr.Handle_Expr_ArgCosh_IsNull

def Handle_Expr_ArgSinh_Create() -> "opencascade::handle< Expr_ArgSinh >":
    return _Expr.Handle_Expr_ArgSinh_Create()
Handle_Expr_ArgSinh_Create = _Expr.Handle_Expr_ArgSinh_Create

def Handle_Expr_ArgSinh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArgSinh >":
    return _Expr.Handle_Expr_ArgSinh_DownCast(t)
Handle_Expr_ArgSinh_DownCast = _Expr.Handle_Expr_ArgSinh_DownCast

def Handle_Expr_ArgSinh_IsNull(t: 'opencascade::handle< Expr_ArgSinh > const &') -> "bool":
    return _Expr.Handle_Expr_ArgSinh_IsNull(t)
Handle_Expr_ArgSinh_IsNull = _Expr.Handle_Expr_ArgSinh_IsNull

def Handle_Expr_ArgTanh_Create() -> "opencascade::handle< Expr_ArgTanh >":
    return _Expr.Handle_Expr_ArgTanh_Create()
Handle_Expr_ArgTanh_Create = _Expr.Handle_Expr_ArgTanh_Create

def Handle_Expr_ArgTanh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_ArgTanh >":
    return _Expr.Handle_Expr_ArgTanh_DownCast(t)
Handle_Expr_ArgTanh_DownCast = _Expr.Handle_Expr_ArgTanh_DownCast

def Handle_Expr_ArgTanh_IsNull(t: 'opencascade::handle< Expr_ArgTanh > const &') -> "bool":
    return _Expr.Handle_Expr_ArgTanh_IsNull(t)
Handle_Expr_ArgTanh_IsNull = _Expr.Handle_Expr_ArgTanh_IsNull

def Handle_Expr_BinaryFunction_Create() -> "opencascade::handle< Expr_BinaryFunction >":
    return _Expr.Handle_Expr_BinaryFunction_Create()
Handle_Expr_BinaryFunction_Create = _Expr.Handle_Expr_BinaryFunction_Create

def Handle_Expr_BinaryFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_BinaryFunction >":
    return _Expr.Handle_Expr_BinaryFunction_DownCast(t)
Handle_Expr_BinaryFunction_DownCast = _Expr.Handle_Expr_BinaryFunction_DownCast

def Handle_Expr_BinaryFunction_IsNull(t: 'opencascade::handle< Expr_BinaryFunction > const &') -> "bool":
    return _Expr.Handle_Expr_BinaryFunction_IsNull(t)
Handle_Expr_BinaryFunction_IsNull = _Expr.Handle_Expr_BinaryFunction_IsNull

def Handle_Expr_Cosh_Create() -> "opencascade::handle< Expr_Cosh >":
    return _Expr.Handle_Expr_Cosh_Create()
Handle_Expr_Cosh_Create = _Expr.Handle_Expr_Cosh_Create

def Handle_Expr_Cosh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Cosh >":
    return _Expr.Handle_Expr_Cosh_DownCast(t)
Handle_Expr_Cosh_DownCast = _Expr.Handle_Expr_Cosh_DownCast

def Handle_Expr_Cosh_IsNull(t: 'opencascade::handle< Expr_Cosh > const &') -> "bool":
    return _Expr.Handle_Expr_Cosh_IsNull(t)
Handle_Expr_Cosh_IsNull = _Expr.Handle_Expr_Cosh_IsNull

def Handle_Expr_Cosine_Create() -> "opencascade::handle< Expr_Cosine >":
    return _Expr.Handle_Expr_Cosine_Create()
Handle_Expr_Cosine_Create = _Expr.Handle_Expr_Cosine_Create

def Handle_Expr_Cosine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Cosine >":
    return _Expr.Handle_Expr_Cosine_DownCast(t)
Handle_Expr_Cosine_DownCast = _Expr.Handle_Expr_Cosine_DownCast

def Handle_Expr_Cosine_IsNull(t: 'opencascade::handle< Expr_Cosine > const &') -> "bool":
    return _Expr.Handle_Expr_Cosine_IsNull(t)
Handle_Expr_Cosine_IsNull = _Expr.Handle_Expr_Cosine_IsNull

def Handle_Expr_Difference_Create() -> "opencascade::handle< Expr_Difference >":
    return _Expr.Handle_Expr_Difference_Create()
Handle_Expr_Difference_Create = _Expr.Handle_Expr_Difference_Create

def Handle_Expr_Difference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Difference >":
    return _Expr.Handle_Expr_Difference_DownCast(t)
Handle_Expr_Difference_DownCast = _Expr.Handle_Expr_Difference_DownCast

def Handle_Expr_Difference_IsNull(t: 'opencascade::handle< Expr_Difference > const &') -> "bool":
    return _Expr.Handle_Expr_Difference_IsNull(t)
Handle_Expr_Difference_IsNull = _Expr.Handle_Expr_Difference_IsNull

def Handle_Expr_Different_Create() -> "opencascade::handle< Expr_Different >":
    return _Expr.Handle_Expr_Different_Create()
Handle_Expr_Different_Create = _Expr.Handle_Expr_Different_Create

def Handle_Expr_Different_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Different >":
    return _Expr.Handle_Expr_Different_DownCast(t)
Handle_Expr_Different_DownCast = _Expr.Handle_Expr_Different_DownCast

def Handle_Expr_Different_IsNull(t: 'opencascade::handle< Expr_Different > const &') -> "bool":
    return _Expr.Handle_Expr_Different_IsNull(t)
Handle_Expr_Different_IsNull = _Expr.Handle_Expr_Different_IsNull

def Handle_Expr_Division_Create() -> "opencascade::handle< Expr_Division >":
    return _Expr.Handle_Expr_Division_Create()
Handle_Expr_Division_Create = _Expr.Handle_Expr_Division_Create

def Handle_Expr_Division_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Division >":
    return _Expr.Handle_Expr_Division_DownCast(t)
Handle_Expr_Division_DownCast = _Expr.Handle_Expr_Division_DownCast

def Handle_Expr_Division_IsNull(t: 'opencascade::handle< Expr_Division > const &') -> "bool":
    return _Expr.Handle_Expr_Division_IsNull(t)
Handle_Expr_Division_IsNull = _Expr.Handle_Expr_Division_IsNull

def Handle_Expr_Equal_Create() -> "opencascade::handle< Expr_Equal >":
    return _Expr.Handle_Expr_Equal_Create()
Handle_Expr_Equal_Create = _Expr.Handle_Expr_Equal_Create

def Handle_Expr_Equal_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Equal >":
    return _Expr.Handle_Expr_Equal_DownCast(t)
Handle_Expr_Equal_DownCast = _Expr.Handle_Expr_Equal_DownCast

def Handle_Expr_Equal_IsNull(t: 'opencascade::handle< Expr_Equal > const &') -> "bool":
    return _Expr.Handle_Expr_Equal_IsNull(t)
Handle_Expr_Equal_IsNull = _Expr.Handle_Expr_Equal_IsNull

def Handle_Expr_Exponential_Create() -> "opencascade::handle< Expr_Exponential >":
    return _Expr.Handle_Expr_Exponential_Create()
Handle_Expr_Exponential_Create = _Expr.Handle_Expr_Exponential_Create

def Handle_Expr_Exponential_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Exponential >":
    return _Expr.Handle_Expr_Exponential_DownCast(t)
Handle_Expr_Exponential_DownCast = _Expr.Handle_Expr_Exponential_DownCast

def Handle_Expr_Exponential_IsNull(t: 'opencascade::handle< Expr_Exponential > const &') -> "bool":
    return _Expr.Handle_Expr_Exponential_IsNull(t)
Handle_Expr_Exponential_IsNull = _Expr.Handle_Expr_Exponential_IsNull

def Handle_Expr_Exponentiate_Create() -> "opencascade::handle< Expr_Exponentiate >":
    return _Expr.Handle_Expr_Exponentiate_Create()
Handle_Expr_Exponentiate_Create = _Expr.Handle_Expr_Exponentiate_Create

def Handle_Expr_Exponentiate_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Exponentiate >":
    return _Expr.Handle_Expr_Exponentiate_DownCast(t)
Handle_Expr_Exponentiate_DownCast = _Expr.Handle_Expr_Exponentiate_DownCast

def Handle_Expr_Exponentiate_IsNull(t: 'opencascade::handle< Expr_Exponentiate > const &') -> "bool":
    return _Expr.Handle_Expr_Exponentiate_IsNull(t)
Handle_Expr_Exponentiate_IsNull = _Expr.Handle_Expr_Exponentiate_IsNull

def Handle_Expr_GreaterThan_Create() -> "opencascade::handle< Expr_GreaterThan >":
    return _Expr.Handle_Expr_GreaterThan_Create()
Handle_Expr_GreaterThan_Create = _Expr.Handle_Expr_GreaterThan_Create

def Handle_Expr_GreaterThan_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GreaterThan >":
    return _Expr.Handle_Expr_GreaterThan_DownCast(t)
Handle_Expr_GreaterThan_DownCast = _Expr.Handle_Expr_GreaterThan_DownCast

def Handle_Expr_GreaterThan_IsNull(t: 'opencascade::handle< Expr_GreaterThan > const &') -> "bool":
    return _Expr.Handle_Expr_GreaterThan_IsNull(t)
Handle_Expr_GreaterThan_IsNull = _Expr.Handle_Expr_GreaterThan_IsNull

def Handle_Expr_GreaterThanOrEqual_Create() -> "opencascade::handle< Expr_GreaterThanOrEqual >":
    return _Expr.Handle_Expr_GreaterThanOrEqual_Create()
Handle_Expr_GreaterThanOrEqual_Create = _Expr.Handle_Expr_GreaterThanOrEqual_Create

def Handle_Expr_GreaterThanOrEqual_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_GreaterThanOrEqual >":
    return _Expr.Handle_Expr_GreaterThanOrEqual_DownCast(t)
Handle_Expr_GreaterThanOrEqual_DownCast = _Expr.Handle_Expr_GreaterThanOrEqual_DownCast

def Handle_Expr_GreaterThanOrEqual_IsNull(t: 'opencascade::handle< Expr_GreaterThanOrEqual > const &') -> "bool":
    return _Expr.Handle_Expr_GreaterThanOrEqual_IsNull(t)
Handle_Expr_GreaterThanOrEqual_IsNull = _Expr.Handle_Expr_GreaterThanOrEqual_IsNull

def Handle_Expr_LessThan_Create() -> "opencascade::handle< Expr_LessThan >":
    return _Expr.Handle_Expr_LessThan_Create()
Handle_Expr_LessThan_Create = _Expr.Handle_Expr_LessThan_Create

def Handle_Expr_LessThan_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_LessThan >":
    return _Expr.Handle_Expr_LessThan_DownCast(t)
Handle_Expr_LessThan_DownCast = _Expr.Handle_Expr_LessThan_DownCast

def Handle_Expr_LessThan_IsNull(t: 'opencascade::handle< Expr_LessThan > const &') -> "bool":
    return _Expr.Handle_Expr_LessThan_IsNull(t)
Handle_Expr_LessThan_IsNull = _Expr.Handle_Expr_LessThan_IsNull

def Handle_Expr_LessThanOrEqual_Create() -> "opencascade::handle< Expr_LessThanOrEqual >":
    return _Expr.Handle_Expr_LessThanOrEqual_Create()
Handle_Expr_LessThanOrEqual_Create = _Expr.Handle_Expr_LessThanOrEqual_Create

def Handle_Expr_LessThanOrEqual_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_LessThanOrEqual >":
    return _Expr.Handle_Expr_LessThanOrEqual_DownCast(t)
Handle_Expr_LessThanOrEqual_DownCast = _Expr.Handle_Expr_LessThanOrEqual_DownCast

def Handle_Expr_LessThanOrEqual_IsNull(t: 'opencascade::handle< Expr_LessThanOrEqual > const &') -> "bool":
    return _Expr.Handle_Expr_LessThanOrEqual_IsNull(t)
Handle_Expr_LessThanOrEqual_IsNull = _Expr.Handle_Expr_LessThanOrEqual_IsNull

def Handle_Expr_LogOf10_Create() -> "opencascade::handle< Expr_LogOf10 >":
    return _Expr.Handle_Expr_LogOf10_Create()
Handle_Expr_LogOf10_Create = _Expr.Handle_Expr_LogOf10_Create

def Handle_Expr_LogOf10_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_LogOf10 >":
    return _Expr.Handle_Expr_LogOf10_DownCast(t)
Handle_Expr_LogOf10_DownCast = _Expr.Handle_Expr_LogOf10_DownCast

def Handle_Expr_LogOf10_IsNull(t: 'opencascade::handle< Expr_LogOf10 > const &') -> "bool":
    return _Expr.Handle_Expr_LogOf10_IsNull(t)
Handle_Expr_LogOf10_IsNull = _Expr.Handle_Expr_LogOf10_IsNull

def Handle_Expr_LogOfe_Create() -> "opencascade::handle< Expr_LogOfe >":
    return _Expr.Handle_Expr_LogOfe_Create()
Handle_Expr_LogOfe_Create = _Expr.Handle_Expr_LogOfe_Create

def Handle_Expr_LogOfe_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_LogOfe >":
    return _Expr.Handle_Expr_LogOfe_DownCast(t)
Handle_Expr_LogOfe_DownCast = _Expr.Handle_Expr_LogOfe_DownCast

def Handle_Expr_LogOfe_IsNull(t: 'opencascade::handle< Expr_LogOfe > const &') -> "bool":
    return _Expr.Handle_Expr_LogOfe_IsNull(t)
Handle_Expr_LogOfe_IsNull = _Expr.Handle_Expr_LogOfe_IsNull

def Handle_Expr_NamedConstant_Create() -> "opencascade::handle< Expr_NamedConstant >":
    return _Expr.Handle_Expr_NamedConstant_Create()
Handle_Expr_NamedConstant_Create = _Expr.Handle_Expr_NamedConstant_Create

def Handle_Expr_NamedConstant_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NamedConstant >":
    return _Expr.Handle_Expr_NamedConstant_DownCast(t)
Handle_Expr_NamedConstant_DownCast = _Expr.Handle_Expr_NamedConstant_DownCast

def Handle_Expr_NamedConstant_IsNull(t: 'opencascade::handle< Expr_NamedConstant > const &') -> "bool":
    return _Expr.Handle_Expr_NamedConstant_IsNull(t)
Handle_Expr_NamedConstant_IsNull = _Expr.Handle_Expr_NamedConstant_IsNull

def Handle_Expr_NamedUnknown_Create() -> "opencascade::handle< Expr_NamedUnknown >":
    return _Expr.Handle_Expr_NamedUnknown_Create()
Handle_Expr_NamedUnknown_Create = _Expr.Handle_Expr_NamedUnknown_Create

def Handle_Expr_NamedUnknown_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_NamedUnknown >":
    return _Expr.Handle_Expr_NamedUnknown_DownCast(t)
Handle_Expr_NamedUnknown_DownCast = _Expr.Handle_Expr_NamedUnknown_DownCast

def Handle_Expr_NamedUnknown_IsNull(t: 'opencascade::handle< Expr_NamedUnknown > const &') -> "bool":
    return _Expr.Handle_Expr_NamedUnknown_IsNull(t)
Handle_Expr_NamedUnknown_IsNull = _Expr.Handle_Expr_NamedUnknown_IsNull

def Handle_Expr_PolyFunction_Create() -> "opencascade::handle< Expr_PolyFunction >":
    return _Expr.Handle_Expr_PolyFunction_Create()
Handle_Expr_PolyFunction_Create = _Expr.Handle_Expr_PolyFunction_Create

def Handle_Expr_PolyFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_PolyFunction >":
    return _Expr.Handle_Expr_PolyFunction_DownCast(t)
Handle_Expr_PolyFunction_DownCast = _Expr.Handle_Expr_PolyFunction_DownCast

def Handle_Expr_PolyFunction_IsNull(t: 'opencascade::handle< Expr_PolyFunction > const &') -> "bool":
    return _Expr.Handle_Expr_PolyFunction_IsNull(t)
Handle_Expr_PolyFunction_IsNull = _Expr.Handle_Expr_PolyFunction_IsNull

def Handle_Expr_Product_Create() -> "opencascade::handle< Expr_Product >":
    return _Expr.Handle_Expr_Product_Create()
Handle_Expr_Product_Create = _Expr.Handle_Expr_Product_Create

def Handle_Expr_Product_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Product >":
    return _Expr.Handle_Expr_Product_DownCast(t)
Handle_Expr_Product_DownCast = _Expr.Handle_Expr_Product_DownCast

def Handle_Expr_Product_IsNull(t: 'opencascade::handle< Expr_Product > const &') -> "bool":
    return _Expr.Handle_Expr_Product_IsNull(t)
Handle_Expr_Product_IsNull = _Expr.Handle_Expr_Product_IsNull

def Handle_Expr_Sine_Create() -> "opencascade::handle< Expr_Sine >":
    return _Expr.Handle_Expr_Sine_Create()
Handle_Expr_Sine_Create = _Expr.Handle_Expr_Sine_Create

def Handle_Expr_Sine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Sine >":
    return _Expr.Handle_Expr_Sine_DownCast(t)
Handle_Expr_Sine_DownCast = _Expr.Handle_Expr_Sine_DownCast

def Handle_Expr_Sine_IsNull(t: 'opencascade::handle< Expr_Sine > const &') -> "bool":
    return _Expr.Handle_Expr_Sine_IsNull(t)
Handle_Expr_Sine_IsNull = _Expr.Handle_Expr_Sine_IsNull

def Handle_Expr_Sinh_Create() -> "opencascade::handle< Expr_Sinh >":
    return _Expr.Handle_Expr_Sinh_Create()
Handle_Expr_Sinh_Create = _Expr.Handle_Expr_Sinh_Create

def Handle_Expr_Sinh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Sinh >":
    return _Expr.Handle_Expr_Sinh_DownCast(t)
Handle_Expr_Sinh_DownCast = _Expr.Handle_Expr_Sinh_DownCast

def Handle_Expr_Sinh_IsNull(t: 'opencascade::handle< Expr_Sinh > const &') -> "bool":
    return _Expr.Handle_Expr_Sinh_IsNull(t)
Handle_Expr_Sinh_IsNull = _Expr.Handle_Expr_Sinh_IsNull

def Handle_Expr_Square_Create() -> "opencascade::handle< Expr_Square >":
    return _Expr.Handle_Expr_Square_Create()
Handle_Expr_Square_Create = _Expr.Handle_Expr_Square_Create

def Handle_Expr_Square_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Square >":
    return _Expr.Handle_Expr_Square_DownCast(t)
Handle_Expr_Square_DownCast = _Expr.Handle_Expr_Square_DownCast

def Handle_Expr_Square_IsNull(t: 'opencascade::handle< Expr_Square > const &') -> "bool":
    return _Expr.Handle_Expr_Square_IsNull(t)
Handle_Expr_Square_IsNull = _Expr.Handle_Expr_Square_IsNull

def Handle_Expr_SquareRoot_Create() -> "opencascade::handle< Expr_SquareRoot >":
    return _Expr.Handle_Expr_SquareRoot_Create()
Handle_Expr_SquareRoot_Create = _Expr.Handle_Expr_SquareRoot_Create

def Handle_Expr_SquareRoot_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_SquareRoot >":
    return _Expr.Handle_Expr_SquareRoot_DownCast(t)
Handle_Expr_SquareRoot_DownCast = _Expr.Handle_Expr_SquareRoot_DownCast

def Handle_Expr_SquareRoot_IsNull(t: 'opencascade::handle< Expr_SquareRoot > const &') -> "bool":
    return _Expr.Handle_Expr_SquareRoot_IsNull(t)
Handle_Expr_SquareRoot_IsNull = _Expr.Handle_Expr_SquareRoot_IsNull

def Handle_Expr_Sum_Create() -> "opencascade::handle< Expr_Sum >":
    return _Expr.Handle_Expr_Sum_Create()
Handle_Expr_Sum_Create = _Expr.Handle_Expr_Sum_Create

def Handle_Expr_Sum_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Sum >":
    return _Expr.Handle_Expr_Sum_DownCast(t)
Handle_Expr_Sum_DownCast = _Expr.Handle_Expr_Sum_DownCast

def Handle_Expr_Sum_IsNull(t: 'opencascade::handle< Expr_Sum > const &') -> "bool":
    return _Expr.Handle_Expr_Sum_IsNull(t)
Handle_Expr_Sum_IsNull = _Expr.Handle_Expr_Sum_IsNull

def Handle_Expr_Tangent_Create() -> "opencascade::handle< Expr_Tangent >":
    return _Expr.Handle_Expr_Tangent_Create()
Handle_Expr_Tangent_Create = _Expr.Handle_Expr_Tangent_Create

def Handle_Expr_Tangent_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Tangent >":
    return _Expr.Handle_Expr_Tangent_DownCast(t)
Handle_Expr_Tangent_DownCast = _Expr.Handle_Expr_Tangent_DownCast

def Handle_Expr_Tangent_IsNull(t: 'opencascade::handle< Expr_Tangent > const &') -> "bool":
    return _Expr.Handle_Expr_Tangent_IsNull(t)
Handle_Expr_Tangent_IsNull = _Expr.Handle_Expr_Tangent_IsNull

def Handle_Expr_Tanh_Create() -> "opencascade::handle< Expr_Tanh >":
    return _Expr.Handle_Expr_Tanh_Create()
Handle_Expr_Tanh_Create = _Expr.Handle_Expr_Tanh_Create

def Handle_Expr_Tanh_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_Tanh >":
    return _Expr.Handle_Expr_Tanh_DownCast(t)
Handle_Expr_Tanh_DownCast = _Expr.Handle_Expr_Tanh_DownCast

def Handle_Expr_Tanh_IsNull(t: 'opencascade::handle< Expr_Tanh > const &') -> "bool":
    return _Expr.Handle_Expr_Tanh_IsNull(t)
Handle_Expr_Tanh_IsNull = _Expr.Handle_Expr_Tanh_IsNull

def Handle_Expr_UnaryFunction_Create() -> "opencascade::handle< Expr_UnaryFunction >":
    return _Expr.Handle_Expr_UnaryFunction_Create()
Handle_Expr_UnaryFunction_Create = _Expr.Handle_Expr_UnaryFunction_Create

def Handle_Expr_UnaryFunction_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_UnaryFunction >":
    return _Expr.Handle_Expr_UnaryFunction_DownCast(t)
Handle_Expr_UnaryFunction_DownCast = _Expr.Handle_Expr_UnaryFunction_DownCast

def Handle_Expr_UnaryFunction_IsNull(t: 'opencascade::handle< Expr_UnaryFunction > const &') -> "bool":
    return _Expr.Handle_Expr_UnaryFunction_IsNull(t)
Handle_Expr_UnaryFunction_IsNull = _Expr.Handle_Expr_UnaryFunction_IsNull

def Handle_Expr_UnaryMinus_Create() -> "opencascade::handle< Expr_UnaryMinus >":
    return _Expr.Handle_Expr_UnaryMinus_Create()
Handle_Expr_UnaryMinus_Create = _Expr.Handle_Expr_UnaryMinus_Create

def Handle_Expr_UnaryMinus_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Expr_UnaryMinus >":
    return _Expr.Handle_Expr_UnaryMinus_DownCast(t)
Handle_Expr_UnaryMinus_DownCast = _Expr.Handle_Expr_UnaryMinus_DownCast

def Handle_Expr_UnaryMinus_IsNull(t: 'opencascade::handle< Expr_UnaryMinus > const &') -> "bool":
    return _Expr.Handle_Expr_UnaryMinus_IsNull(t)
Handle_Expr_UnaryMinus_IsNull = _Expr.Handle_Expr_UnaryMinus_IsNull
class Expr_Array1OfGeneralExpression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Array1OfGeneralExpression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Array1OfGeneralExpression, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Expr_GeneralExpression > >::iterator":
        return _Expr.Expr_Array1OfGeneralExpression_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Expr_GeneralExpression > >::iterator":
        return _Expr.Expr_Array1OfGeneralExpression_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Expr_GeneralExpression > >::const_iterator":
        return _Expr.Expr_Array1OfGeneralExpression_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Expr_GeneralExpression > >::const_iterator":
        return _Expr.Expr_Array1OfGeneralExpression_cend(self)

    def __init__(self, *args):
        this = _Expr.new_Expr_Array1OfGeneralExpression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Expr_GeneralExpression > const &') -> "void":
        return _Expr.Expr_Array1OfGeneralExpression_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfGeneralExpression_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfGeneralExpression_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfGeneralExpression_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfGeneralExpression_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfGeneralExpression_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfGeneralExpression_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfGeneralExpression_IsAllocated(self)

    def Assign(self, theOther: 'Expr_Array1OfGeneralExpression') -> "NCollection_Array1< opencascade::handle< Expr_GeneralExpression > > &":
        return _Expr.Expr_Array1OfGeneralExpression_Assign(self, theOther)

    def Move(self, theOther: 'Expr_Array1OfGeneralExpression') -> "NCollection_Array1< opencascade::handle< Expr_GeneralExpression > > &":
        return _Expr.Expr_Array1OfGeneralExpression_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Expr_GeneralExpression > > &":
        return _Expr.Expr_Array1OfGeneralExpression_Set(self, *args)

    def First(self) -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _Expr.Expr_Array1OfGeneralExpression_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Expr_GeneralExpression > &":
        return _Expr.Expr_Array1OfGeneralExpression_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _Expr.Expr_Array1OfGeneralExpression_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Expr_GeneralExpression > &":
        return _Expr.Expr_Array1OfGeneralExpression_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _Expr.Expr_Array1OfGeneralExpression_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_GeneralExpression > &":
        return _Expr.Expr_Array1OfGeneralExpression_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Expr_GeneralExpression > &":
        return _Expr.Expr_Array1OfGeneralExpression___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Expr_GeneralExpression > const &') -> "void":
        return _Expr.Expr_Array1OfGeneralExpression_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _Expr.Expr_Array1OfGeneralExpression_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _Expr.delete_Expr_Array1OfGeneralExpression
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Expr_Array1OfGeneralExpression_swigregister = _Expr.Expr_Array1OfGeneralExpression_swigregister
Expr_Array1OfGeneralExpression_swigregister(Expr_Array1OfGeneralExpression)

class Expr_Array1OfNamedUnknown(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Array1OfNamedUnknown, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Array1OfNamedUnknown, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Expr_NamedUnknown > >::iterator":
        return _Expr.Expr_Array1OfNamedUnknown_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Expr_NamedUnknown > >::iterator":
        return _Expr.Expr_Array1OfNamedUnknown_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Expr_NamedUnknown > >::const_iterator":
        return _Expr.Expr_Array1OfNamedUnknown_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Expr_NamedUnknown > >::const_iterator":
        return _Expr.Expr_Array1OfNamedUnknown_cend(self)

    def __init__(self, *args):
        this = _Expr.new_Expr_Array1OfNamedUnknown(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Expr_NamedUnknown > const &') -> "void":
        return _Expr.Expr_Array1OfNamedUnknown_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfNamedUnknown_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfNamedUnknown_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfNamedUnknown_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfNamedUnknown_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfNamedUnknown_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfNamedUnknown_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfNamedUnknown_IsAllocated(self)

    def Assign(self, theOther: 'Expr_Array1OfNamedUnknown') -> "NCollection_Array1< opencascade::handle< Expr_NamedUnknown > > &":
        return _Expr.Expr_Array1OfNamedUnknown_Assign(self, theOther)

    def Move(self, theOther: 'Expr_Array1OfNamedUnknown') -> "NCollection_Array1< opencascade::handle< Expr_NamedUnknown > > &":
        return _Expr.Expr_Array1OfNamedUnknown_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Expr_NamedUnknown > > &":
        return _Expr.Expr_Array1OfNamedUnknown_Set(self, *args)

    def First(self) -> "opencascade::handle< Expr_NamedUnknown > const &":
        return _Expr.Expr_Array1OfNamedUnknown_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Expr_NamedUnknown > &":
        return _Expr.Expr_Array1OfNamedUnknown_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Expr_NamedUnknown > const &":
        return _Expr.Expr_Array1OfNamedUnknown_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Expr_NamedUnknown > &":
        return _Expr.Expr_Array1OfNamedUnknown_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_NamedUnknown > const &":
        return _Expr.Expr_Array1OfNamedUnknown_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_NamedUnknown > &":
        return _Expr.Expr_Array1OfNamedUnknown_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Expr_NamedUnknown > &":
        return _Expr.Expr_Array1OfNamedUnknown___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Expr_NamedUnknown > const &') -> "void":
        return _Expr.Expr_Array1OfNamedUnknown_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _Expr.Expr_Array1OfNamedUnknown_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _Expr.delete_Expr_Array1OfNamedUnknown
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Expr_Array1OfNamedUnknown_swigregister = _Expr.Expr_Array1OfNamedUnknown_swigregister
Expr_Array1OfNamedUnknown_swigregister(Expr_Array1OfNamedUnknown)

class Expr_Array1OfSingleRelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Array1OfSingleRelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Array1OfSingleRelation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Expr_SingleRelation > >::iterator":
        return _Expr.Expr_Array1OfSingleRelation_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Expr_SingleRelation > >::iterator":
        return _Expr.Expr_Array1OfSingleRelation_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Expr_SingleRelation > >::const_iterator":
        return _Expr.Expr_Array1OfSingleRelation_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Expr_SingleRelation > >::const_iterator":
        return _Expr.Expr_Array1OfSingleRelation_cend(self)

    def __init__(self, *args):
        this = _Expr.new_Expr_Array1OfSingleRelation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Expr_SingleRelation > const &') -> "void":
        return _Expr.Expr_Array1OfSingleRelation_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfSingleRelation_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfSingleRelation_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfSingleRelation_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfSingleRelation_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Expr.Expr_Array1OfSingleRelation_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfSingleRelation_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _Expr.Expr_Array1OfSingleRelation_IsAllocated(self)

    def Assign(self, theOther: 'Expr_Array1OfSingleRelation') -> "NCollection_Array1< opencascade::handle< Expr_SingleRelation > > &":
        return _Expr.Expr_Array1OfSingleRelation_Assign(self, theOther)

    def Move(self, theOther: 'Expr_Array1OfSingleRelation') -> "NCollection_Array1< opencascade::handle< Expr_SingleRelation > > &":
        return _Expr.Expr_Array1OfSingleRelation_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Expr_SingleRelation > > &":
        return _Expr.Expr_Array1OfSingleRelation_Set(self, *args)

    def First(self) -> "opencascade::handle< Expr_SingleRelation > const &":
        return _Expr.Expr_Array1OfSingleRelation_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Expr_SingleRelation > &":
        return _Expr.Expr_Array1OfSingleRelation_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Expr_SingleRelation > const &":
        return _Expr.Expr_Array1OfSingleRelation_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Expr_SingleRelation > &":
        return _Expr.Expr_Array1OfSingleRelation_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_SingleRelation > const &":
        return _Expr.Expr_Array1OfSingleRelation_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_SingleRelation > &":
        return _Expr.Expr_Array1OfSingleRelation_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Expr_SingleRelation > &":
        return _Expr.Expr_Array1OfSingleRelation___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Expr_SingleRelation > const &') -> "void":
        return _Expr.Expr_Array1OfSingleRelation_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _Expr.Expr_Array1OfSingleRelation_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _Expr.delete_Expr_Array1OfSingleRelation
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

Expr_Array1OfSingleRelation_swigregister = _Expr.Expr_Array1OfSingleRelation_swigregister
Expr_Array1OfSingleRelation_swigregister(Expr_Array1OfSingleRelation)

class Expr_MapOfNamedUnknown(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_MapOfNamedUnknown, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_MapOfNamedUnknown, name)
    __repr__ = _swig_repr

    def cbegin(self) -> "NCollection_IndexedMap< opencascade::handle< Expr_NamedUnknown >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _Expr.Expr_MapOfNamedUnknown_cbegin(self)

    def cend(self) -> "NCollection_IndexedMap< opencascade::handle< Expr_NamedUnknown >,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _Expr.Expr_MapOfNamedUnknown_cend(self)

    def __init__(self, *args):
        this = _Expr.new_Expr_MapOfNamedUnknown(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'Expr_MapOfNamedUnknown') -> "void":
        return _Expr.Expr_MapOfNamedUnknown_Exchange(self, theOther)

    def Assign(self, theOther: 'Expr_MapOfNamedUnknown') -> "NCollection_IndexedMap< opencascade::handle< Expr_NamedUnknown >,TColStd_MapTransientHasher > &":
        return _Expr.Expr_MapOfNamedUnknown_Assign(self, theOther)

    def Set(self, theOther: 'Expr_MapOfNamedUnknown') -> "NCollection_IndexedMap< opencascade::handle< Expr_NamedUnknown >,TColStd_MapTransientHasher > &":
        return _Expr.Expr_MapOfNamedUnknown_Set(self, theOther)

    def ReSize(self, theExtent: 'Standard_Integer const') -> "void":
        return _Expr.Expr_MapOfNamedUnknown_ReSize(self, theExtent)

    def Add(self, theKey1: 'opencascade::handle< Expr_NamedUnknown > const &') -> "Standard_Integer":
        return _Expr.Expr_MapOfNamedUnknown_Add(self, theKey1)

    def Contains(self, theKey1: 'opencascade::handle< Expr_NamedUnknown > const &') -> "Standard_Boolean":
        return _Expr.Expr_MapOfNamedUnknown_Contains(self, theKey1)

    def Substitute(self, theIndex: 'Standard_Integer const', theKey1: 'opencascade::handle< Expr_NamedUnknown > const &') -> "void":
        return _Expr.Expr_MapOfNamedUnknown_Substitute(self, theIndex, theKey1)

    def Swap(self, theIndex1: 'Standard_Integer const', theIndex2: 'Standard_Integer const') -> "void":
        return _Expr.Expr_MapOfNamedUnknown_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self) -> "void":
        return _Expr.Expr_MapOfNamedUnknown_RemoveLast(self)

    def RemoveFromIndex(self, theIndex: 'Standard_Integer const') -> "void":
        return _Expr.Expr_MapOfNamedUnknown_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1: 'opencascade::handle< Expr_NamedUnknown > const &') -> "Standard_Boolean":
        return _Expr.Expr_MapOfNamedUnknown_RemoveKey(self, theKey1)

    def FindKey(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_NamedUnknown > const &":
        return _Expr.Expr_MapOfNamedUnknown_FindKey(self, theIndex)

    def __call__(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_NamedUnknown > const &":
        return _Expr.Expr_MapOfNamedUnknown___call__(self, theIndex)

    def FindIndex(self, theKey1: 'opencascade::handle< Expr_NamedUnknown > const &') -> "Standard_Integer":
        return _Expr.Expr_MapOfNamedUnknown_FindIndex(self, theKey1)

    def Clear(self, *args) -> "void":
        return _Expr.Expr_MapOfNamedUnknown_Clear(self, *args)
    __swig_destroy__ = _Expr.delete_Expr_MapOfNamedUnknown
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _Expr.Expr_MapOfNamedUnknown_Size(self)
Expr_MapOfNamedUnknown_swigregister = _Expr.Expr_MapOfNamedUnknown_swigregister
Expr_MapOfNamedUnknown_swigregister(Expr_MapOfNamedUnknown)

class Expr_SequenceOfGeneralExpression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_SequenceOfGeneralExpression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_SequenceOfGeneralExpression, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Expr_GeneralExpression > >::iterator":
        return _Expr.Expr_SequenceOfGeneralExpression_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Expr_GeneralExpression > >::iterator":
        return _Expr.Expr_SequenceOfGeneralExpression_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Expr_GeneralExpression > >::const_iterator":
        return _Expr.Expr_SequenceOfGeneralExpression_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Expr_GeneralExpression > >::const_iterator":
        return _Expr.Expr_SequenceOfGeneralExpression_cend(self)

    def __init__(self, *args):
        this = _Expr.new_Expr_SequenceOfGeneralExpression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Expr.Expr_SequenceOfGeneralExpression_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Expr.Expr_SequenceOfGeneralExpression_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Expr.Expr_SequenceOfGeneralExpression_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Expr.Expr_SequenceOfGeneralExpression_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Expr.Expr_SequenceOfGeneralExpression_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Expr.Expr_SequenceOfGeneralExpression_delNode)
    else:
        delNode = _Expr.Expr_SequenceOfGeneralExpression_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_Clear(self, theAllocator)

    def Assign(self, theOther: 'Expr_SequenceOfGeneralExpression') -> "NCollection_Sequence< opencascade::handle< Expr_GeneralExpression > > &":
        return _Expr.Expr_SequenceOfGeneralExpression_Assign(self, theOther)

    def Set(self, theOther: 'Expr_SequenceOfGeneralExpression') -> "NCollection_Sequence< opencascade::handle< Expr_GeneralExpression > > &":
        return _Expr.Expr_SequenceOfGeneralExpression_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Expr_SequenceOfGeneralExpression') -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _Expr.Expr_SequenceOfGeneralExpression_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Expr_GeneralExpression > &":
        return _Expr.Expr_SequenceOfGeneralExpression_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _Expr.Expr_SequenceOfGeneralExpression_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Expr_GeneralExpression > &":
        return _Expr.Expr_SequenceOfGeneralExpression_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_GeneralExpression > const &":
        return _Expr.Expr_SequenceOfGeneralExpression_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_GeneralExpression > &":
        return _Expr.Expr_SequenceOfGeneralExpression_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Expr_GeneralExpression > &":
        return _Expr.Expr_SequenceOfGeneralExpression___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Expr_GeneralExpression > const &') -> "void":
        return _Expr.Expr_SequenceOfGeneralExpression_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Expr.delete_Expr_SequenceOfGeneralExpression
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Expr_SequenceOfGeneralExpression_swigregister = _Expr.Expr_SequenceOfGeneralExpression_swigregister
Expr_SequenceOfGeneralExpression_swigregister(Expr_SequenceOfGeneralExpression)

def Expr_SequenceOfGeneralExpression_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Expr.Expr_SequenceOfGeneralExpression_delNode(theNode, theAl)
Expr_SequenceOfGeneralExpression_delNode = _Expr.Expr_SequenceOfGeneralExpression_delNode

class Expr_SequenceOfGeneralRelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_SequenceOfGeneralRelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_SequenceOfGeneralRelation, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Expr_GeneralRelation > >::iterator":
        return _Expr.Expr_SequenceOfGeneralRelation_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Expr_GeneralRelation > >::iterator":
        return _Expr.Expr_SequenceOfGeneralRelation_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Expr_GeneralRelation > >::const_iterator":
        return _Expr.Expr_SequenceOfGeneralRelation_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Expr_GeneralRelation > >::const_iterator":
        return _Expr.Expr_SequenceOfGeneralRelation_cend(self)

    def __init__(self, *args):
        this = _Expr.new_Expr_SequenceOfGeneralRelation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _Expr.Expr_SequenceOfGeneralRelation_Size(self)

    def Length(self) -> "Standard_Integer":
        return _Expr.Expr_SequenceOfGeneralRelation_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _Expr.Expr_SequenceOfGeneralRelation_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _Expr.Expr_SequenceOfGeneralRelation_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _Expr.Expr_SequenceOfGeneralRelation_IsEmpty(self)

    def Reverse(self) -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_Expr.Expr_SequenceOfGeneralRelation_delNode)
    else:
        delNode = _Expr.Expr_SequenceOfGeneralRelation_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_Clear(self, theAllocator)

    def Assign(self, theOther: 'Expr_SequenceOfGeneralRelation') -> "NCollection_Sequence< opencascade::handle< Expr_GeneralRelation > > &":
        return _Expr.Expr_SequenceOfGeneralRelation_Assign(self, theOther)

    def Set(self, theOther: 'Expr_SequenceOfGeneralRelation') -> "NCollection_Sequence< opencascade::handle< Expr_GeneralRelation > > &":
        return _Expr.Expr_SequenceOfGeneralRelation_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'Expr_SequenceOfGeneralRelation') -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Expr_GeneralRelation > const &":
        return _Expr.Expr_SequenceOfGeneralRelation_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Expr_GeneralRelation > &":
        return _Expr.Expr_SequenceOfGeneralRelation_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Expr_GeneralRelation > const &":
        return _Expr.Expr_SequenceOfGeneralRelation_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Expr_GeneralRelation > &":
        return _Expr.Expr_SequenceOfGeneralRelation_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_GeneralRelation > const &":
        return _Expr.Expr_SequenceOfGeneralRelation_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Expr_GeneralRelation > &":
        return _Expr.Expr_SequenceOfGeneralRelation_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Expr_GeneralRelation > &":
        return _Expr.Expr_SequenceOfGeneralRelation___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Expr_GeneralRelation > const &') -> "void":
        return _Expr.Expr_SequenceOfGeneralRelation_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Expr.delete_Expr_SequenceOfGeneralRelation
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

Expr_SequenceOfGeneralRelation_swigregister = _Expr.Expr_SequenceOfGeneralRelation_swigregister
Expr_SequenceOfGeneralRelation_swigregister(Expr_SequenceOfGeneralRelation)

def Expr_SequenceOfGeneralRelation_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _Expr.Expr_SequenceOfGeneralRelation_delNode(theNode, theAl)
Expr_SequenceOfGeneralRelation_delNode = _Expr.Expr_SequenceOfGeneralRelation_delNode

class expr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, expr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, expr, name)
    __repr__ = _swig_repr

    def CopyShare(*args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        No available documentation.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.expr_CopyShare(*args)

    CopyShare = staticmethod(CopyShare)

    def NbOfFreeVariables(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        int

        No available documentation.

        Parameters
        ----------
        exp: Expr_GeneralRelation

        Returns
        -------
        int

        """
        return _Expr.expr_NbOfFreeVariables(*args)

    NbOfFreeVariables = staticmethod(NbOfFreeVariables)

    def Sign(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        val: float

        Returns
        -------
        float

        """
        return _Expr.expr_Sign(*args)

    Sign = staticmethod(Sign)

    __repr__ = _dumps_object


    def __init__(self):
        this = _Expr.new_expr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Expr.delete_expr
    __del__ = lambda self: None
expr_swigregister = _Expr.expr_swigregister
expr_swigregister(expr)

def expr_CopyShare(*args) -> "opencascade::handle< Expr_GeneralExpression >":
    """
    No available documentation.

    Parameters
    ----------
    exp: Expr_GeneralExpression

    Returns
    -------
    opencascade::handle<Expr_GeneralExpression>

    """
    return _Expr.expr_CopyShare(*args)

def expr_NbOfFreeVariables(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    exp: Expr_GeneralExpression

    Returns
    -------
    int

    No available documentation.

    Parameters
    ----------
    exp: Expr_GeneralRelation

    Returns
    -------
    int

    """
    return _Expr.expr_NbOfFreeVariables(*args)

def expr_Sign(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    val: float

    Returns
    -------
    float

    """
    return _Expr.expr_Sign(*args)

class Expr_GeneralExpression(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_GeneralExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_GeneralExpression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Contains(self, *args) -> "Standard_Boolean":
        """
        Tests if <exp> is contained in <self>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralExpression_Contains(self, *args)


    def ContainsUnknowns(self, *args) -> "Standard_Boolean":
        """
        Tests if <self> contains namedunknowns.

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralExpression_ContainsUnknowns(self, *args)


    def Copy(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns a copy of <self> having the same unknowns and functions.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_GeneralExpression_Copy(self, *args)


    def Derivative(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns the derivative on <x> unknown of <self>.

        Parameters
        ----------
        X: Expr_NamedUnknown

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_GeneralExpression_Derivative(self, *args)


    def Evaluate(self, *args) -> "Standard_Real":
        """
        Returns the value of <self> (as a real) by replacement of <vars> by <vals>. raises notevaluable if <self> contains namedunknown not in <vars> or numericerror if result cannot be computed.

        Parameters
        ----------
        vars: Expr_Array1OfNamedUnknown
        vals: TColStd_Array1OfReal

        Returns
        -------
        float

        """
        return _Expr.Expr_GeneralExpression_Evaluate(self, *args)


    def EvaluateNumeric(self, *args) -> "Standard_Real":
        """
        Returns the value of <self> (as a real) by replacement of <vars> by <vals>. raises notevaluable if <self> contains namedunknown not in <vars> or numericerror if result cannot be computed.

        Returns
        -------
        float

        """
        return _Expr.Expr_GeneralExpression_EvaluateNumeric(self, *args)


    def IsIdentical(self, *args) -> "Standard_Boolean":
        """
        Tests if <self> and <other> define the same expression. warning: this method does not include any simplification before testing. it could also be very slow; to be used carefully.

        Parameters
        ----------
        Other: Expr_GeneralExpression

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralExpression_IsIdentical(self, *args)


    def IsLinear(self, *args) -> "Standard_Boolean":
        """
        Tests if <self> is linear on every namedunknown it contains.

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralExpression_IsLinear(self, *args)


    def IsShareable(self, *args) -> "Standard_Boolean":
        """
        Tests if <self> can be shared by one or more expressions or must be copied. this method returns false as a default value. to be redefined ( especially for namedunknown).

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralExpression_IsShareable(self, *args)


    def NDerivative(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns the <n>-th derivative on <x> unknown of <self>. raise outofrange if n <= 0.

        Parameters
        ----------
        X: Expr_NamedUnknown
        N: int

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_GeneralExpression_NDerivative(self, *args)


    def NbSubExpressions(self, *args) -> "Standard_Integer":
        """
        Returns the number of sub-expressions contained in <self> ( >= 0).

        Returns
        -------
        int

        """
        return _Expr.Expr_GeneralExpression_NbSubExpressions(self, *args)


    def Replace(self, *args) -> "void":
        """
        Replaces all occurences of <var> with copies of <with> in <self>. copies of <with> are made with the copy() method. raises invalidoperand if <with> contains <self>.

        Parameters
        ----------
        var: Expr_NamedUnknown
        with: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_GeneralExpression_Replace(self, *args)


    def ShallowSimplified(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns a generalexpression after a simplification of the arguments of <self>.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_GeneralExpression_ShallowSimplified(self, *args)


    def Simplified(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns a generalexpression after replacement of namedunknowns by an associated expression and after values computation.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_GeneralExpression_Simplified(self, *args)


    def String(self, *args) -> "TCollection_AsciiString":
        """
        Returns a string representing <self> in a readable way.

        Returns
        -------
        TCollection_AsciiString

        """
        return _Expr.Expr_GeneralExpression_String(self, *args)


    def SubExpression(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        Returns the <i>-th sub-expression of <self> raises outofrange if <i> > nbsubexpressions(me).

        Parameters
        ----------
        I: int

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_GeneralExpression_SubExpression(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_GeneralExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GeneralExpression
    __del__ = lambda self: None
Expr_GeneralExpression_swigregister = _Expr.Expr_GeneralExpression_swigregister
Expr_GeneralExpression_swigregister(Expr_GeneralExpression)

class Expr_GeneralFunction(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_GeneralFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_GeneralFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Copy(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        Returns a copy of <self> with the same form.

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _Expr.Expr_GeneralFunction_Copy(self, *args)


    def Derivative(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        Returns derivative of <self> for variable <var>.

        Parameters
        ----------
        var: Expr_NamedUnknown

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        Returns derivative of <self> for variable <var> with degree <deg>.

        Parameters
        ----------
        var: Expr_NamedUnknown
        deg: int

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _Expr.Expr_GeneralFunction_Derivative(self, *args)


    def Evaluate(self, *args) -> "Standard_Real":
        """
        Computes the value of <self> with the given variables. raises notevaluable if <vars> does not match all variables of <self>.

        Parameters
        ----------
        vars: Expr_Array1OfNamedUnknown
        vals: TColStd_Array1OfReal

        Returns
        -------
        float

        """
        return _Expr.Expr_GeneralFunction_Evaluate(self, *args)


    def GetStringName(self, *args) -> "TCollection_AsciiString":
        """
        No available documentation.

        Returns
        -------
        TCollection_AsciiString

        """
        return _Expr.Expr_GeneralFunction_GetStringName(self, *args)


    def IsIdentical(self, *args) -> "Standard_Boolean":
        """
        Tests if <self> and <func> are similar functions (same name and same used expression).

        Parameters
        ----------
        func: Expr_GeneralFunction

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralFunction_IsIdentical(self, *args)


    def IsLinearOnVariable(self, *args) -> "Standard_Boolean":
        """
        Tests if <self> is linear on variable on range <index>.

        Parameters
        ----------
        index: int

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralFunction_IsLinearOnVariable(self, *args)


    def NbOfVariables(self, *args) -> "Standard_Integer":
        """
        Returns the number of variables of <self>.

        Returns
        -------
        int

        """
        return _Expr.Expr_GeneralFunction_NbOfVariables(self, *args)


    def Variable(self, *args) -> "opencascade::handle< Expr_NamedUnknown >":
        """
        Returns the variable denoted by <index> in <self>. raises outofrange if index > nbofvariables.

        Parameters
        ----------
        index: int

        Returns
        -------
        opencascade::handle<Expr_NamedUnknown>

        """
        return _Expr.Expr_GeneralFunction_Variable(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_GeneralFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GeneralFunction
    __del__ = lambda self: None
Expr_GeneralFunction_swigregister = _Expr.Expr_GeneralFunction_swigregister
Expr_GeneralFunction_swigregister(Expr_GeneralFunction)

class Expr_GeneralRelation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_GeneralRelation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_GeneralRelation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Contains(self, *args) -> "Standard_Boolean":
        """
        Tests if <exp> contains <var>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralRelation_Contains(self, *args)


    def Copy(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        Returns a copy of <self> having the same unknowns and functions.

        Returns
        -------
        opencascade::handle<Expr_GeneralRelation>

        """
        return _Expr.Expr_GeneralRelation_Copy(self, *args)


    def IsLinear(self, *args) -> "Standard_Boolean":
        """
        Tests if <self> is linear between its namedunknowns.

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralRelation_IsLinear(self, *args)


    def IsSatisfied(self, *args) -> "Standard_Boolean":
        """
        Returns the current status of the relation.

        Returns
        -------
        bool

        """
        return _Expr.Expr_GeneralRelation_IsSatisfied(self, *args)


    def NbOfSingleRelations(self, *args) -> "Standard_Integer":
        """
        Returns the number of singlerelations contained in <self>.

        Returns
        -------
        int

        """
        return _Expr.Expr_GeneralRelation_NbOfSingleRelations(self, *args)


    def NbOfSubRelations(self, *args) -> "Standard_Integer":
        """
        Returns the number of relations contained in <self>.

        Returns
        -------
        int

        """
        return _Expr.Expr_GeneralRelation_NbOfSubRelations(self, *args)


    def Replace(self, *args) -> "void":
        """
        Replaces all occurences of <var> with <with> in <self>.

        Parameters
        ----------
        var: Expr_NamedUnknown
        with: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_GeneralRelation_Replace(self, *args)


    def Simplified(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        Returns a generalrelation after replacement of namedunknowns by an associated expression, and after values computation.

        Returns
        -------
        opencascade::handle<Expr_GeneralRelation>

        """
        return _Expr.Expr_GeneralRelation_Simplified(self, *args)


    def Simplify(self, *args) -> "void":
        """
        Replaces namedunknowns by associated expressions, and computes values in <self>.

        Returns
        -------
        None

        """
        return _Expr.Expr_GeneralRelation_Simplify(self, *args)


    def String(self, *args) -> "TCollection_AsciiString":
        """
        Returns a string representing <self> in a readable way.

        Returns
        -------
        TCollection_AsciiString

        """
        return _Expr.Expr_GeneralRelation_String(self, *args)


    def SubRelation(self, *args) -> "opencascade::handle< Expr_GeneralRelation >":
        """
        Returns the relation denoted by <index> in <self>. an exception is raised if <index> is out of range.

        Parameters
        ----------
        index: int

        Returns
        -------
        opencascade::handle<Expr_GeneralRelation>

        """
        return _Expr.Expr_GeneralRelation_SubRelation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_GeneralRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GeneralRelation
    __del__ = lambda self: None
Expr_GeneralRelation_swigregister = _Expr.Expr_GeneralRelation_swigregister
Expr_GeneralRelation_swigregister(Expr_GeneralRelation)

class Expr_RUIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_RUIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_RUIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an iterator on every namedunknown contained in <rel>.

        Parameters
        ----------
        rel: Expr_GeneralRelation

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_RUIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self, *args) -> "Standard_Boolean":
        """
        Returns false if on other unknown remains.

        Returns
        -------
        bool

        """
        return _Expr.Expr_RUIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Expr.Expr_RUIterator_Next(self, *args)


    def Value(self, *args) -> "opencascade::handle< Expr_NamedUnknown >":
        """
        Returns current namedunknown. raises exception if no more unknowns remain.

        Returns
        -------
        opencascade::handle<Expr_NamedUnknown>

        """
        return _Expr.Expr_RUIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_RUIterator
    __del__ = lambda self: None
Expr_RUIterator_swigregister = _Expr.Expr_RUIterator_swigregister
Expr_RUIterator_swigregister(Expr_RUIterator)

class Expr_RelationIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_RelationIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_RelationIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        rel: Expr_GeneralRelation

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_RelationIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self, *args) -> "Standard_Boolean":
        """
        Returns false if no other relation remains.

        Returns
        -------
        bool

        """
        return _Expr.Expr_RelationIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Expr.Expr_RelationIterator_Next(self, *args)


    def Value(self, *args) -> "opencascade::handle< Expr_SingleRelation >":
        """
        Returns current basic relation. exception is raised if no more relation remains.

        Returns
        -------
        opencascade::handle<Expr_SingleRelation>

        """
        return _Expr.Expr_RelationIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_RelationIterator
    __del__ = lambda self: None
Expr_RelationIterator_swigregister = _Expr.Expr_RelationIterator_swigregister
Expr_RelationIterator_swigregister(Expr_RelationIterator)

class Expr_UnknownIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_UnknownIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_UnknownIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_UnknownIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def More(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Expr.Expr_UnknownIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Expr.Expr_UnknownIterator_Next(self, *args)


    def Value(self, *args) -> "opencascade::handle< Expr_NamedUnknown >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Expr_NamedUnknown>

        """
        return _Expr.Expr_UnknownIterator_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_UnknownIterator
    __del__ = lambda self: None
Expr_UnknownIterator_swigregister = _Expr.Expr_UnknownIterator_swigregister
Expr_UnknownIterator_swigregister(Expr_UnknownIterator)

class Expr_BinaryExpression(Expr_GeneralExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_BinaryExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_BinaryExpression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FirstOperand(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_BinaryExpression_FirstOperand(self, *args)


    def SecondOperand(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_BinaryExpression_SecondOperand(self, *args)


    def SetFirstOperand(self, *args) -> "void":
        """
        Sets first operand of <self> raises invalidoperand if exp = me.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_BinaryExpression_SetFirstOperand(self, *args)


    def SetSecondOperand(self, *args) -> "void":
        """
        Sets second operand of <self> raises invalidoperand if <exp> contains <self>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_BinaryExpression_SetSecondOperand(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_BinaryExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_BinaryExpression
    __del__ = lambda self: None
Expr_BinaryExpression_swigregister = _Expr.Expr_BinaryExpression_swigregister
Expr_BinaryExpression_swigregister(Expr_BinaryExpression)

class Expr_FunctionDerivative(Expr_GeneralFunction):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_FunctionDerivative, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_FunctionDerivative, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a functionderivative of degree <deg> relative to the <withx> variable. raises outofrange if <deg> lower or equal to zero.

        Parameters
        ----------
        func: Expr_GeneralFunction
        withX: Expr_NamedUnknown
        deg: int

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_FunctionDerivative(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Degree(self, *args) -> "Standard_Integer":
        """
        Returns the degree of derivation of <self>.

        Returns
        -------
        int

        """
        return _Expr.Expr_FunctionDerivative_Degree(self, *args)


    def DerivVariable(self, *args) -> "opencascade::handle< Expr_NamedUnknown >":
        """
        Returns the derivation variable of <self>.

        Returns
        -------
        opencascade::handle<Expr_NamedUnknown>

        """
        return _Expr.Expr_FunctionDerivative_DerivVariable(self, *args)


    def Derivative(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        Returns derivative of <self> for variable <var>.

        Parameters
        ----------
        var: Expr_NamedUnknown

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        Returns derivative of <self> for variable <var> with degree <deg>.

        Parameters
        ----------
        var: Expr_NamedUnknown
        deg: int

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _Expr.Expr_FunctionDerivative_Derivative(self, *args)


    def Expression(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_FunctionDerivative_Expression(self, *args)


    def Function(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        Returns the function of which <self> is the derivative.

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _Expr.Expr_FunctionDerivative_Function(self, *args)


    def UpdateExpression(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Expr.Expr_FunctionDerivative_UpdateExpression(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_FunctionDerivative_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_FunctionDerivative
    __del__ = lambda self: None
Expr_FunctionDerivative_swigregister = _Expr.Expr_FunctionDerivative_swigregister
Expr_FunctionDerivative_swigregister(Expr_FunctionDerivative)

class Expr_NamedExpression(Expr_GeneralExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_NamedExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_NamedExpression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetName(self, *args) -> "TCollection_AsciiString const &":
        """
        No available documentation.

        Returns
        -------
        TCollection_AsciiString

        """
        return _Expr.Expr_NamedExpression_GetName(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _Expr.Expr_NamedExpression_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NamedExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NamedExpression
    __del__ = lambda self: None
Expr_NamedExpression_swigregister = _Expr.Expr_NamedExpression_swigregister
Expr_NamedExpression_swigregister(Expr_NamedExpression)

class Expr_NamedFunction(Expr_GeneralFunction):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_NamedFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_NamedFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a function of given variables <vars> with name <name> defined by the expression <exp>.

        Parameters
        ----------
        name: TCollection_AsciiString
        exp: Expr_GeneralExpression
        vars: Expr_Array1OfNamedUnknown

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_NamedFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Derivative(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        Returns derivative of <self> for variable <var>.

        Parameters
        ----------
        var: Expr_NamedUnknown

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        Returns derivative of <self> for variable <var> with degree <deg>.

        Parameters
        ----------
        var: Expr_NamedUnknown
        deg: int

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _Expr.Expr_NamedFunction_Derivative(self, *args)


    def Expression(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns equivalent expression of <self>.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_NamedFunction_Expression(self, *args)


    def GetName(self, *args) -> "TCollection_AsciiString":
        """
        Returns the name assigned to <self>.

        Returns
        -------
        TCollection_AsciiString

        """
        return _Expr.Expr_NamedFunction_GetName(self, *args)


    def SetExpression(self, *args) -> "void":
        """
        Modifies expression of <self>. warning: beware of derivatives. see functionderivative.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_NamedFunction_SetExpression(self, *args)


    def SetName(self, *args) -> "void":
        """
        Sets the name <newname> to <self>.

        Parameters
        ----------
        newname: TCollection_AsciiString

        Returns
        -------
        None

        """
        return _Expr.Expr_NamedFunction_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NamedFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NamedFunction
    __del__ = lambda self: None
Expr_NamedFunction_swigregister = _Expr.Expr_NamedFunction_swigregister
Expr_NamedFunction_swigregister(Expr_NamedFunction)

class Expr_NumericValue(Expr_GeneralExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_NumericValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_NumericValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        val: float

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_NumericValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetValue(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Expr.Expr_NumericValue_GetValue(self, *args)


    def SetValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        val: float

        Returns
        -------
        None

        """
        return _Expr.Expr_NumericValue_SetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NumericValue_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NumericValue
    __del__ = lambda self: None
Expr_NumericValue_swigregister = _Expr.Expr_NumericValue_swigregister
Expr_NumericValue_swigregister(Expr_NumericValue)

class Expr_PolyExpression(Expr_GeneralExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_PolyExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_PolyExpression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbOperands(self, *args) -> "Standard_Integer":
        """
        Returns the number of operands contained in <self>.

        Returns
        -------
        int

        """
        return _Expr.Expr_PolyExpression_NbOperands(self, *args)


    def Operand(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        Returns the <index>-th operand used in <self>. an exception is raised if index is out of range.

        Parameters
        ----------
        index: int

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_PolyExpression_Operand(self, *args)


    def SetOperand(self, *args) -> "void":
        """
        Sets the <index>-th operand used in <self>. an exception is raised if <index> is out of range raises invalidoperand if <exp> contains <self>.

        Parameters
        ----------
        exp: Expr_GeneralExpression
        index: int

        Returns
        -------
        None

        """
        return _Expr.Expr_PolyExpression_SetOperand(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_PolyExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_PolyExpression
    __del__ = lambda self: None
Expr_PolyExpression_swigregister = _Expr.Expr_PolyExpression_swigregister
Expr_PolyExpression_swigregister(Expr_PolyExpression)

class Expr_SingleRelation(Expr_GeneralRelation):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralRelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_SingleRelation, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralRelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_SingleRelation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FirstMember(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns the first member of the relation.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_SingleRelation_FirstMember(self, *args)


    def SecondMember(self, *args) -> "opencascade::handle< Expr_GeneralExpression >":
        """
        Returns the second member of the relation.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_SingleRelation_SecondMember(self, *args)


    def SetFirstMember(self, *args) -> "void":
        """
        Defines the first member of the relation.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_SingleRelation_SetFirstMember(self, *args)


    def SetSecondMember(self, *args) -> "void":
        """
        Defines the second member of the relation.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_SingleRelation_SetSecondMember(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_SingleRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_SingleRelation
    __del__ = lambda self: None
Expr_SingleRelation_swigregister = _Expr.Expr_SingleRelation_swigregister
Expr_SingleRelation_swigregister(Expr_SingleRelation)

class Expr_SystemRelation(Expr_GeneralRelation):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralRelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_SystemRelation, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralRelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_SystemRelation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a system with one relation.

        Parameters
        ----------
        relation: Expr_GeneralRelation

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_SystemRelation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "void":
        """
        Appends <relation> in the list of components of <self>.

        Parameters
        ----------
        relation: Expr_GeneralRelation

        Returns
        -------
        None

        """
        return _Expr.Expr_SystemRelation_Add(self, *args)


    def Remove(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        relation: Expr_GeneralRelation

        Returns
        -------
        None

        """
        return _Expr.Expr_SystemRelation_Remove(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_SystemRelation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_SystemRelation
    __del__ = lambda self: None
Expr_SystemRelation_swigregister = _Expr.Expr_SystemRelation_swigregister
Expr_SystemRelation_swigregister(Expr_SystemRelation)

class Expr_UnaryExpression(Expr_GeneralExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_UnaryExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_GeneralExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_UnaryExpression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Operand(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        Returns the operand used.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_UnaryExpression_Operand(self, *args)


    def SetOperand(self, *args) -> "void":
        """
        Sets the operand used raises invalidoperand if <exp> contains <self>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_UnaryExpression_SetOperand(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_UnaryExpression_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_UnaryExpression
    __del__ = lambda self: None
Expr_UnaryExpression_swigregister = _Expr.Expr_UnaryExpression_swigregister
Expr_UnaryExpression_swigregister(Expr_UnaryExpression)

class Expr_Absolute(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Absolute, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Absolute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the abs of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Absolute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Absolute_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Absolute
    __del__ = lambda self: None
Expr_Absolute_swigregister = _Expr.Expr_Absolute_swigregister
Expr_Absolute_swigregister(Expr_Absolute)

class Expr_ArcCosine(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_ArcCosine, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_ArcCosine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the arccos of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_ArcCosine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArcCosine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArcCosine
    __del__ = lambda self: None
Expr_ArcCosine_swigregister = _Expr.Expr_ArcCosine_swigregister
Expr_ArcCosine_swigregister(Expr_ArcCosine)

class Expr_ArcSine(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_ArcSine, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_ArcSine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the arcsin of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_ArcSine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArcSine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArcSine
    __del__ = lambda self: None
Expr_ArcSine_swigregister = _Expr.Expr_ArcSine_swigregister
Expr_ArcSine_swigregister(Expr_ArcSine)

class Expr_ArcTangent(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_ArcTangent, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_ArcTangent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the arctan of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_ArcTangent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArcTangent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArcTangent
    __del__ = lambda self: None
Expr_ArcTangent_swigregister = _Expr.Expr_ArcTangent_swigregister
Expr_ArcTangent_swigregister(Expr_ArcTangent)

class Expr_ArgCosh(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_ArgCosh, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_ArgCosh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the argcosh of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_ArgCosh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArgCosh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArgCosh
    __del__ = lambda self: None
Expr_ArgCosh_swigregister = _Expr.Expr_ArgCosh_swigregister
Expr_ArgCosh_swigregister(Expr_ArgCosh)

class Expr_ArgSinh(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_ArgSinh, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_ArgSinh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the argsinh of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_ArgSinh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArgSinh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArgSinh
    __del__ = lambda self: None
Expr_ArgSinh_swigregister = _Expr.Expr_ArgSinh_swigregister
Expr_ArgSinh_swigregister(Expr_ArgSinh)

class Expr_ArgTanh(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_ArgTanh, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_ArgTanh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the argtanh of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_ArgTanh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_ArgTanh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_ArgTanh
    __del__ = lambda self: None
Expr_ArgTanh_swigregister = _Expr.Expr_ArgTanh_swigregister
Expr_ArgTanh_swigregister(Expr_ArgTanh)

class Expr_BinaryFunction(Expr_BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_BinaryFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_BinaryFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates <self> as <func> (<exp1>,<exp2>). raises exception if <func> is not binary.

        Parameters
        ----------
        func: Expr_GeneralFunction
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_BinaryFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Function(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        Returns the function defining <self>.

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _Expr.Expr_BinaryFunction_Function(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_BinaryFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_BinaryFunction
    __del__ = lambda self: None
Expr_BinaryFunction_swigregister = _Expr.Expr_BinaryFunction_swigregister
Expr_BinaryFunction_swigregister(Expr_BinaryFunction)

class Expr_Cosh(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Cosh, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Cosh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the cosh of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Cosh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Cosh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Cosh
    __del__ = lambda self: None
Expr_Cosh_swigregister = _Expr.Expr_Cosh_swigregister
Expr_Cosh_swigregister(Expr_Cosh)

class Expr_Cosine(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Cosine, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Cosine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the cosine of exp.

        Parameters
        ----------
        Exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Cosine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Cosine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Cosine
    __del__ = lambda self: None
Expr_Cosine_swigregister = _Expr.Expr_Cosine_swigregister
Expr_Cosine_swigregister(Expr_Cosine)

class Expr_Difference(Expr_BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Difference, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Difference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the difference <exp1> - <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Difference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Difference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Difference
    __del__ = lambda self: None
Expr_Difference_swigregister = _Expr.Expr_Difference_swigregister
Expr_Difference_swigregister(Expr_Difference)

class Expr_Different(Expr_SingleRelation):
    __swig_setmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Different, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Different, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the relation <exp1> # <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Different(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Different_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Different
    __del__ = lambda self: None
Expr_Different_swigregister = _Expr.Expr_Different_swigregister
Expr_Different_swigregister(Expr_Different)

class Expr_Division(Expr_BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Division, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Division, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the division <exp1>/<exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Division(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Division_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Division
    __del__ = lambda self: None
Expr_Division_swigregister = _Expr.Expr_Division_swigregister
Expr_Division_swigregister(Expr_Division)

class Expr_Equal(Expr_SingleRelation):
    __swig_setmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Equal, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Equal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the relation <exp1> = <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Equal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Equal_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Equal
    __del__ = lambda self: None
Expr_Equal_swigregister = _Expr.Expr_Equal_swigregister
Expr_Equal_swigregister(Expr_Equal)

class Expr_Exponential(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Exponential, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Exponential, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the exponential of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Exponential(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Exponential_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Exponential
    __del__ = lambda self: None
Expr_Exponential_swigregister = _Expr.Expr_Exponential_swigregister
Expr_Exponential_swigregister(Expr_Exponential)

class Expr_Exponentiate(Expr_BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Exponentiate, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Exponentiate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the exponential <exp1> ^ <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Exponentiate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Exponentiate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Exponentiate
    __del__ = lambda self: None
Expr_Exponentiate_swigregister = _Expr.Expr_Exponentiate_swigregister
Expr_Exponentiate_swigregister(Expr_Exponentiate)

class Expr_GreaterThan(Expr_SingleRelation):
    __swig_setmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_GreaterThan, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_GreaterThan, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the relation <exp1> > <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_GreaterThan(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_GreaterThan_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GreaterThan
    __del__ = lambda self: None
Expr_GreaterThan_swigregister = _Expr.Expr_GreaterThan_swigregister
Expr_GreaterThan_swigregister(Expr_GreaterThan)

class Expr_GreaterThanOrEqual(Expr_SingleRelation):
    __swig_setmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_GreaterThanOrEqual, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_GreaterThanOrEqual, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the relation <exp1> >= <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_GreaterThanOrEqual(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_GreaterThanOrEqual_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_GreaterThanOrEqual
    __del__ = lambda self: None
Expr_GreaterThanOrEqual_swigregister = _Expr.Expr_GreaterThanOrEqual_swigregister
Expr_GreaterThanOrEqual_swigregister(Expr_GreaterThanOrEqual)

class Expr_LessThan(Expr_SingleRelation):
    __swig_setmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_LessThan, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_LessThan, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the relation <exp1> < <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_LessThan(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_LessThan_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_LessThan
    __del__ = lambda self: None
Expr_LessThan_swigregister = _Expr.Expr_LessThan_swigregister
Expr_LessThan_swigregister(Expr_LessThan)

class Expr_LessThanOrEqual(Expr_SingleRelation):
    __swig_setmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_LessThanOrEqual, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_SingleRelation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_LessThanOrEqual, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the relation <exp1> <= <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_LessThanOrEqual(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_LessThanOrEqual_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_LessThanOrEqual
    __del__ = lambda self: None
Expr_LessThanOrEqual_swigregister = _Expr.Expr_LessThanOrEqual_swigregister
Expr_LessThanOrEqual_swigregister(Expr_LessThanOrEqual)

class Expr_LogOf10(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_LogOf10, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_LogOf10, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the base 10 logarithm of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_LogOf10(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_LogOf10_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_LogOf10
    __del__ = lambda self: None
Expr_LogOf10_swigregister = _Expr.Expr_LogOf10_swigregister
Expr_LogOf10_swigregister(Expr_LogOf10)

class Expr_LogOfe(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_LogOfe, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_LogOfe, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the natural logarithm of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_LogOfe(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_LogOfe_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_LogOfe
    __del__ = lambda self: None
Expr_LogOfe_swigregister = _Expr.Expr_LogOfe_swigregister
Expr_LogOfe_swigregister(Expr_LogOfe)

class Expr_NamedConstant(Expr_NamedExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_NamedExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_NamedConstant, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_NamedExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_NamedConstant, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a constant value of name <name> and value <value>.

        Parameters
        ----------
        name: TCollection_AsciiString
        value: float

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_NamedConstant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetValue(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Expr.Expr_NamedConstant_GetValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NamedConstant_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NamedConstant
    __del__ = lambda self: None
Expr_NamedConstant_swigregister = _Expr.Expr_NamedConstant_swigregister
Expr_NamedConstant_swigregister(Expr_NamedConstant)

class Expr_NamedUnknown(Expr_NamedExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_NamedExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_NamedUnknown, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_NamedExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_NamedUnknown, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_AsciiString

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_NamedUnknown(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Assign(self, *args) -> "void":
        """
        Assigns <self> to <exp> expression. raises exception if <exp> refers to <self>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        return _Expr.Expr_NamedUnknown_Assign(self, *args)


    def AssignedExpression(self, *args) -> "opencascade::handle< Expr_GeneralExpression > const &":
        """
        If exists, returns the assigned expression. an exception is raised if the expression does not exist.

        Returns
        -------
        opencascade::handle<Expr_GeneralExpression>

        """
        return _Expr.Expr_NamedUnknown_AssignedExpression(self, *args)


    def Deassign(self, *args) -> "void":
        """
        Supresses the assigned expression.

        Returns
        -------
        None

        """
        return _Expr.Expr_NamedUnknown_Deassign(self, *args)


    def IsAssigned(self, *args) -> "Standard_Boolean":
        """
        Tests if an expression is assigned to <self>.

        Returns
        -------
        bool

        """
        return _Expr.Expr_NamedUnknown_IsAssigned(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_NamedUnknown_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_NamedUnknown
    __del__ = lambda self: None
Expr_NamedUnknown_swigregister = _Expr.Expr_NamedUnknown_swigregister
Expr_NamedUnknown_swigregister(Expr_NamedUnknown)

class Expr_PolyFunction(Expr_PolyExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_PolyExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_PolyFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_PolyExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_PolyFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates <self> as <func>(<exps_1>,<exps_2>,...,<exps_n>).

        Parameters
        ----------
        func: Expr_GeneralFunction
        exps: Expr_Array1OfGeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_PolyFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Function(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        Returns the function defining <self>.

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _Expr.Expr_PolyFunction_Function(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_PolyFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_PolyFunction
    __del__ = lambda self: None
Expr_PolyFunction_swigregister = _Expr.Expr_PolyFunction_swigregister
Expr_PolyFunction_swigregister(Expr_PolyFunction)

class Expr_Product(Expr_PolyExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_PolyExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Product, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_PolyExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Product, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the product of all members of sequence <exps>.

        Parameters
        ----------
        exps: Expr_SequenceOfGeneralExpression

        Returns
        -------
        None

        Creates the product of <exp1> and <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Product(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Product_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Product
    __del__ = lambda self: None
Expr_Product_swigregister = _Expr.Expr_Product_swigregister
Expr_Product_swigregister(Expr_Product)

class Expr_Sine(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Sine, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Sine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the sine of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Sine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Sine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Sine
    __del__ = lambda self: None
Expr_Sine_swigregister = _Expr.Expr_Sine_swigregister
Expr_Sine_swigregister(Expr_Sine)

class Expr_Sinh(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Sinh, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Sinh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the sinh of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Sinh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Sinh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Sinh
    __del__ = lambda self: None
Expr_Sinh_swigregister = _Expr.Expr_Sinh_swigregister
Expr_Sinh_swigregister(Expr_Sinh)

class Expr_Square(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Square, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Square, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the square of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Square(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Square_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Square
    __del__ = lambda self: None
Expr_Square_swigregister = _Expr.Expr_Square_swigregister
Expr_Square_swigregister(Expr_Square)

class Expr_SquareRoot(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_SquareRoot, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_SquareRoot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the square root of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_SquareRoot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_SquareRoot_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_SquareRoot
    __del__ = lambda self: None
Expr_SquareRoot_swigregister = _Expr.Expr_SquareRoot_swigregister
Expr_SquareRoot_swigregister(Expr_SquareRoot)

class Expr_Sum(Expr_PolyExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_PolyExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Sum, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_PolyExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Sum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the sum of all the members of sequence <exps>.

        Parameters
        ----------
        exps: Expr_SequenceOfGeneralExpression

        Returns
        -------
        None

        Creates the sum of <exp1> and <exp2>.

        Parameters
        ----------
        exp1: Expr_GeneralExpression
        exp2: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Sum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Sum_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Sum
    __del__ = lambda self: None
Expr_Sum_swigregister = _Expr.Expr_Sum_swigregister
Expr_Sum_swigregister(Expr_Sum)

class Expr_Tangent(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Tangent, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Tangent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the tangent of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Tangent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Tangent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Tangent
    __del__ = lambda self: None
Expr_Tangent_swigregister = _Expr.Expr_Tangent_swigregister
Expr_Tangent_swigregister(Expr_Tangent)

class Expr_Tanh(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_Tanh, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_Tanh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates the hyperbolic tangent of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_Tanh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_Tanh_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_Tanh
    __del__ = lambda self: None
Expr_Tanh_swigregister = _Expr.Expr_Tanh_swigregister
Expr_Tanh_swigregister(Expr_Tanh)

class Expr_UnaryFunction(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_UnaryFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_UnaryFunction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates me as <func>(<exp>). raises exception if <func> is not unary.

        Parameters
        ----------
        func: Expr_GeneralFunction
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_UnaryFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Function(self, *args) -> "opencascade::handle< Expr_GeneralFunction >":
        """
        Returns the function defining <self>.

        Returns
        -------
        opencascade::handle<Expr_GeneralFunction>

        """
        return _Expr.Expr_UnaryFunction_Function(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Expr_UnaryFunction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_UnaryFunction
    __del__ = lambda self: None
Expr_UnaryFunction_swigregister = _Expr.Expr_UnaryFunction_swigregister
Expr_UnaryFunction_swigregister(Expr_UnaryFunction)

class Expr_UnaryMinus(Expr_UnaryExpression):
    __swig_setmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr_UnaryMinus, name, value)
    __swig_getmethods__ = {}
    for _s in [Expr_UnaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expr_UnaryMinus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Create the unary minus of <exp>.

        Parameters
        ----------
        exp: Expr_GeneralExpression

        Returns
        -------
        None

        """
        this = _Expr.new_Expr_UnaryMinus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_Expr_UnaryMinus_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Expr.delete_Expr_UnaryMinus
    __del__ = lambda self: None
Expr_UnaryMinus_swigregister = _Expr.Expr_UnaryMinus_swigregister
Expr_UnaryMinus_swigregister(Expr_UnaryMinus)


@classnotwrapped
class Expr_Sign:
	pass




# This file is compatible with both classic and new-style classes.


