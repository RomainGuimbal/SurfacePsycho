# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepToTopoDS module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_steptotopods.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepToTopoDS')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepToTopoDS')
    _StepToTopoDS = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepToTopoDS', [dirname(__file__)])
        except ImportError:
            import _StepToTopoDS
            return _StepToTopoDS
        try:
            _mod = imp.load_module('_StepToTopoDS', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepToTopoDS = swig_import_helper()
    del swig_import_helper
else:
    import _StepToTopoDS
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepToTopoDS.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StepToTopoDS.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepToTopoDS.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepToTopoDS.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StepToTopoDS.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StepToTopoDS.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StepToTopoDS.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StepToTopoDS.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StepToTopoDS.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StepToTopoDS.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepToTopoDS.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StepToTopoDS.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StepToTopoDS.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepToTopoDS.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepToTopoDS.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepToTopoDS.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StepToTopoDS.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepToTopoDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepToTopoDS.process_exception(error, method_name, class_name)
process_exception = _StepToTopoDS.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepRepr
import OCC.Core.TCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepBasic
import OCC.Core.StepGeom
import OCC.Core.StepShape
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Transfer
import OCC.Core.Geom2d

from enum import IntEnum
from OCC.Core.Exception import *

StepToTopoDS_GeometricToolDone = _StepToTopoDS.StepToTopoDS_GeometricToolDone
StepToTopoDS_GeometricToolIsDegenerated = _StepToTopoDS.StepToTopoDS_GeometricToolIsDegenerated
StepToTopoDS_GeometricToolHasNoPCurve = _StepToTopoDS.StepToTopoDS_GeometricToolHasNoPCurve
StepToTopoDS_GeometricToolWrong3dParameters = _StepToTopoDS.StepToTopoDS_GeometricToolWrong3dParameters
StepToTopoDS_GeometricToolNoProjectiOnCurve = _StepToTopoDS.StepToTopoDS_GeometricToolNoProjectiOnCurve
StepToTopoDS_GeometricToolOther = _StepToTopoDS.StepToTopoDS_GeometricToolOther
StepToTopoDS_TranslateShellDone = _StepToTopoDS.StepToTopoDS_TranslateShellDone
StepToTopoDS_TranslateShellOther = _StepToTopoDS.StepToTopoDS_TranslateShellOther
StepToTopoDS_TranslatePolyLoopDone = _StepToTopoDS.StepToTopoDS_TranslatePolyLoopDone
StepToTopoDS_TranslatePolyLoopOther = _StepToTopoDS.StepToTopoDS_TranslatePolyLoopOther
StepToTopoDS_TranslateEdgeDone = _StepToTopoDS.StepToTopoDS_TranslateEdgeDone
StepToTopoDS_TranslateEdgeOther = _StepToTopoDS.StepToTopoDS_TranslateEdgeOther
StepToTopoDS_BuilderDone = _StepToTopoDS.StepToTopoDS_BuilderDone
StepToTopoDS_BuilderOther = _StepToTopoDS.StepToTopoDS_BuilderOther
StepToTopoDS_TranslateFaceDone = _StepToTopoDS.StepToTopoDS_TranslateFaceDone
StepToTopoDS_TranslateFaceOther = _StepToTopoDS.StepToTopoDS_TranslateFaceOther
StepToTopoDS_TranslateVertexLoopDone = _StepToTopoDS.StepToTopoDS_TranslateVertexLoopDone
StepToTopoDS_TranslateVertexLoopOther = _StepToTopoDS.StepToTopoDS_TranslateVertexLoopOther
StepToTopoDS_TranslateEdgeLoopDone = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoopDone
StepToTopoDS_TranslateEdgeLoopOther = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoopOther
StepToTopoDS_TranslateVertexDone = _StepToTopoDS.StepToTopoDS_TranslateVertexDone
StepToTopoDS_TranslateVertexOther = _StepToTopoDS.StepToTopoDS_TranslateVertexOther


class StepToTopoDS_GeometricToolError(IntEnum):
	StepToTopoDS_GeometricToolDone = 0
	StepToTopoDS_GeometricToolIsDegenerated = 1
	StepToTopoDS_GeometricToolHasNoPCurve = 2
	StepToTopoDS_GeometricToolWrong3dParameters = 3
	StepToTopoDS_GeometricToolNoProjectiOnCurve = 4
	StepToTopoDS_GeometricToolOther = 5
StepToTopoDS_GeometricToolDone = StepToTopoDS_GeometricToolError.StepToTopoDS_GeometricToolDone
StepToTopoDS_GeometricToolIsDegenerated = StepToTopoDS_GeometricToolError.StepToTopoDS_GeometricToolIsDegenerated
StepToTopoDS_GeometricToolHasNoPCurve = StepToTopoDS_GeometricToolError.StepToTopoDS_GeometricToolHasNoPCurve
StepToTopoDS_GeometricToolWrong3dParameters = StepToTopoDS_GeometricToolError.StepToTopoDS_GeometricToolWrong3dParameters
StepToTopoDS_GeometricToolNoProjectiOnCurve = StepToTopoDS_GeometricToolError.StepToTopoDS_GeometricToolNoProjectiOnCurve
StepToTopoDS_GeometricToolOther = StepToTopoDS_GeometricToolError.StepToTopoDS_GeometricToolOther

class StepToTopoDS_TranslateShellError(IntEnum):
	StepToTopoDS_TranslateShellDone = 0
	StepToTopoDS_TranslateShellOther = 1
StepToTopoDS_TranslateShellDone = StepToTopoDS_TranslateShellError.StepToTopoDS_TranslateShellDone
StepToTopoDS_TranslateShellOther = StepToTopoDS_TranslateShellError.StepToTopoDS_TranslateShellOther

class StepToTopoDS_TranslatePolyLoopError(IntEnum):
	StepToTopoDS_TranslatePolyLoopDone = 0
	StepToTopoDS_TranslatePolyLoopOther = 1
StepToTopoDS_TranslatePolyLoopDone = StepToTopoDS_TranslatePolyLoopError.StepToTopoDS_TranslatePolyLoopDone
StepToTopoDS_TranslatePolyLoopOther = StepToTopoDS_TranslatePolyLoopError.StepToTopoDS_TranslatePolyLoopOther

class StepToTopoDS_TranslateEdgeError(IntEnum):
	StepToTopoDS_TranslateEdgeDone = 0
	StepToTopoDS_TranslateEdgeOther = 1
StepToTopoDS_TranslateEdgeDone = StepToTopoDS_TranslateEdgeError.StepToTopoDS_TranslateEdgeDone
StepToTopoDS_TranslateEdgeOther = StepToTopoDS_TranslateEdgeError.StepToTopoDS_TranslateEdgeOther

class StepToTopoDS_BuilderError(IntEnum):
	StepToTopoDS_BuilderDone = 0
	StepToTopoDS_BuilderOther = 1
StepToTopoDS_BuilderDone = StepToTopoDS_BuilderError.StepToTopoDS_BuilderDone
StepToTopoDS_BuilderOther = StepToTopoDS_BuilderError.StepToTopoDS_BuilderOther

class StepToTopoDS_TranslateFaceError(IntEnum):
	StepToTopoDS_TranslateFaceDone = 0
	StepToTopoDS_TranslateFaceOther = 1
StepToTopoDS_TranslateFaceDone = StepToTopoDS_TranslateFaceError.StepToTopoDS_TranslateFaceDone
StepToTopoDS_TranslateFaceOther = StepToTopoDS_TranslateFaceError.StepToTopoDS_TranslateFaceOther

class StepToTopoDS_TranslateVertexLoopError(IntEnum):
	StepToTopoDS_TranslateVertexLoopDone = 0
	StepToTopoDS_TranslateVertexLoopOther = 1
StepToTopoDS_TranslateVertexLoopDone = StepToTopoDS_TranslateVertexLoopError.StepToTopoDS_TranslateVertexLoopDone
StepToTopoDS_TranslateVertexLoopOther = StepToTopoDS_TranslateVertexLoopError.StepToTopoDS_TranslateVertexLoopOther

class StepToTopoDS_TranslateEdgeLoopError(IntEnum):
	StepToTopoDS_TranslateEdgeLoopDone = 0
	StepToTopoDS_TranslateEdgeLoopOther = 1
StepToTopoDS_TranslateEdgeLoopDone = StepToTopoDS_TranslateEdgeLoopError.StepToTopoDS_TranslateEdgeLoopDone
StepToTopoDS_TranslateEdgeLoopOther = StepToTopoDS_TranslateEdgeLoopError.StepToTopoDS_TranslateEdgeLoopOther

class StepToTopoDS_TranslateVertexError(IntEnum):
	StepToTopoDS_TranslateVertexDone = 0
	StepToTopoDS_TranslateVertexOther = 1
StepToTopoDS_TranslateVertexDone = StepToTopoDS_TranslateVertexError.StepToTopoDS_TranslateVertexDone
StepToTopoDS_TranslateVertexOther = StepToTopoDS_TranslateVertexError.StepToTopoDS_TranslateVertexOther

class StepToTopoDS_DataMapOfRI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_DataMapOfRI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_DataMapOfRI, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< opencascade::handle< StepRepr_RepresentationItem >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_begin(self)

    def end(self) -> "NCollection_DataMap< opencascade::handle< StepRepr_RepresentationItem >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_end(self)

    def cbegin(self) -> "NCollection_DataMap< opencascade::handle< StepRepr_RepresentationItem >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_cbegin(self)

    def cend(self) -> "NCollection_DataMap< opencascade::handle< StepRepr_RepresentationItem >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_cend(self)

    def __init__(self, *args):
        this = _StepToTopoDS.new_StepToTopoDS_DataMapOfRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'StepToTopoDS_DataMapOfRI') -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Exchange(self, theOther)

    def Assign(self, theOther: 'StepToTopoDS_DataMapOfRI') -> "NCollection_DataMap< opencascade::handle< StepRepr_RepresentationItem >,TopoDS_Shape,TColStd_MapTransientHasher > &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Assign(self, theOther)

    def Set(self, theOther: 'StepToTopoDS_DataMapOfRI') -> "NCollection_DataMap< opencascade::handle< StepRepr_RepresentationItem >,TopoDS_Shape,TColStd_MapTransientHasher > &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_ReSize(self, N)

    def Bind(self, theKey: 'opencascade::handle< StepRepr_RepresentationItem > const &', theItem: 'TopoDS_Shape') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'opencascade::handle< StepRepr_RepresentationItem > const &', theItem: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'opencascade::handle< StepRepr_RepresentationItem > const &') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_IsBound(self, theKey)

    def UnBind(self, theKey: 'opencascade::handle< StepRepr_RepresentationItem > const &') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_UnBind(self, theKey)

    def Seek(self, theKey: 'opencascade::handle< StepRepr_RepresentationItem > const &') -> "TopoDS_Shape const *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Find(self, *args)

    def ChangeSeek(self, theKey: 'opencascade::handle< StepRepr_RepresentationItem > const &') -> "TopoDS_Shape *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'opencascade::handle< StepRepr_RepresentationItem > const &') -> "TopoDS_Shape &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Clear(self, *args)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfRI
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRI_Size(self)
StepToTopoDS_DataMapOfRI_swigregister = _StepToTopoDS.StepToTopoDS_DataMapOfRI_swigregister
StepToTopoDS_DataMapOfRI_swigregister(StepToTopoDS_DataMapOfRI)

class StepToTopoDS_DataMapOfRINames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_DataMapOfRINames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_DataMapOfRINames, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< TCollection_AsciiString,TopoDS_Shape,TCollection_AsciiString >::iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_begin(self)

    def end(self) -> "NCollection_DataMap< TCollection_AsciiString,TopoDS_Shape,TCollection_AsciiString >::iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_end(self)

    def cbegin(self) -> "NCollection_DataMap< TCollection_AsciiString,TopoDS_Shape,TCollection_AsciiString >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_cbegin(self)

    def cend(self) -> "NCollection_DataMap< TCollection_AsciiString,TopoDS_Shape,TCollection_AsciiString >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_cend(self)

    def __init__(self, *args):
        this = _StepToTopoDS.new_StepToTopoDS_DataMapOfRINames(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'StepToTopoDS_DataMapOfRINames') -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Exchange(self, theOther)

    def Assign(self, theOther: 'StepToTopoDS_DataMapOfRINames') -> "NCollection_DataMap< TCollection_AsciiString,TopoDS_Shape,TCollection_AsciiString > &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Assign(self, theOther)

    def Set(self, theOther: 'StepToTopoDS_DataMapOfRINames') -> "NCollection_DataMap< TCollection_AsciiString,TopoDS_Shape,TCollection_AsciiString > &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_ReSize(self, N)

    def Bind(self, theKey: 'TCollection_AsciiString', theItem: 'TopoDS_Shape') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'TCollection_AsciiString', theItem: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'TCollection_AsciiString') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_IsBound(self, theKey)

    def UnBind(self, theKey: 'TCollection_AsciiString') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_UnBind(self, theKey)

    def Seek(self, theKey: 'TCollection_AsciiString') -> "TopoDS_Shape const *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Find(self, *args)

    def ChangeSeek(self, theKey: 'TCollection_AsciiString') -> "TopoDS_Shape *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'TCollection_AsciiString') -> "TopoDS_Shape &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Clear(self, *args)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfRINames
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _StepToTopoDS.StepToTopoDS_DataMapOfRINames_Size(self)
StepToTopoDS_DataMapOfRINames_swigregister = _StepToTopoDS.StepToTopoDS_DataMapOfRINames_swigregister
StepToTopoDS_DataMapOfRINames_swigregister(StepToTopoDS_DataMapOfRINames)

class StepToTopoDS_DataMapOfTRI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_DataMapOfTRI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_DataMapOfTRI, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< opencascade::handle< StepShape_TopologicalRepresentationItem >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_begin(self)

    def end(self) -> "NCollection_DataMap< opencascade::handle< StepShape_TopologicalRepresentationItem >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_end(self)

    def cbegin(self) -> "NCollection_DataMap< opencascade::handle< StepShape_TopologicalRepresentationItem >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_cbegin(self)

    def cend(self) -> "NCollection_DataMap< opencascade::handle< StepShape_TopologicalRepresentationItem >,TopoDS_Shape,NCollection_DefaultHasher< opencascade::handle< Standard_Transient > > >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_cend(self)

    def __init__(self, *args):
        this = _StepToTopoDS.new_StepToTopoDS_DataMapOfTRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'StepToTopoDS_DataMapOfTRI') -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Exchange(self, theOther)

    def Assign(self, theOther: 'StepToTopoDS_DataMapOfTRI') -> "NCollection_DataMap< opencascade::handle< StepShape_TopologicalRepresentationItem >,TopoDS_Shape,TColStd_MapTransientHasher > &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Assign(self, theOther)

    def Set(self, theOther: 'StepToTopoDS_DataMapOfTRI') -> "NCollection_DataMap< opencascade::handle< StepShape_TopologicalRepresentationItem >,TopoDS_Shape,TColStd_MapTransientHasher > &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_ReSize(self, N)

    def Bind(self, theKey: 'opencascade::handle< StepShape_TopologicalRepresentationItem > const &', theItem: 'TopoDS_Shape') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'opencascade::handle< StepShape_TopologicalRepresentationItem > const &', theItem: 'TopoDS_Shape') -> "TopoDS_Shape *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'opencascade::handle< StepShape_TopologicalRepresentationItem > const &') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_IsBound(self, theKey)

    def UnBind(self, theKey: 'opencascade::handle< StepShape_TopologicalRepresentationItem > const &') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_UnBind(self, theKey)

    def Seek(self, theKey: 'opencascade::handle< StepShape_TopologicalRepresentationItem > const &') -> "TopoDS_Shape const *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Find(self, *args)

    def ChangeSeek(self, theKey: 'opencascade::handle< StepShape_TopologicalRepresentationItem > const &') -> "TopoDS_Shape *":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'opencascade::handle< StepShape_TopologicalRepresentationItem > const &') -> "TopoDS_Shape &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Shape &":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Clear(self, *args)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_DataMapOfTRI
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _StepToTopoDS.StepToTopoDS_DataMapOfTRI_Size(self)
StepToTopoDS_DataMapOfTRI_swigregister = _StepToTopoDS.StepToTopoDS_DataMapOfTRI_swigregister
StepToTopoDS_DataMapOfTRI_swigregister(StepToTopoDS_DataMapOfTRI)

class StepToTopoDS_PointEdgeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_PointEdgeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_PointEdgeMap, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< StepToTopoDS_PointPair,TopoDS_Edge,StepToTopoDS_PointPairHasher >::iterator":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_begin(self)

    def end(self) -> "NCollection_DataMap< StepToTopoDS_PointPair,TopoDS_Edge,StepToTopoDS_PointPairHasher >::iterator":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_end(self)

    def cbegin(self) -> "NCollection_DataMap< StepToTopoDS_PointPair,TopoDS_Edge,StepToTopoDS_PointPairHasher >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_cbegin(self)

    def cend(self) -> "NCollection_DataMap< StepToTopoDS_PointPair,TopoDS_Edge,StepToTopoDS_PointPairHasher >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_cend(self)

    def __init__(self, *args):
        this = _StepToTopoDS.new_StepToTopoDS_PointEdgeMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'StepToTopoDS_PointEdgeMap') -> "void":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Exchange(self, theOther)

    def Assign(self, theOther: 'StepToTopoDS_PointEdgeMap') -> "NCollection_DataMap< StepToTopoDS_PointPair,TopoDS_Edge,StepToTopoDS_PointPairHasher > &":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Assign(self, theOther)

    def Set(self, theOther: 'StepToTopoDS_PointEdgeMap') -> "NCollection_DataMap< StepToTopoDS_PointPair,TopoDS_Edge,StepToTopoDS_PointPairHasher > &":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_ReSize(self, N)

    def Bind(self, theKey: 'StepToTopoDS_PointPair', theItem: 'TopoDS_Edge') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'StepToTopoDS_PointPair', theItem: 'TopoDS_Edge') -> "TopoDS_Edge *":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'StepToTopoDS_PointPair') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_IsBound(self, theKey)

    def UnBind(self, theKey: 'StepToTopoDS_PointPair') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_UnBind(self, theKey)

    def Seek(self, theKey: 'StepToTopoDS_PointPair') -> "TopoDS_Edge const *":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Find(self, *args)

    def ChangeSeek(self, theKey: 'StepToTopoDS_PointPair') -> "TopoDS_Edge *":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'StepToTopoDS_PointPair') -> "TopoDS_Edge &":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Edge &":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Clear(self, *args)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointEdgeMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _StepToTopoDS.StepToTopoDS_PointEdgeMap_Size(self)
StepToTopoDS_PointEdgeMap_swigregister = _StepToTopoDS.StepToTopoDS_PointEdgeMap_swigregister
StepToTopoDS_PointEdgeMap_swigregister(StepToTopoDS_PointEdgeMap)

class StepToTopoDS_PointVertexMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_PointVertexMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_PointVertexMap, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< opencascade::handle< StepGeom_CartesianPoint >,TopoDS_Vertex,StepToTopoDS_CartesianPointHasher >::iterator":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_begin(self)

    def end(self) -> "NCollection_DataMap< opencascade::handle< StepGeom_CartesianPoint >,TopoDS_Vertex,StepToTopoDS_CartesianPointHasher >::iterator":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_end(self)

    def cbegin(self) -> "NCollection_DataMap< opencascade::handle< StepGeom_CartesianPoint >,TopoDS_Vertex,StepToTopoDS_CartesianPointHasher >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_cbegin(self)

    def cend(self) -> "NCollection_DataMap< opencascade::handle< StepGeom_CartesianPoint >,TopoDS_Vertex,StepToTopoDS_CartesianPointHasher >::const_iterator":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_cend(self)

    def __init__(self, *args):
        this = _StepToTopoDS.new_StepToTopoDS_PointVertexMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'StepToTopoDS_PointVertexMap') -> "void":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Exchange(self, theOther)

    def Assign(self, theOther: 'StepToTopoDS_PointVertexMap') -> "NCollection_DataMap< opencascade::handle< StepGeom_CartesianPoint >,TopoDS_Vertex,StepToTopoDS_CartesianPointHasher > &":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Assign(self, theOther)

    def Set(self, theOther: 'StepToTopoDS_PointVertexMap') -> "NCollection_DataMap< opencascade::handle< StepGeom_CartesianPoint >,TopoDS_Vertex,StepToTopoDS_CartesianPointHasher > &":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_ReSize(self, N)

    def Bind(self, theKey: 'opencascade::handle< StepGeom_CartesianPoint > const &', theItem: 'TopoDS_Vertex') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'opencascade::handle< StepGeom_CartesianPoint > const &', theItem: 'TopoDS_Vertex') -> "TopoDS_Vertex *":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'opencascade::handle< StepGeom_CartesianPoint > const &') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_IsBound(self, theKey)

    def UnBind(self, theKey: 'opencascade::handle< StepGeom_CartesianPoint > const &') -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_UnBind(self, theKey)

    def Seek(self, theKey: 'opencascade::handle< StepGeom_CartesianPoint > const &') -> "TopoDS_Vertex const *":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Find(self, *args)

    def ChangeSeek(self, theKey: 'opencascade::handle< StepGeom_CartesianPoint > const &') -> "TopoDS_Vertex *":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'opencascade::handle< StepGeom_CartesianPoint > const &') -> "TopoDS_Vertex &":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_ChangeFind(self, theKey)

    def __call__(self, *args) -> "TopoDS_Vertex &":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Clear(self, *args)
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointVertexMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _StepToTopoDS.StepToTopoDS_PointVertexMap_Size(self)
StepToTopoDS_PointVertexMap_swigregister = _StepToTopoDS.StepToTopoDS_PointVertexMap_swigregister
StepToTopoDS_PointVertexMap_swigregister(StepToTopoDS_PointVertexMap)

class steptotopods(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, steptotopods, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, steptotopods, name)
    __repr__ = _swig_repr

    def DecodeBuilderError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        Error: StepToTopoDS_BuilderError

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepToTopoDS.steptotopods_DecodeBuilderError(*args)

    DecodeBuilderError = staticmethod(DecodeBuilderError)

    def DecodeEdgeError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        Error: StepToTopoDS_TranslateEdgeError

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepToTopoDS.steptotopods_DecodeEdgeError(*args)

    DecodeEdgeError = staticmethod(DecodeEdgeError)

    def DecodeFaceError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        Error: StepToTopoDS_TranslateFaceError

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepToTopoDS.steptotopods_DecodeFaceError(*args)

    DecodeFaceError = staticmethod(DecodeFaceError)

    def DecodeGeometricToolError(*args) -> "char const *":
        """
        No available documentation.

        Parameters
        ----------
        Error: StepToTopoDS_GeometricToolError

        Returns
        -------
        char *

        """
        return _StepToTopoDS.steptotopods_DecodeGeometricToolError(*args)

    DecodeGeometricToolError = staticmethod(DecodeGeometricToolError)

    def DecodePolyLoopError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        Error: StepToTopoDS_TranslatePolyLoopError

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepToTopoDS.steptotopods_DecodePolyLoopError(*args)

    DecodePolyLoopError = staticmethod(DecodePolyLoopError)

    def DecodeShellError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        Error: StepToTopoDS_TranslateShellError

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepToTopoDS.steptotopods_DecodeShellError(*args)

    DecodeShellError = staticmethod(DecodeShellError)

    def DecodeVertexError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        Error: StepToTopoDS_TranslateVertexError

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepToTopoDS.steptotopods_DecodeVertexError(*args)

    DecodeVertexError = staticmethod(DecodeVertexError)

    def DecodeVertexLoopError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        Error: StepToTopoDS_TranslateVertexLoopError

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepToTopoDS.steptotopods_DecodeVertexLoopError(*args)

    DecodeVertexLoopError = staticmethod(DecodeVertexLoopError)

    __repr__ = _dumps_object


    def __init__(self):
        this = _StepToTopoDS.new_steptotopods()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepToTopoDS.delete_steptotopods
    __del__ = lambda self: None
steptotopods_swigregister = _StepToTopoDS.steptotopods_swigregister
steptotopods_swigregister(steptotopods)

def steptotopods_DecodeBuilderError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    No available documentation.

    Parameters
    ----------
    Error: StepToTopoDS_BuilderError

    Returns
    -------
    opencascade::handle<TCollection_HAsciiString>

    """
    return _StepToTopoDS.steptotopods_DecodeBuilderError(*args)

def steptotopods_DecodeEdgeError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    No available documentation.

    Parameters
    ----------
    Error: StepToTopoDS_TranslateEdgeError

    Returns
    -------
    opencascade::handle<TCollection_HAsciiString>

    """
    return _StepToTopoDS.steptotopods_DecodeEdgeError(*args)

def steptotopods_DecodeFaceError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    No available documentation.

    Parameters
    ----------
    Error: StepToTopoDS_TranslateFaceError

    Returns
    -------
    opencascade::handle<TCollection_HAsciiString>

    """
    return _StepToTopoDS.steptotopods_DecodeFaceError(*args)

def steptotopods_DecodeGeometricToolError(*args) -> "char const *":
    """
    No available documentation.

    Parameters
    ----------
    Error: StepToTopoDS_GeometricToolError

    Returns
    -------
    char *

    """
    return _StepToTopoDS.steptotopods_DecodeGeometricToolError(*args)

def steptotopods_DecodePolyLoopError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    No available documentation.

    Parameters
    ----------
    Error: StepToTopoDS_TranslatePolyLoopError

    Returns
    -------
    opencascade::handle<TCollection_HAsciiString>

    """
    return _StepToTopoDS.steptotopods_DecodePolyLoopError(*args)

def steptotopods_DecodeShellError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    No available documentation.

    Parameters
    ----------
    Error: StepToTopoDS_TranslateShellError

    Returns
    -------
    opencascade::handle<TCollection_HAsciiString>

    """
    return _StepToTopoDS.steptotopods_DecodeShellError(*args)

def steptotopods_DecodeVertexError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    No available documentation.

    Parameters
    ----------
    Error: StepToTopoDS_TranslateVertexError

    Returns
    -------
    opencascade::handle<TCollection_HAsciiString>

    """
    return _StepToTopoDS.steptotopods_DecodeVertexError(*args)

def steptotopods_DecodeVertexLoopError(*args) -> "opencascade::handle< TCollection_HAsciiString >":
    """
    No available documentation.

    Parameters
    ----------
    Error: StepToTopoDS_TranslateVertexLoopError

    Returns
    -------
    opencascade::handle<TCollection_HAsciiString>

    """
    return _StepToTopoDS.steptotopods_DecodeVertexLoopError(*args)

class StepToTopoDS_CartesianPointHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_CartesianPointHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_CartesianPointHasher, name)
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        Computes a hash code for the cartesian point, in the range [1, theupperbound] @param thecartesianpoint the cartesian point which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

        Parameters
        ----------
        theCartesianPoint: Handle ( StepGeom_CartesianPoint )
        theUpperBound: int

        Returns
        -------
        int

        """
        return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        Returns true when the two cartesianpoint are the same.

        Parameters
        ----------
        K1: StepGeom_CartesianPoint
        K2: StepGeom_CartesianPoint

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        this = _StepToTopoDS.new_StepToTopoDS_CartesianPointHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_CartesianPointHasher
    __del__ = lambda self: None
StepToTopoDS_CartesianPointHasher_swigregister = _StepToTopoDS.StepToTopoDS_CartesianPointHasher_swigregister
StepToTopoDS_CartesianPointHasher_swigregister(StepToTopoDS_CartesianPointHasher)

def StepToTopoDS_CartesianPointHasher_HashCode(*args) -> "Standard_Integer":
    """
    Computes a hash code for the cartesian point, in the range [1, theupperbound] @param thecartesianpoint the cartesian point which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

    Parameters
    ----------
    theCartesianPoint: Handle ( StepGeom_CartesianPoint )
    theUpperBound: int

    Returns
    -------
    int

    """
    return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_HashCode(*args)

def StepToTopoDS_CartesianPointHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    Returns true when the two cartesianpoint are the same.

    Parameters
    ----------
    K1: StepGeom_CartesianPoint
    K2: StepGeom_CartesianPoint

    Returns
    -------
    bool

    """
    return _StepToTopoDS.StepToTopoDS_CartesianPointHasher_IsEqual(*args)

class StepToTopoDS_GeometricTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_GeometricTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_GeometricTool, name)
    __repr__ = _swig_repr

    def IsLikeSeam(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        SC: StepGeom_SurfaceCurve
        S: StepGeom_Surface
        E: StepShape_Edge
        EL: StepShape_EdgeLoop

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_IsLikeSeam(*args)

    IsLikeSeam = staticmethod(IsLikeSeam)

    def IsSeamCurve(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        SC: StepGeom_SurfaceCurve
        S: StepGeom_Surface
        E: StepShape_Edge
        EL: StepShape_EdgeLoop

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_IsSeamCurve(*args)

    IsSeamCurve = staticmethod(IsSeamCurve)

    def PCurve(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        SC: StepGeom_SurfaceCurve
        S: StepGeom_Surface
        PC: StepGeom_Pcurve
        last: int,optional
        	default value is 0

        Returns
        -------
        int

        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_PCurve(*args)

    PCurve = staticmethod(PCurve)

    def UpdateParam3d(*args) -> "Standard_Real &, Standard_Real &":
        """
        No available documentation.

        Parameters
        ----------
        C: Geom_Curve
        preci: float

        Returns
        -------
        w1: float
        w2: float

        """
        return _StepToTopoDS.StepToTopoDS_GeometricTool_UpdateParam3d(*args)

    UpdateParam3d = staticmethod(UpdateParam3d)

    __repr__ = _dumps_object


    def __init__(self):
        this = _StepToTopoDS.new_StepToTopoDS_GeometricTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_GeometricTool
    __del__ = lambda self: None
StepToTopoDS_GeometricTool_swigregister = _StepToTopoDS.StepToTopoDS_GeometricTool_swigregister
StepToTopoDS_GeometricTool_swigregister(StepToTopoDS_GeometricTool)

def StepToTopoDS_GeometricTool_IsLikeSeam(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    SC: StepGeom_SurfaceCurve
    S: StepGeom_Surface
    E: StepShape_Edge
    EL: StepShape_EdgeLoop

    Returns
    -------
    bool

    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_IsLikeSeam(*args)

def StepToTopoDS_GeometricTool_IsSeamCurve(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    SC: StepGeom_SurfaceCurve
    S: StepGeom_Surface
    E: StepShape_Edge
    EL: StepShape_EdgeLoop

    Returns
    -------
    bool

    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_IsSeamCurve(*args)

def StepToTopoDS_GeometricTool_PCurve(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    SC: StepGeom_SurfaceCurve
    S: StepGeom_Surface
    PC: StepGeom_Pcurve
    last: int,optional
    	default value is 0

    Returns
    -------
    int

    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_PCurve(*args)

def StepToTopoDS_GeometricTool_UpdateParam3d(*args) -> "Standard_Real &, Standard_Real &":
    """
    No available documentation.

    Parameters
    ----------
    C: Geom_Curve
    preci: float

    Returns
    -------
    w1: float
    w2: float

    """
    return _StepToTopoDS.StepToTopoDS_GeometricTool_UpdateParam3d(*args)

class StepToTopoDS_NMTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_NMTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_NMTool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        MapOfRI: StepToTopoDS_DataMapOfRI
        MapOfRINames: StepToTopoDS_DataMapOfRINames

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_NMTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Bind(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        RI: StepRepr_RepresentationItem
        S: TopoDS_Shape

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        RIName: TCollection_AsciiString
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Bind(self, *args)


    def CleanUp(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_CleanUp(self, *args)


    def Find(self, *args) -> "TopoDS_Shape const":
        """
        No available documentation.

        Parameters
        ----------
        RI: StepRepr_RepresentationItem

        Returns
        -------
        TopoDS_Shape

        No available documentation.

        Parameters
        ----------
        RIName: TCollection_AsciiString

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Find(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        MapOfRI: StepToTopoDS_DataMapOfRI
        MapOfRINames: StepToTopoDS_DataMapOfRINames

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_Init(self, *args)


    def IsActive(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsActive(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        RI: StepRepr_RepresentationItem

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        RIName: TCollection_AsciiString

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsBound(self, *args)


    def IsIDEASCase(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsIDEASCase(self, *args)


    def IsPureNMShell(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Shell: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsPureNMShell(self, *args)


    def IsSuspectedAsClosing(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        BaseShell: TopoDS_Shape
        SuspectedShell: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_IsSuspectedAsClosing(self, *args)


    def RegisterNMEdge(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Edge: TopoDS_Shape

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_RegisterNMEdge(self, *args)


    def SetActive(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        isActive: bool

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_SetActive(self, *args)


    def SetIDEASCase(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        IDEASCase: bool

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_NMTool_SetIDEASCase(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_NMTool
    __del__ = lambda self: None
StepToTopoDS_NMTool_swigregister = _StepToTopoDS.StepToTopoDS_NMTool_swigregister
StepToTopoDS_NMTool_swigregister(StepToTopoDS_NMTool)

class StepToTopoDS_PointPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_PointPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_PointPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P1: StepGeom_CartesianPoint
        P2: StepGeom_CartesianPoint

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_PointPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointPair
    __del__ = lambda self: None
StepToTopoDS_PointPair_swigregister = _StepToTopoDS.StepToTopoDS_PointPair_swigregister
StepToTopoDS_PointPair_swigregister(StepToTopoDS_PointPair)

class StepToTopoDS_PointPairHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_PointPairHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_PointPairHasher, name)
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        Computes a hash code for the point pair, in the range [1, theupperbound] @param thepointpair the point pair which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

        Parameters
        ----------
        thePointPair: StepToTopoDS_PointPair
        theUpperBound: int

        Returns
        -------
        int

        """
        return _StepToTopoDS.StepToTopoDS_PointPairHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        Returns true when the two pointpair are the same.

        Parameters
        ----------
        K1: StepToTopoDS_PointPair
        K2: StepToTopoDS_PointPair

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_PointPairHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        this = _StepToTopoDS.new_StepToTopoDS_PointPairHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_PointPairHasher
    __del__ = lambda self: None
StepToTopoDS_PointPairHasher_swigregister = _StepToTopoDS.StepToTopoDS_PointPairHasher_swigregister
StepToTopoDS_PointPairHasher_swigregister(StepToTopoDS_PointPairHasher)

def StepToTopoDS_PointPairHasher_HashCode(*args) -> "Standard_Integer":
    """
    Computes a hash code for the point pair, in the range [1, theupperbound] @param thepointpair the point pair which hash code is to be computed @param theupperbound the upper bound of the range a computing hash code must be within returns a computed hash code, in the range [1, theupperbound].

    Parameters
    ----------
    thePointPair: StepToTopoDS_PointPair
    theUpperBound: int

    Returns
    -------
    int

    """
    return _StepToTopoDS.StepToTopoDS_PointPairHasher_HashCode(*args)

def StepToTopoDS_PointPairHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    Returns true when the two pointpair are the same.

    Parameters
    ----------
    K1: StepToTopoDS_PointPair
    K2: StepToTopoDS_PointPair

    Returns
    -------
    bool

    """
    return _StepToTopoDS.StepToTopoDS_PointPairHasher_IsEqual(*args)

class StepToTopoDS_Root(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_Root, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_Root, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_Root_IsDone(self, *args)


    def MaxTol(self, *args) -> "Standard_Real":
        """
        Returns the value of 'maxtol'.

        Returns
        -------
        float

        """
        return _StepToTopoDS.StepToTopoDS_Root_MaxTol(self, *args)


    def Precision(self, *args) -> "Standard_Real":
        """
        Returns the value of 'myprecision'.

        Returns
        -------
        float

        """
        return _StepToTopoDS.StepToTopoDS_Root_Precision(self, *args)


    def SetMaxTol(self, *args) -> "void":
        """
        Sets the value of maxtol.

        Parameters
        ----------
        maxpreci: float

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_Root_SetMaxTol(self, *args)


    def SetPrecision(self, *args) -> "void":
        """
        Sets the value of 'myprecision'.

        Parameters
        ----------
        preci: float

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_Root_SetPrecision(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_Root
    __del__ = lambda self: None
StepToTopoDS_Root_swigregister = _StepToTopoDS.StepToTopoDS_Root_swigregister
StepToTopoDS_Root_swigregister(StepToTopoDS_Root)

class StepToTopoDS_MakeTransformed(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_MakeTransformed, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_MakeTransformed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_MakeTransformed(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Compute(self, *args) -> "Standard_Boolean":
        """
        Computes a transformation to pass from an origin placement to a target placement. returns true when done if not done, the transformation will by identity.

        Parameters
        ----------
        Origin: StepGeom_Axis2Placement3d
        Target: StepGeom_Axis2Placement3d

        Returns
        -------
        bool

        Computes a transformation defined by an operator 3d.

        Parameters
        ----------
        Operator: StepGeom_CartesianTransformationOperator3d

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Compute(self, *args)


    def Transform(self, *args) -> "Standard_Boolean":
        """
        Applies the computed transformation to a shape returns false if the transformation is identity.

        Parameters
        ----------
        shape: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Transform(self, *args)


    def Transformation(self, *args) -> "gp_Trsf const":
        """
        Returns the computed transformation (identity if not yet or if failed).

        Returns
        -------
        gp_Trsf

        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_Transformation(self, *args)


    def TranslateMappedItem(self, *args) -> "TopoDS_Shape":
        """
        Translates a mappeditem. more precisely a mappeditem has a mappingsource and a mappingtarget mappingsource has a mappedrepresentation and a mappingorigin mappedrepresentation is the basic item to be instanced mappingorigin is the starting placement mappingtarget is the final placement //! hence, the transformation from mappingorigin and mappingtarget is computed, the mappedrepr. is converted to a shape, then transformed as an instance of this shape.

        Parameters
        ----------
        mapit: StepRepr_MappedItem
        TP: Transfer_TransientProcess
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_MakeTransformed_TranslateMappedItem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_MakeTransformed
    __del__ = lambda self: None
StepToTopoDS_MakeTransformed_swigregister = _StepToTopoDS.StepToTopoDS_MakeTransformed_swigregister
StepToTopoDS_MakeTransformed_swigregister(StepToTopoDS_MakeTransformed)

class StepToTopoDS_TranslateCompositeCurve(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslateCompositeCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslateCompositeCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        Translates standalone composite_curve.

        Parameters
        ----------
        CC: StepGeom_CompositeCurve
        TP: Transfer_TransientProcess

        Returns
        -------
        None

        Translates composite_curve lying on surface.

        Parameters
        ----------
        CC: StepGeom_CompositeCurve
        TP: Transfer_TransientProcess
        S: StepGeom_Surface
        Surf: Geom_Surface

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslateCompositeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "Standard_Boolean":
        """
        Translates standalone composite_curve.

        Parameters
        ----------
        CC: StepGeom_CompositeCurve
        TP: Transfer_TransientProcess

        Returns
        -------
        bool

        Translates composite_curve lying on surface.

        Parameters
        ----------
        CC: StepGeom_CompositeCurve
        TP: Transfer_TransientProcess
        S: StepGeom_Surface
        Surf: Geom_Surface

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Init(self, *args)


    def IsInfiniteSegment(self, *args) -> "Standard_Boolean":
        """
        Returns true if composite_curve contains a segment with infinite parameters.

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_IsInfiniteSegment(self, *args)


    def Value(self, *args) -> "TopoDS_Wire const":
        """
        Returns result of last translation or null wire if failed.

        Returns
        -------
        TopoDS_Wire

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateCompositeCurve
    __del__ = lambda self: None
StepToTopoDS_TranslateCompositeCurve_swigregister = _StepToTopoDS.StepToTopoDS_TranslateCompositeCurve_swigregister
StepToTopoDS_TranslateCompositeCurve_swigregister(StepToTopoDS_TranslateCompositeCurve)

class StepToTopoDS_TranslateCurveBoundedSurface(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslateCurveBoundedSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslateCurveBoundedSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Create empty tool.

        Returns
        -------
        None

        Translate surface.

        Parameters
        ----------
        CBS: StepGeom_CurveBoundedSurface
        TP: Transfer_TransientProcess

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslateCurveBoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "Standard_Boolean":
        """
        Translate surface.

        Parameters
        ----------
        CBS: StepGeom_CurveBoundedSurface
        TP: Transfer_TransientProcess

        Returns
        -------
        bool

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Init(self, *args)


    def Value(self, *args) -> "TopoDS_Face const":
        """
        Returns result of last translation or null wire if failed.

        Returns
        -------
        TopoDS_Face

        """
        return _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateCurveBoundedSurface
    __del__ = lambda self: None
StepToTopoDS_TranslateCurveBoundedSurface_swigregister = _StepToTopoDS.StepToTopoDS_TranslateCurveBoundedSurface_swigregister
StepToTopoDS_TranslateCurveBoundedSurface_swigregister(StepToTopoDS_TranslateCurveBoundedSurface)

class StepToTopoDS_TranslateEdge(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslateEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslateEdge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        E: StepShape_Edge
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslateEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Error(self, *args) -> "StepToTopoDS_TranslateEdgeError":
        """
        No available documentation.

        Returns
        -------
        StepToTopoDS_TranslateEdgeError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        E: StepShape_Edge
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Init(self, *args)


    def MakeFromCurve3D(self, *args) -> "void":
        """
        Warning! c3d is assumed to be a curve 3d ... other cases to checked before calling this.

        Parameters
        ----------
        C3D: StepGeom_Curve
        EC: StepShape_EdgeCurve
        Vend: StepShape_Vertex
        preci: float
        E: TopoDS_Edge
        V1: TopoDS_Vertex
        V2: TopoDS_Vertex
        T: StepToTopoDS_Tool

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_MakeFromCurve3D(self, *args)


    def MakePCurve(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        No available documentation.

        Parameters
        ----------
        PCU: StepGeom_Pcurve
        ConvSurf: Geom_Surface

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_MakePCurve(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdge_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateEdge
    __del__ = lambda self: None
StepToTopoDS_TranslateEdge_swigregister = _StepToTopoDS.StepToTopoDS_TranslateEdge_swigregister
StepToTopoDS_TranslateEdge_swigregister(StepToTopoDS_TranslateEdge)

class StepToTopoDS_TranslateEdgeLoop(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslateEdgeLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslateEdgeLoop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        FB: StepShape_FaceBound
        F: TopoDS_Face
        S: Geom_Surface
        SS: StepGeom_Surface
        ss: bool
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslateEdgeLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Error(self, *args) -> "StepToTopoDS_TranslateEdgeLoopError":
        """
        No available documentation.

        Returns
        -------
        StepToTopoDS_TranslateEdgeLoopError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        FB: StepShape_FaceBound
        F: TopoDS_Face
        S: Geom_Surface
        SS: StepGeom_Surface
        ss: bool
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Init(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateEdgeLoop
    __del__ = lambda self: None
StepToTopoDS_TranslateEdgeLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslateEdgeLoop_swigregister
StepToTopoDS_TranslateEdgeLoop_swigregister(StepToTopoDS_TranslateEdgeLoop)

class StepToTopoDS_TranslateFace(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslateFace, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslateFace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        FS: StepShape_FaceSurface
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslateFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Error(self, *args) -> "StepToTopoDS_TranslateFaceError":
        """
        No available documentation.

        Returns
        -------
        StepToTopoDS_TranslateFaceError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        FS: StepShape_FaceSurface
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Init(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateFace_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateFace
    __del__ = lambda self: None
StepToTopoDS_TranslateFace_swigregister = _StepToTopoDS.StepToTopoDS_TranslateFace_swigregister
StepToTopoDS_TranslateFace_swigregister(StepToTopoDS_TranslateFace)

class StepToTopoDS_TranslatePolyLoop(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslatePolyLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslatePolyLoop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        PL: StepShape_PolyLoop
        T: StepToTopoDS_Tool
        S: Geom_Surface
        F: TopoDS_Face

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslatePolyLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Error(self, *args) -> "StepToTopoDS_TranslatePolyLoopError":
        """
        No available documentation.

        Returns
        -------
        StepToTopoDS_TranslatePolyLoopError

        """
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        PL: StepShape_PolyLoop
        T: StepToTopoDS_Tool
        S: Geom_Surface
        F: TopoDS_Face

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Init(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslatePolyLoop
    __del__ = lambda self: None
StepToTopoDS_TranslatePolyLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslatePolyLoop_swigregister
StepToTopoDS_TranslatePolyLoop_swigregister(StepToTopoDS_TranslatePolyLoop)

class StepToTopoDS_TranslateShell(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslateShell, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslateShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslateShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Error(self, *args) -> "StepToTopoDS_TranslateShellError":
        """
        No available documentation.

        Returns
        -------
        StepToTopoDS_TranslateShellError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        CFS: StepShape_ConnectedFaceSet
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Init(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateShell_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateShell
    __del__ = lambda self: None
StepToTopoDS_TranslateShell_swigregister = _StepToTopoDS.StepToTopoDS_TranslateShell_swigregister
StepToTopoDS_TranslateShell_swigregister(StepToTopoDS_TranslateShell)

class StepToTopoDS_TranslateVertex(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslateVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslateVertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        V: StepShape_Vertex
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslateVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Error(self, *args) -> "StepToTopoDS_TranslateVertexError":
        """
        No available documentation.

        Returns
        -------
        StepToTopoDS_TranslateVertexError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        V: StepShape_Vertex
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Init(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertex_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateVertex
    __del__ = lambda self: None
StepToTopoDS_TranslateVertex_swigregister = _StepToTopoDS.StepToTopoDS_TranslateVertex_swigregister
StepToTopoDS_TranslateVertex_swigregister(StepToTopoDS_TranslateVertex)

class StepToTopoDS_TranslateVertexLoop(StepToTopoDS_Root):
    __swig_setmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepToTopoDS_TranslateVertexLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [StepToTopoDS_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepToTopoDS_TranslateVertexLoop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        VL: StepShape_VertexLoop
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        this = _StepToTopoDS.new_StepToTopoDS_TranslateVertexLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Error(self, *args) -> "StepToTopoDS_TranslateVertexLoopError":
        """
        No available documentation.

        Returns
        -------
        StepToTopoDS_TranslateVertexLoopError

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Error(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        VL: StepShape_VertexLoop
        T: StepToTopoDS_Tool
        NMTool: StepToTopoDS_NMTool

        Returns
        -------
        None

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Init(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepToTopoDS.delete_StepToTopoDS_TranslateVertexLoop
    __del__ = lambda self: None
StepToTopoDS_TranslateVertexLoop_swigregister = _StepToTopoDS.StepToTopoDS_TranslateVertexLoop_swigregister
StepToTopoDS_TranslateVertexLoop_swigregister(StepToTopoDS_TranslateVertexLoop)


@classnotwrapped
class StepToTopoDS_Builder:
	pass

@classnotwrapped
class StepToTopoDS_PointVertexMap:
	pass




# This file is compatible with both classic and new-style classes.


