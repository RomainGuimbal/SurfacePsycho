# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TColGeom module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_tcolgeom.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TColGeom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TColGeom')
    _TColGeom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TColGeom', [dirname(__file__)])
        except ImportError:
            import _TColGeom
            return _TColGeom
        try:
            _mod = imp.load_module('_TColGeom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TColGeom = swig_import_helper()
    del swig_import_helper
else:
    import _TColGeom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColGeom.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TColGeom.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TColGeom.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TColGeom.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TColGeom.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TColGeom.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TColGeom.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TColGeom.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TColGeom.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TColGeom.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TColGeom.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TColGeom.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TColGeom.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TColGeom.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TColGeom.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TColGeom.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TColGeom.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TColGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TColGeom.process_exception(error, method_name, class_name)
process_exception = _TColGeom.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_TColGeom_HArray1OfSurface_Create() -> "opencascade::handle< TColGeom_HArray1OfSurface >":
    return _TColGeom.Handle_TColGeom_HArray1OfSurface_Create()
Handle_TColGeom_HArray1OfSurface_Create = _TColGeom.Handle_TColGeom_HArray1OfSurface_Create

def Handle_TColGeom_HArray1OfSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColGeom_HArray1OfSurface >":
    return _TColGeom.Handle_TColGeom_HArray1OfSurface_DownCast(t)
Handle_TColGeom_HArray1OfSurface_DownCast = _TColGeom.Handle_TColGeom_HArray1OfSurface_DownCast

def Handle_TColGeom_HArray1OfSurface_IsNull(t: 'opencascade::handle< TColGeom_HArray1OfSurface > const &') -> "bool":
    return _TColGeom.Handle_TColGeom_HArray1OfSurface_IsNull(t)
Handle_TColGeom_HArray1OfSurface_IsNull = _TColGeom.Handle_TColGeom_HArray1OfSurface_IsNull

def Handle_TColGeom_HArray1OfBezierCurve_Create() -> "opencascade::handle< TColGeom_HArray1OfBezierCurve >":
    return _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_Create()
Handle_TColGeom_HArray1OfBezierCurve_Create = _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_Create

def Handle_TColGeom_HArray1OfBezierCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColGeom_HArray1OfBezierCurve >":
    return _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_DownCast(t)
Handle_TColGeom_HArray1OfBezierCurve_DownCast = _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_DownCast

def Handle_TColGeom_HArray1OfBezierCurve_IsNull(t: 'opencascade::handle< TColGeom_HArray1OfBezierCurve > const &') -> "bool":
    return _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_IsNull(t)
Handle_TColGeom_HArray1OfBezierCurve_IsNull = _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_IsNull

def Handle_TColGeom_HArray1OfBSplineCurve_Create() -> "opencascade::handle< TColGeom_HArray1OfBSplineCurve >":
    return _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_Create()
Handle_TColGeom_HArray1OfBSplineCurve_Create = _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_Create

def Handle_TColGeom_HArray1OfBSplineCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColGeom_HArray1OfBSplineCurve >":
    return _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_DownCast(t)
Handle_TColGeom_HArray1OfBSplineCurve_DownCast = _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_DownCast

def Handle_TColGeom_HArray1OfBSplineCurve_IsNull(t: 'opencascade::handle< TColGeom_HArray1OfBSplineCurve > const &') -> "bool":
    return _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_IsNull(t)
Handle_TColGeom_HArray1OfBSplineCurve_IsNull = _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_IsNull

def Handle_TColGeom_HArray1OfCurve_Create() -> "opencascade::handle< TColGeom_HArray1OfCurve >":
    return _TColGeom.Handle_TColGeom_HArray1OfCurve_Create()
Handle_TColGeom_HArray1OfCurve_Create = _TColGeom.Handle_TColGeom_HArray1OfCurve_Create

def Handle_TColGeom_HArray1OfCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColGeom_HArray1OfCurve >":
    return _TColGeom.Handle_TColGeom_HArray1OfCurve_DownCast(t)
Handle_TColGeom_HArray1OfCurve_DownCast = _TColGeom.Handle_TColGeom_HArray1OfCurve_DownCast

def Handle_TColGeom_HArray1OfCurve_IsNull(t: 'opencascade::handle< TColGeom_HArray1OfCurve > const &') -> "bool":
    return _TColGeom.Handle_TColGeom_HArray1OfCurve_IsNull(t)
Handle_TColGeom_HArray1OfCurve_IsNull = _TColGeom.Handle_TColGeom_HArray1OfCurve_IsNull

def Handle_TColGeom_HArray2OfSurface_Create() -> "opencascade::handle< TColGeom_HArray2OfSurface >":
    return _TColGeom.Handle_TColGeom_HArray2OfSurface_Create()
Handle_TColGeom_HArray2OfSurface_Create = _TColGeom.Handle_TColGeom_HArray2OfSurface_Create

def Handle_TColGeom_HArray2OfSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColGeom_HArray2OfSurface >":
    return _TColGeom.Handle_TColGeom_HArray2OfSurface_DownCast(t)
Handle_TColGeom_HArray2OfSurface_DownCast = _TColGeom.Handle_TColGeom_HArray2OfSurface_DownCast

def Handle_TColGeom_HArray2OfSurface_IsNull(t: 'opencascade::handle< TColGeom_HArray2OfSurface > const &') -> "bool":
    return _TColGeom.Handle_TColGeom_HArray2OfSurface_IsNull(t)
Handle_TColGeom_HArray2OfSurface_IsNull = _TColGeom.Handle_TColGeom_HArray2OfSurface_IsNull

def Handle_TColGeom_HSequenceOfBoundedCurve_Create() -> "opencascade::handle< TColGeom_HSequenceOfBoundedCurve >":
    return _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_Create()
Handle_TColGeom_HSequenceOfBoundedCurve_Create = _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_Create

def Handle_TColGeom_HSequenceOfBoundedCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColGeom_HSequenceOfBoundedCurve >":
    return _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_DownCast(t)
Handle_TColGeom_HSequenceOfBoundedCurve_DownCast = _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_DownCast

def Handle_TColGeom_HSequenceOfBoundedCurve_IsNull(t: 'opencascade::handle< TColGeom_HSequenceOfBoundedCurve > const &') -> "bool":
    return _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_IsNull(t)
Handle_TColGeom_HSequenceOfBoundedCurve_IsNull = _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_IsNull

def Handle_TColGeom_HSequenceOfCurve_Create() -> "opencascade::handle< TColGeom_HSequenceOfCurve >":
    return _TColGeom.Handle_TColGeom_HSequenceOfCurve_Create()
Handle_TColGeom_HSequenceOfCurve_Create = _TColGeom.Handle_TColGeom_HSequenceOfCurve_Create

def Handle_TColGeom_HSequenceOfCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< TColGeom_HSequenceOfCurve >":
    return _TColGeom.Handle_TColGeom_HSequenceOfCurve_DownCast(t)
Handle_TColGeom_HSequenceOfCurve_DownCast = _TColGeom.Handle_TColGeom_HSequenceOfCurve_DownCast

def Handle_TColGeom_HSequenceOfCurve_IsNull(t: 'opencascade::handle< TColGeom_HSequenceOfCurve > const &') -> "bool":
    return _TColGeom.Handle_TColGeom_HSequenceOfCurve_IsNull(t)
Handle_TColGeom_HSequenceOfCurve_IsNull = _TColGeom.Handle_TColGeom_HSequenceOfCurve_IsNull
class TColGeom_Array1OfBSplineCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_Array1OfBSplineCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_Array1OfBSplineCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Geom_BSplineCurve > >::iterator":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Geom_BSplineCurve > >::iterator":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Geom_BSplineCurve > >::const_iterator":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Geom_BSplineCurve > >::const_iterator":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_cend(self)

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_Array1OfBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Geom_BSplineCurve > const &') -> "void":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_IsAllocated(self)

    def Assign(self, theOther: 'TColGeom_Array1OfBSplineCurve') -> "NCollection_Array1< opencascade::handle< Geom_BSplineCurve > > &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Assign(self, theOther)

    def Move(self, theOther: 'TColGeom_Array1OfBSplineCurve') -> "NCollection_Array1< opencascade::handle< Geom_BSplineCurve > > &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Geom_BSplineCurve > > &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Set(self, *args)

    def First(self) -> "opencascade::handle< Geom_BSplineCurve > const &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Geom_BSplineCurve > &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Geom_BSplineCurve > const &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Geom_BSplineCurve > &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_BSplineCurve > const &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_BSplineCurve > &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Geom_BSplineCurve > &":
        return _TColGeom.TColGeom_Array1OfBSplineCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_BSplineCurve > const &') -> "void":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColGeom.delete_TColGeom_Array1OfBSplineCurve
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColGeom_Array1OfBSplineCurve_swigregister = _TColGeom.TColGeom_Array1OfBSplineCurve_swigregister
TColGeom_Array1OfBSplineCurve_swigregister(TColGeom_Array1OfBSplineCurve)

class TColGeom_Array1OfBezierCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_Array1OfBezierCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_Array1OfBezierCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Geom_BezierCurve > >::iterator":
        return _TColGeom.TColGeom_Array1OfBezierCurve_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Geom_BezierCurve > >::iterator":
        return _TColGeom.TColGeom_Array1OfBezierCurve_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Geom_BezierCurve > >::const_iterator":
        return _TColGeom.TColGeom_Array1OfBezierCurve_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Geom_BezierCurve > >::const_iterator":
        return _TColGeom.TColGeom_Array1OfBezierCurve_cend(self)

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_Array1OfBezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Geom_BezierCurve > const &') -> "void":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfBezierCurve_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfBezierCurve_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfBezierCurve_IsAllocated(self)

    def Assign(self, theOther: 'TColGeom_Array1OfBezierCurve') -> "NCollection_Array1< opencascade::handle< Geom_BezierCurve > > &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Assign(self, theOther)

    def Move(self, theOther: 'TColGeom_Array1OfBezierCurve') -> "NCollection_Array1< opencascade::handle< Geom_BezierCurve > > &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Geom_BezierCurve > > &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Set(self, *args)

    def First(self) -> "opencascade::handle< Geom_BezierCurve > const &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Geom_BezierCurve > &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Geom_BezierCurve > const &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Geom_BezierCurve > &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_BezierCurve > const &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_BezierCurve > &":
        return _TColGeom.TColGeom_Array1OfBezierCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Geom_BezierCurve > &":
        return _TColGeom.TColGeom_Array1OfBezierCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_BezierCurve > const &') -> "void":
        return _TColGeom.TColGeom_Array1OfBezierCurve_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColGeom.TColGeom_Array1OfBezierCurve_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColGeom.delete_TColGeom_Array1OfBezierCurve
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColGeom_Array1OfBezierCurve_swigregister = _TColGeom.TColGeom_Array1OfBezierCurve_swigregister
TColGeom_Array1OfBezierCurve_swigregister(TColGeom_Array1OfBezierCurve)

class TColGeom_Array1OfCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_Array1OfCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_Array1OfCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Geom_Curve > >::iterator":
        return _TColGeom.TColGeom_Array1OfCurve_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Geom_Curve > >::iterator":
        return _TColGeom.TColGeom_Array1OfCurve_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Geom_Curve > >::const_iterator":
        return _TColGeom.TColGeom_Array1OfCurve_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Geom_Curve > >::const_iterator":
        return _TColGeom.TColGeom_Array1OfCurve_cend(self)

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_Array1OfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Geom_Curve > const &') -> "void":
        return _TColGeom.TColGeom_Array1OfCurve_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfCurve_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfCurve_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfCurve_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfCurve_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfCurve_IsAllocated(self)

    def Assign(self, theOther: 'TColGeom_Array1OfCurve') -> "NCollection_Array1< opencascade::handle< Geom_Curve > > &":
        return _TColGeom.TColGeom_Array1OfCurve_Assign(self, theOther)

    def Move(self, theOther: 'TColGeom_Array1OfCurve') -> "NCollection_Array1< opencascade::handle< Geom_Curve > > &":
        return _TColGeom.TColGeom_Array1OfCurve_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Geom_Curve > > &":
        return _TColGeom.TColGeom_Array1OfCurve_Set(self, *args)

    def First(self) -> "opencascade::handle< Geom_Curve > const &":
        return _TColGeom.TColGeom_Array1OfCurve_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Geom_Curve > &":
        return _TColGeom.TColGeom_Array1OfCurve_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Geom_Curve > const &":
        return _TColGeom.TColGeom_Array1OfCurve_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Geom_Curve > &":
        return _TColGeom.TColGeom_Array1OfCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_Curve > const &":
        return _TColGeom.TColGeom_Array1OfCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_Curve > &":
        return _TColGeom.TColGeom_Array1OfCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Geom_Curve > &":
        return _TColGeom.TColGeom_Array1OfCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_Curve > const &') -> "void":
        return _TColGeom.TColGeom_Array1OfCurve_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColGeom.TColGeom_Array1OfCurve_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColGeom.delete_TColGeom_Array1OfCurve
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColGeom_Array1OfCurve_swigregister = _TColGeom.TColGeom_Array1OfCurve_swigregister
TColGeom_Array1OfCurve_swigregister(TColGeom_Array1OfCurve)

class TColGeom_Array1OfSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_Array1OfSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_Array1OfSurface, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< Geom_Surface > >::iterator":
        return _TColGeom.TColGeom_Array1OfSurface_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< Geom_Surface > >::iterator":
        return _TColGeom.TColGeom_Array1OfSurface_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< Geom_Surface > >::const_iterator":
        return _TColGeom.TColGeom_Array1OfSurface_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< Geom_Surface > >::const_iterator":
        return _TColGeom.TColGeom_Array1OfSurface_cend(self)

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_Array1OfSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Geom_Surface > const &') -> "void":
        return _TColGeom.TColGeom_Array1OfSurface_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfSurface_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfSurface_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfSurface_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfSurface_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array1OfSurface_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfSurface_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array1OfSurface_IsAllocated(self)

    def Assign(self, theOther: 'TColGeom_Array1OfSurface') -> "NCollection_Array1< opencascade::handle< Geom_Surface > > &":
        return _TColGeom.TColGeom_Array1OfSurface_Assign(self, theOther)

    def Move(self, theOther: 'TColGeom_Array1OfSurface') -> "NCollection_Array1< opencascade::handle< Geom_Surface > > &":
        return _TColGeom.TColGeom_Array1OfSurface_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< Geom_Surface > > &":
        return _TColGeom.TColGeom_Array1OfSurface_Set(self, *args)

    def First(self) -> "opencascade::handle< Geom_Surface > const &":
        return _TColGeom.TColGeom_Array1OfSurface_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_Array1OfSurface_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Geom_Surface > const &":
        return _TColGeom.TColGeom_Array1OfSurface_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_Array1OfSurface_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_Surface > const &":
        return _TColGeom.TColGeom_Array1OfSurface_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_Array1OfSurface_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_Array1OfSurface___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_Surface > const &') -> "void":
        return _TColGeom.TColGeom_Array1OfSurface_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _TColGeom.TColGeom_Array1OfSurface_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TColGeom.delete_TColGeom_Array1OfSurface
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

TColGeom_Array1OfSurface_swigregister = _TColGeom.TColGeom_Array1OfSurface_swigregister
TColGeom_Array1OfSurface_swigregister(TColGeom_Array1OfSurface)

class TColGeom_Array2OfBezierSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_Array2OfBezierSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_Array2OfBezierSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_Array2OfBezierSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Geom_BezierSurface > const &') -> "void":
        return _TColGeom.TColGeom_Array2OfBezierSurface_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfBezierSurface_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array2OfBezierSurface_IsDeletable(self)

    def Assign(self, theOther: 'TColGeom_Array2OfBezierSurface') -> "NCollection_Array2< opencascade::handle< Geom_BezierSurface > > &":
        return _TColGeom.TColGeom_Array2OfBezierSurface_Assign(self, theOther)

    def Move(self, theOther: 'TColGeom_Array2OfBezierSurface') -> "NCollection_Array2< opencascade::handle< Geom_BezierSurface > > &":
        return _TColGeom.TColGeom_Array2OfBezierSurface_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< opencascade::handle< Geom_BezierSurface > > &":
        return _TColGeom.TColGeom_Array2OfBezierSurface_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "opencascade::handle< Geom_BezierSurface > const &":
        return _TColGeom.TColGeom_Array2OfBezierSurface_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "opencascade::handle< Geom_BezierSurface > &":
        return _TColGeom.TColGeom_Array2OfBezierSurface_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "opencascade::handle< Geom_BezierSurface > &":
        return _TColGeom.TColGeom_Array2OfBezierSurface___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_BezierSurface > const &') -> "void":
        return _TColGeom.TColGeom_Array2OfBezierSurface_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TColGeom.TColGeom_Array2OfBezierSurface_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TColGeom.delete_TColGeom_Array2OfBezierSurface
    __del__ = lambda self: None
TColGeom_Array2OfBezierSurface_swigregister = _TColGeom.TColGeom_Array2OfBezierSurface_swigregister
TColGeom_Array2OfBezierSurface_swigregister(TColGeom_Array2OfBezierSurface)

class TColGeom_Array2OfSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_Array2OfSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_Array2OfSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_Array2OfSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< Geom_Surface > const &') -> "void":
        return _TColGeom.TColGeom_Array2OfSurface_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_Length(self)

    def NbRows(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_NbRows(self)

    def NbColumns(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_NbColumns(self)

    def RowLength(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_RowLength(self)

    def ColLength(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_ColLength(self)

    def LowerRow(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_LowerRow(self)

    def UpperRow(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_UpperRow(self)

    def LowerCol(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_LowerCol(self)

    def UpperCol(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_Array2OfSurface_UpperCol(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_Array2OfSurface_IsDeletable(self)

    def Assign(self, theOther: 'TColGeom_Array2OfSurface') -> "NCollection_Array2< opencascade::handle< Geom_Surface > > &":
        return _TColGeom.TColGeom_Array2OfSurface_Assign(self, theOther)

    def Move(self, theOther: 'TColGeom_Array2OfSurface') -> "NCollection_Array2< opencascade::handle< Geom_Surface > > &":
        return _TColGeom.TColGeom_Array2OfSurface_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array2< opencascade::handle< Geom_Surface > > &":
        return _TColGeom.TColGeom_Array2OfSurface_Set(self, *args)

    def Value(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "opencascade::handle< Geom_Surface > const &":
        return _TColGeom.TColGeom_Array2OfSurface_Value(self, theRow, theCol)

    def ChangeValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const') -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_Array2OfSurface_ChangeValue(self, theRow, theCol)

    def __call__(self, *args) -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_Array2OfSurface___call__(self, *args)

    def SetValue(self, theRow: 'Standard_Integer const', theCol: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_Surface > const &') -> "void":
        return _TColGeom.TColGeom_Array2OfSurface_SetValue(self, theRow, theCol, theItem)

    def Resize(self, theRowLower: 'Standard_Integer', theRowUpper: 'Standard_Integer', theColLower: 'Standard_Integer', theColUpper: 'Standard_Integer', theToCopyData: 'Standard_Boolean') -> "void":
        return _TColGeom.TColGeom_Array2OfSurface_Resize(self, theRowLower, theRowUpper, theColLower, theColUpper, theToCopyData)
    __swig_destroy__ = _TColGeom.delete_TColGeom_Array2OfSurface
    __del__ = lambda self: None
TColGeom_Array2OfSurface_swigregister = _TColGeom.TColGeom_Array2OfSurface_swigregister
TColGeom_Array2OfSurface_swigregister(TColGeom_Array2OfSurface)

class TColGeom_SequenceOfBoundedCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_SequenceOfBoundedCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_SequenceOfBoundedCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Geom_BoundedCurve > >::iterator":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Geom_BoundedCurve > >::iterator":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Geom_BoundedCurve > >::const_iterator":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Geom_BoundedCurve > >::const_iterator":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_cend(self)

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_SequenceOfBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_delNode)
    else:
        delNode = _TColGeom.TColGeom_SequenceOfBoundedCurve_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColGeom_SequenceOfBoundedCurve') -> "NCollection_Sequence< opencascade::handle< Geom_BoundedCurve > > &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Assign(self, theOther)

    def Set(self, theOther: 'TColGeom_SequenceOfBoundedCurve') -> "NCollection_Sequence< opencascade::handle< Geom_BoundedCurve > > &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColGeom_SequenceOfBoundedCurve') -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Geom_BoundedCurve > const &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Geom_BoundedCurve > &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Geom_BoundedCurve > const &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Geom_BoundedCurve > &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_BoundedCurve > const &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_BoundedCurve > &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Geom_BoundedCurve > &":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_BoundedCurve > const &') -> "void":
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceOfBoundedCurve
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColGeom_SequenceOfBoundedCurve_swigregister = _TColGeom.TColGeom_SequenceOfBoundedCurve_swigregister
TColGeom_SequenceOfBoundedCurve_swigregister(TColGeom_SequenceOfBoundedCurve)

def TColGeom_SequenceOfBoundedCurve_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColGeom.TColGeom_SequenceOfBoundedCurve_delNode(theNode, theAl)
TColGeom_SequenceOfBoundedCurve_delNode = _TColGeom.TColGeom_SequenceOfBoundedCurve_delNode

class TColGeom_SequenceOfCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_SequenceOfCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_SequenceOfCurve, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Geom_Curve > >::iterator":
        return _TColGeom.TColGeom_SequenceOfCurve_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Geom_Curve > >::iterator":
        return _TColGeom.TColGeom_SequenceOfCurve_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Geom_Curve > >::const_iterator":
        return _TColGeom.TColGeom_SequenceOfCurve_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Geom_Curve > >::const_iterator":
        return _TColGeom.TColGeom_SequenceOfCurve_cend(self)

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_SequenceOfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfCurve_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfCurve_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfCurve_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfCurve_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_SequenceOfCurve_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColGeom.TColGeom_SequenceOfCurve_delNode)
    else:
        delNode = _TColGeom.TColGeom_SequenceOfCurve_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColGeom_SequenceOfCurve') -> "NCollection_Sequence< opencascade::handle< Geom_Curve > > &":
        return _TColGeom.TColGeom_SequenceOfCurve_Assign(self, theOther)

    def Set(self, theOther: 'TColGeom_SequenceOfCurve') -> "NCollection_Sequence< opencascade::handle< Geom_Curve > > &":
        return _TColGeom.TColGeom_SequenceOfCurve_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColGeom_SequenceOfCurve') -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Geom_Curve > const &":
        return _TColGeom.TColGeom_SequenceOfCurve_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Geom_Curve > &":
        return _TColGeom.TColGeom_SequenceOfCurve_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Geom_Curve > const &":
        return _TColGeom.TColGeom_SequenceOfCurve_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Geom_Curve > &":
        return _TColGeom.TColGeom_SequenceOfCurve_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_Curve > const &":
        return _TColGeom.TColGeom_SequenceOfCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_Curve > &":
        return _TColGeom.TColGeom_SequenceOfCurve_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Geom_Curve > &":
        return _TColGeom.TColGeom_SequenceOfCurve___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_Curve > const &') -> "void":
        return _TColGeom.TColGeom_SequenceOfCurve_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceOfCurve
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColGeom_SequenceOfCurve_swigregister = _TColGeom.TColGeom_SequenceOfCurve_swigregister
TColGeom_SequenceOfCurve_swigregister(TColGeom_SequenceOfCurve)

def TColGeom_SequenceOfCurve_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColGeom.TColGeom_SequenceOfCurve_delNode(theNode, theAl)
TColGeom_SequenceOfCurve_delNode = _TColGeom.TColGeom_SequenceOfCurve_delNode

class TColGeom_SequenceOfSurface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_SequenceOfSurface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_SequenceOfSurface, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< Geom_Surface > >::iterator":
        return _TColGeom.TColGeom_SequenceOfSurface_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< Geom_Surface > >::iterator":
        return _TColGeom.TColGeom_SequenceOfSurface_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< Geom_Surface > >::const_iterator":
        return _TColGeom.TColGeom_SequenceOfSurface_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< Geom_Surface > >::const_iterator":
        return _TColGeom.TColGeom_SequenceOfSurface_cend(self)

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_SequenceOfSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfSurface_Size(self)

    def Length(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfSurface_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfSurface_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _TColGeom.TColGeom_SequenceOfSurface_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _TColGeom.TColGeom_SequenceOfSurface_IsEmpty(self)

    def Reverse(self) -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_TColGeom.TColGeom_SequenceOfSurface_delNode)
    else:
        delNode = _TColGeom.TColGeom_SequenceOfSurface_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_Clear(self, theAllocator)

    def Assign(self, theOther: 'TColGeom_SequenceOfSurface') -> "NCollection_Sequence< opencascade::handle< Geom_Surface > > &":
        return _TColGeom.TColGeom_SequenceOfSurface_Assign(self, theOther)

    def Set(self, theOther: 'TColGeom_SequenceOfSurface') -> "NCollection_Sequence< opencascade::handle< Geom_Surface > > &":
        return _TColGeom.TColGeom_SequenceOfSurface_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'TColGeom_SequenceOfSurface') -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< Geom_Surface > const &":
        return _TColGeom.TColGeom_SequenceOfSurface_First(self)

    def ChangeFirst(self) -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_SequenceOfSurface_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< Geom_Surface > const &":
        return _TColGeom.TColGeom_SequenceOfSurface_Last(self)

    def ChangeLast(self) -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_SequenceOfSurface_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_Surface > const &":
        return _TColGeom.TColGeom_SequenceOfSurface_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_SequenceOfSurface_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< Geom_Surface > &":
        return _TColGeom.TColGeom_SequenceOfSurface___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< Geom_Surface > const &') -> "void":
        return _TColGeom.TColGeom_SequenceOfSurface_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceOfSurface
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

TColGeom_SequenceOfSurface_swigregister = _TColGeom.TColGeom_SequenceOfSurface_swigregister
TColGeom_SequenceOfSurface_swigregister(TColGeom_SequenceOfSurface)

def TColGeom_SequenceOfSurface_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _TColGeom.TColGeom_SequenceOfSurface_delNode(theNode, theAl)
TColGeom_SequenceOfSurface_delNode = _TColGeom.TColGeom_SequenceOfSurface_delNode

class TColGeom_HArray1OfSurface(TColGeom_Array1OfSurface, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColGeom_Array1OfSurface, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_HArray1OfSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [TColGeom_Array1OfSurface, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_HArray1OfSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_HArray1OfSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColGeom_Array1OfSurface const &":
        return _TColGeom.TColGeom_HArray1OfSurface_Array1(self)

    def ChangeArray1(self) -> "TColGeom_Array1OfSurface &":
        return _TColGeom.TColGeom_HArray1OfSurface_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom_HArray1OfSurface_DownCast(t)

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray1OfSurface
    __del__ = lambda self: None
TColGeom_HArray1OfSurface_swigregister = _TColGeom.TColGeom_HArray1OfSurface_swigregister
TColGeom_HArray1OfSurface_swigregister(TColGeom_HArray1OfSurface)

class TColGeom_HArray1OfBezierCurve(TColGeom_Array1OfBezierCurve, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColGeom_Array1OfBezierCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_HArray1OfBezierCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [TColGeom_Array1OfBezierCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_HArray1OfBezierCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_HArray1OfBezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColGeom_Array1OfBezierCurve const &":
        return _TColGeom.TColGeom_HArray1OfBezierCurve_Array1(self)

    def ChangeArray1(self) -> "TColGeom_Array1OfBezierCurve &":
        return _TColGeom.TColGeom_HArray1OfBezierCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom_HArray1OfBezierCurve_DownCast(t)

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray1OfBezierCurve
    __del__ = lambda self: None
TColGeom_HArray1OfBezierCurve_swigregister = _TColGeom.TColGeom_HArray1OfBezierCurve_swigregister
TColGeom_HArray1OfBezierCurve_swigregister(TColGeom_HArray1OfBezierCurve)

class TColGeom_HArray1OfBSplineCurve(TColGeom_Array1OfBSplineCurve, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColGeom_Array1OfBSplineCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_HArray1OfBSplineCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [TColGeom_Array1OfBSplineCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_HArray1OfBSplineCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_HArray1OfBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColGeom_Array1OfBSplineCurve const &":
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_Array1(self)

    def ChangeArray1(self) -> "TColGeom_Array1OfBSplineCurve &":
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom_HArray1OfBSplineCurve_DownCast(t)

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray1OfBSplineCurve
    __del__ = lambda self: None
TColGeom_HArray1OfBSplineCurve_swigregister = _TColGeom.TColGeom_HArray1OfBSplineCurve_swigregister
TColGeom_HArray1OfBSplineCurve_swigregister(TColGeom_HArray1OfBSplineCurve)

class TColGeom_HArray1OfCurve(TColGeom_Array1OfCurve, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColGeom_Array1OfCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_HArray1OfCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [TColGeom_Array1OfCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_HArray1OfCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_HArray1OfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "TColGeom_Array1OfCurve const &":
        return _TColGeom.TColGeom_HArray1OfCurve_Array1(self)

    def ChangeArray1(self) -> "TColGeom_Array1OfCurve &":
        return _TColGeom.TColGeom_HArray1OfCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom_HArray1OfCurve_DownCast(t)

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray1OfCurve
    __del__ = lambda self: None
TColGeom_HArray1OfCurve_swigregister = _TColGeom.TColGeom_HArray1OfCurve_swigregister
TColGeom_HArray1OfCurve_swigregister(TColGeom_HArray1OfCurve)

class TColGeom_HArray2OfSurface(TColGeom_Array2OfSurface, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColGeom_Array2OfSurface, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_HArray2OfSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [TColGeom_Array2OfSurface, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_HArray2OfSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_HArray2OfSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array2(self) -> "TColGeom_Array2OfSurface const &":
        return _TColGeom.TColGeom_HArray2OfSurface_Array2(self)

    def ChangeArray2(self) -> "TColGeom_Array2OfSurface &":
        return _TColGeom.TColGeom_HArray2OfSurface_ChangeArray2(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom_HArray2OfSurface_DownCast(t)

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray2OfSurface
    __del__ = lambda self: None
TColGeom_HArray2OfSurface_swigregister = _TColGeom.TColGeom_HArray2OfSurface_swigregister
TColGeom_HArray2OfSurface_swigregister(TColGeom_HArray2OfSurface)

class TColGeom_HSequenceOfBoundedCurve(TColGeom_SequenceOfBoundedCurve, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColGeom_SequenceOfBoundedCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_HSequenceOfBoundedCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [TColGeom_SequenceOfBoundedCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_HSequenceOfBoundedCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_HSequenceOfBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColGeom_SequenceOfBoundedCurve const &":
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Append(self, *args)

    def ChangeSequence(self) -> "TColGeom_SequenceOfBoundedCurve &":
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom_HSequenceOfBoundedCurve_DownCast(t)

    __swig_destroy__ = _TColGeom.delete_TColGeom_HSequenceOfBoundedCurve
    __del__ = lambda self: None
TColGeom_HSequenceOfBoundedCurve_swigregister = _TColGeom.TColGeom_HSequenceOfBoundedCurve_swigregister
TColGeom_HSequenceOfBoundedCurve_swigregister(TColGeom_HSequenceOfBoundedCurve)

class TColGeom_HSequenceOfCurve(TColGeom_SequenceOfCurve, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [TColGeom_SequenceOfCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TColGeom_HSequenceOfCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [TColGeom_SequenceOfCurve, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TColGeom_HSequenceOfCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _TColGeom.new_TColGeom_HSequenceOfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Sequence(self) -> "TColGeom_SequenceOfCurve const &":
        return _TColGeom.TColGeom_HSequenceOfCurve_Sequence(self)

    def Append(self, *args) -> "void":
        return _TColGeom.TColGeom_HSequenceOfCurve_Append(self, *args)

    def ChangeSequence(self) -> "TColGeom_SequenceOfCurve &":
        return _TColGeom.TColGeom_HSequenceOfCurve_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_TColGeom_HSequenceOfCurve_DownCast(t)

    __swig_destroy__ = _TColGeom.delete_TColGeom_HSequenceOfCurve
    __del__ = lambda self: None
TColGeom_HSequenceOfCurve_swigregister = _TColGeom.TColGeom_HSequenceOfCurve_swigregister
TColGeom_HSequenceOfCurve_swigregister(TColGeom_HSequenceOfCurve)



# This file is compatible with both classic and new-style classes.


