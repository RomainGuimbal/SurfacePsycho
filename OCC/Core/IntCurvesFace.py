# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntCurvesFace module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intcurvesface.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntCurvesFace')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntCurvesFace')
    _IntCurvesFace = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntCurvesFace', [dirname(__file__)])
        except ImportError:
            import _IntCurvesFace
            return _IntCurvesFace
        try:
            _mod = imp.load_module('_IntCurvesFace', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntCurvesFace = swig_import_helper()
    del swig_import_helper
else:
    import _IntCurvesFace
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntCurvesFace.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _IntCurvesFace.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IntCurvesFace.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IntCurvesFace.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _IntCurvesFace.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _IntCurvesFace.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _IntCurvesFace.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _IntCurvesFace.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _IntCurvesFace.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _IntCurvesFace.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IntCurvesFace.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _IntCurvesFace.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _IntCurvesFace.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IntCurvesFace.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IntCurvesFace.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IntCurvesFace.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _IntCurvesFace.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IntCurvesFace.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IntCurvesFace.process_exception(error, method_name, class_name)
process_exception = _IntCurvesFace.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.IntSurf

from enum import IntEnum
from OCC.Core.Exception import *



class IntCurvesFace_Intersector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurvesFace_Intersector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurvesFace_Intersector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Load a face. //! the tolerance <tol> is used to determine if the first point of the segment is near the face. in that case, the parameter of the intersection point on the line can be a negative value (greater than -tol). if arestr = true uv bounding box of face is used to restrict it's underlined surface, otherwise surface is not restricted. if usebtoler = false then the 2d-point of intersection is classified with null-tolerance (relative to face); otherwise it's using maximium between input tolerance(atol) and tolerances of face bounds (edges).

        Parameters
        ----------
        F: TopoDS_Face
        aTol: float
        aRestr: bool,optional
        	default value is Standard_True
        UseBToler: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _IntCurvesFace.new_IntCurvesFace_Intersector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Bounding(self, *args) -> "Bnd_Box":
        """
        No available documentation.

        Returns
        -------
        Bnd_Box

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Bounding(self, *args)


    def ClassifyUVPoint(self, *args) -> "TopAbs_State":
        """
        No available documentation.

        Parameters
        ----------
        Puv: gp_Pnt2d

        Returns
        -------
        TopAbs_State

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_ClassifyUVPoint(self, *args)


    def Destroy(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Destroy(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        Returns the significant face used to determine the intersection.

        Returns
        -------
        TopoDS_Face

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Face(self, *args)


    def GetUseBoundToler(self, *args) -> "Standard_Boolean":
        """
        Returns the boundary tolerance flag.

        Returns
        -------
        bool

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_GetUseBoundToler(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        True is returned when the intersection have been computed.

        Returns
        -------
        bool

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_IsDone(self, *args)


    def IsParallel(self, *args) -> "Standard_Boolean":
        """
        Returns true if curve is parallel or belongs face surface this case is recognized only for some pairs of analytical curves and surfaces (plane - line, ...).

        Returns
        -------
        bool

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_IsParallel(self, *args)


    def NbPnt(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_NbPnt(self, *args)


    def Perform(self, *args) -> "void":
        """
        Perform the intersection between the segment l and the loaded face. //! pinf is the smallest parameter on the line psup is the highest parmaeter on the line //! for an infinite line pinf and psup can be +/- reallast.

        Parameters
        ----------
        L: gp_Lin
        PInf: float
        PSup: float

        Returns
        -------
        None

        Same method for a hcurve from adaptor3d. pinf an psup can also be - and + inf.

        Parameters
        ----------
        HCu: Adaptor3d_HCurve
        PInf: float
        PSup: float

        Returns
        -------
        None

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Perform(self, *args)


    def Pnt(self, *args) -> "gp_Pnt const":
        """
        Returns the geometric point of the ith intersection between the line and the surface.

        Parameters
        ----------
        I: int

        Returns
        -------
        gp_Pnt

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Pnt(self, *args)


    def SetUseBoundToler(self, *args) -> "void":
        """
        Sets the boundary tolerance flag.

        Parameters
        ----------
        UseBToler: bool

        Returns
        -------
        None

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_SetUseBoundToler(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        Returns the ith state of the point on the face. the values can be either topabs_in ( the point is in the face) or topabs_on ( the point is on a boudary of the face).

        Parameters
        ----------
        I: int

        Returns
        -------
        TopAbs_State

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_State(self, *args)


    def SurfaceType(self, *args) -> "GeomAbs_SurfaceType":
        """
        Return the surface type.

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_SurfaceType(self, *args)


    def Transition(self, *args) -> "IntCurveSurface_TransitionOnCurve":
        """
        Returns the ith transition of the line on the surface.

        Parameters
        ----------
        I: int

        Returns
        -------
        IntCurveSurface_TransitionOnCurve

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Transition(self, *args)


    def UParameter(self, *args) -> "Standard_Real":
        """
        Returns the u parameter of the ith intersection point on the surface.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_UParameter(self, *args)


    def VParameter(self, *args) -> "Standard_Real":
        """
        Returns the v parameter of the ith intersection point on the surface.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_VParameter(self, *args)


    def WParameter(self, *args) -> "Standard_Real":
        """
        Returns the parameter of the ith intersection point on the line.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_WParameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurvesFace.delete_IntCurvesFace_Intersector
    __del__ = lambda self: None
IntCurvesFace_Intersector_swigregister = _IntCurvesFace.IntCurvesFace_Intersector_swigregister
IntCurvesFace_Intersector_swigregister(IntCurvesFace_Intersector)

class IntCurvesFace_ShapeIntersector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCurvesFace_ShapeIntersector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntCurvesFace_ShapeIntersector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _IntCurvesFace.new_IntCurvesFace_ShapeIntersector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Destroy(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Destroy(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        Returns the significant face used to determine the intersection.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Face

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Face(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        True is returned when the intersection have been computed.

        Returns
        -------
        bool

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_IsDone(self, *args)


    def Load(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Sh: TopoDS_Shape
        Tol: float

        Returns
        -------
        None

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Load(self, *args)


    def NbPnt(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_NbPnt(self, *args)


    def Perform(self, *args) -> "void":
        """
        Perform the intersection between the segment l and the loaded shape. //! pinf is the smallest parameter on the line psup is the highest parammter on the line //! for an infinite line pinf and psup can be +/- reallast.

        Parameters
        ----------
        L: gp_Lin
        PInf: float
        PSup: float

        Returns
        -------
        None

        Same method for a hcurve from adaptor3d. pinf an psup can also be - and + inf.

        Parameters
        ----------
        HCu: Adaptor3d_HCurve
        PInf: float
        PSup: float

        Returns
        -------
        None

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Perform(self, *args)


    def PerformNearest(self, *args) -> "void":
        """
        Perform the intersection between the segment l and the loaded shape. //! pinf is the smallest parameter on the line psup is the highest parammter on the line //! for an infinite line pinf and psup can be +/- reallast.

        Parameters
        ----------
        L: gp_Lin
        PInf: float
        PSup: float

        Returns
        -------
        None

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_PerformNearest(self, *args)


    def Pnt(self, *args) -> "gp_Pnt const":
        """
        Returns the geometric point of the ith intersection between the line and the surface.

        Parameters
        ----------
        I: int

        Returns
        -------
        gp_Pnt

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Pnt(self, *args)


    def SortResult(self, *args) -> "void":
        """
        Internal method. sort the result on the curve parameter.

        Returns
        -------
        None

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_SortResult(self, *args)


    def State(self, *args) -> "TopAbs_State":
        """
        Returns the ith state of the point on the face. the values can be either topabs_in ( the point is in the face) or topabs_on ( the point is on a boudary of the face).

        Parameters
        ----------
        I: int

        Returns
        -------
        TopAbs_State

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_State(self, *args)


    def Transition(self, *args) -> "IntCurveSurface_TransitionOnCurve":
        """
        Returns the ith transition of the line on the surface.

        Parameters
        ----------
        I: int

        Returns
        -------
        IntCurveSurface_TransitionOnCurve

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Transition(self, *args)


    def UParameter(self, *args) -> "Standard_Real":
        """
        Returns the u parameter of the ith intersection point on the surface.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_UParameter(self, *args)


    def VParameter(self, *args) -> "Standard_Real":
        """
        Returns the v parameter of the ith intersection point on the surface.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_VParameter(self, *args)


    def WParameter(self, *args) -> "Standard_Real":
        """
        Returns the parameter of the ith intersection point on the line.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_WParameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurvesFace.delete_IntCurvesFace_ShapeIntersector
    __del__ = lambda self: None
IntCurvesFace_ShapeIntersector_swigregister = _IntCurvesFace.IntCurvesFace_ShapeIntersector_swigregister
IntCurvesFace_ShapeIntersector_swigregister(IntCurvesFace_ShapeIntersector)



# This file is compatible with both classic and new-style classes.


