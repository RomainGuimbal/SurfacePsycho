# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
IntCurvesFace module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_intcurvesface.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IntCurvesFace
else:
    import _IntCurvesFace

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntCurvesFace.delete_SwigPyIterator

    def value(self):
        return _IntCurvesFace.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IntCurvesFace.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IntCurvesFace.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IntCurvesFace.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IntCurvesFace.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IntCurvesFace.SwigPyIterator_copy(self)

    def next(self):
        return _IntCurvesFace.SwigPyIterator_next(self)

    def __next__(self):
        return _IntCurvesFace.SwigPyIterator___next__(self)

    def previous(self):
        return _IntCurvesFace.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IntCurvesFace.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IntCurvesFace.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IntCurvesFace.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IntCurvesFace.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IntCurvesFace.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IntCurvesFace.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IntCurvesFace.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IntCurvesFace:
_IntCurvesFace.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _IntCurvesFace.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.IntSurf

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_IntCurvesFace_Intersector_Create():
    return _IntCurvesFace.Handle_IntCurvesFace_Intersector_Create()

def Handle_IntCurvesFace_Intersector_DownCast(t):
    return _IntCurvesFace.Handle_IntCurvesFace_Intersector_DownCast(t)

def Handle_IntCurvesFace_Intersector_IsNull(t):
    return _IntCurvesFace.Handle_IntCurvesFace_Intersector_IsNull(t)
class IntCurvesFace_Intersector(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        F: TopoDS_Face
        aTol: float
        aRestr: bool (optional, default to Standard_True)
        UseBToler: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Load a face. //! the tolerance <tol> is used to determine if the first point of the segment is near the face. in that case, the parameter of the intersection point on the line can be a negative value (greater than -tol). if arestr = true uv bounding box of face is used to restrict it's underlined surface, otherwise surface is not restricted. if usebtoler = false then the 2d-point of intersection is classified with null-tolerance (relative to face); otherwise it's using maximum between input tolerance(atol) and tolerances of face bounds (edges).

        """
        _IntCurvesFace.IntCurvesFace_Intersector_swiginit(self, _IntCurvesFace.new_IntCurvesFace_Intersector(*args))

    def Bounding(self, *args):
        r"""
        Return
        -------
        Bnd_Box

        Description
        -----------
        No available documentation.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Bounding(self, *args)

    def ClassifyUVPoint(self, *args):
        r"""

        Parameters
        ----------
        Puv: gp_Pnt2d

        Return
        -------
        TopAbs_State

        Description
        -----------
        No available documentation.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_ClassifyUVPoint(self, *args)

    def Face(self, *args):
        r"""
        Return
        -------
        TopoDS_Face

        Description
        -----------
        Returns the significant face used to determine the intersection.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Face(self, *args)

    def GetUseBoundToler(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns the boundary tolerance flag.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_GetUseBoundToler(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        True is returned when the intersection have been computed.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_IsDone(self, *args)

    def IsParallel(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if curve is parallel or belongs face surface this case is recognized only for some pairs of analytical curves and surfaces (plane - line, ...).

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_IsParallel(self, *args)

    def NbPnt(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_NbPnt(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin
        PInf: float
        PSup: float

        Return
        -------
        None

        Description
        -----------
        Perform the intersection between the segment l and the loaded face. //! pinf is the smallest parameter on the line psup is the highest parameter on the line //! for an infinite line pinf and psup can be +/- reallast.

        Parameters
        ----------
        HCu: Adaptor3d_Curve
        PInf: float
        PSup: float

        Return
        -------
        None

        Description
        -----------
        Same method for a hcurve from adaptor3d. pinf an psup can also be - and + inf.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Perform(self, *args)

    def Pnt(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the geometric point of the ith intersection between the line and the surface.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Pnt(self, *args)

    def SetUseBoundToler(self, *args):
        r"""

        Parameters
        ----------
        UseBToler: bool

        Return
        -------
        None

        Description
        -----------
        Sets the boundary tolerance flag.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_SetUseBoundToler(self, *args)

    def State(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopAbs_State

        Description
        -----------
        Returns the ith state of the point on the face. the values can be either topabs_in ( the point is in the face) or topabs_on ( the point is on a boundary of the face).

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_State(self, *args)

    def SurfaceType(self, *args):
        r"""
        Return
        -------
        GeomAbs_SurfaceType

        Description
        -----------
        Return the surface type.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_SurfaceType(self, *args)

    def Transition(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        IntCurveSurface_TransitionOnCurve

        Description
        -----------
        Returns the ith transition of the line on the surface.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Transition(self, *args)

    def UParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Returns the u parameter of the ith intersection point on the surface.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_UParameter(self, *args)

    def VParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Returns the v parameter of the ith intersection point on the surface.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_VParameter(self, *args)

    def WParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Returns the parameter of the ith intersection point on the line.

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_WParameter(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IntCurvesFace_Intersector_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurvesFace.delete_IntCurvesFace_Intersector

# Register IntCurvesFace_Intersector in _IntCurvesFace:
_IntCurvesFace.IntCurvesFace_Intersector_swigregister(IntCurvesFace_Intersector)
class IntCurvesFace_ShapeIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _IntCurvesFace.IntCurvesFace_ShapeIntersector_swiginit(self, _IntCurvesFace.new_IntCurvesFace_ShapeIntersector(*args))

    def Face(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Face

        Description
        -----------
        Returns the significant face used to determine the intersection.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Face(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        True when the intersection has been computed.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_IsDone(self, *args)

    def Load(self, *args):
        r"""

        Parameters
        ----------
        Sh: TopoDS_Shape
        Tol: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Load(self, *args)

    def NbPnt(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of the intersection points.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_NbPnt(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin
        PInf: float
        PSup: float

        Return
        -------
        None

        Description
        -----------
        Perform the intersection between the segment l and the loaded shape. //! pinf is the smallest parameter on the line psup is the highest parameter on the line //! for an infinite line pinf and psup can be +/- reallast.

        Parameters
        ----------
        HCu: Adaptor3d_Curve
        PInf: float
        PSup: float

        Return
        -------
        None

        Description
        -----------
        Same method for a hcurve from adaptor3d. pinf an psup can also be -inf and +inf.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Perform(self, *args)

    def PerformNearest(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin
        PInf: float
        PSup: float

        Return
        -------
        None

        Description
        -----------
        Perform the intersection between the segment l and the loaded shape. //! pinf is the smallest parameter on the line psup is the highest parameter on the line //! for an infinite line pinf and psup can be +/- reallast.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_PerformNearest(self, *args)

    def Pnt(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the geometric point of the ith intersection between the line and the surface.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Pnt(self, *args)

    def SortResult(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Internal method. sort the result on the curve parameter.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_SortResult(self, *args)

    def State(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopAbs_State

        Description
        -----------
        Returns the ith state of the point on the face. the values can be either topabs_in ( the point is in the face) or topabs_on ( the point is on a boundary of the face).

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_State(self, *args)

    def Transition(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        IntCurveSurface_TransitionOnCurve

        Description
        -----------
        Returns the ith transition of the line on the surface.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Transition(self, *args)

    def UParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Returns the u parameter of the ith intersection point on the surface.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_UParameter(self, *args)

    def VParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Returns the v parameter of the ith intersection point on the surface.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_VParameter(self, *args)

    def WParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Returns the parameter of the ith intersection point on the line.

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_WParameter(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntCurvesFace.delete_IntCurvesFace_ShapeIntersector

# Register IntCurvesFace_ShapeIntersector in _IntCurvesFace:
_IntCurvesFace.IntCurvesFace_ShapeIntersector_swigregister(IntCurvesFace_ShapeIntersector)



