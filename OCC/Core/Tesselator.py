# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Tesselator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Tesselator')
    _Tesselator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Tesselator', [dirname(__file__)])
        except ImportError:
            import _Tesselator
            return _Tesselator
        try:
            _mod = imp.load_module('_Tesselator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Tesselator = swig_import_helper()
    del swig_import_helper
else:
    import _Tesselator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Tesselator.process_exception(error, method_name, class_name)
process_exception = _Tesselator.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Tesselator.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Tesselator.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Tesselator.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Tesselator.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Tesselator.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Tesselator.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Tesselator.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Tesselator.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Tesselator.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Tesselator.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Tesselator.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Tesselator.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Tesselator.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Tesselator.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Tesselator.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Tesselator.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Tesselator.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Tesselator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_float, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _Tesselator.vector_float_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _Tesselator.vector_float___nonzero__(self)

    def __bool__(self) -> "bool":
        return _Tesselator.vector_float___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _Tesselator.vector_float___len__(self)

    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        return _Tesselator.vector_float___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _Tesselator.vector_float___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        return _Tesselator.vector_float___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _Tesselator.vector_float___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _Tesselator.vector_float___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _Tesselator.vector_float___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _Tesselator.vector_float_pop(self)

    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _Tesselator.vector_float_append(self, x)

    def empty(self) -> "bool":
        return _Tesselator.vector_float_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _Tesselator.vector_float_size(self)

    def swap(self, v: 'vector_float') -> "void":
        return _Tesselator.vector_float_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _Tesselator.vector_float_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _Tesselator.vector_float_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _Tesselator.vector_float_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _Tesselator.vector_float_rend(self)

    def clear(self) -> "void":
        return _Tesselator.vector_float_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _Tesselator.vector_float_get_allocator(self)

    def pop_back(self) -> "void":
        return _Tesselator.vector_float_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _Tesselator.vector_float_erase(self, *args)

    def __init__(self, *args):
        this = _Tesselator.new_vector_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _Tesselator.vector_float_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _Tesselator.vector_float_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _Tesselator.vector_float_back(self)

    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        return _Tesselator.vector_float_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _Tesselator.vector_float_resize(self, *args)

    def insert(self, *args) -> "void":
        return _Tesselator.vector_float_insert(self, *args)

    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        return _Tesselator.vector_float_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _Tesselator.vector_float_capacity(self)
    __swig_destroy__ = _Tesselator.delete_vector_float
    __del__ = lambda self: None
vector_float_swigregister = _Tesselator.vector_float_swigregister
vector_float_swigregister(vector_float)

class ShapeTesselator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeTesselator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeTesselator, name)
    __repr__ = _swig_repr

    def __init__(self, aShape: 'TopoDS_Shape'):
        """__init__(ShapeTesselator self, TopoDS_Shape aShape) -> ShapeTesselator"""
        this = _Tesselator.new_ShapeTesselator(aShape)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Tesselator.delete_ShapeTesselator
    __del__ = lambda self: None

    def Compute(self, compute_edges: 'bool'=False, mesh_quality: 'float'=1.0, parallel: 'bool'=False) -> "void":
        """Compute(ShapeTesselator self, bool compute_edges=False, float mesh_quality=1.0, bool parallel=False)"""
        return _Tesselator.ShapeTesselator_Compute(self, compute_edges, mesh_quality, parallel)


    def GetVertex(self, ivert: 'int') -> "void":
        """GetVertex(ShapeTesselator self, int ivert)"""
        return _Tesselator.ShapeTesselator_GetVertex(self, ivert)


    def GetNormal(self, inorm: 'int') -> "void":
        """GetNormal(ShapeTesselator self, int inorm)"""
        return _Tesselator.ShapeTesselator_GetNormal(self, inorm)


    def GetTriangleIndex(self, triangleIdx: 'int') -> "void":
        """GetTriangleIndex(ShapeTesselator self, int triangleIdx)"""
        return _Tesselator.ShapeTesselator_GetTriangleIndex(self, triangleIdx)


    def GetEdgeVertex(self, iEdge: 'int', ivert: 'int') -> "void":
        """GetEdgeVertex(ShapeTesselator self, int iEdge, int ivert)"""
        return _Tesselator.ShapeTesselator_GetEdgeVertex(self, iEdge, ivert)


    def VerticesList(self) -> "float *":
        """VerticesList(ShapeTesselator self) -> float *"""
        return _Tesselator.ShapeTesselator_VerticesList(self)


    def ObjGetTriangleCount(self) -> "int":
        """ObjGetTriangleCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetTriangleCount(self)


    def ObjGetInvalidTriangleCount(self) -> "int":
        """ObjGetInvalidTriangleCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetInvalidTriangleCount(self)


    def ObjGetVertexCount(self) -> "int":
        """ObjGetVertexCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetVertexCount(self)


    def ObjGetNormalCount(self) -> "int":
        """ObjGetNormalCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetNormalCount(self)


    def ObjGetEdgeCount(self) -> "int":
        """ObjGetEdgeCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetEdgeCount(self)


    def ObjEdgeGetVertexCount(self, iEdge: 'int') -> "int":
        """ObjEdgeGetVertexCount(ShapeTesselator self, int iEdge) -> int"""
        return _Tesselator.ShapeTesselator_ObjEdgeGetVertexCount(self, iEdge)


    def ExportShapeToX3DTriangleSet(self) -> "std::string":
        """ExportShapeToX3DTriangleSet(ShapeTesselator self) -> std::string"""
        return _Tesselator.ShapeTesselator_ExportShapeToX3DTriangleSet(self)


    def ExportShapeToThreejsJSONString(self, shape_function_name: 'char *') -> "std::string":
        """ExportShapeToThreejsJSONString(ShapeTesselator self, char * shape_function_name) -> std::string"""
        return _Tesselator.ShapeTesselator_ExportShapeToThreejsJSONString(self, shape_function_name)


    def ExportShapeToX3D(self, filename: 'char *', diffR: 'int'=1, diffG: 'int'=0, diffB: 'int'=0) -> "void":
        """ExportShapeToX3D(ShapeTesselator self, char * filename, int diffR=1, int diffG=0, int diffB=0)"""
        return _Tesselator.ShapeTesselator_ExportShapeToX3D(self, filename, diffR, diffG, diffB)


    def GetVerticesPositionAsTuple(self) -> "std::vector< float,std::allocator< float > >":
        """GetVerticesPositionAsTuple(ShapeTesselator self) -> vector_float"""
        return _Tesselator.ShapeTesselator_GetVerticesPositionAsTuple(self)


    def GetNormalsAsTuple(self) -> "std::vector< float,std::allocator< float > >":
        """GetNormalsAsTuple(ShapeTesselator self) -> vector_float"""
        return _Tesselator.ShapeTesselator_GetNormalsAsTuple(self)

ShapeTesselator_swigregister = _Tesselator.ShapeTesselator_swigregister
ShapeTesselator_swigregister(ShapeTesselator)

# This file is compatible with both classic and new-style classes.


