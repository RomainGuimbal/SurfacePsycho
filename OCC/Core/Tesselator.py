# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Tesselator
else:
    import _Tesselator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def process_exception(error, method_name, class_name):
    return _Tesselator.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Tesselator.delete_SwigPyIterator

    def value(self):
        return _Tesselator.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Tesselator.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Tesselator.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Tesselator.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Tesselator.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Tesselator.SwigPyIterator_copy(self)

    def next(self):
        return _Tesselator.SwigPyIterator_next(self)

    def __next__(self):
        return _Tesselator.SwigPyIterator___next__(self)

    def previous(self):
        return _Tesselator.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Tesselator.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Tesselator.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Tesselator.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Tesselator.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Tesselator.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Tesselator.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Tesselator.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Tesselator:
_Tesselator.SwigPyIterator_swigregister(SwigPyIterator)
class vector_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Tesselator.vector_float_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Tesselator.vector_float___nonzero__(self)

    def __bool__(self):
        return _Tesselator.vector_float___bool__(self)

    def __len__(self):
        return _Tesselator.vector_float___len__(self)

    def __getslice__(self, i, j):
        return _Tesselator.vector_float___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Tesselator.vector_float___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Tesselator.vector_float___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Tesselator.vector_float___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Tesselator.vector_float___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Tesselator.vector_float___setitem__(self, *args)

    def pop(self):
        return _Tesselator.vector_float_pop(self)

    def append(self, x):
        return _Tesselator.vector_float_append(self, x)

    def empty(self):
        return _Tesselator.vector_float_empty(self)

    def size(self):
        return _Tesselator.vector_float_size(self)

    def swap(self, v):
        return _Tesselator.vector_float_swap(self, v)

    def begin(self):
        return _Tesselator.vector_float_begin(self)

    def end(self):
        return _Tesselator.vector_float_end(self)

    def rbegin(self):
        return _Tesselator.vector_float_rbegin(self)

    def rend(self):
        return _Tesselator.vector_float_rend(self)

    def clear(self):
        return _Tesselator.vector_float_clear(self)

    def get_allocator(self):
        return _Tesselator.vector_float_get_allocator(self)

    def pop_back(self):
        return _Tesselator.vector_float_pop_back(self)

    def erase(self, *args):
        return _Tesselator.vector_float_erase(self, *args)

    def __init__(self, *args):
        _Tesselator.vector_float_swiginit(self, _Tesselator.new_vector_float(*args))

    def push_back(self, x):
        return _Tesselator.vector_float_push_back(self, x)

    def front(self):
        return _Tesselator.vector_float_front(self)

    def back(self):
        return _Tesselator.vector_float_back(self)

    def assign(self, n, x):
        return _Tesselator.vector_float_assign(self, n, x)

    def resize(self, *args):
        return _Tesselator.vector_float_resize(self, *args)

    def insert(self, *args):
        return _Tesselator.vector_float_insert(self, *args)

    def reserve(self, n):
        return _Tesselator.vector_float_reserve(self, n)

    def capacity(self):
        return _Tesselator.vector_float_capacity(self)
    __swig_destroy__ = _Tesselator.delete_vector_float

# Register vector_float in _Tesselator:
_Tesselator.vector_float_swigregister(vector_float)
class ShapeTesselator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aShape):
        r"""__init__(ShapeTesselator self, TopoDS_Shape aShape) -> ShapeTesselator"""
        _Tesselator.ShapeTesselator_swiginit(self, _Tesselator.new_ShapeTesselator(aShape))
    __swig_destroy__ = _Tesselator.delete_ShapeTesselator

    def Compute(self, compute_edges=False, mesh_quality=1.0, parallel=False):
        r"""Compute(ShapeTesselator self, bool compute_edges=False, float mesh_quality=1.0, bool parallel=False)"""
        return _Tesselator.ShapeTesselator_Compute(self, compute_edges, mesh_quality, parallel)

    def GetVertex(self, ivert):
        r"""GetVertex(ShapeTesselator self, int ivert)"""
        return _Tesselator.ShapeTesselator_GetVertex(self, ivert)

    def GetNormal(self, inorm):
        r"""GetNormal(ShapeTesselator self, int inorm)"""
        return _Tesselator.ShapeTesselator_GetNormal(self, inorm)

    def GetTriangleIndex(self, triangleIdx):
        r"""GetTriangleIndex(ShapeTesselator self, int triangleIdx)"""
        return _Tesselator.ShapeTesselator_GetTriangleIndex(self, triangleIdx)

    def GetEdgeVertex(self, iEdge, ivert):
        r"""GetEdgeVertex(ShapeTesselator self, int iEdge, int ivert)"""
        return _Tesselator.ShapeTesselator_GetEdgeVertex(self, iEdge, ivert)

    def VerticesList(self):
        r"""VerticesList(ShapeTesselator self) -> float *"""
        return _Tesselator.ShapeTesselator_VerticesList(self)

    def ObjGetTriangleCount(self):
        r"""ObjGetTriangleCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetTriangleCount(self)

    def ObjGetInvalidTriangleCount(self):
        r"""ObjGetInvalidTriangleCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetInvalidTriangleCount(self)

    def ObjGetVertexCount(self):
        r"""ObjGetVertexCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetVertexCount(self)

    def ObjGetNormalCount(self):
        r"""ObjGetNormalCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetNormalCount(self)

    def ObjGetEdgeCount(self):
        r"""ObjGetEdgeCount(ShapeTesselator self) -> int"""
        return _Tesselator.ShapeTesselator_ObjGetEdgeCount(self)

    def ObjEdgeGetVertexCount(self, iEdge):
        r"""ObjEdgeGetVertexCount(ShapeTesselator self, int iEdge) -> int"""
        return _Tesselator.ShapeTesselator_ObjEdgeGetVertexCount(self, iEdge)

    def ExportShapeToX3DTriangleSet(self):
        r"""ExportShapeToX3DTriangleSet(ShapeTesselator self) -> std::string"""
        return _Tesselator.ShapeTesselator_ExportShapeToX3DTriangleSet(self)

    def ExportShapeToThreejsJSONString(self, shape_function_name):
        r"""ExportShapeToThreejsJSONString(ShapeTesselator self, char * shape_function_name) -> std::string"""
        return _Tesselator.ShapeTesselator_ExportShapeToThreejsJSONString(self, shape_function_name)

    def ExportShapeToX3D(self, filename, diffR=1, diffG=0, diffB=0):
        r"""ExportShapeToX3D(ShapeTesselator self, char * filename, int diffR=1, int diffG=0, int diffB=0)"""
        return _Tesselator.ShapeTesselator_ExportShapeToX3D(self, filename, diffR, diffG, diffB)

    def GetVerticesPositionAsTuple(self):
        r"""GetVerticesPositionAsTuple(ShapeTesselator self) -> vector_float"""
        return _Tesselator.ShapeTesselator_GetVerticesPositionAsTuple(self)

    def GetNormalsAsTuple(self):
        r"""GetNormalsAsTuple(ShapeTesselator self) -> vector_float"""
        return _Tesselator.ShapeTesselator_GetNormalsAsTuple(self)

# Register ShapeTesselator in _Tesselator:
_Tesselator.ShapeTesselator_swigregister(ShapeTesselator)

