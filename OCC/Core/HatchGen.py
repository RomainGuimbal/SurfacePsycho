# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HatchGen module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_hatchgen.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HatchGen')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HatchGen')
    _HatchGen = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HatchGen', [dirname(__file__)])
        except ImportError:
            import _HatchGen
            return _HatchGen
        try:
            _mod = imp.load_module('_HatchGen', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HatchGen = swig_import_helper()
    del swig_import_helper
else:
    import _HatchGen
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HatchGen.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _HatchGen.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _HatchGen.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _HatchGen.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _HatchGen.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _HatchGen.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _HatchGen.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _HatchGen.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _HatchGen.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _HatchGen.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _HatchGen.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _HatchGen.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _HatchGen.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _HatchGen.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _HatchGen.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _HatchGen.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _HatchGen.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _HatchGen.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _HatchGen.process_exception(error, method_name, class_name)
process_exception = _HatchGen.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopAbs
import OCC.Core.IntRes2d
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *

HatchGen_NoProblem = _HatchGen.HatchGen_NoProblem
HatchGen_TrimFailure = _HatchGen.HatchGen_TrimFailure
HatchGen_TransitionFailure = _HatchGen.HatchGen_TransitionFailure
HatchGen_IncoherentParity = _HatchGen.HatchGen_IncoherentParity
HatchGen_IncompatibleStates = _HatchGen.HatchGen_IncompatibleStates
HatchGen_TRUE = _HatchGen.HatchGen_TRUE
HatchGen_TOUCH = _HatchGen.HatchGen_TOUCH
HatchGen_TANGENT = _HatchGen.HatchGen_TANGENT
HatchGen_UNDETERMINED = _HatchGen.HatchGen_UNDETERMINED


class HatchGen_ErrorStatus(IntEnum):
	HatchGen_NoProblem = 0
	HatchGen_TrimFailure = 1
	HatchGen_TransitionFailure = 2
	HatchGen_IncoherentParity = 3
	HatchGen_IncompatibleStates = 4
HatchGen_NoProblem = HatchGen_ErrorStatus.HatchGen_NoProblem
HatchGen_TrimFailure = HatchGen_ErrorStatus.HatchGen_TrimFailure
HatchGen_TransitionFailure = HatchGen_ErrorStatus.HatchGen_TransitionFailure
HatchGen_IncoherentParity = HatchGen_ErrorStatus.HatchGen_IncoherentParity
HatchGen_IncompatibleStates = HatchGen_ErrorStatus.HatchGen_IncompatibleStates

class HatchGen_IntersectionType(IntEnum):
	HatchGen_TRUE = 0
	HatchGen_TOUCH = 1
	HatchGen_TANGENT = 2
	HatchGen_UNDETERMINED = 3
HatchGen_TRUE = HatchGen_IntersectionType.HatchGen_TRUE
HatchGen_TOUCH = HatchGen_IntersectionType.HatchGen_TOUCH
HatchGen_TANGENT = HatchGen_IntersectionType.HatchGen_TANGENT
HatchGen_UNDETERMINED = HatchGen_IntersectionType.HatchGen_UNDETERMINED

class HatchGen_Domains(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HatchGen_Domains, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HatchGen_Domains, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< HatchGen_Domain >::iterator":
        return _HatchGen.HatchGen_Domains_begin(self)

    def end(self) -> "NCollection_Sequence< HatchGen_Domain >::iterator":
        return _HatchGen.HatchGen_Domains_end(self)

    def cbegin(self) -> "NCollection_Sequence< HatchGen_Domain >::const_iterator":
        return _HatchGen.HatchGen_Domains_cbegin(self)

    def cend(self) -> "NCollection_Sequence< HatchGen_Domain >::const_iterator":
        return _HatchGen.HatchGen_Domains_cend(self)

    def __init__(self, *args):
        this = _HatchGen.new_HatchGen_Domains(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_Domains_Size(self)

    def Length(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_Domains_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_Domains_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_Domains_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _HatchGen.HatchGen_Domains_IsEmpty(self)

    def Reverse(self) -> "void":
        return _HatchGen.HatchGen_Domains_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _HatchGen.HatchGen_Domains_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_HatchGen.HatchGen_Domains_delNode)
    else:
        delNode = _HatchGen.HatchGen_Domains_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _HatchGen.HatchGen_Domains_Clear(self, theAllocator)

    def Assign(self, theOther: 'HatchGen_Domains') -> "NCollection_Sequence< HatchGen_Domain > &":
        return _HatchGen.HatchGen_Domains_Assign(self, theOther)

    def Set(self, theOther: 'HatchGen_Domains') -> "NCollection_Sequence< HatchGen_Domain > &":
        return _HatchGen.HatchGen_Domains_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _HatchGen.HatchGen_Domains_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _HatchGen.HatchGen_Domains_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _HatchGen.HatchGen_Domains_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _HatchGen.HatchGen_Domains_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _HatchGen.HatchGen_Domains_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'HatchGen_Domains') -> "void":
        return _HatchGen.HatchGen_Domains_Split(self, theIndex, theSeq)

    def First(self) -> "HatchGen_Domain const &":
        return _HatchGen.HatchGen_Domains_First(self)

    def ChangeFirst(self) -> "HatchGen_Domain &":
        return _HatchGen.HatchGen_Domains_ChangeFirst(self)

    def Last(self) -> "HatchGen_Domain const &":
        return _HatchGen.HatchGen_Domains_Last(self)

    def ChangeLast(self) -> "HatchGen_Domain &":
        return _HatchGen.HatchGen_Domains_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "HatchGen_Domain const &":
        return _HatchGen.HatchGen_Domains_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "HatchGen_Domain &":
        return _HatchGen.HatchGen_Domains_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "HatchGen_Domain &":
        return _HatchGen.HatchGen_Domains___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'HatchGen_Domain') -> "void":
        return _HatchGen.HatchGen_Domains_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _HatchGen.delete_HatchGen_Domains
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

HatchGen_Domains_swigregister = _HatchGen.HatchGen_Domains_swigregister
HatchGen_Domains_swigregister(HatchGen_Domains)

def HatchGen_Domains_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _HatchGen.HatchGen_Domains_delNode(theNode, theAl)
HatchGen_Domains_delNode = _HatchGen.HatchGen_Domains_delNode

class HatchGen_PointsOnElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HatchGen_PointsOnElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HatchGen_PointsOnElement, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< HatchGen_PointOnElement >::iterator":
        return _HatchGen.HatchGen_PointsOnElement_begin(self)

    def end(self) -> "NCollection_Sequence< HatchGen_PointOnElement >::iterator":
        return _HatchGen.HatchGen_PointsOnElement_end(self)

    def cbegin(self) -> "NCollection_Sequence< HatchGen_PointOnElement >::const_iterator":
        return _HatchGen.HatchGen_PointsOnElement_cbegin(self)

    def cend(self) -> "NCollection_Sequence< HatchGen_PointOnElement >::const_iterator":
        return _HatchGen.HatchGen_PointsOnElement_cend(self)

    def __init__(self, *args):
        this = _HatchGen.new_HatchGen_PointsOnElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_PointsOnElement_Size(self)

    def Length(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_PointsOnElement_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_PointsOnElement_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_PointsOnElement_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _HatchGen.HatchGen_PointsOnElement_IsEmpty(self)

    def Reverse(self) -> "void":
        return _HatchGen.HatchGen_PointsOnElement_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _HatchGen.HatchGen_PointsOnElement_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_HatchGen.HatchGen_PointsOnElement_delNode)
    else:
        delNode = _HatchGen.HatchGen_PointsOnElement_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _HatchGen.HatchGen_PointsOnElement_Clear(self, theAllocator)

    def Assign(self, theOther: 'HatchGen_PointsOnElement') -> "NCollection_Sequence< HatchGen_PointOnElement > &":
        return _HatchGen.HatchGen_PointsOnElement_Assign(self, theOther)

    def Set(self, theOther: 'HatchGen_PointsOnElement') -> "NCollection_Sequence< HatchGen_PointOnElement > &":
        return _HatchGen.HatchGen_PointsOnElement_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnElement_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnElement_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnElement_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnElement_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnElement_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'HatchGen_PointsOnElement') -> "void":
        return _HatchGen.HatchGen_PointsOnElement_Split(self, theIndex, theSeq)

    def First(self) -> "HatchGen_PointOnElement const &":
        return _HatchGen.HatchGen_PointsOnElement_First(self)

    def ChangeFirst(self) -> "HatchGen_PointOnElement &":
        return _HatchGen.HatchGen_PointsOnElement_ChangeFirst(self)

    def Last(self) -> "HatchGen_PointOnElement const &":
        return _HatchGen.HatchGen_PointsOnElement_Last(self)

    def ChangeLast(self) -> "HatchGen_PointOnElement &":
        return _HatchGen.HatchGen_PointsOnElement_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "HatchGen_PointOnElement const &":
        return _HatchGen.HatchGen_PointsOnElement_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "HatchGen_PointOnElement &":
        return _HatchGen.HatchGen_PointsOnElement_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "HatchGen_PointOnElement &":
        return _HatchGen.HatchGen_PointsOnElement___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'HatchGen_PointOnElement') -> "void":
        return _HatchGen.HatchGen_PointsOnElement_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _HatchGen.delete_HatchGen_PointsOnElement
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

HatchGen_PointsOnElement_swigregister = _HatchGen.HatchGen_PointsOnElement_swigregister
HatchGen_PointsOnElement_swigregister(HatchGen_PointsOnElement)

def HatchGen_PointsOnElement_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _HatchGen.HatchGen_PointsOnElement_delNode(theNode, theAl)
HatchGen_PointsOnElement_delNode = _HatchGen.HatchGen_PointsOnElement_delNode

class HatchGen_PointsOnHatching(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HatchGen_PointsOnHatching, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HatchGen_PointsOnHatching, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< HatchGen_PointOnHatching >::iterator":
        return _HatchGen.HatchGen_PointsOnHatching_begin(self)

    def end(self) -> "NCollection_Sequence< HatchGen_PointOnHatching >::iterator":
        return _HatchGen.HatchGen_PointsOnHatching_end(self)

    def cbegin(self) -> "NCollection_Sequence< HatchGen_PointOnHatching >::const_iterator":
        return _HatchGen.HatchGen_PointsOnHatching_cbegin(self)

    def cend(self) -> "NCollection_Sequence< HatchGen_PointOnHatching >::const_iterator":
        return _HatchGen.HatchGen_PointsOnHatching_cend(self)

    def __init__(self, *args):
        this = _HatchGen.new_HatchGen_PointsOnHatching(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_PointsOnHatching_Size(self)

    def Length(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_PointsOnHatching_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_PointsOnHatching_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _HatchGen.HatchGen_PointsOnHatching_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _HatchGen.HatchGen_PointsOnHatching_IsEmpty(self)

    def Reverse(self) -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_HatchGen.HatchGen_PointsOnHatching_delNode)
    else:
        delNode = _HatchGen.HatchGen_PointsOnHatching_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_Clear(self, theAllocator)

    def Assign(self, theOther: 'HatchGen_PointsOnHatching') -> "NCollection_Sequence< HatchGen_PointOnHatching > &":
        return _HatchGen.HatchGen_PointsOnHatching_Assign(self, theOther)

    def Set(self, theOther: 'HatchGen_PointsOnHatching') -> "NCollection_Sequence< HatchGen_PointOnHatching > &":
        return _HatchGen.HatchGen_PointsOnHatching_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'HatchGen_PointsOnHatching') -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_Split(self, theIndex, theSeq)

    def First(self) -> "HatchGen_PointOnHatching const &":
        return _HatchGen.HatchGen_PointsOnHatching_First(self)

    def ChangeFirst(self) -> "HatchGen_PointOnHatching &":
        return _HatchGen.HatchGen_PointsOnHatching_ChangeFirst(self)

    def Last(self) -> "HatchGen_PointOnHatching const &":
        return _HatchGen.HatchGen_PointsOnHatching_Last(self)

    def ChangeLast(self) -> "HatchGen_PointOnHatching &":
        return _HatchGen.HatchGen_PointsOnHatching_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "HatchGen_PointOnHatching const &":
        return _HatchGen.HatchGen_PointsOnHatching_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "HatchGen_PointOnHatching &":
        return _HatchGen.HatchGen_PointsOnHatching_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "HatchGen_PointOnHatching &":
        return _HatchGen.HatchGen_PointsOnHatching___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'HatchGen_PointOnHatching') -> "void":
        return _HatchGen.HatchGen_PointsOnHatching_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _HatchGen.delete_HatchGen_PointsOnHatching
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

HatchGen_PointsOnHatching_swigregister = _HatchGen.HatchGen_PointsOnHatching_swigregister
HatchGen_PointsOnHatching_swigregister(HatchGen_PointsOnHatching)

def HatchGen_PointsOnHatching_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _HatchGen.HatchGen_PointsOnHatching_delNode(theNode, theAl)
HatchGen_PointsOnHatching_delNode = _HatchGen.HatchGen_PointsOnHatching_delNode

class HatchGen_Domain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HatchGen_Domain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HatchGen_Domain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an infinite domain.

        Returns
        -------
        None

        Creates a domain for the curve associated to a hatching.

        Parameters
        ----------
        P1: HatchGen_PointOnHatching
        P2: HatchGen_PointOnHatching

        Returns
        -------
        None

        Creates a semi-infinite domain for the curve associated to a hatching. the `first' flag means that the given point is the first one.

        Parameters
        ----------
        P: HatchGen_PointOnHatching
        First: bool

        Returns
        -------
        None

        """
        this = _HatchGen.new_HatchGen_Domain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dump(self, *args) -> "void":
        """
        Dump of the domain.

        Parameters
        ----------
        Index: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_Domain_Dump(self, *args)


    def FirstPoint(self, *args) -> "HatchGen_PointOnHatching const &":
        """
        Returns the first point of the domain. the exception domainerror is raised if hasfirstpoint returns false.

        Returns
        -------
        HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_Domain_FirstPoint(self, *args)


    def HasFirstPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if the domain has a first point.

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_Domain_HasFirstPoint(self, *args)


    def HasSecondPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if the domain has a second point.

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_Domain_HasSecondPoint(self, *args)


    def SecondPoint(self, *args) -> "HatchGen_PointOnHatching const &":
        """
        Returns the second point of the domain. the exception domainerror is raised if hassecondpoint returns false.

        Returns
        -------
        HatchGen_PointOnHatching

        """
        return _HatchGen.HatchGen_Domain_SecondPoint(self, *args)


    def SetFirstPoint(self, *args) -> "void":
        """
        Sets the first point of the domain.

        Parameters
        ----------
        P: HatchGen_PointOnHatching

        Returns
        -------
        None

        Sets the first point of the domain at the infinite.

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_Domain_SetFirstPoint(self, *args)


    def SetPoints(self, *args) -> "void":
        """
        Sets the first and the second points of the domain.

        Parameters
        ----------
        P1: HatchGen_PointOnHatching
        P2: HatchGen_PointOnHatching

        Returns
        -------
        None

        Sets the first and the second points of the domain as the infinite.

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_Domain_SetPoints(self, *args)


    def SetSecondPoint(self, *args) -> "void":
        """
        Sets the second point of the domain.

        Parameters
        ----------
        P: HatchGen_PointOnHatching

        Returns
        -------
        None

        Sets the second point of the domain at the infinite.

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_Domain_SetSecondPoint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_Domain
    __del__ = lambda self: None
HatchGen_Domain_swigregister = _HatchGen.HatchGen_Domain_swigregister
HatchGen_Domain_swigregister(HatchGen_Domain)

class HatchGen_IntersectionPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HatchGen_IntersectionPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HatchGen_IntersectionPoint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Dump(self, *args) -> "void":
        """
        Dump of the point on element.

        Parameters
        ----------
        Index: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_IntersectionPoint_Dump(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of the supporting curve.

        Returns
        -------
        int

        """
        return _HatchGen.HatchGen_IntersectionPoint_Index(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        Returns the parameter on the curve.

        Returns
        -------
        float

        """
        return _HatchGen.HatchGen_IntersectionPoint_Parameter(self, *args)


    def Position(self, *args) -> "TopAbs_Orientation":
        """
        Returns the position of the point on the curve.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HatchGen.HatchGen_IntersectionPoint_Position(self, *args)


    def SegmentBeginning(self, *args) -> "Standard_Boolean":
        """
        Returns the flag that the point is the beginning of a segment.

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_IntersectionPoint_SegmentBeginning(self, *args)


    def SegmentEnd(self, *args) -> "Standard_Boolean":
        """
        Returns the flag that the point is the end of a segment.

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_IntersectionPoint_SegmentEnd(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        Sets the index of the supporting curve.

        Parameters
        ----------
        Index: int

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetIndex(self, *args)


    def SetParameter(self, *args) -> "void":
        """
        Sets the parameter on the curve.

        Parameters
        ----------
        Parameter: float

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetParameter(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        Sets the position of the point on the curve.

        Parameters
        ----------
        Position: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetPosition(self, *args)


    def SetSegmentBeginning(self, *args) -> "void":
        """
        Sets the flag that the point is the beginning of a segment.

        Parameters
        ----------
        State: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetSegmentBeginning(self, *args)


    def SetSegmentEnd(self, *args) -> "void":
        """
        Sets the flag that the point is the end of a segment.

        Parameters
        ----------
        State: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetSegmentEnd(self, *args)


    def SetStateAfter(self, *args) -> "void":
        """
        Sets the transition state after the intersection.

        Parameters
        ----------
        State: TopAbs_State

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetStateAfter(self, *args)


    def SetStateBefore(self, *args) -> "void":
        """
        Sets the transition state before the intersection.

        Parameters
        ----------
        State: TopAbs_State

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_IntersectionPoint_SetStateBefore(self, *args)


    def StateAfter(self, *args) -> "TopAbs_State":
        """
        Returns the transition state after of the intersection.

        Returns
        -------
        TopAbs_State

        """
        return _HatchGen.HatchGen_IntersectionPoint_StateAfter(self, *args)


    def StateBefore(self, *args) -> "TopAbs_State":
        """
        Returns the transition state before the intersection.

        Returns
        -------
        TopAbs_State

        """
        return _HatchGen.HatchGen_IntersectionPoint_StateBefore(self, *args)


    __repr__ = _dumps_object

HatchGen_IntersectionPoint_swigregister = _HatchGen.HatchGen_IntersectionPoint_swigregister
HatchGen_IntersectionPoint_swigregister(HatchGen_IntersectionPoint)

class HatchGen_PointOnElement(HatchGen_IntersectionPoint):
    __swig_setmethods__ = {}
    for _s in [HatchGen_IntersectionPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HatchGen_PointOnElement, name, value)
    __swig_getmethods__ = {}
    for _s in [HatchGen_IntersectionPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HatchGen_PointOnElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        ---purpose; creates an empty point on element.

        Returns
        -------
        None

        Creates a point from an intersection point.

        Parameters
        ----------
        Point: IntRes2d_IntersectionPoint

        Returns
        -------
        None

        """
        this = _HatchGen.new_HatchGen_PointOnElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IntersectionType(self, *args) -> "HatchGen_IntersectionType":
        """
        Returns the intersection type at this point.

        Returns
        -------
        HatchGen_IntersectionType

        """
        return _HatchGen.HatchGen_PointOnElement_IntersectionType(self, *args)


    def IsDifferent(self, *args) -> "Standard_Boolean":
        """
        Tests if the point is different from an other.

        Parameters
        ----------
        Point: HatchGen_PointOnElement
        Confusion: float

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_PointOnElement_IsDifferent(self, *args)


    def IsIdentical(self, *args) -> "Standard_Boolean":
        """
        Tests if the point is identical to an other. that is to say : p1.myindex = p2.myindex abs (p1.myparam - p2.myparam) <= confusion p1.myposit = p2.myposit p1.mybefore = p2.mybefore p1.myafter = p2.myafter p1.mysegbeg = p2.mysegbeg p1.mysegend = p2.mysegend p1.mytype = p2.mytype.

        Parameters
        ----------
        Point: HatchGen_PointOnElement
        Confusion: float

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_PointOnElement_IsIdentical(self, *args)


    def SetIntersectionType(self, *args) -> "void":
        """
        Sets the intersection type at this point.

        Parameters
        ----------
        Type: HatchGen_IntersectionType

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_PointOnElement_SetIntersectionType(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_PointOnElement
    __del__ = lambda self: None
HatchGen_PointOnElement_swigregister = _HatchGen.HatchGen_PointOnElement_swigregister
HatchGen_PointOnElement_swigregister(HatchGen_PointOnElement)

class HatchGen_PointOnHatching(HatchGen_IntersectionPoint):
    __swig_setmethods__ = {}
    for _s in [HatchGen_IntersectionPoint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HatchGen_PointOnHatching, name, value)
    __swig_getmethods__ = {}
    for _s in [HatchGen_IntersectionPoint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HatchGen_PointOnHatching, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty point.

        Returns
        -------
        None

        Creates a point from an intersection point.

        Parameters
        ----------
        Point: IntRes2d_IntersectionPoint

        Returns
        -------
        None

        """
        this = _HatchGen.new_HatchGen_PointOnHatching(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddPoint(self, *args) -> "void":
        """
        Adds a point on element to the point.

        Parameters
        ----------
        Point: HatchGen_PointOnElement
        Confusion: float

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_PointOnHatching_AddPoint(self, *args)


    def ClrPoints(self, *args) -> "void":
        """
        Removes all the points on element of the point.

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_PointOnHatching_ClrPoints(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        Tests if the point is equal to an other. a point on hatching p1 is said to be equal to an other p2 if : | p2.myparam - p1.myparam | <= confusion.

        Parameters
        ----------
        Point: HatchGen_PointOnHatching
        Confusion: float

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_PointOnHatching_IsEqual(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        Tests if the point is greater than an other. a point on hatching p1 is said to be greater than an other p2 if : p1.myparam - p2.myparam > confusion.

        Parameters
        ----------
        Point: HatchGen_PointOnHatching
        Confusion: float

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_PointOnHatching_IsGreater(self, *args)


    def IsLower(self, *args) -> "Standard_Boolean":
        """
        Tests if the point is lower than an other. a point on hatching p1 is said to be lower than an other p2 if : p2.myparam - p1.myparam > confusion.

        Parameters
        ----------
        Point: HatchGen_PointOnHatching
        Confusion: float

        Returns
        -------
        bool

        """
        return _HatchGen.HatchGen_PointOnHatching_IsLower(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of elements intersecting the hatching at this point.

        Returns
        -------
        int

        """
        return _HatchGen.HatchGen_PointOnHatching_NbPoints(self, *args)


    def Point(self, *args) -> "HatchGen_PointOnElement const &":
        """
        Returns the index-th point on element of the point. the exception outofrange is raised if index > nbpoints.

        Parameters
        ----------
        Index: int

        Returns
        -------
        HatchGen_PointOnElement

        """
        return _HatchGen.HatchGen_PointOnHatching_Point(self, *args)


    def RemPoint(self, *args) -> "void":
        """
        Removes the index-th point on element of the point. the exception outofrange is raised if index > nbpoints.

        Parameters
        ----------
        Index: int

        Returns
        -------
        None

        """
        return _HatchGen.HatchGen_PointOnHatching_RemPoint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _HatchGen.delete_HatchGen_PointOnHatching
    __del__ = lambda self: None
HatchGen_PointOnHatching_swigregister = _HatchGen.HatchGen_PointOnHatching_swigregister
HatchGen_PointOnHatching_swigregister(HatchGen_PointOnHatching)



# This file is compatible with both classic and new-style classes.


