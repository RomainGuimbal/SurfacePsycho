# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GccEnt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_gccent.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GccEnt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GccEnt')
    _GccEnt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GccEnt', [dirname(__file__)])
        except ImportError:
            import _GccEnt
            return _GccEnt
        try:
            _mod = imp.load_module('_GccEnt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GccEnt = swig_import_helper()
    del swig_import_helper
else:
    import _GccEnt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GccEnt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _GccEnt.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GccEnt.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GccEnt.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _GccEnt.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _GccEnt.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _GccEnt.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _GccEnt.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _GccEnt.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _GccEnt.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GccEnt.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _GccEnt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _GccEnt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GccEnt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GccEnt.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GccEnt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _GccEnt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GccEnt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GccEnt.process_exception(error, method_name, class_name)
process_exception = _GccEnt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *

GccEnt_unqualified = _GccEnt.GccEnt_unqualified
GccEnt_enclosing = _GccEnt.GccEnt_enclosing
GccEnt_enclosed = _GccEnt.GccEnt_enclosed
GccEnt_outside = _GccEnt.GccEnt_outside
GccEnt_noqualifier = _GccEnt.GccEnt_noqualifier


class GccEnt_Position(IntEnum):
	GccEnt_unqualified = 0
	GccEnt_enclosing = 1
	GccEnt_enclosed = 2
	GccEnt_outside = 3
	GccEnt_noqualifier = 4
GccEnt_unqualified = GccEnt_Position.GccEnt_unqualified
GccEnt_enclosing = GccEnt_Position.GccEnt_enclosing
GccEnt_enclosed = GccEnt_Position.GccEnt_enclosed
GccEnt_outside = GccEnt_Position.GccEnt_outside
GccEnt_noqualifier = GccEnt_Position.GccEnt_noqualifier

class GccEnt_Array1OfPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccEnt_Array1OfPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GccEnt_Array1OfPosition, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< enum GccEnt_Position >::iterator":
        return _GccEnt.GccEnt_Array1OfPosition_begin(self)

    def end(self) -> "NCollection_Array1< enum GccEnt_Position >::iterator":
        return _GccEnt.GccEnt_Array1OfPosition_end(self)

    def cbegin(self) -> "NCollection_Array1< enum GccEnt_Position >::const_iterator":
        return _GccEnt.GccEnt_Array1OfPosition_cbegin(self)

    def cend(self) -> "NCollection_Array1< enum GccEnt_Position >::const_iterator":
        return _GccEnt.GccEnt_Array1OfPosition_cend(self)

    def __init__(self, *args):
        this = _GccEnt.new_GccEnt_Array1OfPosition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'GccEnt_Position const &') -> "void":
        return _GccEnt.GccEnt_Array1OfPosition_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _GccEnt.GccEnt_Array1OfPosition_Size(self)

    def Length(self) -> "Standard_Integer":
        return _GccEnt.GccEnt_Array1OfPosition_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _GccEnt.GccEnt_Array1OfPosition_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _GccEnt.GccEnt_Array1OfPosition_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _GccEnt.GccEnt_Array1OfPosition_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _GccEnt.GccEnt_Array1OfPosition_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _GccEnt.GccEnt_Array1OfPosition_IsAllocated(self)

    def Assign(self, theOther: 'GccEnt_Array1OfPosition') -> "NCollection_Array1< GccEnt_Position > &":
        return _GccEnt.GccEnt_Array1OfPosition_Assign(self, theOther)

    def Move(self, theOther: 'GccEnt_Array1OfPosition') -> "NCollection_Array1< GccEnt_Position > &":
        return _GccEnt.GccEnt_Array1OfPosition_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< GccEnt_Position > &":
        return _GccEnt.GccEnt_Array1OfPosition_Set(self, *args)

    def First(self) -> "GccEnt_Position const &":
        return _GccEnt.GccEnt_Array1OfPosition_First(self)

    def ChangeFirst(self) -> "GccEnt_Position &":
        return _GccEnt.GccEnt_Array1OfPosition_ChangeFirst(self)

    def Last(self) -> "GccEnt_Position const &":
        return _GccEnt.GccEnt_Array1OfPosition_Last(self)

    def ChangeLast(self) -> "GccEnt_Position &":
        return _GccEnt.GccEnt_Array1OfPosition_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "GccEnt_Position const &":
        return _GccEnt.GccEnt_Array1OfPosition_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "GccEnt_Position &":
        return _GccEnt.GccEnt_Array1OfPosition_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "GccEnt_Position &":
        return _GccEnt.GccEnt_Array1OfPosition___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'GccEnt_Position const &') -> "void":
        return _GccEnt.GccEnt_Array1OfPosition_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _GccEnt.GccEnt_Array1OfPosition_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _GccEnt.delete_GccEnt_Array1OfPosition
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

GccEnt_Array1OfPosition_swigregister = _GccEnt.GccEnt_Array1OfPosition_swigregister
GccEnt_Array1OfPosition_swigregister(GccEnt_Array1OfPosition)

class gccent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gccent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gccent, name)
    __repr__ = _swig_repr

    def Enclosed(*args) -> "GccEnt_QualifiedCirc":
        """
        Constructs a qualified line, so that the solution computed by a construction algorithm using the qualified circle or line is enclosed by the circle or line.

        Parameters
        ----------
        Obj: gp_Lin2d

        Returns
        -------
        GccEnt_QualifiedLin

        Constructs a qualified circle so that the solution computed by a construction algorithm using the qualified circle or line is enclosed by the circle or line.

        Parameters
        ----------
        Obj: gp_Circ2d

        Returns
        -------
        GccEnt_QualifiedCirc

        """
        return _GccEnt.gccent_Enclosed(*args)

    Enclosed = staticmethod(Enclosed)

    def Enclosing(*args) -> "GccEnt_QualifiedCirc":
        """
        Constructs such a qualified circle that the solution computed by a construction algorithm using the qualified circle encloses the circle.

        Parameters
        ----------
        Obj: gp_Circ2d

        Returns
        -------
        GccEnt_QualifiedCirc

        """
        return _GccEnt.gccent_Enclosing(*args)

    Enclosing = staticmethod(Enclosing)

    def Outside(*args) -> "GccEnt_QualifiedCirc":
        """
        Constructs a qualified line, so that the solution computed by a construction algorithm using the qualified circle or line and the circle or line are external to one another.

        Parameters
        ----------
        Obj: gp_Lin2d

        Returns
        -------
        GccEnt_QualifiedLin

        Constructs a qualified circle so that the solution computed by a construction algorithm using the qualified circle or line and the circle or line are external to one another.

        Parameters
        ----------
        Obj: gp_Circ2d

        Returns
        -------
        GccEnt_QualifiedCirc

        """
        return _GccEnt.gccent_Outside(*args)

    Outside = staticmethod(Outside)

    def PositionFromString(*args) -> "GccEnt_Position &":
        """
        Returns the position from the given string identifier (using case-insensitive comparison). @param thepositionstring string identifier returns position or gccent_unqualified if string identifier is invalid.

        Parameters
        ----------
        thePositionString: char *

        Returns
        -------
        GccEnt_Position

        Determines the position from the given string identifier (using case-insensitive comparison). @param thepositionstring string identifier @param theposition detected shape type returns true if string identifier is known.

        Parameters
        ----------
        thePositionString: char *

        Returns
        -------
        thePosition: GccEnt_Position

        """
        return _GccEnt.gccent_PositionFromString(*args)

    PositionFromString = staticmethod(PositionFromString)

    def PositionToString(*args) -> "char const *":
        """
        Returns the string name for a given position. @param theposition position type returns string identifier from the list unqualified enclosing enclosed outside noqualifier.

        Parameters
        ----------
        thePosition: GccEnt_Position

        Returns
        -------
        char *

        """
        return _GccEnt.gccent_PositionToString(*args)

    PositionToString = staticmethod(PositionToString)

    def Unqualified(*args) -> "GccEnt_QualifiedCirc":
        """
        Constructs a qualified line, so that the relative position to the circle or line of the solution computed by a construction algorithm using the qualified circle or line is not qualified, i.e. all solutions apply.

        Parameters
        ----------
        Obj: gp_Lin2d

        Returns
        -------
        GccEnt_QualifiedLin

        Constructs a qualified circle so that the relative position to the circle or line of the solution computed by a construction algorithm using the qualified circle or line is not qualified, i.e. all solutions apply.

        Parameters
        ----------
        Obj: gp_Circ2d

        Returns
        -------
        GccEnt_QualifiedCirc

        """
        return _GccEnt.gccent_Unqualified(*args)

    Unqualified = staticmethod(Unqualified)

    __repr__ = _dumps_object


    def __init__(self):
        this = _GccEnt.new_gccent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GccEnt.delete_gccent
    __del__ = lambda self: None
gccent_swigregister = _GccEnt.gccent_swigregister
gccent_swigregister(gccent)

def gccent_Enclosed(*args) -> "GccEnt_QualifiedCirc":
    """
    Constructs a qualified line, so that the solution computed by a construction algorithm using the qualified circle or line is enclosed by the circle or line.

    Parameters
    ----------
    Obj: gp_Lin2d

    Returns
    -------
    GccEnt_QualifiedLin

    Constructs a qualified circle so that the solution computed by a construction algorithm using the qualified circle or line is enclosed by the circle or line.

    Parameters
    ----------
    Obj: gp_Circ2d

    Returns
    -------
    GccEnt_QualifiedCirc

    """
    return _GccEnt.gccent_Enclosed(*args)

def gccent_Enclosing(*args) -> "GccEnt_QualifiedCirc":
    """
    Constructs such a qualified circle that the solution computed by a construction algorithm using the qualified circle encloses the circle.

    Parameters
    ----------
    Obj: gp_Circ2d

    Returns
    -------
    GccEnt_QualifiedCirc

    """
    return _GccEnt.gccent_Enclosing(*args)

def gccent_Outside(*args) -> "GccEnt_QualifiedCirc":
    """
    Constructs a qualified line, so that the solution computed by a construction algorithm using the qualified circle or line and the circle or line are external to one another.

    Parameters
    ----------
    Obj: gp_Lin2d

    Returns
    -------
    GccEnt_QualifiedLin

    Constructs a qualified circle so that the solution computed by a construction algorithm using the qualified circle or line and the circle or line are external to one another.

    Parameters
    ----------
    Obj: gp_Circ2d

    Returns
    -------
    GccEnt_QualifiedCirc

    """
    return _GccEnt.gccent_Outside(*args)

def gccent_PositionFromString(*args) -> "GccEnt_Position &":
    """
    Returns the position from the given string identifier (using case-insensitive comparison). @param thepositionstring string identifier returns position or gccent_unqualified if string identifier is invalid.

    Parameters
    ----------
    thePositionString: char *

    Returns
    -------
    GccEnt_Position

    Determines the position from the given string identifier (using case-insensitive comparison). @param thepositionstring string identifier @param theposition detected shape type returns true if string identifier is known.

    Parameters
    ----------
    thePositionString: char *

    Returns
    -------
    thePosition: GccEnt_Position

    """
    return _GccEnt.gccent_PositionFromString(*args)

def gccent_PositionToString(*args) -> "char const *":
    """
    Returns the string name for a given position. @param theposition position type returns string identifier from the list unqualified enclosing enclosed outside noqualifier.

    Parameters
    ----------
    thePosition: GccEnt_Position

    Returns
    -------
    char *

    """
    return _GccEnt.gccent_PositionToString(*args)

def gccent_Unqualified(*args) -> "GccEnt_QualifiedCirc":
    """
    Constructs a qualified line, so that the relative position to the circle or line of the solution computed by a construction algorithm using the qualified circle or line is not qualified, i.e. all solutions apply.

    Parameters
    ----------
    Obj: gp_Lin2d

    Returns
    -------
    GccEnt_QualifiedLin

    Constructs a qualified circle so that the relative position to the circle or line of the solution computed by a construction algorithm using the qualified circle or line is not qualified, i.e. all solutions apply.

    Parameters
    ----------
    Obj: gp_Circ2d

    Returns
    -------
    GccEnt_QualifiedCirc

    """
    return _GccEnt.gccent_Unqualified(*args)

class GccEnt_QualifiedCirc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccEnt_QualifiedCirc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GccEnt_QualifiedCirc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a qualified circle by assigning the qualifier qualifier to the circle qualified. qualifier may be: - gccent_enclosing if the solution computed by a construction algorithm using the qualified circle encloses the circle, or - gccent_enclosed if the solution is enclosed by the circle, or - gccent_outside if both the solution and the circle are external to one another, or - gccent_unqualified if all solutions apply.

        Parameters
        ----------
        Qualified: gp_Circ2d
        Qualifier: GccEnt_Position

        Returns
        -------
        None

        """
        this = _GccEnt.new_GccEnt_QualifiedCirc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsEnclosed(self, *args) -> "Standard_Boolean":
        """
        Returns true if the solution computed by a construction algorithm using this qualified circle is enclosed by the circle.

        Returns
        -------
        bool

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsEnclosed(self, *args)


    def IsEnclosing(self, *args) -> "Standard_Boolean":
        """
        Returns true if the solution computed by a construction algorithm using this qualified circle encloses the circle.

        Returns
        -------
        bool

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsEnclosing(self, *args)


    def IsOutside(self, *args) -> "Standard_Boolean":
        """
        Returns true if both the solution computed by a construction algorithm using this qualified circle and the circle are external to one another.

        Returns
        -------
        bool

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsOutside(self, *args)


    def IsUnqualified(self, *args) -> "Standard_Boolean":
        """
        Returns true if the circ2d is unqualified and false in the other cases.

        Returns
        -------
        bool

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsUnqualified(self, *args)


    def Qualified(self, *args) -> "gp_Circ2d":
        """
        Returns a 2d circle to which the qualifier is assigned.

        Returns
        -------
        gp_Circ2d

        """
        return _GccEnt.GccEnt_QualifiedCirc_Qualified(self, *args)


    def Qualifier(self, *args) -> "GccEnt_Position":
        """
        Returns - the qualifier of this qualified circle, if it is enclosing, enclosed or outside, or - gccent_noqualifier if it is unqualified.

        Returns
        -------
        GccEnt_Position

        """
        return _GccEnt.GccEnt_QualifiedCirc_Qualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccEnt.delete_GccEnt_QualifiedCirc
    __del__ = lambda self: None
GccEnt_QualifiedCirc_swigregister = _GccEnt.GccEnt_QualifiedCirc_swigregister
GccEnt_QualifiedCirc_swigregister(GccEnt_QualifiedCirc)

class GccEnt_QualifiedLin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GccEnt_QualifiedLin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GccEnt_QualifiedLin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructs a qualified line by assigning the qualifier qualifier to the line qualified. qualifier may be: - gccent_enclosed if the solution is enclosed by the line, or - gccent_outside if both the solution and the line are external to one another, or - gccent_unqualified if all solutions apply. note : the interior of a line is defined as the left-hand side of the line in relation to its orientation.

        Parameters
        ----------
        Qualified: gp_Lin2d
        Qualifier: GccEnt_Position

        Returns
        -------
        None

        """
        this = _GccEnt.new_GccEnt_QualifiedLin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsEnclosed(self, *args) -> "Standard_Boolean":
        """
        Returns true if the solution is enclosed in the lin2d and false in the other cases.

        Returns
        -------
        bool

        """
        return _GccEnt.GccEnt_QualifiedLin_IsEnclosed(self, *args)


    def IsOutside(self, *args) -> "Standard_Boolean":
        """
        Returns true if the solution is outside the lin2d and false in the other cases.

        Returns
        -------
        bool

        """
        return _GccEnt.GccEnt_QualifiedLin_IsOutside(self, *args)


    def IsUnqualified(self, *args) -> "Standard_Boolean":
        """
        Returns true if the solution is unqualified and false in the other cases.

        Returns
        -------
        bool

        """
        return _GccEnt.GccEnt_QualifiedLin_IsUnqualified(self, *args)


    def Qualified(self, *args) -> "gp_Lin2d":
        """
        Returns a 2d line to which the qualifier is assigned.

        Returns
        -------
        gp_Lin2d

        """
        return _GccEnt.GccEnt_QualifiedLin_Qualified(self, *args)


    def Qualifier(self, *args) -> "GccEnt_Position":
        """
        Returns the qualifier of this qualified line, if it is 'enclosed' or 'outside', or - gccent_noqualifier if it is unqualified.

        Returns
        -------
        GccEnt_Position

        """
        return _GccEnt.GccEnt_QualifiedLin_Qualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccEnt.delete_GccEnt_QualifiedLin
    __del__ = lambda self: None
GccEnt_QualifiedLin_swigregister = _GccEnt.GccEnt_QualifiedLin_swigregister
GccEnt_QualifiedLin_swigregister(GccEnt_QualifiedLin)



# This file is compatible with both classic and new-style classes.


