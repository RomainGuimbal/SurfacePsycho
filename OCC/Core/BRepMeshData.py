# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepMeshData module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_brepmeshdata.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepMeshData')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepMeshData')
    _BRepMeshData = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepMeshData', [dirname(__file__)])
        except ImportError:
            import _BRepMeshData
            return _BRepMeshData
        try:
            _mod = imp.load_module('_BRepMeshData', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepMeshData = swig_import_helper()
    del swig_import_helper
else:
    import _BRepMeshData
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepMeshData.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BRepMeshData.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepMeshData.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BRepMeshData.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BRepMeshData.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BRepMeshData.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BRepMeshData.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BRepMeshData.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BRepMeshData.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BRepMeshData.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepMeshData.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepMeshData.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BRepMeshData.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepMeshData.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BRepMeshData.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BRepMeshData.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BRepMeshData.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepMeshData.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BRepMeshData.process_exception(error, method_name, class_name)
process_exception = _BRepMeshData.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.IMeshData
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor

from enum import IntEnum
from OCC.Core.Exception import *



class BRepMeshData_Curve(OCC.Core.IMeshData.IMeshData_Curve):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMeshData_Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMeshData_Curve, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    __repr__ = _dumps_object

    @methodnotwrapped
    def B(self):
    	pass

    @methodnotwrapped
    def R(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def p(self):
    	pass

    @methodnotwrapped
    def M(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def s(self):
    	pass

    @methodnotwrapped
    def h(self):
    	pass

    @methodnotwrapped
    def D(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def t(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def _(self):
    	pass

    @methodnotwrapped
    def C(self):
    	pass

    @methodnotwrapped
    def u(self):
    	pass

    @methodnotwrapped
    def r(self):
    	pass

    @methodnotwrapped
    def v(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    __swig_destroy__ = _BRepMeshData.delete_BRepMeshData_Curve
    __del__ = lambda self: None
BRepMeshData_Curve_swigregister = _BRepMeshData.BRepMeshData_Curve_swigregister
BRepMeshData_Curve_swigregister(BRepMeshData_Curve)

class BRepMeshData_Edge(OCC.Core.IMeshData.IMeshData_Edge):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Edge]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMeshData_Edge, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Edge]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMeshData_Edge, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetPCurve(self, *args) -> "IMeshData::IPCurveHandle const &":
        """
        Returns pcurve for the specified discrete face.

        Parameters
        ----------
        theDFace: IMeshData::IFacePtr
        theOrientation: TopAbs_Orientation

        Returns
        -------
        IMeshData::IPCurveHandle

        Returns pcurve with the given index.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        IMeshData::IPCurveHandle

        """
        return _BRepMeshData.BRepMeshData_Edge_GetPCurve(self, *args)


    __repr__ = _dumps_object

    @methodnotwrapped
    def B(self):
    	pass

    @methodnotwrapped
    def R(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def p(self):
    	pass

    @methodnotwrapped
    def M(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def s(self):
    	pass

    @methodnotwrapped
    def h(self):
    	pass

    @methodnotwrapped
    def D(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def t(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def _(self):
    	pass

    @methodnotwrapped
    def E(self):
    	pass

    @methodnotwrapped
    def d(self):
    	pass

    @methodnotwrapped
    def g(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    __swig_destroy__ = _BRepMeshData.delete_BRepMeshData_Edge
    __del__ = lambda self: None
BRepMeshData_Edge_swigregister = _BRepMeshData.BRepMeshData_Edge_swigregister
BRepMeshData_Edge_swigregister(BRepMeshData_Edge)

class BRepMeshData_Face(OCC.Core.IMeshData.IMeshData_Face):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Face]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMeshData_Face, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Face]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMeshData_Face, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    __repr__ = _dumps_object

    @methodnotwrapped
    def B(self):
    	pass

    @methodnotwrapped
    def R(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def p(self):
    	pass

    @methodnotwrapped
    def M(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def s(self):
    	pass

    @methodnotwrapped
    def h(self):
    	pass

    @methodnotwrapped
    def D(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def t(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def _(self):
    	pass

    @methodnotwrapped
    def F(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def c(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    __swig_destroy__ = _BRepMeshData.delete_BRepMeshData_Face
    __del__ = lambda self: None
BRepMeshData_Face_swigregister = _BRepMeshData.BRepMeshData_Face_swigregister
BRepMeshData_Face_swigregister(BRepMeshData_Face)

class BRepMeshData_Model(OCC.Core.IMeshData.IMeshData_Model):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Model]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMeshData_Model, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Model]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMeshData_Model, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor. initializes empty model.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _BRepMeshData.new_BRepMeshData_Model(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetMaxSize(self, *args) -> "void":
        """
        Sets maximum size of shape's bounding box.

        Parameters
        ----------
        theValue: float

        Returns
        -------
        None

        """
        return _BRepMeshData.BRepMeshData_Model_SetMaxSize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepMeshData.delete_BRepMeshData_Model
    __del__ = lambda self: None
BRepMeshData_Model_swigregister = _BRepMeshData.BRepMeshData_Model_swigregister
BRepMeshData_Model_swigregister(BRepMeshData_Model)

class BRepMeshData_PCurve(OCC.Core.IMeshData.IMeshData_PCurve):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_PCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMeshData_PCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_PCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMeshData_PCurve, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    __repr__ = _dumps_object

    @methodnotwrapped
    def B(self):
    	pass

    @methodnotwrapped
    def R(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def p(self):
    	pass

    @methodnotwrapped
    def M(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def s(self):
    	pass

    @methodnotwrapped
    def h(self):
    	pass

    @methodnotwrapped
    def D(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def t(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def _(self):
    	pass

    @methodnotwrapped
    def P(self):
    	pass

    @methodnotwrapped
    def C(self):
    	pass

    @methodnotwrapped
    def u(self):
    	pass

    @methodnotwrapped
    def r(self):
    	pass

    @methodnotwrapped
    def v(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    __swig_destroy__ = _BRepMeshData.delete_BRepMeshData_PCurve
    __del__ = lambda self: None
BRepMeshData_PCurve_swigregister = _BRepMeshData.BRepMeshData_PCurve_swigregister
BRepMeshData_PCurve_swigregister(BRepMeshData_PCurve)

class BRepMeshData_Wire(OCC.Core.IMeshData.IMeshData_Wire):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Wire]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRepMeshData_Wire, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Wire]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRepMeshData_Wire, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    __repr__ = _dumps_object

    @methodnotwrapped
    def B(self):
    	pass

    @methodnotwrapped
    def R(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def p(self):
    	pass

    @methodnotwrapped
    def M(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    @methodnotwrapped
    def s(self):
    	pass

    @methodnotwrapped
    def h(self):
    	pass

    @methodnotwrapped
    def D(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def t(self):
    	pass

    @methodnotwrapped
    def a(self):
    	pass

    @methodnotwrapped
    def _(self):
    	pass

    @methodnotwrapped
    def W(self):
    	pass

    @methodnotwrapped
    def i(self):
    	pass

    @methodnotwrapped
    def r(self):
    	pass

    @methodnotwrapped
    def e(self):
    	pass

    __swig_destroy__ = _BRepMeshData.delete_BRepMeshData_Wire
    __del__ = lambda self: None
BRepMeshData_Wire_swigregister = _BRepMeshData.BRepMeshData_Wire_swigregister
BRepMeshData_Wire_swigregister(BRepMeshData_Wire)



# This file is compatible with both classic and new-style classes.


