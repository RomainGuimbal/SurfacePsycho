# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
NCollection module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_ncollection.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _NCollection
else:
    import _NCollection

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NCollection.delete_SwigPyIterator

    def value(self):
        return _NCollection.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _NCollection.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _NCollection.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _NCollection.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _NCollection.SwigPyIterator_equal(self, x)

    def copy(self):
        return _NCollection.SwigPyIterator_copy(self)

    def next(self):
        return _NCollection.SwigPyIterator_next(self)

    def __next__(self):
        return _NCollection.SwigPyIterator___next__(self)

    def previous(self):
        return _NCollection.SwigPyIterator_previous(self)

    def advance(self, n):
        return _NCollection.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _NCollection.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _NCollection.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _NCollection.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _NCollection.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _NCollection.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _NCollection.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _NCollection:
_NCollection.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _NCollection.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _NCollection.ios_base_erase_event
    imbue_event = _NCollection.ios_base_imbue_event
    copyfmt_event = _NCollection.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _NCollection.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _NCollection.ios_base_flags(self, *args)

    def setf(self, *args):
        return _NCollection.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _NCollection.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _NCollection.ios_base_precision(self, *args)

    def width(self, *args):
        return _NCollection.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _NCollection.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _NCollection.ios_base_imbue(self, __loc)

    def getloc(self):
        return _NCollection.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _NCollection.ios_base_xalloc()

    def iword(self, __ix):
        return _NCollection.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _NCollection.ios_base_pword(self, __ix)
    __swig_destroy__ = _NCollection.delete_ios_base

# Register ios_base in _NCollection:
_NCollection.ios_base_swigregister(ios_base)
cvar = _NCollection.cvar
ios_base.boolalpha = _NCollection.cvar.ios_base_boolalpha
ios_base.dec = _NCollection.cvar.ios_base_dec
ios_base.fixed = _NCollection.cvar.ios_base_fixed
ios_base.hex = _NCollection.cvar.ios_base_hex
ios_base.internal = _NCollection.cvar.ios_base_internal
ios_base.left = _NCollection.cvar.ios_base_left
ios_base.oct = _NCollection.cvar.ios_base_oct
ios_base.right = _NCollection.cvar.ios_base_right
ios_base.scientific = _NCollection.cvar.ios_base_scientific
ios_base.showbase = _NCollection.cvar.ios_base_showbase
ios_base.showpoint = _NCollection.cvar.ios_base_showpoint
ios_base.showpos = _NCollection.cvar.ios_base_showpos
ios_base.skipws = _NCollection.cvar.ios_base_skipws
ios_base.unitbuf = _NCollection.cvar.ios_base_unitbuf
ios_base.uppercase = _NCollection.cvar.ios_base_uppercase
ios_base.adjustfield = _NCollection.cvar.ios_base_adjustfield
ios_base.basefield = _NCollection.cvar.ios_base_basefield
ios_base.floatfield = _NCollection.cvar.ios_base_floatfield
ios_base.badbit = _NCollection.cvar.ios_base_badbit
ios_base.eofbit = _NCollection.cvar.ios_base_eofbit
ios_base.failbit = _NCollection.cvar.ios_base_failbit
ios_base.goodbit = _NCollection.cvar.ios_base_goodbit
ios_base.app = _NCollection.cvar.ios_base_app
ios_base.ate = _NCollection.cvar.ios_base_ate
ios_base.binary = _NCollection.cvar.ios_base_binary
ios_base.ios_base_in = _NCollection.cvar.ios_base_ios_base_in
ios_base.out = _NCollection.cvar.ios_base_out
ios_base.trunc = _NCollection.cvar.ios_base_trunc
ios_base.beg = _NCollection.cvar.ios_base_beg
ios_base.cur = _NCollection.cvar.ios_base_cur
ios_base.end = _NCollection.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _NCollection.ios_rdstate(self)

    def clear(self, *args):
        return _NCollection.ios_clear(self, *args)

    def setstate(self, __state):
        return _NCollection.ios_setstate(self, __state)

    def good(self):
        return _NCollection.ios_good(self)

    def eof(self):
        return _NCollection.ios_eof(self)

    def fail(self):
        return _NCollection.ios_fail(self)

    def bad(self):
        return _NCollection.ios_bad(self)

    def exceptions(self, *args):
        return _NCollection.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _NCollection.ios_swiginit(self, _NCollection.new_ios(__sb))
    __swig_destroy__ = _NCollection.delete_ios

    def tie(self, *args):
        return _NCollection.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _NCollection.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _NCollection.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _NCollection.ios_fill(self, *args)

    def imbue(self, __loc):
        return _NCollection.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _NCollection.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _NCollection.ios_widen(self, __c)

# Register ios in _NCollection:
_NCollection.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _NCollection.ostream_swiginit(self, _NCollection.new_ostream(__sb))
    __swig_destroy__ = _NCollection.delete_ostream

    def __lshift__(self, *args):
        return _NCollection.ostream___lshift__(self, *args)

    def put(self, __c):
        return _NCollection.ostream_put(self, __c)

    def write(self, __s, __n):
        return _NCollection.ostream_write(self, __s, __n)

    def flush(self):
        return _NCollection.ostream_flush(self)

    def tellp(self):
        return _NCollection.ostream_tellp(self)

    def seekp(self, *args):
        return _NCollection.ostream_seekp(self, *args)

# Register ostream in _NCollection:
_NCollection.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _NCollection.istream_swiginit(self, _NCollection.new_istream(__sb))
    __swig_destroy__ = _NCollection.delete_istream

    def __rshift__(self, *args):
        return _NCollection.istream___rshift__(self, *args)

    def gcount(self):
        return _NCollection.istream_gcount(self)

    def get(self, *args):
        return _NCollection.istream_get(self, *args)

    def getline(self, *args):
        return _NCollection.istream_getline(self, *args)

    def ignore(self, *args):
        return _NCollection.istream_ignore(self, *args)

    def peek(self):
        return _NCollection.istream_peek(self)

    def read(self, __s, __n):
        return _NCollection.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _NCollection.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _NCollection.istream_putback(self, __c)

    def unget(self):
        return _NCollection.istream_unget(self)

    def sync(self):
        return _NCollection.istream_sync(self)

    def tellg(self):
        return _NCollection.istream_tellg(self)

    def seekg(self, *args):
        return _NCollection.istream_seekg(self, *args)

# Register istream in _NCollection:
_NCollection.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _NCollection.iostream_swiginit(self, _NCollection.new_iostream(__sb))
    __swig_destroy__ = _NCollection.delete_iostream

# Register iostream in _NCollection:
_NCollection.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _NCollection.endl_cb_ptr
endl = _NCollection.endl
ends_cb_ptr = _NCollection.ends_cb_ptr
ends = _NCollection.ends
flush_cb_ptr = _NCollection.flush_cb_ptr
flush = _NCollection.flush

from enum import IntEnum
from OCC.Core.Exception import *

class NCollection_BaseList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Extent(self):
        return _NCollection.NCollection_BaseList_Extent(self)

    def IsEmpty(self):
        return _NCollection.NCollection_BaseList_IsEmpty(self)

    def Allocator(self):
        return _NCollection.NCollection_BaseList_Allocator(self)
    __swig_destroy__ = _NCollection.delete_NCollection_BaseList

# Register NCollection_BaseList in _NCollection:
_NCollection.NCollection_BaseList_swigregister(NCollection_BaseList)
class NCollection_BaseMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbBuckets(self):
        return _NCollection.NCollection_BaseMap_NbBuckets(self)

    def Extent(self):
        return _NCollection.NCollection_BaseMap_Extent(self)

    def IsEmpty(self):
        return _NCollection.NCollection_BaseMap_IsEmpty(self)

    def Statistics(self, S):
        return _NCollection.NCollection_BaseMap_Statistics(self, S)

    def Allocator(self):
        return _NCollection.NCollection_BaseMap_Allocator(self)

# Register NCollection_BaseMap in _NCollection:
_NCollection.NCollection_BaseMap_swigregister(NCollection_BaseMap)
class NCollection_BasePointerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NCollection.NCollection_BasePointerVector_swiginit(self, _NCollection.new_NCollection_BasePointerVector(*args))
    __swig_destroy__ = _NCollection.delete_NCollection_BasePointerVector

    def IsEmpty(self):
        return _NCollection.NCollection_BasePointerVector_IsEmpty(self)

    def Size(self):
        return _NCollection.NCollection_BasePointerVector_Size(self)

    def Capacity(self):
        return _NCollection.NCollection_BasePointerVector_Capacity(self)

    def RemoveLast(self):
        return _NCollection.NCollection_BasePointerVector_RemoveLast(self)

    def Clear(self, theReleaseMemory=False):
        return _NCollection.NCollection_BasePointerVector_Clear(self, theReleaseMemory)

    def GetArray(self):
        return _NCollection.NCollection_BasePointerVector_GetArray(self)

    def Value(self, theInd):
        return _NCollection.NCollection_BasePointerVector_Value(self, theInd)

    def Append(self, thePnt):
        return _NCollection.NCollection_BasePointerVector_Append(self, thePnt)

    def SetValue(self, theInd, thePnt):
        return _NCollection.NCollection_BasePointerVector_SetValue(self, theInd, thePnt)

    def Set(self, *args):
        return _NCollection.NCollection_BasePointerVector_Set(self, *args)

# Register NCollection_BasePointerVector in _NCollection:
_NCollection.NCollection_BasePointerVector_swigregister(NCollection_BasePointerVector)
CellFilter_Keep = _NCollection.CellFilter_Keep
CellFilter_Purge = _NCollection.CellFilter_Purge


class NCollection_CellFilter_Action(IntEnum):
	CellFilter_Keep = 0
	CellFilter_Purge = 1
CellFilter_Keep = NCollection_CellFilter_Action.CellFilter_Keep
CellFilter_Purge = NCollection_CellFilter_Action.CellFilter_Purge

class NCollection_Utf16Iter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theString):
        _NCollection.NCollection_Utf16Iter_swiginit(self, _NCollection.new_NCollection_Utf16Iter(theString))

    def Init(self, theString):
        return _NCollection.NCollection_Utf16Iter_Init(self, theString)

    def __eq__(self, theRight):
        return _NCollection.NCollection_Utf16Iter___eq__(self, theRight)

    def IsValid(self):
        return _NCollection.NCollection_Utf16Iter_IsValid(self)

    def __ref__(self):
        return _NCollection.NCollection_Utf16Iter___ref__(self)

    def BufferHere(self):
        return _NCollection.NCollection_Utf16Iter_BufferHere(self)

    def ChangeBufferHere(self):
        return _NCollection.NCollection_Utf16Iter_ChangeBufferHere(self)

    def BufferNext(self):
        return _NCollection.NCollection_Utf16Iter_BufferNext(self)

    def Index(self):
        return _NCollection.NCollection_Utf16Iter_Index(self)

    def AdvanceBytesUtf8(self):
        return _NCollection.NCollection_Utf16Iter_AdvanceBytesUtf8(self)

    def AdvanceBytesUtf16(self):
        return _NCollection.NCollection_Utf16Iter_AdvanceBytesUtf16(self)

    def AdvanceCodeUnitsUtf16(self):
        return _NCollection.NCollection_Utf16Iter_AdvanceCodeUnitsUtf16(self)

    def AdvanceBytesUtf32(self):
        return _NCollection.NCollection_Utf16Iter_AdvanceBytesUtf32(self)

    def GetUtf8(self, *args):
        return _NCollection.NCollection_Utf16Iter_GetUtf8(self, *args)

    def GetUtf16(self, theBuffer):
        return _NCollection.NCollection_Utf16Iter_GetUtf16(self, theBuffer)

    def GetUtf32(self, theBuffer):
        return _NCollection.NCollection_Utf16Iter_GetUtf32(self, theBuffer)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf16Iter

# Register NCollection_Utf16Iter in _NCollection:
_NCollection.NCollection_Utf16Iter_swigregister(NCollection_Utf16Iter)
class NCollection_Utf16String(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Iterator(self):
        return _NCollection.NCollection_Utf16String_Iterator(self)

    def Size(self):
        return _NCollection.NCollection_Utf16String_Size(self)

    def Length(self):
        return _NCollection.NCollection_Utf16String_Length(self)

    def GetChar(self, theCharIndex):
        return _NCollection.NCollection_Utf16String_GetChar(self, theCharIndex)

    def GetCharBuffer(self, theCharIndex):
        return _NCollection.NCollection_Utf16String_GetCharBuffer(self, theCharIndex)

    def __init__(self, *args):
        _NCollection.NCollection_Utf16String_swiginit(self, _NCollection.new_NCollection_Utf16String(*args))

    def FromLocale(self, theString, theLength=-1):
        return _NCollection.NCollection_Utf16String_FromLocale(self, theString, theLength)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf16String

    def IsEqual(self, theCompare):
        return _NCollection.NCollection_Utf16String_IsEqual(self, theCompare)

    def SubString(self, theStart, theEnd):
        return _NCollection.NCollection_Utf16String_SubString(self, theStart, theEnd)

    def ToCString(self):
        return _NCollection.NCollection_Utf16String_ToCString(self)

    def ToUtf8(self):
        return _NCollection.NCollection_Utf16String_ToUtf8(self)

    def ToUtf16(self):
        return _NCollection.NCollection_Utf16String_ToUtf16(self)

    def ToUtf32(self):
        return _NCollection.NCollection_Utf16String_ToUtf32(self)

    def ToUtfWide(self):
        return _NCollection.NCollection_Utf16String_ToUtfWide(self)

    def ToLocale(self, theBuffer, theSizeBytes):
        return _NCollection.NCollection_Utf16String_ToLocale(self, theBuffer, theSizeBytes)

    def IsEmpty(self):
        return _NCollection.NCollection_Utf16String_IsEmpty(self)

    def Clear(self):
        return _NCollection.NCollection_Utf16String_Clear(self)

    def Assign(self, theOther):
        return _NCollection.NCollection_Utf16String_Assign(self, theOther)

    def Swap(self, theOther):
        return _NCollection.NCollection_Utf16String_Swap(self, theOther)

    def Set(self, *args):
        return _NCollection.NCollection_Utf16String_Set(self, *args)

    def __iadd__(self, theAppend):
        return _NCollection.NCollection_Utf16String___iadd__(self, theAppend)

    def __eq__(self, theCompare):
        return _NCollection.NCollection_Utf16String___eq__(self, theCompare)

    def __ne__(self, theCompare):
        return _NCollection.NCollection_Utf16String___ne__(self, theCompare)

# Register NCollection_Utf16String in _NCollection:
_NCollection.NCollection_Utf16String_swigregister(NCollection_Utf16String)
class NCollection_Utf32Iter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theString):
        _NCollection.NCollection_Utf32Iter_swiginit(self, _NCollection.new_NCollection_Utf32Iter(theString))

    def Init(self, theString):
        return _NCollection.NCollection_Utf32Iter_Init(self, theString)

    def __eq__(self, theRight):
        return _NCollection.NCollection_Utf32Iter___eq__(self, theRight)

    def IsValid(self):
        return _NCollection.NCollection_Utf32Iter_IsValid(self)

    def __ref__(self):
        return _NCollection.NCollection_Utf32Iter___ref__(self)

    def BufferHere(self):
        return _NCollection.NCollection_Utf32Iter_BufferHere(self)

    def ChangeBufferHere(self):
        return _NCollection.NCollection_Utf32Iter_ChangeBufferHere(self)

    def BufferNext(self):
        return _NCollection.NCollection_Utf32Iter_BufferNext(self)

    def Index(self):
        return _NCollection.NCollection_Utf32Iter_Index(self)

    def AdvanceBytesUtf8(self):
        return _NCollection.NCollection_Utf32Iter_AdvanceBytesUtf8(self)

    def AdvanceBytesUtf16(self):
        return _NCollection.NCollection_Utf32Iter_AdvanceBytesUtf16(self)

    def AdvanceCodeUnitsUtf16(self):
        return _NCollection.NCollection_Utf32Iter_AdvanceCodeUnitsUtf16(self)

    def AdvanceBytesUtf32(self):
        return _NCollection.NCollection_Utf32Iter_AdvanceBytesUtf32(self)

    def GetUtf8(self, *args):
        return _NCollection.NCollection_Utf32Iter_GetUtf8(self, *args)

    def GetUtf16(self, theBuffer):
        return _NCollection.NCollection_Utf32Iter_GetUtf16(self, theBuffer)

    def GetUtf32(self, theBuffer):
        return _NCollection.NCollection_Utf32Iter_GetUtf32(self, theBuffer)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf32Iter

# Register NCollection_Utf32Iter in _NCollection:
_NCollection.NCollection_Utf32Iter_swigregister(NCollection_Utf32Iter)
class NCollection_Utf32String(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Iterator(self):
        return _NCollection.NCollection_Utf32String_Iterator(self)

    def Size(self):
        return _NCollection.NCollection_Utf32String_Size(self)

    def Length(self):
        return _NCollection.NCollection_Utf32String_Length(self)

    def GetChar(self, theCharIndex):
        return _NCollection.NCollection_Utf32String_GetChar(self, theCharIndex)

    def GetCharBuffer(self, theCharIndex):
        return _NCollection.NCollection_Utf32String_GetCharBuffer(self, theCharIndex)

    def __init__(self, *args):
        _NCollection.NCollection_Utf32String_swiginit(self, _NCollection.new_NCollection_Utf32String(*args))

    def FromLocale(self, theString, theLength=-1):
        return _NCollection.NCollection_Utf32String_FromLocale(self, theString, theLength)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf32String

    def IsEqual(self, theCompare):
        return _NCollection.NCollection_Utf32String_IsEqual(self, theCompare)

    def SubString(self, theStart, theEnd):
        return _NCollection.NCollection_Utf32String_SubString(self, theStart, theEnd)

    def ToCString(self):
        return _NCollection.NCollection_Utf32String_ToCString(self)

    def ToUtf8(self):
        return _NCollection.NCollection_Utf32String_ToUtf8(self)

    def ToUtf16(self):
        return _NCollection.NCollection_Utf32String_ToUtf16(self)

    def ToUtf32(self):
        return _NCollection.NCollection_Utf32String_ToUtf32(self)

    def ToUtfWide(self):
        return _NCollection.NCollection_Utf32String_ToUtfWide(self)

    def ToLocale(self, theBuffer, theSizeBytes):
        return _NCollection.NCollection_Utf32String_ToLocale(self, theBuffer, theSizeBytes)

    def IsEmpty(self):
        return _NCollection.NCollection_Utf32String_IsEmpty(self)

    def Clear(self):
        return _NCollection.NCollection_Utf32String_Clear(self)

    def Assign(self, theOther):
        return _NCollection.NCollection_Utf32String_Assign(self, theOther)

    def Swap(self, theOther):
        return _NCollection.NCollection_Utf32String_Swap(self, theOther)

    def Set(self, *args):
        return _NCollection.NCollection_Utf32String_Set(self, *args)

    def __iadd__(self, theAppend):
        return _NCollection.NCollection_Utf32String___iadd__(self, theAppend)

    def __eq__(self, theCompare):
        return _NCollection.NCollection_Utf32String___eq__(self, theCompare)

    def __ne__(self, theCompare):
        return _NCollection.NCollection_Utf32String___ne__(self, theCompare)

# Register NCollection_Utf32String in _NCollection:
_NCollection.NCollection_Utf32String_swigregister(NCollection_Utf32String)
class NCollection_Utf8Iter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theString):
        _NCollection.NCollection_Utf8Iter_swiginit(self, _NCollection.new_NCollection_Utf8Iter(theString))

    def Init(self, theString):
        return _NCollection.NCollection_Utf8Iter_Init(self, theString)

    def __eq__(self, theRight):
        return _NCollection.NCollection_Utf8Iter___eq__(self, theRight)

    def IsValid(self):
        return _NCollection.NCollection_Utf8Iter_IsValid(self)

    def __ref__(self):
        return _NCollection.NCollection_Utf8Iter___ref__(self)

    def BufferHere(self):
        return _NCollection.NCollection_Utf8Iter_BufferHere(self)

    def ChangeBufferHere(self):
        return _NCollection.NCollection_Utf8Iter_ChangeBufferHere(self)

    def BufferNext(self):
        return _NCollection.NCollection_Utf8Iter_BufferNext(self)

    def Index(self):
        return _NCollection.NCollection_Utf8Iter_Index(self)

    def AdvanceBytesUtf8(self):
        return _NCollection.NCollection_Utf8Iter_AdvanceBytesUtf8(self)

    def AdvanceBytesUtf16(self):
        return _NCollection.NCollection_Utf8Iter_AdvanceBytesUtf16(self)

    def AdvanceCodeUnitsUtf16(self):
        return _NCollection.NCollection_Utf8Iter_AdvanceCodeUnitsUtf16(self)

    def AdvanceBytesUtf32(self):
        return _NCollection.NCollection_Utf8Iter_AdvanceBytesUtf32(self)

    def GetUtf8(self, *args):
        return _NCollection.NCollection_Utf8Iter_GetUtf8(self, *args)

    def GetUtf16(self, theBuffer):
        return _NCollection.NCollection_Utf8Iter_GetUtf16(self, theBuffer)

    def GetUtf32(self, theBuffer):
        return _NCollection.NCollection_Utf8Iter_GetUtf32(self, theBuffer)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf8Iter

# Register NCollection_Utf8Iter in _NCollection:
_NCollection.NCollection_Utf8Iter_swigregister(NCollection_Utf8Iter)
class NCollection_Utf8String(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Iterator(self):
        return _NCollection.NCollection_Utf8String_Iterator(self)

    def Size(self):
        return _NCollection.NCollection_Utf8String_Size(self)

    def Length(self):
        return _NCollection.NCollection_Utf8String_Length(self)

    def GetChar(self, theCharIndex):
        return _NCollection.NCollection_Utf8String_GetChar(self, theCharIndex)

    def GetCharBuffer(self, theCharIndex):
        return _NCollection.NCollection_Utf8String_GetCharBuffer(self, theCharIndex)

    def __init__(self, *args):
        _NCollection.NCollection_Utf8String_swiginit(self, _NCollection.new_NCollection_Utf8String(*args))

    def FromLocale(self, theString, theLength=-1):
        return _NCollection.NCollection_Utf8String_FromLocale(self, theString, theLength)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf8String

    def IsEqual(self, theCompare):
        return _NCollection.NCollection_Utf8String_IsEqual(self, theCompare)

    def SubString(self, theStart, theEnd):
        return _NCollection.NCollection_Utf8String_SubString(self, theStart, theEnd)

    def ToCString(self):
        return _NCollection.NCollection_Utf8String_ToCString(self)

    def ToUtf8(self):
        return _NCollection.NCollection_Utf8String_ToUtf8(self)

    def ToUtf16(self):
        return _NCollection.NCollection_Utf8String_ToUtf16(self)

    def ToUtf32(self):
        return _NCollection.NCollection_Utf8String_ToUtf32(self)

    def ToUtfWide(self):
        return _NCollection.NCollection_Utf8String_ToUtfWide(self)

    def ToLocale(self, theBuffer, theSizeBytes):
        return _NCollection.NCollection_Utf8String_ToLocale(self, theBuffer, theSizeBytes)

    def IsEmpty(self):
        return _NCollection.NCollection_Utf8String_IsEmpty(self)

    def Clear(self):
        return _NCollection.NCollection_Utf8String_Clear(self)

    def Assign(self, theOther):
        return _NCollection.NCollection_Utf8String_Assign(self, theOther)

    def Swap(self, theOther):
        return _NCollection.NCollection_Utf8String_Swap(self, theOther)

    def Set(self, *args):
        return _NCollection.NCollection_Utf8String_Set(self, *args)

    def __iadd__(self, theAppend):
        return _NCollection.NCollection_Utf8String___iadd__(self, theAppend)

    def __eq__(self, theCompare):
        return _NCollection.NCollection_Utf8String___eq__(self, theCompare)

    def __ne__(self, theCompare):
        return _NCollection.NCollection_Utf8String___ne__(self, theCompare)

# Register NCollection_Utf8String in _NCollection:
_NCollection.NCollection_Utf8String_swigregister(NCollection_Utf8String)
class NCollection_UtfWideIter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, theString):
        _NCollection.NCollection_UtfWideIter_swiginit(self, _NCollection.new_NCollection_UtfWideIter(theString))

    def Init(self, theString):
        return _NCollection.NCollection_UtfWideIter_Init(self, theString)

    def __eq__(self, theRight):
        return _NCollection.NCollection_UtfWideIter___eq__(self, theRight)

    def IsValid(self):
        return _NCollection.NCollection_UtfWideIter_IsValid(self)

    def __ref__(self):
        return _NCollection.NCollection_UtfWideIter___ref__(self)

    def BufferHere(self):
        return _NCollection.NCollection_UtfWideIter_BufferHere(self)

    def ChangeBufferHere(self):
        return _NCollection.NCollection_UtfWideIter_ChangeBufferHere(self)

    def BufferNext(self):
        return _NCollection.NCollection_UtfWideIter_BufferNext(self)

    def Index(self):
        return _NCollection.NCollection_UtfWideIter_Index(self)

    def AdvanceBytesUtf8(self):
        return _NCollection.NCollection_UtfWideIter_AdvanceBytesUtf8(self)

    def AdvanceBytesUtf16(self):
        return _NCollection.NCollection_UtfWideIter_AdvanceBytesUtf16(self)

    def AdvanceCodeUnitsUtf16(self):
        return _NCollection.NCollection_UtfWideIter_AdvanceCodeUnitsUtf16(self)

    def AdvanceBytesUtf32(self):
        return _NCollection.NCollection_UtfWideIter_AdvanceBytesUtf32(self)

    def GetUtf8(self, *args):
        return _NCollection.NCollection_UtfWideIter_GetUtf8(self, *args)

    def GetUtf16(self, theBuffer):
        return _NCollection.NCollection_UtfWideIter_GetUtf16(self, theBuffer)

    def GetUtf32(self, theBuffer):
        return _NCollection.NCollection_UtfWideIter_GetUtf32(self, theBuffer)
    __swig_destroy__ = _NCollection.delete_NCollection_UtfWideIter

# Register NCollection_UtfWideIter in _NCollection:
_NCollection.NCollection_UtfWideIter_swigregister(NCollection_UtfWideIter)
class NCollection_UtfWideString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Iterator(self):
        return _NCollection.NCollection_UtfWideString_Iterator(self)

    def Size(self):
        return _NCollection.NCollection_UtfWideString_Size(self)

    def Length(self):
        return _NCollection.NCollection_UtfWideString_Length(self)

    def GetChar(self, theCharIndex):
        return _NCollection.NCollection_UtfWideString_GetChar(self, theCharIndex)

    def GetCharBuffer(self, theCharIndex):
        return _NCollection.NCollection_UtfWideString_GetCharBuffer(self, theCharIndex)

    def __init__(self, *args):
        _NCollection.NCollection_UtfWideString_swiginit(self, _NCollection.new_NCollection_UtfWideString(*args))

    def FromLocale(self, theString, theLength=-1):
        return _NCollection.NCollection_UtfWideString_FromLocale(self, theString, theLength)
    __swig_destroy__ = _NCollection.delete_NCollection_UtfWideString

    def IsEqual(self, theCompare):
        return _NCollection.NCollection_UtfWideString_IsEqual(self, theCompare)

    def SubString(self, theStart, theEnd):
        return _NCollection.NCollection_UtfWideString_SubString(self, theStart, theEnd)

    def ToCString(self):
        return _NCollection.NCollection_UtfWideString_ToCString(self)

    def ToUtf8(self):
        return _NCollection.NCollection_UtfWideString_ToUtf8(self)

    def ToUtf16(self):
        return _NCollection.NCollection_UtfWideString_ToUtf16(self)

    def ToUtf32(self):
        return _NCollection.NCollection_UtfWideString_ToUtf32(self)

    def ToUtfWide(self):
        return _NCollection.NCollection_UtfWideString_ToUtfWide(self)

    def ToLocale(self, theBuffer, theSizeBytes):
        return _NCollection.NCollection_UtfWideString_ToLocale(self, theBuffer, theSizeBytes)

    def IsEmpty(self):
        return _NCollection.NCollection_UtfWideString_IsEmpty(self)

    def Clear(self):
        return _NCollection.NCollection_UtfWideString_Clear(self)

    def Assign(self, theOther):
        return _NCollection.NCollection_UtfWideString_Assign(self, theOther)

    def Swap(self, theOther):
        return _NCollection.NCollection_UtfWideString_Swap(self, theOther)

    def Set(self, *args):
        return _NCollection.NCollection_UtfWideString_Set(self, *args)

    def __iadd__(self, theAppend):
        return _NCollection.NCollection_UtfWideString___iadd__(self, theAppend)

    def __eq__(self, theCompare):
        return _NCollection.NCollection_UtfWideString___eq__(self, theCompare)

    def __ne__(self, theCompare):
        return _NCollection.NCollection_UtfWideString___ne__(self, theCompare)

# Register NCollection_UtfWideString in _NCollection:
_NCollection.NCollection_UtfWideString_swigregister(NCollection_UtfWideString)

@classnotwrapped
class NCollection_ListNode:
	pass

@classnotwrapped
class NCollection_Array2:
	pass

@classnotwrapped
class NCollection_SparseArray:
	pass

@classnotwrapped
class NCollection_IndexedDataMap:
	pass

@classnotwrapped
class NCollection_DefaultHasher:
	pass

@classnotwrapped
class NCollection_IncAllocator:
	pass

@classnotwrapped
class NCollection_Mat3:
	pass

@classnotwrapped
class NCollection_IndexedIterator:
	pass

@classnotwrapped
class NCollection_UtfIterator:
	pass

@classnotwrapped
class NCollection_EBTree:
	pass

@classnotwrapped
class NCollection_Vec4:
	pass

@classnotwrapped
class NCollection_Shared:
	pass

@classnotwrapped
class NCollection_AlignedAllocator:
	pass

@classnotwrapped
class NCollection_CellFilter:
	pass

@classnotwrapped
class NCollection_CellFilter_InspectorXYZ:
	pass

@classnotwrapped
class NCollection_CellFilter_InspectorXY:
	pass

@classnotwrapped
class NCollection_Iterator:
	pass

@classnotwrapped
class NCollection_Sequence:
	pass

@classnotwrapped
class NCollection_AliasedArray:
	pass

@classnotwrapped
class NCollection_UBTreeFiller:
	pass

@classnotwrapped
class NCollection_BaseAllocator:
	pass

@classnotwrapped
class NCollection_BaseList:
	pass

@classnotwrapped
class NCollection_List:
	pass

@classnotwrapped
class NCollection_DataMap:
	pass

@classnotwrapped
class NCollection_SparseArrayBase:
	pass

@classnotwrapped
class NCollection_Vec2:
	pass

@classnotwrapped
class NCollection_Map:
	pass

@classnotwrapped
class NCollection_WinHeapAllocator:
	pass

@classnotwrapped
class NCollection_HeapAllocator:
	pass

@classnotwrapped
class NCollection_IndexedMap:
	pass

@classnotwrapped
class NCollection_Vec3:
	pass

@classnotwrapped
class NCollection_TListNode:
	pass

@classnotwrapped
class NCollection_UBTree:
	pass

@classnotwrapped
class NCollection_LocalArray:
	pass

@classnotwrapped
class NCollection_BasePointerVector:
	pass

@classnotwrapped
class NCollection_Allocator:
	pass

@classnotwrapped
class NCollection_StlIterator:
	pass

@classnotwrapped
class NCollection_AccAllocator:
	pass

@classnotwrapped
class NCollection_Lerp:
	pass

@classnotwrapped
class NCollection_Mat4:
	pass

@classnotwrapped
class NCollection_OccAllocator:
	pass

@classnotwrapped
class NCollection_TListIterator:
	pass

@classnotwrapped
class NCollection_UtfString:
	pass

@classnotwrapped
class NCollection_BaseMap:
	pass

@classnotwrapped
class NCollection_DynamicArray:
	pass

@classnotwrapped
class NCollection_Array1:
	pass

@classnotwrapped
class NCollection_Handle:
	pass

@classnotwrapped
class NCollection_DoubleMap:
	pass

@classnotwrapped
class NCollection_SeqNode:
	pass

@classnotwrapped
class NCollection_BaseSequence:
	pass

@classnotwrapped
class NCollection_Buffer:
	pass



NCollection_String=NCollection_Utf8String


