# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
NCollection module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_ncollection.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NCollection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NCollection')
    _NCollection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NCollection', [dirname(__file__)])
        except ImportError:
            import _NCollection
            return _NCollection
        try:
            _mod = imp.load_module('_NCollection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NCollection = swig_import_helper()
    del swig_import_helper
else:
    import _NCollection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NCollection.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _NCollection.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _NCollection.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _NCollection.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _NCollection.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _NCollection.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _NCollection.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _NCollection.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _NCollection.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _NCollection.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _NCollection.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _NCollection.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _NCollection.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _NCollection.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _NCollection.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _NCollection.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _NCollection.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _NCollection.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _NCollection.process_exception(error, method_name, class_name)
process_exception = _NCollection.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard

from enum import IntEnum
from OCC.Core.Exception import *



class NCollection_Utf16Iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCollection_Utf16Iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCollection_Utf16Iter, name)
    __repr__ = _swig_repr

    def __init__(self, theString: 'char16_t const *'):
        this = _NCollection.new_NCollection_Utf16Iter(theString)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theString: 'char16_t const *') -> "void":
        return _NCollection.NCollection_Utf16Iter_Init(self, theString)

    def __eq__(self, theRight: 'NCollection_Utf16Iter') -> "bool":
        return _NCollection.NCollection_Utf16Iter___eq__(self, theRight)

    def IsValid(self) -> "bool":
        return _NCollection.NCollection_Utf16Iter_IsValid(self)

    def __ref__(self) -> "Standard_Utf32Char":
        return _NCollection.NCollection_Utf16Iter___ref__(self)

    def BufferHere(self) -> "char16_t const *":
        return _NCollection.NCollection_Utf16Iter_BufferHere(self)

    def ChangeBufferHere(self) -> "char16_t *":
        return _NCollection.NCollection_Utf16Iter_ChangeBufferHere(self)

    def BufferNext(self) -> "char16_t const *":
        return _NCollection.NCollection_Utf16Iter_BufferNext(self)

    def Index(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf16Iter_Index(self)

    def AdvanceBytesUtf8(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf16Iter_AdvanceBytesUtf8(self)

    def AdvanceBytesUtf16(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf16Iter_AdvanceBytesUtf16(self)

    def AdvanceCodeUnitsUtf16(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf16Iter_AdvanceCodeUnitsUtf16(self)

    def AdvanceBytesUtf32(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf16Iter_AdvanceBytesUtf32(self)

    def GetUtf8(self, *args) -> "Standard_Utf8UChar *":
        return _NCollection.NCollection_Utf16Iter_GetUtf8(self, *args)

    def GetUtf16(self, theBuffer: 'Standard_Utf16Char *') -> "Standard_Utf16Char *":
        return _NCollection.NCollection_Utf16Iter_GetUtf16(self, theBuffer)

    def GetUtf32(self, theBuffer: 'Standard_Utf32Char *') -> "Standard_Utf32Char *":
        return _NCollection.NCollection_Utf16Iter_GetUtf32(self, theBuffer)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf16Iter
    __del__ = lambda self: None
NCollection_Utf16Iter_swigregister = _NCollection.NCollection_Utf16Iter_swigregister
NCollection_Utf16Iter_swigregister(NCollection_Utf16Iter)

class NCollection_Utf16String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCollection_Utf16String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCollection_Utf16String, name)
    __repr__ = _swig_repr

    def Iterator(self) -> "NCollection_UtfIterator< char16_t >":
        return _NCollection.NCollection_Utf16String_Iterator(self)

    def Size(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf16String_Size(self)

    def Length(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf16String_Length(self)

    def GetChar(self, theCharIndex: 'Standard_Integer const') -> "Standard_Utf32Char":
        return _NCollection.NCollection_Utf16String_GetChar(self, theCharIndex)

    def GetCharBuffer(self, theCharIndex: 'Standard_Integer const') -> "char16_t const *":
        return _NCollection.NCollection_Utf16String_GetCharBuffer(self, theCharIndex)

    def __init__(self, *args):
        this = _NCollection.new_NCollection_Utf16String(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FromLocale(self, theString: 'char const *', theLength: 'Standard_Integer const'=-1) -> "void":
        return _NCollection.NCollection_Utf16String_FromLocale(self, theString, theLength)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf16String
    __del__ = lambda self: None

    def IsEqual(self, theCompare: 'NCollection_Utf16String') -> "bool":
        return _NCollection.NCollection_Utf16String_IsEqual(self, theCompare)

    def SubString(self, theStart: 'Standard_Integer const', theEnd: 'Standard_Integer const') -> "NCollection_UtfString< Standard_Utf16Char >":
        return _NCollection.NCollection_Utf16String_SubString(self, theStart, theEnd)

    def ToCString(self) -> "char16_t const *":
        return _NCollection.NCollection_Utf16String_ToCString(self)

    def ToUtf8(self) -> "NCollection_UtfString< Standard_Utf8Char > const":
        return _NCollection.NCollection_Utf16String_ToUtf8(self)

    def ToUtf16(self) -> "NCollection_UtfString< Standard_Utf16Char > const":
        return _NCollection.NCollection_Utf16String_ToUtf16(self)

    def ToUtf32(self) -> "NCollection_UtfString< Standard_Utf32Char > const":
        return _NCollection.NCollection_Utf16String_ToUtf32(self)

    def ToUtfWide(self) -> "NCollection_UtfString< Standard_WideChar > const":
        return _NCollection.NCollection_Utf16String_ToUtfWide(self)

    def ToLocale(self, theBuffer: 'char *', theSizeBytes: 'Standard_Integer const') -> "bool":
        return _NCollection.NCollection_Utf16String_ToLocale(self, theBuffer, theSizeBytes)

    def IsEmpty(self) -> "bool":
        return _NCollection.NCollection_Utf16String_IsEmpty(self)

    def Clear(self) -> "void":
        return _NCollection.NCollection_Utf16String_Clear(self)

    def Assign(self, theOther: 'NCollection_Utf16String') -> "NCollection_UtfString< Standard_Utf16Char > const &":
        return _NCollection.NCollection_Utf16String_Assign(self, theOther)

    def Swap(self, theOther: 'NCollection_Utf16String') -> "void":
        return _NCollection.NCollection_Utf16String_Swap(self, theOther)

    def Set(self, *args) -> "NCollection_UtfString< Standard_Utf16Char > const &":
        return _NCollection.NCollection_Utf16String_Set(self, *args)

    def __iadd__(self, theAppend: 'NCollection_Utf16String') -> "NCollection_UtfString< Standard_Utf16Char > &":
        return _NCollection.NCollection_Utf16String___iadd__(self, theAppend)

    def __eq__(self, theCompare: 'NCollection_Utf16String') -> "bool":
        return _NCollection.NCollection_Utf16String___eq__(self, theCompare)

    def __ne__(self, theCompare: 'NCollection_Utf16String') -> "bool":
        return _NCollection.NCollection_Utf16String___ne__(self, theCompare)
NCollection_Utf16String_swigregister = _NCollection.NCollection_Utf16String_swigregister
NCollection_Utf16String_swigregister(NCollection_Utf16String)

class NCollection_Utf32Iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCollection_Utf32Iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCollection_Utf32Iter, name)
    __repr__ = _swig_repr

    def __init__(self, theString: 'char32_t const *'):
        this = _NCollection.new_NCollection_Utf32Iter(theString)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theString: 'char32_t const *') -> "void":
        return _NCollection.NCollection_Utf32Iter_Init(self, theString)

    def __eq__(self, theRight: 'NCollection_Utf32Iter') -> "bool":
        return _NCollection.NCollection_Utf32Iter___eq__(self, theRight)

    def IsValid(self) -> "bool":
        return _NCollection.NCollection_Utf32Iter_IsValid(self)

    def __ref__(self) -> "Standard_Utf32Char":
        return _NCollection.NCollection_Utf32Iter___ref__(self)

    def BufferHere(self) -> "char32_t const *":
        return _NCollection.NCollection_Utf32Iter_BufferHere(self)

    def ChangeBufferHere(self) -> "char32_t *":
        return _NCollection.NCollection_Utf32Iter_ChangeBufferHere(self)

    def BufferNext(self) -> "char32_t const *":
        return _NCollection.NCollection_Utf32Iter_BufferNext(self)

    def Index(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf32Iter_Index(self)

    def AdvanceBytesUtf8(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf32Iter_AdvanceBytesUtf8(self)

    def AdvanceBytesUtf16(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf32Iter_AdvanceBytesUtf16(self)

    def AdvanceCodeUnitsUtf16(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf32Iter_AdvanceCodeUnitsUtf16(self)

    def AdvanceBytesUtf32(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf32Iter_AdvanceBytesUtf32(self)

    def GetUtf8(self, *args) -> "Standard_Utf8UChar *":
        return _NCollection.NCollection_Utf32Iter_GetUtf8(self, *args)

    def GetUtf16(self, theBuffer: 'Standard_Utf16Char *') -> "Standard_Utf16Char *":
        return _NCollection.NCollection_Utf32Iter_GetUtf16(self, theBuffer)

    def GetUtf32(self, theBuffer: 'Standard_Utf32Char *') -> "Standard_Utf32Char *":
        return _NCollection.NCollection_Utf32Iter_GetUtf32(self, theBuffer)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf32Iter
    __del__ = lambda self: None
NCollection_Utf32Iter_swigregister = _NCollection.NCollection_Utf32Iter_swigregister
NCollection_Utf32Iter_swigregister(NCollection_Utf32Iter)

class NCollection_Utf32String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCollection_Utf32String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCollection_Utf32String, name)
    __repr__ = _swig_repr

    def Iterator(self) -> "NCollection_UtfIterator< char32_t >":
        return _NCollection.NCollection_Utf32String_Iterator(self)

    def Size(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf32String_Size(self)

    def Length(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf32String_Length(self)

    def GetChar(self, theCharIndex: 'Standard_Integer const') -> "Standard_Utf32Char":
        return _NCollection.NCollection_Utf32String_GetChar(self, theCharIndex)

    def GetCharBuffer(self, theCharIndex: 'Standard_Integer const') -> "char32_t const *":
        return _NCollection.NCollection_Utf32String_GetCharBuffer(self, theCharIndex)

    def __init__(self, *args):
        this = _NCollection.new_NCollection_Utf32String(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FromLocale(self, theString: 'char const *', theLength: 'Standard_Integer const'=-1) -> "void":
        return _NCollection.NCollection_Utf32String_FromLocale(self, theString, theLength)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf32String
    __del__ = lambda self: None

    def IsEqual(self, theCompare: 'NCollection_Utf32String') -> "bool":
        return _NCollection.NCollection_Utf32String_IsEqual(self, theCompare)

    def SubString(self, theStart: 'Standard_Integer const', theEnd: 'Standard_Integer const') -> "NCollection_UtfString< Standard_Utf32Char >":
        return _NCollection.NCollection_Utf32String_SubString(self, theStart, theEnd)

    def ToCString(self) -> "char32_t const *":
        return _NCollection.NCollection_Utf32String_ToCString(self)

    def ToUtf8(self) -> "NCollection_UtfString< Standard_Utf8Char > const":
        return _NCollection.NCollection_Utf32String_ToUtf8(self)

    def ToUtf16(self) -> "NCollection_UtfString< Standard_Utf16Char > const":
        return _NCollection.NCollection_Utf32String_ToUtf16(self)

    def ToUtf32(self) -> "NCollection_UtfString< Standard_Utf32Char > const":
        return _NCollection.NCollection_Utf32String_ToUtf32(self)

    def ToUtfWide(self) -> "NCollection_UtfString< Standard_WideChar > const":
        return _NCollection.NCollection_Utf32String_ToUtfWide(self)

    def ToLocale(self, theBuffer: 'char *', theSizeBytes: 'Standard_Integer const') -> "bool":
        return _NCollection.NCollection_Utf32String_ToLocale(self, theBuffer, theSizeBytes)

    def IsEmpty(self) -> "bool":
        return _NCollection.NCollection_Utf32String_IsEmpty(self)

    def Clear(self) -> "void":
        return _NCollection.NCollection_Utf32String_Clear(self)

    def Assign(self, theOther: 'NCollection_Utf32String') -> "NCollection_UtfString< Standard_Utf32Char > const &":
        return _NCollection.NCollection_Utf32String_Assign(self, theOther)

    def Swap(self, theOther: 'NCollection_Utf32String') -> "void":
        return _NCollection.NCollection_Utf32String_Swap(self, theOther)

    def Set(self, *args) -> "NCollection_UtfString< Standard_Utf32Char > const &":
        return _NCollection.NCollection_Utf32String_Set(self, *args)

    def __iadd__(self, theAppend: 'NCollection_Utf32String') -> "NCollection_UtfString< Standard_Utf32Char > &":
        return _NCollection.NCollection_Utf32String___iadd__(self, theAppend)

    def __eq__(self, theCompare: 'NCollection_Utf32String') -> "bool":
        return _NCollection.NCollection_Utf32String___eq__(self, theCompare)

    def __ne__(self, theCompare: 'NCollection_Utf32String') -> "bool":
        return _NCollection.NCollection_Utf32String___ne__(self, theCompare)
NCollection_Utf32String_swigregister = _NCollection.NCollection_Utf32String_swigregister
NCollection_Utf32String_swigregister(NCollection_Utf32String)

class NCollection_Utf8Iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCollection_Utf8Iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCollection_Utf8Iter, name)
    __repr__ = _swig_repr

    def __init__(self, theString: 'char const *'):
        this = _NCollection.new_NCollection_Utf8Iter(theString)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theString: 'char const *') -> "void":
        return _NCollection.NCollection_Utf8Iter_Init(self, theString)

    def __eq__(self, theRight: 'NCollection_Utf8Iter') -> "bool":
        return _NCollection.NCollection_Utf8Iter___eq__(self, theRight)

    def IsValid(self) -> "bool":
        return _NCollection.NCollection_Utf8Iter_IsValid(self)

    def __ref__(self) -> "Standard_Utf32Char":
        return _NCollection.NCollection_Utf8Iter___ref__(self)

    def BufferHere(self) -> "char const *":
        return _NCollection.NCollection_Utf8Iter_BufferHere(self)

    def ChangeBufferHere(self) -> "char *":
        return _NCollection.NCollection_Utf8Iter_ChangeBufferHere(self)

    def BufferNext(self) -> "char const *":
        return _NCollection.NCollection_Utf8Iter_BufferNext(self)

    def Index(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf8Iter_Index(self)

    def AdvanceBytesUtf8(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf8Iter_AdvanceBytesUtf8(self)

    def AdvanceBytesUtf16(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf8Iter_AdvanceBytesUtf16(self)

    def AdvanceCodeUnitsUtf16(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf8Iter_AdvanceCodeUnitsUtf16(self)

    def AdvanceBytesUtf32(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf8Iter_AdvanceBytesUtf32(self)

    def GetUtf8(self, *args) -> "Standard_Utf8UChar *":
        return _NCollection.NCollection_Utf8Iter_GetUtf8(self, *args)

    def GetUtf16(self, theBuffer: 'Standard_Utf16Char *') -> "Standard_Utf16Char *":
        return _NCollection.NCollection_Utf8Iter_GetUtf16(self, theBuffer)

    def GetUtf32(self, theBuffer: 'Standard_Utf32Char *') -> "Standard_Utf32Char *":
        return _NCollection.NCollection_Utf8Iter_GetUtf32(self, theBuffer)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf8Iter
    __del__ = lambda self: None
NCollection_Utf8Iter_swigregister = _NCollection.NCollection_Utf8Iter_swigregister
NCollection_Utf8Iter_swigregister(NCollection_Utf8Iter)

class NCollection_Utf8String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCollection_Utf8String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCollection_Utf8String, name)
    __repr__ = _swig_repr

    def Iterator(self) -> "NCollection_UtfIterator< char >":
        return _NCollection.NCollection_Utf8String_Iterator(self)

    def Size(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf8String_Size(self)

    def Length(self) -> "Standard_Integer":
        return _NCollection.NCollection_Utf8String_Length(self)

    def GetChar(self, theCharIndex: 'Standard_Integer const') -> "Standard_Utf32Char":
        return _NCollection.NCollection_Utf8String_GetChar(self, theCharIndex)

    def GetCharBuffer(self, theCharIndex: 'Standard_Integer const') -> "char const *":
        return _NCollection.NCollection_Utf8String_GetCharBuffer(self, theCharIndex)

    def __init__(self, *args):
        this = _NCollection.new_NCollection_Utf8String(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FromLocale(self, theString: 'char const *', theLength: 'Standard_Integer const'=-1) -> "void":
        return _NCollection.NCollection_Utf8String_FromLocale(self, theString, theLength)
    __swig_destroy__ = _NCollection.delete_NCollection_Utf8String
    __del__ = lambda self: None

    def IsEqual(self, theCompare: 'NCollection_Utf8String') -> "bool":
        return _NCollection.NCollection_Utf8String_IsEqual(self, theCompare)

    def SubString(self, theStart: 'Standard_Integer const', theEnd: 'Standard_Integer const') -> "NCollection_UtfString< Standard_Utf8Char >":
        return _NCollection.NCollection_Utf8String_SubString(self, theStart, theEnd)

    def ToCString(self) -> "char const *":
        return _NCollection.NCollection_Utf8String_ToCString(self)

    def ToUtf8(self) -> "NCollection_UtfString< Standard_Utf8Char > const":
        return _NCollection.NCollection_Utf8String_ToUtf8(self)

    def ToUtf16(self) -> "NCollection_UtfString< Standard_Utf16Char > const":
        return _NCollection.NCollection_Utf8String_ToUtf16(self)

    def ToUtf32(self) -> "NCollection_UtfString< Standard_Utf32Char > const":
        return _NCollection.NCollection_Utf8String_ToUtf32(self)

    def ToUtfWide(self) -> "NCollection_UtfString< Standard_WideChar > const":
        return _NCollection.NCollection_Utf8String_ToUtfWide(self)

    def ToLocale(self, theBuffer: 'char *', theSizeBytes: 'Standard_Integer const') -> "bool":
        return _NCollection.NCollection_Utf8String_ToLocale(self, theBuffer, theSizeBytes)

    def IsEmpty(self) -> "bool":
        return _NCollection.NCollection_Utf8String_IsEmpty(self)

    def Clear(self) -> "void":
        return _NCollection.NCollection_Utf8String_Clear(self)

    def Assign(self, theOther: 'NCollection_Utf8String') -> "NCollection_UtfString< Standard_Utf8Char > const &":
        return _NCollection.NCollection_Utf8String_Assign(self, theOther)

    def Swap(self, theOther: 'NCollection_Utf8String') -> "void":
        return _NCollection.NCollection_Utf8String_Swap(self, theOther)

    def Set(self, *args) -> "NCollection_UtfString< Standard_Utf8Char > const &":
        return _NCollection.NCollection_Utf8String_Set(self, *args)

    def __iadd__(self, theAppend: 'NCollection_Utf8String') -> "NCollection_UtfString< Standard_Utf8Char > &":
        return _NCollection.NCollection_Utf8String___iadd__(self, theAppend)

    def __eq__(self, theCompare: 'NCollection_Utf8String') -> "bool":
        return _NCollection.NCollection_Utf8String___eq__(self, theCompare)

    def __ne__(self, theCompare: 'NCollection_Utf8String') -> "bool":
        return _NCollection.NCollection_Utf8String___ne__(self, theCompare)
NCollection_Utf8String_swigregister = _NCollection.NCollection_Utf8String_swigregister
NCollection_Utf8String_swigregister(NCollection_Utf8String)

class NCollection_UtfWideIter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCollection_UtfWideIter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCollection_UtfWideIter, name)
    __repr__ = _swig_repr

    def __init__(self, theString: 'wchar_t const *'):
        this = _NCollection.new_NCollection_UtfWideIter(theString)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theString: 'wchar_t const *') -> "void":
        return _NCollection.NCollection_UtfWideIter_Init(self, theString)

    def __eq__(self, theRight: 'NCollection_UtfWideIter') -> "bool":
        return _NCollection.NCollection_UtfWideIter___eq__(self, theRight)

    def IsValid(self) -> "bool":
        return _NCollection.NCollection_UtfWideIter_IsValid(self)

    def __ref__(self) -> "Standard_Utf32Char":
        return _NCollection.NCollection_UtfWideIter___ref__(self)

    def BufferHere(self) -> "wchar_t const *":
        return _NCollection.NCollection_UtfWideIter_BufferHere(self)

    def ChangeBufferHere(self) -> "wchar_t *":
        return _NCollection.NCollection_UtfWideIter_ChangeBufferHere(self)

    def BufferNext(self) -> "wchar_t const *":
        return _NCollection.NCollection_UtfWideIter_BufferNext(self)

    def Index(self) -> "Standard_Integer":
        return _NCollection.NCollection_UtfWideIter_Index(self)

    def AdvanceBytesUtf8(self) -> "Standard_Integer":
        return _NCollection.NCollection_UtfWideIter_AdvanceBytesUtf8(self)

    def AdvanceBytesUtf16(self) -> "Standard_Integer":
        return _NCollection.NCollection_UtfWideIter_AdvanceBytesUtf16(self)

    def AdvanceCodeUnitsUtf16(self) -> "Standard_Integer":
        return _NCollection.NCollection_UtfWideIter_AdvanceCodeUnitsUtf16(self)

    def AdvanceBytesUtf32(self) -> "Standard_Integer":
        return _NCollection.NCollection_UtfWideIter_AdvanceBytesUtf32(self)

    def GetUtf8(self, *args) -> "Standard_Utf8UChar *":
        return _NCollection.NCollection_UtfWideIter_GetUtf8(self, *args)

    def GetUtf16(self, theBuffer: 'Standard_Utf16Char *') -> "Standard_Utf16Char *":
        return _NCollection.NCollection_UtfWideIter_GetUtf16(self, theBuffer)

    def GetUtf32(self, theBuffer: 'Standard_Utf32Char *') -> "Standard_Utf32Char *":
        return _NCollection.NCollection_UtfWideIter_GetUtf32(self, theBuffer)
    __swig_destroy__ = _NCollection.delete_NCollection_UtfWideIter
    __del__ = lambda self: None
NCollection_UtfWideIter_swigregister = _NCollection.NCollection_UtfWideIter_swigregister
NCollection_UtfWideIter_swigregister(NCollection_UtfWideIter)

class NCollection_UtfWideString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NCollection_UtfWideString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NCollection_UtfWideString, name)
    __repr__ = _swig_repr

    def Iterator(self) -> "NCollection_UtfIterator< wchar_t >":
        return _NCollection.NCollection_UtfWideString_Iterator(self)

    def Size(self) -> "Standard_Integer":
        return _NCollection.NCollection_UtfWideString_Size(self)

    def Length(self) -> "Standard_Integer":
        return _NCollection.NCollection_UtfWideString_Length(self)

    def GetChar(self, theCharIndex: 'Standard_Integer const') -> "Standard_Utf32Char":
        return _NCollection.NCollection_UtfWideString_GetChar(self, theCharIndex)

    def GetCharBuffer(self, theCharIndex: 'Standard_Integer const') -> "wchar_t const *":
        return _NCollection.NCollection_UtfWideString_GetCharBuffer(self, theCharIndex)

    def __init__(self, *args):
        this = _NCollection.new_NCollection_UtfWideString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FromLocale(self, theString: 'char const *', theLength: 'Standard_Integer const'=-1) -> "void":
        return _NCollection.NCollection_UtfWideString_FromLocale(self, theString, theLength)
    __swig_destroy__ = _NCollection.delete_NCollection_UtfWideString
    __del__ = lambda self: None

    def IsEqual(self, theCompare: 'NCollection_UtfWideString') -> "bool":
        return _NCollection.NCollection_UtfWideString_IsEqual(self, theCompare)

    def SubString(self, theStart: 'Standard_Integer const', theEnd: 'Standard_Integer const') -> "NCollection_UtfString< Standard_WideChar >":
        return _NCollection.NCollection_UtfWideString_SubString(self, theStart, theEnd)

    def ToCString(self) -> "wchar_t const *":
        return _NCollection.NCollection_UtfWideString_ToCString(self)

    def ToUtf8(self) -> "NCollection_UtfString< Standard_Utf8Char > const":
        return _NCollection.NCollection_UtfWideString_ToUtf8(self)

    def ToUtf16(self) -> "NCollection_UtfString< Standard_Utf16Char > const":
        return _NCollection.NCollection_UtfWideString_ToUtf16(self)

    def ToUtf32(self) -> "NCollection_UtfString< Standard_Utf32Char > const":
        return _NCollection.NCollection_UtfWideString_ToUtf32(self)

    def ToUtfWide(self) -> "NCollection_UtfString< Standard_WideChar > const":
        return _NCollection.NCollection_UtfWideString_ToUtfWide(self)

    def ToLocale(self, theBuffer: 'char *', theSizeBytes: 'Standard_Integer const') -> "bool":
        return _NCollection.NCollection_UtfWideString_ToLocale(self, theBuffer, theSizeBytes)

    def IsEmpty(self) -> "bool":
        return _NCollection.NCollection_UtfWideString_IsEmpty(self)

    def Clear(self) -> "void":
        return _NCollection.NCollection_UtfWideString_Clear(self)

    def Assign(self, theOther: 'NCollection_UtfWideString') -> "NCollection_UtfString< Standard_WideChar > const &":
        return _NCollection.NCollection_UtfWideString_Assign(self, theOther)

    def Swap(self, theOther: 'NCollection_UtfWideString') -> "void":
        return _NCollection.NCollection_UtfWideString_Swap(self, theOther)

    def Set(self, *args) -> "NCollection_UtfString< Standard_WideChar > const &":
        return _NCollection.NCollection_UtfWideString_Set(self, *args)

    def __iadd__(self, theAppend: 'NCollection_UtfWideString') -> "NCollection_UtfString< Standard_WideChar > &":
        return _NCollection.NCollection_UtfWideString___iadd__(self, theAppend)

    def __eq__(self, theCompare: 'NCollection_UtfWideString') -> "bool":
        return _NCollection.NCollection_UtfWideString___eq__(self, theCompare)

    def __ne__(self, theCompare: 'NCollection_UtfWideString') -> "bool":
        return _NCollection.NCollection_UtfWideString___ne__(self, theCompare)
NCollection_UtfWideString_swigregister = _NCollection.NCollection_UtfWideString_swigregister
NCollection_UtfWideString_swigregister(NCollection_UtfWideString)


@classnotwrapped
class NCollection_Array1:
	pass

@classnotwrapped
class NCollection_AccAllocator:
	pass

@classnotwrapped
class NCollection_UtfString:
	pass

@classnotwrapped
class NCollection_Lerp:
	pass

@classnotwrapped
class NCollection_WinHeapAllocator:
	pass

@classnotwrapped
class NCollection_Mat4:
	pass

@classnotwrapped
class NCollection_AlignedAllocator:
	pass

@classnotwrapped
class NCollection_Map:
	pass

@classnotwrapped
class NCollection_SeqNode:
	pass

@classnotwrapped
class NCollection_BaseSequence:
	pass

@classnotwrapped
class NCollection_LocalArray:
	pass

@classnotwrapped
class NCollection_TListNode:
	pass

@classnotwrapped
class NCollection_DataMap:
	pass

@classnotwrapped
class NCollection_ListNode:
	pass

@classnotwrapped
class NCollection_Vector:
	pass

@classnotwrapped
class NCollection_DoubleMap:
	pass

@classnotwrapped
class NCollection_UtfIterator:
	pass

@classnotwrapped
class NCollection_Vec3:
	pass

@classnotwrapped
class NCollection_UBTree:
	pass

@classnotwrapped
class NCollection_EBTree:
	pass

@classnotwrapped
class NCollection_Vec4:
	pass

@classnotwrapped
class NCollection_Handle:
	pass

@classnotwrapped
class NCollection_BaseList:
	pass

@classnotwrapped
class NCollection_SparseArray:
	pass

@classnotwrapped
class NCollection_BaseVector:
	pass

@classnotwrapped
class NCollection_IncAllocator:
	pass

@classnotwrapped
class NCollection_BaseAllocator:
	pass

@classnotwrapped
class NCollection_SparseArrayBase:
	pass

@classnotwrapped
class NCollection_IndexedMap:
	pass

@classnotwrapped
class NCollection_Vec2:
	pass

@classnotwrapped
class NCollection_List:
	pass

@classnotwrapped
class NCollection_TListIterator:
	pass

@classnotwrapped
class NCollection_BaseMap:
	pass

@classnotwrapped
class NCollection_Buffer:
	pass

@classnotwrapped
class NCollection_IndexedDataMap:
	pass

@classnotwrapped
class NCollection_StdAllocator:
	pass

@classnotwrapped
class NCollection_UBTreeFiller:
	pass

@classnotwrapped
class NCollection_DefaultHasher:
	pass

@classnotwrapped
class NCollection_Sequence:
	pass

@classnotwrapped
class NCollection_Array2:
	pass

@classnotwrapped
class NCollection_Shared:
	pass

@classnotwrapped
class NCollection_HeapAllocator:
	pass



NCollection_String=NCollection_Utf8String

# This file is compatible with both classic and new-style classes.


