# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
TopOpeBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_topopebrep.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TopOpeBRep
else:
    import _TopOpeBRep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopOpeBRep.delete_SwigPyIterator

    def value(self):
        return _TopOpeBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopOpeBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopOpeBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopOpeBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopOpeBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopOpeBRep.SwigPyIterator_copy(self)

    def next(self):
        return _TopOpeBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _TopOpeBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _TopOpeBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopOpeBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopOpeBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopOpeBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopOpeBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopOpeBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopOpeBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopOpeBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TopOpeBRep:
_TopOpeBRep.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _TopOpeBRep.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BRepTopAdaptor
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.IntRes2d
import OCC.Core.IntSurf
import OCC.Core.IntPatch
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntAna
import OCC.Core.TopOpeBRepDS
import OCC.Core.TopOpeBRepTool
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.TopTools
import OCC.Core.IntCurvesFace
import OCC.Core.TopExp
import OCC.Core.Extrema

from enum import IntEnum
from OCC.Core.Exception import *

TopOpeBRep_P2DUNK = _TopOpeBRep.TopOpeBRep_P2DUNK
TopOpeBRep_P2DINT = _TopOpeBRep.TopOpeBRep_P2DINT
TopOpeBRep_P2DSGF = _TopOpeBRep.TopOpeBRep_P2DSGF
TopOpeBRep_P2DSGL = _TopOpeBRep.TopOpeBRep_P2DSGL
TopOpeBRep_P2DNEW = _TopOpeBRep.TopOpeBRep_P2DNEW
TopOpeBRep_ANALYTIC = _TopOpeBRep.TopOpeBRep_ANALYTIC
TopOpeBRep_RESTRICTION = _TopOpeBRep.TopOpeBRep_RESTRICTION
TopOpeBRep_WALKING = _TopOpeBRep.TopOpeBRep_WALKING
TopOpeBRep_LINE = _TopOpeBRep.TopOpeBRep_LINE
TopOpeBRep_CIRCLE = _TopOpeBRep.TopOpeBRep_CIRCLE
TopOpeBRep_ELLIPSE = _TopOpeBRep.TopOpeBRep_ELLIPSE
TopOpeBRep_PARABOLA = _TopOpeBRep.TopOpeBRep_PARABOLA
TopOpeBRep_HYPERBOLA = _TopOpeBRep.TopOpeBRep_HYPERBOLA
TopOpeBRep_OTHERTYPE = _TopOpeBRep.TopOpeBRep_OTHERTYPE


class TopOpeBRep_P2Dstatus(IntEnum):
	TopOpeBRep_P2DUNK = 0
	TopOpeBRep_P2DINT = 1
	TopOpeBRep_P2DSGF = 2
	TopOpeBRep_P2DSGL = 3
	TopOpeBRep_P2DNEW = 4
TopOpeBRep_P2DUNK = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DUNK
TopOpeBRep_P2DINT = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DINT
TopOpeBRep_P2DSGF = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DSGF
TopOpeBRep_P2DSGL = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DSGL
TopOpeBRep_P2DNEW = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DNEW

class TopOpeBRep_TypeLineCurve(IntEnum):
	TopOpeBRep_ANALYTIC = 0
	TopOpeBRep_RESTRICTION = 1
	TopOpeBRep_WALKING = 2
	TopOpeBRep_LINE = 3
	TopOpeBRep_CIRCLE = 4
	TopOpeBRep_ELLIPSE = 5
	TopOpeBRep_PARABOLA = 6
	TopOpeBRep_HYPERBOLA = 7
	TopOpeBRep_OTHERTYPE = 8
TopOpeBRep_ANALYTIC = TopOpeBRep_TypeLineCurve.TopOpeBRep_ANALYTIC
TopOpeBRep_RESTRICTION = TopOpeBRep_TypeLineCurve.TopOpeBRep_RESTRICTION
TopOpeBRep_WALKING = TopOpeBRep_TypeLineCurve.TopOpeBRep_WALKING
TopOpeBRep_LINE = TopOpeBRep_TypeLineCurve.TopOpeBRep_LINE
TopOpeBRep_CIRCLE = TopOpeBRep_TypeLineCurve.TopOpeBRep_CIRCLE
TopOpeBRep_ELLIPSE = TopOpeBRep_TypeLineCurve.TopOpeBRep_ELLIPSE
TopOpeBRep_PARABOLA = TopOpeBRep_TypeLineCurve.TopOpeBRep_PARABOLA
TopOpeBRep_HYPERBOLA = TopOpeBRep_TypeLineCurve.TopOpeBRep_HYPERBOLA
TopOpeBRep_OTHERTYPE = TopOpeBRep_TypeLineCurve.TopOpeBRep_OTHERTYPE


def Handle_TopOpeBRep_FFDumper_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_Create()

def Handle_TopOpeBRep_FFDumper_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_DownCast(t)

def Handle_TopOpeBRep_FFDumper_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_IsNull(t)

def Handle_TopOpeBRep_Hctxee2d_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_Create()

def Handle_TopOpeBRep_Hctxee2d_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_DownCast(t)

def Handle_TopOpeBRep_Hctxee2d_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_IsNull(t)

def Handle_TopOpeBRep_Hctxff2d_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_Create()

def Handle_TopOpeBRep_Hctxff2d_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_DownCast(t)

def Handle_TopOpeBRep_Hctxff2d_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_IsNull(t)

def Handle_TopOpeBRep_HArray1OfLineInter_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_Create()

def Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t)

def Handle_TopOpeBRep_HArray1OfLineInter_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_IsNull(t)

def Handle_TopOpeBRep_HArray1OfVPointInter_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_Create()

def Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t)

def Handle_TopOpeBRep_HArray1OfVPointInter_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_IsNull(t)
class TopOpeBRep_Array1OfLineInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_Array1OfLineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Array1OfLineInter(*args))

    def Init(self, theValue):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Init(self, theValue)

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Size(self)

    def Length(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Length(self)

    def IsEmpty(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsEmpty(self)

    def Lower(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Lower(self)

    def Upper(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Upper(self)

    def IsDeletable(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsDeletable(self)

    def IsAllocated(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsAllocated(self)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Assign(self, theOther)

    def Move(self, theOther):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Move(self, theOther)

    def Set(self, *args):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Set(self, *args)

    def First(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_First(self)

    def ChangeFirst(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeFirst(self)

    def Last(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Last(self)

    def ChangeLast(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeLast(self)

    def Value(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Array1OfLineInter

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TopOpeBRep_Array1OfLineInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Array1OfLineInter_swigregister(TopOpeBRep_Array1OfLineInter)
class TopOpeBRep_Array1OfVPointInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Array1OfVPointInter(*args))

    def Init(self, theValue):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Init(self, theValue)

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Size(self)

    def Length(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Length(self)

    def IsEmpty(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsEmpty(self)

    def Lower(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Lower(self)

    def Upper(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Upper(self)

    def IsDeletable(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsDeletable(self)

    def IsAllocated(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsAllocated(self)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Assign(self, theOther)

    def Move(self, theOther):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Move(self, theOther)

    def Set(self, *args):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Set(self, *args)

    def First(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_First(self)

    def ChangeFirst(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeFirst(self)

    def Last(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Last(self)

    def ChangeLast(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeLast(self)

    def Value(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Array1OfVPointInter

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TopOpeBRep_Array1OfVPointInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_swigregister(TopOpeBRep_Array1OfVPointInter)
class TopOpeBRep_DataMapOfTopolTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_DataMapOfTopolTool(*args))

    def Exchange(self, theOther):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Exchange(self, theOther)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Assign(self, theOther)

    def Set(self, theOther):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Set(self, theOther)

    def ReSize(self, N):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_UnBind(self, theKey)

    def Seek(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Seek(self, theKey)

    def Find(self, *args):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool___call__(self, *args)

    def Clear(self, *args):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Clear(self, *args)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_DataMapOfTopolTool

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Size(self)

# Register TopOpeBRep_DataMapOfTopolTool in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_swigregister(TopOpeBRep_DataMapOfTopolTool)
class TopOpeBRep_ListIteratorOfListOfBipoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ListIteratorOfListOfBipoint(*args))

    def More(self):
        return _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_More(self)

    def Next(self):
        return _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_Next(self)

    def Value(self):
        return _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_Value(self)

    def ChangeValue(self):
        return _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_ChangeValue(self)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ListIteratorOfListOfBipoint

# Register TopOpeBRep_ListIteratorOfListOfBipoint in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_swigregister(TopOpeBRep_ListIteratorOfListOfBipoint)
class TopOpeBRep_ListOfBipoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_ListOfBipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ListOfBipoint(*args))

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Size(self)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Assign(self, theOther)

    def Set(self, theOther):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Clear(self, theAllocator)

    def First(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_First(self)

    def Last(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Last(self)

    def Append(self, *args):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Append(self, *args)

    def Prepend(self, *args):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Prepend(self, *args)

    def RemoveFirst(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_RemoveFirst(self)

    def Remove(self, theIter):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_InsertAfter(self, *args)

    def Reverse(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Reverse(self)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ListOfBipoint

    def __len__(self):
        return self.Size()


# Register TopOpeBRep_ListOfBipoint in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ListOfBipoint_swigregister(TopOpeBRep_ListOfBipoint)
class TopOpeBRep_SequenceOfPoint2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_SequenceOfPoint2d(*args))

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Size(self)

    def Length(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Length(self)

    def Lower(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Lower(self)

    def Upper(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Upper(self)

    def IsEmpty(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_IsEmpty(self)

    def Reverse(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Reverse(self)

    def Exchange(self, I, J):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Assign(self, theOther)

    def Set(self, theOther):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Set(self, theOther)

    def Remove(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Remove(self, *args)

    def Append(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Append(self, *args)

    def Prepend(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Split(self, theIndex, theSeq)

    def First(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_First(self)

    def ChangeFirst(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeFirst(self)

    def Last(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Last(self)

    def ChangeLast(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeLast(self)

    def Value(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_SequenceOfPoint2d

    def __len__(self):
        return self.Size()


# Register TopOpeBRep_SequenceOfPoint2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_swigregister(TopOpeBRep_SequenceOfPoint2d)
class topopebrep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.topopebrep_swiginit(self, _TopOpeBRep.new_topopebrep())
    __swig_destroy__ = _TopOpeBRep.delete_topopebrep

# Register topopebrep in _TopOpeBRep:
_TopOpeBRep.topopebrep_swigregister(topopebrep)
class TopOpeBRep_Bipoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        I1: int
        I2: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_Bipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Bipoint(*args))

    def I1(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Bipoint_I1(self, *args)

    def I2(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Bipoint_I2(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Bipoint

# Register TopOpeBRep_Bipoint in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Bipoint_swigregister(TopOpeBRep_Bipoint)
class TopOpeBRep_DSFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_DSFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_DSFiller(*args))

    def ChangeEdgesFiller(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_EdgesFiller

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeEdgesFiller(self, *args)

    def ChangeFaceEdgeFiller(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_FaceEdgeFiller

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeFaceEdgeFiller(self, *args)

    def ChangeFacesFiller(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_FacesFiller

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeFacesFiller(self, *args)

    def ChangeShapeIntersector(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_ShapeIntersector

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeShapeIntersector(self, *args)

    def ChangeShapeIntersector2d(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_ShapeIntersector2d

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeShapeIntersector2d(self, *args)

    def Checker(self, *args):
        r"""

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Checker(self, *args)

    def Complete(self, *args):
        r"""

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Complete(self, *args)

    def CompleteDS(self, *args):
        r"""

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        Update the data structure with relevant information deduced from the intersections. //! shells containing an intersected face. wires containing an intersected edge.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_CompleteDS(self, *args)

    def CompleteDS2d(self, *args):
        r"""

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        Update the data structure with relevant information deduced from the intersections 2d. //! shells containing an intersected face. wires containing an intersected edge. //! search for interference identity using edge connexity //nyi.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_CompleteDS2d(self, *args)

    def Filter(self, *args):
        r"""

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Filter(self, *args)

    def GapFiller(self, *args):
        r"""

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_GapFiller(self, *args)

    def Insert(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        HDS: TopOpeBRepDS_HDataStructure
        orientFORWARD: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Stores in <ds> the intersections of <s1> and <s2>. if orientforward = true s forward,reversed --> forward s external,internal --> external,internal.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert(self, *args)

    def Insert1d(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        F1: TopoDS_Face
        F2: TopoDS_Face
        HDS: TopOpeBRepDS_HDataStructure
        orientFORWARD: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Stores in <ds> the intersections of <s1> and <s2>. s1 and s2 are edges or wires. s1 edges have a 2d representation in face f1 s2 edges have a 2d representation in face f2 f1 is the face which surface is taken as reference for 2d description of s1 and s2 edges. if orientforward = true s forward,reversed --> forward s external,internal --> external,internal.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert1d(self, *args)

    def Insert2d(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        Stores in <ds> the intersections of <s1> and <s2>. s1 et s2 contain only samedomain face.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert2d(self, *args)

    def InsertIntersection(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        HDS: TopOpeBRepDS_HDataStructure
        orientFORWARD: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Stores in <ds> the intersections of <s1> and <s2>. if orientforward = true s forwar,reversed --> forward s external,internal --> external,internal.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_InsertIntersection(self, *args)

    def InsertIntersection2d(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        S1, s2 set of tangent face lance les intersections 2d pour coder correctement les faces samedomain.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_InsertIntersection2d(self, *args)

    def IsContext1d(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_IsContext1d(self, *args)

    def IsMadeOf1d(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_IsMadeOf1d(self, *args)

    def PShapeClassifier(self, *args):
        r"""
        Return
        -------
        TopOpeBRepTool_PShapeClassifier

        Description
        -----------
        Return field mypshapeclassifier. set field mypshapeclassifier.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_PShapeClassifier(self, *args)

    def Reducer(self, *args):
        r"""

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Reducer(self, *args)

    def RemoveUnsharedGeometry(self, *args):
        r"""

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_RemoveUnsharedGeometry(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_DSFiller

# Register TopOpeBRep_DSFiller in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_DSFiller_swigregister(TopOpeBRep_DSFiller)
class TopOpeBRep_EdgesFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_EdgesFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_EdgesFiller(*args))

    def Face(self, *args):
        r"""

        Parameters
        ----------
        I: int
        F: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesFiller_Face(self, *args)

    def Insert(self, *args):
        r"""

        Parameters
        ----------
        E1: TopoDS_Shape
        E2: TopoDS_Shape
        EI: TopOpeBRep_EdgesIntersector
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesFiller_Insert(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_EdgesFiller

# Register TopOpeBRep_EdgesFiller in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_EdgesFiller_swigregister(TopOpeBRep_EdgesFiller)
class TopOpeBRep_EdgesIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_EdgesIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_EdgesIntersector(*args))

    def Curve(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        Geom2dAdaptor_Curve

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Curve(self, *args)

    def Dimension(self, *args):
        r"""

        Parameters
        ----------
        D: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        int

        Description
        -----------
        Set working space dimension d = 1 for e &|| w, 2 for e in f.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Dimension(self, *args)

    def Dump(self, *args):
        r"""

        Parameters
        ----------
        str: str
        ie1: int (optional, default to 0)
        ie2: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Dump(self, *args)

    def Edge(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Edge(self, *args)

    def Face(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Face(self, *args)

    def FacesSameOriented(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_FacesSameOriented(self, *args)

    def ForceTolerances(self, *args):
        r"""

        Parameters
        ----------
        Tol1: float
        Tol2: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ForceTolerances(self, *args)

    def HasSegment(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        True if at least one intersection segment.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_HasSegment(self, *args)

    def InitPoint(self, *args):
        r"""

        Parameters
        ----------
        selectkeep: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_InitPoint(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_IsEmpty(self, *args)

    def MorePoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_MorePoint(self, *args)

    def NbPoints(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NbPoints(self, *args)

    def NbSegments(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NbSegments(self, *args)

    def NextPoint(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NextPoint(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        E1: TopoDS_Shape
        E2: TopoDS_Shape
        ReduceSegments: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Perform(self, *args)

    def Point(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_Point2d

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        I: int

        Return
        -------
        TopOpeBRep_Point2d

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Point(self, *args)

    def Points(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_SequenceOfPoint2d

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Points(self, *args)

    def ReduceSegment(self, *args):
        r"""

        Parameters
        ----------
        P1: TopOpeBRep_Point2d
        P2: TopOpeBRep_Point2d
        Pn: TopOpeBRep_Point2d

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ReduceSegment(self, *args)

    def SameDomain(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        = mysamedomain.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SameDomain(self, *args)

    def SetFaces(self, *args):
        r"""

        Parameters
        ----------
        F1: TopoDS_Shape
        F2: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        F1: TopoDS_Shape
        F2: TopoDS_Shape
        B1: Bnd_Box
        B2: Bnd_Box

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SetFaces(self, *args)

    def Status1(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_P2Dstatus

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Status1(self, *args)

    def Surface(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        BRepAdaptor_Surface

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Surface(self, *args)

    def SurfacesSameOriented(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SurfacesSameOriented(self, *args)

    def ToleranceMax(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ToleranceMax(self, *args)

    def Tolerances(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        tol1: float
        tol2: float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Tolerances(self, *args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def Tolerance2(self):
    	pass

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_EdgesIntersector

# Register TopOpeBRep_EdgesIntersector in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_EdgesIntersector_swigregister(TopOpeBRep_EdgesIntersector)
class TopOpeBRep_FFDumper(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        PFF: TopOpeBRep_PFacesFiller

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_FFDumper_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FFDumper(*args))

    def DumpDSP(self, *args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        GK: TopOpeBRepDS_Kind
        G: int
        newinDS: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpDSP(self, *args)

    def DumpLine(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpLine(self, *args)

    def DumpVP(self, *args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        ISI: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpVP(self, *args)

    def ExploreIndex(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        ISI: int

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_ExploreIndex(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        PFF: TopOpeBRep_PFacesFiller

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_Init(self, *args)

    def PFacesFillerDummy(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_PFacesFiller

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_PFacesFillerDummy(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_FFDumper_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FFDumper

# Register TopOpeBRep_FFDumper in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FFDumper_swigregister(TopOpeBRep_FFDumper)
class TopOpeBRep_FFTransitionTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ProcessEdgeONTransition(*args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        Index: int
        R: TopoDS_Shape
        E: TopoDS_Shape
        F: TopoDS_Shape

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        Compute transition on 'intpatch_restriction line' edge <r> when crossing edge <e> of face <f> at point <vp>. vp is given on edge <e> of face <f> of index <index> (1 or 2). <vp> has been classified by facesfiller as topabs_on an edge <r> of the other face than <f> of current (face/face) intersection. transition depends on the orientation of e in f. this method should be provided by intpatch_line (nyi).

        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args)

    @staticmethod
    def ProcessEdgeTransition(*args):
        r"""

        Parameters
        ----------
        P: TopOpeBRep_VPointInter
        Index: int
        LineOrientation: TopAbs_Orientation

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args)

    @staticmethod
    def ProcessFaceTransition(*args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        Index: int
        FaceOrientation: TopAbs_Orientation

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args)

    @staticmethod
    def ProcessLineTransition(*args):
        r"""

        Parameters
        ----------
        P: TopOpeBRep_VPointInter
        Index: int
        EdgeOrientation: TopAbs_Orientation

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        P: TopOpeBRep_VPointInter
        L: TopOpeBRep_LineInter

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_FFTransitionTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FFTransitionTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FFTransitionTool

# Register TopOpeBRep_FFTransitionTool in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FFTransitionTool_swigregister(TopOpeBRep_FFTransitionTool)
class TopOpeBRep_FaceEdgeFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_FaceEdgeFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FaceEdgeFiller(*args))

    def Insert(self, *args):
        r"""

        Parameters
        ----------
        F: TopoDS_Shape
        E: TopoDS_Shape
        FEINT: TopOpeBRep_FaceEdgeIntersector
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeFiller_Insert(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FaceEdgeFiller

# Register TopOpeBRep_FaceEdgeFiller in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FaceEdgeFiller_swigregister(TopOpeBRep_FaceEdgeFiller)
class TopOpeBRep_FaceEdgeIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FaceEdgeIntersector(*args))

    def ForceTolerance(self, *args):
        r"""

        Parameters
        ----------
        tol: float

        Return
        -------
        None

        Description
        -----------
        Force the tolerance values used by the next perform(s1,s2) call.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_ForceTolerance(self, *args)

    def Index(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Trace only.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Index(self, *args)

    def InitPoint(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_InitPoint(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_IsEmpty(self, *args)

    def IsVertex(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        P: gp_Pnt
        Tol: float
        V: TopoDS_Vertex

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        I: int
        V: TopoDS_Vertex

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_IsVertex(self, *args)

    def MorePoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_MorePoint(self, *args)

    def NbPoints(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_NbPoints(self, *args)

    def NextPoint(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_NextPoint(self, *args)

    def Parameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Parametre de value() sur l'arete.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Parameter(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        F: TopoDS_Shape
        E: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Perform(self, *args)

    def Shape(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns intersected face or edge according to value of <index> = 1 or 2.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Shape(self, *args)

    def State(self, *args):
        r"""
        Return
        -------
        TopAbs_State

        Description
        -----------
        In ou on / a la face. les points out ne sont pas retournes.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_State(self, *args)

    def Tolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return the tolerance value used in the last perform() call if forcetolerance() has been called, return the given value. if not, return value extracted from shapes.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Tolerance(self, *args)

    def Transition(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        FaceOrientation: TopAbs_Orientation

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        Index = 1 transition par rapport a la face, en cheminant sur l'arete.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Transition(self, *args)

    def UVPoint(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        Parametre de value() sur la face.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_UVPoint(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Return the 3d point of the current intersection point.

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FaceEdgeIntersector

# Register TopOpeBRep_FaceEdgeIntersector in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_swigregister(TopOpeBRep_FaceEdgeIntersector)
class TopOpeBRep_FacesFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_FacesFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FacesFiller(*args))

    def AddShapesLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Compute 3d curve, pcurves and face/curve interferences for current ndsc. add them to the ds.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_AddShapesLine(self, *args)

    def ChangeDataStructure(self, *args):
        r"""
        Return
        -------
        TopOpeBRepDS_DataStructure

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangeDataStructure(self, *args)

    def ChangeFacesIntersector(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_FacesIntersector

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangeFacesIntersector(self, *args)

    def ChangePointClassifier(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_PointClassifier

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangePointClassifier(self, *args)

    def CheckLine(self, *args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_CheckLine(self, *args)

    @staticmethod
    def EqualpPonR(*args):
        r"""

        Parameters
        ----------
        Lrest: TopOpeBRep_LineInter
        VP1: TopOpeBRep_VPointInter
        VP2: TopOpeBRep_VPointInter

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_EqualpPonR(*args)

    def Face(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Face

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Face(self, *args)

    def FaceFaceTransition(self, *args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        I: int

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        I: int

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FaceFaceTransition(self, *args)

    def FillLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FillLine(self, *args)

    def FillLineVPonR(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Vp processing for restriction line and line sharing same domain with section edges: - if restriction: adds restriction edges as section edges and compute face/edge interference. - if same domain: if line share same domain with section edges, compute parts of line in/in the two faces, and compute curve/point interference for vp boundaries.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FillLineVPonR(self, *args)

    def GetESL(self, *args):
        r"""

        Parameters
        ----------
        LES: TopTools_ListOfShape

        Return
        -------
        None

        Description
        -----------
        Get map <mapes > of restriction edges having parts in one of the 2 faces.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetESL(self, *args)

    def GetFFGeometry(self, *args):
        r"""

        Parameters
        ----------
        DSP: TopOpeBRepDS_Point
        K: TopOpeBRepDS_Kind

        Return
        -------
        G: int

        Description
        -----------
        Search for g = geometry of point which is identical to <dsp> among the ds points created in the current face/face intersection ( current insert() call).

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        K: TopOpeBRepDS_Kind

        Return
        -------
        G: int

        Description
        -----------
        Search for g = geometry of point which is identical to <vp> among the ds points created in the current face/face intersection ( current insert() call).

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetFFGeometry(self, *args)

    def GetGeometry(self, *args):
        r"""

        Parameters
        ----------
        IT: TopOpeBRepDS_ListIteratorOfListOfInterference
        VP: TopOpeBRep_VPointInter
        K: TopOpeBRepDS_Kind

        Return
        -------
        G: int

        Description
        -----------
        Get the geometry of a ds point <dsp>. search for it with scaninterflist (previous method). if found, set <g> to the geometry of the interference found. else, add the point <dsp> in the <ds> and set <g> to the value of the new geometry such created. returns the value of scaninterflist().

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetGeometry(self, *args)

    def GetTraceIndex(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        exF1: int
        exF2: int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetTraceIndex(self, *args)

    def HDataStructure(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopOpeBRepDS_HDataStructure>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_HDataStructure(self, *args)

    def Insert(self, *args):
        r"""

        Parameters
        ----------
        F1: TopoDS_Shape
        F2: TopoDS_Shape
        FACINT: TopOpeBRep_FacesIntersector
        HDS: TopOpeBRepDS_HDataStructure

        Return
        -------
        None

        Description
        -----------
        Stores in <ds> the intersections of <s1> and <s2>.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Insert(self, *args)

    @staticmethod
    def IsVPtransLok(*args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        iVP: int
        SI12: int
        T: TopOpeBRepDS_Transition

        Return
        -------
        bool

        Description
        -----------
        Computes the transition <t> of the vpoint <ivp> on the edge of <si12>. returns <false> if the status is unknown.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_IsVPtransLok(*args)

    @staticmethod
    def LSameDomainERL(*args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        ERL: TopTools_ListOfShape

        Return
        -------
        bool

        Description
        -----------
        Returns <true> if <l> shares a same geometric domain with at least one of the section edges of <erl>.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_LSameDomainERL(*args)

    @staticmethod
    def Lminmax(*args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Return
        -------
        pmin: float
        pmax: float

        Description
        -----------
        Computes <pmin> and <pmax> the upper and lower bounds of <l> enclosing all vpoints.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Lminmax(*args)

    def LoadLine(self, *args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_LoadLine(self, *args)

    def MakeGeometry(self, *args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        ShapeIndex: int
        K: TopOpeBRepDS_Kind

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_MakeGeometry(self, *args)

    def PDataStructureDummy(self, *args):
        r"""
        Return
        -------
        TopOpeBRepDS_PDataStructure

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PDataStructureDummy(self, *args)

    def PFacesIntersectorDummy(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_PFacesIntersector

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PFacesIntersectorDummy(self, *args)

    def PLineInterDummy(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_PLineInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PLineInterDummy(self, *args)

    def PShapeClassifier(self, *args):
        r"""
        Return
        -------
        TopOpeBRepTool_PShapeClassifier

        Description
        -----------
        Return field mypshapeclassifier.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PShapeClassifier(self, *args)

    def ProcessLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Process current intersection line (set by loadline).

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessLine(self, *args)

    def ProcessRLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Process current restriction line, adding restriction edge and computing face/edge interference.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessRLine(self, *args)

    def ProcessSectionEdges(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessSectionEdges(self, *args)

    def ProcessVPInotonR(self, *args):
        r"""

        Parameters
        ----------
        VPI: TopOpeBRep_VPointInterIterator

        Return
        -------
        None

        Description
        -----------
        Processing processvpnotonr for vpi.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPInotonR(self, *args)

    def ProcessVPIonR(self, *args):
        r"""

        Parameters
        ----------
        VPI: TopOpeBRep_VPointInterIterator
        trans1: TopOpeBRepDS_Transition
        F1: TopoDS_Shape
        ShapeIndex: int

        Return
        -------
        None

        Description
        -----------
        Processing processvponr for vpi.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPIonR(self, *args)

    def ProcessVPR(self, *args):
        r"""

        Parameters
        ----------
        FF: TopOpeBRep_FacesFiller
        VP: TopOpeBRep_VPointInter

        Return
        -------
        None

        Description
        -----------
        Calling the following processvpionr and processvponr.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPR(self, *args)

    def ProcessVPnotonR(self, *args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter

        Return
        -------
        None

        Description
        -----------
        Adds <vp>'s geometrical point to the ds (if not stored) and computes curve point interference.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPnotonR(self, *args)

    def ProcessVPonR(self, *args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        trans1: TopOpeBRepDS_Transition
        F1: TopoDS_Shape
        ShapeIndex: int

        Return
        -------
        None

        Description
        -----------
        Adds <vp>'s geometric point (if not stored) and computes (curve or edge)/(point or vertex) interference.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPonR(self, *args)

    def ProcessVPonclosingR(self, *args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        F1: TopoDS_Shape
        ShapeIndex: int
        transEdge: TopOpeBRepDS_Transition
        PVKind: TopOpeBRepDS_Kind
        PVIndex: int
        EPIfound: bool
        IEPI: TopOpeBRepDS_Interference

        Return
        -------
        None

        Description
        -----------
        Vp processing on closing arc.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPonclosingR(self, *args)

    def ProcessVPondgE(self, *args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        ShapeIndex: int
        PVKind: TopOpeBRepDS_Kind
        IEPI: TopOpeBRepDS_Interference
        ICPI: TopOpeBRepDS_Interference

        Return
        -------
        PVIndex: int
        EPIfound: bool
        CPIfound: bool

        Description
        -----------
        Vp processing on degenerated arc.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPondgE(self, *args)

    def ResetDSC(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ResetDSC(self, *args)

    def SetPShapeClassifier(self, *args):
        r"""

        Parameters
        ----------
        PSC: TopOpeBRepTool_PShapeClassifier

        Return
        -------
        None

        Description
        -----------
        Set field mypshapeclassifier.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_SetPShapeClassifier(self, *args)

    def SetTraceIndex(self, *args):
        r"""

        Parameters
        ----------
        exF1: int
        exF2: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_SetTraceIndex(self, *args)

    def StoreCurveInterference(self, *args):
        r"""

        Parameters
        ----------
        I: TopOpeBRepDS_Interference

        Return
        -------
        None

        Description
        -----------
        Add interference <i> to list mydscil. on a given line, at first call, add a new ds curve.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_StoreCurveInterference(self, *args)

    @staticmethod
    def TransvpOK(*args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        iVP: int
        SI: int
        isINOUT: bool

        Return
        -------
        bool

        Description
        -----------
        Computes transition on line for vp<ivp> on edge restriction of <si>. if <isinout>: returns <true> if transition computed is in/out else: returns <true> if transition computed is out/in.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_TransvpOK(*args)

    @staticmethod
    def VPParamOnER(*args):
        r"""

        Parameters
        ----------
        vp: TopOpeBRep_VPointInter
        Lrest: TopOpeBRep_LineInter

        Return
        -------
        float

        Description
        -----------
        Returns parameter u of vp on the restriction edge.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VPParamOnER(*args)

    def VP_Position(self, *args):
        r"""

        Parameters
        ----------
        FACINT: TopOpeBRep_FacesIntersector

        Return
        -------
        None

        Description
        -----------
        Compute position of vpoints of lines.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Return
        -------
        None

        Description
        -----------
        Compute position of vpoints of line l.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        VPC: TopOpeBRep_VPointInterClassifier

        Return
        -------
        None

        Description
        -----------
        Compute position of vp with current faces, according to vp.shapeindex() .

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_Position(self, *args)

    def VP_PositionOnL(self, *args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Return
        -------
        None

        Description
        -----------
        Compute position of vpoints of non-restriction line l.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_PositionOnL(self, *args)

    def VP_PositionOnR(self, *args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Return
        -------
        None

        Description
        -----------
        Compute position of vpoints of restriction line l.

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_PositionOnR(self, *args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def EqualpP(self):
    	pass

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FacesFiller

# Register TopOpeBRep_FacesFiller in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FacesFiller_swigregister(TopOpeBRep_FacesFiller)
class TopOpeBRep_FacesIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_FacesIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FacesIntersector(*args))

    def ChangeLine(self, *args):
        r"""

        Parameters
        ----------
        IL: int

        Return
        -------
        TopOpeBRep_LineInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_ChangeLine(self, *args)

    def CurrentLine(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_LineInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_CurrentLine(self, *args)

    def CurrentLineIndex(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_CurrentLineIndex(self, *args)

    def Face(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns first or second intersected face.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Face(self, *args)

    def ForceTolerances(self, *args):
        r"""

        Parameters
        ----------
        tolarc: float
        toltang: float

        Return
        -------
        None

        Description
        -----------
        Force the tolerance values used by the next perform(s1,s2) call.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_ForceTolerances(self, *args)

    def GetTolerances(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        tolarc: float
        toltang: float

        Description
        -----------
        Return the tolerance values used in the last perform() call if forcetolerances() has been called, return the given values. if not, return values extracted from shapes.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_GetTolerances(self, *args)

    def InitLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_InitLine(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsDone(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsEmpty(self, *args)

    def IsRestriction(self, *args):
        r"""

        Parameters
        ----------
        E: TopoDS_Shape

        Return
        -------
        bool

        Description
        -----------
        Returns true if edge <e> is found as same as the edge associated with a restriction line.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsRestriction(self, *args)

    def Lines(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopOpeBRep_HArray1OfLineInter>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Lines(self, *args)

    def MoreLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_MoreLine(self, *args)

    def NbLines(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_NbLines(self, *args)

    def NextLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_NextLine(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Computes the intersection of faces s1 and s2.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        B1: Bnd_Box
        B2: Bnd_Box

        Return
        -------
        None

        Description
        -----------
        Computes the intersection of faces s1 and s2.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Perform(self, *args)

    def PrepareLines(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_PrepareLines(self, *args)

    def Restrictions(self, *args):
        r"""
        Return
        -------
        TopTools_IndexedMapOfShape

        Description
        -----------
        Returns the map of edges found as topebrepbrep_restriction.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Restrictions(self, *args)

    def SameDomain(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if perform() arguments are two faces with the same surface.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_SameDomain(self, *args)

    def SurfacesSameOriented(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if perform() arguments are two faces samedomain() and normals on both side. raise if samedomain is false.

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_SurfacesSameOriented(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FacesIntersector

# Register TopOpeBRep_FacesIntersector in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FacesIntersector_swigregister(TopOpeBRep_FacesIntersector)
class TopOpeBRep_GeomTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def MakeBSpline1fromWALKING2d(*args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        SI: int

        Return
        -------
        opencascade::handle<Geom2d_Curve>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args)

    @staticmethod
    def MakeBSpline1fromWALKING3d(*args):
        r"""

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args)

    @staticmethod
    def MakeCurve(*args):
        r"""

        Parameters
        ----------
        min: float
        max: float
        L: TopOpeBRep_LineInter
        C: Geom_Curve

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurve(*args)

    @staticmethod
    def MakeCurves(*args):
        r"""

        Parameters
        ----------
        min: float
        max: float
        L: TopOpeBRep_LineInter
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        C: TopOpeBRepDS_Curve
        PC1: Geom2d_Curve
        PC2: Geom2d_Curve

        Return
        -------
        None

        Description
        -----------
        Make the ds curve <c> and the pcurves <pc1,pc2> from intersection line <l> lying on shapes <s1,s2>. <min,max> = <l> bounds.

        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurves(*args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def MakePrivateCurves(self):
    	pass


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_GeomTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_GeomTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_GeomTool

# Register TopOpeBRep_GeomTool in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_GeomTool_swigregister(TopOpeBRep_GeomTool)
class TopOpeBRep_Hctxee2d(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_Hctxee2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Hctxee2d(*args))

    def Curve(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        Geom2dAdaptor_Curve

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Curve(self, *args)

    def Domain(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        IntRes2d_Domain

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Domain(self, *args)

    def Edge(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Edge(self, *args)

    def SetEdges(self, *args):
        r"""

        Parameters
        ----------
        E1: TopoDS_Edge
        E2: TopoDS_Edge
        BAS1: BRepAdaptor_Surface
        BAS2: BRepAdaptor_Surface

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_SetEdges(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_Hctxee2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Hctxee2d

# Register TopOpeBRep_Hctxee2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Hctxee2d_swigregister(TopOpeBRep_Hctxee2d)
class TopOpeBRep_Hctxff2d(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_Hctxff2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Hctxff2d(*args))

    def Face(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Face

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_Face(self, *args)

    def FaceSameOrientedWithRef(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_FaceSameOrientedWithRef(self, *args)

    def FacesSameOriented(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_FacesSameOriented(self, *args)

    def GetMaxTolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_GetMaxTolerance(self, *args)

    def GetTolerances(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        Tol1: float
        Tol2: float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_GetTolerances(self, *args)

    def HSurface(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        opencascade::handle<BRepAdaptor_Surface>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_HSurface(self, *args)

    def SetFaces(self, *args):
        r"""

        Parameters
        ----------
        F1: TopoDS_Face
        F2: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetFaces(self, *args)

    def SetHSurfaces(self, *args):
        r"""

        Parameters
        ----------
        S1: BRepAdaptor_Surface
        S2: BRepAdaptor_Surface

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetHSurfaces(self, *args)

    def SetTolerances(self, *args):
        r"""

        Parameters
        ----------
        Tol1: float
        Tol2: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetTolerances(self, *args)

    def SurfacesSameOriented(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SurfacesSameOriented(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_Hctxff2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Hctxff2d

# Register TopOpeBRep_Hctxff2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Hctxff2d_swigregister(TopOpeBRep_Hctxff2d)
class TopOpeBRep_LineInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_LineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_LineInter(*args))

    def Arc(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the edge of a restriction line (or a null edge).

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Arc(self, *args)

    def ArcIsEdge(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        bool

        Description
        -----------
        Returns true if arc() edge (of a restriction line) is an edge of the original face <index> (1 or 2).

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_ArcIsEdge(self, *args)

    def Bounds(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        f: float
        l: float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Bounds(self, *args)

    def ChangeVPoint(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopOpeBRep_VPointInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_ChangeVPoint(self, *args)

    def ComputeFaceFaceTransition(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_ComputeFaceFaceTransition(self, *args)

    def Curve(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        parmin: float
        parmax: float

        Return
        -------
        opencascade::handle<Geom_Curve>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Curve(self, *args)

    def DumpBipoint(self, *args):
        r"""

        Parameters
        ----------
        B: TopOpeBRep_Bipoint
        s1: str
        s2: str

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpBipoint(self, *args)

    def DumpLineTransitionsToString(self):
        r"""DumpLineTransitionsToString(TopOpeBRep_LineInter self) -> std::string"""
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpLineTransitionsToString(self)

    def DumpType(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpType(self, *args)

    def DumpVPoint(self, *args):
        r"""

        Parameters
        ----------
        I: int
        s1: str
        s2: str

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpVPoint(self, *args)

    def FaceFaceTransition(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_FaceFaceTransition(self, *args)

    def GetTraceIndex(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        exF1: int
        exF2: int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_GetTraceIndex(self, *args)

    def HasFirstPoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_HasFirstPoint(self, *args)

    def HasLastPoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_HasLastPoint(self, *args)

    def HasVInternal(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_HasVInternal(self, *args)

    def HasVPonR(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_HasVPonR(self, *args)

    def INL(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_INL(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Index(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_IsPeriodic(self, *args)

    def IsVClosed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_IsVClosed(self, *args)

    def LineG(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IntPatch_GLine>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_LineG(self, *args)

    def LineR(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IntPatch_RLine>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_LineR(self, *args)

    def LineW(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IntPatch_WLine>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_LineW(self, *args)

    def NbVPoint(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_NbVPoint(self, *args)

    def NbWPoint(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_NbWPoint(self, *args)

    def OK(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_OK(self, *args)

    def Period(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Period(self, *args)

    def SetFaces(self, *args):
        r"""

        Parameters
        ----------
        F1: TopoDS_Face
        F2: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetFaces(self, *args)

    def SetHasVPonR(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetHasVPonR(self, *args)

    def SetINL(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetINL(self, *args)

    def SetIsVClosed(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetIsVClosed(self, *args)

    def SetLine(self, *args):
        r"""

        Parameters
        ----------
        L: IntPatch_Line
        S1: BRepAdaptor_Surface
        S2: BRepAdaptor_Surface

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetLine(self, *args)

    def SetOK(self, *args):
        r"""

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetOK(self, *args)

    def SetTraceIndex(self, *args):
        r"""

        Parameters
        ----------
        exF1: int
        exF2: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetTraceIndex(self, *args)

    def SetVPBounds(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetVPBounds(self, *args)

    def SituationS1(self, *args):
        r"""
        Return
        -------
        IntSurf_Situation

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SituationS1(self, *args)

    def SituationS2(self, *args):
        r"""
        Return
        -------
        IntSurf_Situation

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SituationS2(self, *args)

    def TransitionOnS1(self, *args):
        r"""
        Return
        -------
        IntSurf_TypeTrans

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_TransitionOnS1(self, *args)

    def TransitionOnS2(self, *args):
        r"""
        Return
        -------
        IntSurf_TypeTrans

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_TransitionOnS2(self, *args)

    def TypeLineCurve(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_TypeLineCurve

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_TypeLineCurve(self, *args)

    def VPBounds(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        f: int
        l: int
        n: int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_VPBounds(self, *args)

    def VPoint(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopOpeBRep_VPointInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_VPoint(self, *args)

    def WPoint(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopOpeBRep_WPointInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_WPoint(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_LineInter

# Register TopOpeBRep_LineInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_LineInter_swigregister(TopOpeBRep_LineInter)
class TopOpeBRep_Point2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_Point2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Point2d(*args))

    def ChangeTransition(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_ChangeTransition(self, *args)

    def Dump(self, *args):
        r"""

        Parameters
        ----------
        ie1: int (optional, default to 0)
        ie2: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Dump(self, *args)

    def EdgesConfig(self, *args):
        r"""
        Return
        -------
        TopOpeBRepDS_Config

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_EdgesConfig(self, *args)

    def HasPint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_HasPint(self, *args)

    def Hctxee2d(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopOpeBRep_Hctxee2d>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Hctxee2d(self, *args)

    def Hctxff2d(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TopOpeBRep_Hctxff2d>

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Hctxff2d(self, *args)

    def Index(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Index(self, *args)

    def IsPointOfSegment(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_IsPointOfSegment(self, *args)

    def IsVertex(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_IsVertex(self, *args)

    def Keep(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Keep(self, *args)

    def Parameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Parameter(self, *args)

    def Pint(self, *args):
        r"""
        Return
        -------
        IntRes2d_IntersectionPoint

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Pint(self, *args)

    def SegmentAncestors(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        IP1: int
        IP2: int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SegmentAncestors(self, *args)

    def SetEdgesConfig(self, *args):
        r"""

        Parameters
        ----------
        C: TopOpeBRepDS_Config

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetEdgesConfig(self, *args)

    def SetHctxee2d(self, *args):
        r"""

        Parameters
        ----------
        ee2d: TopOpeBRep_Hctxee2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetHctxee2d(self, *args)

    def SetHctxff2d(self, *args):
        r"""

        Parameters
        ----------
        ff2d: TopOpeBRep_Hctxff2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetHctxff2d(self, *args)

    def SetIndex(self, *args):
        r"""

        Parameters
        ----------
        X: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIndex(self, *args)

    def SetIsPointOfSegment(self, *args):
        r"""

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIsPointOfSegment(self, *args)

    def SetIsVertex(self, *args):
        r"""

        Parameters
        ----------
        I: int
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIsVertex(self, *args)

    def SetKeep(self, *args):
        r"""

        Parameters
        ----------
        B: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetKeep(self, *args)

    def SetParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int
        P: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetParameter(self, *args)

    def SetPint(self, *args):
        r"""

        Parameters
        ----------
        P: IntRes2d_IntersectionPoint

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetPint(self, *args)

    def SetSegmentAncestors(self, *args):
        r"""

        Parameters
        ----------
        IP1: int
        IP2: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetSegmentAncestors(self, *args)

    def SetStatus(self, *args):
        r"""

        Parameters
        ----------
        S: TopOpeBRep_P2Dstatus

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetStatus(self, *args)

    def SetTolerance(self, *args):
        r"""

        Parameters
        ----------
        T: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetTolerance(self, *args)

    def SetTransition(self, *args):
        r"""

        Parameters
        ----------
        I: int
        T: TopOpeBRepDS_Transition

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetTransition(self, *args)

    def SetValue(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetValue(self, *args)

    def SetValue2d(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetValue2d(self, *args)

    def SetVertex(self, *args):
        r"""

        Parameters
        ----------
        I: int
        V: TopoDS_Vertex

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetVertex(self, *args)

    def Status(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_P2Dstatus

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Status(self, *args)

    def Tolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Tolerance(self, *args)

    def Transition(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopOpeBRepDS_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Transition(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Value(self, *args)

    def Value2d(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Value2d(self, *args)

    def Vertex(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Vertex

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Vertex(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Point2d

# Register TopOpeBRep_Point2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Point2d_swigregister(TopOpeBRep_Point2d)
class TopOpeBRep_PointClassifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_PointClassifier_swiginit(self, _TopOpeBRep.new_TopOpeBRep_PointClassifier(*args))

    def Classify(self, *args):
        r"""

        Parameters
        ----------
        F: TopoDS_Face
        P: gp_Pnt2d
        Tol: float

        Return
        -------
        TopAbs_State

        Description
        -----------
        Compute position of point <p> regarding with the face <f>.

        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Classify(self, *args)

    def Init(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Init(self, *args)

    def Load(self, *args):
        r"""

        Parameters
        ----------
        F: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Load(self, *args)

    def State(self, *args):
        r"""
        Return
        -------
        TopAbs_State

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_State(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_PointClassifier

# Register TopOpeBRep_PointClassifier in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_PointClassifier_swigregister(TopOpeBRep_PointClassifier)
class TopOpeBRep_PointGeomTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsEqual(*args):
        r"""

        Parameters
        ----------
        DSP1: TopOpeBRepDS_Point
        DSP2: TopOpeBRepDS_Point

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_PointGeomTool_IsEqual(*args)

    @staticmethod
    def MakePoint(*args):
        r"""

        Parameters
        ----------
        IP: TopOpeBRep_VPointInter

        Return
        -------
        TopOpeBRepDS_Point

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        P2D: TopOpeBRep_Point2d

        Return
        -------
        TopOpeBRepDS_Point

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        FEI: TopOpeBRep_FaceEdgeIntersector

        Return
        -------
        TopOpeBRepDS_Point

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Return
        -------
        TopOpeBRepDS_Point

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_PointGeomTool_MakePoint(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_PointGeomTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_PointGeomTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_PointGeomTool

# Register TopOpeBRep_PointGeomTool in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_PointGeomTool_swigregister(TopOpeBRep_PointGeomTool)
class TopOpeBRep_ShapeIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_ShapeIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeIntersector(*args))

    def ChangeEdgesIntersector(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_EdgesIntersector

        Description
        -----------
        Return the current intersection of two edges.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeEdgesIntersector(self, *args)

    def ChangeFaceEdgeIntersector(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_FaceEdgeIntersector

        Description
        -----------
        Return the current intersection of a face and an edge.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeFaceEdgeIntersector(self, *args)

    def ChangeFacesIntersector(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_FacesIntersector

        Description
        -----------
        Return the current intersection of two faces.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeFacesIntersector(self, *args)

    def CurrentGeomShape(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Return geometric shape <index> ( = 1 or 2 ) of current intersection.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_CurrentGeomShape(self, *args)

    def DumpCurrent(self, *args):
        r"""

        Parameters
        ----------
        K: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_DumpCurrent(self, *args)

    def GetTolerances(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        tol1: float
        tol2: float

        Description
        -----------
        Return max of intersection tolerances with which facesintersector from topopebrep was working.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_GetTolerances(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        K: int

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_Index(self, *args)

    def InitIntersection(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Initialize the intersection of shapes s1,s2.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        F1: TopoDS_Face
        F2: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        Initialize the intersection of shapes s1,s2.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_InitIntersection(self, *args)

    def MoreIntersection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are more intersection between two the shapes.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_MoreIntersection(self, *args)

    def NextIntersection(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Search for the next intersection between the two shapes.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_NextIntersection(self, *args)

    def RejectedFaces(self, *args):
        r"""

        Parameters
        ----------
        anObj: TopoDS_Shape
        aReference: TopoDS_Shape
        aListOfShape: TopTools_ListOfShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_RejectedFaces(self, *args)

    def Shape(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Return the shape <index> ( = 1 or 2) given to initintersection(). index = 1 will return s1, index = 2 will return s2.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeIntersector

# Register TopOpeBRep_ShapeIntersector in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ShapeIntersector_swigregister(TopOpeBRep_ShapeIntersector)
class TopOpeBRep_ShapeIntersector2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeIntersector2d(*args))

    def ChangeEdgesIntersector(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_EdgesIntersector

        Description
        -----------
        Return the current intersection of two edges.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_ChangeEdgesIntersector(self, *args)

    def CurrentGeomShape(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Return geometric shape <index> ( = 1 or 2 ) of current intersection.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_CurrentGeomShape(self, *args)

    def DumpCurrent(self, *args):
        r"""

        Parameters
        ----------
        K: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_DumpCurrent(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        K: int

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_Index(self, *args)

    def InitIntersection(self, *args):
        r"""

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Initialize the intersection of shapes s1,s2.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_InitIntersection(self, *args)

    def MoreIntersection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are more intersection between two the shapes.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_MoreIntersection(self, *args)

    def NextIntersection(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Search for the next intersection between the two shapes.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_NextIntersection(self, *args)

    def Shape(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Return the shape <index> ( = 1 or 2) given to initintersection(). index = 1 will return s1, index = 2 will return s2.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeIntersector2d

# Register TopOpeBRep_ShapeIntersector2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_swigregister(TopOpeBRep_ShapeIntersector2d)
class TopOpeBRep_ShapeScanner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_ShapeScanner_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeScanner(*args))

    def AddBoxesMakeCOB(self, *args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        TS: TopAbs_ShapeEnum
        TA: TopAbs_ShapeEnum (optional, default to TopAbs_SHAPE)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_AddBoxesMakeCOB(self, *args)

    def BoxSort(self, *args):
        r"""
        Return
        -------
        TopOpeBRepTool_BoxSort

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_BoxSort(self, *args)

    def ChangeBoxSort(self, *args):
        r"""
        Return
        -------
        TopOpeBRepTool_BoxSort

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_ChangeBoxSort(self, *args)

    def Clear(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Clear(self, *args)

    def Current(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Current(self, *args)

    def DumpCurrentToString(self):
        r"""DumpCurrentToString(TopOpeBRep_ShapeScanner self) -> std::string"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_DumpCurrentToString(self)

    def Index(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Index(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        E: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        X: TopOpeBRepTool_ShapeExplorer

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Init(self, *args)

    def More(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_More(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Next(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeScanner

# Register TopOpeBRep_ShapeScanner in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ShapeScanner_swigregister(TopOpeBRep_ShapeScanner)
class TopOpeBRep_VPointInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_VPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInter(*args))

    def ArcOnS1(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ArcOnS1(self, *args)

    def ArcOnS2(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ArcOnS2(self, *args)

    def ChangeKeep(self, *args):
        r"""

        Parameters
        ----------
        keep: bool

        Return
        -------
        None

        Description
        -----------
        Updates vpointinter flag 'keep' with <keep>.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ChangeKeep(self, *args)

    def Edge(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Get the edge of shape i (1,2) containing the point. returned shape is null if the vpoint is not on an edge of shape i (1,2).

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Edge(self, *args)

    def EdgeON(self, *args):
        r"""

        Parameters
        ----------
        Eon: TopoDS_Shape
        Par: float
        I: int

        Return
        -------
        None

        Description
        -----------
        Set the shape eon of shape i (1,2) containing the point, and parameter <par> of point on <eon>.

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Get the edge of shape i (1,2) containing the point.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeON(self, *args)

    def EdgeONParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Get the parameter on edge of shape i (1,2) containing the point.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeONParameter(self, *args)

    def EdgeParameter(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        float

        Description
        -----------
        Get the parameter on edge of shape i (1,2) containing the point.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeParameter(self, *args)

    def EqualpP(self, *args):
        r"""

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter

        Return
        -------
        bool

        Description
        -----------
        Returns <true> if the 3d points and the parameters of the vpoints are same.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EqualpP(self, *args)

    def GetShapes(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        I1: int
        I2: int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_GetShapes(self, *args)

    def Index(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Index(self, *args)

    def IsInternal(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsInternal(self, *args)

    def IsMultiple(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the point belongs to several intersection lines.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsMultiple(self, *args)

    def IsOnDomS1(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsOnDomS1(self, *args)

    def IsOnDomS2(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsOnDomS2(self, *args)

    def IsVertex(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertex(self, *args)

    def IsVertexOnS1(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the point is a vertex on the initial restriction facet of the first surface.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertexOnS1(self, *args)

    def IsVertexOnS2(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the point is a vertex on the initial restriction facet of the second surface.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertexOnS2(self, *args)

    def Keep(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns value of mykeep (does not evaluate states) false at creation of vpoint. updated by state(state from topabs,integer from standard).

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Keep(self, *args)

    def PThePointOfIntersectionDummy(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_PThePointOfIntersection

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_PThePointOfIntersectionDummy(self, *args)

    def ParameterOnArc1(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnArc1(self, *args)

    def ParameterOnArc2(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnArc2(self, *args)

    def ParameterOnLine(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnLine(self, *args)

    def ParametersOnS1(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        u: float
        v: float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParametersOnS1(self, *args)

    def ParametersOnS2(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        u: float
        v: float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParametersOnS2(self, *args)

    def ParonE(self, *args):
        r"""

        Parameters
        ----------
        E: TopoDS_Edge

        Return
        -------
        par: float

        Description
        -----------
        Returns <false> if the vpoint is not given on arc <e>, else returns <par> parameter on <e>.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParonE(self, *args)

    def SetPoint(self, *args):
        r"""

        Parameters
        ----------
        P: IntPatch_Point

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SetPoint(self, *args)

    def SetShapes(self, *args):
        r"""

        Parameters
        ----------
        I1: int
        I2: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SetShapes(self, *args)

    def ShapeIndex(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns value of filed myshapeindex = 0,1,2,3 0 means the vpoint is on no restriction 1 means the vpoint is on the restriction 1 2 means the vpoint is on the restriction 2 3 means the vpoint is on the restrictions 1 and 2.

        Parameters
        ----------
        I: int

        Return
        -------
        None

        Description
        -----------
        Set value of shape supporting me (0,1,2,3).

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ShapeIndex(self, *args)

    def State(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopAbs_State

        Description
        -----------
        Get state of vpoint within the domain of geometric shape domain <i> (= 1 or 2).

        Parameters
        ----------
        S: TopAbs_State
        I: int

        Return
        -------
        None

        Description
        -----------
        Set the state of vpoint within the domain of the geometric shape <i> (= 1 or 2).

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_State(self, *args)

    def SurfaceParameters(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Get the parameter on surface of shape i (1,2) containing the point.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SurfaceParameters(self, *args)

    def Tolerance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Tolerance(self, *args)

    def TransitionLineArc1(self, *args):
        r"""
        Return
        -------
        IntSurf_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionLineArc1(self, *args)

    def TransitionLineArc2(self, *args):
        r"""
        Return
        -------
        IntSurf_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionLineArc2(self, *args)

    def TransitionOnS1(self, *args):
        r"""
        Return
        -------
        IntSurf_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionOnS1(self, *args)

    def TransitionOnS2(self, *args):
        r"""
        Return
        -------
        IntSurf_Transition

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionOnS2(self, *args)

    def UpdateKeep(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Set mykeep value according to current states.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_UpdateKeep(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Value(self, *args)

    def Vertex(self, *args):
        r"""

        Parameters
        ----------
        I: int

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Vertex(self, *args)

    def VertexOnS1(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the information about the point when it is on the domain of the first patch, i-e when the function isvertexons1 returns true. otherwise, an exception is raised.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_VertexOnS1(self, *args)

    def VertexOnS2(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the information about the point when it is on the domain of the second patch, i-e when the function isvertexons2 returns true. otherwise, an exception is raised.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_VertexOnS2(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInter

# Register TopOpeBRep_VPointInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_VPointInter_swigregister(TopOpeBRep_VPointInter)
class TopOpeBRep_VPointInterClassifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_VPointInterClassifier_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInterClassifier(*args))

    def Edge(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the edge containing the vpoint <vp> used in the last vpointposition() call. edge is defined if the state previously computed is on, else edge is a null shape.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_Edge(self, *args)

    def EdgeParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the parameter of the vpoint <vp> on edge().

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_EdgeParameter(self, *args)

    def VPointPosition(self, *args):
        r"""

        Parameters
        ----------
        F: TopoDS_Shape
        VP: TopOpeBRep_VPointInter
        ShapeIndex: int
        PC: TopOpeBRep_PointClassifier
        AssumeINON: bool
        Tol: float

        Return
        -------
        TopAbs_State

        Description
        -----------
        Compute position of vpoint <vp> regarding with face <f>. <shapeindex> (= 1,2) indicates which (u,v) point of <vp> is used. when state is on, set vp.edgeon() with the edge containing <vp> and associated parameter. returns state of vp on shapeindex.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_VPointPosition(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInterClassifier

# Register TopOpeBRep_VPointInterClassifier in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_VPointInterClassifier_swigregister(TopOpeBRep_VPointInterClassifier)
class TopOpeBRep_VPointInterIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        LI: TopOpeBRep_LineInter

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_VPointInterIterator_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInterIterator(*args))

    def ChangeCurrentVP(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_VPointInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_ChangeCurrentVP(self, *args)

    def CurrentVP(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_VPointInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_CurrentVP(self, *args)

    def CurrentVPIndex(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_CurrentVPIndex(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        LI: TopOpeBRep_LineInter
        checkkeep: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_Init(self, *args)

    def More(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_More(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_Next(self, *args)

    def PLineInterDummy(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_PLineInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_PLineInterDummy(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInterIterator

# Register TopOpeBRep_VPointInterIterator in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_VPointInterIterator_swigregister(TopOpeBRep_VPointInterIterator)
class TopOpeBRep_WPointInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_WPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_WPointInter(*args))

    def PPntOn2SDummy(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_PPntOn2S

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_PPntOn2SDummy(self, *args)

    def Parameters(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        U1: float
        V1: float
        U2: float
        V2: float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_Parameters(self, *args)

    def ParametersOnS1(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        U: float
        V: float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ParametersOnS1(self, *args)

    def ParametersOnS2(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        U: float
        V: float

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ParametersOnS2(self, *args)

    def Set(self, *args):
        r"""

        Parameters
        ----------
        P: IntSurf_PntOn2S

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_Set(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_Value(self, *args)

    def ValueOnS1(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ValueOnS1(self, *args)

    def ValueOnS2(self, *args):
        r"""
        Return
        -------
        gp_Pnt2d

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ValueOnS2(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_WPointInter

# Register TopOpeBRep_WPointInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_WPointInter_swigregister(TopOpeBRep_WPointInter)
class TopOpeBRep_WPointInterIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        LI: TopOpeBRep_LineInter

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TopOpeBRep.TopOpeBRep_WPointInterIterator_swiginit(self, _TopOpeBRep.new_TopOpeBRep_WPointInterIterator(*args))

    def CurrentWP(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_WPointInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_CurrentWP(self, *args)

    def Init(self, *args):
        r"""

        Parameters
        ----------
        LI: TopOpeBRep_LineInter

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_Init(self, *args)

    def More(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_More(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_Next(self, *args)

    def PLineInterDummy(self, *args):
        r"""
        Return
        -------
        TopOpeBRep_PLineInter

        Description
        -----------
        No available documentation.

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_PLineInterDummy(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_WPointInterIterator

# Register TopOpeBRep_WPointInterIterator in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_WPointInterIterator_swigregister(TopOpeBRep_WPointInterIterator)

@classnotwrapped
class TopOpeBRep_traceSIFF:
	pass


class TopOpeBRep_HArray1OfLineInter(TopOpeBRep_Array1OfLineInter, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_HArray1OfLineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_HArray1OfLineInter(*args))

    def Array1(self):
        return _TopOpeBRep.TopOpeBRep_HArray1OfLineInter_Array1(self)

    def ChangeArray1(self):
        return _TopOpeBRep.TopOpeBRep_HArray1OfLineInter_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t)

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_HArray1OfLineInter

# Register TopOpeBRep_HArray1OfLineInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_HArray1OfLineInter_swigregister(TopOpeBRep_HArray1OfLineInter)
class TopOpeBRep_HArray1OfVPointInter(TopOpeBRep_Array1OfVPointInter, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_HArray1OfVPointInter(*args))

    def Array1(self):
        return _TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_Array1(self)

    def ChangeArray1(self):
        return _TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t)

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_HArray1OfVPointInter

# Register TopOpeBRep_HArray1OfVPointInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_swigregister(TopOpeBRep_HArray1OfVPointInter)



@deprecated
def TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessEdgeONTransition(*args)

@deprecated
def TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessEdgeTransition(*args)

@deprecated
def TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessFaceTransition(*args)

@deprecated
def TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessLineTransition(*args)

@deprecated
def TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessLineTransition(*args)

@deprecated
def TopOpeBRep_FacesFiller_EqualpPonR(*args):
	return TopOpeBRep_FacesFiller.EqualpPonR(*args)

@deprecated
def TopOpeBRep_FacesFiller_IsVPtransLok(*args):
	return TopOpeBRep_FacesFiller.IsVPtransLok(*args)

@deprecated
def TopOpeBRep_FacesFiller_LSameDomainERL(*args):
	return TopOpeBRep_FacesFiller.LSameDomainERL(*args)

@deprecated
def TopOpeBRep_FacesFiller_Lminmax(*args):
	return TopOpeBRep_FacesFiller.Lminmax(*args)

@deprecated
def TopOpeBRep_FacesFiller_TransvpOK(*args):
	return TopOpeBRep_FacesFiller.TransvpOK(*args)

@deprecated
def TopOpeBRep_FacesFiller_VPParamOnER(*args):
	return TopOpeBRep_FacesFiller.VPParamOnER(*args)

@deprecated
def TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args):
	return TopOpeBRep_GeomTool.MakeBSpline1fromWALKING2d(*args)

@deprecated
def TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args):
	return TopOpeBRep_GeomTool.MakeBSpline1fromWALKING3d(*args)

@deprecated
def TopOpeBRep_GeomTool_MakeCurve(*args):
	return TopOpeBRep_GeomTool.MakeCurve(*args)

@deprecated
def TopOpeBRep_GeomTool_MakeCurves(*args):
	return TopOpeBRep_GeomTool.MakeCurves(*args)

@deprecated
def TopOpeBRep_PointGeomTool_IsEqual(*args):
	return TopOpeBRep_PointGeomTool.IsEqual(*args)

@deprecated
def TopOpeBRep_PointGeomTool_MakePoint(*args):
	return TopOpeBRep_PointGeomTool.MakePoint(*args)

@deprecated
def TopOpeBRep_PointGeomTool_MakePoint(*args):
	return TopOpeBRep_PointGeomTool.MakePoint(*args)

@deprecated
def TopOpeBRep_PointGeomTool_MakePoint(*args):
	return TopOpeBRep_PointGeomTool.MakePoint(*args)

@deprecated
def TopOpeBRep_PointGeomTool_MakePoint(*args):
	return TopOpeBRep_PointGeomTool.MakePoint(*args)



