# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
StdSelect module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_stdselect.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _StdSelect
else:
    import _StdSelect

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StdSelect.delete_SwigPyIterator

    def value(self):
        return _StdSelect.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StdSelect.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StdSelect.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StdSelect.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StdSelect.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StdSelect.SwigPyIterator_copy(self)

    def next(self):
        return _StdSelect.SwigPyIterator_next(self)

    def __next__(self):
        return _StdSelect.SwigPyIterator___next__(self)

    def previous(self):
        return _StdSelect.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StdSelect.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StdSelect.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StdSelect.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StdSelect.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StdSelect.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StdSelect.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StdSelect.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _StdSelect:
_StdSelect.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _StdSelect.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _StdSelect.ios_base_erase_event
    imbue_event = _StdSelect.ios_base_imbue_event
    copyfmt_event = _StdSelect.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _StdSelect.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _StdSelect.ios_base_flags(self, *args)

    def setf(self, *args):
        return _StdSelect.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _StdSelect.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _StdSelect.ios_base_precision(self, *args)

    def width(self, *args):
        return _StdSelect.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _StdSelect.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _StdSelect.ios_base_imbue(self, __loc)

    def getloc(self):
        return _StdSelect.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _StdSelect.ios_base_xalloc()

    def iword(self, __ix):
        return _StdSelect.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _StdSelect.ios_base_pword(self, __ix)
    __swig_destroy__ = _StdSelect.delete_ios_base

# Register ios_base in _StdSelect:
_StdSelect.ios_base_swigregister(ios_base)
cvar = _StdSelect.cvar
ios_base.boolalpha = _StdSelect.cvar.ios_base_boolalpha
ios_base.dec = _StdSelect.cvar.ios_base_dec
ios_base.fixed = _StdSelect.cvar.ios_base_fixed
ios_base.hex = _StdSelect.cvar.ios_base_hex
ios_base.internal = _StdSelect.cvar.ios_base_internal
ios_base.left = _StdSelect.cvar.ios_base_left
ios_base.oct = _StdSelect.cvar.ios_base_oct
ios_base.right = _StdSelect.cvar.ios_base_right
ios_base.scientific = _StdSelect.cvar.ios_base_scientific
ios_base.showbase = _StdSelect.cvar.ios_base_showbase
ios_base.showpoint = _StdSelect.cvar.ios_base_showpoint
ios_base.showpos = _StdSelect.cvar.ios_base_showpos
ios_base.skipws = _StdSelect.cvar.ios_base_skipws
ios_base.unitbuf = _StdSelect.cvar.ios_base_unitbuf
ios_base.uppercase = _StdSelect.cvar.ios_base_uppercase
ios_base.adjustfield = _StdSelect.cvar.ios_base_adjustfield
ios_base.basefield = _StdSelect.cvar.ios_base_basefield
ios_base.floatfield = _StdSelect.cvar.ios_base_floatfield
ios_base.badbit = _StdSelect.cvar.ios_base_badbit
ios_base.eofbit = _StdSelect.cvar.ios_base_eofbit
ios_base.failbit = _StdSelect.cvar.ios_base_failbit
ios_base.goodbit = _StdSelect.cvar.ios_base_goodbit
ios_base.app = _StdSelect.cvar.ios_base_app
ios_base.ate = _StdSelect.cvar.ios_base_ate
ios_base.binary = _StdSelect.cvar.ios_base_binary
ios_base.ios_base_in = _StdSelect.cvar.ios_base_ios_base_in
ios_base.out = _StdSelect.cvar.ios_base_out
ios_base.trunc = _StdSelect.cvar.ios_base_trunc
ios_base.beg = _StdSelect.cvar.ios_base_beg
ios_base.cur = _StdSelect.cvar.ios_base_cur
ios_base.end = _StdSelect.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _StdSelect.ios_rdstate(self)

    def clear(self, *args):
        return _StdSelect.ios_clear(self, *args)

    def setstate(self, __state):
        return _StdSelect.ios_setstate(self, __state)

    def good(self):
        return _StdSelect.ios_good(self)

    def eof(self):
        return _StdSelect.ios_eof(self)

    def fail(self):
        return _StdSelect.ios_fail(self)

    def bad(self):
        return _StdSelect.ios_bad(self)

    def exceptions(self, *args):
        return _StdSelect.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _StdSelect.ios_swiginit(self, _StdSelect.new_ios(__sb))
    __swig_destroy__ = _StdSelect.delete_ios

    def tie(self, *args):
        return _StdSelect.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _StdSelect.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _StdSelect.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _StdSelect.ios_fill(self, *args)

    def imbue(self, __loc):
        return _StdSelect.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _StdSelect.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _StdSelect.ios_widen(self, __c)

# Register ios in _StdSelect:
_StdSelect.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _StdSelect.ostream_swiginit(self, _StdSelect.new_ostream(__sb))
    __swig_destroy__ = _StdSelect.delete_ostream

    def __lshift__(self, *args):
        return _StdSelect.ostream___lshift__(self, *args)

    def put(self, __c):
        return _StdSelect.ostream_put(self, __c)

    def write(self, __s, __n):
        return _StdSelect.ostream_write(self, __s, __n)

    def flush(self):
        return _StdSelect.ostream_flush(self)

    def tellp(self):
        return _StdSelect.ostream_tellp(self)

    def seekp(self, *args):
        return _StdSelect.ostream_seekp(self, *args)

# Register ostream in _StdSelect:
_StdSelect.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _StdSelect.istream_swiginit(self, _StdSelect.new_istream(__sb))
    __swig_destroy__ = _StdSelect.delete_istream

    def __rshift__(self, *args):
        return _StdSelect.istream___rshift__(self, *args)

    def gcount(self):
        return _StdSelect.istream_gcount(self)

    def get(self, *args):
        return _StdSelect.istream_get(self, *args)

    def getline(self, *args):
        return _StdSelect.istream_getline(self, *args)

    def ignore(self, *args):
        return _StdSelect.istream_ignore(self, *args)

    def peek(self):
        return _StdSelect.istream_peek(self)

    def read(self, __s, __n):
        return _StdSelect.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _StdSelect.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _StdSelect.istream_putback(self, __c)

    def unget(self):
        return _StdSelect.istream_unget(self)

    def sync(self):
        return _StdSelect.istream_sync(self)

    def tellg(self):
        return _StdSelect.istream_tellg(self)

    def seekg(self, *args):
        return _StdSelect.istream_seekg(self, *args)

# Register istream in _StdSelect:
_StdSelect.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _StdSelect.iostream_swiginit(self, _StdSelect.new_iostream(__sb))
    __swig_destroy__ = _StdSelect.delete_iostream

# Register iostream in _StdSelect:
_StdSelect.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _StdSelect.endl_cb_ptr
endl = _StdSelect.endl
ends_cb_ptr = _StdSelect.ends_cb_ptr
ends = _StdSelect.ends
flush_cb_ptr = _StdSelect.flush_cb_ptr
flush = _StdSelect.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.SelectMgr
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.Aspect
import OCC.Core.Image
import OCC.Core.TopLoc
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.OSD
import OCC.Core.Media
import OCC.Core.Select3D
import OCC.Core.SelectBasics
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.V3d
import OCC.Core.TopAbs
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TopTools

from enum import IntEnum
from OCC.Core.Exception import *

StdSelect_AnyEdge = _StdSelect.StdSelect_AnyEdge
StdSelect_Line = _StdSelect.StdSelect_Line
StdSelect_Circle = _StdSelect.StdSelect_Circle
StdSelect_AnyFace = _StdSelect.StdSelect_AnyFace
StdSelect_Plane = _StdSelect.StdSelect_Plane
StdSelect_Cylinder = _StdSelect.StdSelect_Cylinder
StdSelect_Sphere = _StdSelect.StdSelect_Sphere
StdSelect_Torus = _StdSelect.StdSelect_Torus
StdSelect_Revol = _StdSelect.StdSelect_Revol
StdSelect_Cone = _StdSelect.StdSelect_Cone
StdSelect_TypeOfSelectionImage_NormalizedDepth = _StdSelect.StdSelect_TypeOfSelectionImage_NormalizedDepth
StdSelect_TypeOfSelectionImage_NormalizedDepthInverted = _StdSelect.StdSelect_TypeOfSelectionImage_NormalizedDepthInverted
StdSelect_TypeOfSelectionImage_UnnormalizedDepth = _StdSelect.StdSelect_TypeOfSelectionImage_UnnormalizedDepth
StdSelect_TypeOfSelectionImage_ColoredDetectedObject = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredDetectedObject
StdSelect_TypeOfSelectionImage_ColoredEntity = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredEntity
StdSelect_TypeOfSelectionImage_ColoredEntityType = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredEntityType
StdSelect_TypeOfSelectionImage_ColoredOwner = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredOwner
StdSelect_TypeOfSelectionImage_ColoredSelectionMode = _StdSelect.StdSelect_TypeOfSelectionImage_ColoredSelectionMode
StdSelect_TypeOfSelectionImage_SurfaceNormal = _StdSelect.StdSelect_TypeOfSelectionImage_SurfaceNormal


class StdSelect_TypeOfEdge(IntEnum):
	StdSelect_AnyEdge = 0
	StdSelect_Line = 1
	StdSelect_Circle = 2
StdSelect_AnyEdge = StdSelect_TypeOfEdge.StdSelect_AnyEdge
StdSelect_Line = StdSelect_TypeOfEdge.StdSelect_Line
StdSelect_Circle = StdSelect_TypeOfEdge.StdSelect_Circle

class StdSelect_TypeOfFace(IntEnum):
	StdSelect_AnyFace = 0
	StdSelect_Plane = 1
	StdSelect_Cylinder = 2
	StdSelect_Sphere = 3
	StdSelect_Torus = 4
	StdSelect_Revol = 5
	StdSelect_Cone = 6
StdSelect_AnyFace = StdSelect_TypeOfFace.StdSelect_AnyFace
StdSelect_Plane = StdSelect_TypeOfFace.StdSelect_Plane
StdSelect_Cylinder = StdSelect_TypeOfFace.StdSelect_Cylinder
StdSelect_Sphere = StdSelect_TypeOfFace.StdSelect_Sphere
StdSelect_Torus = StdSelect_TypeOfFace.StdSelect_Torus
StdSelect_Revol = StdSelect_TypeOfFace.StdSelect_Revol
StdSelect_Cone = StdSelect_TypeOfFace.StdSelect_Cone

class StdSelect_TypeOfSelectionImage(IntEnum):
	StdSelect_TypeOfSelectionImage_NormalizedDepth = 0
	StdSelect_TypeOfSelectionImage_NormalizedDepthInverted = 1
	StdSelect_TypeOfSelectionImage_UnnormalizedDepth = 2
	StdSelect_TypeOfSelectionImage_ColoredDetectedObject = 3
	StdSelect_TypeOfSelectionImage_ColoredEntity = 4
	StdSelect_TypeOfSelectionImage_ColoredEntityType = 5
	StdSelect_TypeOfSelectionImage_ColoredOwner = 6
	StdSelect_TypeOfSelectionImage_ColoredSelectionMode = 7
	StdSelect_TypeOfSelectionImage_SurfaceNormal = 8
StdSelect_TypeOfSelectionImage_NormalizedDepth = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_NormalizedDepth
StdSelect_TypeOfSelectionImage_NormalizedDepthInverted = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_NormalizedDepthInverted
StdSelect_TypeOfSelectionImage_UnnormalizedDepth = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_UnnormalizedDepth
StdSelect_TypeOfSelectionImage_ColoredDetectedObject = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_ColoredDetectedObject
StdSelect_TypeOfSelectionImage_ColoredEntity = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_ColoredEntity
StdSelect_TypeOfSelectionImage_ColoredEntityType = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_ColoredEntityType
StdSelect_TypeOfSelectionImage_ColoredOwner = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_ColoredOwner
StdSelect_TypeOfSelectionImage_ColoredSelectionMode = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_ColoredSelectionMode
StdSelect_TypeOfSelectionImage_SurfaceNormal = StdSelect_TypeOfSelectionImage.StdSelect_TypeOfSelectionImage_SurfaceNormal


def Handle_StdSelect_BRepOwner_Create():
    return _StdSelect.Handle_StdSelect_BRepOwner_Create()

def Handle_StdSelect_BRepOwner_DownCast(t):
    return _StdSelect.Handle_StdSelect_BRepOwner_DownCast(t)

def Handle_StdSelect_BRepOwner_IsNull(t):
    return _StdSelect.Handle_StdSelect_BRepOwner_IsNull(t)

def Handle_StdSelect_EdgeFilter_Create():
    return _StdSelect.Handle_StdSelect_EdgeFilter_Create()

def Handle_StdSelect_EdgeFilter_DownCast(t):
    return _StdSelect.Handle_StdSelect_EdgeFilter_DownCast(t)

def Handle_StdSelect_EdgeFilter_IsNull(t):
    return _StdSelect.Handle_StdSelect_EdgeFilter_IsNull(t)

def Handle_StdSelect_FaceFilter_Create():
    return _StdSelect.Handle_StdSelect_FaceFilter_Create()

def Handle_StdSelect_FaceFilter_DownCast(t):
    return _StdSelect.Handle_StdSelect_FaceFilter_DownCast(t)

def Handle_StdSelect_FaceFilter_IsNull(t):
    return _StdSelect.Handle_StdSelect_FaceFilter_IsNull(t)

def Handle_StdSelect_Shape_Create():
    return _StdSelect.Handle_StdSelect_Shape_Create()

def Handle_StdSelect_Shape_DownCast(t):
    return _StdSelect.Handle_StdSelect_Shape_DownCast(t)

def Handle_StdSelect_Shape_IsNull(t):
    return _StdSelect.Handle_StdSelect_Shape_IsNull(t)

def Handle_StdSelect_ShapeTypeFilter_Create():
    return _StdSelect.Handle_StdSelect_ShapeTypeFilter_Create()

def Handle_StdSelect_ShapeTypeFilter_DownCast(t):
    return _StdSelect.Handle_StdSelect_ShapeTypeFilter_DownCast(t)

def Handle_StdSelect_ShapeTypeFilter_IsNull(t):
    return _StdSelect.Handle_StdSelect_ShapeTypeFilter_IsNull(t)
class stdselect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def SetDrawerForBRepOwner(*args):
        r"""

        Parameters
        ----------
        aSelection: SelectMgr_Selection
        aDrawer: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Puts the same drawer in every brepowner of sensitiveprimitive used only for hilight of brepowner...

        """
        return _StdSelect.stdselect_SetDrawerForBRepOwner(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _StdSelect.stdselect_swiginit(self, _StdSelect.new_stdselect())
    __swig_destroy__ = _StdSelect.delete_stdselect

# Register stdselect in _StdSelect:
_StdSelect.stdselect_swigregister(stdselect)
class StdSelect_BRepOwner(OCC.Core.SelectMgr.SelectMgr_EntityOwner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aPriority: int

        Return
        -------
        None

        Description
        -----------
        Constructs an owner specification framework defined by the priority apriority.

        Parameters
        ----------
        aShape: TopoDS_Shape
        aPriority: int (optional, default to 0)
        ComesFromDecomposition: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Constructs an owner specification framework defined by the shape ashape and the priority apriority. ashape and apriority are stored in this framework. if more than one owner are detected during dynamic selection, the one with the highest priority is the one stored.

        Parameters
        ----------
        aShape: TopoDS_Shape
        theOrigin: SelectMgr_SelectableObject
        aPriority: int (optional, default to 0)
        FromDecomposition: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Constructs an owner specification framework defined by the shape ashape, the selectable object theorigin and the priority apriority. ashape, theorigin and apriority are stored in this framework. if more than one owner are detected during dynamic selection, the one with the highest priority is the one stored.

        """
        _StdSelect.StdSelect_BRepOwner_swiginit(self, _StdSelect.new_StdSelect_BRepOwner(*args))

    def DumpJson(self, depth=-1):
        r"""

        Parameters
        ----------
        depth: int, default=-1

        Return
        -------
        str

        Description
        -----------
        Dump the object to JSON string.

        Parameters
        ----------
        depth: int, default=-1

        Return
        -------
        str

        Description
        -----------
        Dump the object to JSON string.

        """
        return _StdSelect.StdSelect_BRepOwner_DumpJson(self, depth)

    def HasHilightMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if this framework has a highlight mode defined for it.

        """
        return _StdSelect.StdSelect_BRepOwner_HasHilightMode(self, *args)

    def HasShape(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns false if no shape was set.

        """
        return _StdSelect.StdSelect_BRepOwner_HasShape(self, *args)

    def HilightMode(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the highlight mode for this framework. this defines the type of display used to highlight the owner of the shape when it is detected by the selector. the default type of display is wireframe, defined by the index 0.

        """
        return _StdSelect.StdSelect_BRepOwner_HilightMode(self, *args)

    def ResetHilightMode(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets the higlight mode for this framework. this defines the type of display used to highlight the owner of the shape when it is detected by the selector. the default type of display is wireframe, defined by the index 0.

        """
        return _StdSelect.StdSelect_BRepOwner_ResetHilightMode(self, *args)

    def SetHilightMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: int

        Return
        -------
        None

        Description
        -----------
        Sets the highlight mode for this framework. this defines the type of display used to highlight the owner of the shape when it is detected by the selector. the default type of display is wireframe, defined by the index 0.

        """
        return _StdSelect.StdSelect_BRepOwner_SetHilightMode(self, *args)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns the shape.

        """
        return _StdSelect.StdSelect_BRepOwner_Shape(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_StdSelect_BRepOwner_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StdSelect.delete_StdSelect_BRepOwner

# Register StdSelect_BRepOwner in _StdSelect:
_StdSelect.StdSelect_BRepOwner_swigregister(StdSelect_BRepOwner)
class StdSelect_BRepSelectionTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ComputeSensitive(*args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theOwner: SelectMgr_EntityOwner
        theSelection: SelectMgr_Selection
        theDeflection: float
        theDeflAngle: float
        theNbPOnEdge: int
        theMaxiParam: float
        theAutoTriang: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Computes the sensitive primitives, stores them in the selectmgr_selection object, and returns this object. @param[in] theshape shape to compute sensitive entities @param[in] theowner selectable owner object @param[in] theselection selection to append new sensitive entities @param[in] thedeflection linear deflection @param[in] thedeflangle angular deflection @param[in] thenbponedge sensitivity parameters for edges and wires @param[in] themaxiparam sensitivity parameters for infinite objects (the default value is 500) @param[in] theautotriang flag to compute triangulation for the faces which have none.

        """
        return _StdSelect.StdSelect_BRepSelectionTool_ComputeSensitive(*args)

    @staticmethod
    def GetEdgeSensitive(*args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theOwner: SelectMgr_EntityOwner
        theSelection: SelectMgr_Selection
        theDeflection: float
        theDeviationAngle: float
        theNbPOnEdge: int
        theMaxiParam: float
        theSensitive: Select3D_SensitiveEntity

        Return
        -------
        None

        Description
        -----------
        Create a sensitive edge or sensitive wire. @param[in] theshape either topods_edge or topods_wire to compute sensitive entities @param[in] theowner selectable owner object @param[in] theselection selection to append new sensitive entities @param[in] thedeflection linear deflection @param[in] thedeviationangle angular deflection @param[in] thenbponedge sensitivity parameters @param[out] themaxiparam sensitivity parameters.

        """
        return _StdSelect.StdSelect_BRepSelectionTool_GetEdgeSensitive(*args)

    @staticmethod
    def GetSensitiveForCylinder(*args):
        r"""

        Parameters
        ----------
        theSubfacesMap: TopTools_IndexedMapOfShape
        theOwner: SelectMgr_EntityOwner
        theSelection: SelectMgr_Selection

        Return
        -------
        bool

        Description
        -----------
        Creates a sensitive cylinder. @param[in] thesubfacesmap map of cylinder faces @param[in] theowner selectable owner object @param[in] theselection selection to append new sensitive entities.

        """
        return _StdSelect.StdSelect_BRepSelectionTool_GetSensitiveForCylinder(*args)

    @staticmethod
    def GetSensitiveForFace(*args):
        r"""

        Parameters
        ----------
        theFace: TopoDS_Face
        theOwner: SelectMgr_EntityOwner
        theOutList: Select3D_EntitySequence
        theAutoTriang: bool (optional, default to Standard_True)
        theNbPOnEdge: int (optional, default to 9)
        theMaxiParam: float (optional, default to 500)
        theInteriorFlag: bool (optional, default to Standard_True)

        Return
        -------
        bool

        Description
        -----------
        Creates the 3d sensitive entities for face selection. @param[in] theface face to compute sensitive entities @param[in] theowner selectable owner object @param[out] theoutlist output result list to append created entities @param[in] theautotriang obsolete flag (has no effect) @param[in] thenbponedge sensitivity parameters @param[in] themaxiparam sensitivity parameters @param[in] theinteriorflag flag indicating that face interior (true) or face boundary (false) should be selectable.

        """
        return _StdSelect.StdSelect_BRepSelectionTool_GetSensitiveForFace(*args)

    @staticmethod
    def GetStandardPriority(*args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theType: TopAbs_ShapeEnum

        Return
        -------
        int

        Description
        -----------
        Returns the standard priority of the shape ashap having the type atype. this priority is passed to a stdselect_brepowner object. you can use the function load to modify the selection priority of an owner to make one entity more selectable than another one.

        """
        return _StdSelect.StdSelect_BRepSelectionTool_GetStandardPriority(*args)

    @staticmethod
    def Load(*args):
        r"""

        Parameters
        ----------
        aSelection: SelectMgr_Selection
        aShape: TopoDS_Shape
        aType: TopAbs_ShapeEnum
        theDeflection: float
        theDeviationAngle: float
        AutoTriangulation: bool (optional, default to Standard_True)
        aPriority: int (optional, default to -1)
        NbPOnEdge: int (optional, default to 9)
        MaximalParameter: float (optional, default to 500)

        Return
        -------
        None

        Description
        -----------
        Decomposition of <ashape> into sensitive entities following a mode of decomposition <atype>. these entities are stored in <aselection>. brepowners are created to store the identity of the picked shapes during the selection process. in those brepowners is also stored the original shape. but one can't get the selectable object which was decomposed to give the sensitive entities. maximal parameter is used for infinite objects, to limit the sensitive domain.... if autotriangulation = true, a triangulation will be computed for faces which have no existing one. if autotriangulation = false the old algorithm will be called to compute sensitive entities on faces.

        Parameters
        ----------
        aSelection: SelectMgr_Selection
        Origin: SelectMgr_SelectableObject
        aShape: TopoDS_Shape
        aType: TopAbs_ShapeEnum
        theDeflection: float
        theDeviationAngle: float
        AutoTriangulation: bool (optional, default to Standard_True)
        aPriority: int (optional, default to -1)
        NbPOnEdge: int (optional, default to 9)
        MaximalParameter: float (optional, default to 500)

        Return
        -------
        None

        Description
        -----------
        Same functionalities ; the only difference is that the selectable object from which the selection comes is stored in each sensitive entityowner; decomposition of <ashape> into sensitive entities following a mode of decomposition <atype>. these entities are stored in <aselection> the major difference is that the known users are first inserted in the brepowners. the original shape is the last user... (see entityowner from selectbasics and brepowner)...

        """
        return _StdSelect.StdSelect_BRepSelectionTool_Load(*args)

    @staticmethod
    def PreBuildBVH(*args):
        r"""

        Parameters
        ----------
        theSelection: SelectMgr_Selection

        Return
        -------
        None

        Description
        -----------
        Traverses the selection given and pre-builds bvh trees for heavyweight sensitive entities containing more than bvh_primitive_limit (defined in .cxx file) sub-elements.

        """
        return _StdSelect.StdSelect_BRepSelectionTool_PreBuildBVH(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _StdSelect.StdSelect_BRepSelectionTool_swiginit(self, _StdSelect.new_StdSelect_BRepSelectionTool())
    __swig_destroy__ = _StdSelect.delete_StdSelect_BRepSelectionTool

# Register StdSelect_BRepSelectionTool in _StdSelect:
_StdSelect.StdSelect_BRepSelectionTool_swigregister(StdSelect_BRepSelectionTool)
class StdSelect_EdgeFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Edge: StdSelect_TypeOfEdge

        Return
        -------
        None

        Description
        -----------
        Constructs an edge filter object defined by the type of edge edge.

        """
        _StdSelect.StdSelect_EdgeFilter_swiginit(self, _StdSelect.new_StdSelect_EdgeFilter(*args))

    def SetType(self, *args):
        r"""

        Parameters
        ----------
        aNewType: StdSelect_TypeOfEdge

        Return
        -------
        None

        Description
        -----------
        Sets the type of edge anewtype. anewtype is to be highlighted in selection.

        """
        return _StdSelect.StdSelect_EdgeFilter_SetType(self, *args)

    def Type(self, *args):
        r"""
        Return
        -------
        StdSelect_TypeOfEdge

        Description
        -----------
        Returns the type of edge to be highlighted in selection.

        """
        return _StdSelect.StdSelect_EdgeFilter_Type(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_StdSelect_EdgeFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StdSelect.delete_StdSelect_EdgeFilter

# Register StdSelect_EdgeFilter in _StdSelect:
_StdSelect.StdSelect_EdgeFilter_swigregister(StdSelect_EdgeFilter)
class StdSelect_FaceFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aTypeOfFace: StdSelect_TypeOfFace

        Return
        -------
        None

        Description
        -----------
        Constructs a face filter object defined by the type of face atypeofface.

        """
        _StdSelect.StdSelect_FaceFilter_swiginit(self, _StdSelect.new_StdSelect_FaceFilter(*args))

    def SetType(self, *args):
        r"""

        Parameters
        ----------
        aNewType: StdSelect_TypeOfFace

        Return
        -------
        None

        Description
        -----------
        Sets the type of face anewtype. anewtype is to be highlighted in selection.

        """
        return _StdSelect.StdSelect_FaceFilter_SetType(self, *args)

    def Type(self, *args):
        r"""
        Return
        -------
        StdSelect_TypeOfFace

        Description
        -----------
        Returns the type of face to be highlighted in selection.

        """
        return _StdSelect.StdSelect_FaceFilter_Type(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_StdSelect_FaceFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StdSelect.delete_StdSelect_FaceFilter

# Register StdSelect_FaceFilter in _StdSelect:
_StdSelect.StdSelect_FaceFilter_swigregister(StdSelect_FaceFilter)
class StdSelect_Shape(OCC.Core.PrsMgr.PrsMgr_PresentableObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape
        theDrawer: Prs3d_Drawer (optional, default to opencascade::handle<Prs3d_Drawer>())

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _StdSelect.StdSelect_Shape_swiginit(self, _StdSelect.new_StdSelect_Shape(*args))

    def Compute(self, *args):
        r"""

        Parameters
        ----------
        thePrsMgr: PrsMgr_PresentationManager
        thePrs: Prs3d_Presentation
        theMode: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _StdSelect.StdSelect_Shape_Compute(self, *args)

    def DumpJson(self, depth=-1):
        r"""

        Parameters
        ----------
        depth: int, default=-1

        Return
        -------
        str

        Description
        -----------
        Dump the object to JSON string.

        Parameters
        ----------
        depth: int, default=-1

        Return
        -------
        str

        Description
        -----------
        Dump the object to JSON string.

        """
        return _StdSelect.StdSelect_Shape_DumpJson(self, depth)

    def Shape(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _StdSelect.StdSelect_Shape_Shape(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_StdSelect_Shape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StdSelect.delete_StdSelect_Shape

# Register StdSelect_Shape in _StdSelect:
_StdSelect.StdSelect_Shape_swigregister(StdSelect_Shape)
class StdSelect_ShapeTypeFilter(OCC.Core.SelectMgr.SelectMgr_Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        aType: TopAbs_ShapeEnum

        Return
        -------
        None

        Description
        -----------
        Constructs a filter object defined by the shape type atype.

        """
        _StdSelect.StdSelect_ShapeTypeFilter_swiginit(self, _StdSelect.new_StdSelect_ShapeTypeFilter(*args))

    def Type(self, *args):
        r"""
        Return
        -------
        TopAbs_ShapeEnum

        Description
        -----------
        Returns the type of shape selected by the filter.

        """
        return _StdSelect.StdSelect_ShapeTypeFilter_Type(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_StdSelect_ShapeTypeFilter_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StdSelect.delete_StdSelect_ShapeTypeFilter

# Register StdSelect_ShapeTypeFilter in _StdSelect:
_StdSelect.StdSelect_ShapeTypeFilter_swigregister(StdSelect_ShapeTypeFilter)



@deprecated
def stdselect_SetDrawerForBRepOwner(*args):
	return stdselect.SetDrawerForBRepOwner(*args)

@deprecated
def StdSelect_BRepSelectionTool_ComputeSensitive(*args):
	return StdSelect_BRepSelectionTool.ComputeSensitive(*args)

@deprecated
def StdSelect_BRepSelectionTool_GetEdgeSensitive(*args):
	return StdSelect_BRepSelectionTool.GetEdgeSensitive(*args)

@deprecated
def StdSelect_BRepSelectionTool_GetSensitiveForCylinder(*args):
	return StdSelect_BRepSelectionTool.GetSensitiveForCylinder(*args)

@deprecated
def StdSelect_BRepSelectionTool_GetSensitiveForFace(*args):
	return StdSelect_BRepSelectionTool.GetSensitiveForFace(*args)

@deprecated
def StdSelect_BRepSelectionTool_GetStandardPriority(*args):
	return StdSelect_BRepSelectionTool.GetStandardPriority(*args)

@deprecated
def StdSelect_BRepSelectionTool_Load(*args):
	return StdSelect_BRepSelectionTool.Load(*args)

@deprecated
def StdSelect_BRepSelectionTool_Load(*args):
	return StdSelect_BRepSelectionTool.Load(*args)

@deprecated
def StdSelect_BRepSelectionTool_PreBuildBVH(*args):
	return StdSelect_BRepSelectionTool.PreBuildBVH(*args)



