# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
ShapeAlgo module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_shapealgo.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ShapeAlgo
else:
    import _ShapeAlgo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeAlgo.delete_SwigPyIterator

    def value(self):
        return _ShapeAlgo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ShapeAlgo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ShapeAlgo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ShapeAlgo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ShapeAlgo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ShapeAlgo.SwigPyIterator_copy(self)

    def next(self):
        return _ShapeAlgo.SwigPyIterator_next(self)

    def __next__(self):
        return _ShapeAlgo.SwigPyIterator___next__(self)

    def previous(self):
        return _ShapeAlgo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ShapeAlgo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ShapeAlgo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ShapeAlgo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ShapeAlgo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ShapeAlgo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ShapeAlgo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ShapeAlgo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ShapeAlgo:
_ShapeAlgo.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _ShapeAlgo.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.ShapeFix
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.ShapeBuild
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.ShapeAnalysis
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.IntRes2d
import OCC.Core.ShapeConstruct
import OCC.Core.BRepBuilderAPI

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_ShapeAlgo_ToolContainer_Create():
    return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_Create()

def Handle_ShapeAlgo_ToolContainer_DownCast(t):
    return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_DownCast(t)

def Handle_ShapeAlgo_ToolContainer_IsNull(t):
    return _ShapeAlgo.Handle_ShapeAlgo_ToolContainer_IsNull(t)
class shapealgo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AlgoContainer(*args):
        r"""
        Return
        -------
        opencascade::handle<ShapeAlgo_AlgoContainer>

        Description
        -----------
        Returns default algocontainer.

        """
        return _ShapeAlgo.shapealgo_AlgoContainer(*args)

    @staticmethod
    def Init(*args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Provides initerface to the algorithms from shape healing. creates and initializes default algocontainer.

        """
        return _ShapeAlgo.shapealgo_Init(*args)

    @staticmethod
    def SetAlgoContainer(*args):
        r"""

        Parameters
        ----------
        aContainer: ShapeAlgo_AlgoContainer

        Return
        -------
        None

        Description
        -----------
        Sets default algocontainer.

        """
        return _ShapeAlgo.shapealgo_SetAlgoContainer(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _ShapeAlgo.shapealgo_swiginit(self, _ShapeAlgo.new_shapealgo())
    __swig_destroy__ = _ShapeAlgo.delete_shapealgo

# Register shapealgo in _ShapeAlgo:
_ShapeAlgo.shapealgo_swigregister(shapealgo)
class ShapeAlgo_ToolContainer(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _ShapeAlgo.ShapeAlgo_ToolContainer_swiginit(self, _ShapeAlgo.new_ShapeAlgo_ToolContainer(*args))

    def EdgeProjAux(self, *args):
        r"""
        Return
        -------
        opencascade::handle<ShapeFix_EdgeProjAux>

        Description
        -----------
        Returns shapefix_edgeprojaux.

        """
        return _ShapeAlgo.ShapeAlgo_ToolContainer_EdgeProjAux(self, *args)

    def FixShape(self, *args):
        r"""
        Return
        -------
        opencascade::handle<ShapeFix_Shape>

        Description
        -----------
        Returns shapefix_shape.

        """
        return _ShapeAlgo.ShapeAlgo_ToolContainer_FixShape(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_ShapeAlgo_ToolContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeAlgo.delete_ShapeAlgo_ToolContainer

# Register ShapeAlgo_ToolContainer in _ShapeAlgo:
_ShapeAlgo.ShapeAlgo_ToolContainer_swigregister(ShapeAlgo_ToolContainer)

@classnotwrapped
class ShapeAlgo_AlgoContainer:
	pass





@deprecated
def shapealgo_AlgoContainer(*args):
	return shapealgo.AlgoContainer(*args)

@deprecated
def shapealgo_Init(*args):
	return shapealgo.Init(*args)

@deprecated
def shapealgo_SetAlgoContainer(*args):
	return shapealgo.SetAlgoContainer(*args)



