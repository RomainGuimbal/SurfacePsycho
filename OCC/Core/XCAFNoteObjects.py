# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
XCAFNoteObjects module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_xcafnoteobjects.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _XCAFNoteObjects
else:
    import _XCAFNoteObjects

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFNoteObjects.delete_SwigPyIterator

    def value(self):
        return _XCAFNoteObjects.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XCAFNoteObjects.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XCAFNoteObjects.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XCAFNoteObjects.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XCAFNoteObjects.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XCAFNoteObjects.SwigPyIterator_copy(self)

    def next(self):
        return _XCAFNoteObjects.SwigPyIterator_next(self)

    def __next__(self):
        return _XCAFNoteObjects.SwigPyIterator___next__(self)

    def previous(self):
        return _XCAFNoteObjects.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XCAFNoteObjects.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XCAFNoteObjects.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XCAFNoteObjects.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XCAFNoteObjects.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XCAFNoteObjects.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XCAFNoteObjects.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XCAFNoteObjects.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _XCAFNoteObjects:
_XCAFNoteObjects.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _XCAFNoteObjects.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XCAFNoteObjects_NoteObject_Create():
    return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_Create()

def Handle_XCAFNoteObjects_NoteObject_DownCast(t):
    return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_DownCast(t)

def Handle_XCAFNoteObjects_NoteObject_IsNull(t):
    return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_IsNull(t)
class XCAFNoteObjects_NoteObject(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty object.

        Parameters
        ----------
        theObj: XCAFNoteObjects_NoteObject

        Return
        -------
        None

        Description
        -----------
        Copy constructor.

        """
        _XCAFNoteObjects.XCAFNoteObjects_NoteObject_swiginit(self, _XCAFNoteObjects.new_XCAFNoteObjects_NoteObject(*args))

    def GetPlane(self, *args):
        r"""
        Return
        -------
        gp_Ax2

        Description
        -----------
        Returns a right-handed coordinate system of the plane.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPlane(self, *args)

    def GetPoint(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the attachment point on the annotated object.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPoint(self, *args)

    def GetPointText(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        Returns the text position.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPointText(self, *args)

    def GetPresentation(self, *args):
        r"""
        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Returns a tessellated annotation if specified.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPresentation(self, *args)

    def HasPlane(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if plane is specified.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPlane(self, *args)

    def HasPoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the attachment point on the annotated object is specified.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPoint(self, *args)

    def HasPointText(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the text position is specified.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPointText(self, *args)

    def Reset(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets data to the state after calling the default constructor.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_Reset(self, *args)

    def SetPlane(self, *args):
        r"""

        Parameters
        ----------
        thePlane: gp_Ax2

        Return
        -------
        None

        Description
        -----------
        Sets a right-handed coordinate system of the plane.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPlane(self, *args)

    def SetPoint(self, *args):
        r"""

        Parameters
        ----------
        thePnt: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Sets the anchor point on the annotated object.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPoint(self, *args)

    def SetPointText(self, *args):
        r"""

        Parameters
        ----------
        thePnt: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Sets the text position.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPointText(self, *args)

    def SetPresentation(self, *args):
        r"""

        Parameters
        ----------
        thePresentation: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Sets a tessellated annotation.

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPresentation(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XCAFNoteObjects_NoteObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFNoteObjects.delete_XCAFNoteObjects_NoteObject

# Register XCAFNoteObjects_NoteObject in _XCAFNoteObjects:
_XCAFNoteObjects.XCAFNoteObjects_NoteObject_swigregister(XCAFNoteObjects_NoteObject)



