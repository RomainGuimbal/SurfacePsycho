# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XCAFNoteObjects module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xcafnoteobjects.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XCAFNoteObjects')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XCAFNoteObjects')
    _XCAFNoteObjects = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFNoteObjects', [dirname(__file__)])
        except ImportError:
            import _XCAFNoteObjects
            return _XCAFNoteObjects
        try:
            _mod = imp.load_module('_XCAFNoteObjects', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XCAFNoteObjects = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFNoteObjects
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFNoteObjects.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XCAFNoteObjects.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XCAFNoteObjects.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XCAFNoteObjects.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XCAFNoteObjects.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XCAFNoteObjects.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XCAFNoteObjects.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XCAFNoteObjects.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XCAFNoteObjects.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XCAFNoteObjects.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XCAFNoteObjects.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XCAFNoteObjects.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XCAFNoteObjects.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XCAFNoteObjects.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XCAFNoteObjects.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XCAFNoteObjects.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XCAFNoteObjects.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XCAFNoteObjects.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XCAFNoteObjects.process_exception(error, method_name, class_name)
process_exception = _XCAFNoteObjects.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XCAFNoteObjects_NoteObject_Create() -> "opencascade::handle< XCAFNoteObjects_NoteObject >":
    return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_Create()
Handle_XCAFNoteObjects_NoteObject_Create = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_Create

def Handle_XCAFNoteObjects_NoteObject_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFNoteObjects_NoteObject >":
    return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_DownCast(t)
Handle_XCAFNoteObjects_NoteObject_DownCast = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_DownCast

def Handle_XCAFNoteObjects_NoteObject_IsNull(t: 'opencascade::handle< XCAFNoteObjects_NoteObject > const &') -> "bool":
    return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_IsNull(t)
Handle_XCAFNoteObjects_NoteObject_IsNull = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_IsNull
class XCAFNoteObjects_NoteObject(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XCAFNoteObjects_NoteObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XCAFNoteObjects_NoteObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty object.

        Returns
        -------
        None

        Copy constructor.

        Parameters
        ----------
        theObj: XCAFNoteObjects_NoteObject

        Returns
        -------
        None

        """
        this = _XCAFNoteObjects.new_XCAFNoteObjects_NoteObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetPlane(self, *args) -> "gp_Ax2 const":
        """
        Returns a right-handed coordinate system of the plane.

        Returns
        -------
        gp_Ax2

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPlane(self, *args)


    def GetPoint(self, *args) -> "gp_Pnt const":
        """
        Returns the attachment point on the annotated object.

        Returns
        -------
        gp_Pnt

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPoint(self, *args)


    def GetPointText(self, *args) -> "gp_Pnt const":
        """
        Returns the text position.

        Returns
        -------
        gp_Pnt

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPointText(self, *args)


    def GetPresentation(self, *args) -> "TopoDS_Shape const":
        """
        Returns a tesselated annotation if specified.

        Returns
        -------
        TopoDS_Shape

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPresentation(self, *args)


    def HasPlane(self, *args) -> "Standard_Boolean":
        """
        Returns true if plane is specified.

        Returns
        -------
        bool

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPlane(self, *args)


    def HasPoint(self, *args) -> "Standard_Boolean":
        """
        Returns true if the attachment point on the annotated object is specified.

        Returns
        -------
        bool

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPoint(self, *args)


    def HasPointText(self, *args) -> "Standard_Boolean":
        """
        Returns true if the text position is specified.

        Returns
        -------
        bool

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPointText(self, *args)


    def Reset(self, *args) -> "void":
        """
        Resets data to the state after calling the default constructor.

        Returns
        -------
        None

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_Reset(self, *args)


    def SetPlane(self, *args) -> "void":
        """
        Sets a right-handed coordinate system of the plane.

        Parameters
        ----------
        thePlane: gp_Ax2

        Returns
        -------
        None

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPlane(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        Sets the anchor point on the annotated object.

        Parameters
        ----------
        thePnt: gp_Pnt

        Returns
        -------
        None

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPoint(self, *args)


    def SetPointText(self, *args) -> "void":
        """
        Sets the text position.

        Parameters
        ----------
        thePnt: gp_Pnt

        Returns
        -------
        None

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPointText(self, *args)


    def SetPresentation(self, *args) -> "void":
        """
        Sets a tesselated annotation.

        Parameters
        ----------
        thePresentation: TopoDS_Shape

        Returns
        -------
        None

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPresentation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XCAFNoteObjects_NoteObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFNoteObjects.delete_XCAFNoteObjects_NoteObject
    __del__ = lambda self: None
XCAFNoteObjects_NoteObject_swigregister = _XCAFNoteObjects.XCAFNoteObjects_NoteObject_swigregister
XCAFNoteObjects_NoteObject_swigregister(XCAFNoteObjects_NoteObject)



# This file is compatible with both classic and new-style classes.


