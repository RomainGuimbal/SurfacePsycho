# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Addons
else:
    import _Addons

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def process_exception(error, method_name, class_name):
    return _Addons.process_exception(error, method_name, class_name)
Font_FontAspect_UNDEFINED = _Addons.Font_FontAspect_UNDEFINED
Font_FontAspect_Regular = _Addons.Font_FontAspect_Regular
Font_FontAspect_Bold = _Addons.Font_FontAspect_Bold
Font_FontAspect_Italic = _Addons.Font_FontAspect_Italic
Font_FontAspect_BoldItalic = _Addons.Font_FontAspect_BoldItalic
Font_FA_Undefined = _Addons.Font_FA_Undefined
Font_FA_Regular = _Addons.Font_FA_Regular
Font_FA_Bold = _Addons.Font_FA_Bold
Font_FA_Italic = _Addons.Font_FA_Italic
Font_FA_BoldItalic = _Addons.Font_FA_BoldItalic

def text_to_brep(*args):
    r"""
    * Creates a shape of the given text. 
    :param text_to_render: Text to render
    :type text_to_render: char *
    :param aFontName: Font name
    :type aFontName: char *
    :param aFontAspect:  Fontaspect, FontAspect_UNDEFINED, Font_FontAspect_Regular, Font_FontAspect_Bold, Font_FA_Italic or Font_FA_BoldItalic
    :type aFontAspect: Font_FontAspect
    :param aSize: Size of the font
    :type aSize: float
    :param isCompositeCurve:
    :type isCompositeCurve: bool
    :rtype: TopoDS_Shape

    """
    return _Addons.text_to_brep(*args)

def register_font(*args):
    r"""
    * Add a font to the available font list. 
    :param aFontPath: Path to the font.
    :type aFontPath: char *
    :param aFontAspect
    :type Font_FontAspect
    :rtype: void

    """
    return _Addons.register_font(*args)

