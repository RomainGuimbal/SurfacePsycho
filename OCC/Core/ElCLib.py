# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ElCLib module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_elclib.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ElCLib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ElCLib')
    _ElCLib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ElCLib', [dirname(__file__)])
        except ImportError:
            import _ElCLib
            return _ElCLib
        try:
            _mod = imp.load_module('_ElCLib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ElCLib = swig_import_helper()
    del swig_import_helper
else:
    import _ElCLib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ElCLib.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _ElCLib.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ElCLib.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ElCLib.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _ElCLib.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _ElCLib.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _ElCLib.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _ElCLib.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _ElCLib.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _ElCLib.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ElCLib.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _ElCLib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _ElCLib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ElCLib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ElCLib.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ElCLib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _ElCLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ElCLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ElCLib.process_exception(error, method_name, class_name)
process_exception = _ElCLib.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection

from enum import IntEnum
from OCC.Core.Exception import *



class elclib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elclib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elclib, name)
    __repr__ = _swig_repr

    def AdjustPeriodic(*args) -> "Standard_Real &, Standard_Real &":
        """
        Adjust u1 and u2 in the parametric range ufirst ulast of a periodic curve, where ulast - ufirst is its period. to do this, this function: - sets u1 in the range [ ufirst, ulast ] by adding/removing the period to/from the value u1, then - sets u2 in the range [ u1, u1 + period ] by adding/removing the period to/from the value u2. precision is used to test the equalities.

        Parameters
        ----------
        UFirst: float
        ULast: float
        Precision: float

        Returns
        -------
        U1: float
        U2: float

        """
        return _ElCLib.elclib_AdjustPeriodic(*args)

    AdjustPeriodic = staticmethod(AdjustPeriodic)

    def CircleD1(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Radius: float
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Radius: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_CircleD1(*args)

    CircleD1 = staticmethod(CircleD1)

    def CircleD2(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Radius: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Radius: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_CircleD2(*args)

    CircleD2 = staticmethod(CircleD2)

    def CircleD3(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Radius: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Radius: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_CircleD3(*args)

    CircleD3 = staticmethod(CircleD3)

    def CircleDN(*args) -> "gp_Vec2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Radius: float
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Radius: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _ElCLib.elclib_CircleDN(*args)

    CircleDN = staticmethod(CircleDN)

    def CircleParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        P: gp_Pnt

        Returns
        -------
        float

        Pos is the axis of the circle parametrization in the local coordinate system of the circle x (u) = radius * cos (u) y (u) = radius * sin (u).

        Parameters
        ----------
        Pos: gp_Ax22d
        P: gp_Pnt2d

        Returns
        -------
        float

        """
        return _ElCLib.elclib_CircleParameter(*args)

    CircleParameter = staticmethod(CircleParameter)

    def CircleValue(*args) -> "gp_Pnt2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Radius: float

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Radius: float

        Returns
        -------
        gp_Pnt2d

        """
        return _ElCLib.elclib_CircleValue(*args)

    CircleValue = staticmethod(CircleValue)

    def D1(*args) -> "void":
        """
        For elementary curves (lines, circles and conics) from the gp package, computes: - the point p of parameter u, and - the first derivative vector v1 at this point. the results p and v1 are either: - a gp_pnt point and a gp_vec vector, for a curve in 3d space, or - a gp_pnt2d point and a gp_vec2d vector, for a curve in 2d space.

        Parameters
        ----------
        U: float
        L: gp_Lin
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        C: gp_Circ
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Prb: gp_Parab
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        L: gp_Lin2d
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        C: gp_Circ2d
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips2d
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr2d
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Prb: gp_Parab2d
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        For elementary curves (circles and conics) from the gp package, computes: - the point p of parameter u, and - the first and second derivative vectors v1 and v2 at this point. the results, p, v1 and v2, are either: - a gp_pnt point and two gp_vec vectors, for a curve in 3d space, or - a gp_pnt2d point and two gp_vec2d vectors, for a curve in 2d space.

        Parameters
        ----------
        U: float
        C: gp_Circ
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Prb: gp_Parab
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        C: gp_Circ2d
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips2d
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr2d
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Prb: gp_Parab2d
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        For elementary curves (circles, ellipses and hyperbolae) from the gp package, computes: - the point p of parameter u, and - the first, second and third derivative vectors v1, v2 and v3 at this point. the results, p, v1, v2 and v3, are either: - a gp_pnt point and three gp_vec vectors, for a curve in 3d space, or - a gp_pnt2d point and three gp_vec2d vectors, for a curve in 2d space.

        Parameters
        ----------
        U: float
        C: gp_Circ
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        C: gp_Circ2d
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips2d
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        In the following functions n is the order of derivation and should be greater than 0.

        Parameters
        ----------
        U: float
        H: gp_Hypr2d
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args) -> "gp_Vec2d":
        """
        For elementary curves (lines, circles and conics) from the gp package, computes the vector corresponding to the nth derivative at the point of parameter u. the result is either: - a gp_vec vector for a curve in 3d space, or - a gp_vec2d vector for a curve in 2d space. in the following functions n is the order of derivation and should be greater than 0.

        Parameters
        ----------
        U: float
        L: gp_Lin
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        C: gp_Circ
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        Prb: gp_Parab
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        L: gp_Lin2d
        N: int

        Returns
        -------
        gp_Vec2d

        No available documentation.

        Parameters
        ----------
        U: float
        C: gp_Circ2d
        N: int

        Returns
        -------
        gp_Vec2d

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips2d
        N: int

        Returns
        -------
        gp_Vec2d

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr2d
        N: int

        Returns
        -------
        gp_Vec2d

        No available documentation.

        Parameters
        ----------
        U: float
        Prb: gp_Parab2d
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _ElCLib.elclib_DN(*args)

    DN = staticmethod(DN)

    def EllipseD1(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_EllipseD1(*args)

    EllipseD1 = staticmethod(EllipseD1)

    def EllipseD2(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_EllipseD2(*args)

    EllipseD2 = staticmethod(EllipseD2)

    def EllipseD3(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_EllipseD3(*args)

    EllipseD3 = staticmethod(EllipseD3)

    def EllipseDN(*args) -> "gp_Vec2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _ElCLib.elclib_EllipseDN(*args)

    EllipseDN = staticmethod(EllipseDN)

    def EllipseParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt

        Returns
        -------
        float

        Pos is the axis of the ellipse parametrization in the local coordinate system of the ellipse x (u) = majorradius * cos (u) y (u) = minorradius * sin (u).

        Parameters
        ----------
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt2d

        Returns
        -------
        float

        """
        return _ElCLib.elclib_EllipseParameter(*args)

    EllipseParameter = staticmethod(EllipseParameter)

    def EllipseValue(*args) -> "gp_Pnt2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float

        Returns
        -------
        gp_Pnt2d

        """
        return _ElCLib.elclib_EllipseValue(*args)

    EllipseValue = staticmethod(EllipseValue)

    def HyperbolaD1(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_HyperbolaD1(*args)

    HyperbolaD1 = staticmethod(HyperbolaD1)

    def HyperbolaD2(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_HyperbolaD2(*args)

    HyperbolaD2 = staticmethod(HyperbolaD2)

    def HyperbolaD3(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        In the following functions n is the order of derivation and should be greater than 0.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_HyperbolaD3(*args)

    HyperbolaD3 = staticmethod(HyperbolaD3)

    def HyperbolaDN(*args) -> "gp_Vec2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _ElCLib.elclib_HyperbolaDN(*args)

    HyperbolaDN = staticmethod(HyperbolaDN)

    def HyperbolaParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt

        Returns
        -------
        float

        Pos is the axis of the hyperbola parametrization in the local coordinate system of the hyperbola x (u) = majorradius * ch (u) y (u) = minorradius * sh (u).

        Parameters
        ----------
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float
        P: gp_Pnt2d

        Returns
        -------
        float

        """
        return _ElCLib.elclib_HyperbolaParameter(*args)

    HyperbolaParameter = staticmethod(HyperbolaParameter)

    def HyperbolaValue(*args) -> "gp_Pnt2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        MajorRadius: float
        MinorRadius: float

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        MajorRadius: float
        MinorRadius: float

        Returns
        -------
        gp_Pnt2d

        """
        return _ElCLib.elclib_HyperbolaValue(*args)

    HyperbolaValue = staticmethod(HyperbolaValue)

    def InPeriod(*args) -> "Standard_Real":
        """
        Return a value in the range <ufirst, ulast> by adding or removing the period <ulast - ufirst> to <u>. attention!!! it is expected but not checked that (ulast > ufirst).

        Parameters
        ----------
        U: float
        UFirst: float
        ULast: float

        Returns
        -------
        float

        """
        return _ElCLib.elclib_InPeriod(*args)

    InPeriod = staticmethod(InPeriod)

    def LineD1(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax1
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2d
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_LineD1(*args)

    LineD1 = staticmethod(LineD1)

    def LineDN(*args) -> "gp_Vec2d":
        """
        In the following functions n is the order of derivation and should be greater than 0.

        Parameters
        ----------
        U: float
        Pos: gp_Ax1
        N: int

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2d
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _ElCLib.elclib_LineDN(*args)

    LineDN = staticmethod(LineDN)

    def LineParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax1
        P: gp_Pnt

        Returns
        -------
        float

        Parametrization p (u) = l.location() + u * l.direction().

        Parameters
        ----------
        Pos: gp_Ax2d
        P: gp_Pnt2d

        Returns
        -------
        float

        """
        return _ElCLib.elclib_LineParameter(*args)

    LineParameter = staticmethod(LineParameter)

    def LineValue(*args) -> "gp_Pnt2d":
        """
        Curve evaluation the following basis functions compute the derivatives on elementary curves defined by their geometric characteristics. these functions can be called without constructing a conic from package gp. they are called by the previous functions. example : a circle is defined by its position and its radius.

        Parameters
        ----------
        U: float
        Pos: gp_Ax1

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2d

        Returns
        -------
        gp_Pnt2d

        """
        return _ElCLib.elclib_LineValue(*args)

    LineValue = staticmethod(LineValue)

    def ParabolaD1(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Focal: float
        P: gp_Pnt
        V1: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Focal: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_ParabolaD1(*args)

    ParabolaD1 = staticmethod(ParabolaD1)

    def ParabolaD2(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Focal: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Focal: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _ElCLib.elclib_ParabolaD2(*args)

    ParabolaD2 = staticmethod(ParabolaD2)

    def ParabolaDN(*args) -> "gp_Vec2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Focal: float
        N: int

        Returns
        -------
        gp_Vec

        The following functions compute the parametric value corresponding to a given point on a elementary curve. the point should be on the curve.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Focal: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _ElCLib.elclib_ParabolaDN(*args)

    ParabolaDN = staticmethod(ParabolaDN)

    def ParabolaParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        P: gp_Pnt

        Returns
        -------
        float

        Pos is the mirror axis of the parabola parametrization in the local coordinate system of the parabola y**2 = (2*p) * x where p is the distance between the focus and the directrix. the following functions build a 3d curve from a 2d curve at a given position defined with an ax2.

        Parameters
        ----------
        Pos: gp_Ax22d
        P: gp_Pnt2d

        Returns
        -------
        float

        """
        return _ElCLib.elclib_ParabolaParameter(*args)

    ParabolaParameter = staticmethod(ParabolaParameter)

    def ParabolaValue(*args) -> "gp_Pnt2d":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax2
        Focal: float

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        Pos: gp_Ax22d
        Focal: float

        Returns
        -------
        gp_Pnt2d

        """
        return _ElCLib.elclib_ParabolaValue(*args)

    ParabolaValue = staticmethod(ParabolaValue)

    def Parameter(*args) -> "Standard_Real":
        """
        Computes the parameter value of the point p on the given curve. note: in its local coordinate system, the parametric equation of the curve is given by the following: - for the line l: p(u) = po + u*vo where po is the origin and vo the unit vector of its positioning axis. - for the circle c: x(u) = radius*cos(u), y(u) = radius*sin(u) - for the ellipse e: x(u) = majorradius*cos(u). y(u) = minorradius*sin(u) - for the hyperbola h: x(u) = majorradius*ch(u), y(u) = minorradius*sh(u) - for the parabola prb: x(u) = u**2 / (2*p) y(u) = u where p is the distance between the focus and the directrix. warning the point p must be on the curve. these functions are not protected, however, and if point p is not on the curve, an exception may be raised.

        Parameters
        ----------
        L: gp_Lin
        P: gp_Pnt

        Returns
        -------
        float

        Parametrization p (u) = l.location() + u * l.direction().

        Parameters
        ----------
        L: gp_Lin2d
        P: gp_Pnt2d

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        C: gp_Circ
        P: gp_Pnt

        Returns
        -------
        float

        Parametrization in the local coordinate system of the circle x (u) = radius * cos (u) y (u) = radius * sin (u).

        Parameters
        ----------
        C: gp_Circ2d
        P: gp_Pnt2d

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        E: gp_Elips
        P: gp_Pnt

        Returns
        -------
        float

        Parametrization in the local coordinate system of the ellipse x (u) = majorradius * cos (u) y (u) = minorradius * sin (u).

        Parameters
        ----------
        E: gp_Elips2d
        P: gp_Pnt2d

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        H: gp_Hypr
        P: gp_Pnt

        Returns
        -------
        float

        Parametrization in the local coordinate system of the hyperbola x (u) = majorradius * ch (u) y (u) = minorradius * sh (u).

        Parameters
        ----------
        H: gp_Hypr2d
        P: gp_Pnt2d

        Returns
        -------
        float

        No available documentation.

        Parameters
        ----------
        Prb: gp_Parab
        P: gp_Pnt

        Returns
        -------
        float

        Parametrization in the local coordinate system of the parabola y**2 = (2*p) * x where p is the distance between the focus and the directrix.

        Parameters
        ----------
        Prb: gp_Parab2d
        P: gp_Pnt2d

        Returns
        -------
        float

        """
        return _ElCLib.elclib_Parameter(*args)

    Parameter = staticmethod(Parameter)

    def To3d(*args) -> "gp_Parab":
        """
        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        P: gp_Pnt2d

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        V: gp_Vec2d

        Returns
        -------
        gp_Vec

        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        V: gp_Dir2d

        Returns
        -------
        gp_Dir

        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        A: gp_Ax2d

        Returns
        -------
        gp_Ax1

        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        A: gp_Ax22d

        Returns
        -------
        gp_Ax2

        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        L: gp_Lin2d

        Returns
        -------
        gp_Lin

        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        C: gp_Circ2d

        Returns
        -------
        gp_Circ

        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        E: gp_Elips2d

        Returns
        -------
        gp_Elips

        No available documentation.

        Parameters
        ----------
        Pos: gp_Ax2
        H: gp_Hypr2d

        Returns
        -------
        gp_Hypr

        These functions build a 3d geometric entity from a 2d geometric entity. the 'x axis' and the 'y axis' of the global coordinate system (i.e. 2d space) are lined up respectively with the 'x axis' and 'y axis' of the 3d coordinate system, pos.

        Parameters
        ----------
        Pos: gp_Ax2
        Prb: gp_Parab2d

        Returns
        -------
        gp_Parab

        """
        return _ElCLib.elclib_To3d(*args)

    To3d = staticmethod(To3d)

    def Value(*args) -> "gp_Pnt2d":
        """
        For elementary curves (lines, circles and conics) from the gp package, computes the point of parameter u. the result is either: - a gp_pnt point for a curve in 3d space, or - a gp_pnt2d point for a curve in 2d space.

        Parameters
        ----------
        U: float
        L: gp_Lin

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        C: gp_Circ

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        Prb: gp_Parab

        Returns
        -------
        gp_Pnt

        No available documentation.

        Parameters
        ----------
        U: float
        L: gp_Lin2d

        Returns
        -------
        gp_Pnt2d

        No available documentation.

        Parameters
        ----------
        U: float
        C: gp_Circ2d

        Returns
        -------
        gp_Pnt2d

        No available documentation.

        Parameters
        ----------
        U: float
        E: gp_Elips2d

        Returns
        -------
        gp_Pnt2d

        No available documentation.

        Parameters
        ----------
        U: float
        H: gp_Hypr2d

        Returns
        -------
        gp_Pnt2d

        No available documentation.

        Parameters
        ----------
        U: float
        Prb: gp_Parab2d

        Returns
        -------
        gp_Pnt2d

        """
        return _ElCLib.elclib_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        this = _ElCLib.new_elclib()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ElCLib.delete_elclib
    __del__ = lambda self: None
elclib_swigregister = _ElCLib.elclib_swigregister
elclib_swigregister(elclib)

def elclib_AdjustPeriodic(*args) -> "Standard_Real &, Standard_Real &":
    """
    Adjust u1 and u2 in the parametric range ufirst ulast of a periodic curve, where ulast - ufirst is its period. to do this, this function: - sets u1 in the range [ ufirst, ulast ] by adding/removing the period to/from the value u1, then - sets u2 in the range [ u1, u1 + period ] by adding/removing the period to/from the value u2. precision is used to test the equalities.

    Parameters
    ----------
    UFirst: float
    ULast: float
    Precision: float

    Returns
    -------
    U1: float
    U2: float

    """
    return _ElCLib.elclib_AdjustPeriodic(*args)

def elclib_CircleD1(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Radius: float
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Radius: float
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_CircleD1(*args)

def elclib_CircleD2(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Radius: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Radius: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_CircleD2(*args)

def elclib_CircleD3(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Radius: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Radius: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_CircleD3(*args)

def elclib_CircleDN(*args) -> "gp_Vec2d":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Radius: float
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Radius: float
    N: int

    Returns
    -------
    gp_Vec2d

    """
    return _ElCLib.elclib_CircleDN(*args)

def elclib_CircleParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    P: gp_Pnt

    Returns
    -------
    float

    Pos is the axis of the circle parametrization in the local coordinate system of the circle x (u) = radius * cos (u) y (u) = radius * sin (u).

    Parameters
    ----------
    Pos: gp_Ax22d
    P: gp_Pnt2d

    Returns
    -------
    float

    """
    return _ElCLib.elclib_CircleParameter(*args)

def elclib_CircleValue(*args) -> "gp_Pnt2d":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Radius: float

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Radius: float

    Returns
    -------
    gp_Pnt2d

    """
    return _ElCLib.elclib_CircleValue(*args)

def elclib_D1(*args) -> "void":
    """
    For elementary curves (lines, circles and conics) from the gp package, computes: - the point p of parameter u, and - the first derivative vector v1 at this point. the results p and v1 are either: - a gp_pnt point and a gp_vec vector, for a curve in 3d space, or - a gp_pnt2d point and a gp_vec2d vector, for a curve in 2d space.

    Parameters
    ----------
    U: float
    L: gp_Lin
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    C: gp_Circ
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Prb: gp_Parab
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    L: gp_Lin2d
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    C: gp_Circ2d
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips2d
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr2d
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Prb: gp_Parab2d
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_D1(*args)

def elclib_D2(*args) -> "void":
    """
    For elementary curves (circles and conics) from the gp package, computes: - the point p of parameter u, and - the first and second derivative vectors v1 and v2 at this point. the results, p, v1 and v2, are either: - a gp_pnt point and two gp_vec vectors, for a curve in 3d space, or - a gp_pnt2d point and two gp_vec2d vectors, for a curve in 2d space.

    Parameters
    ----------
    U: float
    C: gp_Circ
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Prb: gp_Parab
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    C: gp_Circ2d
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips2d
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr2d
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Prb: gp_Parab2d
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_D2(*args)

def elclib_D3(*args) -> "void":
    """
    For elementary curves (circles, ellipses and hyperbolae) from the gp package, computes: - the point p of parameter u, and - the first, second and third derivative vectors v1, v2 and v3 at this point. the results, p, v1, v2 and v3, are either: - a gp_pnt point and three gp_vec vectors, for a curve in 3d space, or - a gp_pnt2d point and three gp_vec2d vectors, for a curve in 2d space.

    Parameters
    ----------
    U: float
    C: gp_Circ
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    C: gp_Circ2d
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips2d
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    In the following functions n is the order of derivation and should be greater than 0.

    Parameters
    ----------
    U: float
    H: gp_Hypr2d
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_D3(*args)

def elclib_DN(*args) -> "gp_Vec2d":
    """
    For elementary curves (lines, circles and conics) from the gp package, computes the vector corresponding to the nth derivative at the point of parameter u. the result is either: - a gp_vec vector for a curve in 3d space, or - a gp_vec2d vector for a curve in 2d space. in the following functions n is the order of derivation and should be greater than 0.

    Parameters
    ----------
    U: float
    L: gp_Lin
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    C: gp_Circ
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    Prb: gp_Parab
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    L: gp_Lin2d
    N: int

    Returns
    -------
    gp_Vec2d

    No available documentation.

    Parameters
    ----------
    U: float
    C: gp_Circ2d
    N: int

    Returns
    -------
    gp_Vec2d

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips2d
    N: int

    Returns
    -------
    gp_Vec2d

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr2d
    N: int

    Returns
    -------
    gp_Vec2d

    No available documentation.

    Parameters
    ----------
    U: float
    Prb: gp_Parab2d
    N: int

    Returns
    -------
    gp_Vec2d

    """
    return _ElCLib.elclib_DN(*args)

def elclib_EllipseD1(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_EllipseD1(*args)

def elclib_EllipseD2(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_EllipseD2(*args)

def elclib_EllipseD3(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_EllipseD3(*args)

def elclib_EllipseDN(*args) -> "gp_Vec2d":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    N: int

    Returns
    -------
    gp_Vec2d

    """
    return _ElCLib.elclib_EllipseDN(*args)

def elclib_EllipseParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt

    Returns
    -------
    float

    Pos is the axis of the ellipse parametrization in the local coordinate system of the ellipse x (u) = majorradius * cos (u) y (u) = minorradius * sin (u).

    Parameters
    ----------
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt2d

    Returns
    -------
    float

    """
    return _ElCLib.elclib_EllipseParameter(*args)

def elclib_EllipseValue(*args) -> "gp_Pnt2d":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float

    Returns
    -------
    gp_Pnt2d

    """
    return _ElCLib.elclib_EllipseValue(*args)

def elclib_HyperbolaD1(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_HyperbolaD1(*args)

def elclib_HyperbolaD2(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_HyperbolaD2(*args)

def elclib_HyperbolaD3(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    In the following functions n is the order of derivation and should be greater than 0.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_HyperbolaD3(*args)

def elclib_HyperbolaDN(*args) -> "gp_Vec2d":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    N: int

    Returns
    -------
    gp_Vec2d

    """
    return _ElCLib.elclib_HyperbolaDN(*args)

def elclib_HyperbolaParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt

    Returns
    -------
    float

    Pos is the axis of the hyperbola parametrization in the local coordinate system of the hyperbola x (u) = majorradius * ch (u) y (u) = minorradius * sh (u).

    Parameters
    ----------
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float
    P: gp_Pnt2d

    Returns
    -------
    float

    """
    return _ElCLib.elclib_HyperbolaParameter(*args)

def elclib_HyperbolaValue(*args) -> "gp_Pnt2d":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    MajorRadius: float
    MinorRadius: float

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    MajorRadius: float
    MinorRadius: float

    Returns
    -------
    gp_Pnt2d

    """
    return _ElCLib.elclib_HyperbolaValue(*args)

def elclib_InPeriod(*args) -> "Standard_Real":
    """
    Return a value in the range <ufirst, ulast> by adding or removing the period <ulast - ufirst> to <u>. attention!!! it is expected but not checked that (ulast > ufirst).

    Parameters
    ----------
    U: float
    UFirst: float
    ULast: float

    Returns
    -------
    float

    """
    return _ElCLib.elclib_InPeriod(*args)

def elclib_LineD1(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax1
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2d
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_LineD1(*args)

def elclib_LineDN(*args) -> "gp_Vec2d":
    """
    In the following functions n is the order of derivation and should be greater than 0.

    Parameters
    ----------
    U: float
    Pos: gp_Ax1
    N: int

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2d
    N: int

    Returns
    -------
    gp_Vec2d

    """
    return _ElCLib.elclib_LineDN(*args)

def elclib_LineParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax1
    P: gp_Pnt

    Returns
    -------
    float

    Parametrization p (u) = l.location() + u * l.direction().

    Parameters
    ----------
    Pos: gp_Ax2d
    P: gp_Pnt2d

    Returns
    -------
    float

    """
    return _ElCLib.elclib_LineParameter(*args)

def elclib_LineValue(*args) -> "gp_Pnt2d":
    """
    Curve evaluation the following basis functions compute the derivatives on elementary curves defined by their geometric characteristics. these functions can be called without constructing a conic from package gp. they are called by the previous functions. example : a circle is defined by its position and its radius.

    Parameters
    ----------
    U: float
    Pos: gp_Ax1

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2d

    Returns
    -------
    gp_Pnt2d

    """
    return _ElCLib.elclib_LineValue(*args)

def elclib_ParabolaD1(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Focal: float
    P: gp_Pnt
    V1: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Focal: float
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_ParabolaD1(*args)

def elclib_ParabolaD2(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Focal: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Focal: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    """
    return _ElCLib.elclib_ParabolaD2(*args)

def elclib_ParabolaDN(*args) -> "gp_Vec2d":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Focal: float
    N: int

    Returns
    -------
    gp_Vec

    The following functions compute the parametric value corresponding to a given point on a elementary curve. the point should be on the curve.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Focal: float
    N: int

    Returns
    -------
    gp_Vec2d

    """
    return _ElCLib.elclib_ParabolaDN(*args)

def elclib_ParabolaParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    P: gp_Pnt

    Returns
    -------
    float

    Pos is the mirror axis of the parabola parametrization in the local coordinate system of the parabola y**2 = (2*p) * x where p is the distance between the focus and the directrix. the following functions build a 3d curve from a 2d curve at a given position defined with an ax2.

    Parameters
    ----------
    Pos: gp_Ax22d
    P: gp_Pnt2d

    Returns
    -------
    float

    """
    return _ElCLib.elclib_ParabolaParameter(*args)

def elclib_ParabolaValue(*args) -> "gp_Pnt2d":
    """
    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax2
    Focal: float

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    Pos: gp_Ax22d
    Focal: float

    Returns
    -------
    gp_Pnt2d

    """
    return _ElCLib.elclib_ParabolaValue(*args)

def elclib_Parameter(*args) -> "Standard_Real":
    """
    Computes the parameter value of the point p on the given curve. note: in its local coordinate system, the parametric equation of the curve is given by the following: - for the line l: p(u) = po + u*vo where po is the origin and vo the unit vector of its positioning axis. - for the circle c: x(u) = radius*cos(u), y(u) = radius*sin(u) - for the ellipse e: x(u) = majorradius*cos(u). y(u) = minorradius*sin(u) - for the hyperbola h: x(u) = majorradius*ch(u), y(u) = minorradius*sh(u) - for the parabola prb: x(u) = u**2 / (2*p) y(u) = u where p is the distance between the focus and the directrix. warning the point p must be on the curve. these functions are not protected, however, and if point p is not on the curve, an exception may be raised.

    Parameters
    ----------
    L: gp_Lin
    P: gp_Pnt

    Returns
    -------
    float

    Parametrization p (u) = l.location() + u * l.direction().

    Parameters
    ----------
    L: gp_Lin2d
    P: gp_Pnt2d

    Returns
    -------
    float

    No available documentation.

    Parameters
    ----------
    C: gp_Circ
    P: gp_Pnt

    Returns
    -------
    float

    Parametrization in the local coordinate system of the circle x (u) = radius * cos (u) y (u) = radius * sin (u).

    Parameters
    ----------
    C: gp_Circ2d
    P: gp_Pnt2d

    Returns
    -------
    float

    No available documentation.

    Parameters
    ----------
    E: gp_Elips
    P: gp_Pnt

    Returns
    -------
    float

    Parametrization in the local coordinate system of the ellipse x (u) = majorradius * cos (u) y (u) = minorradius * sin (u).

    Parameters
    ----------
    E: gp_Elips2d
    P: gp_Pnt2d

    Returns
    -------
    float

    No available documentation.

    Parameters
    ----------
    H: gp_Hypr
    P: gp_Pnt

    Returns
    -------
    float

    Parametrization in the local coordinate system of the hyperbola x (u) = majorradius * ch (u) y (u) = minorradius * sh (u).

    Parameters
    ----------
    H: gp_Hypr2d
    P: gp_Pnt2d

    Returns
    -------
    float

    No available documentation.

    Parameters
    ----------
    Prb: gp_Parab
    P: gp_Pnt

    Returns
    -------
    float

    Parametrization in the local coordinate system of the parabola y**2 = (2*p) * x where p is the distance between the focus and the directrix.

    Parameters
    ----------
    Prb: gp_Parab2d
    P: gp_Pnt2d

    Returns
    -------
    float

    """
    return _ElCLib.elclib_Parameter(*args)

def elclib_To3d(*args) -> "gp_Parab":
    """
    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    P: gp_Pnt2d

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    V: gp_Vec2d

    Returns
    -------
    gp_Vec

    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    V: gp_Dir2d

    Returns
    -------
    gp_Dir

    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    A: gp_Ax2d

    Returns
    -------
    gp_Ax1

    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    A: gp_Ax22d

    Returns
    -------
    gp_Ax2

    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    L: gp_Lin2d

    Returns
    -------
    gp_Lin

    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    C: gp_Circ2d

    Returns
    -------
    gp_Circ

    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    E: gp_Elips2d

    Returns
    -------
    gp_Elips

    No available documentation.

    Parameters
    ----------
    Pos: gp_Ax2
    H: gp_Hypr2d

    Returns
    -------
    gp_Hypr

    These functions build a 3d geometric entity from a 2d geometric entity. the 'x axis' and the 'y axis' of the global coordinate system (i.e. 2d space) are lined up respectively with the 'x axis' and 'y axis' of the 3d coordinate system, pos.

    Parameters
    ----------
    Pos: gp_Ax2
    Prb: gp_Parab2d

    Returns
    -------
    gp_Parab

    """
    return _ElCLib.elclib_To3d(*args)

def elclib_Value(*args) -> "gp_Pnt2d":
    """
    For elementary curves (lines, circles and conics) from the gp package, computes the point of parameter u. the result is either: - a gp_pnt point for a curve in 3d space, or - a gp_pnt2d point for a curve in 2d space.

    Parameters
    ----------
    U: float
    L: gp_Lin

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    C: gp_Circ

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    Prb: gp_Parab

    Returns
    -------
    gp_Pnt

    No available documentation.

    Parameters
    ----------
    U: float
    L: gp_Lin2d

    Returns
    -------
    gp_Pnt2d

    No available documentation.

    Parameters
    ----------
    U: float
    C: gp_Circ2d

    Returns
    -------
    gp_Pnt2d

    No available documentation.

    Parameters
    ----------
    U: float
    E: gp_Elips2d

    Returns
    -------
    gp_Pnt2d

    No available documentation.

    Parameters
    ----------
    U: float
    H: gp_Hypr2d

    Returns
    -------
    gp_Pnt2d

    No available documentation.

    Parameters
    ----------
    U: float
    Prb: gp_Parab2d

    Returns
    -------
    gp_Pnt2d

    """
    return _ElCLib.elclib_Value(*args)



# This file is compatible with both classic and new-style classes.


