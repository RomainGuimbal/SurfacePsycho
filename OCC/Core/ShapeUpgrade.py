# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeUpgrade module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapeupgrade.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeUpgrade')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeUpgrade')
    _ShapeUpgrade = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeUpgrade', [dirname(__file__)])
        except ImportError:
            import _ShapeUpgrade
            return _ShapeUpgrade
        try:
            _mod = imp.load_module('_ShapeUpgrade', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeUpgrade = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeUpgrade
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeUpgrade.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _ShapeUpgrade.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ShapeUpgrade.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ShapeUpgrade.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _ShapeUpgrade.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeUpgrade.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _ShapeUpgrade.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _ShapeUpgrade.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _ShapeUpgrade.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _ShapeUpgrade.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ShapeUpgrade.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeUpgrade.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeUpgrade.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ShapeUpgrade.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ShapeUpgrade.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ShapeUpgrade.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _ShapeUpgrade.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ShapeUpgrade.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ShapeUpgrade.process_exception(error, method_name, class_name)
process_exception = _ShapeUpgrade.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TColGeom
import OCC.Core.Geom2d
import OCC.Core.TColGeom2d
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.ShapeBuild
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.ShapeAnalysis
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.IntRes2d

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_ShapeUpgrade_RemoveLocations_Create() -> "opencascade::handle< ShapeUpgrade_RemoveLocations >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_Create()
Handle_ShapeUpgrade_RemoveLocations_Create = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_Create

def Handle_ShapeUpgrade_RemoveLocations_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_RemoveLocations >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_DownCast(t)
Handle_ShapeUpgrade_RemoveLocations_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_DownCast

def Handle_ShapeUpgrade_RemoveLocations_IsNull(t: 'opencascade::handle< ShapeUpgrade_RemoveLocations > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_IsNull(t)
Handle_ShapeUpgrade_RemoveLocations_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveLocations_IsNull

def Handle_ShapeUpgrade_SplitCurve_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_Create()
Handle_ShapeUpgrade_SplitCurve_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_Create

def Handle_ShapeUpgrade_SplitCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_DownCast(t)
Handle_ShapeUpgrade_SplitCurve_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_DownCast

def Handle_ShapeUpgrade_SplitCurve_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_IsNull(t)
Handle_ShapeUpgrade_SplitCurve_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve_IsNull

def Handle_ShapeUpgrade_SplitSurface_Create() -> "opencascade::handle< ShapeUpgrade_SplitSurface >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_Create()
Handle_ShapeUpgrade_SplitSurface_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_Create

def Handle_ShapeUpgrade_SplitSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitSurface >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_DownCast(t)
Handle_ShapeUpgrade_SplitSurface_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_DownCast

def Handle_ShapeUpgrade_SplitSurface_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitSurface > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_IsNull(t)
Handle_ShapeUpgrade_SplitSurface_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurface_IsNull

def Handle_ShapeUpgrade_Tool_Create() -> "opencascade::handle< ShapeUpgrade_Tool >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_Tool_Create()
Handle_ShapeUpgrade_Tool_Create = _ShapeUpgrade.Handle_ShapeUpgrade_Tool_Create

def Handle_ShapeUpgrade_Tool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_Tool >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_Tool_DownCast(t)
Handle_ShapeUpgrade_Tool_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_Tool_DownCast

def Handle_ShapeUpgrade_Tool_IsNull(t: 'opencascade::handle< ShapeUpgrade_Tool > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_Tool_IsNull(t)
Handle_ShapeUpgrade_Tool_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_Tool_IsNull

def Handle_ShapeUpgrade_UnifySameDomain_Create() -> "opencascade::handle< ShapeUpgrade_UnifySameDomain >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_Create()
Handle_ShapeUpgrade_UnifySameDomain_Create = _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_Create

def Handle_ShapeUpgrade_UnifySameDomain_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_UnifySameDomain >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_DownCast(t)
Handle_ShapeUpgrade_UnifySameDomain_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_DownCast

def Handle_ShapeUpgrade_UnifySameDomain_IsNull(t: 'opencascade::handle< ShapeUpgrade_UnifySameDomain > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_IsNull(t)
Handle_ShapeUpgrade_UnifySameDomain_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_UnifySameDomain_IsNull

def Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Create() -> "opencascade::handle< ShapeUpgrade_ConvertSurfaceToBezierBasis >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Create()
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_Create

def Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ConvertSurfaceToBezierBasis >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast(t)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast

def Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull(t: 'opencascade::handle< ShapeUpgrade_ConvertSurfaceToBezierBasis > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull(t)
Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_IsNull

def Handle_ShapeUpgrade_EdgeDivide_Create() -> "opencascade::handle< ShapeUpgrade_EdgeDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_Create()
Handle_ShapeUpgrade_EdgeDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_Create

def Handle_ShapeUpgrade_EdgeDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_EdgeDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_DownCast(t)
Handle_ShapeUpgrade_EdgeDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_DownCast

def Handle_ShapeUpgrade_EdgeDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_EdgeDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_IsNull(t)
Handle_ShapeUpgrade_EdgeDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_EdgeDivide_IsNull

def Handle_ShapeUpgrade_FaceDivide_Create() -> "opencascade::handle< ShapeUpgrade_FaceDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_Create()
Handle_ShapeUpgrade_FaceDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_Create

def Handle_ShapeUpgrade_FaceDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_FaceDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_DownCast(t)
Handle_ShapeUpgrade_FaceDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_DownCast

def Handle_ShapeUpgrade_FaceDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_FaceDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_IsNull(t)
Handle_ShapeUpgrade_FaceDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivide_IsNull

def Handle_ShapeUpgrade_FixSmallCurves_Create() -> "opencascade::handle< ShapeUpgrade_FixSmallCurves >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_Create()
Handle_ShapeUpgrade_FixSmallCurves_Create = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_Create

def Handle_ShapeUpgrade_FixSmallCurves_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_FixSmallCurves >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_DownCast(t)
Handle_ShapeUpgrade_FixSmallCurves_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_DownCast

def Handle_ShapeUpgrade_FixSmallCurves_IsNull(t: 'opencascade::handle< ShapeUpgrade_FixSmallCurves > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_IsNull(t)
Handle_ShapeUpgrade_FixSmallCurves_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallCurves_IsNull

def Handle_ShapeUpgrade_RemoveInternalWires_Create() -> "opencascade::handle< ShapeUpgrade_RemoveInternalWires >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_Create()
Handle_ShapeUpgrade_RemoveInternalWires_Create = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_Create

def Handle_ShapeUpgrade_RemoveInternalWires_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_RemoveInternalWires >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_DownCast(t)
Handle_ShapeUpgrade_RemoveInternalWires_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_DownCast

def Handle_ShapeUpgrade_RemoveInternalWires_IsNull(t: 'opencascade::handle< ShapeUpgrade_RemoveInternalWires > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_IsNull(t)
Handle_ShapeUpgrade_RemoveInternalWires_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_RemoveInternalWires_IsNull

def Handle_ShapeUpgrade_SplitCurve2d_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve2d >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_Create()
Handle_ShapeUpgrade_SplitCurve2d_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_Create

def Handle_ShapeUpgrade_SplitCurve2d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve2d >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_DownCast(t)
Handle_ShapeUpgrade_SplitCurve2d_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_DownCast

def Handle_ShapeUpgrade_SplitCurve2d_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve2d > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_IsNull(t)
Handle_ShapeUpgrade_SplitCurve2d_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2d_IsNull

def Handle_ShapeUpgrade_SplitCurve3d_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve3d >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_Create()
Handle_ShapeUpgrade_SplitCurve3d_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_Create

def Handle_ShapeUpgrade_SplitCurve3d_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve3d >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_DownCast(t)
Handle_ShapeUpgrade_SplitCurve3d_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_DownCast

def Handle_ShapeUpgrade_SplitCurve3d_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve3d > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_IsNull(t)
Handle_ShapeUpgrade_SplitCurve3d_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3d_IsNull

def Handle_ShapeUpgrade_SplitSurfaceAngle_Create() -> "opencascade::handle< ShapeUpgrade_SplitSurfaceAngle >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_Create()
Handle_ShapeUpgrade_SplitSurfaceAngle_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_Create

def Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitSurfaceAngle >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast(t)
Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast

def Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitSurfaceAngle > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull(t)
Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceAngle_IsNull

def Handle_ShapeUpgrade_SplitSurfaceArea_Create() -> "opencascade::handle< ShapeUpgrade_SplitSurfaceArea >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_Create()
Handle_ShapeUpgrade_SplitSurfaceArea_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_Create

def Handle_ShapeUpgrade_SplitSurfaceArea_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitSurfaceArea >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_DownCast(t)
Handle_ShapeUpgrade_SplitSurfaceArea_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_DownCast

def Handle_ShapeUpgrade_SplitSurfaceArea_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitSurfaceArea > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_IsNull(t)
Handle_ShapeUpgrade_SplitSurfaceArea_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceArea_IsNull

def Handle_ShapeUpgrade_SplitSurfaceContinuity_Create() -> "opencascade::handle< ShapeUpgrade_SplitSurfaceContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_Create()
Handle_ShapeUpgrade_SplitSurfaceContinuity_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_Create

def Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitSurfaceContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast(t)
Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast

def Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitSurfaceContinuity > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull(t)
Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitSurfaceContinuity_IsNull

def Handle_ShapeUpgrade_WireDivide_Create() -> "opencascade::handle< ShapeUpgrade_WireDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_Create()
Handle_ShapeUpgrade_WireDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_Create

def Handle_ShapeUpgrade_WireDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_WireDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_DownCast(t)
Handle_ShapeUpgrade_WireDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_DownCast

def Handle_ShapeUpgrade_WireDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_WireDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_IsNull(t)
Handle_ShapeUpgrade_WireDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_WireDivide_IsNull

def Handle_ShapeUpgrade_ClosedEdgeDivide_Create() -> "opencascade::handle< ShapeUpgrade_ClosedEdgeDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_Create()
Handle_ShapeUpgrade_ClosedEdgeDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_Create

def Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ClosedEdgeDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast(t)
Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast

def Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_ClosedEdgeDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull(t)
Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedEdgeDivide_IsNull

def Handle_ShapeUpgrade_ClosedFaceDivide_Create() -> "opencascade::handle< ShapeUpgrade_ClosedFaceDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_Create()
Handle_ShapeUpgrade_ClosedFaceDivide_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_Create

def Handle_ShapeUpgrade_ClosedFaceDivide_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ClosedFaceDivide >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_DownCast(t)
Handle_ShapeUpgrade_ClosedFaceDivide_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_DownCast

def Handle_ShapeUpgrade_ClosedFaceDivide_IsNull(t: 'opencascade::handle< ShapeUpgrade_ClosedFaceDivide > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_IsNull(t)
Handle_ShapeUpgrade_ClosedFaceDivide_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ClosedFaceDivide_IsNull

def Handle_ShapeUpgrade_ConvertCurve2dToBezier_Create() -> "opencascade::handle< ShapeUpgrade_ConvertCurve2dToBezier >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_Create()
Handle_ShapeUpgrade_ConvertCurve2dToBezier_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_Create

def Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ConvertCurve2dToBezier >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast(t)
Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast

def Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull(t: 'opencascade::handle< ShapeUpgrade_ConvertCurve2dToBezier > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull(t)
Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve2dToBezier_IsNull

def Handle_ShapeUpgrade_ConvertCurve3dToBezier_Create() -> "opencascade::handle< ShapeUpgrade_ConvertCurve3dToBezier >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_Create()
Handle_ShapeUpgrade_ConvertCurve3dToBezier_Create = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_Create

def Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_ConvertCurve3dToBezier >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast(t)
Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast

def Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull(t: 'opencascade::handle< ShapeUpgrade_ConvertCurve3dToBezier > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull(t)
Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_ConvertCurve3dToBezier_IsNull

def Handle_ShapeUpgrade_FaceDivideArea_Create() -> "opencascade::handle< ShapeUpgrade_FaceDivideArea >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_Create()
Handle_ShapeUpgrade_FaceDivideArea_Create = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_Create

def Handle_ShapeUpgrade_FaceDivideArea_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_FaceDivideArea >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_DownCast(t)
Handle_ShapeUpgrade_FaceDivideArea_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_DownCast

def Handle_ShapeUpgrade_FaceDivideArea_IsNull(t: 'opencascade::handle< ShapeUpgrade_FaceDivideArea > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_IsNull(t)
Handle_ShapeUpgrade_FaceDivideArea_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_FaceDivideArea_IsNull

def Handle_ShapeUpgrade_FixSmallBezierCurves_Create() -> "opencascade::handle< ShapeUpgrade_FixSmallBezierCurves >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_Create()
Handle_ShapeUpgrade_FixSmallBezierCurves_Create = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_Create

def Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_FixSmallBezierCurves >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast(t)
Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast

def Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull(t: 'opencascade::handle< ShapeUpgrade_FixSmallBezierCurves > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull(t)
Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_FixSmallBezierCurves_IsNull

def Handle_ShapeUpgrade_SplitCurve2dContinuity_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve2dContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_Create()
Handle_ShapeUpgrade_SplitCurve2dContinuity_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_Create

def Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve2dContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast(t)
Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast

def Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve2dContinuity > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull(t)
Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve2dContinuity_IsNull

def Handle_ShapeUpgrade_SplitCurve3dContinuity_Create() -> "opencascade::handle< ShapeUpgrade_SplitCurve3dContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_Create()
Handle_ShapeUpgrade_SplitCurve3dContinuity_Create = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_Create

def Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeUpgrade_SplitCurve3dContinuity >":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast(t)
Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast

def Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull(t: 'opencascade::handle< ShapeUpgrade_SplitCurve3dContinuity > const &') -> "bool":
    return _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull(t)
Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull = _ShapeUpgrade.Handle_ShapeUpgrade_SplitCurve3dContinuity_IsNull
class shapeupgrade(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shapeupgrade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shapeupgrade, name)
    __repr__ = _swig_repr

    def C0BSplineToSequenceOfC1BSplineCurve(*args) -> "Standard_Boolean":
        """
        Unifies same domain faces and edges of specified shape.

        Parameters
        ----------
        BS: Geom_BSplineCurve
        seqBS: TColGeom_HSequenceOfBoundedCurve

        Returns
        -------
        bool

        Converts c0 b-spline curve into sequence of c1 b-spline curves. this method splits b-spline at the knots with multiplicities equal to degree, i.e. unlike method geomconvert::c0bsplinetoarrayofc1bsplinecurve this one does not use any tolerance and therefore does not change the geometry of b-spline. returns true if c0 b-spline was successfully splitted, else returns false (if bs is c1 b-spline).

        Parameters
        ----------
        BS: Geom2d_BSplineCurve
        seqBS: TColGeom2d_HSequenceOfBoundedCurve

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args)

    C0BSplineToSequenceOfC1BSplineCurve = staticmethod(C0BSplineToSequenceOfC1BSplineCurve)

    __repr__ = _dumps_object


    def __init__(self):
        this = _ShapeUpgrade.new_shapeupgrade()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeUpgrade.delete_shapeupgrade
    __del__ = lambda self: None
shapeupgrade_swigregister = _ShapeUpgrade.shapeupgrade_swigregister
shapeupgrade_swigregister(shapeupgrade)

def shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args) -> "Standard_Boolean":
    """
    Unifies same domain faces and edges of specified shape.

    Parameters
    ----------
    BS: Geom_BSplineCurve
    seqBS: TColGeom_HSequenceOfBoundedCurve

    Returns
    -------
    bool

    Converts c0 b-spline curve into sequence of c1 b-spline curves. this method splits b-spline at the knots with multiplicities equal to degree, i.e. unlike method geomconvert::c0bsplinetoarrayofc1bsplinecurve this one does not use any tolerance and therefore does not change the geometry of b-spline. returns true if c0 b-spline was successfully splitted, else returns false (if bs is c1 b-spline).

    Parameters
    ----------
    BS: Geom2d_BSplineCurve
    seqBS: TColGeom2d_HSequenceOfBoundedCurve

    Returns
    -------
    bool

    """
    return _ShapeUpgrade.shapeupgrade_C0BSplineToSequenceOfC1BSplineCurve(*args)

class ShapeUpgrade_RemoveLocations(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_RemoveLocations, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_RemoveLocations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empy constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_RemoveLocations(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetResult(self, *args) -> "TopoDS_Shape":
        """
        Returns shape with removed locatins.

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_GetResult(self, *args)


    def ModifiedShape(self, *args) -> "TopoDS_Shape":
        """
        Returns modified shape obtained from initial shape.

        Parameters
        ----------
        theInitShape: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_ModifiedShape(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        Removes all location correspodingly to removelevel.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_Remove(self, *args)


    def RemoveLevel(self, *args) -> "TopAbs_ShapeEnum":
        """
        Sets level starting with that location will be removed.value of level can be set to topabs_shape,topabs_compound,topabs_solid,topabs_shell,topabs_face.by default topabs_shape. in this case location will be removed for all shape types for exception of compound.

        Returns
        -------
        TopAbs_ShapeEnum

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_RemoveLevel(self, *args)


    def SetRemoveLevel(self, *args) -> "void":
        """
        Sets level starting with that location will be removed, by default topabs_shape. in this case locations will be kept for specified shape and if specified shape is topabs_compound for sub-shapes of first level.

        Parameters
        ----------
        theLevel: TopAbs_ShapeEnum

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveLocations_SetRemoveLevel(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_RemoveLocations_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_RemoveLocations
    __del__ = lambda self: None
ShapeUpgrade_RemoveLocations_swigregister = _ShapeUpgrade.ShapeUpgrade_RemoveLocations_swigregister
ShapeUpgrade_RemoveLocations_swigregister(ShapeUpgrade_RemoveLocations)

class ShapeUpgrade_ShapeDivide(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ShapeDivide, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ShapeDivide, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Initialize by a shape.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ShapeDivide(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetContext(self, *args) -> "opencascade::handle< ShapeBuild_ReShape >":
        """
        Returns context with all the modifications made during last call(s) to perform() recorded.

        Returns
        -------
        opencascade::handle<ShapeBuild_ReShape>

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_GetContext(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize by a shape.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Init(self, *args)


    def MsgRegistrator(self, *args) -> "opencascade::handle< ShapeExtend_BasicMsgRegistrator >":
        """
        Returns message registrator.

        Returns
        -------
        opencascade::handle<ShapeExtend_BasicMsgRegistrator>

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_MsgRegistrator(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        Performs splitting and computes the resulting shape if newcontext is true (default), the internal context will be cleared at start, else previous substitutions will be acting.

        Parameters
        ----------
        newContext: bool,optional
        	default value is Standard_True

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Shape":
        """
        Gives the resulting shape, or null shape if not done.

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Result(self, *args)


    def SendMsg(self, *args) -> "void":
        """
        Sends a message to be attached to the shape. calls corresponding message of message registrator.

        Parameters
        ----------
        shape: TopoDS_Shape
        message: Message_Msg
        gravity: Message_Gravity,optional
        	default value is Message_Info

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SendMsg(self, *args)


    def SetContext(self, *args) -> "void":
        """
        Sets context with recorded modifications to be applied during next call(s) to perform(shape,standard_false).

        Parameters
        ----------
        context: ShapeBuild_ReShape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetContext(self, *args)


    def SetEdgeMode(self, *args) -> "void":
        """
        Sets mode for splitting 3d curves from edges. 0 - only curve 3d from free edges. 1 - only curve 3d from shared edges. 2 - all curve 3d.

        Parameters
        ----------
        aEdgeMode: int

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetEdgeMode(self, *args)


    def SetMaxTolerance(self, *args) -> "void":
        """
        Sets maximal allowed tolerance.

        Parameters
        ----------
        maxtol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMaxTolerance(self, *args)


    def SetMinTolerance(self, *args) -> "void":
        """
        Sets minimal allowed tolerance.

        Parameters
        ----------
        mintol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMinTolerance(self, *args)


    def SetMsgRegistrator(self, *args) -> "void":
        """
        Sets message registrator.

        Parameters
        ----------
        msgreg: ShapeExtend_BasicMsgRegistrator

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetMsgRegistrator(self, *args)


    def SetPrecision(self, *args) -> "void":
        """
        Defines the spatial precision used for splitting.

        Parameters
        ----------
        Prec: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetPrecision(self, *args)


    def SetSplitFaceTool(self, *args) -> "void":
        """
        Sets the tool for splitting faces.

        Parameters
        ----------
        splitFaceTool: ShapeUpgrade_FaceDivide

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSplitFaceTool(self, *args)


    def SetSurfaceSegmentMode(self, *args) -> "void":
        """
        Purpose sets mode for trimming (segment) surface by wire uv bounds.

        Parameters
        ----------
        Segment: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_SetSurfaceSegmentMode(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        Queries the status of last call to perform ok : no splitting was done (or no call to perform) done1: some edges were splitted done2: surface was splitted fail1: some errors occured.

        Parameters
        ----------
        status: ShapeExtend_Status

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivide_Status(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivide
    __del__ = lambda self: None
ShapeUpgrade_ShapeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivide_swigregister
ShapeUpgrade_ShapeDivide_swigregister(ShapeUpgrade_ShapeDivide)

class ShapeUpgrade_ShellSewing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ShellSewing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ShellSewing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a shellsewing, empty.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ShellSewing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ApplySewing(self, *args) -> "TopoDS_Shape":
        """
        Builds a new shape from a former one, by calling sewing from brepbuilderapi. rebuilt solids are oriented to be 'not infinite' //! if <tol> is not given (i.e. value 0. by default), it is computed as the mean tolerance recorded in <shape> //! if no shell has been sewed, this method returns the input shape.

        Parameters
        ----------
        shape: TopoDS_Shape
        tol: float,optional
        	default value is 0.0

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_ShellSewing_ApplySewing(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShellSewing
    __del__ = lambda self: None
ShapeUpgrade_ShellSewing_swigregister = _ShapeUpgrade.ShapeUpgrade_ShellSewing_swigregister
ShapeUpgrade_ShellSewing_swigregister(ShapeUpgrade_ShellSewing)

class ShapeUpgrade_SplitCurve(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Build(self, *args) -> "void":
        """
        If segment is true, the result is composed with segments of the curve bounded by the splitvalues. if segment is false, the result is composed with trimmed curves all based on the same complete curve.

        Parameters
        ----------
        Segment: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Build(self, *args)


    def Compute(self, *args) -> "void":
        """
        Calculates points for correction/splitting of the curve.

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Compute(self, *args)


    def Init(self, *args) -> "void":
        """
        Initializes with curve first and last parameters.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Init(self, *args)


    def Perform(self, *args) -> "void":
        """
        Performs correction/splitting of the curve. first defines splitting values by method compute(), then calls method build().

        Parameters
        ----------
        Segment: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Perform(self, *args)


    def SetSplitValues(self, *args) -> "void":
        """
        Sets the parameters where splitting has to be done.

        Parameters
        ----------
        SplitValues: TColStd_HSequenceOfReal

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_SetSplitValues(self, *args)


    def SplitValues(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal > const &":
        """
        Returns all the splitting values including the first and last parameters of the input curve merges input split values and new ones into myglobalknots.

        Returns
        -------
        opencascade::handle<TColStd_HSequenceOfReal>

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_SplitValues(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        Returns the status ok - no splitting is needed done1 - splitting required and gives more than one segment done2 - splitting is required, but gives only one segment (initial) done3 - geometric form of the curve or parametrisation is modified.

        Parameters
        ----------
        status: ShapeExtend_Status

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve
    __del__ = lambda self: None
ShapeUpgrade_SplitCurve_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve_swigregister
ShapeUpgrade_SplitCurve_swigregister(ShapeUpgrade_SplitCurve)

class ShapeUpgrade_SplitSurface(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Build(self, *args) -> "void":
        """
        Performs splitting of the supporting surface. if resulting surface is b-spline and segment is true, the result is composed with segments of the surface bounded by the u and v splitvalues (method geom_bsplinesurface::segment is used). if segment is false, the result is composed with geom_rectangulartrimmedsurface all based on the same complete surface. fields mynbresultingrow and mynbresultingcol must be set to specify the size of resulting grid of surfaces.

        Parameters
        ----------
        Segment: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Build(self, *args)


    def Compute(self, *args) -> "void":
        """
        Calculates points for correction/splitting of the surface.

        Parameters
        ----------
        Segment: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Compute(self, *args)


    def Init(self, *args) -> "void":
        """
        Initializes with single supporting surface.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        None

        Initializes with single supporting surface with bounding parameters.

        Parameters
        ----------
        S: Geom_Surface
        UFirst: float
        ULast: float
        VFirst: float
        VLast: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Init(self, *args)


    def Perform(self, *args) -> "void":
        """
        Performs correction/splitting of the surface. first defines splitting values by method compute(), then calls method build().

        Parameters
        ----------
        Segment: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Perform(self, *args)


    def ResSurfaces(self, *args) -> "opencascade::handle< ShapeExtend_CompositeSurface > const &":
        """
        Returns obtained surfaces after splitting as compositesurface.

        Returns
        -------
        opencascade::handle<ShapeExtend_CompositeSurface>

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_ResSurfaces(self, *args)


    def SetUSplitValues(self, *args) -> "void":
        """
        Sets u parameters where splitting has to be done.

        Parameters
        ----------
        UValues: TColStd_HSequenceOfReal

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_SetUSplitValues(self, *args)


    def SetVSplitValues(self, *args) -> "void":
        """
        Sets v parameters where splitting has to be done.

        Parameters
        ----------
        VValues: TColStd_HSequenceOfReal

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_SetVSplitValues(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        Returns the status ok - no splitting is needed done1 - splitting required and gives more than one patch done2 - splitting is required, but gives only single patch (initial) done3 - geometric form of the surface or parametrisation is modified.

        Parameters
        ----------
        status: ShapeExtend_Status

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_Status(self, *args)


    def USplitValues(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal > const &":
        """
        Returns all the u splitting values including the first and last parameters of the input surface.

        Returns
        -------
        opencascade::handle<TColStd_HSequenceOfReal>

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_USplitValues(self, *args)


    def VSplitValues(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal > const &":
        """
        Returns all the splitting v values including the first and last parameters of the input surface.

        Returns
        -------
        opencascade::handle<TColStd_HSequenceOfReal>

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurface_VSplitValues(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitSurface
    __del__ = lambda self: None
ShapeUpgrade_SplitSurface_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurface_swigregister
ShapeUpgrade_SplitSurface_swigregister(ShapeUpgrade_SplitSurface)

class ShapeUpgrade_Tool(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_Tool, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_Tool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_Tool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Context(self, *args) -> "opencascade::handle< ShapeBuild_ReShape >":
        """
        Returns context.

        Returns
        -------
        opencascade::handle<ShapeBuild_ReShape>

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Context(self, *args)


    def LimitTolerance(self, *args) -> "Standard_Real":
        """
        Returns tolerance limited by [mymintol,mymaxtol].

        Parameters
        ----------
        toler: float

        Returns
        -------
        float

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_LimitTolerance(self, *args)


    def MaxTolerance(self, *args) -> "Standard_Real":
        """
        Returns maximal allowed tolerance.

        Returns
        -------
        float

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_MaxTolerance(self, *args)


    def MinTolerance(self, *args) -> "Standard_Real":
        """
        Returns minimal allowed tolerance.

        Returns
        -------
        float

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_MinTolerance(self, *args)


    def Precision(self, *args) -> "Standard_Real":
        """
        Returns basic precision value.

        Returns
        -------
        float

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Precision(self, *args)


    def Set(self, *args) -> "void":
        """
        Copy all fields from another root object.

        Parameters
        ----------
        tool: ShapeUpgrade_Tool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_Set(self, *args)


    def SetContext(self, *args) -> "void":
        """
        Sets context.

        Parameters
        ----------
        context: ShapeBuild_ReShape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetContext(self, *args)


    def SetMaxTolerance(self, *args) -> "void":
        """
        Sets maximal allowed tolerance.

        Parameters
        ----------
        maxtol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetMaxTolerance(self, *args)


    def SetMinTolerance(self, *args) -> "void":
        """
        Sets minimal allowed tolerance.

        Parameters
        ----------
        mintol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetMinTolerance(self, *args)


    def SetPrecision(self, *args) -> "void":
        """
        Sets basic precision value.

        Parameters
        ----------
        preci: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_Tool_SetPrecision(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_Tool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_Tool
    __del__ = lambda self: None
ShapeUpgrade_Tool_swigregister = _ShapeUpgrade.ShapeUpgrade_Tool_swigregister
ShapeUpgrade_Tool_swigregister(ShapeUpgrade_Tool)

class ShapeUpgrade_UnifySameDomain(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_UnifySameDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_UnifySameDomain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        Constructor defining input shape and necessary flags. it does not perform unification.

        Parameters
        ----------
        aShape: TopoDS_Shape
        UnifyEdges: bool,optional
        	default value is Standard_True
        UnifyFaces: bool,optional
        	default value is Standard_True
        ConcatBSplines: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_UnifySameDomain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AllowInternalEdges(self, *args) -> "void":
        """
        Sets the flag defining whether it is allowed to create internal edges inside merged faces in the case of non-manifold topology. without this flag merging through multi connected edge is forbidden. default value is false.

        Parameters
        ----------
        theValue: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_AllowInternalEdges(self, *args)


    def Build(self, *args) -> "void":
        """
        Performs unification and builds the resulting shape.

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Build(self, *args)


    def History(self, *args) -> "opencascade::handle< BRepTools_History > const &":
        """
        Returns the history of the processed shapes.

        Returns
        -------
        opencascade::handle<BRepTools_History>

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_History(self, *args)


    def Initialize(self, *args) -> "void":
        """
        Initializes with a shape and necessary flags. it does not perform unification. if you intend to nullify the history place holder do it after initialization.

        Parameters
        ----------
        aShape: TopoDS_Shape
        UnifyEdges: bool,optional
        	default value is Standard_True
        UnifyFaces: bool,optional
        	default value is Standard_True
        ConcatBSplines: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Initialize(self, *args)


    def KeepShape(self, *args) -> "void":
        """
        Sets the shape for avoid merging of the faces/edges. this shape can be vertex or edge. if the shape is a vertex it forbids merging of connected edges. if the shape is a edge it forbids merging of connected faces. this method can be called several times to keep several shapes.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_KeepShape(self, *args)


    def KeepShapes(self, *args) -> "void":
        """
        Sets the map of shapes for avoid merging of the faces/edges. it allows passing a ready to use map instead of calling many times the method keepshape.

        Parameters
        ----------
        theShapes: TopTools_MapOfShape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_KeepShapes(self, *args)


    def SetAngularTolerance(self, *args) -> "void":
        """
        Sets the angular tolerance. if two shapes form a connection angle greater than this value they will not be merged. default value is precision::angular().

        Parameters
        ----------
        theValue: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetAngularTolerance(self, *args)


    def SetLinearTolerance(self, *args) -> "void":
        """
        Sets the linear tolerance. it plays the role of chord error when taking decision about merging of shapes. default value is precision::confusion().

        Parameters
        ----------
        theValue: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetLinearTolerance(self, *args)


    def SetSafeInputMode(self, *args) -> "void":
        """
        Sets the flag defining the behavior of the algorithm regarding modification of input shape. if this flag is equal to true then the input (original) shape can't be modified during modification process. default value is true.

        Parameters
        ----------
        theValue: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_SetSafeInputMode(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        Gives the resulting shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_Shape(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_UnifySameDomain_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_UnifySameDomain
    __del__ = lambda self: None
ShapeUpgrade_UnifySameDomain_swigregister = _ShapeUpgrade.ShapeUpgrade_UnifySameDomain_swigregister
ShapeUpgrade_UnifySameDomain_swigregister(ShapeUpgrade_UnifySameDomain)

class ShapeUpgrade_ConvertSurfaceToBezierBasis(ShapeUpgrade_SplitSurface):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ConvertSurfaceToBezierBasis, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ConvertSurfaceToBezierBasis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ConvertSurfaceToBezierBasis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetBSplineMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_bsplinesurface conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetBSplineMode(self, *args)


    def GetExtrusionMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_surfaceoflinearextrusion conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetExtrusionMode(self, *args)


    def GetPlaneMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_pline conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetPlaneMode(self, *args)


    def GetRevolutionMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_surfaceofrevolution conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_GetRevolutionMode(self, *args)


    def Segments(self, *args) -> "opencascade::handle< ShapeExtend_CompositeSurface >":
        """
        Returns the grid of bezier based surfaces correspondent to original surface.

        Returns
        -------
        opencascade::handle<ShapeExtend_CompositeSurface>

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_Segments(self, *args)


    def SetBSplineMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_bsplinesurface to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetBSplineMode(self, *args)


    def SetExtrusionMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_surfaceoflinearextrusion to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetExtrusionMode(self, *args)


    def SetPlaneMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_plane to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetPlaneMode(self, *args)


    def SetRevolutionMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_surfaceofrevolution to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_SetRevolutionMode(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ConvertSurfaceToBezierBasis_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ConvertSurfaceToBezierBasis
    __del__ = lambda self: None
ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister
ShapeUpgrade_ConvertSurfaceToBezierBasis_swigregister(ShapeUpgrade_ConvertSurfaceToBezierBasis)

class ShapeUpgrade_EdgeDivide(ShapeUpgrade_Tool):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_EdgeDivide, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_EdgeDivide, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_EdgeDivide(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Clear(self, *args)


    def Compute(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Compute(self, *args)


    def GetSplitCurve2dTool(self, *args) -> "opencascade::handle< ShapeUpgrade_SplitCurve2d >":
        """
        Returns the tool for splitting pcurves.

        Returns
        -------
        opencascade::handle<ShapeUpgrade_SplitCurve2d>

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve2dTool(self, *args)


    def GetSplitCurve3dTool(self, *args) -> "opencascade::handle< ShapeUpgrade_SplitCurve3d >":
        """
        Returns the tool for splitting 3d curves.

        Returns
        -------
        opencascade::handle<ShapeUpgrade_SplitCurve3d>

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_GetSplitCurve3dTool(self, *args)


    def HasCurve2d(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve2d(self, *args)


    def HasCurve3d(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_HasCurve3d(self, *args)


    def Knots2d(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HSequenceOfReal>

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots2d(self, *args)


    def Knots3d(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HSequenceOfReal>

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_Knots3d(self, *args)


    def SetFace(self, *args) -> "void":
        """
        Sets supporting surface by face.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetFace(self, *args)


    def SetSplitCurve2dTool(self, *args) -> "void":
        """
        Sets the tool for splitting pcurves.

        Parameters
        ----------
        splitCurve2dTool: ShapeUpgrade_SplitCurve2d

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve2dTool(self, *args)


    def SetSplitCurve3dTool(self, *args) -> "void":
        """
        Sets the tool for splitting 3d curves.

        Parameters
        ----------
        splitCurve3dTool: ShapeUpgrade_SplitCurve3d

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_EdgeDivide_SetSplitCurve3dTool(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_EdgeDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_EdgeDivide
    __del__ = lambda self: None
ShapeUpgrade_EdgeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_EdgeDivide_swigregister
ShapeUpgrade_EdgeDivide_swigregister(ShapeUpgrade_EdgeDivide)

class ShapeUpgrade_FaceDivide(ShapeUpgrade_Tool):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_FaceDivide, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_FaceDivide, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates empty constructor.

        Returns
        -------
        None

        Initialize by a face.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_FaceDivide(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetSplitSurfaceTool(self, *args) -> "opencascade::handle< ShapeUpgrade_SplitSurface >":
        """
        Returns the tool for splitting surfaces. this tool must be already initialized.

        Returns
        -------
        opencascade::handle<ShapeUpgrade_SplitSurface>

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_GetSplitSurfaceTool(self, *args)


    def GetWireDivideTool(self, *args) -> "opencascade::handle< ShapeUpgrade_WireDivide >":
        """
        Returns the tool for dividing edges on face. this tool must be already initialized.

        Returns
        -------
        opencascade::handle<ShapeUpgrade_WireDivide>

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_GetWireDivideTool(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize by a face.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Init(self, *args)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        Performs splitting and computes the resulting shell the context is used to keep track of former splittings in order to keep sharings. it is updated according to modifications made.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Perform(self, *args)


    def Result(self, *args) -> "TopoDS_Shape":
        """
        Gives the resulting shell, or face, or null shape if not done.

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Result(self, *args)


    def SetSplitSurfaceTool(self, *args) -> "void":
        """
        Sets the tool for splitting surfaces.

        Parameters
        ----------
        splitSurfaceTool: ShapeUpgrade_SplitSurface

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSplitSurfaceTool(self, *args)


    def SetSurfaceSegmentMode(self, *args) -> "void":
        """
        Purpose sets mode for trimming (segment) surface by wire uv bounds.

        Parameters
        ----------
        Segment: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetSurfaceSegmentMode(self, *args)


    def SetWireDivideTool(self, *args) -> "void":
        """
        Sets the tool for dividing edges on face.

        Parameters
        ----------
        wireDivideTool: ShapeUpgrade_WireDivide

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SetWireDivideTool(self, *args)


    def SplitCurves(self, *args) -> "Standard_Boolean":
        """
        Performs splitting of curves of all the edges in the shape and divides these edges.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitCurves(self, *args)


    def SplitSurface(self, *args) -> "Standard_Boolean":
        """
        Performs splitting of surface and computes the shell from source face.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_SplitSurface(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        Queries the status of last call to perform ok : no splitting was done (or no call to perform) done1: some edges were splitted done2: surface was splitted done3: surface was modified without splitting fail1: some fails encountered during splitting wires fail2: face cannot be splitted.

        Parameters
        ----------
        status: ShapeExtend_Status

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FaceDivide_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_FaceDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_FaceDivide
    __del__ = lambda self: None
ShapeUpgrade_FaceDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_FaceDivide_swigregister
ShapeUpgrade_FaceDivide_swigregister(ShapeUpgrade_FaceDivide)

class ShapeUpgrade_FixSmallCurves(ShapeUpgrade_Tool):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_FixSmallCurves, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_FixSmallCurves, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_FixSmallCurves(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Approx(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Curve3d: Geom_Curve
        Curve2d: Geom2d_Curve
        Curve2dR: Geom2d_Curve

        Returns
        -------
        First: float
        Last: float

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Approx(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theEdge: TopoDS_Edge
        theFace: TopoDS_Face

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Init(self, *args)


    def SetSplitCurve2dTool(self, *args) -> "void":
        """
        Sets the tool for splitting pcurves.

        Parameters
        ----------
        splitCurve2dTool: ShapeUpgrade_SplitCurve2d

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve2dTool(self, *args)


    def SetSplitCurve3dTool(self, *args) -> "void":
        """
        Sets the tool for splitting 3d curves.

        Parameters
        ----------
        splitCurve3dTool: ShapeUpgrade_SplitCurve3d

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_SetSplitCurve3dTool(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        Queries the status of last call to perform ok : done1: done2: fail1:.

        Parameters
        ----------
        status: ShapeExtend_Status

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_FixSmallCurves_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_FixSmallCurves
    __del__ = lambda self: None
ShapeUpgrade_FixSmallCurves_swigregister = _ShapeUpgrade.ShapeUpgrade_FixSmallCurves_swigregister
ShapeUpgrade_FixSmallCurves_swigregister(ShapeUpgrade_FixSmallCurves)

class ShapeUpgrade_RemoveInternalWires(ShapeUpgrade_Tool):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_RemoveInternalWires, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_RemoveInternalWires, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates empty constructor.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_RemoveInternalWires(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetResult(self, *args) -> "TopoDS_Shape":
        """
        Get result shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetResult(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize by a shape.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Init(self, *args)


    def GetMinArea(self) -> "Standard_Real":
        """GetMinArea(ShapeUpgrade_RemoveInternalWires self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetMinArea(self)


    def SetMinArea(self, value: 'Standard_Real') -> "void":
        """SetMinArea(ShapeUpgrade_RemoveInternalWires self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetMinArea(self, value)


    def Perform(self, *args) -> "Standard_Boolean":
        """
        Removes all internal wires having area less than area specified as minimal allowed area.

        Returns
        -------
        bool

        If specified sequence of shape contains - 1.wires then these wires will be removed if they have area less than allowed min area. 2.faces than internal wires from these faces will be removed if they have area less than allowed min area.

        Parameters
        ----------
        theSeqShapes: TopTools_SequenceOfShape

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Perform(self, *args)


    def GetRemoveFaceMode(self) -> "Standard_Boolean":
        """GetRemoveFaceMode(ShapeUpgrade_RemoveInternalWires self) -> Standard_Boolean"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_GetRemoveFaceMode(self)


    def SetRemoveFaceMode(self, value: 'Standard_Boolean') -> "void":
        """SetRemoveFaceMode(ShapeUpgrade_RemoveInternalWires self, Standard_Boolean value)"""
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_SetRemoveFaceMode(self, value)


    def RemovedFaces(self, *args) -> "TopTools_SequenceOfShape const &":
        """
        Returns sequence of removed faces.

        Returns
        -------
        TopTools_SequenceOfShape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedFaces(self, *args)


    def RemovedWires(self, *args) -> "TopTools_SequenceOfShape const &":
        """
        Returns sequence of removed faces.

        Returns
        -------
        TopTools_SequenceOfShape

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_RemovedWires(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        Queries status of last call to perform() : ok - nothing was done :done1 - internal wires were removed :done2 - small faces were removed. :fail1 - initial shape is not specified :fail2 - specified sub-shape is not belonged to inotial shape.

        Parameters
        ----------
        theStatus: ShapeExtend_Status

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_RemoveInternalWires_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_RemoveInternalWires
    __del__ = lambda self: None
ShapeUpgrade_RemoveInternalWires_swigregister = _ShapeUpgrade.ShapeUpgrade_RemoveInternalWires_swigregister
ShapeUpgrade_RemoveInternalWires_swigregister(ShapeUpgrade_RemoveInternalWires)

class ShapeUpgrade_ShapeConvertToBezier(ShapeUpgrade_ShapeDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ShapeConvertToBezier, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ShapeConvertToBezier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        Initialize by a shape.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ShapeConvertToBezier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Get2dConversion(self, *args) -> "Standard_Boolean":
        """
        Returns the 2d conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get2dConversion(self, *args)


    def Get3dCircleConversion(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_circle conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dCircleConversion(self, *args)


    def Get3dConicConversion(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_conic conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConicConversion(self, *args)


    def Get3dConversion(self, *args) -> "Standard_Boolean":
        """
        Returns the 3d conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dConversion(self, *args)


    def Get3dLineConversion(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_line conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Get3dLineConversion(self, *args)


    def GetBSplineMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_bsplinesurface conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetBSplineMode(self, *args)


    def GetExtrusionMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_surfaceoflinearextrusion conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetExtrusionMode(self, *args)


    def GetPlaneMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_pline conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetPlaneMode(self, *args)


    def GetRevolutionMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_surfaceofrevolution conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetRevolutionMode(self, *args)


    def GetSurfaceConversion(self, *args) -> "Standard_Boolean":
        """
        Returns the surface conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_GetSurfaceConversion(self, *args)


    def Set2dConversion(self, *args) -> "void":
        """
        Sets mode for conversion 2d curves to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set2dConversion(self, *args)


    def Set3dCircleConversion(self, *args) -> "void":
        """
        Sets mode for conversion geom_circle to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dCircleConversion(self, *args)


    def Set3dConicConversion(self, *args) -> "void":
        """
        Sets mode for conversion geom_conic to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConicConversion(self, *args)


    def Set3dConversion(self, *args) -> "void":
        """
        Sets mode for conversion 3d curves to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dConversion(self, *args)


    def Set3dLineConversion(self, *args) -> "void":
        """
        Sets mode for conversion geom_line to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_Set3dLineConversion(self, *args)


    def SetBSplineMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_bsplinesurface to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetBSplineMode(self, *args)


    def SetExtrusionMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_surfaceoflinearextrusion to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetExtrusionMode(self, *args)


    def SetPlaneMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_plane to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetPlaneMode(self, *args)


    def SetRevolutionMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_surfaceofrevolution to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetRevolutionMode(self, *args)


    def SetSurfaceConversion(self, *args) -> "void":
        """
        Sets mode for conversion surfaces curves to bezier basis.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_SetSurfaceConversion(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeConvertToBezier
    __del__ = lambda self: None
ShapeUpgrade_ShapeConvertToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeConvertToBezier_swigregister
ShapeUpgrade_ShapeConvertToBezier_swigregister(ShapeUpgrade_ShapeConvertToBezier)

class ShapeUpgrade_ShapeDivideAngle(ShapeUpgrade_ShapeDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ShapeDivideAngle, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ShapeDivideAngle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Parameters
        ----------
        MaxAngle: float

        Returns
        -------
        None

        Initialize by a shape.

        Parameters
        ----------
        MaxAngle: float
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideAngle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitTool(self, *args) -> "void":
        """
        Resets tool for splitting face with given angle.

        Parameters
        ----------
        MaxAngle: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_InitTool(self, *args)


    def MaxAngle(self, *args) -> "Standard_Real":
        """
        Returns maximal angle.

        Returns
        -------
        float

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_MaxAngle(self, *args)


    def SetMaxAngle(self, *args) -> "void":
        """
        Set maximal angle (calls inittool).

        Parameters
        ----------
        MaxAngle: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_SetMaxAngle(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideAngle
    __del__ = lambda self: None
ShapeUpgrade_ShapeDivideAngle_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideAngle_swigregister
ShapeUpgrade_ShapeDivideAngle_swigregister(ShapeUpgrade_ShapeDivideAngle)

class ShapeUpgrade_ShapeDivideArea(ShapeUpgrade_ShapeDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ShapeDivideArea, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ShapeDivideArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Initialize by a shape.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetMaxArea(self) -> "Standard_Real":
        """GetMaxArea(ShapeUpgrade_ShapeDivideArea self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_GetMaxArea(self)


    def SetMaxArea(self, value: 'Standard_Real') -> "void":
        """SetMaxArea(ShapeUpgrade_ShapeDivideArea self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_SetMaxArea(self, value)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideArea
    __del__ = lambda self: None
ShapeUpgrade_ShapeDivideArea_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideArea_swigregister
ShapeUpgrade_ShapeDivideArea_swigregister(ShapeUpgrade_ShapeDivideArea)

class ShapeUpgrade_ShapeDivideClosed(ShapeUpgrade_ShapeDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ShapeDivideClosed, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ShapeDivideClosed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialises tool with shape and default parameter.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideClosed(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetNbSplitPoints(self, *args) -> "void":
        """
        Sets the number of cuts applied to divide closed faces. the number of resulting faces will be num+1.

        Parameters
        ----------
        num: int

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_SetNbSplitPoints(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideClosed
    __del__ = lambda self: None
ShapeUpgrade_ShapeDivideClosed_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosed_swigregister
ShapeUpgrade_ShapeDivideClosed_swigregister(ShapeUpgrade_ShapeDivideClosed)

class ShapeUpgrade_ShapeDivideClosedEdges(ShapeUpgrade_ShapeDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ShapeDivideClosedEdges, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ShapeDivideClosedEdges, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initialises tool with shape and default parameter.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideClosedEdges(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetNbSplitPoints(self, *args) -> "void":
        """
        Sets the number of cuts applied to divide closed edges. the number of resulting faces will be num+1.

        Parameters
        ----------
        num: int

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_SetNbSplitPoints(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideClosedEdges
    __del__ = lambda self: None
ShapeUpgrade_ShapeDivideClosedEdges_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideClosedEdges_swigregister
ShapeUpgrade_ShapeDivideClosedEdges_swigregister(ShapeUpgrade_ShapeDivideClosedEdges)

class ShapeUpgrade_ShapeDivideContinuity(ShapeUpgrade_ShapeDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ShapeDivideContinuity, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_ShapeDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ShapeDivideContinuity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        Initialize by a shape.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ShapeDivideContinuity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetBoundaryCriterion(self, *args) -> "void":
        """
        Defines a criterion of continuity for the boundary (all the wires) //! the possible values are c0, g1, c1, g2, c2, c3, cn the default is c1 to respect the cas.cade shape validity. g1 and g2 are not authorized.

        Parameters
        ----------
        Criterion: GeomAbs_Shape,optional
        	default value is GeomAbs_C1

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetBoundaryCriterion(self, *args)


    def SetPCurveCriterion(self, *args) -> "void":
        """
        Defines a criterion of continuity for the boundary (all the pcurves of wires) //! the possible values are c0, g1, c1, g2, c2, c3, cn the default is c1 to respect the cas.cade shape validity. g1 and g2 are not authorized.

        Parameters
        ----------
        Criterion: GeomAbs_Shape,optional
        	default value is GeomAbs_C1

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetPCurveCriterion(self, *args)


    def SetSurfaceCriterion(self, *args) -> "void":
        """
        Defines a criterion of continuity for the boundary (all the wires) //! the possible values are c0, g1, c1, g2, c2, c3, cn the default is c1 to respect the cas.cade shape validity. g1 and g2 are not authorized.

        Parameters
        ----------
        Criterion: GeomAbs_Shape,optional
        	default value is GeomAbs_C1

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetSurfaceCriterion(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        Sets tolerance.

        Parameters
        ----------
        Tol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance(self, *args)


    def SetTolerance2d(self, *args) -> "void":
        """
        Sets tolerance.

        Parameters
        ----------
        Tol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_SetTolerance2d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ShapeDivideContinuity
    __del__ = lambda self: None
ShapeUpgrade_ShapeDivideContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_ShapeDivideContinuity_swigregister
ShapeUpgrade_ShapeDivideContinuity_swigregister(ShapeUpgrade_ShapeDivideContinuity)

class ShapeUpgrade_SplitCurve2d(ShapeUpgrade_SplitCurve):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitCurve2d, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitCurve2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetCurves(self, *args) -> "opencascade::handle< TColGeom2d_HArray1OfCurve > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColGeom2d_HArray1OfCurve>

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_GetCurves(self, *args)


    def Init(self, *args) -> "void":
        """
        Initializes with pcurve with its first and last parameters.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        None

        Initializes with pcurve with its parameters.

        Parameters
        ----------
        C: Geom2d_Curve
        First: float
        Last: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_Init(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve2d
    __del__ = lambda self: None
ShapeUpgrade_SplitCurve2d_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve2d_swigregister
ShapeUpgrade_SplitCurve2d_swigregister(ShapeUpgrade_SplitCurve2d)

class ShapeUpgrade_SplitCurve3d(ShapeUpgrade_SplitCurve):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitCurve3d, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitCurve3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitCurve3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetCurves(self, *args) -> "opencascade::handle< TColGeom_HArray1OfCurve > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColGeom_HArray1OfCurve>

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_GetCurves(self, *args)


    def Init(self, *args) -> "void":
        """
        Initializes with curve with its first and last parameters.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        None

        Initializes with curve with its parameters.

        Parameters
        ----------
        C: Geom_Curve
        First: float
        Last: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_Init(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve3d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve3d
    __del__ = lambda self: None
ShapeUpgrade_SplitCurve3d_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve3d_swigregister
ShapeUpgrade_SplitCurve3d_swigregister(ShapeUpgrade_SplitCurve3d)

class ShapeUpgrade_SplitSurfaceAngle(ShapeUpgrade_SplitSurface):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitSurfaceAngle, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitSurfaceAngle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Parameters
        ----------
        MaxAngle: float

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceAngle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def MaxAngle(self, *args) -> "Standard_Real":
        """
        Returns maximal angle.

        Returns
        -------
        float

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_MaxAngle(self, *args)


    def SetMaxAngle(self, *args) -> "void":
        """
        Set maximal angle.

        Parameters
        ----------
        MaxAngle: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_SetMaxAngle(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitSurfaceAngle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitSurfaceAngle
    __del__ = lambda self: None
ShapeUpgrade_SplitSurfaceAngle_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceAngle_swigregister
ShapeUpgrade_SplitSurfaceAngle_swigregister(ShapeUpgrade_SplitSurfaceAngle)

class ShapeUpgrade_SplitSurfaceArea(ShapeUpgrade_SplitSurface):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitSurfaceArea, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitSurfaceArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetNbParts(self) -> "Standard_Integer":
        """GetNbParts(ShapeUpgrade_SplitSurfaceArea self) -> Standard_Integer"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_GetNbParts(self)


    def SetNbParts(self, value: 'Standard_Integer') -> "void":
        """SetNbParts(ShapeUpgrade_SplitSurfaceArea self, Standard_Integer value)"""
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_SetNbParts(self, value)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitSurfaceArea_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitSurfaceArea
    __del__ = lambda self: None
ShapeUpgrade_SplitSurfaceArea_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceArea_swigregister
ShapeUpgrade_SplitSurfaceArea_swigregister(ShapeUpgrade_SplitSurfaceArea)

class ShapeUpgrade_SplitSurfaceContinuity(ShapeUpgrade_SplitSurface):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitSurfaceContinuity, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitSurfaceContinuity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitSurfaceContinuity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetCriterion(self, *args) -> "void":
        """
        Sets criterion for splitting.

        Parameters
        ----------
        Criterion: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        Sets tolerance.

        Parameters
        ----------
        Tol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_SetTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitSurfaceContinuity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitSurfaceContinuity
    __del__ = lambda self: None
ShapeUpgrade_SplitSurfaceContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitSurfaceContinuity_swigregister
ShapeUpgrade_SplitSurfaceContinuity_swigregister(ShapeUpgrade_SplitSurfaceContinuity)

class ShapeUpgrade_WireDivide(ShapeUpgrade_Tool):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_WireDivide, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_Tool]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_WireDivide, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_WireDivide(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetEdgeDivideTool(self, *args) -> "opencascade::handle< ShapeUpgrade_EdgeDivide >":
        """
        Returns tool for splitting edges.

        Returns
        -------
        opencascade::handle<ShapeUpgrade_EdgeDivide>

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetEdgeDivideTool(self, *args)


    def GetFixSmallCurveTool(self, *args) -> "opencascade::handle< ShapeUpgrade_FixSmallCurves >":
        """
        Returns tool for fixing small curves.

        Returns
        -------
        opencascade::handle<ShapeUpgrade_FixSmallCurves>

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetFixSmallCurveTool(self, *args)


    def GetTransferParamTool(self, *args) -> "opencascade::handle< ShapeAnalysis_TransferParameters >":
        """
        Returns the tool for transfer of parameters.

        Returns
        -------
        opencascade::handle<ShapeAnalysis_TransferParameters>

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_GetTransferParamTool(self, *args)


    def Init(self, *args) -> "void":
        """
        Initializes by wire and face.

        Parameters
        ----------
        W: TopoDS_Wire
        F: TopoDS_Face

        Returns
        -------
        None

        Initializes by wire and surface.

        Parameters
        ----------
        W: TopoDS_Wire
        S: Geom_Surface

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Init(self, *args)


    def Load(self, *args) -> "void":
        """
        Loads working wire.

        Parameters
        ----------
        W: TopoDS_Wire

        Returns
        -------
        None

        Creates wire of one edge and calls load for wire.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Load(self, *args)


    def Perform(self, *args) -> "void":
        """
        Computes the resulting wire by splitting all the edges according to splitting criteria. all the modifications made are recorded in context (shapebuild_reshape). this tool is applied to all edges before splitting them in order to keep sharings. if no supporting face or surface is defined, only 3d splitting criteria are used.

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Perform(self, *args)


    def SetEdgeDivideTool(self, *args) -> "void":
        """
        Sets tool for splitting edge.

        Parameters
        ----------
        edgeDivideTool: ShapeUpgrade_EdgeDivide

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeDivideTool(self, *args)


    def SetEdgeMode(self, *args) -> "void":
        """
        Sets mode for splitting 3d curves from edges. 0 - only curve 3d from free edges. 1 - only curve 3d from shared edges. 2 - all curve 3d.

        Parameters
        ----------
        EdgeMode: int

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetEdgeMode(self, *args)


    def SetFace(self, *args) -> "void":
        """
        Sets supporting surface by face.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetFace(self, *args)


    def SetFixSmallCurveTool(self, *args) -> "void":
        """
        Sets tool for fixing small curves with specified min tolerance;.

        Parameters
        ----------
        FixSmallCurvesTool: ShapeUpgrade_FixSmallCurves

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetFixSmallCurveTool(self, *args)


    def SetSplitCurve2dTool(self, *args) -> "void":
        """
        Sets the tool for splitting pcurves.

        Parameters
        ----------
        splitCurve2dTool: ShapeUpgrade_SplitCurve2d

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve2dTool(self, *args)


    def SetSplitCurve3dTool(self, *args) -> "void":
        """
        Sets the tool for splitting 3d curves.

        Parameters
        ----------
        splitCurve3dTool: ShapeUpgrade_SplitCurve3d

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSplitCurve3dTool(self, *args)


    def SetSurface(self, *args) -> "void":
        """
        Sets supporting surface.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        None

        Sets supporting surface with location.

        Parameters
        ----------
        S: Geom_Surface
        L: TopLoc_Location

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetSurface(self, *args)


    def SetTransferParamTool(self, *args) -> "void":
        """
        Sets the tool for transfer parameters between curves and pcurves.

        Parameters
        ----------
        TransferParam: ShapeAnalysis_TransferParameters

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_SetTransferParamTool(self, *args)


    def Status(self, *args) -> "Standard_Boolean":
        """
        Queries status of last call to perform() ok - no edges were splitted, wire left untouched done1 - some edges were splitted fail1 - some edges have no 3d curve (skipped) fail2 - some edges have no pcurve (skipped).

        Parameters
        ----------
        status: ShapeExtend_Status

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Status(self, *args)


    def Wire(self, *args) -> "TopoDS_Wire const":
        """
        Gives the resulting wire (equal to initial one if not done or null if not loaded).

        Returns
        -------
        TopoDS_Wire

        """
        return _ShapeUpgrade.ShapeUpgrade_WireDivide_Wire(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_WireDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_WireDivide
    __del__ = lambda self: None
ShapeUpgrade_WireDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_WireDivide_swigregister
ShapeUpgrade_WireDivide_swigregister(ShapeUpgrade_WireDivide)

class ShapeUpgrade_ClosedEdgeDivide(ShapeUpgrade_EdgeDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_EdgeDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ClosedEdgeDivide, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_EdgeDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ClosedEdgeDivide, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ClosedEdgeDivide(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ClosedEdgeDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ClosedEdgeDivide
    __del__ = lambda self: None
ShapeUpgrade_ClosedEdgeDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ClosedEdgeDivide_swigregister
ShapeUpgrade_ClosedEdgeDivide_swigregister(ShapeUpgrade_ClosedEdgeDivide)

class ShapeUpgrade_ClosedFaceDivide(ShapeUpgrade_FaceDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_FaceDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ClosedFaceDivide, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_FaceDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ClosedFaceDivide, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates empty constructor.

        Returns
        -------
        None

        Initialize by a face.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ClosedFaceDivide(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetNbSplitPoints(self, *args) -> "Standard_Integer":
        """
        Returns the number of splitting points.

        Returns
        -------
        int

        """
        return _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_GetNbSplitPoints(self, *args)


    def SetNbSplitPoints(self, *args) -> "void":
        """
        Sets the number of cutting lines by which closed face will be splitted. the resulting faces will be num+1.

        Parameters
        ----------
        num: int

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_SetNbSplitPoints(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ClosedFaceDivide_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ClosedFaceDivide
    __del__ = lambda self: None
ShapeUpgrade_ClosedFaceDivide_swigregister = _ShapeUpgrade.ShapeUpgrade_ClosedFaceDivide_swigregister
ShapeUpgrade_ClosedFaceDivide_swigregister(ShapeUpgrade_ClosedFaceDivide)

class ShapeUpgrade_ConvertCurve2dToBezier(ShapeUpgrade_SplitCurve2d):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ConvertCurve2dToBezier, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ConvertCurve2dToBezier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ConvertCurve2dToBezier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SplitParams(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal >":
        """
        Returns the list of splitted parameters in original curve parametrisation.

        Returns
        -------
        opencascade::handle<TColStd_HSequenceOfReal>

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_SplitParams(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ConvertCurve2dToBezier_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ConvertCurve2dToBezier
    __del__ = lambda self: None
ShapeUpgrade_ConvertCurve2dToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertCurve2dToBezier_swigregister
ShapeUpgrade_ConvertCurve2dToBezier_swigregister(ShapeUpgrade_ConvertCurve2dToBezier)

class ShapeUpgrade_ConvertCurve3dToBezier(ShapeUpgrade_SplitCurve3d):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve3d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_ConvertCurve3dToBezier, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve3d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_ConvertCurve3dToBezier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_ConvertCurve3dToBezier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetCircleMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_circle conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetCircleMode(self, *args)


    def GetConicMode(self, *args) -> "Standard_Boolean":
        """
        Performs converting and computes the resulting shape.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetConicMode(self, *args)


    def GetLineMode(self, *args) -> "Standard_Boolean":
        """
        Returns the geom_line conversion mode.

        Returns
        -------
        bool

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_GetLineMode(self, *args)


    def SetCircleMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_circle to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetCircleMode(self, *args)


    def SetConicMode(self, *args) -> "void":
        """
        Returns the geom_conic conversion mode.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetConicMode(self, *args)


    def SetLineMode(self, *args) -> "void":
        """
        Sets mode for conversion geom_line to bezier.

        Parameters
        ----------
        mode: bool

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SetLineMode(self, *args)


    def SplitParams(self, *args) -> "opencascade::handle< TColStd_HSequenceOfReal >":
        """
        Returns the list of splitted parameters in original curve parametrisation.

        Returns
        -------
        opencascade::handle<TColStd_HSequenceOfReal>

        """
        return _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_SplitParams(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_ConvertCurve3dToBezier_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_ConvertCurve3dToBezier
    __del__ = lambda self: None
ShapeUpgrade_ConvertCurve3dToBezier_swigregister = _ShapeUpgrade.ShapeUpgrade_ConvertCurve3dToBezier_swigregister
ShapeUpgrade_ConvertCurve3dToBezier_swigregister(ShapeUpgrade_ConvertCurve3dToBezier)

class ShapeUpgrade_FaceDivideArea(ShapeUpgrade_FaceDivide):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_FaceDivide]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_FaceDivideArea, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_FaceDivide]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_FaceDivideArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates empty constructor.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_FaceDivideArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetMaxArea(self) -> "Standard_Real":
        """GetMaxArea(ShapeUpgrade_FaceDivideArea self) -> Standard_Real"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_GetMaxArea(self)


    def SetMaxArea(self, value: 'Standard_Real') -> "void":
        """SetMaxArea(ShapeUpgrade_FaceDivideArea self, Standard_Real value)"""
        return _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_SetMaxArea(self, value)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_FaceDivideArea_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_FaceDivideArea
    __del__ = lambda self: None
ShapeUpgrade_FaceDivideArea_swigregister = _ShapeUpgrade.ShapeUpgrade_FaceDivideArea_swigregister
ShapeUpgrade_FaceDivideArea_swigregister(ShapeUpgrade_FaceDivideArea)

class ShapeUpgrade_FixSmallBezierCurves(ShapeUpgrade_FixSmallCurves):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_FixSmallCurves]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_FixSmallBezierCurves, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_FixSmallCurves]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_FixSmallBezierCurves, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_FixSmallBezierCurves(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_FixSmallBezierCurves_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_FixSmallBezierCurves
    __del__ = lambda self: None
ShapeUpgrade_FixSmallBezierCurves_swigregister = _ShapeUpgrade.ShapeUpgrade_FixSmallBezierCurves_swigregister
ShapeUpgrade_FixSmallBezierCurves_swigregister(ShapeUpgrade_FixSmallBezierCurves)

class ShapeUpgrade_SplitCurve2dContinuity(ShapeUpgrade_SplitCurve2d):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitCurve2dContinuity, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitCurve2dContinuity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitCurve2dContinuity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetCriterion(self, *args) -> "void":
        """
        Sets criterion for splitting.

        Parameters
        ----------
        Criterion: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        Sets tolerance.

        Parameters
        ----------
        Tol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_SetTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve2dContinuity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve2dContinuity
    __del__ = lambda self: None
ShapeUpgrade_SplitCurve2dContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve2dContinuity_swigregister
ShapeUpgrade_SplitCurve2dContinuity_swigregister(ShapeUpgrade_SplitCurve2dContinuity)

class ShapeUpgrade_SplitCurve3dContinuity(ShapeUpgrade_SplitCurve3d):
    __swig_setmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve3d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUpgrade_SplitCurve3dContinuity, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeUpgrade_SplitCurve3d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUpgrade_SplitCurve3dContinuity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _ShapeUpgrade.new_ShapeUpgrade_SplitCurve3dContinuity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetCurve(self, *args) -> "opencascade::handle< Geom_Curve > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_GetCurve(self, *args)


    def SetCriterion(self, *args) -> "void":
        """
        Sets criterion for splitting.

        Parameters
        ----------
        Criterion: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetCriterion(self, *args)


    def SetTolerance(self, *args) -> "void":
        """
        Sets tolerance.

        Parameters
        ----------
        Tol: float

        Returns
        -------
        None

        """
        return _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_SetTolerance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeUpgrade_SplitCurve3dContinuity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeUpgrade.delete_ShapeUpgrade_SplitCurve3dContinuity
    __del__ = lambda self: None
ShapeUpgrade_SplitCurve3dContinuity_swigregister = _ShapeUpgrade.ShapeUpgrade_SplitCurve3dContinuity_swigregister
ShapeUpgrade_SplitCurve3dContinuity_swigregister(ShapeUpgrade_SplitCurve3dContinuity)



# This file is compatible with both classic and new-style classes.


