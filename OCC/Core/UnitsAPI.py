# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
UnitsAPI module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_unitsapi.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_UnitsAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UnitsAPI')
    _UnitsAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UnitsAPI', [dirname(__file__)])
        except ImportError:
            import _UnitsAPI
            return _UnitsAPI
        try:
            _mod = imp.load_module('_UnitsAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UnitsAPI = swig_import_helper()
    del swig_import_helper
else:
    import _UnitsAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UnitsAPI.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _UnitsAPI.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _UnitsAPI.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _UnitsAPI.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _UnitsAPI.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _UnitsAPI.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _UnitsAPI.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _UnitsAPI.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _UnitsAPI.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _UnitsAPI.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _UnitsAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _UnitsAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _UnitsAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _UnitsAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _UnitsAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _UnitsAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _UnitsAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _UnitsAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _UnitsAPI.process_exception(error, method_name, class_name)
process_exception = _UnitsAPI.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Units
import OCC.Core.TCollection
import OCC.Core.TColStd

from enum import IntEnum
from OCC.Core.Exception import *

UnitsAPI_DEFAULT = _UnitsAPI.UnitsAPI_DEFAULT
UnitsAPI_SI = _UnitsAPI.UnitsAPI_SI
UnitsAPI_MDTV = _UnitsAPI.UnitsAPI_MDTV


class UnitsAPI_SystemUnits(IntEnum):
	UnitsAPI_DEFAULT = 0
	UnitsAPI_SI = 1
	UnitsAPI_MDTV = 2
UnitsAPI_DEFAULT = UnitsAPI_SystemUnits.UnitsAPI_DEFAULT
UnitsAPI_SI = UnitsAPI_SystemUnits.UnitsAPI_SI
UnitsAPI_MDTV = UnitsAPI_SystemUnits.UnitsAPI_MDTV

class unitsapi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unitsapi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unitsapi, name)
    __repr__ = _swig_repr

    def AnyFromLS(*args) -> "Standard_Real":
        """
        Converts the local system units value to the local unit value. example: anyfromls(25.4,'in.') returns 1. if the localsystem is mdtv. note: aunit is also used to identify the type of physical quantity to convert.

        Parameters
        ----------
        aData: float
        aUnit: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_AnyFromLS(*args)

    AnyFromLS = staticmethod(AnyFromLS)

    def AnyFromSI(*args) -> "Standard_Real":
        """
        Converts the si system units value to the local unit value. example: anyfromsi(0.0254,'in.') returns 0.001 note: aunit is also used to identify the type of physical quantity to convert.

        Parameters
        ----------
        aData: float
        aUnit: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_AnyFromSI(*args)

    AnyFromSI = staticmethod(AnyFromSI)

    def AnyToAny(*args) -> "Standard_Real":
        """
        Converts the local unit value to another local unit value. example: anytoany(0.0254,'in.','millimeter') returns 1. ;.

        Parameters
        ----------
        aData: float
        aUnit1: char *
        aUnit2: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_AnyToAny(*args)

    AnyToAny = staticmethod(AnyToAny)

    def AnyToLS(*args) -> "Standard_Real":
        """
        Converts the local unit value to the local system units value. example: anytols(1.,'in.') returns 25.4 if the localsystem is mdtv.

        Parameters
        ----------
        aData: float
        aUnit: char *

        Returns
        -------
        float

        Converts the local unit value to the local system units value. and gives the associated dimension of the unit.

        Parameters
        ----------
        aData: float
        aUnit: char *
        aDim: Units_Dimensions

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_AnyToLS(*args)

    AnyToLS = staticmethod(AnyToLS)

    def AnyToSI(*args) -> "Standard_Real":
        """
        Converts the local unit value to the si system units value. example: anytosi(1.,'in.') returns 0.0254.

        Parameters
        ----------
        aData: float
        aUnit: char *

        Returns
        -------
        float

        Converts the local unit value to the si system units value. and gives the associated dimension of the unit.

        Parameters
        ----------
        aData: float
        aUnit: char *
        aDim: Units_Dimensions

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_AnyToSI(*args)

    AnyToSI = staticmethod(AnyToSI)

    def Check(*args) -> "Standard_Boolean":
        """
        Checks the coherence between the quantity <aquantity> and the unit <aunits> in the current system and returns false when it's wrong.

        Parameters
        ----------
        aQuantity: char *
        aUnit: char *

        Returns
        -------
        bool

        """
        return _UnitsAPI.unitsapi_Check(*args)

    Check = staticmethod(Check)

    def CurrentFromAny(*args) -> "Standard_Real":
        """
        Converts the adata value expressed in the unit aunit, into the current unit for the working environment, as defined for the physical quantity aquantity by the last call to the setcurrentunit function.

        Parameters
        ----------
        aData: float
        aQuantity: char *
        aUnit: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_CurrentFromAny(*args)

    CurrentFromAny = staticmethod(CurrentFromAny)

    def CurrentFromLS(*args) -> "Standard_Real":
        """
        Converts the local system units value to the current unit value. example: currentfromls(1000.,'length') returns 1. if current length unit is meter and localsystem is mdtv.

        Parameters
        ----------
        aData: float
        aQuantity: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_CurrentFromLS(*args)

    CurrentFromLS = staticmethod(CurrentFromLS)

    def CurrentFromSI(*args) -> "Standard_Real":
        """
        Converts the si system units value to the current unit value. example: currentfromsi(0.001,'length') returns 1 if current length unit is millimeter.

        Parameters
        ----------
        aData: float
        aQuantity: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_CurrentFromSI(*args)

    CurrentFromSI = staticmethod(CurrentFromSI)

    def CurrentToAny(*args) -> "Standard_Real":
        """
        Converts the adata value expressed in the current unit for the working environment, as defined for the physical quantity aquantity by the last call to the setcurrentunit function, into the unit aunit.

        Parameters
        ----------
        aData: float
        aQuantity: char *
        aUnit: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_CurrentToAny(*args)

    CurrentToAny = staticmethod(CurrentToAny)

    def CurrentToLS(*args) -> "Standard_Real":
        """
        Converts the current unit value to the local system units value. example: currenttols(1.,'length') returns 1000. if the current length unit is meter and localsystem is mdtv.

        Parameters
        ----------
        aData: float
        aQuantity: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_CurrentToLS(*args)

    CurrentToLS = staticmethod(CurrentToLS)

    def CurrentToSI(*args) -> "Standard_Real":
        """
        Converts the current unit value to the si system units value. example: currenttosi(1.,'length') returns 0.001 if current length unit is millimeter.

        Parameters
        ----------
        aData: float
        aQuantity: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_CurrentToSI(*args)

    CurrentToSI = staticmethod(CurrentToSI)

    def CurrentUnit(*args) -> "char const *":
        """
        Returns the current unit dimension <aunit> from the unit quantity <aquantity>.

        Parameters
        ----------
        aQuantity: char *

        Returns
        -------
        char *

        """
        return _UnitsAPI.unitsapi_CurrentUnit(*args)

    CurrentUnit = staticmethod(CurrentUnit)

    def DimensionAmountOfSubstance(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionAmountOfSubstance(*args)

    DimensionAmountOfSubstance = staticmethod(DimensionAmountOfSubstance)

    def DimensionElectricCurrent(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionElectricCurrent(*args)

    DimensionElectricCurrent = staticmethod(DimensionElectricCurrent)

    def DimensionLength(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionLength(*args)

    DimensionLength = staticmethod(DimensionLength)

    def DimensionLess(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionLess(*args)

    DimensionLess = staticmethod(DimensionLess)

    def DimensionLuminousIntensity(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionLuminousIntensity(*args)

    DimensionLuminousIntensity = staticmethod(DimensionLuminousIntensity)

    def DimensionMass(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionMass(*args)

    DimensionMass = staticmethod(DimensionMass)

    def DimensionPlaneAngle(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionPlaneAngle(*args)

    DimensionPlaneAngle = staticmethod(DimensionPlaneAngle)

    def DimensionSolidAngle(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        Returns the basic dimensions.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionSolidAngle(*args)

    DimensionSolidAngle = staticmethod(DimensionSolidAngle)

    def DimensionThermodynamicTemperature(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionThermodynamicTemperature(*args)

    DimensionThermodynamicTemperature = staticmethod(DimensionThermodynamicTemperature)

    def DimensionTime(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_DimensionTime(*args)

    DimensionTime = staticmethod(DimensionTime)

    def Dimensions(*args) -> "opencascade::handle< Units_Dimensions >":
        """
        Return the dimension associated to the quantity.

        Parameters
        ----------
        aQuantity: char *

        Returns
        -------
        opencascade::handle<Units_Dimensions>

        """
        return _UnitsAPI.unitsapi_Dimensions(*args)

    Dimensions = staticmethod(Dimensions)

    def LSToSI(*args) -> "Standard_Real":
        """
        Converts the local system units value to the si system unit value. example: lstosi(1.,'length') returns 0.001 if the local system length unit is millimeter.

        Parameters
        ----------
        aData: float
        aQuantity: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_LSToSI(*args)

    LSToSI = staticmethod(LSToSI)

    def LocalSystem(*args) -> "UnitsAPI_SystemUnits":
        """
        Returns the current local system units.

        Returns
        -------
        UnitsAPI_SystemUnits

        """
        return _UnitsAPI.unitsapi_LocalSystem(*args)

    LocalSystem = staticmethod(LocalSystem)

    def Reload(*args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _UnitsAPI.unitsapi_Reload(*args)

    Reload = staticmethod(Reload)

    def SIToLS(*args) -> "Standard_Real":
        """
        Converts the si system unit value to the local system units value. example: sitols(1.,'length') returns 1000. if the local system length unit is millimeter.

        Parameters
        ----------
        aData: float
        aQuantity: char *

        Returns
        -------
        float

        """
        return _UnitsAPI.unitsapi_SIToLS(*args)

    SIToLS = staticmethod(SIToLS)

    def Save(*args) -> "void":
        """
        Saves the units in the file .currentunits of the directory pointed by the csf_currentunitsuserdefaults environment variable.

        Returns
        -------
        None

        """
        return _UnitsAPI.unitsapi_Save(*args)

    Save = staticmethod(Save)

    def SetCurrentUnit(*args) -> "void":
        """
        Sets the current unit dimension <aunit> to the unit quantity <aquantity>. example: setcurrentunit('length','millimeter').

        Parameters
        ----------
        aQuantity: char *
        aUnit: char *

        Returns
        -------
        None

        """
        return _UnitsAPI.unitsapi_SetCurrentUnit(*args)

    SetCurrentUnit = staticmethod(SetCurrentUnit)

    def SetLocalSystem(*args) -> "void":
        """
        Sets the local system units. example: setlocalsystem(unitsapi_mdtv).

        Parameters
        ----------
        aSystemUnit: UnitsAPI_SystemUnits,optional
        	default value is UnitsAPI_SI

        Returns
        -------
        None

        """
        return _UnitsAPI.unitsapi_SetLocalSystem(*args)

    SetLocalSystem = staticmethod(SetLocalSystem)

    __repr__ = _dumps_object


    def __init__(self):
        this = _UnitsAPI.new_unitsapi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UnitsAPI.delete_unitsapi
    __del__ = lambda self: None
unitsapi_swigregister = _UnitsAPI.unitsapi_swigregister
unitsapi_swigregister(unitsapi)

def unitsapi_AnyFromLS(*args) -> "Standard_Real":
    """
    Converts the local system units value to the local unit value. example: anyfromls(25.4,'in.') returns 1. if the localsystem is mdtv. note: aunit is also used to identify the type of physical quantity to convert.

    Parameters
    ----------
    aData: float
    aUnit: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_AnyFromLS(*args)

def unitsapi_AnyFromSI(*args) -> "Standard_Real":
    """
    Converts the si system units value to the local unit value. example: anyfromsi(0.0254,'in.') returns 0.001 note: aunit is also used to identify the type of physical quantity to convert.

    Parameters
    ----------
    aData: float
    aUnit: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_AnyFromSI(*args)

def unitsapi_AnyToAny(*args) -> "Standard_Real":
    """
    Converts the local unit value to another local unit value. example: anytoany(0.0254,'in.','millimeter') returns 1. ;.

    Parameters
    ----------
    aData: float
    aUnit1: char *
    aUnit2: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_AnyToAny(*args)

def unitsapi_AnyToLS(*args) -> "Standard_Real":
    """
    Converts the local unit value to the local system units value. example: anytols(1.,'in.') returns 25.4 if the localsystem is mdtv.

    Parameters
    ----------
    aData: float
    aUnit: char *

    Returns
    -------
    float

    Converts the local unit value to the local system units value. and gives the associated dimension of the unit.

    Parameters
    ----------
    aData: float
    aUnit: char *
    aDim: Units_Dimensions

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_AnyToLS(*args)

def unitsapi_AnyToSI(*args) -> "Standard_Real":
    """
    Converts the local unit value to the si system units value. example: anytosi(1.,'in.') returns 0.0254.

    Parameters
    ----------
    aData: float
    aUnit: char *

    Returns
    -------
    float

    Converts the local unit value to the si system units value. and gives the associated dimension of the unit.

    Parameters
    ----------
    aData: float
    aUnit: char *
    aDim: Units_Dimensions

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_AnyToSI(*args)

def unitsapi_Check(*args) -> "Standard_Boolean":
    """
    Checks the coherence between the quantity <aquantity> and the unit <aunits> in the current system and returns false when it's wrong.

    Parameters
    ----------
    aQuantity: char *
    aUnit: char *

    Returns
    -------
    bool

    """
    return _UnitsAPI.unitsapi_Check(*args)

def unitsapi_CurrentFromAny(*args) -> "Standard_Real":
    """
    Converts the adata value expressed in the unit aunit, into the current unit for the working environment, as defined for the physical quantity aquantity by the last call to the setcurrentunit function.

    Parameters
    ----------
    aData: float
    aQuantity: char *
    aUnit: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_CurrentFromAny(*args)

def unitsapi_CurrentFromLS(*args) -> "Standard_Real":
    """
    Converts the local system units value to the current unit value. example: currentfromls(1000.,'length') returns 1. if current length unit is meter and localsystem is mdtv.

    Parameters
    ----------
    aData: float
    aQuantity: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_CurrentFromLS(*args)

def unitsapi_CurrentFromSI(*args) -> "Standard_Real":
    """
    Converts the si system units value to the current unit value. example: currentfromsi(0.001,'length') returns 1 if current length unit is millimeter.

    Parameters
    ----------
    aData: float
    aQuantity: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_CurrentFromSI(*args)

def unitsapi_CurrentToAny(*args) -> "Standard_Real":
    """
    Converts the adata value expressed in the current unit for the working environment, as defined for the physical quantity aquantity by the last call to the setcurrentunit function, into the unit aunit.

    Parameters
    ----------
    aData: float
    aQuantity: char *
    aUnit: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_CurrentToAny(*args)

def unitsapi_CurrentToLS(*args) -> "Standard_Real":
    """
    Converts the current unit value to the local system units value. example: currenttols(1.,'length') returns 1000. if the current length unit is meter and localsystem is mdtv.

    Parameters
    ----------
    aData: float
    aQuantity: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_CurrentToLS(*args)

def unitsapi_CurrentToSI(*args) -> "Standard_Real":
    """
    Converts the current unit value to the si system units value. example: currenttosi(1.,'length') returns 0.001 if current length unit is millimeter.

    Parameters
    ----------
    aData: float
    aQuantity: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_CurrentToSI(*args)

def unitsapi_CurrentUnit(*args) -> "char const *":
    """
    Returns the current unit dimension <aunit> from the unit quantity <aquantity>.

    Parameters
    ----------
    aQuantity: char *

    Returns
    -------
    char *

    """
    return _UnitsAPI.unitsapi_CurrentUnit(*args)

def unitsapi_DimensionAmountOfSubstance(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionAmountOfSubstance(*args)

def unitsapi_DimensionElectricCurrent(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionElectricCurrent(*args)

def unitsapi_DimensionLength(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionLength(*args)

def unitsapi_DimensionLess(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionLess(*args)

def unitsapi_DimensionLuminousIntensity(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionLuminousIntensity(*args)

def unitsapi_DimensionMass(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionMass(*args)

def unitsapi_DimensionPlaneAngle(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionPlaneAngle(*args)

def unitsapi_DimensionSolidAngle(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    Returns the basic dimensions.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionSolidAngle(*args)

def unitsapi_DimensionThermodynamicTemperature(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionThermodynamicTemperature(*args)

def unitsapi_DimensionTime(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    No available documentation.

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_DimensionTime(*args)

def unitsapi_Dimensions(*args) -> "opencascade::handle< Units_Dimensions >":
    """
    Return the dimension associated to the quantity.

    Parameters
    ----------
    aQuantity: char *

    Returns
    -------
    opencascade::handle<Units_Dimensions>

    """
    return _UnitsAPI.unitsapi_Dimensions(*args)

def unitsapi_LSToSI(*args) -> "Standard_Real":
    """
    Converts the local system units value to the si system unit value. example: lstosi(1.,'length') returns 0.001 if the local system length unit is millimeter.

    Parameters
    ----------
    aData: float
    aQuantity: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_LSToSI(*args)

def unitsapi_LocalSystem(*args) -> "UnitsAPI_SystemUnits":
    """
    Returns the current local system units.

    Returns
    -------
    UnitsAPI_SystemUnits

    """
    return _UnitsAPI.unitsapi_LocalSystem(*args)

def unitsapi_Reload(*args) -> "void":
    """
    No available documentation.

    Returns
    -------
    None

    """
    return _UnitsAPI.unitsapi_Reload(*args)

def unitsapi_SIToLS(*args) -> "Standard_Real":
    """
    Converts the si system unit value to the local system units value. example: sitols(1.,'length') returns 1000. if the local system length unit is millimeter.

    Parameters
    ----------
    aData: float
    aQuantity: char *

    Returns
    -------
    float

    """
    return _UnitsAPI.unitsapi_SIToLS(*args)

def unitsapi_Save(*args) -> "void":
    """
    Saves the units in the file .currentunits of the directory pointed by the csf_currentunitsuserdefaults environment variable.

    Returns
    -------
    None

    """
    return _UnitsAPI.unitsapi_Save(*args)

def unitsapi_SetCurrentUnit(*args) -> "void":
    """
    Sets the current unit dimension <aunit> to the unit quantity <aquantity>. example: setcurrentunit('length','millimeter').

    Parameters
    ----------
    aQuantity: char *
    aUnit: char *

    Returns
    -------
    None

    """
    return _UnitsAPI.unitsapi_SetCurrentUnit(*args)

def unitsapi_SetLocalSystem(*args) -> "void":
    """
    Sets the local system units. example: setlocalsystem(unitsapi_mdtv).

    Parameters
    ----------
    aSystemUnit: UnitsAPI_SystemUnits,optional
    	default value is UnitsAPI_SI

    Returns
    -------
    None

    """
    return _UnitsAPI.unitsapi_SetLocalSystem(*args)



# This file is compatible with both classic and new-style classes.


