# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
TopClass module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_topclass.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TopClass
else:
    import _TopClass

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopClass.delete_SwigPyIterator

    def value(self):
        return _TopClass.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopClass.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopClass.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopClass.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopClass.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopClass.SwigPyIterator_copy(self)

    def next(self):
        return _TopClass.SwigPyIterator_next(self)

    def __next__(self):
        return _TopClass.SwigPyIterator___next__(self)

    def previous(self):
        return _TopClass.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopClass.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopClass.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopClass.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopClass.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopClass.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopClass.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopClass.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TopClass:
_TopClass.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _TopClass.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp

from enum import IntEnum
from OCC.Core.Exception import *



class TopClass_SolidExplorer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CurrentFace(self, *args):
        r"""
        Return
        -------
        TopoDS_Face

        Description
        -----------
        Returns the current face.

        """
        return _TopClass.TopClass_SolidExplorer_CurrentFace(self, *args)

    def InitFace(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Starts an exploration of the faces.

        """
        return _TopClass.TopClass_SolidExplorer_InitFace(self, *args)

    def InitShell(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Starts an exploration of the shells.

        """
        return _TopClass.TopClass_SolidExplorer_InitShell(self, *args)

    def MoreFaces(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a current face.

        """
        return _TopClass.TopClass_SolidExplorer_MoreFaces(self, *args)

    def MoreShells(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a current shell.

        """
        return _TopClass.TopClass_SolidExplorer_MoreShells(self, *args)

    def NextFace(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Sets the explorer to the next face and returns false if there are no more wires.

        """
        return _TopClass.TopClass_SolidExplorer_NextFace(self, *args)

    def NextShell(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Sets the explorer to the next shell and returns false if there are no more wires.

        """
        return _TopClass.TopClass_SolidExplorer_NextShell(self, *args)

    def OtherSegment(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt
        L: gp_Lin

        Return
        -------
        Par: float

        Description
        -----------
        Returns in <l>, <par> a segment having at least one intersection with the shape boundary to compute intersections. //! the first call to this method returns a line which point to a point of the first face of the shape. the second call provide a line to the second face and so on. //! if the method is called n times on a shape with f faces (n>f) the line point to other points on the face 1,2,3 ... n.

        """
        return _TopClass.TopClass_SolidExplorer_OtherSegment(self, *args)

    def Reject(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt

        Return
        -------
        bool

        Description
        -----------
        Should return true if the point is outside a bounding volume of the shape.

        """
        return _TopClass.TopClass_SolidExplorer_Reject(self, *args)

    def RejectFace(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin
        Par: float

        Return
        -------
        bool

        Description
        -----------
        Returns true if the face bounding volume does not intersect the segment.

        """
        return _TopClass.TopClass_SolidExplorer_RejectFace(self, *args)

    def RejectShell(self, *args):
        r"""

        Parameters
        ----------
        L: gp_Lin
        Par: float

        Return
        -------
        bool

        Description
        -----------
        Returns true if the shell bounding volume does not intersect the segment.

        """
        return _TopClass.TopClass_SolidExplorer_RejectShell(self, *args)

    def Segment(self, *args):
        r"""

        Parameters
        ----------
        P: gp_Pnt
        L: gp_Lin

        Return
        -------
        Par: float

        Description
        -----------
        Returns in <l>, <par> a segment having at least one intersection with the shape boundary to compute intersections.

        """
        return _TopClass.TopClass_SolidExplorer_Segment(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopClass.delete_TopClass_SolidExplorer

# Register TopClass_SolidExplorer in _TopClass:
_TopClass.TopClass_SolidExplorer_swigregister(TopClass_SolidExplorer)



