# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopClass module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topclass.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopClass')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopClass')
    _TopClass = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopClass', [dirname(__file__)])
        except ImportError:
            import _TopClass
            return _TopClass
        try:
            _mod = imp.load_module('_TopClass', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopClass = swig_import_helper()
    del swig_import_helper
else:
    import _TopClass
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopClass.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TopClass.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopClass.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopClass.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TopClass.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TopClass.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TopClass.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TopClass.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TopClass.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TopClass.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopClass.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TopClass.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TopClass.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopClass.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopClass.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopClass.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TopClass.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopClass.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopClass.process_exception(error, method_name, class_name)
process_exception = _TopClass.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp

from enum import IntEnum
from OCC.Core.Exception import *



class TopClass_SolidExplorer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopClass_SolidExplorer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopClass_SolidExplorer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CurrentFace(self, *args) -> "TopoDS_Face":
        """
        Returns the current face.

        Returns
        -------
        TopoDS_Face

        """
        return _TopClass.TopClass_SolidExplorer_CurrentFace(self, *args)


    def InitFace(self, *args) -> "void":
        """
        Starts an exploration of the faces.

        Returns
        -------
        None

        """
        return _TopClass.TopClass_SolidExplorer_InitFace(self, *args)


    def InitShell(self, *args) -> "void":
        """
        Starts an exploration of the shells.

        Returns
        -------
        None

        """
        return _TopClass.TopClass_SolidExplorer_InitShell(self, *args)


    def MoreFaces(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a current face.

        Returns
        -------
        bool

        """
        return _TopClass.TopClass_SolidExplorer_MoreFaces(self, *args)


    def MoreShells(self, *args) -> "Standard_Boolean":
        """
        Returns true if there is a current shell.

        Returns
        -------
        bool

        """
        return _TopClass.TopClass_SolidExplorer_MoreShells(self, *args)


    def NextFace(self, *args) -> "void":
        """
        Sets the explorer to the next face and returns false if there are no more wires.

        Returns
        -------
        None

        """
        return _TopClass.TopClass_SolidExplorer_NextFace(self, *args)


    def NextShell(self, *args) -> "void":
        """
        Sets the explorer to the next shell and returns false if there are no more wires.

        Returns
        -------
        None

        """
        return _TopClass.TopClass_SolidExplorer_NextShell(self, *args)


    def OtherSegment(self, *args) -> "void":
        """
        Returns in <l>, <par> a segment having at least one intersection with the shape boundary to compute intersections. //! the first call to this method returns a line which point to a point of the first face of the shape. the second call provide a line to the second face and so on. //! if the method is called n times on a shape with f faces (n>f) the line point to other points on the face 1,2,3 ... n.

        Parameters
        ----------
        P: gp_Pnt
        L: gp_Lin

        Returns
        -------
        Par: float

        """
        return _TopClass.TopClass_SolidExplorer_OtherSegment(self, *args)


    def Reject(self, *args) -> "Standard_Boolean":
        """
        Should return true if the point is outside a bounding volume of the shape.

        Parameters
        ----------
        P: gp_Pnt

        Returns
        -------
        bool

        """
        return _TopClass.TopClass_SolidExplorer_Reject(self, *args)


    def RejectFace(self, *args) -> "Standard_Boolean":
        """
        Returns true if the face bounding volume does not intersect the segment.

        Parameters
        ----------
        L: gp_Lin
        Par: float

        Returns
        -------
        bool

        """
        return _TopClass.TopClass_SolidExplorer_RejectFace(self, *args)


    def RejectShell(self, *args) -> "Standard_Boolean":
        """
        Returns true if the shell bounding volume does not intersect the segment.

        Parameters
        ----------
        L: gp_Lin
        Par: float

        Returns
        -------
        bool

        """
        return _TopClass.TopClass_SolidExplorer_RejectShell(self, *args)


    def Segment(self, *args) -> "void":
        """
        Returns in <l>, <par> a segment having at least one intersection with the shape boundary to compute intersections.

        Parameters
        ----------
        P: gp_Pnt
        L: gp_Lin

        Returns
        -------
        Par: float

        """
        return _TopClass.TopClass_SolidExplorer_Segment(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopClass.delete_TopClass_SolidExplorer
    __del__ = lambda self: None
TopClass_SolidExplorer_swigregister = _TopClass.TopClass_SolidExplorer_swigregister
TopClass_SolidExplorer_swigregister(TopClass_SolidExplorer)



# This file is compatible with both classic and new-style classes.


