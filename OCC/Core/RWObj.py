# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWObj module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwobj.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWObj')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWObj')
    _RWObj = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWObj', [dirname(__file__)])
        except ImportError:
            import _RWObj
            return _RWObj
        try:
            _mod = imp.load_module('_RWObj', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWObj = swig_import_helper()
    del swig_import_helper
else:
    import _RWObj
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWObj.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _RWObj.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWObj.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWObj.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _RWObj.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _RWObj.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _RWObj.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _RWObj.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _RWObj.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _RWObj.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWObj.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _RWObj.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _RWObj.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWObj.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWObj.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWObj.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _RWObj.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWObj.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWObj.process_exception(error, method_name, class_name)
process_exception = _RWObj.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.Poly
import OCC.Core.gp
import OCC.Core.TColgp
import OCC.Core.TShort
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.RWMesh
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.Aspect
import OCC.Core.Image
import OCC.Core.Bnd
import OCC.Core.Media
import OCC.Core.XCAFPrs
import OCC.Core.AIS
import OCC.Core.SelectMgr
import OCC.Core.Select3D
import OCC.Core.SelectBasics
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.PrsMgr
import OCC.Core.Prs3d
import OCC.Core.V3d
import OCC.Core.StdSelect
import OCC.Core.XCAFDoc
import OCC.Core.TDataStd
import OCC.Core.XCAFDimTolObjects
import OCC.Core.XCAFNoteObjects
import OCC.Core.TopTools
import OCC.Core.XCAFView
import OCC.Core.TPrsStd
import OCC.Core.TDataXtd
import OCC.Core.TNaming

from enum import IntEnum
from OCC.Core.Exception import *

RWObj_SubMeshReason_NewObject = _RWObj.RWObj_SubMeshReason_NewObject
RWObj_SubMeshReason_NewGroup = _RWObj.RWObj_SubMeshReason_NewGroup
RWObj_SubMeshReason_NewMaterial = _RWObj.RWObj_SubMeshReason_NewMaterial
RWObj_SubMeshReason_NewSmoothGroup = _RWObj.RWObj_SubMeshReason_NewSmoothGroup


class RWObj_SubMeshReason(IntEnum):
	RWObj_SubMeshReason_NewObject = 0
	RWObj_SubMeshReason_NewGroup = 1
	RWObj_SubMeshReason_NewMaterial = 2
	RWObj_SubMeshReason_NewSmoothGroup = 3
RWObj_SubMeshReason_NewObject = RWObj_SubMeshReason.RWObj_SubMeshReason_NewObject
RWObj_SubMeshReason_NewGroup = RWObj_SubMeshReason.RWObj_SubMeshReason_NewGroup
RWObj_SubMeshReason_NewMaterial = RWObj_SubMeshReason.RWObj_SubMeshReason_NewMaterial
RWObj_SubMeshReason_NewSmoothGroup = RWObj_SubMeshReason.RWObj_SubMeshReason_NewSmoothGroup


def Handle_RWObj_Reader_Create() -> "opencascade::handle< RWObj_Reader >":
    return _RWObj.Handle_RWObj_Reader_Create()
Handle_RWObj_Reader_Create = _RWObj.Handle_RWObj_Reader_Create

def Handle_RWObj_Reader_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWObj_Reader >":
    return _RWObj.Handle_RWObj_Reader_DownCast(t)
Handle_RWObj_Reader_DownCast = _RWObj.Handle_RWObj_Reader_DownCast

def Handle_RWObj_Reader_IsNull(t: 'opencascade::handle< RWObj_Reader > const &') -> "bool":
    return _RWObj.Handle_RWObj_Reader_IsNull(t)
Handle_RWObj_Reader_IsNull = _RWObj.Handle_RWObj_Reader_IsNull

def Handle_RWObj_CafReader_Create() -> "opencascade::handle< RWObj_CafReader >":
    return _RWObj.Handle_RWObj_CafReader_Create()
Handle_RWObj_CafReader_Create = _RWObj.Handle_RWObj_CafReader_Create

def Handle_RWObj_CafReader_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWObj_CafReader >":
    return _RWObj.Handle_RWObj_CafReader_DownCast(t)
Handle_RWObj_CafReader_DownCast = _RWObj.Handle_RWObj_CafReader_DownCast

def Handle_RWObj_CafReader_IsNull(t: 'opencascade::handle< RWObj_CafReader > const &') -> "bool":
    return _RWObj.Handle_RWObj_CafReader_IsNull(t)
Handle_RWObj_CafReader_IsNull = _RWObj.Handle_RWObj_CafReader_IsNull

def Handle_RWObj_TriangulationReader_Create() -> "opencascade::handle< RWObj_TriangulationReader >":
    return _RWObj.Handle_RWObj_TriangulationReader_Create()
Handle_RWObj_TriangulationReader_Create = _RWObj.Handle_RWObj_TriangulationReader_Create

def Handle_RWObj_TriangulationReader_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< RWObj_TriangulationReader >":
    return _RWObj.Handle_RWObj_TriangulationReader_DownCast(t)
Handle_RWObj_TriangulationReader_DownCast = _RWObj.Handle_RWObj_TriangulationReader_DownCast

def Handle_RWObj_TriangulationReader_IsNull(t: 'opencascade::handle< RWObj_TriangulationReader > const &') -> "bool":
    return _RWObj.Handle_RWObj_TriangulationReader_IsNull(t)
Handle_RWObj_TriangulationReader_IsNull = _RWObj.Handle_RWObj_TriangulationReader_IsNull
class rwobj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rwobj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rwobj, name)
    __repr__ = _swig_repr

    def ReadFile(*args) -> "opencascade::handle< Poly_Triangulation >":
        """
        Read specified obj file and returns its content as triangulation. in case of error, returns null handle.

        Parameters
        ----------
        theFile: char *
        aProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        opencascade::handle<Poly_Triangulation>

        """
        return _RWObj.rwobj_ReadFile(*args)

    ReadFile = staticmethod(ReadFile)

    __repr__ = _dumps_object


    def __init__(self):
        this = _RWObj.new_rwobj()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWObj.delete_rwobj
    __del__ = lambda self: None
rwobj_swigregister = _RWObj.rwobj_swigregister
rwobj_swigregister(rwobj)

def rwobj_ReadFile(*args) -> "opencascade::handle< Poly_Triangulation >":
    """
    Read specified obj file and returns its content as triangulation. in case of error, returns null handle.

    Parameters
    ----------
    theFile: char *
    aProgress: Message_ProgressRange,optional
    	default value is Message_ProgressRange()

    Returns
    -------
    opencascade::handle<Poly_Triangulation>

    """
    return _RWObj.rwobj_ReadFile(*args)

class RWObj_IShapeReceiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWObj_IShapeReceiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWObj_IShapeReceiver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BindNamedShape(self, *args) -> "void":
        """
        @param theshape shape to register @param thename shape name @param thematerial shape material @param theisrootshape indicates that this is a root object (free shape).

        Parameters
        ----------
        theShape: TopoDS_Shape
        theName: TCollection_AsciiString
        theMaterial: RWObj_Material *
        theIsRootShape: bool

        Returns
        -------
        None

        """
        return _RWObj.RWObj_IShapeReceiver_BindNamedShape(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWObj.delete_RWObj_IShapeReceiver
    __del__ = lambda self: None
RWObj_IShapeReceiver_swigregister = _RWObj.RWObj_IShapeReceiver_swigregister
RWObj_IShapeReceiver_swigregister(RWObj_IShapeReceiver)

class RWObj_Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWObj_Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWObj_Material, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _RWObj.RWObj_Material_Name_set
    __swig_getmethods__["Name"] = _RWObj.RWObj_Material_Name_get
    if _newclass:
        Name = _swig_property(_RWObj.RWObj_Material_Name_get, _RWObj.RWObj_Material_Name_set)
    __swig_setmethods__["DiffuseTexture"] = _RWObj.RWObj_Material_DiffuseTexture_set
    __swig_getmethods__["DiffuseTexture"] = _RWObj.RWObj_Material_DiffuseTexture_get
    if _newclass:
        DiffuseTexture = _swig_property(_RWObj.RWObj_Material_DiffuseTexture_get, _RWObj.RWObj_Material_DiffuseTexture_set)
    __swig_setmethods__["SpecularTexture"] = _RWObj.RWObj_Material_SpecularTexture_set
    __swig_getmethods__["SpecularTexture"] = _RWObj.RWObj_Material_SpecularTexture_get
    if _newclass:
        SpecularTexture = _swig_property(_RWObj.RWObj_Material_SpecularTexture_get, _RWObj.RWObj_Material_SpecularTexture_set)
    __swig_setmethods__["BumpTexture"] = _RWObj.RWObj_Material_BumpTexture_set
    __swig_getmethods__["BumpTexture"] = _RWObj.RWObj_Material_BumpTexture_get
    if _newclass:
        BumpTexture = _swig_property(_RWObj.RWObj_Material_BumpTexture_get, _RWObj.RWObj_Material_BumpTexture_set)
    __swig_setmethods__["AmbientColor"] = _RWObj.RWObj_Material_AmbientColor_set
    __swig_getmethods__["AmbientColor"] = _RWObj.RWObj_Material_AmbientColor_get
    if _newclass:
        AmbientColor = _swig_property(_RWObj.RWObj_Material_AmbientColor_get, _RWObj.RWObj_Material_AmbientColor_set)
    __swig_setmethods__["DiffuseColor"] = _RWObj.RWObj_Material_DiffuseColor_set
    __swig_getmethods__["DiffuseColor"] = _RWObj.RWObj_Material_DiffuseColor_get
    if _newclass:
        DiffuseColor = _swig_property(_RWObj.RWObj_Material_DiffuseColor_get, _RWObj.RWObj_Material_DiffuseColor_set)
    __swig_setmethods__["SpecularColor"] = _RWObj.RWObj_Material_SpecularColor_set
    __swig_getmethods__["SpecularColor"] = _RWObj.RWObj_Material_SpecularColor_get
    if _newclass:
        SpecularColor = _swig_property(_RWObj.RWObj_Material_SpecularColor_get, _RWObj.RWObj_Material_SpecularColor_set)
    __swig_setmethods__["Shininess"] = _RWObj.RWObj_Material_Shininess_set
    __swig_getmethods__["Shininess"] = _RWObj.RWObj_Material_Shininess_get
    if _newclass:
        Shininess = _swig_property(_RWObj.RWObj_Material_Shininess_get, _RWObj.RWObj_Material_Shininess_set)
    __swig_setmethods__["Transparency"] = _RWObj.RWObj_Material_Transparency_set
    __swig_getmethods__["Transparency"] = _RWObj.RWObj_Material_Transparency_get
    if _newclass:
        Transparency = _swig_property(_RWObj.RWObj_Material_Transparency_get, _RWObj.RWObj_Material_Transparency_set)

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _RWObj.new_RWObj_Material(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _RWObj.delete_RWObj_Material
    __del__ = lambda self: None
RWObj_Material_swigregister = _RWObj.RWObj_Material_swigregister
RWObj_Material_swigregister(RWObj_Material)

class RWObj_Reader(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWObj_Reader, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWObj_Reader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ExternalFiles(self, *args) -> "NCollection_IndexedMap< TCollection_AsciiString > const &":
        """
        Return the list of external file references.

        Returns
        -------
        NCollection_IndexedMap<TCollection_AsciiString>

        """
        return _RWObj.RWObj_Reader_ExternalFiles(self, *args)


    def FileComments(self, *args) -> "TCollection_AsciiString const &":
        """
        Returns file comments (lines starting with # at the beginning of file).

        Returns
        -------
        TCollection_AsciiString

        """
        return _RWObj.RWObj_Reader_FileComments(self, *args)


    def IsSinglePrecision(self, *args) -> "Standard_Boolean":
        """
        Return single precision flag for reading vertex data (coordinates); false by default.

        Returns
        -------
        bool

        """
        return _RWObj.RWObj_Reader_IsSinglePrecision(self, *args)


    def MemoryLimit(self, *args) -> "Standard_Size":
        """
        Returns memory limit in bytes; -1 (no limit) by default.

        Returns
        -------
        Standard_Size

        """
        return _RWObj.RWObj_Reader_MemoryLimit(self, *args)


    def NbProbeElems(self, *args) -> "Standard_Integer":
        """
        //!< number of probed polygon elements (of unknown size).

        Returns
        -------
        int

        """
        return _RWObj.RWObj_Reader_NbProbeElems(self, *args)


    def NbProbeNodes(self, *args) -> "Standard_Integer":
        """
        Number of probed nodes.

        Returns
        -------
        int

        """
        return _RWObj.RWObj_Reader_NbProbeNodes(self, *args)


    def Probe(self, *args) -> "Standard_Boolean":
        """
        Probe data from obj file (comments, external references) without actually reading mesh data. although mesh data will not be collected, the full file content will be parsed, due to obj format limitations. @param thefile path to the file @param theprogress progress indicator returns true if success, false on error or user break. @sa filecomments(), externalfiles(), nbprobenodes(), nbprobeelems().

        Parameters
        ----------
        theFile: TCollection_AsciiString
        theProgress: Message_ProgressRange

        Returns
        -------
        bool

        """
        return _RWObj.RWObj_Reader_Probe(self, *args)


    def Read(self, *args) -> "Standard_Boolean":
        """
        Reads data from obj file. unicode paths can be given in utf-8 encoding. returns true if success, false on error or user break.

        Parameters
        ----------
        theFile: TCollection_AsciiString
        theProgress: Message_ProgressRange

        Returns
        -------
        bool

        """
        return _RWObj.RWObj_Reader_Read(self, *args)


    def SetMemoryLimit(self, *args) -> "void":
        """
        Specify memory limit in bytes, so that import will be aborted by specified limit before memory allocation error occurs.

        Parameters
        ----------
        theMemLimit: Standard_Size

        Returns
        -------
        None

        """
        return _RWObj.RWObj_Reader_SetMemoryLimit(self, *args)


    def SetSinglePrecision(self, *args) -> "void":
        """
        Setup single/double precision flag for reading vertex data (coordinates).

        Parameters
        ----------
        theIsSinglePrecision: bool

        Returns
        -------
        None

        """
        return _RWObj.RWObj_Reader_SetSinglePrecision(self, *args)


    def SetTransformation(self, *args) -> "void":
        """
        Setup transformation from one coordinate system to another. obj file might be exported following various coordinate system conventions, so that it might be useful automatically transform data during file reading.

        Parameters
        ----------
        theCSConverter: RWMesh_CoordinateSystemConverter

        Returns
        -------
        None

        """
        return _RWObj.RWObj_Reader_SetTransformation(self, *args)


    def Transformation(self, *args) -> "RWMesh_CoordinateSystemConverter const &":
        """
        Return transformation from one coordinate system to another; no transformation by default.

        Returns
        -------
        RWMesh_CoordinateSystemConverter

        """
        return _RWObj.RWObj_Reader_Transformation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_RWObj_Reader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWObj.delete_RWObj_Reader
    __del__ = lambda self: None
RWObj_Reader_swigregister = _RWObj.RWObj_Reader_swigregister
RWObj_Reader_swigregister(RWObj_Reader)

class RWObj_SubMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWObj_SubMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWObj_SubMesh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Object"] = _RWObj.RWObj_SubMesh_Object_set
    __swig_getmethods__["Object"] = _RWObj.RWObj_SubMesh_Object_get
    if _newclass:
        Object = _swig_property(_RWObj.RWObj_SubMesh_Object_get, _RWObj.RWObj_SubMesh_Object_set)
    __swig_setmethods__["Group"] = _RWObj.RWObj_SubMesh_Group_set
    __swig_getmethods__["Group"] = _RWObj.RWObj_SubMesh_Group_get
    if _newclass:
        Group = _swig_property(_RWObj.RWObj_SubMesh_Group_get, _RWObj.RWObj_SubMesh_Group_set)
    __swig_setmethods__["SmoothGroup"] = _RWObj.RWObj_SubMesh_SmoothGroup_set
    __swig_getmethods__["SmoothGroup"] = _RWObj.RWObj_SubMesh_SmoothGroup_get
    if _newclass:
        SmoothGroup = _swig_property(_RWObj.RWObj_SubMesh_SmoothGroup_get, _RWObj.RWObj_SubMesh_SmoothGroup_set)
    __swig_setmethods__["Material"] = _RWObj.RWObj_SubMesh_Material_set
    __swig_getmethods__["Material"] = _RWObj.RWObj_SubMesh_Material_get
    if _newclass:
        Material = _swig_property(_RWObj.RWObj_SubMesh_Material_get, _RWObj.RWObj_SubMesh_Material_set)

    __repr__ = _dumps_object


    def __init__(self):
        this = _RWObj.new_RWObj_SubMesh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWObj.delete_RWObj_SubMesh
    __del__ = lambda self: None
RWObj_SubMesh_swigregister = _RWObj.RWObj_SubMesh_swigregister
RWObj_SubMesh_swigregister(RWObj_SubMesh)

class RWObj_CafReader(OCC.Core.RWMesh.RWMesh_CafReader):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.RWMesh.RWMesh_CafReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWObj_CafReader, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.RWMesh.RWMesh_CafReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWObj_CafReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWObj.new_RWObj_CafReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsSinglePrecision(self, *args) -> "Standard_Boolean":
        """
        Return single precision flag for reading vertex data (coordinates); false by default.

        Returns
        -------
        bool

        """
        return _RWObj.RWObj_CafReader_IsSinglePrecision(self, *args)


    def SetSinglePrecision(self, *args) -> "void":
        """
        Setup single/double precision flag for reading vertex data (coordinates).

        Parameters
        ----------
        theIsSinglePrecision: bool

        Returns
        -------
        None

        """
        return _RWObj.RWObj_CafReader_SetSinglePrecision(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_RWObj_CafReader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWObj.delete_RWObj_CafReader
    __del__ = lambda self: None
RWObj_CafReader_swigregister = _RWObj.RWObj_CafReader_swigregister
RWObj_CafReader_swigregister(RWObj_CafReader)

class RWObj_TriangulationReader(RWObj_Reader):
    __swig_setmethods__ = {}
    for _s in [RWObj_Reader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWObj_TriangulationReader, name, value)
    __swig_getmethods__ = {}
    for _s in [RWObj_Reader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RWObj_TriangulationReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Returns
        -------
        None

        """
        this = _RWObj.new_RWObj_TriangulationReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetTriangulation(self, *args) -> "opencascade::handle< Poly_Triangulation >":
        """
        Create poly_triangulation from collected data.

        Returns
        -------
        opencascade::handle<Poly_Triangulation>

        """
        return _RWObj.RWObj_TriangulationReader_GetTriangulation(self, *args)


    def ResultShape(self, *args) -> "TopoDS_Shape":
        """
        Return result shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _RWObj.RWObj_TriangulationReader_ResultShape(self, *args)


    def SetCreateShapes(self, *args) -> "void":
        """
        Set flag to create shapes.

        Parameters
        ----------
        theToCreateShapes: bool

        Returns
        -------
        None

        """
        return _RWObj.RWObj_TriangulationReader_SetCreateShapes(self, *args)


    def SetShapeReceiver(self, *args) -> "void":
        """
        Set shape receiver callback.

        Parameters
        ----------
        theReceiver: RWObj_IShapeReceiver *

        Returns
        -------
        None

        """
        return _RWObj.RWObj_TriangulationReader_SetShapeReceiver(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_RWObj_TriangulationReader_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWObj.delete_RWObj_TriangulationReader
    __del__ = lambda self: None
RWObj_TriangulationReader_swigregister = _RWObj.RWObj_TriangulationReader_swigregister
RWObj_TriangulationReader_swigregister(RWObj_TriangulationReader)


@classnotwrapped
class RWObj_MtlReader:
	pass




# This file is compatible with both classic and new-style classes.


