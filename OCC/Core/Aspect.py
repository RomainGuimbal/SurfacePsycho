# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
Aspect module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_aspect.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Aspect
else:
    import _Aspect

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Aspect.delete_SwigPyIterator

    def value(self):
        return _Aspect.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Aspect.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Aspect.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Aspect.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Aspect.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Aspect.SwigPyIterator_copy(self)

    def next(self):
        return _Aspect.SwigPyIterator_next(self)

    def __next__(self):
        return _Aspect.SwigPyIterator___next__(self)

    def previous(self):
        return _Aspect.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Aspect.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Aspect.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Aspect.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Aspect.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Aspect.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Aspect.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Aspect.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Aspect:
_Aspect.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _Aspect.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.TopLoc
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.Image
import OCC.Core.OSD
import OCC.Core.Media

from enum import IntEnum
from OCC.Core.Exception import *

Aspect_XRTrackedDeviceRole_NB = _Aspect.Aspect_XRTrackedDeviceRole_NB
Aspect_ColorSpace_sRGB = _Aspect.Aspect_ColorSpace_sRGB
Aspect_ColorSpace_Linear = _Aspect.Aspect_ColorSpace_Linear
Aspect_Eye_Left = _Aspect.Aspect_Eye_Left
Aspect_Eye_Right = _Aspect.Aspect_Eye_Right
Aspect_FM_NONE = _Aspect.Aspect_FM_NONE
Aspect_FM_CENTERED = _Aspect.Aspect_FM_CENTERED
Aspect_FM_TILED = _Aspect.Aspect_FM_TILED
Aspect_FM_STRETCH = _Aspect.Aspect_FM_STRETCH
Aspect_GradientFillMethod_None = _Aspect.Aspect_GradientFillMethod_None
Aspect_GradientFillMethod_Horizontal = _Aspect.Aspect_GradientFillMethod_Horizontal
Aspect_GradientFillMethod_Vertical = _Aspect.Aspect_GradientFillMethod_Vertical
Aspect_GradientFillMethod_Diagonal1 = _Aspect.Aspect_GradientFillMethod_Diagonal1
Aspect_GradientFillMethod_Diagonal2 = _Aspect.Aspect_GradientFillMethod_Diagonal2
Aspect_GradientFillMethod_Corner1 = _Aspect.Aspect_GradientFillMethod_Corner1
Aspect_GradientFillMethod_Corner2 = _Aspect.Aspect_GradientFillMethod_Corner2
Aspect_GradientFillMethod_Corner3 = _Aspect.Aspect_GradientFillMethod_Corner3
Aspect_GradientFillMethod_Corner4 = _Aspect.Aspect_GradientFillMethod_Corner4
Aspect_GradientFillMethod_Elliptical = _Aspect.Aspect_GradientFillMethod_Elliptical
Aspect_GFM_NONE = _Aspect.Aspect_GFM_NONE
Aspect_GFM_HOR = _Aspect.Aspect_GFM_HOR
Aspect_GFM_VER = _Aspect.Aspect_GFM_VER
Aspect_GFM_DIAG1 = _Aspect.Aspect_GFM_DIAG1
Aspect_GFM_DIAG2 = _Aspect.Aspect_GFM_DIAG2
Aspect_GFM_CORNER1 = _Aspect.Aspect_GFM_CORNER1
Aspect_GFM_CORNER2 = _Aspect.Aspect_GFM_CORNER2
Aspect_GFM_CORNER3 = _Aspect.Aspect_GFM_CORNER3
Aspect_GFM_CORNER4 = _Aspect.Aspect_GFM_CORNER4
Aspect_GraphicsLibrary_OpenGL = _Aspect.Aspect_GraphicsLibrary_OpenGL
Aspect_GraphicsLibrary_OpenGLES = _Aspect.Aspect_GraphicsLibrary_OpenGLES
Aspect_GDM_Lines = _Aspect.Aspect_GDM_Lines
Aspect_GDM_Points = _Aspect.Aspect_GDM_Points
Aspect_GDM_None = _Aspect.Aspect_GDM_None
Aspect_GT_Rectangular = _Aspect.Aspect_GT_Rectangular
Aspect_GT_Circular = _Aspect.Aspect_GT_Circular
Aspect_HS_SOLID = _Aspect.Aspect_HS_SOLID
Aspect_HS_HORIZONTAL = _Aspect.Aspect_HS_HORIZONTAL
Aspect_HS_HORIZONTAL_WIDE = _Aspect.Aspect_HS_HORIZONTAL_WIDE
Aspect_HS_VERTICAL = _Aspect.Aspect_HS_VERTICAL
Aspect_HS_VERTICAL_WIDE = _Aspect.Aspect_HS_VERTICAL_WIDE
Aspect_HS_DIAGONAL_45 = _Aspect.Aspect_HS_DIAGONAL_45
Aspect_HS_DIAGONAL_45_WIDE = _Aspect.Aspect_HS_DIAGONAL_45_WIDE
Aspect_HS_DIAGONAL_135 = _Aspect.Aspect_HS_DIAGONAL_135
Aspect_HS_DIAGONAL_135_WIDE = _Aspect.Aspect_HS_DIAGONAL_135_WIDE
Aspect_HS_GRID = _Aspect.Aspect_HS_GRID
Aspect_HS_GRID_WIDE = _Aspect.Aspect_HS_GRID_WIDE
Aspect_HS_GRID_DIAGONAL = _Aspect.Aspect_HS_GRID_DIAGONAL
Aspect_HS_GRID_DIAGONAL_WIDE = _Aspect.Aspect_HS_GRID_DIAGONAL_WIDE
Aspect_HS_NB = _Aspect.Aspect_HS_NB
Aspect_IS_EMPTY = _Aspect.Aspect_IS_EMPTY
Aspect_IS_SOLID = _Aspect.Aspect_IS_SOLID
Aspect_IS_HATCH = _Aspect.Aspect_IS_HATCH
Aspect_IS_HIDDENLINE = _Aspect.Aspect_IS_HIDDENLINE
Aspect_IS_POINT = _Aspect.Aspect_IS_POINT
Aspect_IS_HOLLOW = _Aspect.Aspect_IS_HOLLOW
Aspect_POM_Off = _Aspect.Aspect_POM_Off
Aspect_POM_Fill = _Aspect.Aspect_POM_Fill
Aspect_POM_Line = _Aspect.Aspect_POM_Line
Aspect_POM_Point = _Aspect.Aspect_POM_Point
Aspect_POM_All = _Aspect.Aspect_POM_All
Aspect_POM_None = _Aspect.Aspect_POM_None
Aspect_POM_Mask = _Aspect.Aspect_POM_Mask
Aspect_TOCSD_AUTO = _Aspect.Aspect_TOCSD_AUTO
Aspect_TOCSD_USER = _Aspect.Aspect_TOCSD_USER
Aspect_TOCSO_NONE = _Aspect.Aspect_TOCSO_NONE
Aspect_TOCSO_LEFT = _Aspect.Aspect_TOCSO_LEFT
Aspect_TOCSO_RIGHT = _Aspect.Aspect_TOCSO_RIGHT
Aspect_TOCSO_CENTER = _Aspect.Aspect_TOCSO_CENTER
Aspect_TOCSP_NONE = _Aspect.Aspect_TOCSP_NONE
Aspect_TOCSP_LEFT = _Aspect.Aspect_TOCSP_LEFT
Aspect_TOCSP_RIGHT = _Aspect.Aspect_TOCSP_RIGHT
Aspect_TOCSP_CENTER = _Aspect.Aspect_TOCSP_CENTER
Aspect_TOD_RELATIVE = _Aspect.Aspect_TOD_RELATIVE
Aspect_TOD_ABSOLUTE = _Aspect.Aspect_TOD_ABSOLUTE
Aspect_TODT_NORMAL = _Aspect.Aspect_TODT_NORMAL
Aspect_TODT_SUBTITLE = _Aspect.Aspect_TODT_SUBTITLE
Aspect_TODT_DEKALE = _Aspect.Aspect_TODT_DEKALE
Aspect_TODT_BLEND = _Aspect.Aspect_TODT_BLEND
Aspect_TODT_DIMENSION = _Aspect.Aspect_TODT_DIMENSION
Aspect_TODT_SHADOW = _Aspect.Aspect_TODT_SHADOW
Aspect_TOFM_BOTH_SIDE = _Aspect.Aspect_TOFM_BOTH_SIDE
Aspect_TOFM_BACK_SIDE = _Aspect.Aspect_TOFM_BACK_SIDE
Aspect_TOFM_FRONT_SIDE = _Aspect.Aspect_TOFM_FRONT_SIDE
Aspect_TOHM_COLOR = _Aspect.Aspect_TOHM_COLOR
Aspect_TOHM_BOUNDBOX = _Aspect.Aspect_TOHM_BOUNDBOX
Aspect_TOL_EMPTY = _Aspect.Aspect_TOL_EMPTY
Aspect_TOL_SOLID = _Aspect.Aspect_TOL_SOLID
Aspect_TOL_DASH = _Aspect.Aspect_TOL_DASH
Aspect_TOL_DOT = _Aspect.Aspect_TOL_DOT
Aspect_TOL_DOTDASH = _Aspect.Aspect_TOL_DOTDASH
Aspect_TOL_USERDEFINED = _Aspect.Aspect_TOL_USERDEFINED
Aspect_TOM_EMPTY = _Aspect.Aspect_TOM_EMPTY
Aspect_TOM_POINT = _Aspect.Aspect_TOM_POINT
Aspect_TOM_PLUS = _Aspect.Aspect_TOM_PLUS
Aspect_TOM_STAR = _Aspect.Aspect_TOM_STAR
Aspect_TOM_X = _Aspect.Aspect_TOM_X
Aspect_TOM_O = _Aspect.Aspect_TOM_O
Aspect_TOM_O_POINT = _Aspect.Aspect_TOM_O_POINT
Aspect_TOM_O_PLUS = _Aspect.Aspect_TOM_O_PLUS
Aspect_TOM_O_STAR = _Aspect.Aspect_TOM_O_STAR
Aspect_TOM_O_X = _Aspect.Aspect_TOM_O_X
Aspect_TOM_RING1 = _Aspect.Aspect_TOM_RING1
Aspect_TOM_RING2 = _Aspect.Aspect_TOM_RING2
Aspect_TOM_RING3 = _Aspect.Aspect_TOM_RING3
Aspect_TOM_BALL = _Aspect.Aspect_TOM_BALL
Aspect_TOM_USERDEFINED = _Aspect.Aspect_TOM_USERDEFINED
Aspect_TOR_UNKNOWN = _Aspect.Aspect_TOR_UNKNOWN
Aspect_TOR_NO_BORDER = _Aspect.Aspect_TOR_NO_BORDER
Aspect_TOR_TOP_BORDER = _Aspect.Aspect_TOR_TOP_BORDER
Aspect_TOR_RIGHT_BORDER = _Aspect.Aspect_TOR_RIGHT_BORDER
Aspect_TOR_BOTTOM_BORDER = _Aspect.Aspect_TOR_BOTTOM_BORDER
Aspect_TOR_LEFT_BORDER = _Aspect.Aspect_TOR_LEFT_BORDER
Aspect_TOR_TOP_AND_RIGHT_BORDER = _Aspect.Aspect_TOR_TOP_AND_RIGHT_BORDER
Aspect_TOR_RIGHT_AND_BOTTOM_BORDER = _Aspect.Aspect_TOR_RIGHT_AND_BOTTOM_BORDER
Aspect_TOR_BOTTOM_AND_LEFT_BORDER = _Aspect.Aspect_TOR_BOTTOM_AND_LEFT_BORDER
Aspect_TOR_LEFT_AND_TOP_BORDER = _Aspect.Aspect_TOR_LEFT_AND_TOP_BORDER
Aspect_TOST_NORMAL = _Aspect.Aspect_TOST_NORMAL
Aspect_TOST_ANNOTATION = _Aspect.Aspect_TOST_ANNOTATION
Aspect_TOTP_CENTER = _Aspect.Aspect_TOTP_CENTER
Aspect_TOTP_TOP = _Aspect.Aspect_TOTP_TOP
Aspect_TOTP_BOTTOM = _Aspect.Aspect_TOTP_BOTTOM
Aspect_TOTP_LEFT = _Aspect.Aspect_TOTP_LEFT
Aspect_TOTP_RIGHT = _Aspect.Aspect_TOTP_RIGHT
Aspect_TOTP_LEFT_LOWER = _Aspect.Aspect_TOTP_LEFT_LOWER
Aspect_TOTP_LEFT_UPPER = _Aspect.Aspect_TOTP_LEFT_UPPER
Aspect_TOTP_RIGHT_LOWER = _Aspect.Aspect_TOTP_RIGHT_LOWER
Aspect_TOTP_RIGHT_UPPER = _Aspect.Aspect_TOTP_RIGHT_UPPER
Aspect_VKey_UNKNOWN = _Aspect.Aspect_VKey_UNKNOWN
Aspect_VKey_A = _Aspect.Aspect_VKey_A
Aspect_VKey_B = _Aspect.Aspect_VKey_B
Aspect_VKey_C = _Aspect.Aspect_VKey_C
Aspect_VKey_D = _Aspect.Aspect_VKey_D
Aspect_VKey_E = _Aspect.Aspect_VKey_E
Aspect_VKey_F = _Aspect.Aspect_VKey_F
Aspect_VKey_G = _Aspect.Aspect_VKey_G
Aspect_VKey_H = _Aspect.Aspect_VKey_H
Aspect_VKey_I = _Aspect.Aspect_VKey_I
Aspect_VKey_J = _Aspect.Aspect_VKey_J
Aspect_VKey_K = _Aspect.Aspect_VKey_K
Aspect_VKey_L = _Aspect.Aspect_VKey_L
Aspect_VKey_M = _Aspect.Aspect_VKey_M
Aspect_VKey_N = _Aspect.Aspect_VKey_N
Aspect_VKey_O = _Aspect.Aspect_VKey_O
Aspect_VKey_P = _Aspect.Aspect_VKey_P
Aspect_VKey_Q = _Aspect.Aspect_VKey_Q
Aspect_VKey_R = _Aspect.Aspect_VKey_R
Aspect_VKey_S = _Aspect.Aspect_VKey_S
Aspect_VKey_T = _Aspect.Aspect_VKey_T
Aspect_VKey_U = _Aspect.Aspect_VKey_U
Aspect_VKey_V = _Aspect.Aspect_VKey_V
Aspect_VKey_W = _Aspect.Aspect_VKey_W
Aspect_VKey_X = _Aspect.Aspect_VKey_X
Aspect_VKey_Y = _Aspect.Aspect_VKey_Y
Aspect_VKey_Z = _Aspect.Aspect_VKey_Z
Aspect_VKey_0 = _Aspect.Aspect_VKey_0
Aspect_VKey_1 = _Aspect.Aspect_VKey_1
Aspect_VKey_2 = _Aspect.Aspect_VKey_2
Aspect_VKey_3 = _Aspect.Aspect_VKey_3
Aspect_VKey_4 = _Aspect.Aspect_VKey_4
Aspect_VKey_5 = _Aspect.Aspect_VKey_5
Aspect_VKey_6 = _Aspect.Aspect_VKey_6
Aspect_VKey_7 = _Aspect.Aspect_VKey_7
Aspect_VKey_8 = _Aspect.Aspect_VKey_8
Aspect_VKey_9 = _Aspect.Aspect_VKey_9
Aspect_VKey_F1 = _Aspect.Aspect_VKey_F1
Aspect_VKey_F2 = _Aspect.Aspect_VKey_F2
Aspect_VKey_F3 = _Aspect.Aspect_VKey_F3
Aspect_VKey_F4 = _Aspect.Aspect_VKey_F4
Aspect_VKey_F5 = _Aspect.Aspect_VKey_F5
Aspect_VKey_F6 = _Aspect.Aspect_VKey_F6
Aspect_VKey_F7 = _Aspect.Aspect_VKey_F7
Aspect_VKey_F8 = _Aspect.Aspect_VKey_F8
Aspect_VKey_F9 = _Aspect.Aspect_VKey_F9
Aspect_VKey_F10 = _Aspect.Aspect_VKey_F10
Aspect_VKey_F11 = _Aspect.Aspect_VKey_F11
Aspect_VKey_F12 = _Aspect.Aspect_VKey_F12
Aspect_VKey_Up = _Aspect.Aspect_VKey_Up
Aspect_VKey_Down = _Aspect.Aspect_VKey_Down
Aspect_VKey_Left = _Aspect.Aspect_VKey_Left
Aspect_VKey_Right = _Aspect.Aspect_VKey_Right
Aspect_VKey_Plus = _Aspect.Aspect_VKey_Plus
Aspect_VKey_Minus = _Aspect.Aspect_VKey_Minus
Aspect_VKey_Equal = _Aspect.Aspect_VKey_Equal
Aspect_VKey_PageUp = _Aspect.Aspect_VKey_PageUp
Aspect_VKey_PageDown = _Aspect.Aspect_VKey_PageDown
Aspect_VKey_Home = _Aspect.Aspect_VKey_Home
Aspect_VKey_End = _Aspect.Aspect_VKey_End
Aspect_VKey_Escape = _Aspect.Aspect_VKey_Escape
Aspect_VKey_Back = _Aspect.Aspect_VKey_Back
Aspect_VKey_Enter = _Aspect.Aspect_VKey_Enter
Aspect_VKey_Backspace = _Aspect.Aspect_VKey_Backspace
Aspect_VKey_Space = _Aspect.Aspect_VKey_Space
Aspect_VKey_Delete = _Aspect.Aspect_VKey_Delete
Aspect_VKey_Tilde = _Aspect.Aspect_VKey_Tilde
Aspect_VKey_Tab = _Aspect.Aspect_VKey_Tab
Aspect_VKey_Comma = _Aspect.Aspect_VKey_Comma
Aspect_VKey_Period = _Aspect.Aspect_VKey_Period
Aspect_VKey_Semicolon = _Aspect.Aspect_VKey_Semicolon
Aspect_VKey_Slash = _Aspect.Aspect_VKey_Slash
Aspect_VKey_BracketLeft = _Aspect.Aspect_VKey_BracketLeft
Aspect_VKey_Backslash = _Aspect.Aspect_VKey_Backslash
Aspect_VKey_BracketRight = _Aspect.Aspect_VKey_BracketRight
Aspect_VKey_Apostrophe = _Aspect.Aspect_VKey_Apostrophe
Aspect_VKey_Numlock = _Aspect.Aspect_VKey_Numlock
Aspect_VKey_Scroll = _Aspect.Aspect_VKey_Scroll
Aspect_VKey_Numpad0 = _Aspect.Aspect_VKey_Numpad0
Aspect_VKey_Numpad1 = _Aspect.Aspect_VKey_Numpad1
Aspect_VKey_Numpad2 = _Aspect.Aspect_VKey_Numpad2
Aspect_VKey_Numpad3 = _Aspect.Aspect_VKey_Numpad3
Aspect_VKey_Numpad4 = _Aspect.Aspect_VKey_Numpad4
Aspect_VKey_Numpad5 = _Aspect.Aspect_VKey_Numpad5
Aspect_VKey_Numpad6 = _Aspect.Aspect_VKey_Numpad6
Aspect_VKey_Numpad7 = _Aspect.Aspect_VKey_Numpad7
Aspect_VKey_Numpad8 = _Aspect.Aspect_VKey_Numpad8
Aspect_VKey_Numpad9 = _Aspect.Aspect_VKey_Numpad9
Aspect_VKey_NumpadMultiply = _Aspect.Aspect_VKey_NumpadMultiply
Aspect_VKey_NumpadAdd = _Aspect.Aspect_VKey_NumpadAdd
Aspect_VKey_NumpadSubtract = _Aspect.Aspect_VKey_NumpadSubtract
Aspect_VKey_NumpadDivide = _Aspect.Aspect_VKey_NumpadDivide
Aspect_VKey_MediaNextTrack = _Aspect.Aspect_VKey_MediaNextTrack
Aspect_VKey_MediaPreviousTrack = _Aspect.Aspect_VKey_MediaPreviousTrack
Aspect_VKey_MediaStop = _Aspect.Aspect_VKey_MediaStop
Aspect_VKey_MediaPlayPause = _Aspect.Aspect_VKey_MediaPlayPause
Aspect_VKey_VolumeMute = _Aspect.Aspect_VKey_VolumeMute
Aspect_VKey_VolumeDown = _Aspect.Aspect_VKey_VolumeDown
Aspect_VKey_VolumeUp = _Aspect.Aspect_VKey_VolumeUp
Aspect_VKey_BrowserBack = _Aspect.Aspect_VKey_BrowserBack
Aspect_VKey_BrowserForward = _Aspect.Aspect_VKey_BrowserForward
Aspect_VKey_BrowserRefresh = _Aspect.Aspect_VKey_BrowserRefresh
Aspect_VKey_BrowserStop = _Aspect.Aspect_VKey_BrowserStop
Aspect_VKey_BrowserSearch = _Aspect.Aspect_VKey_BrowserSearch
Aspect_VKey_BrowserFavorites = _Aspect.Aspect_VKey_BrowserFavorites
Aspect_VKey_BrowserHome = _Aspect.Aspect_VKey_BrowserHome
Aspect_VKey_ViewTop = _Aspect.Aspect_VKey_ViewTop
Aspect_VKey_ViewBottom = _Aspect.Aspect_VKey_ViewBottom
Aspect_VKey_ViewLeft = _Aspect.Aspect_VKey_ViewLeft
Aspect_VKey_ViewRight = _Aspect.Aspect_VKey_ViewRight
Aspect_VKey_ViewFront = _Aspect.Aspect_VKey_ViewFront
Aspect_VKey_ViewBack = _Aspect.Aspect_VKey_ViewBack
Aspect_VKey_ViewAxoLeftProj = _Aspect.Aspect_VKey_ViewAxoLeftProj
Aspect_VKey_ViewAxoRightProj = _Aspect.Aspect_VKey_ViewAxoRightProj
Aspect_VKey_ViewFitAll = _Aspect.Aspect_VKey_ViewFitAll
Aspect_VKey_ViewRoll90CW = _Aspect.Aspect_VKey_ViewRoll90CW
Aspect_VKey_ViewRoll90CCW = _Aspect.Aspect_VKey_ViewRoll90CCW
Aspect_VKey_ViewSwitchRotate = _Aspect.Aspect_VKey_ViewSwitchRotate
Aspect_VKey_Shift = _Aspect.Aspect_VKey_Shift
Aspect_VKey_Control = _Aspect.Aspect_VKey_Control
Aspect_VKey_Alt = _Aspect.Aspect_VKey_Alt
Aspect_VKey_Menu = _Aspect.Aspect_VKey_Menu
Aspect_VKey_Meta = _Aspect.Aspect_VKey_Meta
Aspect_VKey_NavInteract = _Aspect.Aspect_VKey_NavInteract
Aspect_VKey_NavForward = _Aspect.Aspect_VKey_NavForward
Aspect_VKey_NavBackward = _Aspect.Aspect_VKey_NavBackward
Aspect_VKey_NavSlideLeft = _Aspect.Aspect_VKey_NavSlideLeft
Aspect_VKey_NavSlideRight = _Aspect.Aspect_VKey_NavSlideRight
Aspect_VKey_NavSlideUp = _Aspect.Aspect_VKey_NavSlideUp
Aspect_VKey_NavSlideDown = _Aspect.Aspect_VKey_NavSlideDown
Aspect_VKey_NavRollCCW = _Aspect.Aspect_VKey_NavRollCCW
Aspect_VKey_NavRollCW = _Aspect.Aspect_VKey_NavRollCW
Aspect_VKey_NavLookLeft = _Aspect.Aspect_VKey_NavLookLeft
Aspect_VKey_NavLookRight = _Aspect.Aspect_VKey_NavLookRight
Aspect_VKey_NavLookUp = _Aspect.Aspect_VKey_NavLookUp
Aspect_VKey_NavLookDown = _Aspect.Aspect_VKey_NavLookDown
Aspect_VKey_NavCrouch = _Aspect.Aspect_VKey_NavCrouch
Aspect_VKey_NavJump = _Aspect.Aspect_VKey_NavJump
Aspect_VKey_NavThrustForward = _Aspect.Aspect_VKey_NavThrustForward
Aspect_VKey_NavThrustBackward = _Aspect.Aspect_VKey_NavThrustBackward
Aspect_VKey_NavThrustStop = _Aspect.Aspect_VKey_NavThrustStop
Aspect_VKey_NavSpeedIncrease = _Aspect.Aspect_VKey_NavSpeedIncrease
Aspect_VKey_NavSpeedDecrease = _Aspect.Aspect_VKey_NavSpeedDecrease
Aspect_WOL_THIN = _Aspect.Aspect_WOL_THIN
Aspect_WOL_MEDIUM = _Aspect.Aspect_WOL_MEDIUM
Aspect_WOL_THICK = _Aspect.Aspect_WOL_THICK
Aspect_WOL_VERYTHICK = _Aspect.Aspect_WOL_VERYTHICK
Aspect_WOL_USERDEFINED = _Aspect.Aspect_WOL_USERDEFINED
Aspect_XA_DELETE_WINDOW = _Aspect.Aspect_XA_DELETE_WINDOW
Aspect_XRActionType_InputDigital = _Aspect.Aspect_XRActionType_InputDigital
Aspect_XRActionType_InputAnalog = _Aspect.Aspect_XRActionType_InputAnalog
Aspect_XRActionType_InputPose = _Aspect.Aspect_XRActionType_InputPose
Aspect_XRActionType_InputSkeletal = _Aspect.Aspect_XRActionType_InputSkeletal
Aspect_XRActionType_OutputHaptic = _Aspect.Aspect_XRActionType_OutputHaptic
Aspect_XRGenericAction_IsHeadsetOn = _Aspect.Aspect_XRGenericAction_IsHeadsetOn
Aspect_XRGenericAction_InputAppMenu = _Aspect.Aspect_XRGenericAction_InputAppMenu
Aspect_XRGenericAction_InputSysMenu = _Aspect.Aspect_XRGenericAction_InputSysMenu
Aspect_XRGenericAction_InputTriggerPull = _Aspect.Aspect_XRGenericAction_InputTriggerPull
Aspect_XRGenericAction_InputTriggerClick = _Aspect.Aspect_XRGenericAction_InputTriggerClick
Aspect_XRGenericAction_InputGripClick = _Aspect.Aspect_XRGenericAction_InputGripClick
Aspect_XRGenericAction_InputTrackPadPosition = _Aspect.Aspect_XRGenericAction_InputTrackPadPosition
Aspect_XRGenericAction_InputTrackPadTouch = _Aspect.Aspect_XRGenericAction_InputTrackPadTouch
Aspect_XRGenericAction_InputTrackPadClick = _Aspect.Aspect_XRGenericAction_InputTrackPadClick
Aspect_XRGenericAction_InputThumbstickPosition = _Aspect.Aspect_XRGenericAction_InputThumbstickPosition
Aspect_XRGenericAction_InputThumbstickTouch = _Aspect.Aspect_XRGenericAction_InputThumbstickTouch
Aspect_XRGenericAction_InputThumbstickClick = _Aspect.Aspect_XRGenericAction_InputThumbstickClick
Aspect_XRGenericAction_InputPoseBase = _Aspect.Aspect_XRGenericAction_InputPoseBase
Aspect_XRGenericAction_InputPoseFront = _Aspect.Aspect_XRGenericAction_InputPoseFront
Aspect_XRGenericAction_InputPoseHandGrip = _Aspect.Aspect_XRGenericAction_InputPoseHandGrip
Aspect_XRGenericAction_InputPoseFingerTip = _Aspect.Aspect_XRGenericAction_InputPoseFingerTip
Aspect_XRGenericAction_OutputHaptic = _Aspect.Aspect_XRGenericAction_OutputHaptic
Aspect_XRTrackedDeviceRole_Head = _Aspect.Aspect_XRTrackedDeviceRole_Head
Aspect_XRTrackedDeviceRole_LeftHand = _Aspect.Aspect_XRTrackedDeviceRole_LeftHand
Aspect_XRTrackedDeviceRole_RightHand = _Aspect.Aspect_XRTrackedDeviceRole_RightHand
Aspect_XRTrackedDeviceRole_Other = _Aspect.Aspect_XRTrackedDeviceRole_Other


class Aspect_ColorSpace(IntEnum):
	Aspect_ColorSpace_sRGB = 0
	Aspect_ColorSpace_Linear = 1
Aspect_ColorSpace_sRGB = Aspect_ColorSpace.Aspect_ColorSpace_sRGB
Aspect_ColorSpace_Linear = Aspect_ColorSpace.Aspect_ColorSpace_Linear

class Aspect_Eye(IntEnum):
	Aspect_Eye_Left = 0
	Aspect_Eye_Right = 1
Aspect_Eye_Left = Aspect_Eye.Aspect_Eye_Left
Aspect_Eye_Right = Aspect_Eye.Aspect_Eye_Right

class Aspect_FillMethod(IntEnum):
	Aspect_FM_NONE = 0
	Aspect_FM_CENTERED = 1
	Aspect_FM_TILED = 2
	Aspect_FM_STRETCH = 3
Aspect_FM_NONE = Aspect_FillMethod.Aspect_FM_NONE
Aspect_FM_CENTERED = Aspect_FillMethod.Aspect_FM_CENTERED
Aspect_FM_TILED = Aspect_FillMethod.Aspect_FM_TILED
Aspect_FM_STRETCH = Aspect_FillMethod.Aspect_FM_STRETCH

class Aspect_GradientFillMethod(IntEnum):
	Aspect_GradientFillMethod_None = 0
	Aspect_GradientFillMethod_Horizontal = 1
	Aspect_GradientFillMethod_Vertical = 2
	Aspect_GradientFillMethod_Diagonal1 = 3
	Aspect_GradientFillMethod_Diagonal2 = 4
	Aspect_GradientFillMethod_Corner1 = 5
	Aspect_GradientFillMethod_Corner2 = 6
	Aspect_GradientFillMethod_Corner3 = 7
	Aspect_GradientFillMethod_Corner4 = 8
	Aspect_GradientFillMethod_Elliptical = 9
	Aspect_GFM_NONE = Aspect_GradientFillMethod_None
	Aspect_GFM_HOR = Aspect_GradientFillMethod_Horizontal
	Aspect_GFM_VER = Aspect_GradientFillMethod_Vertical
	Aspect_GFM_DIAG1 = Aspect_GradientFillMethod_Diagonal1
	Aspect_GFM_DIAG2 = Aspect_GradientFillMethod_Diagonal2
	Aspect_GFM_CORNER1 = Aspect_GradientFillMethod_Corner1
	Aspect_GFM_CORNER2 = Aspect_GradientFillMethod_Corner2
	Aspect_GFM_CORNER3 = Aspect_GradientFillMethod_Corner3
	Aspect_GFM_CORNER4 = Aspect_GradientFillMethod_Corner4
Aspect_GradientFillMethod_None = Aspect_GradientFillMethod.Aspect_GradientFillMethod_None
Aspect_GradientFillMethod_Horizontal = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Horizontal
Aspect_GradientFillMethod_Vertical = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Vertical
Aspect_GradientFillMethod_Diagonal1 = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Diagonal1
Aspect_GradientFillMethod_Diagonal2 = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Diagonal2
Aspect_GradientFillMethod_Corner1 = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Corner1
Aspect_GradientFillMethod_Corner2 = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Corner2
Aspect_GradientFillMethod_Corner3 = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Corner3
Aspect_GradientFillMethod_Corner4 = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Corner4
Aspect_GradientFillMethod_Elliptical = Aspect_GradientFillMethod.Aspect_GradientFillMethod_Elliptical
Aspect_GFM_NONE = Aspect_GradientFillMethod.Aspect_GFM_NONE
Aspect_GFM_HOR = Aspect_GradientFillMethod.Aspect_GFM_HOR
Aspect_GFM_VER = Aspect_GradientFillMethod.Aspect_GFM_VER
Aspect_GFM_DIAG1 = Aspect_GradientFillMethod.Aspect_GFM_DIAG1
Aspect_GFM_DIAG2 = Aspect_GradientFillMethod.Aspect_GFM_DIAG2
Aspect_GFM_CORNER1 = Aspect_GradientFillMethod.Aspect_GFM_CORNER1
Aspect_GFM_CORNER2 = Aspect_GradientFillMethod.Aspect_GFM_CORNER2
Aspect_GFM_CORNER3 = Aspect_GradientFillMethod.Aspect_GFM_CORNER3
Aspect_GFM_CORNER4 = Aspect_GradientFillMethod.Aspect_GFM_CORNER4

class Aspect_GraphicsLibrary(IntEnum):
	Aspect_GraphicsLibrary_OpenGL = 0
	Aspect_GraphicsLibrary_OpenGLES = 1
Aspect_GraphicsLibrary_OpenGL = Aspect_GraphicsLibrary.Aspect_GraphicsLibrary_OpenGL
Aspect_GraphicsLibrary_OpenGLES = Aspect_GraphicsLibrary.Aspect_GraphicsLibrary_OpenGLES

class Aspect_GridDrawMode(IntEnum):
	Aspect_GDM_Lines = 0
	Aspect_GDM_Points = 1
	Aspect_GDM_None = 2
Aspect_GDM_Lines = Aspect_GridDrawMode.Aspect_GDM_Lines
Aspect_GDM_Points = Aspect_GridDrawMode.Aspect_GDM_Points
Aspect_GDM_None = Aspect_GridDrawMode.Aspect_GDM_None

class Aspect_GridType(IntEnum):
	Aspect_GT_Rectangular = 0
	Aspect_GT_Circular = 1
Aspect_GT_Rectangular = Aspect_GridType.Aspect_GT_Rectangular
Aspect_GT_Circular = Aspect_GridType.Aspect_GT_Circular

class Aspect_HatchStyle(IntEnum):
	Aspect_HS_SOLID = 0
	Aspect_HS_HORIZONTAL = 7
	Aspect_HS_HORIZONTAL_WIDE = 11
	Aspect_HS_VERTICAL = 8
	Aspect_HS_VERTICAL_WIDE = 12
	Aspect_HS_DIAGONAL_45 = 5
	Aspect_HS_DIAGONAL_45_WIDE = 9
	Aspect_HS_DIAGONAL_135 = 6
	Aspect_HS_DIAGONAL_135_WIDE = 10
	Aspect_HS_GRID = 3
	Aspect_HS_GRID_WIDE = 4
	Aspect_HS_GRID_DIAGONAL = 1
	Aspect_HS_GRID_DIAGONAL_WIDE = 2
	Aspect_HS_NB = 13
Aspect_HS_SOLID = Aspect_HatchStyle.Aspect_HS_SOLID
Aspect_HS_HORIZONTAL = Aspect_HatchStyle.Aspect_HS_HORIZONTAL
Aspect_HS_HORIZONTAL_WIDE = Aspect_HatchStyle.Aspect_HS_HORIZONTAL_WIDE
Aspect_HS_VERTICAL = Aspect_HatchStyle.Aspect_HS_VERTICAL
Aspect_HS_VERTICAL_WIDE = Aspect_HatchStyle.Aspect_HS_VERTICAL_WIDE
Aspect_HS_DIAGONAL_45 = Aspect_HatchStyle.Aspect_HS_DIAGONAL_45
Aspect_HS_DIAGONAL_45_WIDE = Aspect_HatchStyle.Aspect_HS_DIAGONAL_45_WIDE
Aspect_HS_DIAGONAL_135 = Aspect_HatchStyle.Aspect_HS_DIAGONAL_135
Aspect_HS_DIAGONAL_135_WIDE = Aspect_HatchStyle.Aspect_HS_DIAGONAL_135_WIDE
Aspect_HS_GRID = Aspect_HatchStyle.Aspect_HS_GRID
Aspect_HS_GRID_WIDE = Aspect_HatchStyle.Aspect_HS_GRID_WIDE
Aspect_HS_GRID_DIAGONAL = Aspect_HatchStyle.Aspect_HS_GRID_DIAGONAL
Aspect_HS_GRID_DIAGONAL_WIDE = Aspect_HatchStyle.Aspect_HS_GRID_DIAGONAL_WIDE
Aspect_HS_NB = Aspect_HatchStyle.Aspect_HS_NB

class Aspect_InteriorStyle(IntEnum):
	Aspect_IS_EMPTY = - 1
	Aspect_IS_SOLID = 0
	Aspect_IS_HATCH = 1
	Aspect_IS_HIDDENLINE = 2
	Aspect_IS_POINT = 3
	Aspect_IS_HOLLOW = Aspect_IS_EMPTY
Aspect_IS_EMPTY = Aspect_InteriorStyle.Aspect_IS_EMPTY
Aspect_IS_SOLID = Aspect_InteriorStyle.Aspect_IS_SOLID
Aspect_IS_HATCH = Aspect_InteriorStyle.Aspect_IS_HATCH
Aspect_IS_HIDDENLINE = Aspect_InteriorStyle.Aspect_IS_HIDDENLINE
Aspect_IS_POINT = Aspect_InteriorStyle.Aspect_IS_POINT
Aspect_IS_HOLLOW = Aspect_InteriorStyle.Aspect_IS_HOLLOW

class Aspect_PolygonOffsetMode(IntEnum):
	Aspect_POM_Off = 0
	Aspect_POM_Fill = 1
	Aspect_POM_Line = 2
	Aspect_POM_Point = 4
	Aspect_POM_All = Aspect_POM_Fill | Aspect_POM_Line | Aspect_POM_Point
	Aspect_POM_None = 8
	Aspect_POM_Mask = Aspect_POM_All | Aspect_POM_None
Aspect_POM_Off = Aspect_PolygonOffsetMode.Aspect_POM_Off
Aspect_POM_Fill = Aspect_PolygonOffsetMode.Aspect_POM_Fill
Aspect_POM_Line = Aspect_PolygonOffsetMode.Aspect_POM_Line
Aspect_POM_Point = Aspect_PolygonOffsetMode.Aspect_POM_Point
Aspect_POM_All = Aspect_PolygonOffsetMode.Aspect_POM_All
Aspect_POM_None = Aspect_PolygonOffsetMode.Aspect_POM_None
Aspect_POM_Mask = Aspect_PolygonOffsetMode.Aspect_POM_Mask

class Aspect_TypeOfColorScaleData(IntEnum):
	Aspect_TOCSD_AUTO = 0
	Aspect_TOCSD_USER = 1
Aspect_TOCSD_AUTO = Aspect_TypeOfColorScaleData.Aspect_TOCSD_AUTO
Aspect_TOCSD_USER = Aspect_TypeOfColorScaleData.Aspect_TOCSD_USER

class Aspect_TypeOfColorScaleOrientation(IntEnum):
	Aspect_TOCSO_NONE = 0
	Aspect_TOCSO_LEFT = 1
	Aspect_TOCSO_RIGHT = 2
	Aspect_TOCSO_CENTER = 3
Aspect_TOCSO_NONE = Aspect_TypeOfColorScaleOrientation.Aspect_TOCSO_NONE
Aspect_TOCSO_LEFT = Aspect_TypeOfColorScaleOrientation.Aspect_TOCSO_LEFT
Aspect_TOCSO_RIGHT = Aspect_TypeOfColorScaleOrientation.Aspect_TOCSO_RIGHT
Aspect_TOCSO_CENTER = Aspect_TypeOfColorScaleOrientation.Aspect_TOCSO_CENTER

class Aspect_TypeOfColorScalePosition(IntEnum):
	Aspect_TOCSP_NONE = 0
	Aspect_TOCSP_LEFT = 1
	Aspect_TOCSP_RIGHT = 2
	Aspect_TOCSP_CENTER = 3
Aspect_TOCSP_NONE = Aspect_TypeOfColorScalePosition.Aspect_TOCSP_NONE
Aspect_TOCSP_LEFT = Aspect_TypeOfColorScalePosition.Aspect_TOCSP_LEFT
Aspect_TOCSP_RIGHT = Aspect_TypeOfColorScalePosition.Aspect_TOCSP_RIGHT
Aspect_TOCSP_CENTER = Aspect_TypeOfColorScalePosition.Aspect_TOCSP_CENTER

class Aspect_TypeOfDeflection(IntEnum):
	Aspect_TOD_RELATIVE = 0
	Aspect_TOD_ABSOLUTE = 1
Aspect_TOD_RELATIVE = Aspect_TypeOfDeflection.Aspect_TOD_RELATIVE
Aspect_TOD_ABSOLUTE = Aspect_TypeOfDeflection.Aspect_TOD_ABSOLUTE

class Aspect_TypeOfDisplayText(IntEnum):
	Aspect_TODT_NORMAL = 0
	Aspect_TODT_SUBTITLE = 1
	Aspect_TODT_DEKALE = 2
	Aspect_TODT_BLEND = 3
	Aspect_TODT_DIMENSION = 4
	Aspect_TODT_SHADOW = 5
Aspect_TODT_NORMAL = Aspect_TypeOfDisplayText.Aspect_TODT_NORMAL
Aspect_TODT_SUBTITLE = Aspect_TypeOfDisplayText.Aspect_TODT_SUBTITLE
Aspect_TODT_DEKALE = Aspect_TypeOfDisplayText.Aspect_TODT_DEKALE
Aspect_TODT_BLEND = Aspect_TypeOfDisplayText.Aspect_TODT_BLEND
Aspect_TODT_DIMENSION = Aspect_TypeOfDisplayText.Aspect_TODT_DIMENSION
Aspect_TODT_SHADOW = Aspect_TypeOfDisplayText.Aspect_TODT_SHADOW

class Aspect_TypeOfFacingModel(IntEnum):
	Aspect_TOFM_BOTH_SIDE = 0
	Aspect_TOFM_BACK_SIDE = 1
	Aspect_TOFM_FRONT_SIDE = 2
Aspect_TOFM_BOTH_SIDE = Aspect_TypeOfFacingModel.Aspect_TOFM_BOTH_SIDE
Aspect_TOFM_BACK_SIDE = Aspect_TypeOfFacingModel.Aspect_TOFM_BACK_SIDE
Aspect_TOFM_FRONT_SIDE = Aspect_TypeOfFacingModel.Aspect_TOFM_FRONT_SIDE

class Aspect_TypeOfHighlightMethod(IntEnum):
	Aspect_TOHM_COLOR = 0
	Aspect_TOHM_BOUNDBOX = 1
Aspect_TOHM_COLOR = Aspect_TypeOfHighlightMethod.Aspect_TOHM_COLOR
Aspect_TOHM_BOUNDBOX = Aspect_TypeOfHighlightMethod.Aspect_TOHM_BOUNDBOX

class Aspect_TypeOfLine(IntEnum):
	Aspect_TOL_EMPTY = - 1
	Aspect_TOL_SOLID = 0
	Aspect_TOL_DASH = 1
	Aspect_TOL_DOT = 2
	Aspect_TOL_DOTDASH = 3
	Aspect_TOL_USERDEFINED = 4
Aspect_TOL_EMPTY = Aspect_TypeOfLine.Aspect_TOL_EMPTY
Aspect_TOL_SOLID = Aspect_TypeOfLine.Aspect_TOL_SOLID
Aspect_TOL_DASH = Aspect_TypeOfLine.Aspect_TOL_DASH
Aspect_TOL_DOT = Aspect_TypeOfLine.Aspect_TOL_DOT
Aspect_TOL_DOTDASH = Aspect_TypeOfLine.Aspect_TOL_DOTDASH
Aspect_TOL_USERDEFINED = Aspect_TypeOfLine.Aspect_TOL_USERDEFINED

class Aspect_TypeOfMarker(IntEnum):
	Aspect_TOM_EMPTY = - 1
	Aspect_TOM_POINT = 0
	Aspect_TOM_PLUS = 1
	Aspect_TOM_STAR = 2
	Aspect_TOM_X = 3
	Aspect_TOM_O = 4
	Aspect_TOM_O_POINT = 5
	Aspect_TOM_O_PLUS = 6
	Aspect_TOM_O_STAR = 7
	Aspect_TOM_O_X = 8
	Aspect_TOM_RING1 = 9
	Aspect_TOM_RING2 = 10
	Aspect_TOM_RING3 = 11
	Aspect_TOM_BALL = 12
	Aspect_TOM_USERDEFINED = 13
Aspect_TOM_EMPTY = Aspect_TypeOfMarker.Aspect_TOM_EMPTY
Aspect_TOM_POINT = Aspect_TypeOfMarker.Aspect_TOM_POINT
Aspect_TOM_PLUS = Aspect_TypeOfMarker.Aspect_TOM_PLUS
Aspect_TOM_STAR = Aspect_TypeOfMarker.Aspect_TOM_STAR
Aspect_TOM_X = Aspect_TypeOfMarker.Aspect_TOM_X
Aspect_TOM_O = Aspect_TypeOfMarker.Aspect_TOM_O
Aspect_TOM_O_POINT = Aspect_TypeOfMarker.Aspect_TOM_O_POINT
Aspect_TOM_O_PLUS = Aspect_TypeOfMarker.Aspect_TOM_O_PLUS
Aspect_TOM_O_STAR = Aspect_TypeOfMarker.Aspect_TOM_O_STAR
Aspect_TOM_O_X = Aspect_TypeOfMarker.Aspect_TOM_O_X
Aspect_TOM_RING1 = Aspect_TypeOfMarker.Aspect_TOM_RING1
Aspect_TOM_RING2 = Aspect_TypeOfMarker.Aspect_TOM_RING2
Aspect_TOM_RING3 = Aspect_TypeOfMarker.Aspect_TOM_RING3
Aspect_TOM_BALL = Aspect_TypeOfMarker.Aspect_TOM_BALL
Aspect_TOM_USERDEFINED = Aspect_TypeOfMarker.Aspect_TOM_USERDEFINED

class Aspect_TypeOfResize(IntEnum):
	Aspect_TOR_UNKNOWN = 0
	Aspect_TOR_NO_BORDER = 1
	Aspect_TOR_TOP_BORDER = 2
	Aspect_TOR_RIGHT_BORDER = 3
	Aspect_TOR_BOTTOM_BORDER = 4
	Aspect_TOR_LEFT_BORDER = 5
	Aspect_TOR_TOP_AND_RIGHT_BORDER = 6
	Aspect_TOR_RIGHT_AND_BOTTOM_BORDER = 7
	Aspect_TOR_BOTTOM_AND_LEFT_BORDER = 8
	Aspect_TOR_LEFT_AND_TOP_BORDER = 9
Aspect_TOR_UNKNOWN = Aspect_TypeOfResize.Aspect_TOR_UNKNOWN
Aspect_TOR_NO_BORDER = Aspect_TypeOfResize.Aspect_TOR_NO_BORDER
Aspect_TOR_TOP_BORDER = Aspect_TypeOfResize.Aspect_TOR_TOP_BORDER
Aspect_TOR_RIGHT_BORDER = Aspect_TypeOfResize.Aspect_TOR_RIGHT_BORDER
Aspect_TOR_BOTTOM_BORDER = Aspect_TypeOfResize.Aspect_TOR_BOTTOM_BORDER
Aspect_TOR_LEFT_BORDER = Aspect_TypeOfResize.Aspect_TOR_LEFT_BORDER
Aspect_TOR_TOP_AND_RIGHT_BORDER = Aspect_TypeOfResize.Aspect_TOR_TOP_AND_RIGHT_BORDER
Aspect_TOR_RIGHT_AND_BOTTOM_BORDER = Aspect_TypeOfResize.Aspect_TOR_RIGHT_AND_BOTTOM_BORDER
Aspect_TOR_BOTTOM_AND_LEFT_BORDER = Aspect_TypeOfResize.Aspect_TOR_BOTTOM_AND_LEFT_BORDER
Aspect_TOR_LEFT_AND_TOP_BORDER = Aspect_TypeOfResize.Aspect_TOR_LEFT_AND_TOP_BORDER

class Aspect_TypeOfStyleText(IntEnum):
	Aspect_TOST_NORMAL = 0
	Aspect_TOST_ANNOTATION = 1
Aspect_TOST_NORMAL = Aspect_TypeOfStyleText.Aspect_TOST_NORMAL
Aspect_TOST_ANNOTATION = Aspect_TypeOfStyleText.Aspect_TOST_ANNOTATION

class Aspect_TypeOfTriedronPosition(IntEnum):
	Aspect_TOTP_CENTER = 0
	Aspect_TOTP_TOP = 1
	Aspect_TOTP_BOTTOM = 2
	Aspect_TOTP_LEFT = 4
	Aspect_TOTP_RIGHT = 8
	Aspect_TOTP_LEFT_LOWER = Aspect_TOTP_BOTTOM | Aspect_TOTP_LEFT
	Aspect_TOTP_LEFT_UPPER = Aspect_TOTP_TOP | Aspect_TOTP_LEFT
	Aspect_TOTP_RIGHT_LOWER = Aspect_TOTP_BOTTOM | Aspect_TOTP_RIGHT
	Aspect_TOTP_RIGHT_UPPER = Aspect_TOTP_TOP | Aspect_TOTP_RIGHT
Aspect_TOTP_CENTER = Aspect_TypeOfTriedronPosition.Aspect_TOTP_CENTER
Aspect_TOTP_TOP = Aspect_TypeOfTriedronPosition.Aspect_TOTP_TOP
Aspect_TOTP_BOTTOM = Aspect_TypeOfTriedronPosition.Aspect_TOTP_BOTTOM
Aspect_TOTP_LEFT = Aspect_TypeOfTriedronPosition.Aspect_TOTP_LEFT
Aspect_TOTP_RIGHT = Aspect_TypeOfTriedronPosition.Aspect_TOTP_RIGHT
Aspect_TOTP_LEFT_LOWER = Aspect_TypeOfTriedronPosition.Aspect_TOTP_LEFT_LOWER
Aspect_TOTP_LEFT_UPPER = Aspect_TypeOfTriedronPosition.Aspect_TOTP_LEFT_UPPER
Aspect_TOTP_RIGHT_LOWER = Aspect_TypeOfTriedronPosition.Aspect_TOTP_RIGHT_LOWER
Aspect_TOTP_RIGHT_UPPER = Aspect_TypeOfTriedronPosition.Aspect_TOTP_RIGHT_UPPER

class Aspect_VKeyBasic(IntEnum):
	Aspect_VKey_UNKNOWN = 0
	Aspect_VKey_A = 1
	Aspect_VKey_B = 2
	Aspect_VKey_C = 3
	Aspect_VKey_D = 4
	Aspect_VKey_E = 5
	Aspect_VKey_F = 6
	Aspect_VKey_G = 7
	Aspect_VKey_H = 8
	Aspect_VKey_I = 9
	Aspect_VKey_J = 10
	Aspect_VKey_K = 11
	Aspect_VKey_L = 12
	Aspect_VKey_M = 13
	Aspect_VKey_N = 14
	Aspect_VKey_O = 15
	Aspect_VKey_P = 16
	Aspect_VKey_Q = 17
	Aspect_VKey_R = 18
	Aspect_VKey_S = 19
	Aspect_VKey_T = 20
	Aspect_VKey_U = 21
	Aspect_VKey_V = 22
	Aspect_VKey_W = 23
	Aspect_VKey_X = 24
	Aspect_VKey_Y = 25
	Aspect_VKey_Z = 26
	Aspect_VKey_0 = 27
	Aspect_VKey_1 = 28
	Aspect_VKey_2 = 29
	Aspect_VKey_3 = 30
	Aspect_VKey_4 = 31
	Aspect_VKey_5 = 32
	Aspect_VKey_6 = 33
	Aspect_VKey_7 = 34
	Aspect_VKey_8 = 35
	Aspect_VKey_9 = 36
	Aspect_VKey_F1 = 37
	Aspect_VKey_F2 = 38
	Aspect_VKey_F3 = 39
	Aspect_VKey_F4 = 40
	Aspect_VKey_F5 = 41
	Aspect_VKey_F6 = 42
	Aspect_VKey_F7 = 43
	Aspect_VKey_F8 = 44
	Aspect_VKey_F9 = 45
	Aspect_VKey_F10 = 46
	Aspect_VKey_F11 = 47
	Aspect_VKey_F12 = 48
	Aspect_VKey_Up = 49
	Aspect_VKey_Down = 50
	Aspect_VKey_Left = 51
	Aspect_VKey_Right = 52
	Aspect_VKey_Plus = 53
	Aspect_VKey_Minus = 54
	Aspect_VKey_Equal = 55
	Aspect_VKey_PageUp = 56
	Aspect_VKey_PageDown = 57
	Aspect_VKey_Home = 58
	Aspect_VKey_End = 59
	Aspect_VKey_Escape = 60
	Aspect_VKey_Back = 61
	Aspect_VKey_Enter = 62
	Aspect_VKey_Backspace = 63
	Aspect_VKey_Space = 64
	Aspect_VKey_Delete = 65
	Aspect_VKey_Tilde = 66
	Aspect_VKey_Tab = 67
	Aspect_VKey_Comma = 68
	Aspect_VKey_Period = 69
	Aspect_VKey_Semicolon = 70
	Aspect_VKey_Slash = 71
	Aspect_VKey_BracketLeft = 72
	Aspect_VKey_Backslash = 73
	Aspect_VKey_BracketRight = 74
	Aspect_VKey_Apostrophe = 75
	Aspect_VKey_Numlock = 76
	Aspect_VKey_Scroll = 77
	Aspect_VKey_Numpad0 = 78
	Aspect_VKey_Numpad1 = 79
	Aspect_VKey_Numpad2 = 80
	Aspect_VKey_Numpad3 = 81
	Aspect_VKey_Numpad4 = 82
	Aspect_VKey_Numpad5 = 83
	Aspect_VKey_Numpad6 = 84
	Aspect_VKey_Numpad7 = 85
	Aspect_VKey_Numpad8 = 86
	Aspect_VKey_Numpad9 = 87
	Aspect_VKey_NumpadMultiply = 88
	Aspect_VKey_NumpadAdd = 89
	Aspect_VKey_NumpadSubtract = 90
	Aspect_VKey_NumpadDivide = 91
	Aspect_VKey_MediaNextTrack = 92
	Aspect_VKey_MediaPreviousTrack = 93
	Aspect_VKey_MediaStop = 94
	Aspect_VKey_MediaPlayPause = 95
	Aspect_VKey_VolumeMute = 96
	Aspect_VKey_VolumeDown = 97
	Aspect_VKey_VolumeUp = 98
	Aspect_VKey_BrowserBack = 99
	Aspect_VKey_BrowserForward = 100
	Aspect_VKey_BrowserRefresh = 101
	Aspect_VKey_BrowserStop = 102
	Aspect_VKey_BrowserSearch = 103
	Aspect_VKey_BrowserFavorites = 104
	Aspect_VKey_BrowserHome = 105
	Aspect_VKey_ViewTop = 106
	Aspect_VKey_ViewBottom = 107
	Aspect_VKey_ViewLeft = 108
	Aspect_VKey_ViewRight = 109
	Aspect_VKey_ViewFront = 110
	Aspect_VKey_ViewBack = 111
	Aspect_VKey_ViewAxoLeftProj = 112
	Aspect_VKey_ViewAxoRightProj = 113
	Aspect_VKey_ViewFitAll = 114
	Aspect_VKey_ViewRoll90CW = 115
	Aspect_VKey_ViewRoll90CCW = 116
	Aspect_VKey_ViewSwitchRotate = 117
	Aspect_VKey_Shift = 118
	Aspect_VKey_Control = 119
	Aspect_VKey_Alt = 120
	Aspect_VKey_Menu = 121
	Aspect_VKey_Meta = 122
	Aspect_VKey_NavInteract = 123
	Aspect_VKey_NavForward = 124
	Aspect_VKey_NavBackward = 125
	Aspect_VKey_NavSlideLeft = 126
	Aspect_VKey_NavSlideRight = 127
	Aspect_VKey_NavSlideUp = 128
	Aspect_VKey_NavSlideDown = 129
	Aspect_VKey_NavRollCCW = 130
	Aspect_VKey_NavRollCW = 131
	Aspect_VKey_NavLookLeft = 132
	Aspect_VKey_NavLookRight = 133
	Aspect_VKey_NavLookUp = 134
	Aspect_VKey_NavLookDown = 135
	Aspect_VKey_NavCrouch = 136
	Aspect_VKey_NavJump = 137
	Aspect_VKey_NavThrustForward = 138
	Aspect_VKey_NavThrustBackward = 139
	Aspect_VKey_NavThrustStop = 140
	Aspect_VKey_NavSpeedIncrease = 141
	Aspect_VKey_NavSpeedDecrease = 142
Aspect_VKey_UNKNOWN = Aspect_VKeyBasic.Aspect_VKey_UNKNOWN
Aspect_VKey_A = Aspect_VKeyBasic.Aspect_VKey_A
Aspect_VKey_B = Aspect_VKeyBasic.Aspect_VKey_B
Aspect_VKey_C = Aspect_VKeyBasic.Aspect_VKey_C
Aspect_VKey_D = Aspect_VKeyBasic.Aspect_VKey_D
Aspect_VKey_E = Aspect_VKeyBasic.Aspect_VKey_E
Aspect_VKey_F = Aspect_VKeyBasic.Aspect_VKey_F
Aspect_VKey_G = Aspect_VKeyBasic.Aspect_VKey_G
Aspect_VKey_H = Aspect_VKeyBasic.Aspect_VKey_H
Aspect_VKey_I = Aspect_VKeyBasic.Aspect_VKey_I
Aspect_VKey_J = Aspect_VKeyBasic.Aspect_VKey_J
Aspect_VKey_K = Aspect_VKeyBasic.Aspect_VKey_K
Aspect_VKey_L = Aspect_VKeyBasic.Aspect_VKey_L
Aspect_VKey_M = Aspect_VKeyBasic.Aspect_VKey_M
Aspect_VKey_N = Aspect_VKeyBasic.Aspect_VKey_N
Aspect_VKey_O = Aspect_VKeyBasic.Aspect_VKey_O
Aspect_VKey_P = Aspect_VKeyBasic.Aspect_VKey_P
Aspect_VKey_Q = Aspect_VKeyBasic.Aspect_VKey_Q
Aspect_VKey_R = Aspect_VKeyBasic.Aspect_VKey_R
Aspect_VKey_S = Aspect_VKeyBasic.Aspect_VKey_S
Aspect_VKey_T = Aspect_VKeyBasic.Aspect_VKey_T
Aspect_VKey_U = Aspect_VKeyBasic.Aspect_VKey_U
Aspect_VKey_V = Aspect_VKeyBasic.Aspect_VKey_V
Aspect_VKey_W = Aspect_VKeyBasic.Aspect_VKey_W
Aspect_VKey_X = Aspect_VKeyBasic.Aspect_VKey_X
Aspect_VKey_Y = Aspect_VKeyBasic.Aspect_VKey_Y
Aspect_VKey_Z = Aspect_VKeyBasic.Aspect_VKey_Z
Aspect_VKey_0 = Aspect_VKeyBasic.Aspect_VKey_0
Aspect_VKey_1 = Aspect_VKeyBasic.Aspect_VKey_1
Aspect_VKey_2 = Aspect_VKeyBasic.Aspect_VKey_2
Aspect_VKey_3 = Aspect_VKeyBasic.Aspect_VKey_3
Aspect_VKey_4 = Aspect_VKeyBasic.Aspect_VKey_4
Aspect_VKey_5 = Aspect_VKeyBasic.Aspect_VKey_5
Aspect_VKey_6 = Aspect_VKeyBasic.Aspect_VKey_6
Aspect_VKey_7 = Aspect_VKeyBasic.Aspect_VKey_7
Aspect_VKey_8 = Aspect_VKeyBasic.Aspect_VKey_8
Aspect_VKey_9 = Aspect_VKeyBasic.Aspect_VKey_9
Aspect_VKey_F1 = Aspect_VKeyBasic.Aspect_VKey_F1
Aspect_VKey_F2 = Aspect_VKeyBasic.Aspect_VKey_F2
Aspect_VKey_F3 = Aspect_VKeyBasic.Aspect_VKey_F3
Aspect_VKey_F4 = Aspect_VKeyBasic.Aspect_VKey_F4
Aspect_VKey_F5 = Aspect_VKeyBasic.Aspect_VKey_F5
Aspect_VKey_F6 = Aspect_VKeyBasic.Aspect_VKey_F6
Aspect_VKey_F7 = Aspect_VKeyBasic.Aspect_VKey_F7
Aspect_VKey_F8 = Aspect_VKeyBasic.Aspect_VKey_F8
Aspect_VKey_F9 = Aspect_VKeyBasic.Aspect_VKey_F9
Aspect_VKey_F10 = Aspect_VKeyBasic.Aspect_VKey_F10
Aspect_VKey_F11 = Aspect_VKeyBasic.Aspect_VKey_F11
Aspect_VKey_F12 = Aspect_VKeyBasic.Aspect_VKey_F12
Aspect_VKey_Up = Aspect_VKeyBasic.Aspect_VKey_Up
Aspect_VKey_Down = Aspect_VKeyBasic.Aspect_VKey_Down
Aspect_VKey_Left = Aspect_VKeyBasic.Aspect_VKey_Left
Aspect_VKey_Right = Aspect_VKeyBasic.Aspect_VKey_Right
Aspect_VKey_Plus = Aspect_VKeyBasic.Aspect_VKey_Plus
Aspect_VKey_Minus = Aspect_VKeyBasic.Aspect_VKey_Minus
Aspect_VKey_Equal = Aspect_VKeyBasic.Aspect_VKey_Equal
Aspect_VKey_PageUp = Aspect_VKeyBasic.Aspect_VKey_PageUp
Aspect_VKey_PageDown = Aspect_VKeyBasic.Aspect_VKey_PageDown
Aspect_VKey_Home = Aspect_VKeyBasic.Aspect_VKey_Home
Aspect_VKey_End = Aspect_VKeyBasic.Aspect_VKey_End
Aspect_VKey_Escape = Aspect_VKeyBasic.Aspect_VKey_Escape
Aspect_VKey_Back = Aspect_VKeyBasic.Aspect_VKey_Back
Aspect_VKey_Enter = Aspect_VKeyBasic.Aspect_VKey_Enter
Aspect_VKey_Backspace = Aspect_VKeyBasic.Aspect_VKey_Backspace
Aspect_VKey_Space = Aspect_VKeyBasic.Aspect_VKey_Space
Aspect_VKey_Delete = Aspect_VKeyBasic.Aspect_VKey_Delete
Aspect_VKey_Tilde = Aspect_VKeyBasic.Aspect_VKey_Tilde
Aspect_VKey_Tab = Aspect_VKeyBasic.Aspect_VKey_Tab
Aspect_VKey_Comma = Aspect_VKeyBasic.Aspect_VKey_Comma
Aspect_VKey_Period = Aspect_VKeyBasic.Aspect_VKey_Period
Aspect_VKey_Semicolon = Aspect_VKeyBasic.Aspect_VKey_Semicolon
Aspect_VKey_Slash = Aspect_VKeyBasic.Aspect_VKey_Slash
Aspect_VKey_BracketLeft = Aspect_VKeyBasic.Aspect_VKey_BracketLeft
Aspect_VKey_Backslash = Aspect_VKeyBasic.Aspect_VKey_Backslash
Aspect_VKey_BracketRight = Aspect_VKeyBasic.Aspect_VKey_BracketRight
Aspect_VKey_Apostrophe = Aspect_VKeyBasic.Aspect_VKey_Apostrophe
Aspect_VKey_Numlock = Aspect_VKeyBasic.Aspect_VKey_Numlock
Aspect_VKey_Scroll = Aspect_VKeyBasic.Aspect_VKey_Scroll
Aspect_VKey_Numpad0 = Aspect_VKeyBasic.Aspect_VKey_Numpad0
Aspect_VKey_Numpad1 = Aspect_VKeyBasic.Aspect_VKey_Numpad1
Aspect_VKey_Numpad2 = Aspect_VKeyBasic.Aspect_VKey_Numpad2
Aspect_VKey_Numpad3 = Aspect_VKeyBasic.Aspect_VKey_Numpad3
Aspect_VKey_Numpad4 = Aspect_VKeyBasic.Aspect_VKey_Numpad4
Aspect_VKey_Numpad5 = Aspect_VKeyBasic.Aspect_VKey_Numpad5
Aspect_VKey_Numpad6 = Aspect_VKeyBasic.Aspect_VKey_Numpad6
Aspect_VKey_Numpad7 = Aspect_VKeyBasic.Aspect_VKey_Numpad7
Aspect_VKey_Numpad8 = Aspect_VKeyBasic.Aspect_VKey_Numpad8
Aspect_VKey_Numpad9 = Aspect_VKeyBasic.Aspect_VKey_Numpad9
Aspect_VKey_NumpadMultiply = Aspect_VKeyBasic.Aspect_VKey_NumpadMultiply
Aspect_VKey_NumpadAdd = Aspect_VKeyBasic.Aspect_VKey_NumpadAdd
Aspect_VKey_NumpadSubtract = Aspect_VKeyBasic.Aspect_VKey_NumpadSubtract
Aspect_VKey_NumpadDivide = Aspect_VKeyBasic.Aspect_VKey_NumpadDivide
Aspect_VKey_MediaNextTrack = Aspect_VKeyBasic.Aspect_VKey_MediaNextTrack
Aspect_VKey_MediaPreviousTrack = Aspect_VKeyBasic.Aspect_VKey_MediaPreviousTrack
Aspect_VKey_MediaStop = Aspect_VKeyBasic.Aspect_VKey_MediaStop
Aspect_VKey_MediaPlayPause = Aspect_VKeyBasic.Aspect_VKey_MediaPlayPause
Aspect_VKey_VolumeMute = Aspect_VKeyBasic.Aspect_VKey_VolumeMute
Aspect_VKey_VolumeDown = Aspect_VKeyBasic.Aspect_VKey_VolumeDown
Aspect_VKey_VolumeUp = Aspect_VKeyBasic.Aspect_VKey_VolumeUp
Aspect_VKey_BrowserBack = Aspect_VKeyBasic.Aspect_VKey_BrowserBack
Aspect_VKey_BrowserForward = Aspect_VKeyBasic.Aspect_VKey_BrowserForward
Aspect_VKey_BrowserRefresh = Aspect_VKeyBasic.Aspect_VKey_BrowserRefresh
Aspect_VKey_BrowserStop = Aspect_VKeyBasic.Aspect_VKey_BrowserStop
Aspect_VKey_BrowserSearch = Aspect_VKeyBasic.Aspect_VKey_BrowserSearch
Aspect_VKey_BrowserFavorites = Aspect_VKeyBasic.Aspect_VKey_BrowserFavorites
Aspect_VKey_BrowserHome = Aspect_VKeyBasic.Aspect_VKey_BrowserHome
Aspect_VKey_ViewTop = Aspect_VKeyBasic.Aspect_VKey_ViewTop
Aspect_VKey_ViewBottom = Aspect_VKeyBasic.Aspect_VKey_ViewBottom
Aspect_VKey_ViewLeft = Aspect_VKeyBasic.Aspect_VKey_ViewLeft
Aspect_VKey_ViewRight = Aspect_VKeyBasic.Aspect_VKey_ViewRight
Aspect_VKey_ViewFront = Aspect_VKeyBasic.Aspect_VKey_ViewFront
Aspect_VKey_ViewBack = Aspect_VKeyBasic.Aspect_VKey_ViewBack
Aspect_VKey_ViewAxoLeftProj = Aspect_VKeyBasic.Aspect_VKey_ViewAxoLeftProj
Aspect_VKey_ViewAxoRightProj = Aspect_VKeyBasic.Aspect_VKey_ViewAxoRightProj
Aspect_VKey_ViewFitAll = Aspect_VKeyBasic.Aspect_VKey_ViewFitAll
Aspect_VKey_ViewRoll90CW = Aspect_VKeyBasic.Aspect_VKey_ViewRoll90CW
Aspect_VKey_ViewRoll90CCW = Aspect_VKeyBasic.Aspect_VKey_ViewRoll90CCW
Aspect_VKey_ViewSwitchRotate = Aspect_VKeyBasic.Aspect_VKey_ViewSwitchRotate
Aspect_VKey_Shift = Aspect_VKeyBasic.Aspect_VKey_Shift
Aspect_VKey_Control = Aspect_VKeyBasic.Aspect_VKey_Control
Aspect_VKey_Alt = Aspect_VKeyBasic.Aspect_VKey_Alt
Aspect_VKey_Menu = Aspect_VKeyBasic.Aspect_VKey_Menu
Aspect_VKey_Meta = Aspect_VKeyBasic.Aspect_VKey_Meta
Aspect_VKey_NavInteract = Aspect_VKeyBasic.Aspect_VKey_NavInteract
Aspect_VKey_NavForward = Aspect_VKeyBasic.Aspect_VKey_NavForward
Aspect_VKey_NavBackward = Aspect_VKeyBasic.Aspect_VKey_NavBackward
Aspect_VKey_NavSlideLeft = Aspect_VKeyBasic.Aspect_VKey_NavSlideLeft
Aspect_VKey_NavSlideRight = Aspect_VKeyBasic.Aspect_VKey_NavSlideRight
Aspect_VKey_NavSlideUp = Aspect_VKeyBasic.Aspect_VKey_NavSlideUp
Aspect_VKey_NavSlideDown = Aspect_VKeyBasic.Aspect_VKey_NavSlideDown
Aspect_VKey_NavRollCCW = Aspect_VKeyBasic.Aspect_VKey_NavRollCCW
Aspect_VKey_NavRollCW = Aspect_VKeyBasic.Aspect_VKey_NavRollCW
Aspect_VKey_NavLookLeft = Aspect_VKeyBasic.Aspect_VKey_NavLookLeft
Aspect_VKey_NavLookRight = Aspect_VKeyBasic.Aspect_VKey_NavLookRight
Aspect_VKey_NavLookUp = Aspect_VKeyBasic.Aspect_VKey_NavLookUp
Aspect_VKey_NavLookDown = Aspect_VKeyBasic.Aspect_VKey_NavLookDown
Aspect_VKey_NavCrouch = Aspect_VKeyBasic.Aspect_VKey_NavCrouch
Aspect_VKey_NavJump = Aspect_VKeyBasic.Aspect_VKey_NavJump
Aspect_VKey_NavThrustForward = Aspect_VKeyBasic.Aspect_VKey_NavThrustForward
Aspect_VKey_NavThrustBackward = Aspect_VKeyBasic.Aspect_VKey_NavThrustBackward
Aspect_VKey_NavThrustStop = Aspect_VKeyBasic.Aspect_VKey_NavThrustStop
Aspect_VKey_NavSpeedIncrease = Aspect_VKeyBasic.Aspect_VKey_NavSpeedIncrease
Aspect_VKey_NavSpeedDecrease = Aspect_VKeyBasic.Aspect_VKey_NavSpeedDecrease

class Aspect_WidthOfLine(IntEnum):
	Aspect_WOL_THIN = 0
	Aspect_WOL_MEDIUM = 1
	Aspect_WOL_THICK = 2
	Aspect_WOL_VERYTHICK = 3
	Aspect_WOL_USERDEFINED = 4
Aspect_WOL_THIN = Aspect_WidthOfLine.Aspect_WOL_THIN
Aspect_WOL_MEDIUM = Aspect_WidthOfLine.Aspect_WOL_MEDIUM
Aspect_WOL_THICK = Aspect_WidthOfLine.Aspect_WOL_THICK
Aspect_WOL_VERYTHICK = Aspect_WidthOfLine.Aspect_WOL_VERYTHICK
Aspect_WOL_USERDEFINED = Aspect_WidthOfLine.Aspect_WOL_USERDEFINED

class Aspect_XAtom(IntEnum):
	Aspect_XA_DELETE_WINDOW = 0
Aspect_XA_DELETE_WINDOW = Aspect_XAtom.Aspect_XA_DELETE_WINDOW

class Aspect_XRActionType(IntEnum):
	Aspect_XRActionType_InputDigital = 0
	Aspect_XRActionType_InputAnalog = 1
	Aspect_XRActionType_InputPose = 2
	Aspect_XRActionType_InputSkeletal = 3
	Aspect_XRActionType_OutputHaptic = 4
Aspect_XRActionType_InputDigital = Aspect_XRActionType.Aspect_XRActionType_InputDigital
Aspect_XRActionType_InputAnalog = Aspect_XRActionType.Aspect_XRActionType_InputAnalog
Aspect_XRActionType_InputPose = Aspect_XRActionType.Aspect_XRActionType_InputPose
Aspect_XRActionType_InputSkeletal = Aspect_XRActionType.Aspect_XRActionType_InputSkeletal
Aspect_XRActionType_OutputHaptic = Aspect_XRActionType.Aspect_XRActionType_OutputHaptic

class Aspect_XRGenericAction(IntEnum):
	Aspect_XRGenericAction_IsHeadsetOn = 0
	Aspect_XRGenericAction_InputAppMenu = 1
	Aspect_XRGenericAction_InputSysMenu = 2
	Aspect_XRGenericAction_InputTriggerPull = 3
	Aspect_XRGenericAction_InputTriggerClick = 4
	Aspect_XRGenericAction_InputGripClick = 5
	Aspect_XRGenericAction_InputTrackPadPosition = 6
	Aspect_XRGenericAction_InputTrackPadTouch = 7
	Aspect_XRGenericAction_InputTrackPadClick = 8
	Aspect_XRGenericAction_InputThumbstickPosition = 9
	Aspect_XRGenericAction_InputThumbstickTouch = 10
	Aspect_XRGenericAction_InputThumbstickClick = 11
	Aspect_XRGenericAction_InputPoseBase = 12
	Aspect_XRGenericAction_InputPoseFront = 13
	Aspect_XRGenericAction_InputPoseHandGrip = 14
	Aspect_XRGenericAction_InputPoseFingerTip = 15
	Aspect_XRGenericAction_OutputHaptic = 16
Aspect_XRGenericAction_IsHeadsetOn = Aspect_XRGenericAction.Aspect_XRGenericAction_IsHeadsetOn
Aspect_XRGenericAction_InputAppMenu = Aspect_XRGenericAction.Aspect_XRGenericAction_InputAppMenu
Aspect_XRGenericAction_InputSysMenu = Aspect_XRGenericAction.Aspect_XRGenericAction_InputSysMenu
Aspect_XRGenericAction_InputTriggerPull = Aspect_XRGenericAction.Aspect_XRGenericAction_InputTriggerPull
Aspect_XRGenericAction_InputTriggerClick = Aspect_XRGenericAction.Aspect_XRGenericAction_InputTriggerClick
Aspect_XRGenericAction_InputGripClick = Aspect_XRGenericAction.Aspect_XRGenericAction_InputGripClick
Aspect_XRGenericAction_InputTrackPadPosition = Aspect_XRGenericAction.Aspect_XRGenericAction_InputTrackPadPosition
Aspect_XRGenericAction_InputTrackPadTouch = Aspect_XRGenericAction.Aspect_XRGenericAction_InputTrackPadTouch
Aspect_XRGenericAction_InputTrackPadClick = Aspect_XRGenericAction.Aspect_XRGenericAction_InputTrackPadClick
Aspect_XRGenericAction_InputThumbstickPosition = Aspect_XRGenericAction.Aspect_XRGenericAction_InputThumbstickPosition
Aspect_XRGenericAction_InputThumbstickTouch = Aspect_XRGenericAction.Aspect_XRGenericAction_InputThumbstickTouch
Aspect_XRGenericAction_InputThumbstickClick = Aspect_XRGenericAction.Aspect_XRGenericAction_InputThumbstickClick
Aspect_XRGenericAction_InputPoseBase = Aspect_XRGenericAction.Aspect_XRGenericAction_InputPoseBase
Aspect_XRGenericAction_InputPoseFront = Aspect_XRGenericAction.Aspect_XRGenericAction_InputPoseFront
Aspect_XRGenericAction_InputPoseHandGrip = Aspect_XRGenericAction.Aspect_XRGenericAction_InputPoseHandGrip
Aspect_XRGenericAction_InputPoseFingerTip = Aspect_XRGenericAction.Aspect_XRGenericAction_InputPoseFingerTip
Aspect_XRGenericAction_OutputHaptic = Aspect_XRGenericAction.Aspect_XRGenericAction_OutputHaptic

class Aspect_XRTrackedDeviceRole(IntEnum):
	Aspect_XRTrackedDeviceRole_Head = 0
	Aspect_XRTrackedDeviceRole_LeftHand = 1
	Aspect_XRTrackedDeviceRole_RightHand = 2
	Aspect_XRTrackedDeviceRole_Other = 3
Aspect_XRTrackedDeviceRole_Head = Aspect_XRTrackedDeviceRole.Aspect_XRTrackedDeviceRole_Head
Aspect_XRTrackedDeviceRole_LeftHand = Aspect_XRTrackedDeviceRole.Aspect_XRTrackedDeviceRole_LeftHand
Aspect_XRTrackedDeviceRole_RightHand = Aspect_XRTrackedDeviceRole.Aspect_XRTrackedDeviceRole_RightHand
Aspect_XRTrackedDeviceRole_Other = Aspect_XRTrackedDeviceRole.Aspect_XRTrackedDeviceRole_Other


def Handle_Aspect_DisplayConnection_Create():
    return _Aspect.Handle_Aspect_DisplayConnection_Create()

def Handle_Aspect_DisplayConnection_DownCast(t):
    return _Aspect.Handle_Aspect_DisplayConnection_DownCast(t)

def Handle_Aspect_DisplayConnection_IsNull(t):
    return _Aspect.Handle_Aspect_DisplayConnection_IsNull(t)

def Handle_Aspect_Grid_Create():
    return _Aspect.Handle_Aspect_Grid_Create()

def Handle_Aspect_Grid_DownCast(t):
    return _Aspect.Handle_Aspect_Grid_DownCast(t)

def Handle_Aspect_Grid_IsNull(t):
    return _Aspect.Handle_Aspect_Grid_IsNull(t)

def Handle_Aspect_VKeySet_Create():
    return _Aspect.Handle_Aspect_VKeySet_Create()

def Handle_Aspect_VKeySet_DownCast(t):
    return _Aspect.Handle_Aspect_VKeySet_DownCast(t)

def Handle_Aspect_VKeySet_IsNull(t):
    return _Aspect.Handle_Aspect_VKeySet_IsNull(t)

def Handle_Aspect_Window_Create():
    return _Aspect.Handle_Aspect_Window_Create()

def Handle_Aspect_Window_DownCast(t):
    return _Aspect.Handle_Aspect_Window_DownCast(t)

def Handle_Aspect_Window_IsNull(t):
    return _Aspect.Handle_Aspect_Window_IsNull(t)

def Handle_Aspect_XRAction_Create():
    return _Aspect.Handle_Aspect_XRAction_Create()

def Handle_Aspect_XRAction_DownCast(t):
    return _Aspect.Handle_Aspect_XRAction_DownCast(t)

def Handle_Aspect_XRAction_IsNull(t):
    return _Aspect.Handle_Aspect_XRAction_IsNull(t)

def Handle_Aspect_XRActionSet_Create():
    return _Aspect.Handle_Aspect_XRActionSet_Create()

def Handle_Aspect_XRActionSet_DownCast(t):
    return _Aspect.Handle_Aspect_XRActionSet_DownCast(t)

def Handle_Aspect_XRActionSet_IsNull(t):
    return _Aspect.Handle_Aspect_XRActionSet_IsNull(t)

def Handle_Aspect_XRSession_Create():
    return _Aspect.Handle_Aspect_XRSession_Create()

def Handle_Aspect_XRSession_DownCast(t):
    return _Aspect.Handle_Aspect_XRSession_DownCast(t)

def Handle_Aspect_XRSession_IsNull(t):
    return _Aspect.Handle_Aspect_XRSession_IsNull(t)

def Handle_Aspect_OpenVRSession_Create():
    return _Aspect.Handle_Aspect_OpenVRSession_Create()

def Handle_Aspect_OpenVRSession_DownCast(t):
    return _Aspect.Handle_Aspect_OpenVRSession_DownCast(t)

def Handle_Aspect_OpenVRSession_IsNull(t):
    return _Aspect.Handle_Aspect_OpenVRSession_IsNull(t)
class Aspect_SequenceOfColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _Aspect.Aspect_SequenceOfColor_begin(self)

    def end(self):
        return _Aspect.Aspect_SequenceOfColor_end(self)

    def cbegin(self):
        return _Aspect.Aspect_SequenceOfColor_cbegin(self)

    def cend(self):
        return _Aspect.Aspect_SequenceOfColor_cend(self)

    def __init__(self, *args):
        _Aspect.Aspect_SequenceOfColor_swiginit(self, _Aspect.new_Aspect_SequenceOfColor(*args))

    def Size(self):
        return _Aspect.Aspect_SequenceOfColor_Size(self)

    def Length(self):
        return _Aspect.Aspect_SequenceOfColor_Length(self)

    def Lower(self):
        return _Aspect.Aspect_SequenceOfColor_Lower(self)

    def Upper(self):
        return _Aspect.Aspect_SequenceOfColor_Upper(self)

    def IsEmpty(self):
        return _Aspect.Aspect_SequenceOfColor_IsEmpty(self)

    def Reverse(self):
        return _Aspect.Aspect_SequenceOfColor_Reverse(self)

    def Exchange(self, I, J):
        return _Aspect.Aspect_SequenceOfColor_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _Aspect.Aspect_SequenceOfColor_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _Aspect.Aspect_SequenceOfColor_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _Aspect.Aspect_SequenceOfColor_Assign(self, theOther)

    def Set(self, theOther):
        return _Aspect.Aspect_SequenceOfColor_Set(self, theOther)

    def Remove(self, *args):
        return _Aspect.Aspect_SequenceOfColor_Remove(self, *args)

    def Append(self, *args):
        return _Aspect.Aspect_SequenceOfColor_Append(self, *args)

    def Prepend(self, *args):
        return _Aspect.Aspect_SequenceOfColor_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _Aspect.Aspect_SequenceOfColor_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _Aspect.Aspect_SequenceOfColor_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _Aspect.Aspect_SequenceOfColor_Split(self, theIndex, theSeq)

    def First(self):
        return _Aspect.Aspect_SequenceOfColor_First(self)

    def ChangeFirst(self):
        return _Aspect.Aspect_SequenceOfColor_ChangeFirst(self)

    def Last(self):
        return _Aspect.Aspect_SequenceOfColor_Last(self)

    def ChangeLast(self):
        return _Aspect.Aspect_SequenceOfColor_ChangeLast(self)

    def Value(self, theIndex):
        return _Aspect.Aspect_SequenceOfColor_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _Aspect.Aspect_SequenceOfColor_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _Aspect.Aspect_SequenceOfColor___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _Aspect.Aspect_SequenceOfColor_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _Aspect.delete_Aspect_SequenceOfColor

    def __len__(self):
        return self.Size()


# Register Aspect_SequenceOfColor in _Aspect:
_Aspect.Aspect_SequenceOfColor_swigregister(Aspect_SequenceOfColor)
class Aspect_TouchMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _Aspect.Aspect_TouchMap_begin(self)

    def end(self):
        return _Aspect.Aspect_TouchMap_end(self)

    def cbegin(self):
        return _Aspect.Aspect_TouchMap_cbegin(self)

    def cend(self):
        return _Aspect.Aspect_TouchMap_cend(self)

    def __init__(self, *args):
        _Aspect.Aspect_TouchMap_swiginit(self, _Aspect.new_Aspect_TouchMap(*args))

    def Exchange(self, theOther):
        return _Aspect.Aspect_TouchMap_Exchange(self, theOther)

    def Assign(self, theOther):
        return _Aspect.Aspect_TouchMap_Assign(self, theOther)

    def Set(self, theOther):
        return _Aspect.Aspect_TouchMap_Set(self, theOther)

    def ReSize(self, N):
        return _Aspect.Aspect_TouchMap_ReSize(self, N)

    def Add(self, theKey1, theItem):
        return _Aspect.Aspect_TouchMap_Add(self, theKey1, theItem)

    def Contains(self, theKey1):
        return _Aspect.Aspect_TouchMap_Contains(self, theKey1)

    def Substitute(self, theIndex, theKey1, theItem):
        return _Aspect.Aspect_TouchMap_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1, theIndex2):
        return _Aspect.Aspect_TouchMap_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self):
        return _Aspect.Aspect_TouchMap_RemoveLast(self)

    def RemoveFromIndex(self, theIndex):
        return _Aspect.Aspect_TouchMap_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1):
        return _Aspect.Aspect_TouchMap_RemoveKey(self, theKey1)

    def FindKey(self, theIndex):
        return _Aspect.Aspect_TouchMap_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex):
        return _Aspect.Aspect_TouchMap_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex):
        return _Aspect.Aspect_TouchMap_ChangeFromIndex(self, theIndex)

    def __call__(self, *args):
        return _Aspect.Aspect_TouchMap___call__(self, *args)

    def FindIndex(self, theKey1):
        return _Aspect.Aspect_TouchMap_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1):
        return _Aspect.Aspect_TouchMap_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1):
        return _Aspect.Aspect_TouchMap_Seek(self, theKey1)

    def ChangeSeek(self, theKey1):
        return _Aspect.Aspect_TouchMap_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args):
        return _Aspect.Aspect_TouchMap_FindFromKey(self, *args)

    def Clear(self, *args):
        return _Aspect.Aspect_TouchMap_Clear(self, *args)
    __swig_destroy__ = _Aspect.delete_Aspect_TouchMap

    def Size(self):
        return _Aspect.Aspect_TouchMap_Size(self)

# Register Aspect_TouchMap in _Aspect:
_Aspect.Aspect_TouchMap_swigregister(Aspect_TouchMap)
class Aspect_TrackedDevicePoseArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_begin(self)

    def end(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_end(self)

    def cbegin(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_cbegin(self)

    def cend(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_cend(self)

    def __init__(self, *args):
        _Aspect.Aspect_TrackedDevicePoseArray_swiginit(self, _Aspect.new_Aspect_TrackedDevicePoseArray(*args))

    def Init(self, theValue):
        return _Aspect.Aspect_TrackedDevicePoseArray_Init(self, theValue)

    def Size(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_Size(self)

    def Length(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_Length(self)

    def IsEmpty(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_IsEmpty(self)

    def Lower(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_Lower(self)

    def Upper(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_Upper(self)

    def IsDeletable(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_IsDeletable(self)

    def IsAllocated(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_IsAllocated(self)

    def Assign(self, theOther):
        return _Aspect.Aspect_TrackedDevicePoseArray_Assign(self, theOther)

    def Move(self, theOther):
        return _Aspect.Aspect_TrackedDevicePoseArray_Move(self, theOther)

    def Set(self, *args):
        return _Aspect.Aspect_TrackedDevicePoseArray_Set(self, *args)

    def First(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_First(self)

    def ChangeFirst(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_ChangeFirst(self)

    def Last(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_Last(self)

    def ChangeLast(self):
        return _Aspect.Aspect_TrackedDevicePoseArray_ChangeLast(self)

    def Value(self, theIndex):
        return _Aspect.Aspect_TrackedDevicePoseArray_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _Aspect.Aspect_TrackedDevicePoseArray_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _Aspect.Aspect_TrackedDevicePoseArray___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _Aspect.Aspect_TrackedDevicePoseArray_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _Aspect.Aspect_TrackedDevicePoseArray_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _Aspect.delete_Aspect_TrackedDevicePoseArray

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register Aspect_TrackedDevicePoseArray in _Aspect:
_Aspect.Aspect_TrackedDevicePoseArray_swigregister(Aspect_TrackedDevicePoseArray)
class Aspect_XRActionMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _Aspect.Aspect_XRActionMap_begin(self)

    def end(self):
        return _Aspect.Aspect_XRActionMap_end(self)

    def cbegin(self):
        return _Aspect.Aspect_XRActionMap_cbegin(self)

    def cend(self):
        return _Aspect.Aspect_XRActionMap_cend(self)

    def __init__(self, *args):
        _Aspect.Aspect_XRActionMap_swiginit(self, _Aspect.new_Aspect_XRActionMap(*args))

    def Exchange(self, theOther):
        return _Aspect.Aspect_XRActionMap_Exchange(self, theOther)

    def Assign(self, theOther):
        return _Aspect.Aspect_XRActionMap_Assign(self, theOther)

    def Set(self, theOther):
        return _Aspect.Aspect_XRActionMap_Set(self, theOther)

    def ReSize(self, N):
        return _Aspect.Aspect_XRActionMap_ReSize(self, N)

    def Add(self, theKey1, theItem):
        return _Aspect.Aspect_XRActionMap_Add(self, theKey1, theItem)

    def Contains(self, theKey1):
        return _Aspect.Aspect_XRActionMap_Contains(self, theKey1)

    def Substitute(self, theIndex, theKey1, theItem):
        return _Aspect.Aspect_XRActionMap_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1, theIndex2):
        return _Aspect.Aspect_XRActionMap_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self):
        return _Aspect.Aspect_XRActionMap_RemoveLast(self)

    def RemoveFromIndex(self, theIndex):
        return _Aspect.Aspect_XRActionMap_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1):
        return _Aspect.Aspect_XRActionMap_RemoveKey(self, theKey1)

    def FindKey(self, theIndex):
        return _Aspect.Aspect_XRActionMap_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex):
        return _Aspect.Aspect_XRActionMap_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex):
        return _Aspect.Aspect_XRActionMap_ChangeFromIndex(self, theIndex)

    def __call__(self, *args):
        return _Aspect.Aspect_XRActionMap___call__(self, *args)

    def FindIndex(self, theKey1):
        return _Aspect.Aspect_XRActionMap_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1):
        return _Aspect.Aspect_XRActionMap_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1):
        return _Aspect.Aspect_XRActionMap_Seek(self, theKey1)

    def ChangeSeek(self, theKey1):
        return _Aspect.Aspect_XRActionMap_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args):
        return _Aspect.Aspect_XRActionMap_FindFromKey(self, *args)

    def Clear(self, *args):
        return _Aspect.Aspect_XRActionMap_Clear(self, *args)
    __swig_destroy__ = _Aspect.delete_Aspect_XRActionMap

    def Size(self):
        return _Aspect.Aspect_XRActionMap_Size(self)

# Register Aspect_XRActionMap in _Aspect:
_Aspect.Aspect_XRActionMap_swigregister(Aspect_XRActionMap)
class Aspect_XRActionSetMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _Aspect.Aspect_XRActionSetMap_begin(self)

    def end(self):
        return _Aspect.Aspect_XRActionSetMap_end(self)

    def cbegin(self):
        return _Aspect.Aspect_XRActionSetMap_cbegin(self)

    def cend(self):
        return _Aspect.Aspect_XRActionSetMap_cend(self)

    def __init__(self, *args):
        _Aspect.Aspect_XRActionSetMap_swiginit(self, _Aspect.new_Aspect_XRActionSetMap(*args))

    def Exchange(self, theOther):
        return _Aspect.Aspect_XRActionSetMap_Exchange(self, theOther)

    def Assign(self, theOther):
        return _Aspect.Aspect_XRActionSetMap_Assign(self, theOther)

    def Set(self, theOther):
        return _Aspect.Aspect_XRActionSetMap_Set(self, theOther)

    def ReSize(self, N):
        return _Aspect.Aspect_XRActionSetMap_ReSize(self, N)

    def Add(self, theKey1, theItem):
        return _Aspect.Aspect_XRActionSetMap_Add(self, theKey1, theItem)

    def Contains(self, theKey1):
        return _Aspect.Aspect_XRActionSetMap_Contains(self, theKey1)

    def Substitute(self, theIndex, theKey1, theItem):
        return _Aspect.Aspect_XRActionSetMap_Substitute(self, theIndex, theKey1, theItem)

    def Swap(self, theIndex1, theIndex2):
        return _Aspect.Aspect_XRActionSetMap_Swap(self, theIndex1, theIndex2)

    def RemoveLast(self):
        return _Aspect.Aspect_XRActionSetMap_RemoveLast(self)

    def RemoveFromIndex(self, theIndex):
        return _Aspect.Aspect_XRActionSetMap_RemoveFromIndex(self, theIndex)

    def RemoveKey(self, theKey1):
        return _Aspect.Aspect_XRActionSetMap_RemoveKey(self, theKey1)

    def FindKey(self, theIndex):
        return _Aspect.Aspect_XRActionSetMap_FindKey(self, theIndex)

    def FindFromIndex(self, theIndex):
        return _Aspect.Aspect_XRActionSetMap_FindFromIndex(self, theIndex)

    def ChangeFromIndex(self, theIndex):
        return _Aspect.Aspect_XRActionSetMap_ChangeFromIndex(self, theIndex)

    def __call__(self, *args):
        return _Aspect.Aspect_XRActionSetMap___call__(self, *args)

    def FindIndex(self, theKey1):
        return _Aspect.Aspect_XRActionSetMap_FindIndex(self, theKey1)

    def ChangeFromKey(self, theKey1):
        return _Aspect.Aspect_XRActionSetMap_ChangeFromKey(self, theKey1)

    def Seek(self, theKey1):
        return _Aspect.Aspect_XRActionSetMap_Seek(self, theKey1)

    def ChangeSeek(self, theKey1):
        return _Aspect.Aspect_XRActionSetMap_ChangeSeek(self, theKey1)

    def FindFromKey(self, *args):
        return _Aspect.Aspect_XRActionSetMap_FindFromKey(self, *args)

    def Clear(self, *args):
        return _Aspect.Aspect_XRActionSetMap_Clear(self, *args)
    __swig_destroy__ = _Aspect.delete_Aspect_XRActionSetMap

    def Size(self):
        return _Aspect.Aspect_XRActionSetMap_Size(self)

# Register Aspect_XRActionSetMap in _Aspect:
_Aspect.Aspect_XRActionSetMap_swigregister(Aspect_XRActionSetMap)
class Aspect_Background(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a window background. default color: noc_matragray.

        Parameters
        ----------
        AColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Creates a window background with the colour <acolor>.

        """
        _Aspect.Aspect_Background_swiginit(self, _Aspect.new_Aspect_Background(*args))

    def Color(self, *args):
        r"""
        Return
        -------
        Quantity_Color

        Description
        -----------
        Returns the colour of the window background <self>.

        """
        return _Aspect.Aspect_Background_Color(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Aspect.Aspect_Background_DumpJsonToString(self, depth)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        AColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Modifies the colour of the window background <self>.

        """
        return _Aspect.Aspect_Background_SetColor(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_Background

# Register Aspect_Background in _Aspect:
_Aspect.Aspect_Background_swigregister(Aspect_Background)
class Aspect_DisplayConnection(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetDefaultFBConfig(self, *args):
        r"""
        Return
        -------
        Aspect_FBConfig

        Description
        -----------
        Return native window fb config (glxfbconfig on xlib).

        """
        return _Aspect.Aspect_DisplayConnection_GetDefaultFBConfig(self, *args)

    def GetDefaultVisualInfo(self, *args):
        r"""
        Return
        -------
        Aspect_XVisualInfo *

        Description
        -----------
        Return default window visual or null when undefined.

        """
        return _Aspect.Aspect_DisplayConnection_GetDefaultVisualInfo(self, *args)

    def GetDisplayAspect(self, *args):
        r"""
        Return
        -------
        Aspect_XDisplay *

        Description
        -----------
        Return pointer to display structure that serves as the connection to the x server.

        """
        return _Aspect.Aspect_DisplayConnection_GetDisplayAspect(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Aspect_DisplayConnection_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Aspect_DisplayConnection(self):
    	pass

    @methodnotwrapped
    def GetAtom(self):
    	pass

    @methodnotwrapped
    def GetDisplay(self):
    	pass

    @methodnotwrapped
    def GetDisplayName(self):
    	pass

    @methodnotwrapped
    def Init(self):
    	pass

    @methodnotwrapped
    def IsOwnDisplay(self):
    	pass

    @methodnotwrapped
    def GetAtomX(self):
    	pass

    @methodnotwrapped
    def GetDefaultVisualInfoX(self):
    	pass

    @methodnotwrapped
    def SetDefaultVisualInfo(self):
    	pass


    def __init__(self):
        _Aspect.Aspect_DisplayConnection_swiginit(self, _Aspect.new_Aspect_DisplayConnection())
    __swig_destroy__ = _Aspect.delete_Aspect_DisplayConnection

# Register Aspect_DisplayConnection in _Aspect:
_Aspect.Aspect_DisplayConnection_swigregister(Aspect_DisplayConnection)
class Aspect_GenId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an available set of identifiers with the lower bound 0 and the upper bound int_max / 2.

        Parameters
        ----------
        theLow: int
        theUpper: int

        Return
        -------
        None

        Description
        -----------
        Creates an available set of identifiers with specified range. raises identdefinitionerror if theupper is less than thelow.

        """
        _Aspect.Aspect_GenId_swiginit(self, _Aspect.new_Aspect_GenId(*args))

    def Available(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of available identifiers.

        """
        return _Aspect.Aspect_GenId_Available(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Aspect.Aspect_GenId_DumpJsonToString(self, depth)

    def Free(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Free all identifiers - make the whole range available again.

        Parameters
        ----------
        theId: int

        Return
        -------
        None

        Description
        -----------
        Free specified identifier. warning - method has no protection against double-freeing!.

        """
        return _Aspect.Aspect_GenId_Free(self, *args)

    def HasFree(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there are available identifiers in range.

        """
        return _Aspect.Aspect_GenId_HasFree(self, *args)

    def Lower(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the lower identifier in range.

        """
        return _Aspect.Aspect_GenId_Lower(self, *args)

    def Next(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the next available identifier. warning: raises identdefinitionerror if all identifiers are busy.

        Parameters
        ----------

        Return
        -------
        theId: int

        Description
        -----------
        Generates the next available identifier. @param theid [out] generated identifier return false if all identifiers are busy.

        """
        return _Aspect.Aspect_GenId_Next(self, *args)

    def Upper(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the upper identifier in range.

        """
        return _Aspect.Aspect_GenId_Upper(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_GenId

# Register Aspect_GenId in _Aspect:
_Aspect.Aspect_GenId_swigregister(Aspect_GenId)
class Aspect_Grid(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Activate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Activates the grid. the hit method will return gridx and gridx computed according to the steps of the grid.

        """
        return _Aspect.Aspect_Grid_Activate(self, *args)

    def Colors(self, *args):
        r"""

        Parameters
        ----------
        aColor: Quantity_Color
        aTenthColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Returns the colors of the grid.

        """
        return _Aspect.Aspect_Grid_Colors(self, *args)

    def Compute(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        gridX: float
        gridY: float

        Description
        -----------
        Returns the point of the grid the closest to the point x,y.

        """
        return _Aspect.Aspect_Grid_Compute(self, *args)

    def Deactivate(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Deactivates the grid. the hit method will return gridx and gridx as the enter value x & y.

        """
        return _Aspect.Aspect_Grid_Deactivate(self, *args)

    def Display(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Display the grid at screen.

        """
        return _Aspect.Aspect_Grid_Display(self, *args)

    def DrawMode(self, *args):
        r"""
        Return
        -------
        Aspect_GridDrawMode

        Description
        -----------
        Returns the grid aspect.

        """
        return _Aspect.Aspect_Grid_DrawMode(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Aspect.Aspect_Grid_DumpJsonToString(self, depth)

    def Erase(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Erase the grid from screen.

        """
        return _Aspect.Aspect_Grid_Erase(self, *args)

    def Hit(self, *args):
        r"""

        Parameters
        ----------
        X: float
        Y: float

        Return
        -------
        gridX: float
        gridY: float

        Description
        -----------
        Returns the point of the grid the closest to the point x,y if the grid is active. if the grid is not active returns x,y.

        """
        return _Aspect.Aspect_Grid_Hit(self, *args)

    def Init(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Aspect.Aspect_Grid_Init(self, *args)

    def IsActive(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when the grid is active.

        """
        return _Aspect.Aspect_Grid_IsActive(self, *args)

    def IsDisplayed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when the grid is displayed at screen.

        """
        return _Aspect.Aspect_Grid_IsDisplayed(self, *args)

    def Rotate(self, *args):
        r"""

        Parameters
        ----------
        anAngle: float

        Return
        -------
        None

        Description
        -----------
        Rotate the grid from a relative angle.

        """
        return _Aspect.Aspect_Grid_Rotate(self, *args)

    def RotationAngle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the x angle of the grid.

        """
        return _Aspect.Aspect_Grid_RotationAngle(self, *args)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        aColor: Quantity_Color
        aTenthColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Change the colors of the grid.

        """
        return _Aspect.Aspect_Grid_SetColors(self, *args)

    def SetDrawMode(self, *args):
        r"""

        Parameters
        ----------
        aDrawMode: Aspect_GridDrawMode

        Return
        -------
        None

        Description
        -----------
        Change the grid aspect.

        """
        return _Aspect.Aspect_Grid_SetDrawMode(self, *args)

    def SetRotationAngle(self, *args):
        r"""

        Parameters
        ----------
        anAngle: float

        Return
        -------
        None

        Description
        -----------
        Defines the orientation of the grid.

        """
        return _Aspect.Aspect_Grid_SetRotationAngle(self, *args)

    def SetXOrigin(self, *args):
        r"""

        Parameters
        ----------
        anOrigin: float

        Return
        -------
        None

        Description
        -----------
        Defines the x origin of the grid.

        """
        return _Aspect.Aspect_Grid_SetXOrigin(self, *args)

    def SetYOrigin(self, *args):
        r"""

        Parameters
        ----------
        anOrigin: float

        Return
        -------
        None

        Description
        -----------
        Defines the y origin of the grid.

        """
        return _Aspect.Aspect_Grid_SetYOrigin(self, *args)

    def Translate(self, *args):
        r"""

        Parameters
        ----------
        aDx: float
        aDy: float

        Return
        -------
        None

        Description
        -----------
        Translate the grid from a relative distance.

        """
        return _Aspect.Aspect_Grid_Translate(self, *args)

    def XOrigin(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the x origin of the grid.

        """
        return _Aspect.Aspect_Grid_XOrigin(self, *args)

    def YOrigin(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the x origin of the grid.

        """
        return _Aspect.Aspect_Grid_YOrigin(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Aspect_Grid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_Grid

# Register Aspect_Grid in _Aspect:
_Aspect.Aspect_Grid_swigregister(Aspect_Grid)
class Aspect_ScrollDelta(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Delta = property(_Aspect.Aspect_ScrollDelta_Delta_get, _Aspect.Aspect_ScrollDelta_Delta_set)
    Flags = property(_Aspect.Aspect_ScrollDelta_Flags_get, _Aspect.Aspect_ScrollDelta_Flags_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        thePnt: NCollection_Vec2<int>
        theValue: float
        theFlags: Aspect_VKeyFlags (optional, default to Aspect_VKeyFlags_NONE)

        Return
        -------
        None

        Description
        -----------
        Constructor.

        Parameters
        ----------
        theValue: float
        theFlags: Aspect_VKeyFlags (optional, default to Aspect_VKeyFlags_NONE)

        Return
        -------
        None

        Description
        -----------
        Constructor with undefined point.

        """
        _Aspect.Aspect_ScrollDelta_swiginit(self, _Aspect.new_Aspect_ScrollDelta(*args))

    def HasPoint(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if action has point defined.

        """
        return _Aspect.Aspect_ScrollDelta_HasPoint(self, *args)

    def ResetPoint(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset at point.

        """
        return _Aspect.Aspect_ScrollDelta_ResetPoint(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_ScrollDelta

# Register Aspect_ScrollDelta in _Aspect:
_Aspect.Aspect_ScrollDelta_swigregister(Aspect_ScrollDelta)
class Aspect_SkydomeBackground(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a window skydome background. by default skydome is initialized with sun at its zenith (0.0, 1.0, 0.0), average clody (0.2), zero time parameter, zero fogginess, 512x512 texture size.

        Parameters
        ----------
        theSunDirection: gp_Dir
        theCloudiness: float
        theTime: float
        theFogginess: float
        theSize: int

        Return
        -------
        None

        Description
        -----------
        Creates a window skydome background with given parameters. @param[in] thesundirection direction to the sun (moon). sun direction with negative y component  represents moon with (-x, -y, -z) direction. @param[in] thecloudiness cloud intensity, 0.0 means no clouds at all and 1.0 - high clody. @param[in] thetime time parameter of simulation. might be tweaked to slightly change appearance. @param[in] thefogginess fog intensity, 0.0 means no fog and 1.0 - high fogginess @param[in] thesize size of cubemap side in pixels.

        """
        _Aspect.Aspect_SkydomeBackground_swiginit(self, _Aspect.new_Aspect_SkydomeBackground(*args))

    def Cloudiness(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Get cloud intensity. by default this value is 0.2 0.0 means no clouds at all and 1.0 - high clody.

        """
        return _Aspect.Aspect_SkydomeBackground_Cloudiness(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Aspect.Aspect_SkydomeBackground_DumpJsonToString(self, depth)

    def Fogginess(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Get fog intensity. by default this value is 0.0 0.0 means no fog and 1.0 - high fogginess.

        """
        return _Aspect.Aspect_SkydomeBackground_Fogginess(self, *args)

    def SetCloudiness(self, *args):
        r"""

        Parameters
        ----------
        theCloudiness: float

        Return
        -------
        None

        Description
        -----------
        Set cloud intensity. by default this value is 0.2 0.0 means no clouds at all and 1.0 - high clody.

        """
        return _Aspect.Aspect_SkydomeBackground_SetCloudiness(self, *args)

    def SetFogginess(self, *args):
        r"""

        Parameters
        ----------
        theFogginess: float

        Return
        -------
        None

        Description
        -----------
        Set fog intensity. by default this value is 0.0 0.0 means no fog and 1.0 - high fogginess.

        """
        return _Aspect.Aspect_SkydomeBackground_SetFogginess(self, *args)

    def SetSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: int

        Return
        -------
        None

        Description
        -----------
        Set size of cubemap. by default this value is 512.

        """
        return _Aspect.Aspect_SkydomeBackground_SetSize(self, *args)

    def SetSunDirection(self, *args):
        r"""

        Parameters
        ----------
        theSunDirection: gp_Dir

        Return
        -------
        None

        Description
        -----------
        Set sun direction. by default this value is (0, 1, 0) sun direction with negative y component represents moon with (-x, -y, -z) direction.

        """
        return _Aspect.Aspect_SkydomeBackground_SetSunDirection(self, *args)

    def SetTimeParameter(self, *args):
        r"""

        Parameters
        ----------
        theTime: float

        Return
        -------
        None

        Description
        -----------
        Set time of cloud simulation. by default this value is 0.0 this value might be tweaked to slightly change appearance of clouds.

        """
        return _Aspect.Aspect_SkydomeBackground_SetTimeParameter(self, *args)

    def Size(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Get size of cubemap. by default this value is 512.

        """
        return _Aspect.Aspect_SkydomeBackground_Size(self, *args)

    def SunDirection(self, *args):
        r"""
        Return
        -------
        gp_Dir

        Description
        -----------
        Get sun direction. by default this value is (0, 1, 0) sun direction with negative y component represents moon with (-x, -y, -z) direction.

        """
        return _Aspect.Aspect_SkydomeBackground_SunDirection(self, *args)

    def TimeParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Get time of cloud simulation. by default this value is 0.0 this value might be tweaked to slightly change appearance of clouds.

        """
        return _Aspect.Aspect_SkydomeBackground_TimeParameter(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_SkydomeBackground

# Register Aspect_SkydomeBackground in _Aspect:
_Aspect.Aspect_SkydomeBackground_swigregister(Aspect_SkydomeBackground)
class Aspect_Touch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsPreciseDevice = property(_Aspect.Aspect_Touch_IsPreciseDevice_get, _Aspect.Aspect_Touch_IsPreciseDevice_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        Parameters
        ----------
        thePnt: NCollection_Vec2<float>
        theIsPreciseDevice: bool

        Return
        -------
        None

        Description
        -----------
        Constructor with initialization.

        Parameters
        ----------
        theX: float
        theY: float
        theIsPreciseDevice: bool

        Return
        -------
        None

        Description
        -----------
        Constructor with initialization.

        """
        _Aspect.Aspect_Touch_swiginit(self, _Aspect.new_Aspect_Touch(*args))

    def Delta(self, *args):
        r"""
        Return
        -------
        NCollection_Vec2<float >

        Description
        -----------
        Return values delta.

        """
        return _Aspect.Aspect_Touch_Delta(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_Touch

# Register Aspect_Touch in _Aspect:
_Aspect.Aspect_Touch_swigregister(Aspect_Touch)
class Aspect_TrackedDevicePose(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Orientation = property(_Aspect.Aspect_TrackedDevicePose_Orientation_get, _Aspect.Aspect_TrackedDevicePose_Orientation_set)
    Velocity = property(_Aspect.Aspect_TrackedDevicePose_Velocity_get, _Aspect.Aspect_TrackedDevicePose_Velocity_set)
    AngularVelocity = property(_Aspect.Aspect_TrackedDevicePose_AngularVelocity_get, _Aspect.Aspect_TrackedDevicePose_AngularVelocity_set)
    IsValidPose = property(_Aspect.Aspect_TrackedDevicePose_IsValidPose_get, _Aspect.Aspect_TrackedDevicePose_IsValidPose_set)
    IsConnectedDevice = property(_Aspect.Aspect_TrackedDevicePose_IsConnectedDevice_get, _Aspect.Aspect_TrackedDevicePose_IsConnectedDevice_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _Aspect.Aspect_TrackedDevicePose_swiginit(self, _Aspect.new_Aspect_TrackedDevicePose(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_TrackedDevicePose

# Register Aspect_TrackedDevicePose in _Aspect:
_Aspect.Aspect_TrackedDevicePose_swigregister(Aspect_TrackedDevicePose)
class Aspect_VKeySet(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Main constructor.

        """
        _Aspect.Aspect_VKeySet_swiginit(self, _Aspect.new_Aspect_VKeySet(*args))

    def DownTime(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey

        Return
        -------
        double

        Description
        -----------
        Return timestamp of press event.

        """
        return _Aspect.Aspect_VKeySet_DownTime(self, *args)

    def HoldDuration(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey
        theTime: double

        Return
        -------
        theDuration: double

        Description
        -----------
        Return duration of the button in pressed state. @param thekey key to check @param thetime current time (for computing duration from key down time) @param theduration key press duration return true if key was in pressed state.

        Parameters
        ----------
        theKey: Aspect_VKey
        theTime: double

        Return
        -------
        theDuration: double
        thePressure: double

        Description
        -----------
        Return duration of the button in pressed state. @param thekey key to check @param thetime current time (for computing duration from key down time) @param theduration key press duration @param thepressure key pressure return true if key was in pressed state.

        """
        return _Aspect.Aspect_VKeySet_HoldDuration(self, *args)

    def IsFreeKey(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey

        Return
        -------
        bool

        Description
        -----------
        Return true if key is in free state.

        """
        return _Aspect.Aspect_VKeySet_IsFreeKey(self, *args)

    def IsKeyDown(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey

        Return
        -------
        bool

        Description
        -----------
        Return true if key is in pressed state.

        """
        return _Aspect.Aspect_VKeySet_IsKeyDown(self, *args)

    def KeyDown(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey
        theTime: double
        thePressure: double (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        Press key. @param thekey key pressed @param thetime event timestamp.

        """
        return _Aspect.Aspect_VKeySet_KeyDown(self, *args)

    def KeyFromAxis(self, *args):
        r"""

        Parameters
        ----------
        theNegative: Aspect_VKey
        thePositive: Aspect_VKey
        theTime: double
        thePressure: double

        Return
        -------
        None

        Description
        -----------
        Simulate key up/down events from axis value.

        """
        return _Aspect.Aspect_VKeySet_KeyFromAxis(self, *args)

    def KeyUp(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey
        theTime: double

        Return
        -------
        None

        Description
        -----------
        Release key. @param thekey key pressed @param thetime event timestamp.

        """
        return _Aspect.Aspect_VKeySet_KeyUp(self, *args)

    def Modifiers(self, *args):
        r"""
        Return
        -------
        Aspect_VKeyFlags

        Description
        -----------
        Return active modifiers.

        """
        return _Aspect.Aspect_VKeySet_Modifiers(self, *args)

    def Mutex(self, *args):
        r"""
        Return
        -------
        Standard_Mutex

        Description
        -----------
        Return mutex for thread-safe updates. all operations in class implicitly locks this mutex, so this method could be used only for batch processing of keys.

        """
        return _Aspect.Aspect_VKeySet_Mutex(self, *args)

    def Reset(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset the key state into unpressed state.

        """
        return _Aspect.Aspect_VKeySet_Reset(self, *args)

    def TimeUp(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey

        Return
        -------
        double

        Description
        -----------
        Return timestamp of release event.

        """
        return _Aspect.Aspect_VKeySet_TimeUp(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Aspect_VKeySet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_VKeySet

# Register Aspect_VKeySet in _Aspect:
_Aspect.Aspect_VKeySet_swigregister(Aspect_VKeySet)
class Aspect_Window(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Background(self, *args):
        r"""
        Return
        -------
        Aspect_Background

        Description
        -----------
        Returns the window background.

        """
        return _Aspect.Aspect_Window_Background(self, *args)

    def BackgroundFillMethod(self, *args):
        r"""
        Return
        -------
        Aspect_FillMethod

        Description
        -----------
        Returns the current image background fill mode.

        """
        return _Aspect.Aspect_Window_BackgroundFillMethod(self, *args)

    def ConvertPointFromBacking(self, *args):
        r"""

        Parameters
        ----------
        thePnt: Graphic3d_Vec2d

        Return
        -------
        Graphic3d_Vec2d

        Description
        -----------
        Convert point from backing store units to logical units.

        """
        return _Aspect.Aspect_Window_ConvertPointFromBacking(self, *args)

    def ConvertPointToBacking(self, *args):
        r"""

        Parameters
        ----------
        thePnt: Graphic3d_Vec2d

        Return
        -------
        Graphic3d_Vec2d

        Description
        -----------
        Convert point from logical units into backing store units.

        """
        return _Aspect.Aspect_Window_ConvertPointToBacking(self, *args)

    def DevicePixelRatio(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return device pixel ratio (logical to backing store scale factor).

        """
        return _Aspect.Aspect_Window_DevicePixelRatio(self, *args)

    def Dimensions(self, *args):
        r"""
        Return
        -------
        Graphic3d_Vec2i

        Description
        -----------
        Returns window dimensions.

        """
        return _Aspect.Aspect_Window_Dimensions(self, *args)

    def DisplayConnection(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Aspect_DisplayConnection>

        Description
        -----------
        Returns connection to display or null.

        """
        return _Aspect.Aspect_Window_DisplayConnection(self, *args)

    def DoMapping(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Apply the mapping change to the window <self>. and returns true if the window is mapped at screen.

        """
        return _Aspect.Aspect_Window_DoMapping(self, *args)

    def DoResize(self, *args):
        r"""
        Return
        -------
        Aspect_TypeOfResize

        Description
        -----------
        Apply the resizing to the window <self>.

        """
        return _Aspect.Aspect_Window_DoResize(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Aspect.Aspect_Window_DumpJsonToString(self, depth)

    def GradientBackground(self, *args):
        r"""
        Return
        -------
        Aspect_GradientBackground

        Description
        -----------
        Returns the window gradient background.

        """
        return _Aspect.Aspect_Window_GradientBackground(self, *args)

    def InvalidateContent(self, *args):
        r"""

        Parameters
        ----------
        theDisp: Aspect_DisplayConnection

        Return
        -------
        None

        Description
        -----------
        Invalidate entire window content. //! implementation is expected to allow calling this method from non-gui thread, e.g. by queuing exposure event into window message queue or in other thread-safe manner. //! optional display argument should be passed when called from non-gui thread on platforms implementing thread-unsafe connections to display. null can be passed instead otherwise.

        """
        return _Aspect.Aspect_Window_InvalidateContent(self, *args)

    def IsMapped(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the window <self> is opened and false if the window is closed.

        """
        return _Aspect.Aspect_Window_IsMapped(self, *args)

    def IsVirtual(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the window <self> is virtual.

        """
        return _Aspect.Aspect_Window_IsVirtual(self, *args)

    def Map(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Opens the window <self>.

        """
        return _Aspect.Aspect_Window_Map(self, *args)

    def NativeFBConfig(self, *args):
        r"""
        Return
        -------
        Aspect_FBConfig

        Description
        -----------
        Returns native window fb config (glxfbconfig on xlib).

        """
        return _Aspect.Aspect_Window_NativeFBConfig(self, *args)

    def Position(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        X1: int
        Y1: int
        X2: int
        Y2: int

        Description
        -----------
        Returns the window position in pixel.

        """
        return _Aspect.Aspect_Window_Position(self, *args)

    def Ratio(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the window ratio equal to the physical width/height dimensions.

        """
        return _Aspect.Aspect_Window_Ratio(self, *args)

    def SetBackground(self, *args):
        r"""

        Parameters
        ----------
        theBack: Aspect_Background

        Return
        -------
        None

        Description
        -----------
        Modifies the window background.

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Modifies the window background.

        Parameters
        ----------
        theBackground: Aspect_GradientBackground

        Return
        -------
        None

        Description
        -----------
        Modifies the window gradient background.

        Parameters
        ----------
        theFirstColor: Quantity_Color
        theSecondColor: Quantity_Color
        theFillMethod: Aspect_GradientFillMethod

        Return
        -------
        None

        Description
        -----------
        Modifies the window gradient background.

        """
        return _Aspect.Aspect_Window_SetBackground(self, *args)

    def SetTitle(self, *args):
        r"""

        Parameters
        ----------
        theTitle: str

        Return
        -------
        None

        Description
        -----------
        Sets window title.

        """
        return _Aspect.Aspect_Window_SetTitle(self, *args)

    def SetVirtual(self, *args):
        r"""

        Parameters
        ----------
        theVirtual: bool

        Return
        -------
        None

        Description
        -----------
        Setup the virtual state.

        """
        return _Aspect.Aspect_Window_SetVirtual(self, *args)

    def Size(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        Width: int
        Height: int

        Description
        -----------
        Returns the window size in pixel.

        """
        return _Aspect.Aspect_Window_Size(self, *args)

    def TopLeft(self, *args):
        r"""
        Return
        -------
        Graphic3d_Vec2i

        Description
        -----------
        Returns window top-left corner.

        """
        return _Aspect.Aspect_Window_TopLeft(self, *args)

    def Unmap(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Closes the window <self>.

        """
        return _Aspect.Aspect_Window_Unmap(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Aspect_Window_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def NativeHandle(self):
    	pass

    @methodnotwrapped
    def NativeParentHandle(self):
    	pass

    __swig_destroy__ = _Aspect.delete_Aspect_Window

# Register Aspect_Window in _Aspect:
_Aspect.Aspect_Window_swigregister(Aspect_Window)
class Aspect_WindowInputListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddTouchPoint(self, *args):
        r"""

        Parameters
        ----------
        theId: Standard_Size
        thePnt: Graphic3d_Vec2d
        theClearBefore: bool (optional, default to false)

        Return
        -------
        None

        Description
        -----------
        Add touch point with the given id. this method is expected to be called from ui thread. @param theid touch unique identifier @param thepnt touch coordinates @param theclearbefore if true previously registered touches will be removed.

        """
        return _Aspect.Aspect_WindowInputListener_AddTouchPoint(self, *args)

    def Change3dMouseIsNoRotate(self, *args):
        r"""
        Return
        -------
        NCollection_Vec3<bool>

        Description
        -----------
        Return 3d mouse rotation axes (tilt/roll/spin) ignore flag; (false, false, false) by default.

        """
        return _Aspect.Aspect_WindowInputListener_Change3dMouseIsNoRotate(self, *args)

    def Change3dMouseToReverse(self, *args):
        r"""
        Return
        -------
        NCollection_Vec3<bool>

        Description
        -----------
        Return 3d mouse rotation axes (tilt/roll/spin) reverse flag; (true, false, false) by default.

        """
        return _Aspect.Aspect_WindowInputListener_Change3dMouseToReverse(self, *args)

    def ChangeKeys(self, *args):
        r"""
        Return
        -------
        Aspect_VKeySet

        Description
        -----------
        Return keyboard state.

        """
        return _Aspect.Aspect_WindowInputListener_ChangeKeys(self, *args)

    def EventTime(self, *args):
        r"""
        Return
        -------
        double

        Description
        -----------
        Return event time (e.g. current time).

        """
        return _Aspect.Aspect_WindowInputListener_EventTime(self, *args)

    def Get3dMouseIsNoRotate(self, *args):
        r"""
        Return
        -------
        NCollection_Vec3<bool>

        Description
        -----------
        Return 3d mouse rotation axes (tilt/roll/spin) ignore flag; (false, false, false) by default.

        """
        return _Aspect.Aspect_WindowInputListener_Get3dMouseIsNoRotate(self, *args)

    def Get3dMouseRotationScale(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return acceleration ratio for rotation event; 4.0 by default.

        """
        return _Aspect.Aspect_WindowInputListener_Get3dMouseRotationScale(self, *args)

    def Get3dMouseToReverse(self, *args):
        r"""
        Return
        -------
        NCollection_Vec3<bool>

        Description
        -----------
        Return 3d mouse rotation axes (tilt/roll/spin) reverse flag; (true, false, false) by default.

        """
        return _Aspect.Aspect_WindowInputListener_Get3dMouseToReverse(self, *args)

    def Get3dMouseTranslationScale(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return acceleration ratio for translation event; 2.0 by default.

        """
        return _Aspect.Aspect_WindowInputListener_Get3dMouseTranslationScale(self, *args)

    def HasTouchPoints(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if touches map is not empty.

        """
        return _Aspect.Aspect_WindowInputListener_HasTouchPoints(self, *args)

    def KeyDown(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey
        theTime: double
        thePressure: double (optional, default to 1.0)

        Return
        -------
        None

        Description
        -----------
        Press key. default implementation updates internal cache. @param thekey key pressed @param thetime event timestamp.

        """
        return _Aspect.Aspect_WindowInputListener_KeyDown(self, *args)

    def KeyFromAxis(self, *args):
        r"""

        Parameters
        ----------
        theNegative: Aspect_VKey
        thePositive: Aspect_VKey
        theTime: double
        thePressure: double

        Return
        -------
        None

        Description
        -----------
        Simulate key up/down events from axis value. default implementation updates internal cache.

        """
        return _Aspect.Aspect_WindowInputListener_KeyFromAxis(self, *args)

    def KeyUp(self, *args):
        r"""

        Parameters
        ----------
        theKey: Aspect_VKey
        theTime: double

        Return
        -------
        None

        Description
        -----------
        Release key. default implementation updates internal cache. @param thekey key pressed @param thetime event timestamp.

        """
        return _Aspect.Aspect_WindowInputListener_KeyUp(self, *args)

    def Keys(self, *args):
        r"""
        Return
        -------
        Aspect_VKeySet

        Description
        -----------
        Return keyboard state.

        """
        return _Aspect.Aspect_WindowInputListener_Keys(self, *args)

    def LastMouseFlags(self, *args):
        r"""
        Return
        -------
        Aspect_VKeyFlags

        Description
        -----------
        Return active key modifiers passed with last mouse event.

        """
        return _Aspect.Aspect_WindowInputListener_LastMouseFlags(self, *args)

    def LastMousePosition(self, *args):
        r"""
        Return
        -------
        Graphic3d_Vec2i

        Description
        -----------
        Return last mouse position.

        """
        return _Aspect.Aspect_WindowInputListener_LastMousePosition(self, *args)

    def PressMouseButton(self, *args):
        r"""

        Parameters
        ----------
        thePoint: Graphic3d_Vec2i
        theButton: Aspect_VKeyMouse
        theModifiers: Aspect_VKeyFlags
        theIsEmulated: bool

        Return
        -------
        bool

        Description
        -----------
        Handle mouse button press event. this method is expected to be called from ui thread. default implementation redirects to updatemouseposition(). @param thepoint mouse cursor position @param thebutton pressed button @param themodifiers key modifiers @param theisemulated if true then mouse event comes not from real mouse  but emulated from non-precise input like touch on screen return true if window content should be redrawn.

        """
        return _Aspect.Aspect_WindowInputListener_PressMouseButton(self, *args)

    def PressedMouseButtons(self, *args):
        r"""
        Return
        -------
        Aspect_VKeyMouse

        Description
        -----------
        Return currently pressed mouse buttons.

        """
        return _Aspect.Aspect_WindowInputListener_PressedMouseButtons(self, *args)

    def ProcessClose(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Handle window close event.

        """
        return _Aspect.Aspect_WindowInputListener_ProcessClose(self, *args)

    def ProcessConfigure(self, *args):
        r"""

        Parameters
        ----------
        theIsResized: bool

        Return
        -------
        None

        Description
        -----------
        Handle window resize event.

        """
        return _Aspect.Aspect_WindowInputListener_ProcessConfigure(self, *args)

    def ProcessExpose(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Handle expose event (window content has been invalidation and should be redrawn).

        """
        return _Aspect.Aspect_WindowInputListener_ProcessExpose(self, *args)

    def ProcessFocus(self, *args):
        r"""

        Parameters
        ----------
        theIsActivated: bool

        Return
        -------
        None

        Description
        -----------
        Handle focus event.

        """
        return _Aspect.Aspect_WindowInputListener_ProcessFocus(self, *args)

    def ProcessInput(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Handle window input event immediately (flush input buffer or ignore).

        """
        return _Aspect.Aspect_WindowInputListener_ProcessInput(self, *args)

    def ReleaseMouseButton(self, *args):
        r"""

        Parameters
        ----------
        thePoint: Graphic3d_Vec2i
        theButton: Aspect_VKeyMouse
        theModifiers: Aspect_VKeyFlags
        theIsEmulated: bool

        Return
        -------
        bool

        Description
        -----------
        Handle mouse button release event. this method is expected to be called from ui thread. default implementation redirects to updatemouseposition(). @param thepoint mouse cursor position @param thebutton released button @param themodifiers key modifiers @param theisemulated if true then mouse event comes not from real mouse  but emulated from non-precise input like touch on screen return true if window content should be redrawn.

        """
        return _Aspect.Aspect_WindowInputListener_ReleaseMouseButton(self, *args)

    def RemoveTouchPoint(self, *args):
        r"""

        Parameters
        ----------
        theId: Standard_Size
        theClearSelectPnts: bool (optional, default to false)

        Return
        -------
        bool

        Description
        -----------
        Remove touch point with the given id. this method is expected to be called from ui thread. @param theid touch unique identifier @param theclearselectpnts if true will initiate clearing of selection points return true if point has been removed.

        """
        return _Aspect.Aspect_WindowInputListener_RemoveTouchPoint(self, *args)

    def Set3dMousePreciseInput(self, *args):
        r"""

        Parameters
        ----------
        theIsQuadric: bool

        Return
        -------
        None

        Description
        -----------
        Set quadric acceleration flag.

        """
        return _Aspect.Aspect_WindowInputListener_Set3dMousePreciseInput(self, *args)

    def Set3dMouseRotationScale(self, *args):
        r"""

        Parameters
        ----------
        theScale: float

        Return
        -------
        None

        Description
        -----------
        Set acceleration ratio for rotation event.

        """
        return _Aspect.Aspect_WindowInputListener_Set3dMouseRotationScale(self, *args)

    def Set3dMouseTranslationScale(self, *args):
        r"""

        Parameters
        ----------
        theScale: float

        Return
        -------
        None

        Description
        -----------
        Set acceleration ratio for translation event.

        """
        return _Aspect.Aspect_WindowInputListener_Set3dMouseTranslationScale(self, *args)

    def To3dMousePreciseInput(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return quadric acceleration flag; true by default.

        """
        return _Aspect.Aspect_WindowInputListener_To3dMousePreciseInput(self, *args)

    def TouchPoints(self, *args):
        r"""
        Return
        -------
        Aspect_TouchMap

        Description
        -----------
        Return map of active touches.

        """
        return _Aspect.Aspect_WindowInputListener_TouchPoints(self, *args)

    def Update3dMouse(self, *args):
        r"""

        Parameters
        ----------
        theEvent: WNT_HIDSpaceMouse

        Return
        -------
        bool

        Description
        -----------
        Process 3d mouse input event (redirects to translation, rotation and keys).

        """
        return _Aspect.Aspect_WindowInputListener_Update3dMouse(self, *args)

    def UpdateMouseButtons(self, *args):
        r"""

        Parameters
        ----------
        thePoint: Graphic3d_Vec2i
        theButtons: Aspect_VKeyMouse
        theModifiers: Aspect_VKeyFlags
        theIsEmulated: bool

        Return
        -------
        bool

        Description
        -----------
        Handle mouse button press/release event. this method is expected to be called from ui thread. @param thepoint mouse cursor position @param thebuttons pressed buttons @param themodifiers key modifiers @param theisemulated if true then mouse event comes not from real mouse  but emulated from non-precise input like touch on screen return true if window content should be redrawn.

        """
        return _Aspect.Aspect_WindowInputListener_UpdateMouseButtons(self, *args)

    def UpdateMousePosition(self, *args):
        r"""

        Parameters
        ----------
        thePoint: Graphic3d_Vec2i
        theButtons: Aspect_VKeyMouse
        theModifiers: Aspect_VKeyFlags
        theIsEmulated: bool

        Return
        -------
        bool

        Description
        -----------
        Handle mouse cursor movement event. this method is expected to be called from ui thread. default implementation does nothing. @param thepoint mouse cursor position @param thebuttons pressed buttons @param themodifiers key modifiers @param theisemulated if true then mouse event comes not from real mouse  but emulated from non-precise input like touch on screen return true if window content should be redrawn.

        """
        return _Aspect.Aspect_WindowInputListener_UpdateMousePosition(self, *args)

    def UpdateMouseScroll(self, *args):
        r"""

        Parameters
        ----------
        theDelta: Aspect_ScrollDelta

        Return
        -------
        bool

        Description
        -----------
        Update mouse scroll event. this method is expected to be called from ui thread. @param thedelta mouse cursor position and delta return true if new event has been created or false if existing one has been updated.

        """
        return _Aspect.Aspect_WindowInputListener_UpdateMouseScroll(self, *args)

    def UpdateTouchPoint(self, *args):
        r"""

        Parameters
        ----------
        theId: Standard_Size
        thePnt: Graphic3d_Vec2d

        Return
        -------
        None

        Description
        -----------
        Update touch point with the given id. if point with specified id was not registered before, it will be added. this method is expected to be called from ui thread. @param theid touch unique identifier @param thepnt touch coordinates.

        """
        return _Aspect.Aspect_WindowInputListener_UpdateTouchPoint(self, *args)

    def update3dMouseKeys(self, *args):
        r"""

        Parameters
        ----------
        theEvent: WNT_HIDSpaceMouse

        Return
        -------
        bool

        Description
        -----------
        Process 3d mouse input keys event.

        """
        return _Aspect.Aspect_WindowInputListener_update3dMouseKeys(self, *args)

    def update3dMouseRotation(self, *args):
        r"""

        Parameters
        ----------
        theEvent: WNT_HIDSpaceMouse

        Return
        -------
        bool

        Description
        -----------
        Process 3d mouse input rotation event.

        """
        return _Aspect.Aspect_WindowInputListener_update3dMouseRotation(self, *args)

    def update3dMouseTranslation(self, *args):
        r"""

        Parameters
        ----------
        theEvent: WNT_HIDSpaceMouse

        Return
        -------
        bool

        Description
        -----------
        Process 3d mouse input translation event.

        """
        return _Aspect.Aspect_WindowInputListener_update3dMouseTranslation(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_WindowInputListener

# Register Aspect_WindowInputListener in _Aspect:
_Aspect.Aspect_WindowInputListener_swigregister(Aspect_WindowInputListener)
class Aspect_XRAction(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theId: str
        theType: Aspect_XRActionType

        Return
        -------
        None

        Description
        -----------
        Main constructor.

        """
        _Aspect.Aspect_XRAction_swiginit(self, _Aspect.new_Aspect_XRAction(*args))

    def Id(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Return action id.

        """
        return _Aspect.Aspect_XRAction_Id(self, *args)

    def IsValid(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if action is defined.

        """
        return _Aspect.Aspect_XRAction_IsValid(self, *args)

    def RawHandle(self, *args):
        r"""
        Return
        -------
        uint64_t

        Description
        -----------
        Return action handle.

        """
        return _Aspect.Aspect_XRAction_RawHandle(self, *args)

    def SetRawHandle(self, *args):
        r"""

        Parameters
        ----------
        theHande: uint64_t

        Return
        -------
        None

        Description
        -----------
        Set action handle.

        """
        return _Aspect.Aspect_XRAction_SetRawHandle(self, *args)

    def Type(self, *args):
        r"""
        Return
        -------
        Aspect_XRActionType

        Description
        -----------
        Return action type.

        """
        return _Aspect.Aspect_XRAction_Type(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Aspect_XRAction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_XRAction

# Register Aspect_XRAction in _Aspect:
_Aspect.Aspect_XRAction_swigregister(Aspect_XRAction)
class Aspect_XRActionSet(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theId: str

        Return
        -------
        None

        Description
        -----------
        Main constructor.

        """
        _Aspect.Aspect_XRActionSet_swiginit(self, _Aspect.new_Aspect_XRActionSet(*args))

    def Actions(self, *args):
        r"""
        Return
        -------
        Aspect_XRActionMap

        Description
        -----------
        Return map of actions.

        """
        return _Aspect.Aspect_XRActionSet_Actions(self, *args)

    def AddAction(self, *args):
        r"""

        Parameters
        ----------
        theAction: Aspect_XRAction

        Return
        -------
        None

        Description
        -----------
        Add action.

        """
        return _Aspect.Aspect_XRActionSet_AddAction(self, *args)

    def Id(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Return action id.

        """
        return _Aspect.Aspect_XRActionSet_Id(self, *args)

    def RawHandle(self, *args):
        r"""
        Return
        -------
        uint64_t

        Description
        -----------
        Return action handle.

        """
        return _Aspect.Aspect_XRActionSet_RawHandle(self, *args)

    def SetRawHandle(self, *args):
        r"""

        Parameters
        ----------
        theHande: uint64_t

        Return
        -------
        None

        Description
        -----------
        Set action handle.

        """
        return _Aspect.Aspect_XRActionSet_SetRawHandle(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Aspect_XRActionSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_XRActionSet

# Register Aspect_XRActionSet in _Aspect:
_Aspect.Aspect_XRActionSet_swigregister(Aspect_XRActionSet)
class Aspect_XRAnalogActionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ActiveOrigin = property(_Aspect.Aspect_XRAnalogActionData_ActiveOrigin_get, _Aspect.Aspect_XRAnalogActionData_ActiveOrigin_set)
    UpdateTime = property(_Aspect.Aspect_XRAnalogActionData_UpdateTime_get, _Aspect.Aspect_XRAnalogActionData_UpdateTime_set)
    VecXYZ = property(_Aspect.Aspect_XRAnalogActionData_VecXYZ_get, _Aspect.Aspect_XRAnalogActionData_VecXYZ_set)
    DeltaXYZ = property(_Aspect.Aspect_XRAnalogActionData_DeltaXYZ_get, _Aspect.Aspect_XRAnalogActionData_DeltaXYZ_set)
    IsActive = property(_Aspect.Aspect_XRAnalogActionData_IsActive_get, _Aspect.Aspect_XRAnalogActionData_IsActive_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _Aspect.Aspect_XRAnalogActionData_swiginit(self, _Aspect.new_Aspect_XRAnalogActionData(*args))

    def IsChanged(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if delta is non-zero.

        """
        return _Aspect.Aspect_XRAnalogActionData_IsChanged(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_XRAnalogActionData

# Register Aspect_XRAnalogActionData in _Aspect:
_Aspect.Aspect_XRAnalogActionData_swigregister(Aspect_XRAnalogActionData)
class Aspect_XRDigitalActionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ActiveOrigin = property(_Aspect.Aspect_XRDigitalActionData_ActiveOrigin_get, _Aspect.Aspect_XRDigitalActionData_ActiveOrigin_set)
    UpdateTime = property(_Aspect.Aspect_XRDigitalActionData_UpdateTime_get, _Aspect.Aspect_XRDigitalActionData_UpdateTime_set)
    IsActive = property(_Aspect.Aspect_XRDigitalActionData_IsActive_get, _Aspect.Aspect_XRDigitalActionData_IsActive_set)
    IsPressed = property(_Aspect.Aspect_XRDigitalActionData_IsPressed_get, _Aspect.Aspect_XRDigitalActionData_IsPressed_set)
    IsChanged = property(_Aspect.Aspect_XRDigitalActionData_IsChanged_get, _Aspect.Aspect_XRDigitalActionData_IsChanged_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _Aspect.Aspect_XRDigitalActionData_swiginit(self, _Aspect.new_Aspect_XRDigitalActionData(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_XRDigitalActionData

# Register Aspect_XRDigitalActionData in _Aspect:
_Aspect.Aspect_XRDigitalActionData_swigregister(Aspect_XRDigitalActionData)
class Aspect_XRHapticActionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Delay = property(_Aspect.Aspect_XRHapticActionData_Delay_get, _Aspect.Aspect_XRHapticActionData_Delay_set)
    Duration = property(_Aspect.Aspect_XRHapticActionData_Duration_get, _Aspect.Aspect_XRHapticActionData_Duration_set)
    Frequency = property(_Aspect.Aspect_XRHapticActionData_Frequency_get, _Aspect.Aspect_XRHapticActionData_Frequency_set)
    Amplitude = property(_Aspect.Aspect_XRHapticActionData_Amplitude_get, _Aspect.Aspect_XRHapticActionData_Amplitude_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _Aspect.Aspect_XRHapticActionData_swiginit(self, _Aspect.new_Aspect_XRHapticActionData(*args))

    def IsValid(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if data is not empty.

        """
        return _Aspect.Aspect_XRHapticActionData_IsValid(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_XRHapticActionData

# Register Aspect_XRHapticActionData in _Aspect:
_Aspect.Aspect_XRHapticActionData_swigregister(Aspect_XRHapticActionData)
class Aspect_XRPoseActionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Pose = property(_Aspect.Aspect_XRPoseActionData_Pose_get, _Aspect.Aspect_XRPoseActionData_Pose_set)
    ActiveOrigin = property(_Aspect.Aspect_XRPoseActionData_ActiveOrigin_get, _Aspect.Aspect_XRPoseActionData_ActiveOrigin_set)
    IsActive = property(_Aspect.Aspect_XRPoseActionData_IsActive_get, _Aspect.Aspect_XRPoseActionData_IsActive_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _Aspect.Aspect_XRPoseActionData_swiginit(self, _Aspect.new_Aspect_XRPoseActionData(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_XRPoseActionData

# Register Aspect_XRPoseActionData in _Aspect:
_Aspect.Aspect_XRPoseActionData_swigregister(Aspect_XRPoseActionData)
class Aspect_XRSession(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InfoString_Vendor = _Aspect.Aspect_XRSession_InfoString_Vendor
    InfoString_Device = _Aspect.Aspect_XRSession_InfoString_Device
    InfoString_Tracker = _Aspect.Aspect_XRSession_InfoString_Tracker
    InfoString_SerialNumber = _Aspect.Aspect_XRSession_InfoString_SerialNumber
    TrackingUniverseOrigin_Seated = _Aspect.Aspect_XRSession_TrackingUniverseOrigin_Seated
    TrackingUniverseOrigin_Standing = _Aspect.Aspect_XRSession_TrackingUniverseOrigin_Standing


    class InfoString(IntEnum):
    	InfoString_Vendor = 0
    	InfoString_Device = 1
    	InfoString_Tracker = 2
    	InfoString_SerialNumber = 3
    InfoString_Vendor = InfoString.InfoString_Vendor
    InfoString_Device = InfoString.InfoString_Device
    InfoString_Tracker = InfoString.InfoString_Tracker
    InfoString_SerialNumber = InfoString.InfoString_SerialNumber

    class TrackingUniverseOrigin(IntEnum):
    	TrackingUniverseOrigin_Seated = 0
    	TrackingUniverseOrigin_Standing = 1
    TrackingUniverseOrigin_Seated = TrackingUniverseOrigin.TrackingUniverseOrigin_Seated
    TrackingUniverseOrigin_Standing = TrackingUniverseOrigin.TrackingUniverseOrigin_Standing


    def AbortHapticVibrationAction(self, *args):
        r"""

        Parameters
        ----------
        theAction: Aspect_XRAction

        Return
        -------
        None

        Description
        -----------
        Abort vibration.

        """
        return _Aspect.Aspect_XRSession_AbortHapticVibrationAction(self, *args)

    def Aspect(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return aspect ratio.

        """
        return _Aspect.Aspect_XRSession_Aspect(self, *args)

    def Close(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Release session.

        """
        return _Aspect.Aspect_XRSession_Close(self, *args)

    def DisplayFrequency(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return display frequency or 0 if unknown.

        """
        return _Aspect.Aspect_XRSession_DisplayFrequency(self, *args)

    def EyeToHeadTransform(self, *args):
        r"""

        Parameters
        ----------
        theEye: Aspect_Eye

        Return
        -------
        NCollection_Mat4<double >

        Description
        -----------
        Return transformation from eye to head.

        """
        return _Aspect.Aspect_XRSession_EyeToHeadTransform(self, *args)

    def FieldOfView(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return field of view.

        """
        return _Aspect.Aspect_XRSession_FieldOfView(self, *args)

    def GenericAction(self, *args):
        r"""

        Parameters
        ----------
        theDevice: Aspect_XRTrackedDeviceRole
        theAction: Aspect_XRGenericAction

        Return
        -------
        opencascade::handle<Aspect_XRAction>

        Description
        -----------
        Return generic action for specific hand or null if undefined.

        """
        return _Aspect.Aspect_XRSession_GenericAction(self, *args)

    def GetAnalogActionData(self, *args):
        r"""

        Parameters
        ----------
        theAction: Aspect_XRAction

        Return
        -------
        Aspect_XRAnalogActionData

        Description
        -----------
        Fetch data for digital input action (like axis). @param theaction [in] action of aspect_xractiontype_inputanalog type.

        """
        return _Aspect.Aspect_XRSession_GetAnalogActionData(self, *args)

    def GetDigitalActionData(self, *args):
        r"""

        Parameters
        ----------
        theAction: Aspect_XRAction

        Return
        -------
        Aspect_XRDigitalActionData

        Description
        -----------
        Fetch data for digital input action (like button). @param theaction [in] action of aspect_xractiontype_inputdigital type.

        """
        return _Aspect.Aspect_XRSession_GetDigitalActionData(self, *args)

    def GetPoseActionDataForNextFrame(self, *args):
        r"""

        Parameters
        ----------
        theAction: Aspect_XRAction

        Return
        -------
        Aspect_XRPoseActionData

        Description
        -----------
        Fetch data for pose input action (like fingertip position). the returned values will match the values returned by the last call to waitposes(). @param theaction [in] action of aspect_xractiontype_inputpose type.

        """
        return _Aspect.Aspect_XRSession_GetPoseActionDataForNextFrame(self, *args)

    def GetString(self, *args):
        r"""

        Parameters
        ----------
        theInfo: InfoString

        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Query information.

        """
        return _Aspect.Aspect_XRSession_GetString(self, *args)

    def HasProjectionFrustums(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return false if projection frustums are unsupported and general 4x4 projection matrix should be fetched instead.

        """
        return _Aspect.Aspect_XRSession_HasProjectionFrustums(self, *args)

    def HasTrackedPose(self, *args):
        r"""

        Parameters
        ----------
        theDevice: int

        Return
        -------
        bool

        Description
        -----------
        Return true if device orientation is defined.

        """
        return _Aspect.Aspect_XRSession_HasTrackedPose(self, *args)

    def HeadPose(self, *args):
        r"""
        Return
        -------
        gp_Trsf

        Description
        -----------
        Return head orientation in right-handed system: +y is up +x is to the right -z is forward distance unit is meters by default (@sa unitfactor()).

        """
        return _Aspect.Aspect_XRSession_HeadPose(self, *args)

    def HeadToEyeTransform(self, *args):
        r"""

        Parameters
        ----------
        theEye: Aspect_Eye

        Return
        -------
        NCollection_Mat4<double >

        Description
        -----------
        Return transformation from head to eye.

        """
        return _Aspect.Aspect_XRSession_HeadToEyeTransform(self, *args)

    def IOD(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return intra-ocular distance (iod); also known as interpupillary distance (ipd). defined in meters by default (@sa unitfactor()).

        """
        return _Aspect.Aspect_XRSession_IOD(self, *args)

    def IsOpen(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if session is opened.

        """
        return _Aspect.Aspect_XRSession_IsOpen(self, *args)

    def LeftHandPose(self, *args):
        r"""
        Return
        -------
        gp_Trsf

        Description
        -----------
        Return left hand orientation.

        """
        return _Aspect.Aspect_XRSession_LeftHandPose(self, *args)

    def LoadRenderModel(self, *args):
        r"""

        Parameters
        ----------
        theDevice: int
        theTexture: Image_Texture

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Load model for displaying device. @param thedevice [in] device index @param thetexture [out] texture source return model triangulation or null if not found.

        Parameters
        ----------
        theDevice: int
        theToApplyUnitFactor: bool
        theTexture: Image_Texture

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Load model for displaying device. @param thedevice [in] device index @param thetoapplyunitfactor [in] flag to apply unit scale factor @param thetexture [out] texture source return model triangulation or null if not found.

        """
        return _Aspect.Aspect_XRSession_LoadRenderModel(self, *args)

    def NamedTrackedDevice(self, *args):
        r"""

        Parameters
        ----------
        theDevice: Aspect_XRTrackedDeviceRole

        Return
        -------
        int

        Description
        -----------
        Return index of tracked device of known role, or -1 if undefined.

        """
        return _Aspect.Aspect_XRSession_NamedTrackedDevice(self, *args)

    def Open(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Initialize session.

        """
        return _Aspect.Aspect_XRSession_Open(self, *args)

    def ProcessEvents(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Receive xr events.

        """
        return _Aspect.Aspect_XRSession_ProcessEvents(self, *args)

    def ProjectionFrustum(self, *args):
        r"""

        Parameters
        ----------
        theEye: Aspect_Eye

        Return
        -------
        Aspect_FrustumLRBT<double>

        Description
        -----------
        Return projection frustum. @sa hasprojectionfrustums().

        """
        return _Aspect.Aspect_XRSession_ProjectionFrustum(self, *args)

    def ProjectionMatrix(self, *args):
        r"""

        Parameters
        ----------
        theEye: Aspect_Eye
        theZNear: double
        theZFar: double

        Return
        -------
        NCollection_Mat4<double >

        Description
        -----------
        Return projection matrix.

        """
        return _Aspect.Aspect_XRSession_ProjectionMatrix(self, *args)

    def RecommendedViewport(self, *args):
        r"""
        Return
        -------
        NCollection_Vec2<int >

        Description
        -----------
        Return recommended viewport width x height for rendering into vr.

        """
        return _Aspect.Aspect_XRSession_RecommendedViewport(self, *args)

    def RightHandPose(self, *args):
        r"""
        Return
        -------
        gp_Trsf

        Description
        -----------
        Return right hand orientation.

        """
        return _Aspect.Aspect_XRSession_RightHandPose(self, *args)

    def SetTrackingOrigin(self, *args):
        r"""

        Parameters
        ----------
        theOrigin: TrackingUniverseOrigin

        Return
        -------
        None

        Description
        -----------
        Set tracking origin.

        """
        return _Aspect.Aspect_XRSession_SetTrackingOrigin(self, *args)

    def SetUnitFactor(self, *args):
        r"""

        Parameters
        ----------
        theFactor: float

        Return
        -------
        None

        Description
        -----------
        Set unit scale factor.

        """
        return _Aspect.Aspect_XRSession_SetUnitFactor(self, *args)

    def SubmitEye(self, *args):
        r"""

        Parameters
        ----------
        theTexture: void *
        theGraphicsLib: Aspect_GraphicsLibrary
        theColorSpace: Aspect_ColorSpace
        theEye: Aspect_Eye

        Return
        -------
        bool

        Description
        -----------
        Submit texture eye to xr composer. @param thetexture [in] texture handle @param thegraphicslib [in] graphics library in which texture handle is defined @param thecolorspace [in] texture color space;  srgb means no color conversion by composer;  linear means to srgb color conversion by composer @param theeye [in] eye to display return false on error.

        """
        return _Aspect.Aspect_XRSession_SubmitEye(self, *args)

    def TrackedPoses(self, *args):
        r"""
        Return
        -------
        Aspect_TrackedDevicePoseArray

        Description
        -----------
        Return number of tracked poses array.

        """
        return _Aspect.Aspect_XRSession_TrackedPoses(self, *args)

    def TrackingOrigin(self, *args):
        r"""
        Return
        -------
        Aspect_XRSession::TrackingUniverseOrigin

        Description
        -----------
        Return tracking origin.

        """
        return _Aspect.Aspect_XRSession_TrackingOrigin(self, *args)

    def TriggerHapticVibrationAction(self, *args):
        r"""

        Parameters
        ----------
        theAction: Aspect_XRAction
        theParams: Aspect_XRHapticActionData

        Return
        -------
        None

        Description
        -----------
        Trigger vibration.

        """
        return _Aspect.Aspect_XRSession_TriggerHapticVibrationAction(self, *args)

    def UnitFactor(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Return unit scale factor defined as scale factor for m (meters); 1.0 by default.

        """
        return _Aspect.Aspect_XRSession_UnitFactor(self, *args)

    def WaitPoses(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Fetch actual poses of tracked devices.

        """
        return _Aspect.Aspect_XRSession_WaitPoses(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Aspect_XRSession_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_XRSession

# Register Aspect_XRSession in _Aspect:
_Aspect.Aspect_XRSession_swigregister(Aspect_XRSession)
class Aspect_GradientBackground(Aspect_Background):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a window gradient background. default color is quantity_noc_black. default fill method is aspect_gradientfillmethod_none.

        Parameters
        ----------
        theColor1: Quantity_Color
        theColor2: Quantity_Color
        theMethod: Aspect_GradientFillMethod (optional, default to Aspect_GradientFillMethod_Horizontal)

        Return
        -------
        None

        Description
        -----------
        Creates a window gradient background with two colours.

        """
        _Aspect.Aspect_GradientBackground_swiginit(self, _Aspect.new_Aspect_GradientBackground(*args))

    def BgGradientFillMethod(self, *args):
        r"""
        Return
        -------
        Aspect_GradientFillMethod

        Description
        -----------
        Returns the current gradient background fill mode.

        """
        return _Aspect.Aspect_GradientBackground_BgGradientFillMethod(self, *args)

    def Colors(self, *args):
        r"""

        Parameters
        ----------
        theColor1: Quantity_Color
        theColor2: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Returns colours of the window gradient background.

        """
        return _Aspect.Aspect_GradientBackground_Colors(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Aspect.Aspect_GradientBackground_DumpJsonToString(self, depth)

    def SetColors(self, *args):
        r"""

        Parameters
        ----------
        theColor1: Quantity_Color
        theColor2: Quantity_Color
        theMethod: Aspect_GradientFillMethod (optional, default to Aspect_GradientFillMethod_Horizontal)

        Return
        -------
        None

        Description
        -----------
        Modifies the colours of the window gradient background.

        """
        return _Aspect.Aspect_GradientBackground_SetColors(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_GradientBackground

# Register Aspect_GradientBackground in _Aspect:
_Aspect.Aspect_GradientBackground_swigregister(Aspect_GradientBackground)
class Aspect_OpenVRSession(Aspect_XRSession):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _Aspect.Aspect_OpenVRSession_swiginit(self, _Aspect.new_Aspect_OpenVRSession(*args))

    @staticmethod
    def IsHmdPresent(*args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if an hmd may be presented on the system (e.g. to show vr checkbox in application gui). this is fast check, and even if it returns true, opening session may fail.

        """
        return _Aspect.Aspect_OpenVRSession_IsHmdPresent(*args)


    @staticmethod
    def DownCast(t):
      return Handle_Aspect_OpenVRSession_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_OpenVRSession

# Register Aspect_OpenVRSession in _Aspect:
_Aspect.Aspect_OpenVRSession_swigregister(Aspect_OpenVRSession)

@classnotwrapped
class Aspect_CircularGrid:
	pass

@classnotwrapped
class Aspect_NeutralWindow:
	pass

@classnotwrapped
class Aspect_RectangularGrid:
	pass

@classnotwrapped
class Aspect_FrustumLRBT:
	pass





@deprecated
def Aspect_OpenVRSession_IsHmdPresent(*args):
	return Aspect_OpenVRSession.IsHmdPresent(*args)



