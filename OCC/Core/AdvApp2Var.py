# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AdvApp2Var module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_advapp2var.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AdvApp2Var')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AdvApp2Var')
    _AdvApp2Var = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AdvApp2Var', [dirname(__file__)])
        except ImportError:
            import _AdvApp2Var
            return _AdvApp2Var
        try:
            _mod = imp.load_module('_AdvApp2Var', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AdvApp2Var = swig_import_helper()
    del swig_import_helper
else:
    import _AdvApp2Var
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AdvApp2Var.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _AdvApp2Var.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _AdvApp2Var.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _AdvApp2Var.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _AdvApp2Var.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _AdvApp2Var.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _AdvApp2Var.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _AdvApp2Var.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _AdvApp2Var.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _AdvApp2Var.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _AdvApp2Var.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _AdvApp2Var.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _AdvApp2Var.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _AdvApp2Var.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _AdvApp2Var.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _AdvApp2Var.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _AdvApp2Var.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AdvApp2Var.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _AdvApp2Var.process_exception(error, method_name, class_name)
process_exception = _AdvApp2Var.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.AdvApprox
import OCC.Core.TColgp
import OCC.Core.PLib
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.Geom

from enum import IntEnum
from OCC.Core.Exception import *

AdvApp2Var_Regular = _AdvApp2Var.AdvApp2Var_Regular
AdvApp2Var_Incremental = _AdvApp2Var.AdvApp2Var_Incremental
AdvApp2Var_Absolute = _AdvApp2Var.AdvApp2Var_Absolute
AdvApp2Var_Relative = _AdvApp2Var.AdvApp2Var_Relative


class AdvApp2Var_CriterionRepartition(IntEnum):
	AdvApp2Var_Regular = 0
	AdvApp2Var_Incremental = 1
AdvApp2Var_Regular = AdvApp2Var_CriterionRepartition.AdvApp2Var_Regular
AdvApp2Var_Incremental = AdvApp2Var_CriterionRepartition.AdvApp2Var_Incremental

class AdvApp2Var_CriterionType(IntEnum):
	AdvApp2Var_Absolute = 0
	AdvApp2Var_Relative = 1
AdvApp2Var_Absolute = AdvApp2Var_CriterionType.AdvApp2Var_Absolute
AdvApp2Var_Relative = AdvApp2Var_CriterionType.AdvApp2Var_Relative


def Handle_AdvApp2Var_Node_Create() -> "opencascade::handle< AdvApp2Var_Node >":
    return _AdvApp2Var.Handle_AdvApp2Var_Node_Create()
Handle_AdvApp2Var_Node_Create = _AdvApp2Var.Handle_AdvApp2Var_Node_Create

def Handle_AdvApp2Var_Node_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AdvApp2Var_Node >":
    return _AdvApp2Var.Handle_AdvApp2Var_Node_DownCast(t)
Handle_AdvApp2Var_Node_DownCast = _AdvApp2Var.Handle_AdvApp2Var_Node_DownCast

def Handle_AdvApp2Var_Node_IsNull(t: 'opencascade::handle< AdvApp2Var_Node > const &') -> "bool":
    return _AdvApp2Var.Handle_AdvApp2Var_Node_IsNull(t)
Handle_AdvApp2Var_Node_IsNull = _AdvApp2Var.Handle_AdvApp2Var_Node_IsNull

def Handle_AdvApp2Var_Patch_Create() -> "opencascade::handle< AdvApp2Var_Patch >":
    return _AdvApp2Var.Handle_AdvApp2Var_Patch_Create()
Handle_AdvApp2Var_Patch_Create = _AdvApp2Var.Handle_AdvApp2Var_Patch_Create

def Handle_AdvApp2Var_Patch_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< AdvApp2Var_Patch >":
    return _AdvApp2Var.Handle_AdvApp2Var_Patch_DownCast(t)
Handle_AdvApp2Var_Patch_DownCast = _AdvApp2Var.Handle_AdvApp2Var_Patch_DownCast

def Handle_AdvApp2Var_Patch_IsNull(t: 'opencascade::handle< AdvApp2Var_Patch > const &') -> "bool":
    return _AdvApp2Var.Handle_AdvApp2Var_Patch_IsNull(t)
Handle_AdvApp2Var_Patch_IsNull = _AdvApp2Var.Handle_AdvApp2Var_Patch_IsNull
class AdvApp2Var_SequenceOfNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_SequenceOfNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_SequenceOfNode, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Node > >::iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Node > >::iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Node > >::const_iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Node > >::const_iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_cend(self)

    def __init__(self, *args):
        this = _AdvApp2Var.new_AdvApp2Var_SequenceOfNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_IsEmpty(self)

    def Reverse(self) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_AdvApp2Var.AdvApp2Var_SequenceOfNode_delNode)
    else:
        delNode = _AdvApp2Var.AdvApp2Var_SequenceOfNode_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Clear(self, theAllocator)

    def Assign(self, theOther: 'AdvApp2Var_SequenceOfNode') -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Node > > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Assign(self, theOther)

    def Set(self, theOther: 'AdvApp2Var_SequenceOfNode') -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Node > > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'AdvApp2Var_SequenceOfNode') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< AdvApp2Var_Node > const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_First(self)

    def ChangeFirst(self) -> "opencascade::handle< AdvApp2Var_Node > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< AdvApp2Var_Node > const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Last(self)

    def ChangeLast(self) -> "opencascade::handle< AdvApp2Var_Node > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< AdvApp2Var_Node > const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< AdvApp2Var_Node > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< AdvApp2Var_Node > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< AdvApp2Var_Node > const &') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfNode_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SequenceOfNode
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

AdvApp2Var_SequenceOfNode_swigregister = _AdvApp2Var.AdvApp2Var_SequenceOfNode_swigregister
AdvApp2Var_SequenceOfNode_swigregister(AdvApp2Var_SequenceOfNode)

def AdvApp2Var_SequenceOfNode_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _AdvApp2Var.AdvApp2Var_SequenceOfNode_delNode(theNode, theAl)
AdvApp2Var_SequenceOfNode_delNode = _AdvApp2Var.AdvApp2Var_SequenceOfNode_delNode

class AdvApp2Var_SequenceOfPatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_SequenceOfPatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_SequenceOfPatch, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Patch > >::iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Patch > >::iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Patch > >::const_iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Patch > >::const_iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_cend(self)

    def __init__(self, *args):
        this = _AdvApp2Var.new_AdvApp2Var_SequenceOfPatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_IsEmpty(self)

    def Reverse(self) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_AdvApp2Var.AdvApp2Var_SequenceOfPatch_delNode)
    else:
        delNode = _AdvApp2Var.AdvApp2Var_SequenceOfPatch_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Clear(self, theAllocator)

    def Assign(self, theOther: 'AdvApp2Var_SequenceOfPatch') -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Patch > > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Assign(self, theOther)

    def Set(self, theOther: 'AdvApp2Var_SequenceOfPatch') -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Patch > > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'AdvApp2Var_SequenceOfPatch') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< AdvApp2Var_Patch > const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_First(self)

    def ChangeFirst(self) -> "opencascade::handle< AdvApp2Var_Patch > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< AdvApp2Var_Patch > const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Last(self)

    def ChangeLast(self) -> "opencascade::handle< AdvApp2Var_Patch > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< AdvApp2Var_Patch > const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< AdvApp2Var_Patch > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< AdvApp2Var_Patch > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< AdvApp2Var_Patch > const &') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SequenceOfPatch
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

AdvApp2Var_SequenceOfPatch_swigregister = _AdvApp2Var.AdvApp2Var_SequenceOfPatch_swigregister
AdvApp2Var_SequenceOfPatch_swigregister(AdvApp2Var_SequenceOfPatch)

def AdvApp2Var_SequenceOfPatch_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _AdvApp2Var.AdvApp2Var_SequenceOfPatch_delNode(theNode, theAl)
AdvApp2Var_SequenceOfPatch_delNode = _AdvApp2Var.AdvApp2Var_SequenceOfPatch_delNode

class AdvApp2Var_SequenceOfStrip(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_SequenceOfStrip, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_SequenceOfStrip, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< AdvApp2Var_Strip >::iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_begin(self)

    def end(self) -> "NCollection_Sequence< AdvApp2Var_Strip >::iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_end(self)

    def cbegin(self) -> "NCollection_Sequence< AdvApp2Var_Strip >::const_iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_cbegin(self)

    def cend(self) -> "NCollection_Sequence< AdvApp2Var_Strip >::const_iterator":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_cend(self)

    def __init__(self, *args):
        this = _AdvApp2Var.new_AdvApp2Var_SequenceOfStrip(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_IsEmpty(self)

    def Reverse(self) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_AdvApp2Var.AdvApp2Var_SequenceOfStrip_delNode)
    else:
        delNode = _AdvApp2Var.AdvApp2Var_SequenceOfStrip_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Clear(self, theAllocator)

    def Assign(self, theOther: 'AdvApp2Var_SequenceOfStrip') -> "NCollection_Sequence< AdvApp2Var_Strip > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Assign(self, theOther)

    def Set(self, theOther: 'AdvApp2Var_SequenceOfStrip') -> "NCollection_Sequence< AdvApp2Var_Strip > &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'AdvApp2Var_SequenceOfStrip') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Split(self, theIndex, theSeq)

    def First(self) -> "AdvApp2Var_Strip const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_First(self)

    def ChangeFirst(self) -> "AdvApp2Var_Strip &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_ChangeFirst(self)

    def Last(self) -> "AdvApp2Var_Strip const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Last(self)

    def ChangeLast(self) -> "AdvApp2Var_Strip &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "AdvApp2Var_Strip const &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "AdvApp2Var_Strip &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "AdvApp2Var_Strip &":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'AdvApp2Var_Strip') -> "void":
        return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SequenceOfStrip
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

AdvApp2Var_SequenceOfStrip_swigregister = _AdvApp2Var.AdvApp2Var_SequenceOfStrip_swigregister
AdvApp2Var_SequenceOfStrip_swigregister(AdvApp2Var_SequenceOfStrip)

def AdvApp2Var_SequenceOfStrip_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _AdvApp2Var.AdvApp2Var_SequenceOfStrip_delNode(theNode, theAl)
AdvApp2Var_SequenceOfStrip_delNode = _AdvApp2Var.AdvApp2Var_SequenceOfStrip_delNode

class AdvApp2Var_Strip(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_Strip, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_Strip, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Iso > >::iterator":
        return _AdvApp2Var.AdvApp2Var_Strip_begin(self)

    def end(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Iso > >::iterator":
        return _AdvApp2Var.AdvApp2Var_Strip_end(self)

    def cbegin(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Iso > >::const_iterator":
        return _AdvApp2Var.AdvApp2Var_Strip_cbegin(self)

    def cend(self) -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Iso > >::const_iterator":
        return _AdvApp2Var.AdvApp2Var_Strip_cend(self)

    def __init__(self, *args):
        this = _AdvApp2Var.new_AdvApp2Var_Strip(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_Strip_Size(self)

    def Length(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_Strip_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_Strip_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _AdvApp2Var.AdvApp2Var_Strip_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _AdvApp2Var.AdvApp2Var_Strip_IsEmpty(self)

    def Reverse(self) -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_AdvApp2Var.AdvApp2Var_Strip_delNode)
    else:
        delNode = _AdvApp2Var.AdvApp2Var_Strip_delNode

    def Clear(self, theAllocator: 'opencascade::handle< NCollection_BaseAllocator > const &'=0) -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_Clear(self, theAllocator)

    def Assign(self, theOther: 'AdvApp2Var_Strip') -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Iso > > &":
        return _AdvApp2Var.AdvApp2Var_Strip_Assign(self, theOther)

    def Set(self, theOther: 'AdvApp2Var_Strip') -> "NCollection_Sequence< opencascade::handle< AdvApp2Var_Iso > > &":
        return _AdvApp2Var.AdvApp2Var_Strip_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'AdvApp2Var_Strip') -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_Split(self, theIndex, theSeq)

    def First(self) -> "opencascade::handle< AdvApp2Var_Iso > const &":
        return _AdvApp2Var.AdvApp2Var_Strip_First(self)

    def ChangeFirst(self) -> "opencascade::handle< AdvApp2Var_Iso > &":
        return _AdvApp2Var.AdvApp2Var_Strip_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< AdvApp2Var_Iso > const &":
        return _AdvApp2Var.AdvApp2Var_Strip_Last(self)

    def ChangeLast(self) -> "opencascade::handle< AdvApp2Var_Iso > &":
        return _AdvApp2Var.AdvApp2Var_Strip_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< AdvApp2Var_Iso > const &":
        return _AdvApp2Var.AdvApp2Var_Strip_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< AdvApp2Var_Iso > &":
        return _AdvApp2Var.AdvApp2Var_Strip_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< AdvApp2Var_Iso > &":
        return _AdvApp2Var.AdvApp2Var_Strip___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< AdvApp2Var_Iso > const &') -> "void":
        return _AdvApp2Var.AdvApp2Var_Strip_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Strip
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

AdvApp2Var_Strip_swigregister = _AdvApp2Var.AdvApp2Var_Strip_swigregister
AdvApp2Var_Strip_swigregister(AdvApp2Var_Strip)

def AdvApp2Var_Strip_delNode(theNode: 'NCollection_SeqNode *', theAl: 'opencascade::handle< NCollection_BaseAllocator > &') -> "void":
    return _AdvApp2Var.AdvApp2Var_Strip_delNode(theNode, theAl)
AdvApp2Var_Strip_delNode = _AdvApp2Var.AdvApp2Var_Strip_delNode

class AdvApp2Var_ApproxAFunc2Var(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_ApproxAFunc2Var, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_ApproxAFunc2Var, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        Num1DSS: int
        Num2DSS: int
        Num3DSS: int
        OneDTol: TColStd_HArray1OfReal
        TwoDTol: TColStd_HArray1OfReal
        ThreeDTol: TColStd_HArray1OfReal
        OneDTolFr: TColStd_HArray2OfReal
        TwoDTolFr: TColStd_HArray2OfReal
        ThreeDTolFr: TColStd_HArray2OfReal
        FirstInU: float
        LastInU: float
        FirstInV: float
        LastInV: float
        FavorIso: GeomAbs_IsoType
        ContInU: GeomAbs_Shape
        ContInV: GeomAbs_Shape
        PrecisCode: int
        MaxDegInU: int
        MaxDegInV: int
        MaxPatch: int
        Func: AdvApp2Var_EvaluatorFunc2Var
        UChoice: AdvApprox_Cutting
        VChoice: AdvApprox_Cutting

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Num1DSS: int
        Num2DSS: int
        Num3DSS: int
        OneDTol: TColStd_HArray1OfReal
        TwoDTol: TColStd_HArray1OfReal
        ThreeDTol: TColStd_HArray1OfReal
        OneDTolFr: TColStd_HArray2OfReal
        TwoDTolFr: TColStd_HArray2OfReal
        ThreeDTolFr: TColStd_HArray2OfReal
        FirstInU: float
        LastInU: float
        FirstInV: float
        LastInV: float
        FavorIso: GeomAbs_IsoType
        ContInU: GeomAbs_Shape
        ContInV: GeomAbs_Shape
        PrecisCode: int
        MaxDegInU: int
        MaxDegInV: int
        MaxPatch: int
        Func: AdvApp2Var_EvaluatorFunc2Var
        Crit: AdvApp2Var_Criterion
        UChoice: AdvApprox_Cutting
        VChoice: AdvApprox_Cutting

        Returns
        -------
        None

        """
        this = _AdvApp2Var.new_AdvApp2Var_ApproxAFunc2Var(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AverageError(self, *args) -> "Standard_Real":
        """
        Returns the average errors.

        Parameters
        ----------
        Dimension: int

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        Returns the average error of the bsplinesurface of range index.

        Parameters
        ----------
        Dimension: int
        Index: int

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_AverageError(self, *args)


    def CritError(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Dimension: int
        Index: int

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_CritError(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(AdvApp2Var_ApproxAFunc2Var self) -> std::string"""
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_DumpToString(self)


    def HasResult(self, *args) -> "Standard_Boolean":
        """
        True if the approximation did come out with a result that is not necessarely within the required tolerance or a result that is not recognized with the wished continuities.

        Returns
        -------
        bool

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_HasResult(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        True if the approximation succeeded within the imposed tolerances and the wished continuities.

        Returns
        -------
        bool

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_IsDone(self, *args)


    def MaxError(self, *args) -> "Standard_Real":
        """
        Returns the errors max.

        Parameters
        ----------
        Dimension: int

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        Returns the error max of the bsplinesurface of range index.

        Parameters
        ----------
        Dimension: int
        Index: int

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_MaxError(self, *args)


    def NumSubSpaces(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        Dimension: int

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_NumSubSpaces(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        Returns the bsplinesurface of range index.

        Parameters
        ----------
        Index: int

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_Surface(self, *args)


    def UDegree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UDegree(self, *args)


    def UFrontError(self, *args) -> "Standard_Real":
        """
        Returns the errors max on ufrontiers warning: dimension must be equal to 3.

        Parameters
        ----------
        Dimension: int

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        Returns the error max of the bsplinesurface of range index on a ufrontier.

        Parameters
        ----------
        Dimension: int
        Index: int

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_UFrontError(self, *args)


    def VDegree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VDegree(self, *args)


    def VFrontError(self, *args) -> "Standard_Real":
        """
        Returns the errors max on vfrontiers warning: dimension must be equal to 3.

        Parameters
        ----------
        Dimension: int

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        Returns the error max of the bsplinesurface of range index on a vfrontier.

        Parameters
        ----------
        Dimension: int
        Index: int

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_VFrontError(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_ApproxAFunc2Var
    __del__ = lambda self: None
AdvApp2Var_ApproxAFunc2Var_swigregister = _AdvApp2Var.AdvApp2Var_ApproxAFunc2Var_swigregister
AdvApp2Var_ApproxAFunc2Var_swigregister(AdvApp2Var_ApproxAFunc2Var)

class AdvApp2Var_ApproxF2var(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_ApproxF2var, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_ApproxF2var, name)
    __repr__ = _swig_repr

    def mma1her_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : doublereal *
        : integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma1her_(*args)

    mma1her_ = staticmethod(mma1her_)

    def mma2ac1_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : doublereal *
        : doublereal *
        : doublereal *
        : doublereal *
        : doublereal *
        : doublereal *
        : doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac1_(*args)

    mma2ac1_ = staticmethod(mma2ac1_)

    def mma2ac2_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : doublereal *
        : integer *
        : doublereal *
        : doublereal *
        : doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac2_(*args)

    mma2ac2_ = staticmethod(mma2ac2_)

    def mma2ac3_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : doublereal *
        : integer *
        : doublereal *
        : doublereal *
        : doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac3_(*args)

    mma2ac3_ = staticmethod(mma2ac3_)

    def mma2can_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : doublereal *
        : doublereal *
        : doublereal *
        : integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2can_(*args)

    mma2can_ = staticmethod(mma2can_)

    def mma2cdi_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        nbpntu: integer *
        urootl: doublereal *
        nbpntv: integer *
        vrootl: doublereal *
        iordru: integer *
        iordrv: integer *
        contr1: doublereal *
        contr2: doublereal *
        contr3: doublereal *
        contr4: doublereal *
        sotbu1: doublereal *
        sotbu2: doublereal *
        ditbu1: doublereal *
        ditbu2: doublereal *
        sotbv1: doublereal *
        sotbv2: doublereal *
        ditbv1: doublereal *
        ditbv2: doublereal *
        sosotb: doublereal *
        soditb: doublereal *
        disotb: doublereal *
        diditb: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2cdi_(*args)

    mma2cdi_ = staticmethod(mma2cdi_)

    def mma2ce1_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        numdec: integer *
        ndimen: integer *
        nbsesp: integer *
        ndimse: integer *
        ndminu: integer *
        ndminv: integer *
        ndguli: integer *
        ndgvli: integer *
        ndjacu: integer *
        ndjacv: integer *
        iordru: integer *
        iordrv: integer *
        nbpntu: integer *
        nbpntv: integer *
        epsapr: doublereal *
        sosotb: doublereal *
        disotb: doublereal *
        soditb: doublereal *
        diditb: doublereal *
        patjac: doublereal *
        errmax: doublereal *
        errmoy: doublereal *
        ndegpu: integer *
        ndegpv: integer *
        itydec: integer *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ce1_(*args)

    mma2ce1_ = staticmethod(mma2ce1_)

    def mma2ds1_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        uintfn: doublereal *
        vintfn: doublereal *
        foncnp: AdvApp2Var_EvaluatorFunc2Var
        nbpntu: integer *
        nbpntv: integer *
        urootb: doublereal *
        vrootb: doublereal *
        isofav: integer *
        sosotb: doublereal *
        disotb: doublereal *
        soditb: doublereal *
        diditb: doublereal *
        fpntab: doublereal *
        ttable: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ds1_(*args)

    mma2ds1_ = staticmethod(mma2ds1_)

    def mma2fnc_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        nbsesp: integer *
        ndimse: integer *
        uvfonc: doublereal *
        foncnp: AdvApp2Var_EvaluatorFunc2Var
        tconst: doublereal *
        isofav: integer *
        nbroot: integer *
        rootlg: doublereal *
        iordre: integer *
        ideriv: integer *
        ndgjac: integer *
        nbcrmx: integer *
        ncflim: integer *
        epsapr: doublereal *
        ncoeff: integer *
        courbe: doublereal *
        nbcrbe: integer *
        somtab: doublereal *
        diftab: doublereal *
        contr1: doublereal *
        contr2: doublereal *
        tabdec: doublereal *
        errmax: doublereal *
        errmoy: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fnc_(*args)

    mma2fnc_ = staticmethod(mma2fnc_)

    def mma2fx6_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ncfmxu: integer *
        ncfmxv: integer *
        ndimen: integer *
        nbsesp: integer *
        ndimse: integer *
        nbupat: integer *
        nbvpat: integer *
        iordru: integer *
        iordrv: integer *
        epsapr: doublereal *
        epsfro: doublereal *
        patcan: doublereal *
        errmax: doublereal *
        ncoefu: integer *
        ncoefv: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fx6_(*args)

    mma2fx6_ = staticmethod(mma2fx6_)

    def mma2jmx_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndgjac: integer *
        iordre: integer *
        xjacmx: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2jmx_(*args)

    mma2jmx_ = staticmethod(mma2jmx_)

    def mma2roo_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nbpntu: integer *
        nbpntv: integer *
        urootl: doublereal *
        vrootl: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2roo_(*args)

    mma2roo_ = staticmethod(mma2roo_)

    def mmapptt_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : doublereal *
        : integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_ApproxF2var_mmapptt_(*args)

    mmapptt_ = staticmethod(mmapptt_)

    __repr__ = _dumps_object


    def __init__(self):
        this = _AdvApp2Var.new_AdvApp2Var_ApproxF2var()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_ApproxF2var
    __del__ = lambda self: None
AdvApp2Var_ApproxF2var_swigregister = _AdvApp2Var.AdvApp2Var_ApproxF2var_swigregister
AdvApp2Var_ApproxF2var_swigregister(AdvApp2Var_ApproxF2var)

def AdvApp2Var_ApproxF2var_mma1her_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : doublereal *
    : integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma1her_(*args)

def AdvApp2Var_ApproxF2var_mma2ac1_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : doublereal *
    : doublereal *
    : doublereal *
    : doublereal *
    : doublereal *
    : doublereal *
    : doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac1_(*args)

def AdvApp2Var_ApproxF2var_mma2ac2_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : doublereal *
    : integer *
    : doublereal *
    : doublereal *
    : doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac2_(*args)

def AdvApp2Var_ApproxF2var_mma2ac3_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : doublereal *
    : integer *
    : doublereal *
    : doublereal *
    : doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ac3_(*args)

def AdvApp2Var_ApproxF2var_mma2can_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : doublereal *
    : doublereal *
    : doublereal *
    : integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2can_(*args)

def AdvApp2Var_ApproxF2var_mma2cdi_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    nbpntu: integer *
    urootl: doublereal *
    nbpntv: integer *
    vrootl: doublereal *
    iordru: integer *
    iordrv: integer *
    contr1: doublereal *
    contr2: doublereal *
    contr3: doublereal *
    contr4: doublereal *
    sotbu1: doublereal *
    sotbu2: doublereal *
    ditbu1: doublereal *
    ditbu2: doublereal *
    sotbv1: doublereal *
    sotbv2: doublereal *
    ditbv1: doublereal *
    ditbv2: doublereal *
    sosotb: doublereal *
    soditb: doublereal *
    disotb: doublereal *
    diditb: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2cdi_(*args)

def AdvApp2Var_ApproxF2var_mma2ce1_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    numdec: integer *
    ndimen: integer *
    nbsesp: integer *
    ndimse: integer *
    ndminu: integer *
    ndminv: integer *
    ndguli: integer *
    ndgvli: integer *
    ndjacu: integer *
    ndjacv: integer *
    iordru: integer *
    iordrv: integer *
    nbpntu: integer *
    nbpntv: integer *
    epsapr: doublereal *
    sosotb: doublereal *
    disotb: doublereal *
    soditb: doublereal *
    diditb: doublereal *
    patjac: doublereal *
    errmax: doublereal *
    errmoy: doublereal *
    ndegpu: integer *
    ndegpv: integer *
    itydec: integer *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ce1_(*args)

def AdvApp2Var_ApproxF2var_mma2ds1_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    uintfn: doublereal *
    vintfn: doublereal *
    foncnp: AdvApp2Var_EvaluatorFunc2Var
    nbpntu: integer *
    nbpntv: integer *
    urootb: doublereal *
    vrootb: doublereal *
    isofav: integer *
    sosotb: doublereal *
    disotb: doublereal *
    soditb: doublereal *
    diditb: doublereal *
    fpntab: doublereal *
    ttable: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2ds1_(*args)

def AdvApp2Var_ApproxF2var_mma2fnc_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    nbsesp: integer *
    ndimse: integer *
    uvfonc: doublereal *
    foncnp: AdvApp2Var_EvaluatorFunc2Var
    tconst: doublereal *
    isofav: integer *
    nbroot: integer *
    rootlg: doublereal *
    iordre: integer *
    ideriv: integer *
    ndgjac: integer *
    nbcrmx: integer *
    ncflim: integer *
    epsapr: doublereal *
    ncoeff: integer *
    courbe: doublereal *
    nbcrbe: integer *
    somtab: doublereal *
    diftab: doublereal *
    contr1: doublereal *
    contr2: doublereal *
    tabdec: doublereal *
    errmax: doublereal *
    errmoy: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fnc_(*args)

def AdvApp2Var_ApproxF2var_mma2fx6_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ncfmxu: integer *
    ncfmxv: integer *
    ndimen: integer *
    nbsesp: integer *
    ndimse: integer *
    nbupat: integer *
    nbvpat: integer *
    iordru: integer *
    iordrv: integer *
    epsapr: doublereal *
    epsfro: doublereal *
    patcan: doublereal *
    errmax: doublereal *
    ncoefu: integer *
    ncoefv: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2fx6_(*args)

def AdvApp2Var_ApproxF2var_mma2jmx_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndgjac: integer *
    iordre: integer *
    xjacmx: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2jmx_(*args)

def AdvApp2Var_ApproxF2var_mma2roo_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    nbpntu: integer *
    nbpntv: integer *
    urootl: doublereal *
    vrootl: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mma2roo_(*args)

def AdvApp2Var_ApproxF2var_mmapptt_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : doublereal *
    : integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_ApproxF2var_mmapptt_(*args)

class AdvApp2Var_Context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_Context, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        ifav: int
        iu: int
        iv: int
        nlimu: int
        nlimv: int
        iprecis: int
        nb1Dss: int
        nb2Dss: int
        nb3Dss: int
        tol1D: TColStd_HArray1OfReal
        tol2D: TColStd_HArray1OfReal
        tol3D: TColStd_HArray1OfReal
        tof1D: TColStd_HArray2OfReal
        tof2D: TColStd_HArray2OfReal
        tof3D: TColStd_HArray2OfReal

        Returns
        -------
        None

        """
        this = _AdvApp2Var.new_AdvApp2Var_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CToler(self, *args) -> "opencascade::handle< TColStd_HArray2OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray2OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_CToler(self, *args)


    def FToler(self, *args) -> "opencascade::handle< TColStd_HArray2OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray2OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_FToler(self, *args)


    def FavorIso(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_FavorIso(self, *args)


    def IToler(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_IToler(self, *args)


    def TotalDimension(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_TotalDimension(self, *args)


    def TotalNumberSSP(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_TotalNumberSSP(self, *args)


    def UGauss(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_UGauss(self, *args)


    def UJacDeg(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_UJacDeg(self, *args)


    def UJacMax(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_UJacMax(self, *args)


    def ULimit(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_ULimit(self, *args)


    def UOrder(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_UOrder(self, *args)


    def URoots(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_URoots(self, *args)


    def VGauss(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_VGauss(self, *args)


    def VJacDeg(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_VJacDeg(self, *args)


    def VJacMax(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_VJacMax(self, *args)


    def VLimit(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_VLimit(self, *args)


    def VOrder(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Context_VOrder(self, *args)


    def VRoots(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Context_VRoots(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Context
    __del__ = lambda self: None
AdvApp2Var_Context_swigregister = _AdvApp2Var.AdvApp2Var_Context_swigregister
AdvApp2Var_Context_swigregister(AdvApp2Var_Context)

class AdvApp2Var_Criterion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_Criterion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_Criterion, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsSatisfied(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        P: AdvApp2Var_Patch

        Returns
        -------
        bool

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_IsSatisfied(self, *args)


    def MaxValue(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_MaxValue(self, *args)


    def Repartition(self, *args) -> "AdvApp2Var_CriterionRepartition":
        """
        No available documentation.

        Returns
        -------
        AdvApp2Var_CriterionRepartition

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Repartition(self, *args)


    def Type(self, *args) -> "AdvApp2Var_CriterionType":
        """
        No available documentation.

        Returns
        -------
        AdvApp2Var_CriterionType

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Type(self, *args)


    def Value(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        P: AdvApp2Var_Patch
        C: AdvApp2Var_Context

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Criterion_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Criterion
    __del__ = lambda self: None
AdvApp2Var_Criterion_swigregister = _AdvApp2Var.AdvApp2Var_Criterion_swigregister
AdvApp2Var_Criterion_swigregister(AdvApp2Var_Criterion)

class AdvApp2Var_Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_Data, name)
    __repr__ = _swig_repr

    def Getmaovpar(*args) -> "maovpar_1_ &":
        """
        No available documentation.

        Returns
        -------
        maovpar_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmaovpar(*args)

    Getmaovpar = staticmethod(Getmaovpar)

    def Getmaovpch(*args) -> "maovpch_1_ &":
        """
        No available documentation.

        Returns
        -------
        maovpch_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmaovpch(*args)

    Getmaovpch = staticmethod(Getmaovpch)

    def Getmdnombr(*args) -> "mdnombr_1_ &":
        """
        No available documentation.

        Returns
        -------
        mdnombr_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmdnombr(*args)

    Getmdnombr = staticmethod(Getmdnombr)

    def Getminombr(*args) -> "minombr_1_ &":
        """
        No available documentation.

        Returns
        -------
        minombr_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getminombr(*args)

    Getminombr = staticmethod(Getminombr)

    def Getmlgdrtl(*args) -> "mlgdrtl_1_ &":
        """
        No available documentation.

        Returns
        -------
        mlgdrtl_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmlgdrtl(*args)

    Getmlgdrtl = staticmethod(Getmlgdrtl)

    def Getmmapgs0(*args) -> "mmapgs0_1_ &":
        """
        No available documentation.

        Returns
        -------
        mmapgs0_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs0(*args)

    Getmmapgs0 = staticmethod(Getmmapgs0)

    def Getmmapgs1(*args) -> "mmapgs1_1_ &":
        """
        No available documentation.

        Returns
        -------
        mmapgs1_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs1(*args)

    Getmmapgs1 = staticmethod(Getmmapgs1)

    def Getmmapgs2(*args) -> "mmapgs2_1_ &":
        """
        No available documentation.

        Returns
        -------
        mmapgs2_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs2(*args)

    Getmmapgs2 = staticmethod(Getmmapgs2)

    def Getmmapgss(*args) -> "mmapgss_1_ &":
        """
        No available documentation.

        Returns
        -------
        mmapgss_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmapgss(*args)

    Getmmapgss = staticmethod(Getmmapgss)

    def Getmmcmcnp(*args) -> "mmcmcnp_1_ &":
        """
        No available documentation.

        Returns
        -------
        mmcmcnp_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmcmcnp(*args)

    Getmmcmcnp = staticmethod(Getmmcmcnp)

    def Getmmjcobi(*args) -> "mmjcobi_1_ &":
        """
        No available documentation.

        Returns
        -------
        mmjcobi_1_

        """
        return _AdvApp2Var.AdvApp2Var_Data_Getmmjcobi(*args)

    Getmmjcobi = staticmethod(Getmmjcobi)

    __repr__ = _dumps_object


    def __init__(self):
        this = _AdvApp2Var.new_AdvApp2Var_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Data
    __del__ = lambda self: None
AdvApp2Var_Data_swigregister = _AdvApp2Var.AdvApp2Var_Data_swigregister
AdvApp2Var_Data_swigregister(AdvApp2Var_Data)

def AdvApp2Var_Data_Getmaovpar(*args) -> "maovpar_1_ &":
    """
    No available documentation.

    Returns
    -------
    maovpar_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmaovpar(*args)

def AdvApp2Var_Data_Getmaovpch(*args) -> "maovpch_1_ &":
    """
    No available documentation.

    Returns
    -------
    maovpch_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmaovpch(*args)

def AdvApp2Var_Data_Getmdnombr(*args) -> "mdnombr_1_ &":
    """
    No available documentation.

    Returns
    -------
    mdnombr_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmdnombr(*args)

def AdvApp2Var_Data_Getminombr(*args) -> "minombr_1_ &":
    """
    No available documentation.

    Returns
    -------
    minombr_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getminombr(*args)

def AdvApp2Var_Data_Getmlgdrtl(*args) -> "mlgdrtl_1_ &":
    """
    No available documentation.

    Returns
    -------
    mlgdrtl_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmlgdrtl(*args)

def AdvApp2Var_Data_Getmmapgs0(*args) -> "mmapgs0_1_ &":
    """
    No available documentation.

    Returns
    -------
    mmapgs0_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs0(*args)

def AdvApp2Var_Data_Getmmapgs1(*args) -> "mmapgs1_1_ &":
    """
    No available documentation.

    Returns
    -------
    mmapgs1_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs1(*args)

def AdvApp2Var_Data_Getmmapgs2(*args) -> "mmapgs2_1_ &":
    """
    No available documentation.

    Returns
    -------
    mmapgs2_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgs2(*args)

def AdvApp2Var_Data_Getmmapgss(*args) -> "mmapgss_1_ &":
    """
    No available documentation.

    Returns
    -------
    mmapgss_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmapgss(*args)

def AdvApp2Var_Data_Getmmcmcnp(*args) -> "mmcmcnp_1_ &":
    """
    No available documentation.

    Returns
    -------
    mmcmcnp_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmcmcnp(*args)

def AdvApp2Var_Data_Getmmjcobi(*args) -> "mmjcobi_1_ &":
    """
    No available documentation.

    Returns
    -------
    mmjcobi_1_

    """
    return _AdvApp2Var.AdvApp2Var_Data_Getmmjcobi(*args)

class AdvApp2Var_Framework(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_Framework, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_Framework, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Frame: AdvApp2Var_SequenceOfNode
        UFrontier: AdvApp2Var_SequenceOfStrip
        VFrontier: AdvApp2Var_SequenceOfStrip

        Returns
        -------
        None

        """
        this = _AdvApp2Var.new_AdvApp2Var_Framework(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeIso(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        IndexIso: int
        IndexStrip: int
        anIso: AdvApp2Var_Iso

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Framework_ChangeIso(self, *args)


    def FirstNode(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        Type: GeomAbs_IsoType
        IndexIso: int
        IndexStrip: int

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Framework_FirstNode(self, *args)


    def FirstNotApprox(self, *args) -> "opencascade::handle< AdvApp2Var_Iso >":
        """
        Search the index of the first iso not approximated, if all isos are approximated null is returned.

        Parameters
        ----------

        Returns
        -------
        IndexIso: int
        IndexStrip: int

        """
        return _AdvApp2Var.AdvApp2Var_Framework_FirstNotApprox(self, *args)


    def IsoU(self, *args) -> "AdvApp2Var_Iso const &":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        V0: float
        V1: float

        Returns
        -------
        AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Framework_IsoU(self, *args)


    def IsoV(self, *args) -> "AdvApp2Var_Iso const &":
        """
        No available documentation.

        Parameters
        ----------
        U0: float
        U1: float
        V: float

        Returns
        -------
        AdvApp2Var_Iso

        """
        return _AdvApp2Var.AdvApp2Var_Framework_IsoV(self, *args)


    def LastNode(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        Type: GeomAbs_IsoType
        IndexIso: int
        IndexStrip: int

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Framework_LastNode(self, *args)


    def Node(self, *args) -> "opencascade::handle< AdvApp2Var_Node > const &":
        """
        No available documentation.

        Parameters
        ----------
        IndexNode: int

        Returns
        -------
        opencascade::handle<AdvApp2Var_Node>

        No available documentation.

        Parameters
        ----------
        U: float
        V: float

        Returns
        -------
        opencascade::handle<AdvApp2Var_Node>

        """
        return _AdvApp2Var.AdvApp2Var_Framework_Node(self, *args)


    def UEquation(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal > const &":
        """
        No available documentation.

        Parameters
        ----------
        IndexIso: int
        IndexStrip: int

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Framework_UEquation(self, *args)


    def UpdateInU(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        CuttingValue: float

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Framework_UpdateInU(self, *args)


    def UpdateInV(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        CuttingValue: float

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Framework_UpdateInV(self, *args)


    def VEquation(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal > const &":
        """
        No available documentation.

        Parameters
        ----------
        IndexIso: int
        IndexStrip: int

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Framework_VEquation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Framework
    __del__ = lambda self: None
AdvApp2Var_Framework_swigregister = _AdvApp2Var.AdvApp2Var_Framework_swigregister
AdvApp2Var_Framework_swigregister(AdvApp2Var_Framework)

class AdvApp2Var_MathBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_MathBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_MathBase, name)
    __repr__ = _swig_repr

    def mdsptpt_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        point1: doublereal *
        point2: doublereal *
        distan: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mdsptpt_(*args)

    mdsptpt_ = staticmethod(mdsptpt_)

    def mmapcmp_(*args) -> "int":
        """
        ///.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : double *
        : double *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmapcmp_(*args)

    mmapcmp_ = staticmethod(mmapcmp_)

    def mmaperx_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ncofmx: integer *
        ndimen: integer *
        ncoeff: integer *
        iordre: integer *
        crvjac: doublereal *
        ncfnew: integer *
        ycvmax: doublereal *
        errmax: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmaperx_(*args)

    mmaperx_ = staticmethod(mmaperx_)

    def mmarcin_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimax: integer *
        ndim: integer *
        ncoeff: integer *
        crvold: doublereal *
        u0: doublereal *
        u1: doublereal *
        crvnew: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmarcin_(*args)

    mmarcin_ = staticmethod(mmarcin_)

    def mmbulld_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nbcoln: integer *
        nblign: integer *
        dtabtr: doublereal *
        numcle: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmbulld_(*args)

    mmbulld_ = staticmethod(mmbulld_)

    def mmcdriv_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        ncoeff: integer *
        courbe: doublereal *
        ideriv: integer *
        ncofdv: integer *
        crvdrv: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcdriv_(*args)

    mmcdriv_ = staticmethod(mmcdriv_)

    def mmcglc1_(*args) -> "int":
        """
        ///.

        Parameters
        ----------
        ndimax: integer *
        ndimen: integer *
        ncoeff: integer *
        courbe: doublereal *
        tdebut: doublereal *
        tfinal: doublereal *
        epsiln: doublereal *
        xlongc: doublereal *
        erreur: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcglc1_(*args)

    mmcglc1_ = staticmethod(mmcglc1_)

    def mmcvctx_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        ncofmx: integer *
        nderiv: integer *
        ctrtes: doublereal *
        crvres: doublereal *
        tabaux: doublereal *
        xmatri: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcvctx_(*args)

    mmcvctx_ = staticmethod(mmcvctx_)

    def mmcvinv_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimax: integer *
        ncoef: integer *
        ndim: integer *
        curveo: doublereal *
        curve: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmcvinv_(*args)

    mmcvinv_ = staticmethod(mmcvinv_)

    def mmdrc11_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : doublereal *
        : doublereal *
        : doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmdrc11_(*args)

    mmdrc11_ = staticmethod(mmdrc11_)

    def mmdrvck_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ncoeff: integer *
        ndimen: integer *
        courbe: doublereal *
        ideriv: integer *
        tparam: doublereal *
        pntcrb: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmdrvck_(*args)

    mmdrvck_ = staticmethod(mmdrvck_)

    def mmeps1_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        epsilo: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmeps1_(*args)

    mmeps1_ = staticmethod(mmeps1_)

    def mmfmca8_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        ncoefu: integer *
        ncoefv: integer *
        ndimax: integer *
        ncfumx: integer *
        ncfvmx: integer *
        tabini: doublereal *
        tabres: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca8_(*args)

    mmfmca8_ = staticmethod(mmfmca8_)

    def mmfmca9_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : integer *
        : doublereal *
        : doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca9_(*args)

    mmfmca9_ = staticmethod(mmfmca9_)

    def mmfmcar_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        ncofmx: integer *
        ncoefu: integer *
        ncoefv: integer *
        patold: doublereal *
        upara1: doublereal *
        upara2: doublereal *
        vpara1: doublereal *
        vpara2: doublereal *
        patnew: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcar_(*args)

    mmfmcar_ = staticmethod(mmfmcar_)

    def mmfmcb5_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : integer *
        : integer *
        : integer *
        : doublereal *
        : integer *
        : integer *
        : integer *
        : doublereal *
        : integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcb5_(*args)

    mmfmcb5_ = staticmethod(mmfmcb5_)

    def mmfmtb1_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        maxsz1: integer *
        table1: doublereal *
        isize1: integer *
        jsize1: integer *
        maxsz2: integer *
        table2: doublereal *
        isize2: integer *
        jsize2: integer *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmfmtb1_(*args)

    mmfmtb1_ = staticmethod(mmfmtb1_)

    def mmhjcan_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        ncourb: integer *
        ncftab: integer *
        orcont: integer *
        ncflim: integer *
        tcbold: doublereal *
        tdecop: doublereal *
        tcbnew: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmhjcan_(*args)

    mmhjcan_ = staticmethod(mmhjcan_)

    def mminltt_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ncolmx: integer *
        nlgnmx: integer *
        tabtri: doublereal *
        nbrcol: integer *
        nbrlgn: integer *
        ajoute: doublereal *
        epseg: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mminltt_(*args)

    mminltt_ = staticmethod(mminltt_)

    def mmjacan_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ideriv: integer *
        ndeg: integer *
        poljac: doublereal *
        polcan: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmjacan_(*args)

    mmjacan_ = staticmethod(mmjacan_)

    def mmjaccv_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ncoef: integer *
        ndim: integer *
        ider: integer *
        crvlgd: doublereal *
        polaux: doublereal *
        crvcan: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmjaccv_(*args)

    mmjaccv_ = staticmethod(mmjaccv_)

    def mmmpocur_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ncofmx: integer *
        ndim: integer *
        ndeg: integer *
        courbe: doublereal *
        tparam: doublereal *
        tabval: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmmpocur_(*args)

    mmmpocur_ = staticmethod(mmmpocur_)

    def mmmrslwd_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        normax: integer *
        nordre: integer *
        ndim: integer *
        amat: doublereal *
        bmat: doublereal *
        epspiv: doublereal *
        aaux: doublereal *
        xmat: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmmrslwd_(*args)

    mmmrslwd_ = staticmethod(mmmrslwd_)

    def mmpobas_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        tparam: doublereal *
        iordre: integer *
        ncoeff: integer *
        nderiv: integer *
        valbas: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmpobas_(*args)

    mmpobas_ = staticmethod(mmpobas_)

    def mmpocrb_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimax: integer *
        ncoeff: integer *
        courbe: doublereal *
        ndim: integer *
        tparam: doublereal *
        pntcrb: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmpocrb_(*args)

    mmpocrb_ = staticmethod(mmpocrb_)

    def mmposui_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        dimmat: integer *
        nistoc: integer *
        aposit: integer *
        posuiv: integer *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmposui_(*args)

    mmposui_ = staticmethod(mmposui_)

    def mmresol_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        hdimen: integer *
        gdimen: integer *
        hnstoc: integer *
        gnstoc: integer *
        mnstoc: integer *
        matsyh: doublereal *
        matsyg: doublereal *
        vecsyh: doublereal *
        vecsyg: doublereal *
        hposit: integer *
        hposui: integer *
        gposit: integer *
        mmposui: integer *
        mposit: integer *
        vecsol: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmresol_(*args)

    mmresol_ = staticmethod(mmresol_)

    def mmrtptt_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndglgd: integer *
        rtlegd: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmrtptt_(*args)

    mmrtptt_ = staticmethod(mmrtptt_)

    def mmsrre2_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        tparam: doublereal *
        nbrval: integer *
        tablev: doublereal *
        epsil: doublereal *
        numint: integer *
        itypen: integer *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmsrre2_(*args)

    mmsrre2_ = staticmethod(mmsrre2_)

    def mmtrpjj_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ncofmx: integer *
        ndimen: integer *
        ncoeff: integer *
        epsi3d: doublereal *
        iordre: integer *
        crvlgd: doublereal *
        ycvmax: doublereal *
        errmax: doublereal *
        ncfnew: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmtrpjj_(*args)

    mmtrpjj_ = staticmethod(mmtrpjj_)

    def mmunivt_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        vector: doublereal *
        vecnrm: doublereal *
        epsiln: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmunivt_(*args)

    mmunivt_ = staticmethod(mmunivt_)

    def mmveps3_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        eps03: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmveps3_(*args)

    mmveps3_ = staticmethod(mmveps3_)

    def mmvncol_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        vecin: doublereal *
        vecout: doublereal *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmvncol_(*args)

    mmvncol_ = staticmethod(mmvncol_)

    def mmwprcs_(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        : doublereal *
        : doublereal *
        : doublereal *
        : doublereal *
        : integer *
        : integer *

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mmwprcs_(*args)

    mmwprcs_ = staticmethod(mmwprcs_)

    def msc_(*args) -> "doublereal":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        vecte1: doublereal *
        vecte2: doublereal *

        Returns
        -------
        doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_msc_(*args)

    msc_ = staticmethod(msc_)

    def mvsheld_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        n: integer *
        is: integer *
        dtab: doublereal *
        icle: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mvsheld_(*args)

    mvsheld_ = staticmethod(mvsheld_)

    def mzsnorm_(*args) -> "doublereal":
        """
        No available documentation.

        Parameters
        ----------
        ndimen: integer *
        vecteu: doublereal *

        Returns
        -------
        doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_mzsnorm_(*args)

    mzsnorm_ = staticmethod(mzsnorm_)

    def pow__di(*args) -> "doublereal":
        """
        No available documentation.

        Parameters
        ----------
        x: doublereal *
        n: integer *

        Returns
        -------
        doublereal

        """
        return _AdvApp2Var.AdvApp2Var_MathBase_pow__di(*args)

    pow__di = staticmethod(pow__di)

    __repr__ = _dumps_object

    @methodnotwrapped
    def mmgaus1_(self):
    	pass


    def __init__(self):
        this = _AdvApp2Var.new_AdvApp2Var_MathBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_MathBase
    __del__ = lambda self: None
AdvApp2Var_MathBase_swigregister = _AdvApp2Var.AdvApp2Var_MathBase_swigregister
AdvApp2Var_MathBase_swigregister(AdvApp2Var_MathBase)

def AdvApp2Var_MathBase_mdsptpt_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    point1: doublereal *
    point2: doublereal *
    distan: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mdsptpt_(*args)

def AdvApp2Var_MathBase_mmapcmp_(*args) -> "int":
    """
    ///.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : double *
    : double *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmapcmp_(*args)

def AdvApp2Var_MathBase_mmaperx_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ncofmx: integer *
    ndimen: integer *
    ncoeff: integer *
    iordre: integer *
    crvjac: doublereal *
    ncfnew: integer *
    ycvmax: doublereal *
    errmax: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmaperx_(*args)

def AdvApp2Var_MathBase_mmarcin_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimax: integer *
    ndim: integer *
    ncoeff: integer *
    crvold: doublereal *
    u0: doublereal *
    u1: doublereal *
    crvnew: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmarcin_(*args)

def AdvApp2Var_MathBase_mmbulld_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    nbcoln: integer *
    nblign: integer *
    dtabtr: doublereal *
    numcle: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmbulld_(*args)

def AdvApp2Var_MathBase_mmcdriv_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    ncoeff: integer *
    courbe: doublereal *
    ideriv: integer *
    ncofdv: integer *
    crvdrv: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcdriv_(*args)

def AdvApp2Var_MathBase_mmcglc1_(*args) -> "int":
    """
    ///.

    Parameters
    ----------
    ndimax: integer *
    ndimen: integer *
    ncoeff: integer *
    courbe: doublereal *
    tdebut: doublereal *
    tfinal: doublereal *
    epsiln: doublereal *
    xlongc: doublereal *
    erreur: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcglc1_(*args)

def AdvApp2Var_MathBase_mmcvctx_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    ncofmx: integer *
    nderiv: integer *
    ctrtes: doublereal *
    crvres: doublereal *
    tabaux: doublereal *
    xmatri: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcvctx_(*args)

def AdvApp2Var_MathBase_mmcvinv_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimax: integer *
    ncoef: integer *
    ndim: integer *
    curveo: doublereal *
    curve: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmcvinv_(*args)

def AdvApp2Var_MathBase_mmdrc11_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : doublereal *
    : doublereal *
    : doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmdrc11_(*args)

def AdvApp2Var_MathBase_mmdrvck_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ncoeff: integer *
    ndimen: integer *
    courbe: doublereal *
    ideriv: integer *
    tparam: doublereal *
    pntcrb: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmdrvck_(*args)

def AdvApp2Var_MathBase_mmeps1_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    epsilo: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmeps1_(*args)

def AdvApp2Var_MathBase_mmfmca8_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    ncoefu: integer *
    ncoefv: integer *
    ndimax: integer *
    ncfumx: integer *
    ncfvmx: integer *
    tabini: doublereal *
    tabres: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca8_(*args)

def AdvApp2Var_MathBase_mmfmca9_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : integer *
    : doublereal *
    : doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmca9_(*args)

def AdvApp2Var_MathBase_mmfmcar_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    ncofmx: integer *
    ncoefu: integer *
    ncoefv: integer *
    patold: doublereal *
    upara1: doublereal *
    upara2: doublereal *
    vpara1: doublereal *
    vpara2: doublereal *
    patnew: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcar_(*args)

def AdvApp2Var_MathBase_mmfmcb5_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : integer *
    : integer *
    : integer *
    : doublereal *
    : integer *
    : integer *
    : integer *
    : doublereal *
    : integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmcb5_(*args)

def AdvApp2Var_MathBase_mmfmtb1_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    maxsz1: integer *
    table1: doublereal *
    isize1: integer *
    jsize1: integer *
    maxsz2: integer *
    table2: doublereal *
    isize2: integer *
    jsize2: integer *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmfmtb1_(*args)

def AdvApp2Var_MathBase_mmhjcan_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    ncourb: integer *
    ncftab: integer *
    orcont: integer *
    ncflim: integer *
    tcbold: doublereal *
    tdecop: doublereal *
    tcbnew: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmhjcan_(*args)

def AdvApp2Var_MathBase_mminltt_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ncolmx: integer *
    nlgnmx: integer *
    tabtri: doublereal *
    nbrcol: integer *
    nbrlgn: integer *
    ajoute: doublereal *
    epseg: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mminltt_(*args)

def AdvApp2Var_MathBase_mmjacan_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ideriv: integer *
    ndeg: integer *
    poljac: doublereal *
    polcan: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmjacan_(*args)

def AdvApp2Var_MathBase_mmjaccv_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ncoef: integer *
    ndim: integer *
    ider: integer *
    crvlgd: doublereal *
    polaux: doublereal *
    crvcan: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmjaccv_(*args)

def AdvApp2Var_MathBase_mmmpocur_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ncofmx: integer *
    ndim: integer *
    ndeg: integer *
    courbe: doublereal *
    tparam: doublereal *
    tabval: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmmpocur_(*args)

def AdvApp2Var_MathBase_mmmrslwd_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    normax: integer *
    nordre: integer *
    ndim: integer *
    amat: doublereal *
    bmat: doublereal *
    epspiv: doublereal *
    aaux: doublereal *
    xmat: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmmrslwd_(*args)

def AdvApp2Var_MathBase_mmpobas_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    tparam: doublereal *
    iordre: integer *
    ncoeff: integer *
    nderiv: integer *
    valbas: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmpobas_(*args)

def AdvApp2Var_MathBase_mmpocrb_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimax: integer *
    ncoeff: integer *
    courbe: doublereal *
    ndim: integer *
    tparam: doublereal *
    pntcrb: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmpocrb_(*args)

def AdvApp2Var_MathBase_mmposui_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    dimmat: integer *
    nistoc: integer *
    aposit: integer *
    posuiv: integer *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmposui_(*args)

def AdvApp2Var_MathBase_mmresol_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    hdimen: integer *
    gdimen: integer *
    hnstoc: integer *
    gnstoc: integer *
    mnstoc: integer *
    matsyh: doublereal *
    matsyg: doublereal *
    vecsyh: doublereal *
    vecsyg: doublereal *
    hposit: integer *
    hposui: integer *
    gposit: integer *
    mmposui: integer *
    mposit: integer *
    vecsol: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmresol_(*args)

def AdvApp2Var_MathBase_mmrtptt_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndglgd: integer *
    rtlegd: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmrtptt_(*args)

def AdvApp2Var_MathBase_mmsrre2_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    tparam: doublereal *
    nbrval: integer *
    tablev: doublereal *
    epsil: doublereal *
    numint: integer *
    itypen: integer *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmsrre2_(*args)

def AdvApp2Var_MathBase_mmtrpjj_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ncofmx: integer *
    ndimen: integer *
    ncoeff: integer *
    epsi3d: doublereal *
    iordre: integer *
    crvlgd: doublereal *
    ycvmax: doublereal *
    errmax: doublereal *
    ncfnew: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmtrpjj_(*args)

def AdvApp2Var_MathBase_mmunivt_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    vector: doublereal *
    vecnrm: doublereal *
    epsiln: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmunivt_(*args)

def AdvApp2Var_MathBase_mmveps3_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    eps03: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmveps3_(*args)

def AdvApp2Var_MathBase_mmvncol_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    vecin: doublereal *
    vecout: doublereal *
    iercod: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmvncol_(*args)

def AdvApp2Var_MathBase_mmwprcs_(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    : doublereal *
    : doublereal *
    : doublereal *
    : doublereal *
    : integer *
    : integer *

    Returns
    -------
    None

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mmwprcs_(*args)

def AdvApp2Var_MathBase_msc_(*args) -> "doublereal":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    vecte1: doublereal *
    vecte2: doublereal *

    Returns
    -------
    doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_msc_(*args)

def AdvApp2Var_MathBase_mvsheld_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    n: integer *
    is: integer *
    dtab: doublereal *
    icle: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mvsheld_(*args)

def AdvApp2Var_MathBase_mzsnorm_(*args) -> "doublereal":
    """
    No available documentation.

    Parameters
    ----------
    ndimen: integer *
    vecteu: doublereal *

    Returns
    -------
    doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_mzsnorm_(*args)

def AdvApp2Var_MathBase_pow__di(*args) -> "doublereal":
    """
    No available documentation.

    Parameters
    ----------
    x: doublereal *
    n: integer *

    Returns
    -------
    doublereal

    """
    return _AdvApp2Var.AdvApp2Var_MathBase_pow__di(*args)

class AdvApp2Var_Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_Network, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Net: AdvApp2Var_SequenceOfPatch
        TheU: TColStd_SequenceOfReal
        TheV: TColStd_SequenceOfReal

        Returns
        -------
        None

        """
        this = _AdvApp2Var.new_AdvApp2Var_Network(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangePatch(self, *args) -> "AdvApp2Var_Patch &":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_Network_ChangePatch(self, *args)


    def FirstNotApprox(self, *args) -> "Standard_Boolean":
        """
        Search the index of the first patch not approximated, if all patches are approximated standard_false is returned.

        Parameters
        ----------

        Returns
        -------
        Index: int

        """
        return _AdvApp2Var.AdvApp2Var_Network_FirstNotApprox(self, *args)


    def NbPatch(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatch(self, *args)


    def NbPatchInU(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatchInU(self, *args)


    def NbPatchInV(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Network_NbPatchInV(self, *args)


    def Patch(self, *args) -> "AdvApp2Var_Patch const &":
        """
        No available documentation.

        Parameters
        ----------
        UIndex: int
        VIndex: int

        Returns
        -------
        AdvApp2Var_Patch

        """
        return _AdvApp2Var.AdvApp2Var_Network_Patch(self, *args)


    def SameDegree(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        iu: int
        iv: int

        Returns
        -------
        ncfu: int
        ncfv: int

        """
        return _AdvApp2Var.AdvApp2Var_Network_SameDegree(self, *args)


    def UParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Network_UParameter(self, *args)


    def UpdateInU(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        CuttingValue: float

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Network_UpdateInU(self, *args)


    def UpdateInV(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        CuttingValue: float

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Network_UpdateInV(self, *args)


    def VParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Network_VParameter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Network
    __del__ = lambda self: None
AdvApp2Var_Network_swigregister = _AdvApp2Var.AdvApp2Var_Network_swigregister
AdvApp2Var_Network_swigregister(AdvApp2Var_Network)

class AdvApp2Var_Node(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_Node, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_Node, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        iu: int
        iv: int

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        UV: gp_XY
        iu: int
        iv: int

        Returns
        -------
        None

        """
        this = _AdvApp2Var.new_AdvApp2Var_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Coord(self, *args) -> "gp_XY const":
        """
        Returns the coordinates (u,v) of the node.

        Returns
        -------
        gp_XY

        """
        return _AdvApp2Var.AdvApp2Var_Node_Coord(self, *args)


    def Error(self, *args) -> "Standard_Real":
        """
        Returns the error between f(u,v) and its approximation.

        Parameters
        ----------
        iu: int
        iv: int

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Node_Error(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        Returns the value f(u,v) or its derivates on the node (u,v).

        Parameters
        ----------
        iu: int
        iv: int

        Returns
        -------
        gp_Pnt

        """
        return _AdvApp2Var.AdvApp2Var_Node_Point(self, *args)


    def SetCoord(self, *args) -> "void":
        """
        Changes the coordinates (u,v) to (x1,x2).

        Parameters
        ----------
        x1: float
        x2: float

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetCoord(self, *args)


    def SetError(self, *args) -> "void":
        """
        Affects the error between f(u,v) and its approximation.

        Parameters
        ----------
        iu: int
        iv: int
        error: float

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetError(self, *args)


    def SetPoint(self, *args) -> "void":
        """
        Affects the value f(u,v) or its derivates on the node (u,v).

        Parameters
        ----------
        iu: int
        iv: int
        Pt: gp_Pnt

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Node_SetPoint(self, *args)


    def UOrder(self, *args) -> "Standard_Integer":
        """
        Returns the continuity order in u of the node.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Node_UOrder(self, *args)


    def VOrder(self, *args) -> "Standard_Integer":
        """
        Returns the continuity order in v of the node.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Node_VOrder(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_AdvApp2Var_Node_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Node
    __del__ = lambda self: None
AdvApp2Var_Node_swigregister = _AdvApp2Var.AdvApp2Var_Node_swigregister
AdvApp2Var_Node_swigregister(AdvApp2Var_Node)

class AdvApp2Var_Patch(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_Patch, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_Patch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        U0: float
        U1: float
        V0: float
        V1: float
        iu: int
        iv: int

        Returns
        -------
        None

        """
        this = _AdvApp2Var.new_AdvApp2Var_Patch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddConstraints(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Conditions: AdvApp2Var_Context
        Constraints: AdvApp2Var_Framework

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AddConstraints(self, *args)


    def AddErrors(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Constraints: AdvApp2Var_Framework

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AddErrors(self, *args)


    def AverageErrors(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Patch_AverageErrors(self, *args)


    def ChangeDomain(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        a: float
        b: float
        c: float
        d: float

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_ChangeDomain(self, *args)


    def ChangeNbCoeff(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        NbCoeffU: int
        NbCoeffV: int

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_ChangeNbCoeff(self, *args)


    def Coefficients(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Parameters
        ----------
        SSPIndex: int
        Conditions: AdvApp2Var_Context

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Coefficients(self, *args)


    def CritValue(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_CritValue(self, *args)


    def CutSense(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        No available documentation.

        Parameters
        ----------
        Crit: AdvApp2Var_Criterion
        NumDec: int

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_CutSense(self, *args)


    def Discretise(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Conditions: AdvApp2Var_Context
        Constraints: AdvApp2Var_Framework
        func: AdvApp2Var_EvaluatorFunc2Var

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Discretise(self, *args)


    def HasResult(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _AdvApp2Var.AdvApp2Var_Patch_HasResult(self, *args)


    def IsApproximated(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsApproximated(self, *args)


    def IsDiscretised(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsDiscretised(self, *args)


    def IsoErrors(self, *args) -> "opencascade::handle< TColStd_HArray2OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray2OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Patch_IsoErrors(self, *args)


    def MakeApprox(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Conditions: AdvApp2Var_Context
        Constraints: AdvApp2Var_Framework
        NumDec: int

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_MakeApprox(self, *args)


    def MaxErrors(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _AdvApp2Var.AdvApp2Var_Patch_MaxErrors(self, *args)


    def NbCoeffInU(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_NbCoeffInU(self, *args)


    def NbCoeffInV(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_NbCoeffInV(self, *args)


    def OverwriteApprox(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_OverwriteApprox(self, *args)


    def Poles(self, *args) -> "opencascade::handle< TColgp_HArray2OfPnt >":
        """
        No available documentation.

        Parameters
        ----------
        SSPIndex: int
        Conditions: AdvApp2Var_Context

        Returns
        -------
        opencascade::handle<TColgp_HArray2OfPnt>

        """
        return _AdvApp2Var.AdvApp2Var_Patch_Poles(self, *args)


    def ResetApprox(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_ResetApprox(self, *args)


    def SetCritValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        dist: float

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_Patch_SetCritValue(self, *args)


    def U0(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_U0(self, *args)


    def U1(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_U1(self, *args)


    def UOrder(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_UOrder(self, *args)


    def V0(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_V0(self, *args)


    def V1(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _AdvApp2Var.AdvApp2Var_Patch_V1(self, *args)


    def VOrder(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_Patch_VOrder(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_AdvApp2Var_Patch_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_Patch
    __del__ = lambda self: None
AdvApp2Var_Patch_swigregister = _AdvApp2Var.AdvApp2Var_Patch_swigregister
AdvApp2Var_Patch_swigregister(AdvApp2Var_Patch)

class AdvApp2Var_SysBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvApp2Var_SysBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvApp2Var_SysBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _AdvApp2Var.new_AdvApp2Var_SysBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def do__fio(*args) -> "int":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_do__fio(*args)

    do__fio = staticmethod(do__fio)

    def do__lio(*args) -> "int":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_do__lio(*args)

    do__lio = staticmethod(do__lio)

    def macinit_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        : int *
        : int *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macinit_(*args)

    macinit_ = staticmethod(macinit_)

    def macrai4_(self, *args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nbelem: integer *
        maxelm: integer *
        itablo: integer *
        iofset: intptr_t *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrai4_(self, *args)


    def macrar8_(self, *args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nbelem: integer *
        maxelm: integer *
        xtablo: doublereal *
        iofset: intptr_t *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrar8_(self, *args)


    def macrdi4_(self, *args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nbelem: integer *
        maxelm: integer *
        itablo: integer *
        iofset: intptr_t *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrdi4_(self, *args)


    def macrdr8_(self, *args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nbelem: integer *
        maxelm: integer *
        xtablo: doublereal *
        iofset: intptr_t *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_macrdr8_(self, *args)


    def maermsg_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        cnompg: char *
        icoder: integer *
        cnompg_len: ftnlen

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maermsg_(*args)

    maermsg_ = staticmethod(maermsg_)

    def mainial_(self, *args) -> "int":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mainial_(self, *args)


    def maitbr8_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        itaill: integer *
        xtab: doublereal *
        xval: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maitbr8_(*args)

    maitbr8_ = staticmethod(maitbr8_)

    def maovsr8_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ivalcs: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_maovsr8_(*args)

    maovsr8_ = staticmethod(maovsr8_)

    def mcrdelt_(self, *args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        iunit: integer *
        isize: integer *
        t: void *
        iofset: intptr_t *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrdelt_(self, *args)


    def mcrfill_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        size: integer *
        tin: void *
        tout: void *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrfill_(*args)

    mcrfill_ = staticmethod(mcrfill_)

    def mcrrqst_(self, *args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        iunit: integer *
        isize: integer *
        t: void *
        iofset: intptr_t *
        iercod: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mcrrqst_(self, *args)


    def mgenmsg_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nomprg: char *
        nomprg_len: ftnlen

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mgenmsg_(*args)

    mgenmsg_ = staticmethod(mgenmsg_)

    def mgsomsg_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nomprg: char *
        nomprg_len: ftnlen

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mgsomsg_(*args)

    mgsomsg_ = staticmethod(mgsomsg_)

    def miraz_(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        taille: integer *
        adt: void *

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_miraz_(*args)

    miraz_ = staticmethod(miraz_)

    def mnfndeb_(*args) -> "integer":
        """
        No available documentation.

        Returns
        -------
        integer

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mnfndeb_(*args)

    mnfndeb_ = staticmethod(mnfndeb_)

    def msifill_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nbintg: integer *
        ivecin: integer *
        ivecou: integer *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_msifill_(*args)

    msifill_ = staticmethod(msifill_)

    def msrfill_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        nbreel: integer *
        vecent: doublereal *
        vecsor: doublereal *

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_msrfill_(*args)

    msrfill_ = staticmethod(msrfill_)

    def mswrdbg_(*args) -> "int":
        """
        No available documentation.

        Parameters
        ----------
        ctexte: char *
        ctexte_len: ftnlen

        Returns
        -------
        int

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mswrdbg_(*args)

    mswrdbg_ = staticmethod(mswrdbg_)

    def mvriraz_(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        taille: integer *
        adt: void *

        Returns
        -------
        None

        """
        return _AdvApp2Var.AdvApp2Var_SysBase_mvriraz_(*args)

    mvriraz_ = staticmethod(mvriraz_)

    __repr__ = _dumps_object

    __swig_destroy__ = _AdvApp2Var.delete_AdvApp2Var_SysBase
    __del__ = lambda self: None
AdvApp2Var_SysBase_swigregister = _AdvApp2Var.AdvApp2Var_SysBase_swigregister
AdvApp2Var_SysBase_swigregister(AdvApp2Var_SysBase)

def AdvApp2Var_SysBase_do__fio(*args) -> "int":
    """
    No available documentation.

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_do__fio(*args)

def AdvApp2Var_SysBase_do__lio(*args) -> "int":
    """
    No available documentation.

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_do__lio(*args)

def AdvApp2Var_SysBase_macinit_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    : int *
    : int *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_macinit_(*args)

def AdvApp2Var_SysBase_maermsg_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    cnompg: char *
    icoder: integer *
    cnompg_len: ftnlen

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maermsg_(*args)

def AdvApp2Var_SysBase_maitbr8_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    itaill: integer *
    xtab: doublereal *
    xval: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maitbr8_(*args)

def AdvApp2Var_SysBase_maovsr8_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ivalcs: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_maovsr8_(*args)

def AdvApp2Var_SysBase_mcrfill_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    size: integer *
    tin: void *
    tout: void *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mcrfill_(*args)

def AdvApp2Var_SysBase_mgenmsg_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    nomprg: char *
    nomprg_len: ftnlen

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mgenmsg_(*args)

def AdvApp2Var_SysBase_mgsomsg_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    nomprg: char *
    nomprg_len: ftnlen

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mgsomsg_(*args)

def AdvApp2Var_SysBase_miraz_(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    taille: integer *
    adt: void *

    Returns
    -------
    None

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_miraz_(*args)

def AdvApp2Var_SysBase_mnfndeb_(*args) -> "integer":
    """
    No available documentation.

    Returns
    -------
    integer

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mnfndeb_(*args)

def AdvApp2Var_SysBase_msifill_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    nbintg: integer *
    ivecin: integer *
    ivecou: integer *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_msifill_(*args)

def AdvApp2Var_SysBase_msrfill_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    nbreel: integer *
    vecent: doublereal *
    vecsor: doublereal *

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_msrfill_(*args)

def AdvApp2Var_SysBase_mswrdbg_(*args) -> "int":
    """
    No available documentation.

    Parameters
    ----------
    ctexte: char *
    ctexte_len: ftnlen

    Returns
    -------
    int

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mswrdbg_(*args)

def AdvApp2Var_SysBase_mvriraz_(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    taille: integer *
    adt: void *

    Returns
    -------
    None

    """
    return _AdvApp2Var.AdvApp2Var_SysBase_mvriraz_(*args)


@classnotwrapped
class AdvApp2Var_EvaluatorFunc2Var:
	pass

@classnotwrapped
class AdvApp2Var_Iso:
	pass




# This file is compatible with both classic and new-style classes.


