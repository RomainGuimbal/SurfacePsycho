# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomToStep module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_geomtostep.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomToStep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomToStep')
    _GeomToStep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomToStep', [dirname(__file__)])
        except ImportError:
            import _GeomToStep
            return _GeomToStep
        try:
            _mod = imp.load_module('_GeomToStep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomToStep = swig_import_helper()
    del swig_import_helper
else:
    import _GeomToStep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomToStep.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _GeomToStep.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GeomToStep.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _GeomToStep.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _GeomToStep.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _GeomToStep.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _GeomToStep.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _GeomToStep.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _GeomToStep.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _GeomToStep.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GeomToStep.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _GeomToStep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _GeomToStep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GeomToStep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _GeomToStep.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _GeomToStep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _GeomToStep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomToStep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _GeomToStep.process_exception(error, method_name, class_name)
process_exception = _GeomToStep.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.Resource
import OCC.Core.StepRepr
import OCC.Core.StepBasic

from enum import IntEnum
from OCC.Core.Exception import *



class GeomToStep_Root(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_Root, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_Root, name)
    __repr__ = _swig_repr

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomToStep.GeomToStep_Root_IsDone(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _GeomToStep.new_GeomToStep_Root()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomToStep.delete_GeomToStep_Root
    __del__ = lambda self: None
GeomToStep_Root_swigregister = _GeomToStep.GeomToStep_Root_swigregister
GeomToStep_Root_swigregister(GeomToStep_Root)

class GeomToStep_MakeAxis1Placement(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeAxis1Placement, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeAxis1Placement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        A: gp_Ax1

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: gp_Ax2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: Geom_Axis1Placement

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: Geom2d_AxisPlacement

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeAxis1Placement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Axis1Placement > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis1Placement>

        """
        return _GeomToStep.GeomToStep_MakeAxis1Placement_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis1Placement
    __del__ = lambda self: None
GeomToStep_MakeAxis1Placement_swigregister = _GeomToStep.GeomToStep_MakeAxis1Placement_swigregister
GeomToStep_MakeAxis1Placement_swigregister(GeomToStep_MakeAxis1Placement)

class GeomToStep_MakeAxis2Placement2d(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeAxis2Placement2d, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeAxis2Placement2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        A: gp_Ax2

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: gp_Ax22d

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeAxis2Placement2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement2d > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis2Placement2d>

        """
        return _GeomToStep.GeomToStep_MakeAxis2Placement2d_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis2Placement2d
    __del__ = lambda self: None
GeomToStep_MakeAxis2Placement2d_swigregister = _GeomToStep.GeomToStep_MakeAxis2Placement2d_swigregister
GeomToStep_MakeAxis2Placement2d_swigregister(GeomToStep_MakeAxis2Placement2d)

class GeomToStep_MakeAxis2Placement3d(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeAxis2Placement3d, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeAxis2Placement3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: gp_Ax2

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: gp_Ax3

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        T: gp_Trsf

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        A: Geom_Axis2Placement

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeAxis2Placement3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement3d > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis2Placement3d>

        """
        return _GeomToStep.GeomToStep_MakeAxis2Placement3d_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis2Placement3d
    __del__ = lambda self: None
GeomToStep_MakeAxis2Placement3d_swigregister = _GeomToStep.GeomToStep_MakeAxis2Placement3d_swigregister
GeomToStep_MakeAxis2Placement3d_swigregister(GeomToStep_MakeAxis2Placement3d)

class GeomToStep_MakeBSplineCurveWithKnots(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeBSplineCurveWithKnots, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeBSplineCurveWithKnots, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        Bsplin: Geom_BSplineCurve

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Bsplin: Geom2d_BSplineCurve

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeBSplineCurveWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_BSplineCurveWithKnots > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_BSplineCurveWithKnots>

        """
        return _GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineCurveWithKnots
    __del__ = lambda self: None
GeomToStep_MakeBSplineCurveWithKnots_swigregister = _GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_swigregister
GeomToStep_MakeBSplineCurveWithKnots_swigregister(GeomToStep_MakeBSplineCurveWithKnots)

class GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        Bsplin: Geom_BSplineCurve

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Bsplin: Geom2d_BSplineCurve

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve>

        """
        return _GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve
    __del__ = lambda self: None
GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister = _GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister
GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve)

class GeomToStep_MakeBSplineSurfaceWithKnots(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeBSplineSurfaceWithKnots, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeBSplineSurfaceWithKnots, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        Bsplin: Geom_BSplineSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeBSplineSurfaceWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_BSplineSurfaceWithKnots > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_BSplineSurfaceWithKnots>

        """
        return _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineSurfaceWithKnots
    __del__ = lambda self: None
GeomToStep_MakeBSplineSurfaceWithKnots_swigregister = _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_swigregister
GeomToStep_MakeBSplineSurfaceWithKnots_swigregister(GeomToStep_MakeBSplineSurfaceWithKnots)

class GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        Bsplin: Geom_BSplineSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface>

        """
        return _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface
    __del__ = lambda self: None
GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister = _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister
GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface)

class GeomToStep_MakeBoundedCurve(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeBoundedCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeBoundedCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: Geom_BoundedCurve

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom2d_BoundedCurve

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_BoundedCurve > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_BoundedCurve>

        """
        return _GeomToStep.GeomToStep_MakeBoundedCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBoundedCurve
    __del__ = lambda self: None
GeomToStep_MakeBoundedCurve_swigregister = _GeomToStep.GeomToStep_MakeBoundedCurve_swigregister
GeomToStep_MakeBoundedCurve_swigregister(GeomToStep_MakeBoundedCurve)

class GeomToStep_MakeBoundedSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeBoundedSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeBoundedSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: Geom_BoundedSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeBoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_BoundedSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_BoundedSurface>

        """
        return _GeomToStep.GeomToStep_MakeBoundedSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBoundedSurface
    __del__ = lambda self: None
GeomToStep_MakeBoundedSurface_swigregister = _GeomToStep.GeomToStep_MakeBoundedSurface_swigregister
GeomToStep_MakeBoundedSurface_swigregister(GeomToStep_MakeBoundedSurface)

class GeomToStep_MakeCartesianPoint(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeCartesianPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeCartesianPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: Geom_CartesianPoint

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: Geom2d_CartesianPoint

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeCartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_CartesianPoint > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_CartesianPoint>

        """
        return _GeomToStep.GeomToStep_MakeCartesianPoint_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCartesianPoint
    __del__ = lambda self: None
GeomToStep_MakeCartesianPoint_swigregister = _GeomToStep.GeomToStep_MakeCartesianPoint_swigregister
GeomToStep_MakeCartesianPoint_swigregister(GeomToStep_MakeCartesianPoint)

class GeomToStep_MakeCircle(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeCircle, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeCircle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: gp_Circ

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom_Circle

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Circle

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeCircle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Circle > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Circle>

        """
        return _GeomToStep.GeomToStep_MakeCircle_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCircle
    __del__ = lambda self: None
GeomToStep_MakeCircle_swigregister = _GeomToStep.GeomToStep_MakeCircle_swigregister
GeomToStep_MakeCircle_swigregister(GeomToStep_MakeCircle)

class GeomToStep_MakeConic(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeConic, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeConic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: Geom_Conic

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Conic

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeConic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Conic > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Conic>

        """
        return _GeomToStep.GeomToStep_MakeConic_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeConic
    __del__ = lambda self: None
GeomToStep_MakeConic_swigregister = _GeomToStep.GeomToStep_MakeConic_swigregister
GeomToStep_MakeConic_swigregister(GeomToStep_MakeConic)

class GeomToStep_MakeConicalSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeConicalSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeConicalSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        CSurf: Geom_ConicalSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeConicalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_ConicalSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_ConicalSurface>

        """
        return _GeomToStep.GeomToStep_MakeConicalSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeConicalSurface
    __del__ = lambda self: None
GeomToStep_MakeConicalSurface_swigregister = _GeomToStep.GeomToStep_MakeConicalSurface_swigregister
GeomToStep_MakeConicalSurface_swigregister(GeomToStep_MakeConicalSurface)

class GeomToStep_MakeCurve(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Curve > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Curve>

        """
        return _GeomToStep.GeomToStep_MakeCurve_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCurve
    __del__ = lambda self: None
GeomToStep_MakeCurve_swigregister = _GeomToStep.GeomToStep_MakeCurve_swigregister
GeomToStep_MakeCurve_swigregister(GeomToStep_MakeCurve)

class GeomToStep_MakeCylindricalSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeCylindricalSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeCylindricalSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        CSurf: Geom_CylindricalSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeCylindricalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_CylindricalSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_CylindricalSurface>

        """
        return _GeomToStep.GeomToStep_MakeCylindricalSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCylindricalSurface
    __del__ = lambda self: None
GeomToStep_MakeCylindricalSurface_swigregister = _GeomToStep.GeomToStep_MakeCylindricalSurface_swigregister
GeomToStep_MakeCylindricalSurface_swigregister(GeomToStep_MakeCylindricalSurface)

class GeomToStep_MakeDirection(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        D: gp_Dir

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        D: gp_Dir2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        D: Geom_Direction

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        D: Geom2d_Direction

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Direction > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Direction>

        """
        return _GeomToStep.GeomToStep_MakeDirection_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeDirection
    __del__ = lambda self: None
GeomToStep_MakeDirection_swigregister = _GeomToStep.GeomToStep_MakeDirection_swigregister
GeomToStep_MakeDirection_swigregister(GeomToStep_MakeDirection)

class GeomToStep_MakeElementarySurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeElementarySurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeElementarySurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S: Geom_ElementarySurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeElementarySurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_ElementarySurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_ElementarySurface>

        """
        return _GeomToStep.GeomToStep_MakeElementarySurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeElementarySurface
    __del__ = lambda self: None
GeomToStep_MakeElementarySurface_swigregister = _GeomToStep.GeomToStep_MakeElementarySurface_swigregister
GeomToStep_MakeElementarySurface_swigregister(GeomToStep_MakeElementarySurface)

class GeomToStep_MakeEllipse(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeEllipse, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeEllipse, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: gp_Elips

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom_Ellipse

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Ellipse

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeEllipse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Ellipse > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Ellipse>

        """
        return _GeomToStep.GeomToStep_MakeEllipse_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeEllipse
    __del__ = lambda self: None
GeomToStep_MakeEllipse_swigregister = _GeomToStep.GeomToStep_MakeEllipse_swigregister
GeomToStep_MakeEllipse_swigregister(GeomToStep_MakeEllipse)

class GeomToStep_MakeHyperbola(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeHyperbola, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeHyperbola, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: Geom2d_Hyperbola

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom_Hyperbola

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeHyperbola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Hyperbola > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Hyperbola>

        """
        return _GeomToStep.GeomToStep_MakeHyperbola_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeHyperbola
    __del__ = lambda self: None
GeomToStep_MakeHyperbola_swigregister = _GeomToStep.GeomToStep_MakeHyperbola_swigregister
GeomToStep_MakeHyperbola_swigregister(GeomToStep_MakeHyperbola)

class GeomToStep_MakeLine(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeLine, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeLine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        L: gp_Lin

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        L: gp_Lin2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom_Line

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom2d_Line

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Line > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Line>

        """
        return _GeomToStep.GeomToStep_MakeLine_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeLine
    __del__ = lambda self: None
GeomToStep_MakeLine_swigregister = _GeomToStep.GeomToStep_MakeLine_swigregister
GeomToStep_MakeLine_swigregister(GeomToStep_MakeLine)

class GeomToStep_MakeParabola(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeParabola, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeParabola, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: Geom2d_Parabola

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        C: Geom_Parabola

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeParabola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Parabola > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Parabola>

        """
        return _GeomToStep.GeomToStep_MakeParabola_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeParabola
    __del__ = lambda self: None
GeomToStep_MakeParabola_swigregister = _GeomToStep.GeomToStep_MakeParabola_swigregister
GeomToStep_MakeParabola_swigregister(GeomToStep_MakeParabola)

class GeomToStep_MakePlane(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakePlane, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakePlane, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P: gp_Pln

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: Geom_Plane

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakePlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Plane > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Plane>

        """
        return _GeomToStep.GeomToStep_MakePlane_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakePlane
    __del__ = lambda self: None
GeomToStep_MakePlane_swigregister = _GeomToStep.GeomToStep_MakePlane_swigregister
GeomToStep_MakePlane_swigregister(GeomToStep_MakePlane)

class GeomToStep_MakePolyline(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakePolyline, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakePolyline, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        P: TColgp_Array1OfPnt

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: TColgp_Array1OfPnt2d

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakePolyline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Polyline > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Polyline>

        """
        return _GeomToStep.GeomToStep_MakePolyline_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakePolyline
    __del__ = lambda self: None
GeomToStep_MakePolyline_swigregister = _GeomToStep.GeomToStep_MakePolyline_swigregister
GeomToStep_MakePolyline_swigregister(GeomToStep_MakePolyline)

class GeomToStep_MakeRectangularTrimmedSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeRectangularTrimmedSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeRectangularTrimmedSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        RTSurf: Geom_RectangularTrimmedSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeRectangularTrimmedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_RectangularTrimmedSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_RectangularTrimmedSurface>

        """
        return _GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeRectangularTrimmedSurface
    __del__ = lambda self: None
GeomToStep_MakeRectangularTrimmedSurface_swigregister = _GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_swigregister
GeomToStep_MakeRectangularTrimmedSurface_swigregister(GeomToStep_MakeRectangularTrimmedSurface)

class GeomToStep_MakeSphericalSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeSphericalSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeSphericalSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        CSurf: Geom_SphericalSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeSphericalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_SphericalSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_SphericalSurface>

        """
        return _GeomToStep.GeomToStep_MakeSphericalSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSphericalSurface
    __del__ = lambda self: None
GeomToStep_MakeSphericalSurface_swigregister = _GeomToStep.GeomToStep_MakeSphericalSurface_swigregister
GeomToStep_MakeSphericalSurface_swigregister(GeomToStep_MakeSphericalSurface)

class GeomToStep_MakeSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        C: Geom_Surface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Surface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Surface>

        """
        return _GeomToStep.GeomToStep_MakeSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurface
    __del__ = lambda self: None
GeomToStep_MakeSurface_swigregister = _GeomToStep.GeomToStep_MakeSurface_swigregister
GeomToStep_MakeSurface_swigregister(GeomToStep_MakeSurface)

class GeomToStep_MakeSurfaceOfLinearExtrusion(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeSurfaceOfLinearExtrusion, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeSurfaceOfLinearExtrusion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        CSurf: Geom_SurfaceOfLinearExtrusion

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeSurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_SurfaceOfLinearExtrusion > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_SurfaceOfLinearExtrusion>

        """
        return _GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurfaceOfLinearExtrusion
    __del__ = lambda self: None
GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister = _GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister
GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister(GeomToStep_MakeSurfaceOfLinearExtrusion)

class GeomToStep_MakeSurfaceOfRevolution(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeSurfaceOfRevolution, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeSurfaceOfRevolution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        RevSurf: Geom_SurfaceOfRevolution

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeSurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_SurfaceOfRevolution > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_SurfaceOfRevolution>

        """
        return _GeomToStep.GeomToStep_MakeSurfaceOfRevolution_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurfaceOfRevolution
    __del__ = lambda self: None
GeomToStep_MakeSurfaceOfRevolution_swigregister = _GeomToStep.GeomToStep_MakeSurfaceOfRevolution_swigregister
GeomToStep_MakeSurfaceOfRevolution_swigregister(GeomToStep_MakeSurfaceOfRevolution)

class GeomToStep_MakeSweptSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeSweptSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeSweptSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S: Geom_SweptSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeSweptSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_SweptSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_SweptSurface>

        """
        return _GeomToStep.GeomToStep_MakeSweptSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSweptSurface
    __del__ = lambda self: None
GeomToStep_MakeSweptSurface_swigregister = _GeomToStep.GeomToStep_MakeSweptSurface_swigregister
GeomToStep_MakeSweptSurface_swigregister(GeomToStep_MakeSweptSurface)

class GeomToStep_MakeToroidalSurface(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeToroidalSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeToroidalSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        TorSurf: Geom_ToroidalSurface

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_ToroidalSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_ToroidalSurface>

        """
        return _GeomToStep.GeomToStep_MakeToroidalSurface_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeToroidalSurface
    __del__ = lambda self: None
GeomToStep_MakeToroidalSurface_swigregister = _GeomToStep.GeomToStep_MakeToroidalSurface_swigregister
GeomToStep_MakeToroidalSurface_swigregister(GeomToStep_MakeToroidalSurface)

class GeomToStep_MakeVector(GeomToStep_Root):
    __swig_setmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomToStep_MakeVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GeomToStep_Root]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomToStep_MakeVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        V: gp_Vec

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        V: gp_Vec2d

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        V: Geom_Vector

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        V: Geom2d_Vector

        Returns
        -------
        None

        """
        this = _GeomToStep.new_GeomToStep_MakeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args) -> "opencascade::handle< StepGeom_Vector > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Vector>

        """
        return _GeomToStep.GeomToStep_MakeVector_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeVector
    __del__ = lambda self: None
GeomToStep_MakeVector_swigregister = _GeomToStep.GeomToStep_MakeVector_swigregister
GeomToStep_MakeVector_swigregister(GeomToStep_MakeVector)



# This file is compatible with both classic and new-style classes.


