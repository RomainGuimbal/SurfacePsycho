# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
AppStdL module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_appstdl.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AppStdL
else:
    import _AppStdL

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppStdL.delete_SwigPyIterator

    def value(self):
        return _AppStdL.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AppStdL.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AppStdL.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AppStdL.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AppStdL.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AppStdL.SwigPyIterator_copy(self)

    def next(self):
        return _AppStdL.SwigPyIterator_next(self)

    def __next__(self):
        return _AppStdL.SwigPyIterator___next__(self)

    def previous(self):
        return _AppStdL.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AppStdL.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AppStdL.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AppStdL.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AppStdL.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AppStdL.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AppStdL.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AppStdL.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AppStdL:
_AppStdL.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _AppStdL.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDocStd
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_AppStdL_Application_Create():
    return _AppStdL.Handle_AppStdL_Application_Create()

def Handle_AppStdL_Application_DownCast(t):
    return _AppStdL.Handle_AppStdL_Application_DownCast(t)

def Handle_AppStdL_Application_IsNull(t):
    return _AppStdL.Handle_AppStdL_Application_IsNull(t)
class AppStdL_Application(OCC.Core.TDocStd.TDocStd_Application):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _AppStdL.AppStdL_Application_DumpJsonToString(self, depth)


    @staticmethod
    def DownCast(t):
      return Handle_AppStdL_Application_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        r"""Json string serializer."""
        _AppStdL.AppStdL_Application_swiginit(self, _AppStdL.new_AppStdL_Application())
    __swig_destroy__ = _AppStdL.delete_AppStdL_Application

# Register AppStdL_Application in _AppStdL:
_AppStdL.AppStdL_Application_swigregister(AppStdL_Application)



