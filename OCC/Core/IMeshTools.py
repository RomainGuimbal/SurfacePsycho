# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IMeshTools module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_imeshtools.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IMeshTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IMeshTools')
    _IMeshTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IMeshTools', [dirname(__file__)])
        except ImportError:
            import _IMeshTools
            return _IMeshTools
        try:
            _mod = imp.load_module('_IMeshTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IMeshTools = swig_import_helper()
    del swig_import_helper
else:
    import _IMeshTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IMeshTools.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _IMeshTools.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IMeshTools.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IMeshTools.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _IMeshTools.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _IMeshTools.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _IMeshTools.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _IMeshTools.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _IMeshTools.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _IMeshTools.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IMeshTools.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _IMeshTools.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _IMeshTools.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IMeshTools.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IMeshTools.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IMeshTools.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _IMeshTools.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IMeshTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IMeshTools.process_exception(error, method_name, class_name)
process_exception = _IMeshTools.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.IMeshData
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor

from enum import IntEnum
from OCC.Core.Exception import *

IMeshTools_MeshAlgoType_DEFAULT = _IMeshTools.IMeshTools_MeshAlgoType_DEFAULT
IMeshTools_MeshAlgoType_Watson = _IMeshTools.IMeshTools_MeshAlgoType_Watson
IMeshTools_MeshAlgoType_Delabella = _IMeshTools.IMeshTools_MeshAlgoType_Delabella


class IMeshTools_MeshAlgoType(IntEnum):
	IMeshTools_MeshAlgoType_DEFAULT = - 1
	IMeshTools_MeshAlgoType_Watson = 0
	IMeshTools_MeshAlgoType_Delabella = 1
IMeshTools_MeshAlgoType_DEFAULT = IMeshTools_MeshAlgoType.IMeshTools_MeshAlgoType_DEFAULT
IMeshTools_MeshAlgoType_Watson = IMeshTools_MeshAlgoType.IMeshTools_MeshAlgoType_Watson
IMeshTools_MeshAlgoType_Delabella = IMeshTools_MeshAlgoType.IMeshTools_MeshAlgoType_Delabella


def Handle_IMeshTools_Context_Create() -> "opencascade::handle< IMeshTools_Context >":
    return _IMeshTools.Handle_IMeshTools_Context_Create()
Handle_IMeshTools_Context_Create = _IMeshTools.Handle_IMeshTools_Context_Create

def Handle_IMeshTools_Context_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshTools_Context >":
    return _IMeshTools.Handle_IMeshTools_Context_DownCast(t)
Handle_IMeshTools_Context_DownCast = _IMeshTools.Handle_IMeshTools_Context_DownCast

def Handle_IMeshTools_Context_IsNull(t: 'opencascade::handle< IMeshTools_Context > const &') -> "bool":
    return _IMeshTools.Handle_IMeshTools_Context_IsNull(t)
Handle_IMeshTools_Context_IsNull = _IMeshTools.Handle_IMeshTools_Context_IsNull

def Handle_IMeshTools_CurveTessellator_Create() -> "opencascade::handle< IMeshTools_CurveTessellator >":
    return _IMeshTools.Handle_IMeshTools_CurveTessellator_Create()
Handle_IMeshTools_CurveTessellator_Create = _IMeshTools.Handle_IMeshTools_CurveTessellator_Create

def Handle_IMeshTools_CurveTessellator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshTools_CurveTessellator >":
    return _IMeshTools.Handle_IMeshTools_CurveTessellator_DownCast(t)
Handle_IMeshTools_CurveTessellator_DownCast = _IMeshTools.Handle_IMeshTools_CurveTessellator_DownCast

def Handle_IMeshTools_CurveTessellator_IsNull(t: 'opencascade::handle< IMeshTools_CurveTessellator > const &') -> "bool":
    return _IMeshTools.Handle_IMeshTools_CurveTessellator_IsNull(t)
Handle_IMeshTools_CurveTessellator_IsNull = _IMeshTools.Handle_IMeshTools_CurveTessellator_IsNull

def Handle_IMeshTools_MeshAlgo_Create() -> "opencascade::handle< IMeshTools_MeshAlgo >":
    return _IMeshTools.Handle_IMeshTools_MeshAlgo_Create()
Handle_IMeshTools_MeshAlgo_Create = _IMeshTools.Handle_IMeshTools_MeshAlgo_Create

def Handle_IMeshTools_MeshAlgo_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshTools_MeshAlgo >":
    return _IMeshTools.Handle_IMeshTools_MeshAlgo_DownCast(t)
Handle_IMeshTools_MeshAlgo_DownCast = _IMeshTools.Handle_IMeshTools_MeshAlgo_DownCast

def Handle_IMeshTools_MeshAlgo_IsNull(t: 'opencascade::handle< IMeshTools_MeshAlgo > const &') -> "bool":
    return _IMeshTools.Handle_IMeshTools_MeshAlgo_IsNull(t)
Handle_IMeshTools_MeshAlgo_IsNull = _IMeshTools.Handle_IMeshTools_MeshAlgo_IsNull

def Handle_IMeshTools_MeshAlgoFactory_Create() -> "opencascade::handle< IMeshTools_MeshAlgoFactory >":
    return _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_Create()
Handle_IMeshTools_MeshAlgoFactory_Create = _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_Create

def Handle_IMeshTools_MeshAlgoFactory_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshTools_MeshAlgoFactory >":
    return _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_DownCast(t)
Handle_IMeshTools_MeshAlgoFactory_DownCast = _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_DownCast

def Handle_IMeshTools_MeshAlgoFactory_IsNull(t: 'opencascade::handle< IMeshTools_MeshAlgoFactory > const &') -> "bool":
    return _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_IsNull(t)
Handle_IMeshTools_MeshAlgoFactory_IsNull = _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_IsNull

def Handle_IMeshTools_ModelAlgo_Create() -> "opencascade::handle< IMeshTools_ModelAlgo >":
    return _IMeshTools.Handle_IMeshTools_ModelAlgo_Create()
Handle_IMeshTools_ModelAlgo_Create = _IMeshTools.Handle_IMeshTools_ModelAlgo_Create

def Handle_IMeshTools_ModelAlgo_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshTools_ModelAlgo >":
    return _IMeshTools.Handle_IMeshTools_ModelAlgo_DownCast(t)
Handle_IMeshTools_ModelAlgo_DownCast = _IMeshTools.Handle_IMeshTools_ModelAlgo_DownCast

def Handle_IMeshTools_ModelAlgo_IsNull(t: 'opencascade::handle< IMeshTools_ModelAlgo > const &') -> "bool":
    return _IMeshTools.Handle_IMeshTools_ModelAlgo_IsNull(t)
Handle_IMeshTools_ModelAlgo_IsNull = _IMeshTools.Handle_IMeshTools_ModelAlgo_IsNull

def Handle_IMeshTools_ShapeExplorer_Create() -> "opencascade::handle< IMeshTools_ShapeExplorer >":
    return _IMeshTools.Handle_IMeshTools_ShapeExplorer_Create()
Handle_IMeshTools_ShapeExplorer_Create = _IMeshTools.Handle_IMeshTools_ShapeExplorer_Create

def Handle_IMeshTools_ShapeExplorer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshTools_ShapeExplorer >":
    return _IMeshTools.Handle_IMeshTools_ShapeExplorer_DownCast(t)
Handle_IMeshTools_ShapeExplorer_DownCast = _IMeshTools.Handle_IMeshTools_ShapeExplorer_DownCast

def Handle_IMeshTools_ShapeExplorer_IsNull(t: 'opencascade::handle< IMeshTools_ShapeExplorer > const &') -> "bool":
    return _IMeshTools.Handle_IMeshTools_ShapeExplorer_IsNull(t)
Handle_IMeshTools_ShapeExplorer_IsNull = _IMeshTools.Handle_IMeshTools_ShapeExplorer_IsNull

def Handle_IMeshTools_ShapeVisitor_Create() -> "opencascade::handle< IMeshTools_ShapeVisitor >":
    return _IMeshTools.Handle_IMeshTools_ShapeVisitor_Create()
Handle_IMeshTools_ShapeVisitor_Create = _IMeshTools.Handle_IMeshTools_ShapeVisitor_Create

def Handle_IMeshTools_ShapeVisitor_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IMeshTools_ShapeVisitor >":
    return _IMeshTools.Handle_IMeshTools_ShapeVisitor_DownCast(t)
Handle_IMeshTools_ShapeVisitor_DownCast = _IMeshTools.Handle_IMeshTools_ShapeVisitor_DownCast

def Handle_IMeshTools_ShapeVisitor_IsNull(t: 'opencascade::handle< IMeshTools_ShapeVisitor > const &') -> "bool":
    return _IMeshTools.Handle_IMeshTools_ShapeVisitor_IsNull(t)
Handle_IMeshTools_ShapeVisitor_IsNull = _IMeshTools.Handle_IMeshTools_ShapeVisitor_IsNull
class IMeshTools_Context(OCC.Core.IMeshData.IMeshData_Shape):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_Context, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_Context, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Returns
        -------
        None

        """
        this = _IMeshTools.new_IMeshTools_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BuildModel(self, *args) -> "Standard_Boolean":
        """
        Builds model using assined model builder. returns true on success, false elsewhere.

        Returns
        -------
        bool

        """
        return _IMeshTools.IMeshTools_Context_BuildModel(self, *args)


    def ChangeParameters(self, *args) -> "IMeshTools_Parameters &":
        """
        Gets reference to parameters to be used for meshing.

        Returns
        -------
        IMeshTools_Parameters

        """
        return _IMeshTools.IMeshTools_Context_ChangeParameters(self, *args)


    def Clean(self, *args) -> "void":
        """
        Cleans temporary context data.

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_Context_Clean(self, *args)


    def DiscretizeEdges(self, *args) -> "Standard_Boolean":
        """
        Performs discretization of model edges using assigned edge discret algorithm. returns true on success, false elsewhere.

        Returns
        -------
        bool

        """
        return _IMeshTools.IMeshTools_Context_DiscretizeEdges(self, *args)


    def DiscretizeFaces(self, *args) -> "Standard_Boolean":
        """
        Performs meshing of faces of discrete model using assigned meshing algorithm. returns true on success, false elsewhere.

        Parameters
        ----------
        theRange: Message_ProgressRange

        Returns
        -------
        bool

        """
        return _IMeshTools.IMeshTools_Context_DiscretizeFaces(self, *args)


    def GetFaceDiscret(self, *args) -> "opencascade::handle< IMeshTools_ModelAlgo > const &":
        """
        Gets instance of meshing algorithm.

        Returns
        -------
        opencascade::handle<IMeshTools_ModelAlgo>

        """
        return _IMeshTools.IMeshTools_Context_GetFaceDiscret(self, *args)


    def GetModelHealer(self, *args) -> "opencascade::handle< IMeshTools_ModelAlgo > const &":
        """
        Gets instance of a tool to be used to heal discrete model.

        Returns
        -------
        opencascade::handle<IMeshTools_ModelAlgo>

        """
        return _IMeshTools.IMeshTools_Context_GetModelHealer(self, *args)


    def GetParameters(self, *args) -> "IMeshTools_Parameters const &":
        """
        Gets parameters to be used for meshing.

        Returns
        -------
        IMeshTools_Parameters

        """
        return _IMeshTools.IMeshTools_Context_GetParameters(self, *args)


    def GetPostProcessor(self, *args) -> "opencascade::handle< IMeshTools_ModelAlgo > const &":
        """
        Gets instance of post-processing algorithm.

        Returns
        -------
        opencascade::handle<IMeshTools_ModelAlgo>

        """
        return _IMeshTools.IMeshTools_Context_GetPostProcessor(self, *args)


    def GetPreProcessor(self, *args) -> "opencascade::handle< IMeshTools_ModelAlgo > const &":
        """
        Gets instance of pre-processing algorithm.

        Returns
        -------
        opencascade::handle<IMeshTools_ModelAlgo>

        """
        return _IMeshTools.IMeshTools_Context_GetPreProcessor(self, *args)


    def HealModel(self, *args) -> "Standard_Boolean":
        """
        Performs healing of discrete model built by discretizeedges() method using assigned healing algorithm. returns true on success, false elsewhere.

        Returns
        -------
        bool

        """
        return _IMeshTools.IMeshTools_Context_HealModel(self, *args)


    def PostProcessModel(self, *args) -> "Standard_Boolean":
        """
        Performs post-processing of discrete model using assigned algorithm. returns true on success, false elsewhere.

        Returns
        -------
        bool

        """
        return _IMeshTools.IMeshTools_Context_PostProcessModel(self, *args)


    def PreProcessModel(self, *args) -> "Standard_Boolean":
        """
        Performs pre-processing of discrete model using assigned algorithm. performs auxiliary actions such as cleaning shape from old triangulation. returns true on success, false elsewhere.

        Returns
        -------
        bool

        """
        return _IMeshTools.IMeshTools_Context_PreProcessModel(self, *args)


    def SetEdgeDiscret(self, *args) -> "void":
        """
        Sets instance of a tool to be used to discretize edges of a model.

        Parameters
        ----------
        theEdgeDiscret: Handle ( IMeshTools_ModelAlgo )

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_Context_SetEdgeDiscret(self, *args)


    def SetFaceDiscret(self, *args) -> "void":
        """
        Sets instance of meshing algorithm.

        Parameters
        ----------
        theFaceDiscret: IMeshTools_ModelAlgo

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_Context_SetFaceDiscret(self, *args)


    def SetModelBuilder(self, *args) -> "void":
        """
        Sets instance of a tool to be used to build discrete model.

        Parameters
        ----------
        theBuilder: Handle ( IMeshTools_ModelBuilder )

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_Context_SetModelBuilder(self, *args)


    def SetModelHealer(self, *args) -> "void":
        """
        Sets instance of a tool to be used to heal discrete model.

        Parameters
        ----------
        theModelHealer: IMeshTools_ModelAlgo

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_Context_SetModelHealer(self, *args)


    def SetPostProcessor(self, *args) -> "void":
        """
        Sets instance of post-processing algorithm.

        Parameters
        ----------
        thePostProcessor: IMeshTools_ModelAlgo

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_Context_SetPostProcessor(self, *args)


    def SetPreProcessor(self, *args) -> "void":
        """
        Sets instance of pre-processing algorithm.

        Parameters
        ----------
        thePreProcessor: IMeshTools_ModelAlgo

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_Context_SetPreProcessor(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_Context_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_Context
    __del__ = lambda self: None
IMeshTools_Context_swigregister = _IMeshTools.IMeshTools_Context_swigregister
IMeshTools_Context_swigregister(IMeshTools_Context)

class IMeshTools_CurveTessellator(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_CurveTessellator, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_CurveTessellator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PointsNb(self, *args) -> "Standard_Integer":
        """
        Returns number of tessellation points.

        Returns
        -------
        int

        """
        return _IMeshTools.IMeshTools_CurveTessellator_PointsNb(self, *args)


    def Value(self, *args) -> "Standard_Boolean":
        """
        Returns parameters of solution with the given index. @param theindex index of tessellation point. @param thepoint tessellation point. @param theparameter parameters on pcurve corresponded to the solution. returns true in case of valid result, false elewhere.

        Parameters
        ----------
        theIndex: int
        thePoint: gp_Pnt

        Returns
        -------
        theParameter: float

        """
        return _IMeshTools.IMeshTools_CurveTessellator_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_CurveTessellator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_CurveTessellator
    __del__ = lambda self: None
IMeshTools_CurveTessellator_swigregister = _IMeshTools.IMeshTools_CurveTessellator_swigregister
IMeshTools_CurveTessellator_swigregister(IMeshTools_CurveTessellator)

class IMeshTools_MeshAlgo(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_MeshAlgo, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_MeshAlgo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Perform(self, *args) -> "void":
        """
        Performs processing of the given face.

        Parameters
        ----------
        theDFace: IMeshData::IFaceHandle
        theParameters: IMeshTools_Parameters
        theRange: Message_ProgressRange

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_MeshAlgo_Perform(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_MeshAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_MeshAlgo
    __del__ = lambda self: None
IMeshTools_MeshAlgo_swigregister = _IMeshTools.IMeshTools_MeshAlgo_swigregister
IMeshTools_MeshAlgo_swigregister(IMeshTools_MeshAlgo)

class IMeshTools_MeshAlgoFactory(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_MeshAlgoFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_MeshAlgoFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetAlgo(self, *args) -> "opencascade::handle< IMeshTools_MeshAlgo >":
        """
        Creates instance of meshing algorithm for the given type of surface.

        Parameters
        ----------
        theSurfaceType: GeomAbs_SurfaceType
        theParameters: IMeshTools_Parameters

        Returns
        -------
        opencascade::handle<IMeshTools_MeshAlgo>

        """
        return _IMeshTools.IMeshTools_MeshAlgoFactory_GetAlgo(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_MeshAlgoFactory_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_MeshAlgoFactory
    __del__ = lambda self: None
IMeshTools_MeshAlgoFactory_swigregister = _IMeshTools.IMeshTools_MeshAlgoFactory_swigregister
IMeshTools_MeshAlgoFactory_swigregister(IMeshTools_MeshAlgoFactory)

class IMeshTools_MeshBuilder(OCC.Core.Message.Message_Algorithm):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Message.Message_Algorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_MeshBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Message.Message_Algorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_MeshBuilder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Returns
        -------
        None

        Constructor.

        Parameters
        ----------
        theContext: Handle ( IMeshTools_Context )

        Returns
        -------
        None

        """
        this = _IMeshTools.new_IMeshTools_MeshBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args) -> "void":
        """
        Performs meshing ot the shape using current context.

        Parameters
        ----------
        theRange: Message_ProgressRange

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_MeshBuilder_Perform(self, *args)


    def SetContext(self, *args) -> "void":
        """
        Sets context for algorithm.

        Parameters
        ----------
        theContext: Handle ( IMeshTools_Context )

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_MeshBuilder_SetContext(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_MeshBuilder
    __del__ = lambda self: None
IMeshTools_MeshBuilder_swigregister = _IMeshTools.IMeshTools_MeshBuilder_swigregister
IMeshTools_MeshBuilder_swigregister(IMeshTools_MeshBuilder)

class IMeshTools_ModelAlgo(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_ModelAlgo, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_ModelAlgo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Perform(self, *args) -> "Standard_Boolean":
        """
        Exceptions protected processing of the given model.

        Parameters
        ----------
        theModel: Handle ( IMeshData_Model )
        theParameters: IMeshTools_Parameters
        theRange: Message_ProgressRange

        Returns
        -------
        bool

        """
        return _IMeshTools.IMeshTools_ModelAlgo_Perform(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_ModelAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_ModelAlgo
    __del__ = lambda self: None
IMeshTools_ModelAlgo_swigregister = _IMeshTools.IMeshTools_ModelAlgo_swigregister
IMeshTools_ModelAlgo_swigregister(IMeshTools_ModelAlgo)

class IMeshTools_ModelBuilder(OCC.Core.Message.Message_Algorithm):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Message.Message_Algorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_ModelBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Message.Message_Algorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_ModelBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_ModelBuilder
    __del__ = lambda self: None
IMeshTools_ModelBuilder_swigregister = _IMeshTools.IMeshTools_ModelBuilder_swigregister
IMeshTools_ModelBuilder_swigregister(IMeshTools_ModelBuilder)

class IMeshTools_Parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_Parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_Parameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MeshAlgo"] = _IMeshTools.IMeshTools_Parameters_MeshAlgo_set
    __swig_getmethods__["MeshAlgo"] = _IMeshTools.IMeshTools_Parameters_MeshAlgo_get
    if _newclass:
        MeshAlgo = _swig_property(_IMeshTools.IMeshTools_Parameters_MeshAlgo_get, _IMeshTools.IMeshTools_Parameters_MeshAlgo_set)
    __swig_setmethods__["Angle"] = _IMeshTools.IMeshTools_Parameters_Angle_set
    __swig_getmethods__["Angle"] = _IMeshTools.IMeshTools_Parameters_Angle_get
    if _newclass:
        Angle = _swig_property(_IMeshTools.IMeshTools_Parameters_Angle_get, _IMeshTools.IMeshTools_Parameters_Angle_set)
    __swig_setmethods__["Deflection"] = _IMeshTools.IMeshTools_Parameters_Deflection_set
    __swig_getmethods__["Deflection"] = _IMeshTools.IMeshTools_Parameters_Deflection_get
    if _newclass:
        Deflection = _swig_property(_IMeshTools.IMeshTools_Parameters_Deflection_get, _IMeshTools.IMeshTools_Parameters_Deflection_set)
    __swig_setmethods__["AngleInterior"] = _IMeshTools.IMeshTools_Parameters_AngleInterior_set
    __swig_getmethods__["AngleInterior"] = _IMeshTools.IMeshTools_Parameters_AngleInterior_get
    if _newclass:
        AngleInterior = _swig_property(_IMeshTools.IMeshTools_Parameters_AngleInterior_get, _IMeshTools.IMeshTools_Parameters_AngleInterior_set)
    __swig_setmethods__["DeflectionInterior"] = _IMeshTools.IMeshTools_Parameters_DeflectionInterior_set
    __swig_getmethods__["DeflectionInterior"] = _IMeshTools.IMeshTools_Parameters_DeflectionInterior_get
    if _newclass:
        DeflectionInterior = _swig_property(_IMeshTools.IMeshTools_Parameters_DeflectionInterior_get, _IMeshTools.IMeshTools_Parameters_DeflectionInterior_set)
    __swig_setmethods__["MinSize"] = _IMeshTools.IMeshTools_Parameters_MinSize_set
    __swig_getmethods__["MinSize"] = _IMeshTools.IMeshTools_Parameters_MinSize_get
    if _newclass:
        MinSize = _swig_property(_IMeshTools.IMeshTools_Parameters_MinSize_get, _IMeshTools.IMeshTools_Parameters_MinSize_set)
    __swig_setmethods__["InParallel"] = _IMeshTools.IMeshTools_Parameters_InParallel_set
    __swig_getmethods__["InParallel"] = _IMeshTools.IMeshTools_Parameters_InParallel_get
    if _newclass:
        InParallel = _swig_property(_IMeshTools.IMeshTools_Parameters_InParallel_get, _IMeshTools.IMeshTools_Parameters_InParallel_set)
    __swig_setmethods__["Relative"] = _IMeshTools.IMeshTools_Parameters_Relative_set
    __swig_getmethods__["Relative"] = _IMeshTools.IMeshTools_Parameters_Relative_get
    if _newclass:
        Relative = _swig_property(_IMeshTools.IMeshTools_Parameters_Relative_get, _IMeshTools.IMeshTools_Parameters_Relative_set)
    __swig_setmethods__["InternalVerticesMode"] = _IMeshTools.IMeshTools_Parameters_InternalVerticesMode_set
    __swig_getmethods__["InternalVerticesMode"] = _IMeshTools.IMeshTools_Parameters_InternalVerticesMode_get
    if _newclass:
        InternalVerticesMode = _swig_property(_IMeshTools.IMeshTools_Parameters_InternalVerticesMode_get, _IMeshTools.IMeshTools_Parameters_InternalVerticesMode_set)
    __swig_setmethods__["ControlSurfaceDeflection"] = _IMeshTools.IMeshTools_Parameters_ControlSurfaceDeflection_set
    __swig_getmethods__["ControlSurfaceDeflection"] = _IMeshTools.IMeshTools_Parameters_ControlSurfaceDeflection_get
    if _newclass:
        ControlSurfaceDeflection = _swig_property(_IMeshTools.IMeshTools_Parameters_ControlSurfaceDeflection_get, _IMeshTools.IMeshTools_Parameters_ControlSurfaceDeflection_set)
    __swig_setmethods__["CleanModel"] = _IMeshTools.IMeshTools_Parameters_CleanModel_set
    __swig_getmethods__["CleanModel"] = _IMeshTools.IMeshTools_Parameters_CleanModel_get
    if _newclass:
        CleanModel = _swig_property(_IMeshTools.IMeshTools_Parameters_CleanModel_get, _IMeshTools.IMeshTools_Parameters_CleanModel_set)
    __swig_setmethods__["AdjustMinSize"] = _IMeshTools.IMeshTools_Parameters_AdjustMinSize_set
    __swig_getmethods__["AdjustMinSize"] = _IMeshTools.IMeshTools_Parameters_AdjustMinSize_get
    if _newclass:
        AdjustMinSize = _swig_property(_IMeshTools.IMeshTools_Parameters_AdjustMinSize_get, _IMeshTools.IMeshTools_Parameters_AdjustMinSize_set)
    __swig_setmethods__["ForceFaceDeflection"] = _IMeshTools.IMeshTools_Parameters_ForceFaceDeflection_set
    __swig_getmethods__["ForceFaceDeflection"] = _IMeshTools.IMeshTools_Parameters_ForceFaceDeflection_get
    if _newclass:
        ForceFaceDeflection = _swig_property(_IMeshTools.IMeshTools_Parameters_ForceFaceDeflection_get, _IMeshTools.IMeshTools_Parameters_ForceFaceDeflection_set)
    __swig_setmethods__["AllowQualityDecrease"] = _IMeshTools.IMeshTools_Parameters_AllowQualityDecrease_set
    __swig_getmethods__["AllowQualityDecrease"] = _IMeshTools.IMeshTools_Parameters_AllowQualityDecrease_get
    if _newclass:
        AllowQualityDecrease = _swig_property(_IMeshTools.IMeshTools_Parameters_AllowQualityDecrease_get, _IMeshTools.IMeshTools_Parameters_AllowQualityDecrease_set)

    def __init__(self, *args):
        """
        Default constructor.

        Returns
        -------
        None

        """
        this = _IMeshTools.new_IMeshTools_Parameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def RelMinSize(*args) -> "Standard_Real":
        """
        Returns factor used to compute default value of minsize (minimum mesh edge length) from deflection.

        Returns
        -------
        float

        """
        return _IMeshTools.IMeshTools_Parameters_RelMinSize(*args)

    RelMinSize = staticmethod(RelMinSize)

    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_Parameters
    __del__ = lambda self: None
IMeshTools_Parameters_swigregister = _IMeshTools.IMeshTools_Parameters_swigregister
IMeshTools_Parameters_swigregister(IMeshTools_Parameters)

def IMeshTools_Parameters_RelMinSize(*args) -> "Standard_Real":
    """
    Returns factor used to compute default value of minsize (minimum mesh edge length) from deflection.

    Returns
    -------
    float

    """
    return _IMeshTools.IMeshTools_Parameters_RelMinSize(*args)

class IMeshTools_ShapeExplorer(OCC.Core.IMeshData.IMeshData_Shape):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Shape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_ShapeExplorer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IMeshData.IMeshData_Shape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_ShapeExplorer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Constructor.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        this = _IMeshTools.new_IMeshTools_ShapeExplorer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Accept(self, *args) -> "void":
        """
        Starts exploring of a shape.

        Parameters
        ----------
        theVisitor: Handle ( IMeshTools_ShapeVisitor )

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_ShapeExplorer_Accept(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_ShapeExplorer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_ShapeExplorer
    __del__ = lambda self: None
IMeshTools_ShapeExplorer_swigregister = _IMeshTools.IMeshTools_ShapeExplorer_swigregister
IMeshTools_ShapeExplorer_swigregister(IMeshTools_ShapeExplorer)

class IMeshTools_ShapeVisitor(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMeshTools_ShapeVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMeshTools_ShapeVisitor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Visit(self, *args) -> "void":
        """
        Handles topods_face object.

        Parameters
        ----------
        theFace: TopoDS_Face

        Returns
        -------
        None

        Handles topods_edge object.

        Parameters
        ----------
        theEdge: TopoDS_Edge

        Returns
        -------
        None

        """
        return _IMeshTools.IMeshTools_ShapeVisitor_Visit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_ShapeVisitor_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_ShapeVisitor
    __del__ = lambda self: None
IMeshTools_ShapeVisitor_swigregister = _IMeshTools.IMeshTools_ShapeVisitor_swigregister
IMeshTools_ShapeVisitor_swigregister(IMeshTools_ShapeVisitor)



# This file is compatible with both classic and new-style classes.


