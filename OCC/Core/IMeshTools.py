# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
IMeshTools module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_imeshtools.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IMeshTools
else:
    import _IMeshTools

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IMeshTools.delete_SwigPyIterator

    def value(self):
        return _IMeshTools.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IMeshTools.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IMeshTools.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IMeshTools.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IMeshTools.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IMeshTools.SwigPyIterator_copy(self)

    def next(self):
        return _IMeshTools.SwigPyIterator_next(self)

    def __next__(self):
        return _IMeshTools.SwigPyIterator___next__(self)

    def previous(self):
        return _IMeshTools.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IMeshTools.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IMeshTools.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IMeshTools.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IMeshTools.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IMeshTools.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IMeshTools.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IMeshTools.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IMeshTools:
_IMeshTools.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _IMeshTools.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.IMeshData
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor

from enum import IntEnum
from OCC.Core.Exception import *

IMeshTools_MeshAlgoType_DEFAULT = _IMeshTools.IMeshTools_MeshAlgoType_DEFAULT
IMeshTools_MeshAlgoType_Watson = _IMeshTools.IMeshTools_MeshAlgoType_Watson
IMeshTools_MeshAlgoType_Delabella = _IMeshTools.IMeshTools_MeshAlgoType_Delabella


class IMeshTools_MeshAlgoType(IntEnum):
	IMeshTools_MeshAlgoType_DEFAULT = - 1
	IMeshTools_MeshAlgoType_Watson = 0
	IMeshTools_MeshAlgoType_Delabella = 1
IMeshTools_MeshAlgoType_DEFAULT = IMeshTools_MeshAlgoType.IMeshTools_MeshAlgoType_DEFAULT
IMeshTools_MeshAlgoType_Watson = IMeshTools_MeshAlgoType.IMeshTools_MeshAlgoType_Watson
IMeshTools_MeshAlgoType_Delabella = IMeshTools_MeshAlgoType.IMeshTools_MeshAlgoType_Delabella


def Handle_IMeshTools_Context_Create():
    return _IMeshTools.Handle_IMeshTools_Context_Create()

def Handle_IMeshTools_Context_DownCast(t):
    return _IMeshTools.Handle_IMeshTools_Context_DownCast(t)

def Handle_IMeshTools_Context_IsNull(t):
    return _IMeshTools.Handle_IMeshTools_Context_IsNull(t)

def Handle_IMeshTools_CurveTessellator_Create():
    return _IMeshTools.Handle_IMeshTools_CurveTessellator_Create()

def Handle_IMeshTools_CurveTessellator_DownCast(t):
    return _IMeshTools.Handle_IMeshTools_CurveTessellator_DownCast(t)

def Handle_IMeshTools_CurveTessellator_IsNull(t):
    return _IMeshTools.Handle_IMeshTools_CurveTessellator_IsNull(t)

def Handle_IMeshTools_MeshAlgo_Create():
    return _IMeshTools.Handle_IMeshTools_MeshAlgo_Create()

def Handle_IMeshTools_MeshAlgo_DownCast(t):
    return _IMeshTools.Handle_IMeshTools_MeshAlgo_DownCast(t)

def Handle_IMeshTools_MeshAlgo_IsNull(t):
    return _IMeshTools.Handle_IMeshTools_MeshAlgo_IsNull(t)

def Handle_IMeshTools_MeshAlgoFactory_Create():
    return _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_Create()

def Handle_IMeshTools_MeshAlgoFactory_DownCast(t):
    return _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_DownCast(t)

def Handle_IMeshTools_MeshAlgoFactory_IsNull(t):
    return _IMeshTools.Handle_IMeshTools_MeshAlgoFactory_IsNull(t)

def Handle_IMeshTools_ModelAlgo_Create():
    return _IMeshTools.Handle_IMeshTools_ModelAlgo_Create()

def Handle_IMeshTools_ModelAlgo_DownCast(t):
    return _IMeshTools.Handle_IMeshTools_ModelAlgo_DownCast(t)

def Handle_IMeshTools_ModelAlgo_IsNull(t):
    return _IMeshTools.Handle_IMeshTools_ModelAlgo_IsNull(t)

def Handle_IMeshTools_ShapeExplorer_Create():
    return _IMeshTools.Handle_IMeshTools_ShapeExplorer_Create()

def Handle_IMeshTools_ShapeExplorer_DownCast(t):
    return _IMeshTools.Handle_IMeshTools_ShapeExplorer_DownCast(t)

def Handle_IMeshTools_ShapeExplorer_IsNull(t):
    return _IMeshTools.Handle_IMeshTools_ShapeExplorer_IsNull(t)

def Handle_IMeshTools_ShapeVisitor_Create():
    return _IMeshTools.Handle_IMeshTools_ShapeVisitor_Create()

def Handle_IMeshTools_ShapeVisitor_DownCast(t):
    return _IMeshTools.Handle_IMeshTools_ShapeVisitor_DownCast(t)

def Handle_IMeshTools_ShapeVisitor_IsNull(t):
    return _IMeshTools.Handle_IMeshTools_ShapeVisitor_IsNull(t)
class IMeshTools_Context(OCC.Core.IMeshData.IMeshData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _IMeshTools.IMeshTools_Context_swiginit(self, _IMeshTools.new_IMeshTools_Context(*args))

    def BuildModel(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Builds model using assigned model builder. return true on success, false elsewhere.

        """
        return _IMeshTools.IMeshTools_Context_BuildModel(self, *args)

    def ChangeParameters(self, *args):
        r"""
        Return
        -------
        IMeshTools_Parameters

        Description
        -----------
        Gets reference to parameters to be used for meshing.

        """
        return _IMeshTools.IMeshTools_Context_ChangeParameters(self, *args)

    def Clean(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Cleans temporary context data.

        """
        return _IMeshTools.IMeshTools_Context_Clean(self, *args)

    def DiscretizeEdges(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Performs discretization of model edges using assigned edge discret algorithm. return true on success, false elsewhere.

        """
        return _IMeshTools.IMeshTools_Context_DiscretizeEdges(self, *args)

    def DiscretizeFaces(self, *args):
        r"""

        Parameters
        ----------
        theRange: Message_ProgressRange

        Return
        -------
        bool

        Description
        -----------
        Performs meshing of faces of discrete model using assigned meshing algorithm. return true on success, false elsewhere.

        """
        return _IMeshTools.IMeshTools_Context_DiscretizeFaces(self, *args)

    def GetFaceDiscret(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IMeshTools_ModelAlgo>

        Description
        -----------
        Gets instance of meshing algorithm.

        """
        return _IMeshTools.IMeshTools_Context_GetFaceDiscret(self, *args)

    def GetModelHealer(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IMeshTools_ModelAlgo>

        Description
        -----------
        Gets instance of a tool to be used to heal discrete model.

        """
        return _IMeshTools.IMeshTools_Context_GetModelHealer(self, *args)

    def GetParameters(self, *args):
        r"""
        Return
        -------
        IMeshTools_Parameters

        Description
        -----------
        Gets parameters to be used for meshing.

        """
        return _IMeshTools.IMeshTools_Context_GetParameters(self, *args)

    def GetPostProcessor(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IMeshTools_ModelAlgo>

        Description
        -----------
        Gets instance of post-processing algorithm.

        """
        return _IMeshTools.IMeshTools_Context_GetPostProcessor(self, *args)

    def GetPreProcessor(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IMeshTools_ModelAlgo>

        Description
        -----------
        Gets instance of pre-processing algorithm.

        """
        return _IMeshTools.IMeshTools_Context_GetPreProcessor(self, *args)

    def HealModel(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Performs healing of discrete model built by discretizeedges() method using assigned healing algorithm. return true on success, false elsewhere.

        """
        return _IMeshTools.IMeshTools_Context_HealModel(self, *args)

    def PostProcessModel(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Performs post-processing of discrete model using assigned algorithm. return true on success, false elsewhere.

        """
        return _IMeshTools.IMeshTools_Context_PostProcessModel(self, *args)

    def PreProcessModel(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Performs pre-processing of discrete model using assigned algorithm. performs auxiliary actions such as cleaning shape from old triangulation. return true on success, false elsewhere.

        """
        return _IMeshTools.IMeshTools_Context_PreProcessModel(self, *args)

    def SetEdgeDiscret(self, *args):
        r"""

        Parameters
        ----------
        theEdgeDiscret: Handle ( IMeshTools_ModelAlgo )

        Return
        -------
        None

        Description
        -----------
        Sets instance of a tool to be used to discretize edges of a model.

        """
        return _IMeshTools.IMeshTools_Context_SetEdgeDiscret(self, *args)

    def SetFaceDiscret(self, *args):
        r"""

        Parameters
        ----------
        theFaceDiscret: IMeshTools_ModelAlgo

        Return
        -------
        None

        Description
        -----------
        Sets instance of meshing algorithm.

        """
        return _IMeshTools.IMeshTools_Context_SetFaceDiscret(self, *args)

    def SetModelBuilder(self, *args):
        r"""

        Parameters
        ----------
        theBuilder: Handle ( IMeshTools_ModelBuilder )

        Return
        -------
        None

        Description
        -----------
        Sets instance of a tool to be used to build discrete model.

        """
        return _IMeshTools.IMeshTools_Context_SetModelBuilder(self, *args)

    def SetModelHealer(self, *args):
        r"""

        Parameters
        ----------
        theModelHealer: IMeshTools_ModelAlgo

        Return
        -------
        None

        Description
        -----------
        Sets instance of a tool to be used to heal discrete model.

        """
        return _IMeshTools.IMeshTools_Context_SetModelHealer(self, *args)

    def SetPostProcessor(self, *args):
        r"""

        Parameters
        ----------
        thePostProcessor: IMeshTools_ModelAlgo

        Return
        -------
        None

        Description
        -----------
        Sets instance of post-processing algorithm.

        """
        return _IMeshTools.IMeshTools_Context_SetPostProcessor(self, *args)

    def SetPreProcessor(self, *args):
        r"""

        Parameters
        ----------
        thePreProcessor: IMeshTools_ModelAlgo

        Return
        -------
        None

        Description
        -----------
        Sets instance of pre-processing algorithm.

        """
        return _IMeshTools.IMeshTools_Context_SetPreProcessor(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_Context_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_Context

# Register IMeshTools_Context in _IMeshTools:
_IMeshTools.IMeshTools_Context_swigregister(IMeshTools_Context)
class IMeshTools_CurveTessellator(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PointsNb(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns number of tessellation points.

        """
        return _IMeshTools.IMeshTools_CurveTessellator_PointsNb(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int
        thePoint: gp_Pnt

        Return
        -------
        theParameter: float

        Description
        -----------
        Returns parameters of solution with the given index. @param theindex index of tessellation point. @param thepoint tessellation point. @param theparameter parameters on pcurve corresponded to the solution. return true in case of valid result, false elewhere.

        """
        return _IMeshTools.IMeshTools_CurveTessellator_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_CurveTessellator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_CurveTessellator

# Register IMeshTools_CurveTessellator in _IMeshTools:
_IMeshTools.IMeshTools_CurveTessellator_swigregister(IMeshTools_CurveTessellator)
class IMeshTools_MeshAlgo(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        theDFace: IMeshData::IFaceHandle
        theParameters: IMeshTools_Parameters
        theRange: Message_ProgressRange

        Return
        -------
        None

        Description
        -----------
        Performs processing of the given face.

        """
        return _IMeshTools.IMeshTools_MeshAlgo_Perform(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_MeshAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_MeshAlgo

# Register IMeshTools_MeshAlgo in _IMeshTools:
_IMeshTools.IMeshTools_MeshAlgo_swigregister(IMeshTools_MeshAlgo)
class IMeshTools_MeshAlgoFactory(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetAlgo(self, *args):
        r"""

        Parameters
        ----------
        theSurfaceType: GeomAbs_SurfaceType
        theParameters: IMeshTools_Parameters

        Return
        -------
        opencascade::handle<IMeshTools_MeshAlgo>

        Description
        -----------
        Creates instance of meshing algorithm for the given type of surface.

        """
        return _IMeshTools.IMeshTools_MeshAlgoFactory_GetAlgo(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_MeshAlgoFactory_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_MeshAlgoFactory

# Register IMeshTools_MeshAlgoFactory in _IMeshTools:
_IMeshTools.IMeshTools_MeshAlgoFactory_swigregister(IMeshTools_MeshAlgoFactory)
class IMeshTools_MeshBuilder(OCC.Core.Message.Message_Algorithm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructor.

        Parameters
        ----------
        theContext: Handle ( IMeshTools_Context )

        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _IMeshTools.IMeshTools_MeshBuilder_swiginit(self, _IMeshTools.new_IMeshTools_MeshBuilder(*args))

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        theRange: Message_ProgressRange

        Return
        -------
        None

        Description
        -----------
        Performs meshing to the shape using current context.

        """
        return _IMeshTools.IMeshTools_MeshBuilder_Perform(self, *args)

    def SetContext(self, *args):
        r"""

        Parameters
        ----------
        theContext: Handle ( IMeshTools_Context )

        Return
        -------
        None

        Description
        -----------
        Sets context for algorithm.

        """
        return _IMeshTools.IMeshTools_MeshBuilder_SetContext(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_MeshBuilder

# Register IMeshTools_MeshBuilder in _IMeshTools:
_IMeshTools.IMeshTools_MeshBuilder_swigregister(IMeshTools_MeshBuilder)
class IMeshTools_ModelAlgo(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        theModel: Handle ( IMeshData_Model )
        theParameters: IMeshTools_Parameters
        theRange: Message_ProgressRange

        Return
        -------
        bool

        Description
        -----------
        Exceptions protected processing of the given model.

        """
        return _IMeshTools.IMeshTools_ModelAlgo_Perform(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_ModelAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_ModelAlgo

# Register IMeshTools_ModelAlgo in _IMeshTools:
_IMeshTools.IMeshTools_ModelAlgo_swigregister(IMeshTools_ModelAlgo)
class IMeshTools_ModelBuilder(OCC.Core.Message.Message_Algorithm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_ModelBuilder

# Register IMeshTools_ModelBuilder in _IMeshTools:
_IMeshTools.IMeshTools_ModelBuilder_swigregister(IMeshTools_ModelBuilder)
class IMeshTools_Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MeshAlgo = property(_IMeshTools.IMeshTools_Parameters_MeshAlgo_get, _IMeshTools.IMeshTools_Parameters_MeshAlgo_set)
    Angle = property(_IMeshTools.IMeshTools_Parameters_Angle_get, _IMeshTools.IMeshTools_Parameters_Angle_set)
    Deflection = property(_IMeshTools.IMeshTools_Parameters_Deflection_get, _IMeshTools.IMeshTools_Parameters_Deflection_set)
    AngleInterior = property(_IMeshTools.IMeshTools_Parameters_AngleInterior_get, _IMeshTools.IMeshTools_Parameters_AngleInterior_set)
    DeflectionInterior = property(_IMeshTools.IMeshTools_Parameters_DeflectionInterior_get, _IMeshTools.IMeshTools_Parameters_DeflectionInterior_set)
    MinSize = property(_IMeshTools.IMeshTools_Parameters_MinSize_get, _IMeshTools.IMeshTools_Parameters_MinSize_set)
    InParallel = property(_IMeshTools.IMeshTools_Parameters_InParallel_get, _IMeshTools.IMeshTools_Parameters_InParallel_set)
    Relative = property(_IMeshTools.IMeshTools_Parameters_Relative_get, _IMeshTools.IMeshTools_Parameters_Relative_set)
    InternalVerticesMode = property(_IMeshTools.IMeshTools_Parameters_InternalVerticesMode_get, _IMeshTools.IMeshTools_Parameters_InternalVerticesMode_set)
    ControlSurfaceDeflection = property(_IMeshTools.IMeshTools_Parameters_ControlSurfaceDeflection_get, _IMeshTools.IMeshTools_Parameters_ControlSurfaceDeflection_set)
    EnableControlSurfaceDeflectionAllSurfaces = property(_IMeshTools.IMeshTools_Parameters_EnableControlSurfaceDeflectionAllSurfaces_get, _IMeshTools.IMeshTools_Parameters_EnableControlSurfaceDeflectionAllSurfaces_set)
    CleanModel = property(_IMeshTools.IMeshTools_Parameters_CleanModel_get, _IMeshTools.IMeshTools_Parameters_CleanModel_set)
    AdjustMinSize = property(_IMeshTools.IMeshTools_Parameters_AdjustMinSize_get, _IMeshTools.IMeshTools_Parameters_AdjustMinSize_set)
    ForceFaceDeflection = property(_IMeshTools.IMeshTools_Parameters_ForceFaceDeflection_get, _IMeshTools.IMeshTools_Parameters_ForceFaceDeflection_set)
    AllowQualityDecrease = property(_IMeshTools.IMeshTools_Parameters_AllowQualityDecrease_get, _IMeshTools.IMeshTools_Parameters_AllowQualityDecrease_set)

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Default constructor.

        """
        _IMeshTools.IMeshTools_Parameters_swiginit(self, _IMeshTools.new_IMeshTools_Parameters(*args))

    @staticmethod
    def RelMinSize(*args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns factor used to compute default value of minsize (minimum mesh edge length) from deflection.

        """
        return _IMeshTools.IMeshTools_Parameters_RelMinSize(*args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_Parameters

# Register IMeshTools_Parameters in _IMeshTools:
_IMeshTools.IMeshTools_Parameters_swigregister(IMeshTools_Parameters)
class IMeshTools_ShapeExplorer(OCC.Core.IMeshData.IMeshData_Shape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theShape: TopoDS_Shape

        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _IMeshTools.IMeshTools_ShapeExplorer_swiginit(self, _IMeshTools.new_IMeshTools_ShapeExplorer(*args))

    def Accept(self, *args):
        r"""

        Parameters
        ----------
        theVisitor: Handle ( IMeshTools_ShapeVisitor )

        Return
        -------
        None

        Description
        -----------
        Starts exploring of a shape.

        """
        return _IMeshTools.IMeshTools_ShapeExplorer_Accept(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_ShapeExplorer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_ShapeExplorer

# Register IMeshTools_ShapeExplorer in _IMeshTools:
_IMeshTools.IMeshTools_ShapeExplorer_swigregister(IMeshTools_ShapeExplorer)
class IMeshTools_ShapeVisitor(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Visit(self, *args):
        r"""

        Parameters
        ----------
        theFace: TopoDS_Face

        Return
        -------
        None

        Description
        -----------
        Handles topods_face object.

        Parameters
        ----------
        theEdge: TopoDS_Edge

        Return
        -------
        None

        Description
        -----------
        Handles topods_edge object.

        """
        return _IMeshTools.IMeshTools_ShapeVisitor_Visit(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_IMeshTools_ShapeVisitor_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IMeshTools.delete_IMeshTools_ShapeVisitor

# Register IMeshTools_ShapeVisitor in _IMeshTools:
_IMeshTools.IMeshTools_ShapeVisitor_swigregister(IMeshTools_ShapeVisitor)



@deprecated
def IMeshTools_Parameters_RelMinSize(*args):
	return IMeshTools_Parameters.RelMinSize(*args)



