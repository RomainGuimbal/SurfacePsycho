# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlTObjDrivers module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmltobjdrivers.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlTObjDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlTObjDrivers')
    _XmlTObjDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlTObjDrivers', [dirname(__file__)])
        except ImportError:
            import _XmlTObjDrivers
            return _XmlTObjDrivers
        try:
            _mod = imp.load_module('_XmlTObjDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlTObjDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _XmlTObjDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlTObjDrivers.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XmlTObjDrivers.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlTObjDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlTObjDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XmlTObjDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XmlTObjDrivers.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XmlTObjDrivers.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XmlTObjDrivers.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XmlTObjDrivers.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XmlTObjDrivers.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlTObjDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlTObjDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlTObjDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlTObjDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlTObjDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlTObjDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XmlTObjDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlTObjDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlTObjDrivers.process_exception(error, method_name, class_name)
process_exception = _XmlTObjDrivers.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.XmlMDF
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.XmlLDrivers

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlTObjDrivers_DocumentRetrievalDriver_Create() -> "opencascade::handle< XmlTObjDrivers_DocumentRetrievalDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_Create()
Handle_XmlTObjDrivers_DocumentRetrievalDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_Create

def Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_DocumentRetrievalDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast(t)
Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast

def Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_DocumentRetrievalDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull(t)
Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentRetrievalDriver_IsNull

def Handle_XmlTObjDrivers_DocumentStorageDriver_Create() -> "opencascade::handle< XmlTObjDrivers_DocumentStorageDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_Create()
Handle_XmlTObjDrivers_DocumentStorageDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_Create

def Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_DocumentStorageDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast(t)
Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast

def Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_DocumentStorageDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull(t)
Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_DocumentStorageDriver_IsNull

def Handle_XmlTObjDrivers_IntSparseArrayDriver_Create() -> "opencascade::handle< XmlTObjDrivers_IntSparseArrayDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_Create()
Handle_XmlTObjDrivers_IntSparseArrayDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_Create

def Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_IntSparseArrayDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast(t)
Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast

def Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_IntSparseArrayDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull(t)
Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_IntSparseArrayDriver_IsNull

def Handle_XmlTObjDrivers_ModelDriver_Create() -> "opencascade::handle< XmlTObjDrivers_ModelDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_Create()
Handle_XmlTObjDrivers_ModelDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_Create

def Handle_XmlTObjDrivers_ModelDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_ModelDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DownCast(t)
Handle_XmlTObjDrivers_ModelDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_DownCast

def Handle_XmlTObjDrivers_ModelDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_ModelDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_IsNull(t)
Handle_XmlTObjDrivers_ModelDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_ModelDriver_IsNull

def Handle_XmlTObjDrivers_ObjectDriver_Create() -> "opencascade::handle< XmlTObjDrivers_ObjectDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_Create()
Handle_XmlTObjDrivers_ObjectDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_Create

def Handle_XmlTObjDrivers_ObjectDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_ObjectDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DownCast(t)
Handle_XmlTObjDrivers_ObjectDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_DownCast

def Handle_XmlTObjDrivers_ObjectDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_ObjectDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_IsNull(t)
Handle_XmlTObjDrivers_ObjectDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_ObjectDriver_IsNull

def Handle_XmlTObjDrivers_ReferenceDriver_Create() -> "opencascade::handle< XmlTObjDrivers_ReferenceDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_Create()
Handle_XmlTObjDrivers_ReferenceDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_Create

def Handle_XmlTObjDrivers_ReferenceDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_ReferenceDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DownCast(t)
Handle_XmlTObjDrivers_ReferenceDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_DownCast

def Handle_XmlTObjDrivers_ReferenceDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_ReferenceDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_IsNull(t)
Handle_XmlTObjDrivers_ReferenceDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_ReferenceDriver_IsNull

def Handle_XmlTObjDrivers_XYZDriver_Create() -> "opencascade::handle< XmlTObjDrivers_XYZDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_Create()
Handle_XmlTObjDrivers_XYZDriver_Create = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_Create

def Handle_XmlTObjDrivers_XYZDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlTObjDrivers_XYZDriver >":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DownCast(t)
Handle_XmlTObjDrivers_XYZDriver_DownCast = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_DownCast

def Handle_XmlTObjDrivers_XYZDriver_IsNull(t: 'opencascade::handle< XmlTObjDrivers_XYZDriver > const &') -> "bool":
    return _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_IsNull(t)
Handle_XmlTObjDrivers_XYZDriver_IsNull = _XmlTObjDrivers.Handle_XmlTObjDrivers_XYZDriver_IsNull
class xmltobjdrivers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xmltobjdrivers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xmltobjdrivers, name)
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDriverTable: XmlMDF_ADriverTable
        anMsgDrv: Message_Messenger

        Returns
        -------
        None

        """
        return _XmlTObjDrivers.xmltobjdrivers_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def DefineFormat(*args) -> "void":
        """
        Defines format 'tobjxml' and registers its read and write drivers in the specified application.

        Parameters
        ----------
        theApp: TDocStd_Application

        Returns
        -------
        None

        """
        return _XmlTObjDrivers.xmltobjdrivers_DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
        """
        Returns a driver corresponding to <aguid>. used for plugin.

        Parameters
        ----------
        aGUID: Standard_GUID

        Returns
        -------
        opencascade::handle<Standard_Transient>

        """
        return _XmlTObjDrivers.xmltobjdrivers_Factory(*args)

    Factory = staticmethod(Factory)

    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlTObjDrivers.new_xmltobjdrivers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlTObjDrivers.delete_xmltobjdrivers
    __del__ = lambda self: None
xmltobjdrivers_swigregister = _XmlTObjDrivers.xmltobjdrivers_swigregister
xmltobjdrivers_swigregister(xmltobjdrivers)

def xmltobjdrivers_AddDrivers(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    aDriverTable: XmlMDF_ADriverTable
    anMsgDrv: Message_Messenger

    Returns
    -------
    None

    """
    return _XmlTObjDrivers.xmltobjdrivers_AddDrivers(*args)

def xmltobjdrivers_DefineFormat(*args) -> "void":
    """
    Defines format 'tobjxml' and registers its read and write drivers in the specified application.

    Parameters
    ----------
    theApp: TDocStd_Application

    Returns
    -------
    None

    """
    return _XmlTObjDrivers.xmltobjdrivers_DefineFormat(*args)

def xmltobjdrivers_Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
    """
    Returns a driver corresponding to <aguid>. used for plugin.

    Parameters
    ----------
    aGUID: Standard_GUID

    Returns
    -------
    opencascade::handle<Standard_Transient>

    """
    return _XmlTObjDrivers.xmltobjdrivers_Factory(*args)

class XmlTObjDrivers_DocumentRetrievalDriver(OCC.Core.XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlTObjDrivers_DocumentRetrievalDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlTObjDrivers_DocumentRetrievalDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_DocumentRetrievalDriver
    __del__ = lambda self: None
XmlTObjDrivers_DocumentRetrievalDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_DocumentRetrievalDriver_swigregister
XmlTObjDrivers_DocumentRetrievalDriver_swigregister(XmlTObjDrivers_DocumentRetrievalDriver)

class XmlTObjDrivers_DocumentStorageDriver(OCC.Core.XmlLDrivers.XmlLDrivers_DocumentStorageDriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlLDrivers.XmlLDrivers_DocumentStorageDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlTObjDrivers_DocumentStorageDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlLDrivers.XmlLDrivers_DocumentStorageDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlTObjDrivers_DocumentStorageDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theCopyright: TCollection_ExtendedString

        Returns
        -------
        None

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_DocumentStorageDriver
    __del__ = lambda self: None
XmlTObjDrivers_DocumentStorageDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_DocumentStorageDriver_swigregister
XmlTObjDrivers_DocumentStorageDriver_swigregister(XmlTObjDrivers_DocumentStorageDriver)

class XmlTObjDrivers_IntSparseArrayDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlTObjDrivers_IntSparseArrayDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlTObjDrivers_IntSparseArrayDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_IntSparseArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theSource: XmlObjMgt_Persistent
        theTarget: TDF_Attribute
        theRelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        theSource: TDF_Attribute
        theTarget: XmlObjMgt_Persistent
        theRelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_IntSparseArrayDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_IntSparseArrayDriver
    __del__ = lambda self: None
XmlTObjDrivers_IntSparseArrayDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_IntSparseArrayDriver_swigregister
XmlTObjDrivers_IntSparseArrayDriver_swigregister(XmlTObjDrivers_IntSparseArrayDriver)

class XmlTObjDrivers_ModelDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlTObjDrivers_ModelDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlTObjDrivers_ModelDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_ModelDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_ModelDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ModelDriver
    __del__ = lambda self: None
XmlTObjDrivers_ModelDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ModelDriver_swigregister
XmlTObjDrivers_ModelDriver_swigregister(XmlTObjDrivers_ModelDriver)

class XmlTObjDrivers_ObjectDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlTObjDrivers_ObjectDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlTObjDrivers_ObjectDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_ObjectDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_ObjectDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ObjectDriver
    __del__ = lambda self: None
XmlTObjDrivers_ObjectDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ObjectDriver_swigregister
XmlTObjDrivers_ObjectDriver_swigregister(XmlTObjDrivers_ObjectDriver)

class XmlTObjDrivers_ReferenceDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlTObjDrivers_ReferenceDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlTObjDrivers_ReferenceDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_ReferenceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_ReferenceDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_ReferenceDriver
    __del__ = lambda self: None
XmlTObjDrivers_ReferenceDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_ReferenceDriver_swigregister
XmlTObjDrivers_ReferenceDriver_swigregister(XmlTObjDrivers_ReferenceDriver)

class XmlTObjDrivers_XYZDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlTObjDrivers_XYZDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlTObjDrivers_XYZDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlTObjDrivers.new_XmlTObjDrivers_XYZDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlTObjDrivers_XYZDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlTObjDrivers.delete_XmlTObjDrivers_XYZDriver
    __del__ = lambda self: None
XmlTObjDrivers_XYZDriver_swigregister = _XmlTObjDrivers.XmlTObjDrivers_XYZDriver_swigregister
XmlTObjDrivers_XYZDriver_swigregister(XmlTObjDrivers_XYZDriver)



# This file is compatible with both classic and new-style classes.


