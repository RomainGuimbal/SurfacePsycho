# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
BRepBndLib module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_brepbndlib.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepBndLib
else:
    import _BRepBndLib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepBndLib.delete_SwigPyIterator

    def value(self):
        return _BRepBndLib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepBndLib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepBndLib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepBndLib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepBndLib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepBndLib.SwigPyIterator_copy(self)

    def next(self):
        return _BRepBndLib.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepBndLib.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepBndLib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepBndLib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepBndLib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepBndLib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepBndLib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepBndLib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepBndLib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepBndLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepBndLib:
_BRepBndLib.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BRepBndLib.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.BVH

from enum import IntEnum
from OCC.Core.Exception import *



class brepbndlib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Add(*args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        B: Bnd_Box
        useTriangulation: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Adds the shape s to the bounding box b. more precisely are successively added to b: - each face of s; the triangulation of the face is used if it exists, - then each edge of s which does not belong to a face, the polygon of the edge is used if it exists - and last each vertex of s which does not belong to an edge. after each elementary operation, the bounding box b is enlarged by the tolerance value of the relative sub-shape. when working with the triangulation of a face this value of enlargement is the sum of the triangulation deflection and the face tolerance. when working with the polygon of an edge this value of enlargement is the sum of the polygon deflection and the edge tolerance. warning - this algorithm is time consuming if triangulation has not been inserted inside the data structure of the shape s. - the resulting bounding box may be somewhat larger than the object.

        """
        return _BRepBndLib.brepbndlib_Add(*args)

    @staticmethod
    def AddClose(*args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        B: Bnd_Box

        Return
        -------
        None

        Description
        -----------
        Adds the shape s to the bounding box b. this is a quick algorithm but only works if the shape s is composed of polygonal planar faces, as is the case if s is an approached polyhedral representation of an exact shape. pay particular attention to this because this condition is not checked and, if it not respected, an error may occur in the algorithm for which the bounding box is built. note that the resulting bounding box is not enlarged by the tolerance value of the sub-shapes as is the case with the add function. so the added part of the resulting bounding box is closer to the shape s.

        """
        return _BRepBndLib.brepbndlib_AddClose(*args)

    @staticmethod
    def AddOBB(*args):
        r"""

        Parameters
        ----------
        theS: TopoDS_Shape
        theOBB: Bnd_OBB
        theIsTriangulationUsed: bool (optional, default to Standard_True)
        theIsOptimal: bool (optional, default to Standard_False)
        theIsShapeToleranceUsed: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Computes the oriented bounding box for the shape <thes>. two independent methods of computation are implemented: first method based on set of points (so, it demands the triangulated shape or shape with planar faces and linear edges). the second method is based on use of inertia axes and is called if use of the first method is impossible. if theistriangulationused == false then the triangulation will be ignored at all. if theisshapetoleranceused == true then resulting box will be extended on the tolerance of the shape. theisoptimal flag defines whether to look for the more tight obb for the cost of performance or not.

        """
        return _BRepBndLib.brepbndlib_AddOBB(*args)

    @staticmethod
    def AddOptimal(*args):
        r"""

        Parameters
        ----------
        S: TopoDS_Shape
        B: Bnd_Box
        useTriangulation: bool (optional, default to Standard_True)
        useShapeTolerance: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Adds the shape s to the bounding box b. this algorithm builds precise bounding box, which differs from exact geometry boundaries of shape only on shape entities tolerances algorithm is the same as for method add(..), but uses more precise methods for building boxes for geometry objects. if useshapetolerance = true, bounding box is enlardged by shape tolerances and these tolerances are used for numerical methods of bounding box size calculations, otherwise bounding box is built according to sizes of uderlined geometrical entities, numerical calculation use tolerance precision::confusion().

        """
        return _BRepBndLib.brepbndlib_AddOptimal(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepBndLib.brepbndlib_swiginit(self, _BRepBndLib.new_brepbndlib())
    __swig_destroy__ = _BRepBndLib.delete_brepbndlib

# Register brepbndlib in _BRepBndLib:
_BRepBndLib.brepbndlib_swigregister(brepbndlib)



@deprecated
def brepbndlib_Add(*args):
	return brepbndlib.Add(*args)

@deprecated
def brepbndlib_AddClose(*args):
	return brepbndlib.AddClose(*args)

@deprecated
def brepbndlib_AddOBB(*args):
	return brepbndlib.AddOBB(*args)

@deprecated
def brepbndlib_AddOptimal(*args):
	return brepbndlib.AddOptimal(*args)



