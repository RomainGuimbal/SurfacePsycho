# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
AppCont module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_appcont.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AppCont')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AppCont')
    _AppCont = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AppCont', [dirname(__file__)])
        except ImportError:
            import _AppCont
            return _AppCont
        try:
            _mod = imp.load_module('_AppCont', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AppCont = swig_import_helper()
    del swig_import_helper
else:
    import _AppCont
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppCont.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _AppCont.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _AppCont.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _AppCont.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _AppCont.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _AppCont.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _AppCont.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _AppCont.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _AppCont.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _AppCont.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _AppCont.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _AppCont.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _AppCont.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _AppCont.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _AppCont.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _AppCont.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _AppCont.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AppCont.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _AppCont.process_exception(error, method_name, class_name)
process_exception = _AppCont.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.AppParCurves
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *



class AppCont_Function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppCont_Function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppCont_Function, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D1(self, *args) -> "Standard_Boolean":
        """
        Returns the derivative at parameter <theu>.

        Parameters
        ----------
        theU: float
        theVec2d: NCollection_Array1<gp_Vec2d>
        theVec: NCollection_Array1<gp_Vec>

        Returns
        -------
        bool

        """
        return _AppCont.AppCont_Function_D1(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        Returns the first parameter of the function.

        Returns
        -------
        float

        """
        return _AppCont.AppCont_Function_FirstParameter(self, *args)


    def GetNbOf2dPoints(self, *args) -> "Standard_Integer":
        """
        Get number of 2d points returned by 'value' and 'd1' functions.

        Returns
        -------
        int

        """
        return _AppCont.AppCont_Function_GetNbOf2dPoints(self, *args)


    def GetNbOf3dPoints(self, *args) -> "Standard_Integer":
        """
        Get number of 3d points returned by 'value' and 'd1' functions.

        Returns
        -------
        int

        """
        return _AppCont.AppCont_Function_GetNbOf3dPoints(self, *args)


    def GetNumberOfPoints(self, *args) -> "void":
        """
        Get number of 3d and 2d points returned by 'value' and 'd1' functions.

        Parameters
        ----------

        Returns
        -------
        theNbPnt: int
        theNbPnt2d: int

        """
        return _AppCont.AppCont_Function_GetNumberOfPoints(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        Returns the last parameter of the function.

        Returns
        -------
        float

        """
        return _AppCont.AppCont_Function_LastParameter(self, *args)


    def PeriodInformation(self, *args) -> "void":
        """
        Return information about peridicity in output paramateters space. @param thedimidx defines index in output parameters space. 1 <= thedimidx <= 3 * mynbpnt + 2 * mynbpnt2d.

        Parameters
        ----------
        Standard_Integer: 

        Returns
        -------
        IsPeriodic: bool
        thePeriod: float

        """
        return _AppCont.AppCont_Function_PeriodInformation(self, *args)


    def Value(self, *args) -> "Standard_Boolean":
        """
        Returns the point at parameter <theu>.

        Parameters
        ----------
        theU: float
        thePnt2d: NCollection_Array1<gp_Pnt2d>
        thePnt: NCollection_Array1<gp_Pnt>

        Returns
        -------
        bool

        """
        return _AppCont.AppCont_Function_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_Function
    __del__ = lambda self: None
AppCont_Function_swigregister = _AppCont.AppCont_Function_swigregister
AppCont_Function_swigregister(AppCont_Function)

class AppCont_LeastSquare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppCont_LeastSquare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppCont_LeastSquare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        SSP: AppCont_Function
        U0: float
        U1: float
        FirstCons: AppParCurves_Constraint
        LastCons: AppParCurves_Constraint
        Deg: int
        NbPoints: int

        Returns
        -------
        None

        """
        this = _AppCont.new_AppCont_LeastSquare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Error(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        F: float
        MaxE3d: float
        MaxE2d: float

        """
        return _AppCont.AppCont_LeastSquare_Error(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _AppCont.AppCont_LeastSquare_IsDone(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiCurve const &":
        """
        No available documentation.

        Returns
        -------
        AppParCurves_MultiCurve

        """
        return _AppCont.AppCont_LeastSquare_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_LeastSquare
    __del__ = lambda self: None
AppCont_LeastSquare_swigregister = _AppCont.AppCont_LeastSquare_swigregister
AppCont_LeastSquare_swigregister(AppCont_LeastSquare)



# This file is compatible with both classic and new-style classes.


