# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
AppCont module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_appcont.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AppCont
else:
    import _AppCont

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppCont.delete_SwigPyIterator

    def value(self):
        return _AppCont.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AppCont.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AppCont.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AppCont.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AppCont.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AppCont.SwigPyIterator_copy(self)

    def next(self):
        return _AppCont.SwigPyIterator_next(self)

    def __next__(self):
        return _AppCont.SwigPyIterator___next__(self)

    def previous(self):
        return _AppCont.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AppCont.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AppCont.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AppCont.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AppCont.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AppCont.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AppCont.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AppCont.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AppCont:
_AppCont.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _AppCont.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.AppParCurves
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *



class AppCont_Function(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def D1(self, *args):
        r"""

        Parameters
        ----------
        theU: float
        theVec2d: NCollection_Array1<gp_Vec2d>
        theVec: NCollection_Array1<gp_Vec>

        Return
        -------
        bool

        Description
        -----------
        Returns the derivative at parameter <theu>.

        """
        return _AppCont.AppCont_Function_D1(self, *args)

    def FirstParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the first parameter of the function.

        """
        return _AppCont.AppCont_Function_FirstParameter(self, *args)

    def GetNbOf2dPoints(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Get number of 2d points returned by 'value' and 'd1' functions.

        """
        return _AppCont.AppCont_Function_GetNbOf2dPoints(self, *args)

    def GetNbOf3dPoints(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Get number of 3d points returned by 'value' and 'd1' functions.

        """
        return _AppCont.AppCont_Function_GetNbOf3dPoints(self, *args)

    def GetNumberOfPoints(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theNbPnt: int
        theNbPnt2d: int

        Description
        -----------
        Get number of 3d and 2d points returned by 'value' and 'd1' functions.

        """
        return _AppCont.AppCont_Function_GetNumberOfPoints(self, *args)

    def LastParameter(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the last parameter of the function.

        """
        return _AppCont.AppCont_Function_LastParameter(self, *args)

    def PeriodInformation(self, *args):
        r"""

        Parameters
        ----------
        Standard_Integer: 

        Return
        -------
        IsPeriodic: bool
        thePeriod: float

        Description
        -----------
        Return information about peridicity in output paramateters space. @param thedimidx defines index in output parameters space. 1 <= thedimidx <= 3 * mynbpnt + 2 * mynbpnt2d.

        """
        return _AppCont.AppCont_Function_PeriodInformation(self, *args)

    def Value(self, *args):
        r"""

        Parameters
        ----------
        theU: float
        thePnt2d: NCollection_Array1<gp_Pnt2d>
        thePnt: NCollection_Array1<gp_Pnt>

        Return
        -------
        bool

        Description
        -----------
        Returns the point at parameter <theu>.

        """
        return _AppCont.AppCont_Function_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_Function

# Register AppCont_Function in _AppCont:
_AppCont.AppCont_Function_swigregister(AppCont_Function)
class AppCont_LeastSquare(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        SSP: AppCont_Function
        U0: float
        U1: float
        FirstCons: AppParCurves_Constraint
        LastCons: AppParCurves_Constraint
        Deg: int
        NbPoints: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _AppCont.AppCont_LeastSquare_swiginit(self, _AppCont.new_AppCont_LeastSquare(*args))

    def Error(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        F: float
        MaxE3d: float
        MaxE2d: float

        Description
        -----------
        No available documentation.

        """
        return _AppCont.AppCont_LeastSquare_Error(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _AppCont.AppCont_LeastSquare_IsDone(self, *args)

    def Value(self, *args):
        r"""
        Return
        -------
        AppParCurves_MultiCurve

        Description
        -----------
        No available documentation.

        """
        return _AppCont.AppCont_LeastSquare_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_LeastSquare

# Register AppCont_LeastSquare in _AppCont:
_AppCont.AppCont_LeastSquare_swigregister(AppCont_LeastSquare)



