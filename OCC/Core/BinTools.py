# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BinTools module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_bintools.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinTools')
    _BinTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinTools', [dirname(__file__)])
        except ImportError:
            import _BinTools
            return _BinTools
        try:
            _mod = imp.load_module('_BinTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinTools = swig_import_helper()
    del swig_import_helper
else:
    import _BinTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinTools.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _BinTools.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinTools.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _BinTools.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _BinTools.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _BinTools.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _BinTools.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _BinTools.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _BinTools.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _BinTools.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinTools.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _BinTools.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _BinTools.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinTools.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _BinTools.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _BinTools.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _BinTools.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _BinTools.process_exception(error, method_name, class_name)
process_exception = _BinTools.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Geom2d
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom

from enum import IntEnum
from OCC.Core.Exception import *



class bintools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bintools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bintools, name)
    __repr__ = _swig_repr

    def Read(*args) -> "Standard_Boolean":
        """
        Reads a shape from <thefile> and returns it in <theshape>.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theFile: char *
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        bool

        """
        return _BinTools.bintools_Read(*args)

    Read = staticmethod(Read)

    def Write(*args) -> "Standard_Boolean":
        """
        Writes <theshape> in <thefile>.

        Parameters
        ----------
        theShape: TopoDS_Shape
        theFile: char *
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        bool

        """
        return _BinTools.bintools_Write(*args)

    Write = staticmethod(Write)

    __repr__ = _dumps_object


    def __init__(self):
        this = _BinTools.new_bintools()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinTools.delete_bintools
    __del__ = lambda self: None
bintools_swigregister = _BinTools.bintools_swigregister
bintools_swigregister(bintools)

def bintools_Read(*args) -> "Standard_Boolean":
    """
    Reads a shape from <thefile> and returns it in <theshape>.

    Parameters
    ----------
    theShape: TopoDS_Shape
    theFile: char *
    theRange: Message_ProgressRange,optional
    	default value is Message_ProgressRange()

    Returns
    -------
    bool

    """
    return _BinTools.bintools_Read(*args)

def bintools_Write(*args) -> "Standard_Boolean":
    """
    Writes <theshape> in <thefile>.

    Parameters
    ----------
    theShape: TopoDS_Shape
    theFile: char *
    theRange: Message_ProgressRange,optional
    	default value is Message_ProgressRange()

    Returns
    -------
    bool

    """
    return _BinTools.bintools_Write(*args)

class BinTools_Curve2dSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinTools_Curve2dSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinTools_Curve2dSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns an empty set of curves.

        Returns
        -------
        None

        """
        this = _BinTools.new_BinTools_Curve2dSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Integer":
        """
        Incorporate a new curve in the set and returns its index.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        int

        """
        return _BinTools.BinTools_Curve2dSet_Add(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the content of the set.

        Returns
        -------
        None

        """
        return _BinTools.BinTools_Curve2dSet_Clear(self, *args)


    def Curve2d(self, *args) -> "opencascade::handle< Geom2d_Curve >":
        """
        Returns the curve of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _BinTools.BinTools_Curve2dSet_Curve2d(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of <l>.

        Parameters
        ----------
        C: Geom2d_Curve

        Returns
        -------
        int

        """
        return _BinTools.BinTools_Curve2dSet_Index(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_Curve2dSet self, std::string src)"""
        return _BinTools.BinTools_Curve2dSet_ReadFromString(self, src)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_Curve2dSet self) -> std::string"""
        return _BinTools.BinTools_Curve2dSet_WriteToString(self)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Dump(self):
    	pass

    __swig_destroy__ = _BinTools.delete_BinTools_Curve2dSet
    __del__ = lambda self: None
BinTools_Curve2dSet_swigregister = _BinTools.BinTools_Curve2dSet_swigregister
BinTools_Curve2dSet_swigregister(BinTools_Curve2dSet)

class BinTools_CurveSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinTools_CurveSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinTools_CurveSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns an empty set of curves.

        Returns
        -------
        None

        """
        this = _BinTools.new_BinTools_CurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Integer":
        """
        Incorporate a new curve in the set and returns its index.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        int

        """
        return _BinTools.BinTools_CurveSet_Add(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the content of the set.

        Returns
        -------
        None

        """
        return _BinTools.BinTools_CurveSet_Clear(self, *args)


    def Curve(self, *args) -> "opencascade::handle< Geom_Curve >":
        """
        Returns the curve of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _BinTools.BinTools_CurveSet_Curve(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of <l>.

        Parameters
        ----------
        C: Geom_Curve

        Returns
        -------
        int

        """
        return _BinTools.BinTools_CurveSet_Index(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_CurveSet self, std::string src)"""
        return _BinTools.BinTools_CurveSet_ReadFromString(self, src)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_CurveSet self) -> std::string"""
        return _BinTools.BinTools_CurveSet_WriteToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_CurveSet
    __del__ = lambda self: None
BinTools_CurveSet_swigregister = _BinTools.BinTools_CurveSet_swigregister
BinTools_CurveSet_swigregister(BinTools_CurveSet)

class BinTools_LocationSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinTools_LocationSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinTools_LocationSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns an empty set of locations.

        Returns
        -------
        None

        """
        this = _BinTools.new_BinTools_LocationSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Integer":
        """
        Incorporate a new location in the set and returns its index.

        Parameters
        ----------
        L: TopLoc_Location

        Returns
        -------
        int

        """
        return _BinTools.BinTools_LocationSet_Add(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the content of the set.

        Returns
        -------
        None

        """
        return _BinTools.BinTools_LocationSet_Clear(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of <l>.

        Parameters
        ----------
        L: TopLoc_Location

        Returns
        -------
        int

        """
        return _BinTools.BinTools_LocationSet_Index(self, *args)


    def Location(self, *args) -> "TopLoc_Location const &":
        """
        Returns the location of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopLoc_Location

        """
        return _BinTools.BinTools_LocationSet_Location(self, *args)


    def NbLocations(self, *args) -> "Standard_Integer":
        """
        Returns number of locations.

        Returns
        -------
        int

        """
        return _BinTools.BinTools_LocationSet_NbLocations(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_LocationSet self, std::string src)"""
        return _BinTools.BinTools_LocationSet_ReadFromString(self, src)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_LocationSet self) -> std::string"""
        return _BinTools.BinTools_LocationSet_WriteToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_LocationSet
    __del__ = lambda self: None
BinTools_LocationSet_swigregister = _BinTools.BinTools_LocationSet_swigregister
BinTools_LocationSet_swigregister(BinTools_LocationSet)

class BinTools_ShapeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinTools_ShapeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinTools_ShapeSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Builds an empty shapeset. parameter <iswithtriangles> is added for xml persistence.

        Parameters
        ----------
        isWithTriangles: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _BinTools.new_BinTools_ShapeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Integer":
        """
        Stores <s> and its sub-shape. returns the index of <s>. the method addgeometry is called on each sub-shape.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        int

        """
        return _BinTools.BinTools_ShapeSet_Add(self, *args)


    def AddGeometry(self, *args) -> "void":
        """
        Stores the goemetry of <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BinTools.BinTools_ShapeSet_AddGeometry(self, *args)


    def AddShapes(self, *args) -> "void":
        """
        Inserts the shape <s2> in the shape <s1>.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BinTools.BinTools_ShapeSet_AddShapes(self, *args)


    def ChangeLocations(self, *args) -> "BinTools_LocationSet &":
        """
        No available documentation.

        Returns
        -------
        BinTools_LocationSet

        """
        return _BinTools.BinTools_ShapeSet_ChangeLocations(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the content of the set.

        Returns
        -------
        None

        """
        return _BinTools.BinTools_ShapeSet_Clear(self, *args)


    def FormatNb(self, *args) -> "Standard_Integer":
        """
        Two formats available for the moment: first: does not write curveonsurface uv points into the file on reading calls check() method. second: stores curveonsurface uv points. on reading format is recognized from version string.

        Returns
        -------
        int

        """
        return _BinTools.BinTools_ShapeSet_FormatNb(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        int

        """
        return _BinTools.BinTools_ShapeSet_Index(self, *args)


    def IsWithTriangles(self, *args) -> "Standard_Boolean":
        """
        Return true if shape should be stored with triangles.

        Returns
        -------
        bool

        """
        return _BinTools.BinTools_ShapeSet_IsWithTriangles(self, *args)


    def Locations(self, *args) -> "BinTools_LocationSet const &":
        """
        No available documentation.

        Returns
        -------
        BinTools_LocationSet

        """
        return _BinTools.BinTools_ShapeSet_Locations(self, *args)


    def NbShapes(self, *args) -> "Standard_Integer":
        """
        Returns number of shapes read from file.

        Returns
        -------
        int

        """
        return _BinTools.BinTools_ShapeSet_NbShapes(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadFromString(self, src)


    def ReadGeometryFromString(self, src: 'std::string') -> "void":
        """ReadGeometryFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadGeometryFromString(self, src)


    def ReadPolygon3DFromString(self, src: 'std::string') -> "void":
        """ReadPolygon3DFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadPolygon3DFromString(self, src)


    def ReadPolygonOnTriangulationFromString(self, src: 'std::string') -> "void":
        """ReadPolygonOnTriangulationFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadPolygonOnTriangulationFromString(self, src)


    def ReadTriangulationFromString(self, src: 'std::string') -> "void":
        """ReadTriangulationFromString(BinTools_ShapeSet self, std::string src)"""
        return _BinTools.BinTools_ShapeSet_ReadTriangulationFromString(self, src)


    def SetFormatNb(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theFormatNb: int

        Returns
        -------
        None

        """
        return _BinTools.BinTools_ShapeSet_SetFormatNb(self, *args)


    def SetWithTriangles(self, *args) -> "void":
        """
        Define if shape will be stored with triangles. ignored (always written) if face defines only triangulation (no surface).

        Parameters
        ----------
        isWithTriangles: bool

        Returns
        -------
        None

        """
        return _BinTools.BinTools_ShapeSet_SetWithTriangles(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        Returns the sub-shape of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Shape

        """
        return _BinTools.BinTools_ShapeSet_Shape(self, *args)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WriteToString(self)


    def WriteGeometryToString(self) -> "std::string":
        """WriteGeometryToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WriteGeometryToString(self)


    def WritePolygon3DToString(self) -> "std::string":
        """WritePolygon3DToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WritePolygon3DToString(self)


    def WritePolygonOnTriangulationToString(self) -> "std::string":
        """WritePolygonOnTriangulationToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WritePolygonOnTriangulationToString(self)


    def WriteTriangulationToString(self) -> "std::string":
        """WriteTriangulationToString(BinTools_ShapeSet self) -> std::string"""
        return _BinTools.BinTools_ShapeSet_WriteTriangulationToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_ShapeSet
    __del__ = lambda self: None
BinTools_ShapeSet_swigregister = _BinTools.BinTools_ShapeSet_swigregister
BinTools_ShapeSet_swigregister(BinTools_ShapeSet)

class BinTools_SurfaceSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinTools_SurfaceSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinTools_SurfaceSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns an empty set of surfaces.

        Returns
        -------
        None

        """
        this = _BinTools.new_BinTools_SurfaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args) -> "Standard_Integer":
        """
        Incorporate a new surface in the set and returns its index.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        int

        """
        return _BinTools.BinTools_SurfaceSet_Add(self, *args)


    def Clear(self, *args) -> "void":
        """
        Clears the content of the set.

        Returns
        -------
        None

        """
        return _BinTools.BinTools_SurfaceSet_Clear(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        Returns the index of <l>.

        Parameters
        ----------
        S: Geom_Surface

        Returns
        -------
        int

        """
        return _BinTools.BinTools_SurfaceSet_Index(self, *args)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(BinTools_SurfaceSet self, std::string src)"""
        return _BinTools.BinTools_SurfaceSet_ReadFromString(self, src)


    def Surface(self, *args) -> "opencascade::handle< Geom_Surface >":
        """
        Returns the surface of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _BinTools.BinTools_SurfaceSet_Surface(self, *args)


    def WriteToString(self) -> "std::string":
        """WriteToString(BinTools_SurfaceSet self) -> std::string"""
        return _BinTools.BinTools_SurfaceSet_WriteToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinTools.delete_BinTools_SurfaceSet
    __del__ = lambda self: None
BinTools_SurfaceSet_swigregister = _BinTools.BinTools_SurfaceSet_swigregister
BinTools_SurfaceSet_swigregister(BinTools_SurfaceSet)



# This file is compatible with both classic and new-style classes.


