# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
XmlLDrivers module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_xmlldrivers.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _XmlLDrivers
else:
    import _XmlLDrivers

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlLDrivers.delete_SwigPyIterator

    def value(self):
        return _XmlLDrivers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlLDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlLDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlLDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlLDrivers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlLDrivers.SwigPyIterator_copy(self)

    def next(self):
        return _XmlLDrivers.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlLDrivers.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlLDrivers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlLDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlLDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlLDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlLDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlLDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlLDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlLDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _XmlLDrivers:
_XmlLDrivers.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _XmlLDrivers.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _XmlLDrivers.ios_base_erase_event
    imbue_event = _XmlLDrivers.ios_base_imbue_event
    copyfmt_event = _XmlLDrivers.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _XmlLDrivers.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _XmlLDrivers.ios_base_flags(self, *args)

    def setf(self, *args):
        return _XmlLDrivers.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _XmlLDrivers.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _XmlLDrivers.ios_base_precision(self, *args)

    def width(self, *args):
        return _XmlLDrivers.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _XmlLDrivers.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _XmlLDrivers.ios_base_imbue(self, __loc)

    def getloc(self):
        return _XmlLDrivers.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _XmlLDrivers.ios_base_xalloc()

    def iword(self, __ix):
        return _XmlLDrivers.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _XmlLDrivers.ios_base_pword(self, __ix)
    __swig_destroy__ = _XmlLDrivers.delete_ios_base

# Register ios_base in _XmlLDrivers:
_XmlLDrivers.ios_base_swigregister(ios_base)
cvar = _XmlLDrivers.cvar
ios_base.boolalpha = _XmlLDrivers.cvar.ios_base_boolalpha
ios_base.dec = _XmlLDrivers.cvar.ios_base_dec
ios_base.fixed = _XmlLDrivers.cvar.ios_base_fixed
ios_base.hex = _XmlLDrivers.cvar.ios_base_hex
ios_base.internal = _XmlLDrivers.cvar.ios_base_internal
ios_base.left = _XmlLDrivers.cvar.ios_base_left
ios_base.oct = _XmlLDrivers.cvar.ios_base_oct
ios_base.right = _XmlLDrivers.cvar.ios_base_right
ios_base.scientific = _XmlLDrivers.cvar.ios_base_scientific
ios_base.showbase = _XmlLDrivers.cvar.ios_base_showbase
ios_base.showpoint = _XmlLDrivers.cvar.ios_base_showpoint
ios_base.showpos = _XmlLDrivers.cvar.ios_base_showpos
ios_base.skipws = _XmlLDrivers.cvar.ios_base_skipws
ios_base.unitbuf = _XmlLDrivers.cvar.ios_base_unitbuf
ios_base.uppercase = _XmlLDrivers.cvar.ios_base_uppercase
ios_base.adjustfield = _XmlLDrivers.cvar.ios_base_adjustfield
ios_base.basefield = _XmlLDrivers.cvar.ios_base_basefield
ios_base.floatfield = _XmlLDrivers.cvar.ios_base_floatfield
ios_base.badbit = _XmlLDrivers.cvar.ios_base_badbit
ios_base.eofbit = _XmlLDrivers.cvar.ios_base_eofbit
ios_base.failbit = _XmlLDrivers.cvar.ios_base_failbit
ios_base.goodbit = _XmlLDrivers.cvar.ios_base_goodbit
ios_base.app = _XmlLDrivers.cvar.ios_base_app
ios_base.ate = _XmlLDrivers.cvar.ios_base_ate
ios_base.binary = _XmlLDrivers.cvar.ios_base_binary
ios_base.ios_base_in = _XmlLDrivers.cvar.ios_base_ios_base_in
ios_base.out = _XmlLDrivers.cvar.ios_base_out
ios_base.trunc = _XmlLDrivers.cvar.ios_base_trunc
ios_base.beg = _XmlLDrivers.cvar.ios_base_beg
ios_base.cur = _XmlLDrivers.cvar.ios_base_cur
ios_base.end = _XmlLDrivers.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _XmlLDrivers.ios_rdstate(self)

    def clear(self, *args):
        return _XmlLDrivers.ios_clear(self, *args)

    def setstate(self, __state):
        return _XmlLDrivers.ios_setstate(self, __state)

    def good(self):
        return _XmlLDrivers.ios_good(self)

    def eof(self):
        return _XmlLDrivers.ios_eof(self)

    def fail(self):
        return _XmlLDrivers.ios_fail(self)

    def bad(self):
        return _XmlLDrivers.ios_bad(self)

    def exceptions(self, *args):
        return _XmlLDrivers.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _XmlLDrivers.ios_swiginit(self, _XmlLDrivers.new_ios(__sb))
    __swig_destroy__ = _XmlLDrivers.delete_ios

    def tie(self, *args):
        return _XmlLDrivers.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _XmlLDrivers.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _XmlLDrivers.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _XmlLDrivers.ios_fill(self, *args)

    def imbue(self, __loc):
        return _XmlLDrivers.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _XmlLDrivers.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _XmlLDrivers.ios_widen(self, __c)

# Register ios in _XmlLDrivers:
_XmlLDrivers.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _XmlLDrivers.ostream_swiginit(self, _XmlLDrivers.new_ostream(__sb))
    __swig_destroy__ = _XmlLDrivers.delete_ostream

    def __lshift__(self, *args):
        return _XmlLDrivers.ostream___lshift__(self, *args)

    def put(self, __c):
        return _XmlLDrivers.ostream_put(self, __c)

    def write(self, __s, __n):
        return _XmlLDrivers.ostream_write(self, __s, __n)

    def flush(self):
        return _XmlLDrivers.ostream_flush(self)

    def tellp(self):
        return _XmlLDrivers.ostream_tellp(self)

    def seekp(self, *args):
        return _XmlLDrivers.ostream_seekp(self, *args)

# Register ostream in _XmlLDrivers:
_XmlLDrivers.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _XmlLDrivers.istream_swiginit(self, _XmlLDrivers.new_istream(__sb))
    __swig_destroy__ = _XmlLDrivers.delete_istream

    def __rshift__(self, *args):
        return _XmlLDrivers.istream___rshift__(self, *args)

    def gcount(self):
        return _XmlLDrivers.istream_gcount(self)

    def get(self, *args):
        return _XmlLDrivers.istream_get(self, *args)

    def getline(self, *args):
        return _XmlLDrivers.istream_getline(self, *args)

    def ignore(self, *args):
        return _XmlLDrivers.istream_ignore(self, *args)

    def peek(self):
        return _XmlLDrivers.istream_peek(self)

    def read(self, __s, __n):
        return _XmlLDrivers.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _XmlLDrivers.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _XmlLDrivers.istream_putback(self, __c)

    def unget(self):
        return _XmlLDrivers.istream_unget(self)

    def sync(self):
        return _XmlLDrivers.istream_sync(self)

    def tellg(self):
        return _XmlLDrivers.istream_tellg(self)

    def seekg(self, *args):
        return _XmlLDrivers.istream_seekg(self, *args)

# Register istream in _XmlLDrivers:
_XmlLDrivers.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _XmlLDrivers.iostream_swiginit(self, _XmlLDrivers.new_iostream(__sb))
    __swig_destroy__ = _XmlLDrivers.delete_iostream

# Register iostream in _XmlLDrivers:
_XmlLDrivers.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _XmlLDrivers.endl_cb_ptr
endl = _XmlLDrivers.endl
ends_cb_ptr = _XmlLDrivers.ends_cb_ptr
ends = _XmlLDrivers.ends
flush_cb_ptr = _XmlLDrivers.flush_cb_ptr
flush = _XmlLDrivers.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.XmlMDF
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlLDrivers_DocumentRetrievalDriver_Create():
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_Create()

def Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast(t):
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast(t)

def Handle_XmlLDrivers_DocumentRetrievalDriver_IsNull(t):
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_IsNull(t)

def Handle_XmlLDrivers_DocumentStorageDriver_Create():
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_Create()

def Handle_XmlLDrivers_DocumentStorageDriver_DownCast(t):
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_DownCast(t)

def Handle_XmlLDrivers_DocumentStorageDriver_IsNull(t):
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_IsNull(t)
class XmlLDrivers_SequenceOfNamespaceDef(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_begin(self)

    def end(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_end(self)

    def cbegin(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_cbegin(self)

    def cend(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_cend(self)

    def __init__(self, *args):
        _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_swiginit(self, _XmlLDrivers.new_XmlLDrivers_SequenceOfNamespaceDef(*args))

    def Size(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Size(self)

    def Length(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Length(self)

    def Lower(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Lower(self)

    def Upper(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Upper(self)

    def IsEmpty(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_IsEmpty(self)

    def Reverse(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Reverse(self)

    def Exchange(self, I, J):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Assign(self, theOther)

    def Set(self, *args):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Set(self, *args)

    def Remove(self, *args):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Remove(self, *args)

    def Append(self, *args):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Append(self, *args)

    def Prepend(self, *args):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Split(self, theIndex, theSeq)

    def First(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_First(self)

    def ChangeFirst(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_ChangeFirst(self)

    def Last(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Last(self)

    def ChangeLast(self):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_ChangeLast(self)

    def Value(self, theIndex):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_SequenceOfNamespaceDef

    def __len__(self):
        return self.Size()


# Register XmlLDrivers_SequenceOfNamespaceDef in _XmlLDrivers:
_XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_swigregister(XmlLDrivers_SequenceOfNamespaceDef)
class xmlldrivers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AttributeDrivers(*args):
        r"""

        Parameters
        ----------
        theMsgDriver: Message_Messenger

        Return
        -------
        opencascade::handle<XmlMDF_ADriverTable>

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.xmlldrivers_AttributeDrivers(*args)

    @staticmethod
    def CreationDate(*args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.xmlldrivers_CreationDate(*args)

    @staticmethod
    def DefineFormat(*args):
        r"""

        Parameters
        ----------
        theApp: TDocStd_Application

        Return
        -------
        None

        Description
        -----------
        Defines format 'xmllocaf' and registers its read and write drivers in the specified application.

        """
        return _XmlLDrivers.xmlldrivers_DefineFormat(*args)

    @staticmethod
    def Factory(*args):
        r"""

        Parameters
        ----------
        theGUID: Standard_GUID

        Return
        -------
        opencascade::handle<Standard_Transient>

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.xmlldrivers_Factory(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlLDrivers.xmlldrivers_swiginit(self, _XmlLDrivers.new_xmlldrivers())
    __swig_destroy__ = _XmlLDrivers.delete_xmlldrivers

# Register xmlldrivers in _XmlLDrivers:
_XmlLDrivers.xmlldrivers_swigregister(xmlldrivers)
class XmlLDrivers_DocumentRetrievalDriver(OCC.Core.PCDM.PCDM_RetrievalDriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_swiginit(self, _XmlLDrivers.new_XmlLDrivers_DocumentRetrievalDriver(*args))

    def AttributeDrivers(self, *args):
        r"""

        Parameters
        ----------
        theMsgDriver: Message_Messenger

        Return
        -------
        opencascade::handle<XmlMDF_ADriverTable>

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)

    def Read(self, *args):
        r"""

        Parameters
        ----------
        theFileName: str
        theNewDocument: CDM_Document
        theApplication: CDM_Application
        theFilter: PCDM_ReaderFilter (optional, default to opencascade::handle<PCDM_ReaderFilter>())
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theIStream: str
        theStorageData: Storage_Data
        theDoc: CDM_Document
        theApplication: CDM_Application
        theFilter: PCDM_ReaderFilter (optional, default to opencascade::handle<PCDM_ReaderFilter>())
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_Read(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_DocumentRetrievalDriver

# Register XmlLDrivers_DocumentRetrievalDriver in _XmlLDrivers:
_XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_swigregister(XmlLDrivers_DocumentRetrievalDriver)
class XmlLDrivers_DocumentStorageDriver(OCC.Core.PCDM.PCDM_StorageDriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theCopyright: str

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_swiginit(self, _XmlLDrivers.new_XmlLDrivers_DocumentStorageDriver(*args))

    def AttributeDrivers(self, *args):
        r"""

        Parameters
        ----------
        theMsgDriver: Message_Messenger

        Return
        -------
        opencascade::handle<XmlMDF_ADriverTable>

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        theDocument: CDM_Document
        theFileName: str
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theDocument: CDM_Document
        theRange: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        theOStream: Standard_OStream

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_Write(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlLDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_DocumentStorageDriver

# Register XmlLDrivers_DocumentStorageDriver in _XmlLDrivers:
_XmlLDrivers.XmlLDrivers_DocumentStorageDriver_swigregister(XmlLDrivers_DocumentStorageDriver)
class XmlLDrivers_NamespaceDef(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        thePrefix: str
        theURI: str

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlLDrivers.XmlLDrivers_NamespaceDef_swiginit(self, _XmlLDrivers.new_XmlLDrivers_NamespaceDef(*args))

    def Prefix(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.XmlLDrivers_NamespaceDef_Prefix(self, *args)

    def URI(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        No available documentation.

        """
        return _XmlLDrivers.XmlLDrivers_NamespaceDef_URI(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_NamespaceDef

# Register XmlLDrivers_NamespaceDef in _XmlLDrivers:
_XmlLDrivers.XmlLDrivers_NamespaceDef_swigregister(XmlLDrivers_NamespaceDef)



@deprecated
def xmlldrivers_AttributeDrivers(*args):
	return xmlldrivers.AttributeDrivers(*args)

@deprecated
def xmlldrivers_CreationDate(*args):
	return xmlldrivers.CreationDate(*args)

@deprecated
def xmlldrivers_DefineFormat(*args):
	return xmlldrivers.DefineFormat(*args)

@deprecated
def xmlldrivers_Factory(*args):
	return xmlldrivers.Factory(*args)



