# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlLDrivers module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmlldrivers.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlLDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlLDrivers')
    _XmlLDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlLDrivers', [dirname(__file__)])
        except ImportError:
            import _XmlLDrivers
            return _XmlLDrivers
        try:
            _mod = imp.load_module('_XmlLDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlLDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _XmlLDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlLDrivers.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XmlLDrivers.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlLDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlLDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XmlLDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XmlLDrivers.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XmlLDrivers.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XmlLDrivers.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XmlLDrivers.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XmlLDrivers.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlLDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlLDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlLDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlLDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlLDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlLDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XmlLDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlLDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlLDrivers.process_exception(error, method_name, class_name)
process_exception = _XmlLDrivers.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.XmlMDF
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlLDrivers_DocumentRetrievalDriver_Create() -> "opencascade::handle< XmlLDrivers_DocumentRetrievalDriver >":
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_Create()
Handle_XmlLDrivers_DocumentRetrievalDriver_Create = _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_Create

def Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlLDrivers_DocumentRetrievalDriver >":
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast(t)
Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast = _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast

def Handle_XmlLDrivers_DocumentRetrievalDriver_IsNull(t: 'opencascade::handle< XmlLDrivers_DocumentRetrievalDriver > const &') -> "bool":
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_IsNull(t)
Handle_XmlLDrivers_DocumentRetrievalDriver_IsNull = _XmlLDrivers.Handle_XmlLDrivers_DocumentRetrievalDriver_IsNull

def Handle_XmlLDrivers_DocumentStorageDriver_Create() -> "opencascade::handle< XmlLDrivers_DocumentStorageDriver >":
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_Create()
Handle_XmlLDrivers_DocumentStorageDriver_Create = _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_Create

def Handle_XmlLDrivers_DocumentStorageDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlLDrivers_DocumentStorageDriver >":
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_DownCast(t)
Handle_XmlLDrivers_DocumentStorageDriver_DownCast = _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_DownCast

def Handle_XmlLDrivers_DocumentStorageDriver_IsNull(t: 'opencascade::handle< XmlLDrivers_DocumentStorageDriver > const &') -> "bool":
    return _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_IsNull(t)
Handle_XmlLDrivers_DocumentStorageDriver_IsNull = _XmlLDrivers.Handle_XmlLDrivers_DocumentStorageDriver_IsNull
class XmlLDrivers_SequenceOfNamespaceDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlLDrivers_SequenceOfNamespaceDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlLDrivers_SequenceOfNamespaceDef, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Sequence< XmlLDrivers_NamespaceDef >::iterator":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_begin(self)

    def end(self) -> "NCollection_Sequence< XmlLDrivers_NamespaceDef >::iterator":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_end(self)

    def cbegin(self) -> "NCollection_Sequence< XmlLDrivers_NamespaceDef >::const_iterator":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_cbegin(self)

    def cend(self) -> "NCollection_Sequence< XmlLDrivers_NamespaceDef >::const_iterator":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_cend(self)

    def __init__(self, *args):
        this = _XmlLDrivers.new_XmlLDrivers_SequenceOfNamespaceDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "Standard_Integer":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Size(self)

    def Length(self) -> "Standard_Integer":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Length(self)

    def Lower(self) -> "Standard_Integer":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_IsEmpty(self)

    def Reverse(self) -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Reverse(self)

    def Exchange(self, I: 'Standard_Integer const', J: 'Standard_Integer const') -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Exchange(self, I, J)
    if _newclass:
        delNode = staticmethod(_XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_delNode)
    else:
        delNode = _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_delNode

    def Clear(self, theAllocator: 'TDF_HAllocator'=0) -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Clear(self, theAllocator)

    def Assign(self, theOther: 'XmlLDrivers_SequenceOfNamespaceDef') -> "NCollection_Sequence< XmlLDrivers_NamespaceDef > &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Assign(self, theOther)

    def Set(self, theOther: 'XmlLDrivers_SequenceOfNamespaceDef') -> "NCollection_Sequence< XmlLDrivers_NamespaceDef > &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Set(self, theOther)

    def Remove(self, *args) -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Remove(self, *args)

    def Append(self, *args) -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Append(self, *args)

    def Prepend(self, *args) -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Prepend(self, *args)

    def InsertBefore(self, *args) -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_InsertBefore(self, *args)

    def InsertAfter(self, *args) -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_InsertAfter(self, *args)

    def Split(self, theIndex: 'Standard_Integer const', theSeq: 'XmlLDrivers_SequenceOfNamespaceDef') -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Split(self, theIndex, theSeq)

    def First(self) -> "XmlLDrivers_NamespaceDef const &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_First(self)

    def ChangeFirst(self) -> "XmlLDrivers_NamespaceDef &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_ChangeFirst(self)

    def Last(self) -> "XmlLDrivers_NamespaceDef const &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Last(self)

    def ChangeLast(self) -> "XmlLDrivers_NamespaceDef &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "XmlLDrivers_NamespaceDef const &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "XmlLDrivers_NamespaceDef &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "XmlLDrivers_NamespaceDef &":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'XmlLDrivers_NamespaceDef') -> "void":
        return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_SequenceOfNamespaceDef
    __del__ = lambda self: None

    def __len__(self):
        return self.Size()

XmlLDrivers_SequenceOfNamespaceDef_swigregister = _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_swigregister
XmlLDrivers_SequenceOfNamespaceDef_swigregister(XmlLDrivers_SequenceOfNamespaceDef)

def XmlLDrivers_SequenceOfNamespaceDef_delNode(theNode: 'NCollection_SeqNode *', theAl: 'TDF_HAllocator') -> "void":
    return _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_delNode(theNode, theAl)
XmlLDrivers_SequenceOfNamespaceDef_delNode = _XmlLDrivers.XmlLDrivers_SequenceOfNamespaceDef_delNode

class xmlldrivers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xmlldrivers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xmlldrivers, name)
    __repr__ = _swig_repr

    def AttributeDrivers(*args) -> "opencascade::handle< XmlMDF_ADriverTable >":
        """
        No available documentation.

        Parameters
        ----------
        theMsgDriver: Message_Messenger

        Returns
        -------
        opencascade::handle<XmlMDF_ADriverTable>

        """
        return _XmlLDrivers.xmlldrivers_AttributeDrivers(*args)

    AttributeDrivers = staticmethod(AttributeDrivers)

    def CreationDate(*args) -> "TCollection_AsciiString":
        """
        No available documentation.

        Returns
        -------
        TCollection_AsciiString

        """
        return _XmlLDrivers.xmlldrivers_CreationDate(*args)

    CreationDate = staticmethod(CreationDate)

    def DefineFormat(*args) -> "void":
        """
        Defines format 'xmllocaf' and registers its read and write drivers in the specified application.

        Parameters
        ----------
        theApp: TDocStd_Application

        Returns
        -------
        None

        """
        return _XmlLDrivers.xmlldrivers_DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
        """
        No available documentation.

        Parameters
        ----------
        theGUID: Standard_GUID

        Returns
        -------
        opencascade::handle<Standard_Transient>

        """
        return _XmlLDrivers.xmlldrivers_Factory(*args)

    Factory = staticmethod(Factory)

    def StorageVersion(*args) -> "int":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _XmlLDrivers.xmlldrivers_StorageVersion(*args)

    StorageVersion = staticmethod(StorageVersion)

    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlLDrivers.new_xmlldrivers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlLDrivers.delete_xmlldrivers
    __del__ = lambda self: None
xmlldrivers_swigregister = _XmlLDrivers.xmlldrivers_swigregister
xmlldrivers_swigregister(xmlldrivers)

def xmlldrivers_AttributeDrivers(*args) -> "opencascade::handle< XmlMDF_ADriverTable >":
    """
    No available documentation.

    Parameters
    ----------
    theMsgDriver: Message_Messenger

    Returns
    -------
    opencascade::handle<XmlMDF_ADriverTable>

    """
    return _XmlLDrivers.xmlldrivers_AttributeDrivers(*args)

def xmlldrivers_CreationDate(*args) -> "TCollection_AsciiString":
    """
    No available documentation.

    Returns
    -------
    TCollection_AsciiString

    """
    return _XmlLDrivers.xmlldrivers_CreationDate(*args)

def xmlldrivers_DefineFormat(*args) -> "void":
    """
    Defines format 'xmllocaf' and registers its read and write drivers in the specified application.

    Parameters
    ----------
    theApp: TDocStd_Application

    Returns
    -------
    None

    """
    return _XmlLDrivers.xmlldrivers_DefineFormat(*args)

def xmlldrivers_Factory(*args) -> "opencascade::handle< Standard_Transient > const &":
    """
    No available documentation.

    Parameters
    ----------
    theGUID: Standard_GUID

    Returns
    -------
    opencascade::handle<Standard_Transient>

    """
    return _XmlLDrivers.xmlldrivers_Factory(*args)

def xmlldrivers_StorageVersion(*args) -> "int":
    """
    No available documentation.

    Returns
    -------
    int

    """
    return _XmlLDrivers.xmlldrivers_StorageVersion(*args)

class XmlLDrivers_DocumentRetrievalDriver(OCC.Core.PCDM.PCDM_RetrievalDriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.PCDM.PCDM_RetrievalDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlLDrivers_DocumentRetrievalDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.PCDM.PCDM_RetrievalDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlLDrivers_DocumentRetrievalDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _XmlLDrivers.new_XmlLDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AttributeDrivers(self, *args) -> "opencascade::handle< XmlMDF_ADriverTable >":
        """
        No available documentation.

        Parameters
        ----------
        theMsgDriver: Message_Messenger

        Returns
        -------
        opencascade::handle<XmlMDF_ADriverTable>

        """
        return _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlLDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_DocumentRetrievalDriver
    __del__ = lambda self: None
XmlLDrivers_DocumentRetrievalDriver_swigregister = _XmlLDrivers.XmlLDrivers_DocumentRetrievalDriver_swigregister
XmlLDrivers_DocumentRetrievalDriver_swigregister(XmlLDrivers_DocumentRetrievalDriver)

class XmlLDrivers_DocumentStorageDriver(OCC.Core.PCDM.PCDM_StorageDriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.PCDM.PCDM_StorageDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlLDrivers_DocumentStorageDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.PCDM.PCDM_StorageDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlLDrivers_DocumentStorageDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theCopyright: TCollection_ExtendedString

        Returns
        -------
        None

        """
        this = _XmlLDrivers.new_XmlLDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AttributeDrivers(self, *args) -> "opencascade::handle< XmlMDF_ADriverTable >":
        """
        No available documentation.

        Parameters
        ----------
        theMsgDriver: Message_Messenger

        Returns
        -------
        opencascade::handle<XmlMDF_ADriverTable>

        """
        return _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlLDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_DocumentStorageDriver
    __del__ = lambda self: None
XmlLDrivers_DocumentStorageDriver_swigregister = _XmlLDrivers.XmlLDrivers_DocumentStorageDriver_swigregister
XmlLDrivers_DocumentStorageDriver_swigregister(XmlLDrivers_DocumentStorageDriver)

class XmlLDrivers_NamespaceDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlLDrivers_NamespaceDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlLDrivers_NamespaceDef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        thePrefix: TCollection_AsciiString
        theURI: TCollection_AsciiString

        Returns
        -------
        None

        """
        this = _XmlLDrivers.new_XmlLDrivers_NamespaceDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Prefix(self, *args) -> "TCollection_AsciiString const &":
        """
        No available documentation.

        Returns
        -------
        TCollection_AsciiString

        """
        return _XmlLDrivers.XmlLDrivers_NamespaceDef_Prefix(self, *args)


    def URI(self, *args) -> "TCollection_AsciiString const &":
        """
        No available documentation.

        Returns
        -------
        TCollection_AsciiString

        """
        return _XmlLDrivers.XmlLDrivers_NamespaceDef_URI(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlLDrivers.delete_XmlLDrivers_NamespaceDef
    __del__ = lambda self: None
XmlLDrivers_NamespaceDef_swigregister = _XmlLDrivers.XmlLDrivers_NamespaceDef_swigregister
XmlLDrivers_NamespaceDef_swigregister(XmlLDrivers_NamespaceDef)



# This file is compatible with both classic and new-style classes.


