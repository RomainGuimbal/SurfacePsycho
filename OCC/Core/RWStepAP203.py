# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
RWStepAP203 module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_rwstepap203.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepAP203')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepAP203')
    _RWStepAP203 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepAP203', [dirname(__file__)])
        except ImportError:
            import _RWStepAP203
            return _RWStepAP203
        try:
            _mod = imp.load_module('_RWStepAP203', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepAP203 = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepAP203
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepAP203.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _RWStepAP203.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWStepAP203.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _RWStepAP203.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _RWStepAP203.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepAP203.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _RWStepAP203.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _RWStepAP203.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _RWStepAP203.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _RWStepAP203.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWStepAP203.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepAP203.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _RWStepAP203.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWStepAP203.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _RWStepAP203.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _RWStepAP203.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _RWStepAP203.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepAP203.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _RWStepAP203.process_exception(error, method_name, class_name)
process_exception = _RWStepAP203.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepAP203
import OCC.Core.StepBasic
import OCC.Core.StepRepr

from enum import IntEnum
from OCC.Core.Exception import *



class RWStepAP203_RWCcDesignApproval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWCcDesignApproval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWCcDesignApproval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignApproval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads ccdesignapproval.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_CcDesignApproval

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignApproval_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_CcDesignApproval
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignApproval_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes ccdesignapproval.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_CcDesignApproval

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignApproval_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignApproval
    __del__ = lambda self: None
RWStepAP203_RWCcDesignApproval_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignApproval_swigregister
RWStepAP203_RWCcDesignApproval_swigregister(RWStepAP203_RWCcDesignApproval)

class RWStepAP203_RWCcDesignCertification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWCcDesignCertification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWCcDesignCertification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignCertification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads ccdesigncertification.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_CcDesignCertification

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignCertification_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_CcDesignCertification
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignCertification_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes ccdesigncertification.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_CcDesignCertification

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignCertification_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignCertification
    __del__ = lambda self: None
RWStepAP203_RWCcDesignCertification_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignCertification_swigregister
RWStepAP203_RWCcDesignCertification_swigregister(RWStepAP203_RWCcDesignCertification)

class RWStepAP203_RWCcDesignContract(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWCcDesignContract, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWCcDesignContract, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignContract(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads ccdesigncontract.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_CcDesignContract

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignContract_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_CcDesignContract
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignContract_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes ccdesigncontract.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_CcDesignContract

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignContract_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignContract
    __del__ = lambda self: None
RWStepAP203_RWCcDesignContract_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignContract_swigregister
RWStepAP203_RWCcDesignContract_swigregister(RWStepAP203_RWCcDesignContract)

class RWStepAP203_RWCcDesignDateAndTimeAssignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWCcDesignDateAndTimeAssignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWCcDesignDateAndTimeAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads ccdesigndateandtimeassignment.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_CcDesignDateAndTimeAssignment

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignDateAndTimeAssignment_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_CcDesignDateAndTimeAssignment
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignDateAndTimeAssignment_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes ccdesigndateandtimeassignment.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_CcDesignDateAndTimeAssignment

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignDateAndTimeAssignment_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignDateAndTimeAssignment
    __del__ = lambda self: None
RWStepAP203_RWCcDesignDateAndTimeAssignment_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignDateAndTimeAssignment_swigregister
RWStepAP203_RWCcDesignDateAndTimeAssignment_swigregister(RWStepAP203_RWCcDesignDateAndTimeAssignment)

class RWStepAP203_RWCcDesignPersonAndOrganizationAssignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWCcDesignPersonAndOrganizationAssignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWCcDesignPersonAndOrganizationAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads ccdesignpersonandorganizationassignment.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_CcDesignPersonAndOrganizationAssignment

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_CcDesignPersonAndOrganizationAssignment
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes ccdesignpersonandorganizationassignment.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_CcDesignPersonAndOrganizationAssignment

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignPersonAndOrganizationAssignment
    __del__ = lambda self: None
RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_swigregister
RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_swigregister(RWStepAP203_RWCcDesignPersonAndOrganizationAssignment)

class RWStepAP203_RWCcDesignSecurityClassification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWCcDesignSecurityClassification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWCcDesignSecurityClassification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignSecurityClassification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads ccdesignsecurityclassification.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_CcDesignSecurityClassification

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSecurityClassification_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_CcDesignSecurityClassification
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSecurityClassification_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes ccdesignsecurityclassification.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_CcDesignSecurityClassification

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSecurityClassification_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignSecurityClassification
    __del__ = lambda self: None
RWStepAP203_RWCcDesignSecurityClassification_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignSecurityClassification_swigregister
RWStepAP203_RWCcDesignSecurityClassification_swigregister(RWStepAP203_RWCcDesignSecurityClassification)

class RWStepAP203_RWCcDesignSpecificationReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWCcDesignSpecificationReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWCcDesignSpecificationReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignSpecificationReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads ccdesignspecificationreference.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_CcDesignSpecificationReference

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSpecificationReference_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_CcDesignSpecificationReference
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSpecificationReference_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes ccdesignspecificationreference.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_CcDesignSpecificationReference

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSpecificationReference_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignSpecificationReference
    __del__ = lambda self: None
RWStepAP203_RWCcDesignSpecificationReference_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignSpecificationReference_swigregister
RWStepAP203_RWCcDesignSpecificationReference_swigregister(RWStepAP203_RWCcDesignSpecificationReference)

class RWStepAP203_RWChange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWChange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWChange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWChange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads change.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_Change

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWChange_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_Change
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWChange_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes change.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_Change

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWChange_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWChange
    __del__ = lambda self: None
RWStepAP203_RWChange_swigregister = _RWStepAP203.RWStepAP203_RWChange_swigregister
RWStepAP203_RWChange_swigregister(RWStepAP203_RWChange)

class RWStepAP203_RWChangeRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWChangeRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWChangeRequest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWChangeRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads changerequest.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_ChangeRequest

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWChangeRequest_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_ChangeRequest
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWChangeRequest_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes changerequest.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_ChangeRequest

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWChangeRequest_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWChangeRequest
    __del__ = lambda self: None
RWStepAP203_RWChangeRequest_swigregister = _RWStepAP203.RWStepAP203_RWChangeRequest_swigregister
RWStepAP203_RWChangeRequest_swigregister(RWStepAP203_RWChangeRequest)

class RWStepAP203_RWStartRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWStartRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWStartRequest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWStartRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads startrequest.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_StartRequest

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWStartRequest_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_StartRequest
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWStartRequest_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes startrequest.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_StartRequest

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWStartRequest_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWStartRequest
    __del__ = lambda self: None
RWStepAP203_RWStartRequest_swigregister = _RWStepAP203.RWStepAP203_RWStartRequest_swigregister
RWStepAP203_RWStartRequest_swigregister(RWStepAP203_RWStartRequest)

class RWStepAP203_RWStartWork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWStepAP203_RWStartWork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWStepAP203_RWStartWork, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _RWStepAP203.new_RWStepAP203_RWStartWork(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args) -> "void":
        """
        Reads startwork.

        Parameters
        ----------
        data: StepData_StepReaderData
        num: int
        ach: Interface_Check
        ent: StepAP203_StartWork

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWStartWork_ReadStep(self, *args)


    def Share(self, *args) -> "void":
        """
        Fills data for graph (shared items).

        Parameters
        ----------
        ent: StepAP203_StartWork
        iter: Interface_EntityIterator

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWStartWork_Share(self, *args)


    def WriteStep(self, *args) -> "void":
        """
        Writes startwork.

        Parameters
        ----------
        SW: StepData_StepWriter
        ent: StepAP203_StartWork

        Returns
        -------
        None

        """
        return _RWStepAP203.RWStepAP203_RWStartWork_WriteStep(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWStartWork
    __del__ = lambda self: None
RWStepAP203_RWStartWork_swigregister = _RWStepAP203.RWStepAP203_RWStartWork_swigregister
RWStepAP203_RWStartWork_swigregister(RWStepAP203_RWStartWork)



# This file is compatible with both classic and new-style classes.


