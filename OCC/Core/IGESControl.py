# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
IGESControl module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_igescontrol.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IGESControl
else:
    import _IGESControl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESControl.delete_SwigPyIterator

    def value(self):
        return _IGESControl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESControl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESControl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESControl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESControl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESControl.SwigPyIterator_copy(self)

    def next(self):
        return _IGESControl.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESControl.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESControl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESControl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESControl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESControl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESControl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESControl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESControl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESControl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IGESControl:
_IGESControl.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _IGESControl.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Transfer
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.Interface
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.IGESToBRep
import OCC.Core.IGESData
import OCC.Core.ShapeBuild
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Geom2d
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.XSControl
import OCC.Core.IFSelect

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_IGESControl_ActorWrite_Create():
    return _IGESControl.Handle_IGESControl_ActorWrite_Create()

def Handle_IGESControl_ActorWrite_DownCast(t):
    return _IGESControl.Handle_IGESControl_ActorWrite_DownCast(t)

def Handle_IGESControl_ActorWrite_IsNull(t):
    return _IGESControl.Handle_IGESControl_ActorWrite_IsNull(t)

def Handle_IGESControl_AlgoContainer_Create():
    return _IGESControl.Handle_IGESControl_AlgoContainer_Create()

def Handle_IGESControl_AlgoContainer_DownCast(t):
    return _IGESControl.Handle_IGESControl_AlgoContainer_DownCast(t)

def Handle_IGESControl_AlgoContainer_IsNull(t):
    return _IGESControl.Handle_IGESControl_AlgoContainer_IsNull(t)

def Handle_IGESControl_Controller_Create():
    return _IGESControl.Handle_IGESControl_Controller_Create()

def Handle_IGESControl_Controller_DownCast(t):
    return _IGESControl.Handle_IGESControl_Controller_DownCast(t)

def Handle_IGESControl_Controller_IsNull(t):
    return _IGESControl.Handle_IGESControl_Controller_IsNull(t)

def Handle_IGESControl_IGESBoundary_Create():
    return _IGESControl.Handle_IGESControl_IGESBoundary_Create()

def Handle_IGESControl_IGESBoundary_DownCast(t):
    return _IGESControl.Handle_IGESControl_IGESBoundary_DownCast(t)

def Handle_IGESControl_IGESBoundary_IsNull(t):
    return _IGESControl.Handle_IGESControl_IGESBoundary_IsNull(t)

def Handle_IGESControl_ToolContainer_Create():
    return _IGESControl.Handle_IGESControl_ToolContainer_Create()

def Handle_IGESControl_ToolContainer_DownCast(t):
    return _IGESControl.Handle_IGESControl_ToolContainer_DownCast(t)

def Handle_IGESControl_ToolContainer_IsNull(t):
    return _IGESControl.Handle_IGESControl_ToolContainer_IsNull(t)
class IGESControl_ActorWrite(OCC.Core.Transfer.Transfer_ActorOfFinderProcess):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _IGESControl.IGESControl_ActorWrite_swiginit(self, _IGESControl.new_IGESControl_ActorWrite(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_ActorWrite_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_ActorWrite

# Register IGESControl_ActorWrite in _IGESControl:
_IGESControl.IGESControl_ActorWrite_swigregister(IGESControl_ActorWrite)
class IGESControl_AlgoContainer(OCC.Core.IGESToBRep.IGESToBRep_AlgoContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _IGESControl.IGESControl_AlgoContainer_swiginit(self, _IGESControl.new_IGESControl_AlgoContainer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_AlgoContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_AlgoContainer

# Register IGESControl_AlgoContainer in _IGESControl:
_IGESControl.IGESControl_AlgoContainer_swigregister(IGESControl_AlgoContainer)
class IGESControl_Controller(OCC.Core.XSControl.XSControl_Controller):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        modefnes: bool (optional, default to Standard_False)

        Return
        -------
        None

        Description
        -----------
        Initializes the use of iges norm (the first time) and returns a controller for iges-5.1 if <modefnes> is true, sets it to internal fnes format.

        """
        _IGESControl.IGESControl_Controller_swiginit(self, _IGESControl.new_IGESControl_Controller(*args))

    @staticmethod
    def Init(*args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Standard initialisation. it creates a controller for iges and records it to various names, available to select it later returns true when done, false if could not be done also, it creates and records an adaptor for fnes.

        """
        return _IGESControl.IGESControl_Controller_Init(*args)


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_Controller_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Controller

# Register IGESControl_Controller in _IGESControl:
_IGESControl.IGESControl_Controller_swigregister(IGESControl_Controller)
class IGESControl_IGESBoundary(OCC.Core.IGESToBRep.IGESToBRep_IGESBoundary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates an object and calls inherited constructor.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Return
        -------
        None

        Description
        -----------
        Creates an object and calls inherited constructor.

        """
        _IGESControl.IGESControl_IGESBoundary_swiginit(self, _IGESControl.new_IGESControl_IGESBoundary(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_IGESBoundary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_IGESBoundary

# Register IGESControl_IGESBoundary in _IGESControl:
_IGESControl.IGESControl_IGESBoundary_swigregister(IGESControl_IGESBoundary)
class IGESControl_Reader(OCC.Core.XSControl.XSControl_Reader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a reader from scratch.

        Parameters
        ----------
        WS: XSControl_WorkSession
        scratch: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Creates a reader from an already existing session.

        """
        _IGESControl.IGESControl_Reader_swiginit(self, _IGESControl.new_IGESControl_Reader(*args))

    def GetReadVisible(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _IGESControl.IGESControl_Reader_GetReadVisible(self, *args)

    def IGESModel(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IGESData_IGESModel>

        Description
        -----------
        Returns the model as a igesmodel. it can then be consulted (header, product).

        """
        return _IGESControl.IGESControl_Reader_IGESModel(self, *args)

    def PrintTransferInfo(self, *args):
        r"""

        Parameters
        ----------
        failwarn: IFSelect_PrintFail
        mode: IFSelect_PrintCount

        Return
        -------
        None

        Description
        -----------
        Prints statistics and check list for transfer.

        """
        return _IGESControl.IGESControl_Reader_PrintTransferInfo(self, *args)

    def SetReadVisible(self, *args):
        r"""

        Parameters
        ----------
        ReadRoot: bool

        Return
        -------
        None

        Description
        -----------
        Set the transion of all roots (if thereadonlyvisible is false) or of visible roots (if thereadonlyvisible is true).

        """
        return _IGESControl.IGESControl_Reader_SetReadVisible(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Reader

# Register IGESControl_Reader in _IGESControl:
_IGESControl.IGESControl_Reader_swigregister(IGESControl_Reader)
class IGESControl_ToolContainer(OCC.Core.IGESToBRep.IGESToBRep_ToolContainer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _IGESControl.IGESControl_ToolContainer_swiginit(self, _IGESControl.new_IGESControl_ToolContainer(*args))


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_ToolContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_ToolContainer

# Register IGESControl_ToolContainer in _IGESControl:
_IGESControl.IGESControl_ToolContainer_swigregister(IGESControl_ToolContainer)
class IGESControl_Writer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Creates a writer object with the default unit (millimeters) and write mode (face). igescontrol_writer (const standard_cstring unit, const standard_integer modecr = 0);.

        Parameters
        ----------
        unit: str
        modecr: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Creates a writer with given values for units and for write mode. unit may be any unit that is accepted by the iges standard. by default, it is the millimeter. modecr defines the write mode and may be: - 0: faces (default) - 1: brep.

        Parameters
        ----------
        model: IGESData_IGESModel
        modecr: int (optional, default to 0)

        Return
        -------
        None

        Description
        -----------
        Creates a writer object with the prepared iges model model in write mode. modecr defines the write mode and may be: - 0: faces (default) - 1: brep.

        """
        _IGESControl.IGESControl_Writer_swiginit(self, _IGESControl.new_IGESControl_Writer(*args))

    def AddEntity(self, *args):
        r"""

        Parameters
        ----------
        ent: IGESData_IGESEntity

        Return
        -------
        bool

        Description
        -----------
        Adds an iges entity (and the ones it references) to the model.

        """
        return _IGESControl.IGESControl_Writer_AddEntity(self, *args)

    def AddGeom(self, *args):
        r"""

        Parameters
        ----------
        geom: Standard_Transient

        Return
        -------
        bool

        Description
        -----------
        Translates a geometry (surface or curve) to iges entities and adds them to the model returns true if done, false if geom is neither a surface or a curve suitable for iges or is null.

        """
        return _IGESControl.IGESControl_Writer_AddGeom(self, *args)

    def AddShape(self, *args):
        r"""

        Parameters
        ----------
        sh: TopoDS_Shape
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        bool

        Description
        -----------
        Translates a shape to iges entities and adds them to the model returns true if done, false if shape not suitable for iges or null.

        """
        return _IGESControl.IGESControl_Writer_AddShape(self, *args)

    def ComputeModel(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Computes the entities found in the model, which is ready to be written. this contrasts with the default computation of headers only.

        """
        return _IGESControl.IGESControl_Writer_ComputeModel(self, *args)

    def Model(self, *args):
        r"""
        Return
        -------
        opencascade::handle<IGESData_IGESModel>

        Description
        -----------
        Returns the iges model to be written in output.

        """
        return _IGESControl.IGESControl_Writer_Model(self, *args)

    def SetTransferProcess(self, *args):
        r"""

        Parameters
        ----------
        TP: Transfer_FinderProcess

        Return
        -------
        None

        Description
        -----------
        Returns/sets the transferprocess: it contains final results and if some, check messages.

        """
        return _IGESControl.IGESControl_Writer_SetTransferProcess(self, *args)

    def TransferProcess(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Transfer_FinderProcess>

        Description
        -----------
        No available documentation.

        """
        return _IGESControl.IGESControl_Writer_TransferProcess(self, *args)

    def Write(self, *args):
        r"""

        Parameters
        ----------
        file: str
        fnes: bool (optional, default to Standard_False)

        Return
        -------
        bool

        Description
        -----------
        Prepares and writes an iges model either to an ostream, s or to a file name,cstring. returns true if the operation was performed correctly and false if an error occurred (for instance, if the processor could not create the file).

        """
        return _IGESControl.IGESControl_Writer_Write(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Writer

# Register IGESControl_Writer in _IGESControl:
_IGESControl.IGESControl_Writer_swigregister(IGESControl_Writer)



@deprecated
def IGESControl_Controller_Init(*args):
	return IGESControl_Controller.Init(*args)



