# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IGESControl module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_igescontrol.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESControl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESControl')
    _IGESControl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESControl', [dirname(__file__)])
        except ImportError:
            import _IGESControl
            return _IGESControl
        try:
            _mod = imp.load_module('_IGESControl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESControl = swig_import_helper()
    del swig_import_helper
else:
    import _IGESControl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESControl.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _IGESControl.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IGESControl.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IGESControl.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _IGESControl.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _IGESControl.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _IGESControl.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _IGESControl.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _IGESControl.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _IGESControl.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IGESControl.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _IGESControl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _IGESControl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IGESControl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IGESControl.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IGESControl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _IGESControl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESControl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IGESControl.process_exception(error, method_name, class_name)
process_exception = _IGESControl.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Transfer
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.Interface
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.IGESToBRep
import OCC.Core.IGESData
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.TopTools
import OCC.Core.Geom2d
import OCC.Core.XSControl
import OCC.Core.IFSelect

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_IGESControl_ActorWrite_Create() -> "opencascade::handle< IGESControl_ActorWrite >":
    return _IGESControl.Handle_IGESControl_ActorWrite_Create()
Handle_IGESControl_ActorWrite_Create = _IGESControl.Handle_IGESControl_ActorWrite_Create

def Handle_IGESControl_ActorWrite_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_ActorWrite >":
    return _IGESControl.Handle_IGESControl_ActorWrite_DownCast(t)
Handle_IGESControl_ActorWrite_DownCast = _IGESControl.Handle_IGESControl_ActorWrite_DownCast

def Handle_IGESControl_ActorWrite_IsNull(t: 'opencascade::handle< IGESControl_ActorWrite > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_ActorWrite_IsNull(t)
Handle_IGESControl_ActorWrite_IsNull = _IGESControl.Handle_IGESControl_ActorWrite_IsNull

def Handle_IGESControl_AlgoContainer_Create() -> "opencascade::handle< IGESControl_AlgoContainer >":
    return _IGESControl.Handle_IGESControl_AlgoContainer_Create()
Handle_IGESControl_AlgoContainer_Create = _IGESControl.Handle_IGESControl_AlgoContainer_Create

def Handle_IGESControl_AlgoContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_AlgoContainer >":
    return _IGESControl.Handle_IGESControl_AlgoContainer_DownCast(t)
Handle_IGESControl_AlgoContainer_DownCast = _IGESControl.Handle_IGESControl_AlgoContainer_DownCast

def Handle_IGESControl_AlgoContainer_IsNull(t: 'opencascade::handle< IGESControl_AlgoContainer > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_AlgoContainer_IsNull(t)
Handle_IGESControl_AlgoContainer_IsNull = _IGESControl.Handle_IGESControl_AlgoContainer_IsNull

def Handle_IGESControl_Controller_Create() -> "opencascade::handle< IGESControl_Controller >":
    return _IGESControl.Handle_IGESControl_Controller_Create()
Handle_IGESControl_Controller_Create = _IGESControl.Handle_IGESControl_Controller_Create

def Handle_IGESControl_Controller_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_Controller >":
    return _IGESControl.Handle_IGESControl_Controller_DownCast(t)
Handle_IGESControl_Controller_DownCast = _IGESControl.Handle_IGESControl_Controller_DownCast

def Handle_IGESControl_Controller_IsNull(t: 'opencascade::handle< IGESControl_Controller > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_Controller_IsNull(t)
Handle_IGESControl_Controller_IsNull = _IGESControl.Handle_IGESControl_Controller_IsNull

def Handle_IGESControl_IGESBoundary_Create() -> "opencascade::handle< IGESControl_IGESBoundary >":
    return _IGESControl.Handle_IGESControl_IGESBoundary_Create()
Handle_IGESControl_IGESBoundary_Create = _IGESControl.Handle_IGESControl_IGESBoundary_Create

def Handle_IGESControl_IGESBoundary_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_IGESBoundary >":
    return _IGESControl.Handle_IGESControl_IGESBoundary_DownCast(t)
Handle_IGESControl_IGESBoundary_DownCast = _IGESControl.Handle_IGESControl_IGESBoundary_DownCast

def Handle_IGESControl_IGESBoundary_IsNull(t: 'opencascade::handle< IGESControl_IGESBoundary > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_IGESBoundary_IsNull(t)
Handle_IGESControl_IGESBoundary_IsNull = _IGESControl.Handle_IGESControl_IGESBoundary_IsNull

def Handle_IGESControl_ToolContainer_Create() -> "opencascade::handle< IGESControl_ToolContainer >":
    return _IGESControl.Handle_IGESControl_ToolContainer_Create()
Handle_IGESControl_ToolContainer_Create = _IGESControl.Handle_IGESControl_ToolContainer_Create

def Handle_IGESControl_ToolContainer_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< IGESControl_ToolContainer >":
    return _IGESControl.Handle_IGESControl_ToolContainer_DownCast(t)
Handle_IGESControl_ToolContainer_DownCast = _IGESControl.Handle_IGESControl_ToolContainer_DownCast

def Handle_IGESControl_ToolContainer_IsNull(t: 'opencascade::handle< IGESControl_ToolContainer > const &') -> "bool":
    return _IGESControl.Handle_IGESControl_ToolContainer_IsNull(t)
Handle_IGESControl_ToolContainer_IsNull = _IGESControl.Handle_IGESControl_ToolContainer_IsNull
class IGESControl_ActorWrite(OCC.Core.Transfer.Transfer_ActorOfFinderProcess):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Transfer.Transfer_ActorOfFinderProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESControl_ActorWrite, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Transfer.Transfer_ActorOfFinderProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESControl_ActorWrite, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _IGESControl.new_IGESControl_ActorWrite(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_ActorWrite_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_ActorWrite
    __del__ = lambda self: None
IGESControl_ActorWrite_swigregister = _IGESControl.IGESControl_ActorWrite_swigregister
IGESControl_ActorWrite_swigregister(IGESControl_ActorWrite)

class IGESControl_AlgoContainer(OCC.Core.IGESToBRep.IGESToBRep_AlgoContainer):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IGESToBRep.IGESToBRep_AlgoContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESControl_AlgoContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IGESToBRep.IGESToBRep_AlgoContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESControl_AlgoContainer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _IGESControl.new_IGESControl_AlgoContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_AlgoContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_AlgoContainer
    __del__ = lambda self: None
IGESControl_AlgoContainer_swigregister = _IGESControl.IGESControl_AlgoContainer_swigregister
IGESControl_AlgoContainer_swigregister(IGESControl_AlgoContainer)

class IGESControl_Controller(OCC.Core.XSControl.XSControl_Controller):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XSControl.XSControl_Controller]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESControl_Controller, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XSControl.XSControl_Controller]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESControl_Controller, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Initializes the use of iges norm (the first time) and returns a controller for iges-5.1 if <modefnes> is true, sets it to internal fnes format.

        Parameters
        ----------
        modefnes: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        this = _IGESControl.new_IGESControl_Controller(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(*args) -> "Standard_Boolean":
        """
        Standard initialisation. it creates a controller for iges and records it to various names, available to select it later returns true when done, false if could not be done also, it creates and records an adaptor for fnes.

        Returns
        -------
        bool

        """
        return _IGESControl.IGESControl_Controller_Init(*args)

    Init = staticmethod(Init)


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_Controller_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Controller
    __del__ = lambda self: None
IGESControl_Controller_swigregister = _IGESControl.IGESControl_Controller_swigregister
IGESControl_Controller_swigregister(IGESControl_Controller)

def IGESControl_Controller_Init(*args) -> "Standard_Boolean":
    """
    Standard initialisation. it creates a controller for iges and records it to various names, available to select it later returns true when done, false if could not be done also, it creates and records an adaptor for fnes.

    Returns
    -------
    bool

    """
    return _IGESControl.IGESControl_Controller_Init(*args)

class IGESControl_IGESBoundary(OCC.Core.IGESToBRep.IGESToBRep_IGESBoundary):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IGESToBRep.IGESToBRep_IGESBoundary]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESControl_IGESBoundary, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IGESToBRep.IGESToBRep_IGESBoundary]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESControl_IGESBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an object and calls inherited constuctor.

        Returns
        -------
        None

        Creates an object and calls inherited constuctor.

        Parameters
        ----------
        CS: IGESToBRep_CurveAndSurface

        Returns
        -------
        None

        """
        this = _IGESControl.new_IGESControl_IGESBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_IGESBoundary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_IGESBoundary
    __del__ = lambda self: None
IGESControl_IGESBoundary_swigregister = _IGESControl.IGESControl_IGESBoundary_swigregister
IGESControl_IGESBoundary_swigregister(IGESControl_IGESBoundary)

class IGESControl_Reader(OCC.Core.XSControl.XSControl_Reader):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XSControl.XSControl_Reader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESControl_Reader, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XSControl.XSControl_Reader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESControl_Reader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a reader from scratch.

        Returns
        -------
        None

        Creates a reader from an already existing session.

        Parameters
        ----------
        WS: XSControl_WorkSession
        scratch: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        this = _IGESControl.new_IGESControl_Reader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetReadVisible(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _IGESControl.IGESControl_Reader_GetReadVisible(self, *args)


    def IGESModel(self, *args) -> "opencascade::handle< IGESData_IGESModel >":
        """
        Returns the model as a igesmodel. it can then be consulted (header, product).

        Returns
        -------
        opencascade::handle<IGESData_IGESModel>

        """
        return _IGESControl.IGESControl_Reader_IGESModel(self, *args)


    def PrintTransferInfo(self, *args) -> "void":
        """
        Prints statistics and check list for transfer.

        Parameters
        ----------
        failwarn: IFSelect_PrintFail
        mode: IFSelect_PrintCount

        Returns
        -------
        None

        """
        return _IGESControl.IGESControl_Reader_PrintTransferInfo(self, *args)


    def SetReadVisible(self, *args) -> "void":
        """
        Set the transion of all roots (if thereadonlyvisible is false) or of visible roots (if thereadonlyvisible is true).

        Parameters
        ----------
        ReadRoot: bool

        Returns
        -------
        None

        """
        return _IGESControl.IGESControl_Reader_SetReadVisible(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Reader
    __del__ = lambda self: None
IGESControl_Reader_swigregister = _IGESControl.IGESControl_Reader_swigregister
IGESControl_Reader_swigregister(IGESControl_Reader)

class IGESControl_ToolContainer(OCC.Core.IGESToBRep.IGESToBRep_ToolContainer):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.IGESToBRep.IGESToBRep_ToolContainer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESControl_ToolContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.IGESToBRep.IGESToBRep_ToolContainer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGESControl_ToolContainer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _IGESControl.new_IGESControl_ToolContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_IGESControl_ToolContainer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_ToolContainer
    __del__ = lambda self: None
IGESControl_ToolContainer_swigregister = _IGESControl.IGESControl_ToolContainer_swigregister
IGESControl_ToolContainer_swigregister(IGESControl_ToolContainer)

class IGESControl_Writer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGESControl_Writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGESControl_Writer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates a writer object with the default unit (millimeters) and write mode (face). igescontrol_writer (const standard_cstring unit, const standard_integer modecr = 0);.

        Returns
        -------
        None

        Creates a writer with given values for units and for write mode. unit may be any unit that is accepted by the iges standard. by default, it is the millimeter. modecr defines the write mode and may be: - 0: faces (default) - 1: brep.

        Parameters
        ----------
        unit: char *
        modecr: int,optional
        	default value is 0

        Returns
        -------
        None

        Creates a writer object with the prepared iges model model in write mode. modecr defines the write mode and may be: - 0: faces (default) - 1: brep.

        Parameters
        ----------
        model: IGESData_IGESModel
        modecr: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        this = _IGESControl.new_IGESControl_Writer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddEntity(self, *args) -> "Standard_Boolean":
        """
        Adds an iges entity (and the ones it references) to the model.

        Parameters
        ----------
        ent: IGESData_IGESEntity

        Returns
        -------
        bool

        """
        return _IGESControl.IGESControl_Writer_AddEntity(self, *args)


    def AddGeom(self, *args) -> "Standard_Boolean":
        """
        Translates a geometry (surface or curve) to iges entities and adds them to the model returns true if done, false if geom is neither a surface or a curve suitable for iges or is null.

        Parameters
        ----------
        geom: Standard_Transient

        Returns
        -------
        bool

        """
        return _IGESControl.IGESControl_Writer_AddGeom(self, *args)


    def AddShape(self, *args) -> "Standard_Boolean":
        """
        Translates a shape to iges entities and adds them to the model returns true if done, false if shape not suitable for iges or null.

        Parameters
        ----------
        sh: TopoDS_Shape
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        bool

        """
        return _IGESControl.IGESControl_Writer_AddShape(self, *args)


    def ComputeModel(self, *args) -> "void":
        """
        Computes the entities found in the model, which is ready to be written. this contrasts with the default computation of headers only.

        Returns
        -------
        None

        """
        return _IGESControl.IGESControl_Writer_ComputeModel(self, *args)


    def Model(self, *args) -> "opencascade::handle< IGESData_IGESModel > const &":
        """
        Returns the iges model to be written in output.

        Returns
        -------
        opencascade::handle<IGESData_IGESModel>

        """
        return _IGESControl.IGESControl_Writer_Model(self, *args)


    def SetTransferProcess(self, *args) -> "void":
        """
        Returns/sets the transferprocess : it contains final results and if some, check messages.

        Parameters
        ----------
        TP: Transfer_FinderProcess

        Returns
        -------
        None

        """
        return _IGESControl.IGESControl_Writer_SetTransferProcess(self, *args)


    def TransferProcess(self, *args) -> "opencascade::handle< Transfer_FinderProcess > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Transfer_FinderProcess>

        """
        return _IGESControl.IGESControl_Writer_TransferProcess(self, *args)


    def Write(self, *args) -> "Standard_Boolean":
        """
        Prepares and writes an iges model either to an ostream, s or to a file name,cstring. returns true if the operation was performed correctly and false if an error occurred (for instance, if the processor could not create the file).

        Parameters
        ----------
        file: char *
        fnes: bool,optional
        	default value is Standard_False

        Returns
        -------
        bool

        """
        return _IGESControl.IGESControl_Writer_Write(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IGESControl.delete_IGESControl_Writer
    __del__ = lambda self: None
IGESControl_Writer_swigregister = _IGESControl.IGESControl_Writer_swigregister
IGESControl_Writer_swigregister(IGESControl_Writer)



# This file is compatible with both classic and new-style classes.


