# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepVisual module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepvisual.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepVisual')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepVisual')
    _StepVisual = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepVisual', [dirname(__file__)])
        except ImportError:
            import _StepVisual
            return _StepVisual
        try:
            _mod = imp.load_module('_StepVisual', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepVisual = swig_import_helper()
    del swig_import_helper
else:
    import _StepVisual
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepVisual.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StepVisual.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepVisual.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepVisual.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StepVisual.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StepVisual.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StepVisual.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StepVisual.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StepVisual.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StepVisual.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepVisual.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StepVisual.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StepVisual.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepVisual.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepVisual.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepVisual.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StepVisual.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepVisual.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepVisual.process_exception(error, method_name, class_name)
process_exception = _StepVisual.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.StepShape
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepRepr
import OCC.Core.StepBasic
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *

StepVisual_Null = _StepVisual.StepVisual_Null
StepVisual_copCentral = _StepVisual.StepVisual_copCentral
StepVisual_copParallel = _StepVisual.StepVisual_copParallel
StepVisual_ssNegative = _StepVisual.StepVisual_ssNegative
StepVisual_ssPositive = _StepVisual.StepVisual_ssPositive
StepVisual_ssBoth = _StepVisual.StepVisual_ssBoth
StepVisual_tpUp = _StepVisual.StepVisual_tpUp
StepVisual_tpRight = _StepVisual.StepVisual_tpRight
StepVisual_tpDown = _StepVisual.StepVisual_tpDown
StepVisual_tpLeft = _StepVisual.StepVisual_tpLeft
StepVisual_mtDot = _StepVisual.StepVisual_mtDot
StepVisual_mtX = _StepVisual.StepVisual_mtX
StepVisual_mtPlus = _StepVisual.StepVisual_mtPlus
StepVisual_mtAsterisk = _StepVisual.StepVisual_mtAsterisk
StepVisual_mtRing = _StepVisual.StepVisual_mtRing
StepVisual_mtSquare = _StepVisual.StepVisual_mtSquare
StepVisual_mtTriangle = _StepVisual.StepVisual_mtTriangle
StepVisual_ssmConstantShading = _StepVisual.StepVisual_ssmConstantShading
StepVisual_ssmColourShading = _StepVisual.StepVisual_ssmColourShading
StepVisual_ssmDotShading = _StepVisual.StepVisual_ssmDotShading
StepVisual_ssmNormalShading = _StepVisual.StepVisual_ssmNormalShading


class StepVisual_NullStyle(IntEnum):
	StepVisual_Null = 0
StepVisual_Null = StepVisual_NullStyle.StepVisual_Null

class StepVisual_CentralOrParallel(IntEnum):
	StepVisual_copCentral = 0
	StepVisual_copParallel = 1
StepVisual_copCentral = StepVisual_CentralOrParallel.StepVisual_copCentral
StepVisual_copParallel = StepVisual_CentralOrParallel.StepVisual_copParallel

class StepVisual_SurfaceSide(IntEnum):
	StepVisual_ssNegative = 0
	StepVisual_ssPositive = 1
	StepVisual_ssBoth = 2
StepVisual_ssNegative = StepVisual_SurfaceSide.StepVisual_ssNegative
StepVisual_ssPositive = StepVisual_SurfaceSide.StepVisual_ssPositive
StepVisual_ssBoth = StepVisual_SurfaceSide.StepVisual_ssBoth

class StepVisual_TextPath(IntEnum):
	StepVisual_tpUp = 0
	StepVisual_tpRight = 1
	StepVisual_tpDown = 2
	StepVisual_tpLeft = 3
StepVisual_tpUp = StepVisual_TextPath.StepVisual_tpUp
StepVisual_tpRight = StepVisual_TextPath.StepVisual_tpRight
StepVisual_tpDown = StepVisual_TextPath.StepVisual_tpDown
StepVisual_tpLeft = StepVisual_TextPath.StepVisual_tpLeft

class StepVisual_MarkerType(IntEnum):
	StepVisual_mtDot = 0
	StepVisual_mtX = 1
	StepVisual_mtPlus = 2
	StepVisual_mtAsterisk = 3
	StepVisual_mtRing = 4
	StepVisual_mtSquare = 5
	StepVisual_mtTriangle = 6
StepVisual_mtDot = StepVisual_MarkerType.StepVisual_mtDot
StepVisual_mtX = StepVisual_MarkerType.StepVisual_mtX
StepVisual_mtPlus = StepVisual_MarkerType.StepVisual_mtPlus
StepVisual_mtAsterisk = StepVisual_MarkerType.StepVisual_mtAsterisk
StepVisual_mtRing = StepVisual_MarkerType.StepVisual_mtRing
StepVisual_mtSquare = StepVisual_MarkerType.StepVisual_mtSquare
StepVisual_mtTriangle = StepVisual_MarkerType.StepVisual_mtTriangle

class StepVisual_ShadingSurfaceMethod(IntEnum):
	StepVisual_ssmConstantShading = 0
	StepVisual_ssmColourShading = 1
	StepVisual_ssmDotShading = 2
	StepVisual_ssmNormalShading = 3
StepVisual_ssmConstantShading = StepVisual_ShadingSurfaceMethod.StepVisual_ssmConstantShading
StepVisual_ssmColourShading = StepVisual_ShadingSurfaceMethod.StepVisual_ssmColourShading
StepVisual_ssmDotShading = StepVisual_ShadingSurfaceMethod.StepVisual_ssmDotShading
StepVisual_ssmNormalShading = StepVisual_ShadingSurfaceMethod.StepVisual_ssmNormalShading


def Handle_StepVisual_AnnotationFillArea_Create() -> "opencascade::handle< StepVisual_AnnotationFillArea >":
    return _StepVisual.Handle_StepVisual_AnnotationFillArea_Create()
Handle_StepVisual_AnnotationFillArea_Create = _StepVisual.Handle_StepVisual_AnnotationFillArea_Create

def Handle_StepVisual_AnnotationFillArea_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AnnotationFillArea >":
    return _StepVisual.Handle_StepVisual_AnnotationFillArea_DownCast(t)
Handle_StepVisual_AnnotationFillArea_DownCast = _StepVisual.Handle_StepVisual_AnnotationFillArea_DownCast

def Handle_StepVisual_AnnotationFillArea_IsNull(t: 'opencascade::handle< StepVisual_AnnotationFillArea > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AnnotationFillArea_IsNull(t)
Handle_StepVisual_AnnotationFillArea_IsNull = _StepVisual.Handle_StepVisual_AnnotationFillArea_IsNull

def Handle_StepVisual_AnnotationText_Create() -> "opencascade::handle< StepVisual_AnnotationText >":
    return _StepVisual.Handle_StepVisual_AnnotationText_Create()
Handle_StepVisual_AnnotationText_Create = _StepVisual.Handle_StepVisual_AnnotationText_Create

def Handle_StepVisual_AnnotationText_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AnnotationText >":
    return _StepVisual.Handle_StepVisual_AnnotationText_DownCast(t)
Handle_StepVisual_AnnotationText_DownCast = _StepVisual.Handle_StepVisual_AnnotationText_DownCast

def Handle_StepVisual_AnnotationText_IsNull(t: 'opencascade::handle< StepVisual_AnnotationText > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AnnotationText_IsNull(t)
Handle_StepVisual_AnnotationText_IsNull = _StepVisual.Handle_StepVisual_AnnotationText_IsNull

def Handle_StepVisual_AreaInSet_Create() -> "opencascade::handle< StepVisual_AreaInSet >":
    return _StepVisual.Handle_StepVisual_AreaInSet_Create()
Handle_StepVisual_AreaInSet_Create = _StepVisual.Handle_StepVisual_AreaInSet_Create

def Handle_StepVisual_AreaInSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AreaInSet >":
    return _StepVisual.Handle_StepVisual_AreaInSet_DownCast(t)
Handle_StepVisual_AreaInSet_DownCast = _StepVisual.Handle_StepVisual_AreaInSet_DownCast

def Handle_StepVisual_AreaInSet_IsNull(t: 'opencascade::handle< StepVisual_AreaInSet > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AreaInSet_IsNull(t)
Handle_StepVisual_AreaInSet_IsNull = _StepVisual.Handle_StepVisual_AreaInSet_IsNull

def Handle_StepVisual_CameraImage_Create() -> "opencascade::handle< StepVisual_CameraImage >":
    return _StepVisual.Handle_StepVisual_CameraImage_Create()
Handle_StepVisual_CameraImage_Create = _StepVisual.Handle_StepVisual_CameraImage_Create

def Handle_StepVisual_CameraImage_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraImage >":
    return _StepVisual.Handle_StepVisual_CameraImage_DownCast(t)
Handle_StepVisual_CameraImage_DownCast = _StepVisual.Handle_StepVisual_CameraImage_DownCast

def Handle_StepVisual_CameraImage_IsNull(t: 'opencascade::handle< StepVisual_CameraImage > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraImage_IsNull(t)
Handle_StepVisual_CameraImage_IsNull = _StepVisual.Handle_StepVisual_CameraImage_IsNull

def Handle_StepVisual_CameraModel_Create() -> "opencascade::handle< StepVisual_CameraModel >":
    return _StepVisual.Handle_StepVisual_CameraModel_Create()
Handle_StepVisual_CameraModel_Create = _StepVisual.Handle_StepVisual_CameraModel_Create

def Handle_StepVisual_CameraModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraModel >":
    return _StepVisual.Handle_StepVisual_CameraModel_DownCast(t)
Handle_StepVisual_CameraModel_DownCast = _StepVisual.Handle_StepVisual_CameraModel_DownCast

def Handle_StepVisual_CameraModel_IsNull(t: 'opencascade::handle< StepVisual_CameraModel > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraModel_IsNull(t)
Handle_StepVisual_CameraModel_IsNull = _StepVisual.Handle_StepVisual_CameraModel_IsNull

def Handle_StepVisual_CameraModelD3MultiClippingIntersection_Create() -> "opencascade::handle< StepVisual_CameraModelD3MultiClippingIntersection >":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection_Create()
Handle_StepVisual_CameraModelD3MultiClippingIntersection_Create = _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection_Create

def Handle_StepVisual_CameraModelD3MultiClippingIntersection_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraModelD3MultiClippingIntersection >":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection_DownCast(t)
Handle_StepVisual_CameraModelD3MultiClippingIntersection_DownCast = _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection_DownCast

def Handle_StepVisual_CameraModelD3MultiClippingIntersection_IsNull(t: 'opencascade::handle< StepVisual_CameraModelD3MultiClippingIntersection > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection_IsNull(t)
Handle_StepVisual_CameraModelD3MultiClippingIntersection_IsNull = _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection_IsNull

def Handle_StepVisual_CameraModelD3MultiClippingUnion_Create() -> "opencascade::handle< StepVisual_CameraModelD3MultiClippingUnion >":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion_Create()
Handle_StepVisual_CameraModelD3MultiClippingUnion_Create = _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion_Create

def Handle_StepVisual_CameraModelD3MultiClippingUnion_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraModelD3MultiClippingUnion >":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion_DownCast(t)
Handle_StepVisual_CameraModelD3MultiClippingUnion_DownCast = _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion_DownCast

def Handle_StepVisual_CameraModelD3MultiClippingUnion_IsNull(t: 'opencascade::handle< StepVisual_CameraModelD3MultiClippingUnion > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion_IsNull(t)
Handle_StepVisual_CameraModelD3MultiClippingUnion_IsNull = _StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion_IsNull

def Handle_StepVisual_CameraUsage_Create() -> "opencascade::handle< StepVisual_CameraUsage >":
    return _StepVisual.Handle_StepVisual_CameraUsage_Create()
Handle_StepVisual_CameraUsage_Create = _StepVisual.Handle_StepVisual_CameraUsage_Create

def Handle_StepVisual_CameraUsage_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraUsage >":
    return _StepVisual.Handle_StepVisual_CameraUsage_DownCast(t)
Handle_StepVisual_CameraUsage_DownCast = _StepVisual.Handle_StepVisual_CameraUsage_DownCast

def Handle_StepVisual_CameraUsage_IsNull(t: 'opencascade::handle< StepVisual_CameraUsage > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraUsage_IsNull(t)
Handle_StepVisual_CameraUsage_IsNull = _StepVisual.Handle_StepVisual_CameraUsage_IsNull

def Handle_StepVisual_Colour_Create() -> "opencascade::handle< StepVisual_Colour >":
    return _StepVisual.Handle_StepVisual_Colour_Create()
Handle_StepVisual_Colour_Create = _StepVisual.Handle_StepVisual_Colour_Create

def Handle_StepVisual_Colour_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_Colour >":
    return _StepVisual.Handle_StepVisual_Colour_DownCast(t)
Handle_StepVisual_Colour_DownCast = _StepVisual.Handle_StepVisual_Colour_DownCast

def Handle_StepVisual_Colour_IsNull(t: 'opencascade::handle< StepVisual_Colour > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_Colour_IsNull(t)
Handle_StepVisual_Colour_IsNull = _StepVisual.Handle_StepVisual_Colour_IsNull

def Handle_StepVisual_CompositeText_Create() -> "opencascade::handle< StepVisual_CompositeText >":
    return _StepVisual.Handle_StepVisual_CompositeText_Create()
Handle_StepVisual_CompositeText_Create = _StepVisual.Handle_StepVisual_CompositeText_Create

def Handle_StepVisual_CompositeText_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CompositeText >":
    return _StepVisual.Handle_StepVisual_CompositeText_DownCast(t)
Handle_StepVisual_CompositeText_DownCast = _StepVisual.Handle_StepVisual_CompositeText_DownCast

def Handle_StepVisual_CompositeText_IsNull(t: 'opencascade::handle< StepVisual_CompositeText > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CompositeText_IsNull(t)
Handle_StepVisual_CompositeText_IsNull = _StepVisual.Handle_StepVisual_CompositeText_IsNull

def Handle_StepVisual_CurveStyle_Create() -> "opencascade::handle< StepVisual_CurveStyle >":
    return _StepVisual.Handle_StepVisual_CurveStyle_Create()
Handle_StepVisual_CurveStyle_Create = _StepVisual.Handle_StepVisual_CurveStyle_Create

def Handle_StepVisual_CurveStyle_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CurveStyle >":
    return _StepVisual.Handle_StepVisual_CurveStyle_DownCast(t)
Handle_StepVisual_CurveStyle_DownCast = _StepVisual.Handle_StepVisual_CurveStyle_DownCast

def Handle_StepVisual_CurveStyle_IsNull(t: 'opencascade::handle< StepVisual_CurveStyle > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CurveStyle_IsNull(t)
Handle_StepVisual_CurveStyle_IsNull = _StepVisual.Handle_StepVisual_CurveStyle_IsNull

def Handle_StepVisual_CurveStyleFont_Create() -> "opencascade::handle< StepVisual_CurveStyleFont >":
    return _StepVisual.Handle_StepVisual_CurveStyleFont_Create()
Handle_StepVisual_CurveStyleFont_Create = _StepVisual.Handle_StepVisual_CurveStyleFont_Create

def Handle_StepVisual_CurveStyleFont_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CurveStyleFont >":
    return _StepVisual.Handle_StepVisual_CurveStyleFont_DownCast(t)
Handle_StepVisual_CurveStyleFont_DownCast = _StepVisual.Handle_StepVisual_CurveStyleFont_DownCast

def Handle_StepVisual_CurveStyleFont_IsNull(t: 'opencascade::handle< StepVisual_CurveStyleFont > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CurveStyleFont_IsNull(t)
Handle_StepVisual_CurveStyleFont_IsNull = _StepVisual.Handle_StepVisual_CurveStyleFont_IsNull

def Handle_StepVisual_CurveStyleFontPattern_Create() -> "opencascade::handle< StepVisual_CurveStyleFontPattern >":
    return _StepVisual.Handle_StepVisual_CurveStyleFontPattern_Create()
Handle_StepVisual_CurveStyleFontPattern_Create = _StepVisual.Handle_StepVisual_CurveStyleFontPattern_Create

def Handle_StepVisual_CurveStyleFontPattern_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CurveStyleFontPattern >":
    return _StepVisual.Handle_StepVisual_CurveStyleFontPattern_DownCast(t)
Handle_StepVisual_CurveStyleFontPattern_DownCast = _StepVisual.Handle_StepVisual_CurveStyleFontPattern_DownCast

def Handle_StepVisual_CurveStyleFontPattern_IsNull(t: 'opencascade::handle< StepVisual_CurveStyleFontPattern > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CurveStyleFontPattern_IsNull(t)
Handle_StepVisual_CurveStyleFontPattern_IsNull = _StepVisual.Handle_StepVisual_CurveStyleFontPattern_IsNull

def Handle_StepVisual_DraughtingCallout_Create() -> "opencascade::handle< StepVisual_DraughtingCallout >":
    return _StepVisual.Handle_StepVisual_DraughtingCallout_Create()
Handle_StepVisual_DraughtingCallout_Create = _StepVisual.Handle_StepVisual_DraughtingCallout_Create

def Handle_StepVisual_DraughtingCallout_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_DraughtingCallout >":
    return _StepVisual.Handle_StepVisual_DraughtingCallout_DownCast(t)
Handle_StepVisual_DraughtingCallout_DownCast = _StepVisual.Handle_StepVisual_DraughtingCallout_DownCast

def Handle_StepVisual_DraughtingCallout_IsNull(t: 'opencascade::handle< StepVisual_DraughtingCallout > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_DraughtingCallout_IsNull(t)
Handle_StepVisual_DraughtingCallout_IsNull = _StepVisual.Handle_StepVisual_DraughtingCallout_IsNull

def Handle_StepVisual_DraughtingModel_Create() -> "opencascade::handle< StepVisual_DraughtingModel >":
    return _StepVisual.Handle_StepVisual_DraughtingModel_Create()
Handle_StepVisual_DraughtingModel_Create = _StepVisual.Handle_StepVisual_DraughtingModel_Create

def Handle_StepVisual_DraughtingModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_DraughtingModel >":
    return _StepVisual.Handle_StepVisual_DraughtingModel_DownCast(t)
Handle_StepVisual_DraughtingModel_DownCast = _StepVisual.Handle_StepVisual_DraughtingModel_DownCast

def Handle_StepVisual_DraughtingModel_IsNull(t: 'opencascade::handle< StepVisual_DraughtingModel > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_DraughtingModel_IsNull(t)
Handle_StepVisual_DraughtingModel_IsNull = _StepVisual.Handle_StepVisual_DraughtingModel_IsNull

def Handle_StepVisual_ExternallyDefinedCurveFont_Create() -> "opencascade::handle< StepVisual_ExternallyDefinedCurveFont >":
    return _StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont_Create()
Handle_StepVisual_ExternallyDefinedCurveFont_Create = _StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont_Create

def Handle_StepVisual_ExternallyDefinedCurveFont_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_ExternallyDefinedCurveFont >":
    return _StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont_DownCast(t)
Handle_StepVisual_ExternallyDefinedCurveFont_DownCast = _StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont_DownCast

def Handle_StepVisual_ExternallyDefinedCurveFont_IsNull(t: 'opencascade::handle< StepVisual_ExternallyDefinedCurveFont > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont_IsNull(t)
Handle_StepVisual_ExternallyDefinedCurveFont_IsNull = _StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont_IsNull

def Handle_StepVisual_ExternallyDefinedTextFont_Create() -> "opencascade::handle< StepVisual_ExternallyDefinedTextFont >":
    return _StepVisual.Handle_StepVisual_ExternallyDefinedTextFont_Create()
Handle_StepVisual_ExternallyDefinedTextFont_Create = _StepVisual.Handle_StepVisual_ExternallyDefinedTextFont_Create

def Handle_StepVisual_ExternallyDefinedTextFont_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_ExternallyDefinedTextFont >":
    return _StepVisual.Handle_StepVisual_ExternallyDefinedTextFont_DownCast(t)
Handle_StepVisual_ExternallyDefinedTextFont_DownCast = _StepVisual.Handle_StepVisual_ExternallyDefinedTextFont_DownCast

def Handle_StepVisual_ExternallyDefinedTextFont_IsNull(t: 'opencascade::handle< StepVisual_ExternallyDefinedTextFont > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_ExternallyDefinedTextFont_IsNull(t)
Handle_StepVisual_ExternallyDefinedTextFont_IsNull = _StepVisual.Handle_StepVisual_ExternallyDefinedTextFont_IsNull

def Handle_StepVisual_FillAreaStyle_Create() -> "opencascade::handle< StepVisual_FillAreaStyle >":
    return _StepVisual.Handle_StepVisual_FillAreaStyle_Create()
Handle_StepVisual_FillAreaStyle_Create = _StepVisual.Handle_StepVisual_FillAreaStyle_Create

def Handle_StepVisual_FillAreaStyle_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_FillAreaStyle >":
    return _StepVisual.Handle_StepVisual_FillAreaStyle_DownCast(t)
Handle_StepVisual_FillAreaStyle_DownCast = _StepVisual.Handle_StepVisual_FillAreaStyle_DownCast

def Handle_StepVisual_FillAreaStyle_IsNull(t: 'opencascade::handle< StepVisual_FillAreaStyle > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_FillAreaStyle_IsNull(t)
Handle_StepVisual_FillAreaStyle_IsNull = _StepVisual.Handle_StepVisual_FillAreaStyle_IsNull

def Handle_StepVisual_FillAreaStyleColour_Create() -> "opencascade::handle< StepVisual_FillAreaStyleColour >":
    return _StepVisual.Handle_StepVisual_FillAreaStyleColour_Create()
Handle_StepVisual_FillAreaStyleColour_Create = _StepVisual.Handle_StepVisual_FillAreaStyleColour_Create

def Handle_StepVisual_FillAreaStyleColour_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_FillAreaStyleColour >":
    return _StepVisual.Handle_StepVisual_FillAreaStyleColour_DownCast(t)
Handle_StepVisual_FillAreaStyleColour_DownCast = _StepVisual.Handle_StepVisual_FillAreaStyleColour_DownCast

def Handle_StepVisual_FillAreaStyleColour_IsNull(t: 'opencascade::handle< StepVisual_FillAreaStyleColour > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_FillAreaStyleColour_IsNull(t)
Handle_StepVisual_FillAreaStyleColour_IsNull = _StepVisual.Handle_StepVisual_FillAreaStyleColour_IsNull

def Handle_StepVisual_Invisibility_Create() -> "opencascade::handle< StepVisual_Invisibility >":
    return _StepVisual.Handle_StepVisual_Invisibility_Create()
Handle_StepVisual_Invisibility_Create = _StepVisual.Handle_StepVisual_Invisibility_Create

def Handle_StepVisual_Invisibility_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_Invisibility >":
    return _StepVisual.Handle_StepVisual_Invisibility_DownCast(t)
Handle_StepVisual_Invisibility_DownCast = _StepVisual.Handle_StepVisual_Invisibility_DownCast

def Handle_StepVisual_Invisibility_IsNull(t: 'opencascade::handle< StepVisual_Invisibility > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_Invisibility_IsNull(t)
Handle_StepVisual_Invisibility_IsNull = _StepVisual.Handle_StepVisual_Invisibility_IsNull

def Handle_StepVisual_MarkerMember_Create() -> "opencascade::handle< StepVisual_MarkerMember >":
    return _StepVisual.Handle_StepVisual_MarkerMember_Create()
Handle_StepVisual_MarkerMember_Create = _StepVisual.Handle_StepVisual_MarkerMember_Create

def Handle_StepVisual_MarkerMember_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_MarkerMember >":
    return _StepVisual.Handle_StepVisual_MarkerMember_DownCast(t)
Handle_StepVisual_MarkerMember_DownCast = _StepVisual.Handle_StepVisual_MarkerMember_DownCast

def Handle_StepVisual_MarkerMember_IsNull(t: 'opencascade::handle< StepVisual_MarkerMember > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_MarkerMember_IsNull(t)
Handle_StepVisual_MarkerMember_IsNull = _StepVisual.Handle_StepVisual_MarkerMember_IsNull

def Handle_StepVisual_NullStyleMember_Create() -> "opencascade::handle< StepVisual_NullStyleMember >":
    return _StepVisual.Handle_StepVisual_NullStyleMember_Create()
Handle_StepVisual_NullStyleMember_Create = _StepVisual.Handle_StepVisual_NullStyleMember_Create

def Handle_StepVisual_NullStyleMember_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_NullStyleMember >":
    return _StepVisual.Handle_StepVisual_NullStyleMember_DownCast(t)
Handle_StepVisual_NullStyleMember_DownCast = _StepVisual.Handle_StepVisual_NullStyleMember_DownCast

def Handle_StepVisual_NullStyleMember_IsNull(t: 'opencascade::handle< StepVisual_NullStyleMember > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_NullStyleMember_IsNull(t)
Handle_StepVisual_NullStyleMember_IsNull = _StepVisual.Handle_StepVisual_NullStyleMember_IsNull

def Handle_StepVisual_PlanarExtent_Create() -> "opencascade::handle< StepVisual_PlanarExtent >":
    return _StepVisual.Handle_StepVisual_PlanarExtent_Create()
Handle_StepVisual_PlanarExtent_Create = _StepVisual.Handle_StepVisual_PlanarExtent_Create

def Handle_StepVisual_PlanarExtent_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PlanarExtent >":
    return _StepVisual.Handle_StepVisual_PlanarExtent_DownCast(t)
Handle_StepVisual_PlanarExtent_DownCast = _StepVisual.Handle_StepVisual_PlanarExtent_DownCast

def Handle_StepVisual_PlanarExtent_IsNull(t: 'opencascade::handle< StepVisual_PlanarExtent > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PlanarExtent_IsNull(t)
Handle_StepVisual_PlanarExtent_IsNull = _StepVisual.Handle_StepVisual_PlanarExtent_IsNull

def Handle_StepVisual_PointStyle_Create() -> "opencascade::handle< StepVisual_PointStyle >":
    return _StepVisual.Handle_StepVisual_PointStyle_Create()
Handle_StepVisual_PointStyle_Create = _StepVisual.Handle_StepVisual_PointStyle_Create

def Handle_StepVisual_PointStyle_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PointStyle >":
    return _StepVisual.Handle_StepVisual_PointStyle_DownCast(t)
Handle_StepVisual_PointStyle_DownCast = _StepVisual.Handle_StepVisual_PointStyle_DownCast

def Handle_StepVisual_PointStyle_IsNull(t: 'opencascade::handle< StepVisual_PointStyle > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PointStyle_IsNull(t)
Handle_StepVisual_PointStyle_IsNull = _StepVisual.Handle_StepVisual_PointStyle_IsNull

def Handle_StepVisual_PreDefinedItem_Create() -> "opencascade::handle< StepVisual_PreDefinedItem >":
    return _StepVisual.Handle_StepVisual_PreDefinedItem_Create()
Handle_StepVisual_PreDefinedItem_Create = _StepVisual.Handle_StepVisual_PreDefinedItem_Create

def Handle_StepVisual_PreDefinedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PreDefinedItem >":
    return _StepVisual.Handle_StepVisual_PreDefinedItem_DownCast(t)
Handle_StepVisual_PreDefinedItem_DownCast = _StepVisual.Handle_StepVisual_PreDefinedItem_DownCast

def Handle_StepVisual_PreDefinedItem_IsNull(t: 'opencascade::handle< StepVisual_PreDefinedItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PreDefinedItem_IsNull(t)
Handle_StepVisual_PreDefinedItem_IsNull = _StepVisual.Handle_StepVisual_PreDefinedItem_IsNull

def Handle_StepVisual_PresentationLayerAssignment_Create() -> "opencascade::handle< StepVisual_PresentationLayerAssignment >":
    return _StepVisual.Handle_StepVisual_PresentationLayerAssignment_Create()
Handle_StepVisual_PresentationLayerAssignment_Create = _StepVisual.Handle_StepVisual_PresentationLayerAssignment_Create

def Handle_StepVisual_PresentationLayerAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationLayerAssignment >":
    return _StepVisual.Handle_StepVisual_PresentationLayerAssignment_DownCast(t)
Handle_StepVisual_PresentationLayerAssignment_DownCast = _StepVisual.Handle_StepVisual_PresentationLayerAssignment_DownCast

def Handle_StepVisual_PresentationLayerAssignment_IsNull(t: 'opencascade::handle< StepVisual_PresentationLayerAssignment > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationLayerAssignment_IsNull(t)
Handle_StepVisual_PresentationLayerAssignment_IsNull = _StepVisual.Handle_StepVisual_PresentationLayerAssignment_IsNull

def Handle_StepVisual_PresentationLayerUsage_Create() -> "opencascade::handle< StepVisual_PresentationLayerUsage >":
    return _StepVisual.Handle_StepVisual_PresentationLayerUsage_Create()
Handle_StepVisual_PresentationLayerUsage_Create = _StepVisual.Handle_StepVisual_PresentationLayerUsage_Create

def Handle_StepVisual_PresentationLayerUsage_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationLayerUsage >":
    return _StepVisual.Handle_StepVisual_PresentationLayerUsage_DownCast(t)
Handle_StepVisual_PresentationLayerUsage_DownCast = _StepVisual.Handle_StepVisual_PresentationLayerUsage_DownCast

def Handle_StepVisual_PresentationLayerUsage_IsNull(t: 'opencascade::handle< StepVisual_PresentationLayerUsage > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationLayerUsage_IsNull(t)
Handle_StepVisual_PresentationLayerUsage_IsNull = _StepVisual.Handle_StepVisual_PresentationLayerUsage_IsNull

def Handle_StepVisual_PresentationRepresentation_Create() -> "opencascade::handle< StepVisual_PresentationRepresentation >":
    return _StepVisual.Handle_StepVisual_PresentationRepresentation_Create()
Handle_StepVisual_PresentationRepresentation_Create = _StepVisual.Handle_StepVisual_PresentationRepresentation_Create

def Handle_StepVisual_PresentationRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationRepresentation >":
    return _StepVisual.Handle_StepVisual_PresentationRepresentation_DownCast(t)
Handle_StepVisual_PresentationRepresentation_DownCast = _StepVisual.Handle_StepVisual_PresentationRepresentation_DownCast

def Handle_StepVisual_PresentationRepresentation_IsNull(t: 'opencascade::handle< StepVisual_PresentationRepresentation > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationRepresentation_IsNull(t)
Handle_StepVisual_PresentationRepresentation_IsNull = _StepVisual.Handle_StepVisual_PresentationRepresentation_IsNull

def Handle_StepVisual_PresentationSet_Create() -> "opencascade::handle< StepVisual_PresentationSet >":
    return _StepVisual.Handle_StepVisual_PresentationSet_Create()
Handle_StepVisual_PresentationSet_Create = _StepVisual.Handle_StepVisual_PresentationSet_Create

def Handle_StepVisual_PresentationSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationSet >":
    return _StepVisual.Handle_StepVisual_PresentationSet_DownCast(t)
Handle_StepVisual_PresentationSet_DownCast = _StepVisual.Handle_StepVisual_PresentationSet_DownCast

def Handle_StepVisual_PresentationSet_IsNull(t: 'opencascade::handle< StepVisual_PresentationSet > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationSet_IsNull(t)
Handle_StepVisual_PresentationSet_IsNull = _StepVisual.Handle_StepVisual_PresentationSet_IsNull

def Handle_StepVisual_PresentationSize_Create() -> "opencascade::handle< StepVisual_PresentationSize >":
    return _StepVisual.Handle_StepVisual_PresentationSize_Create()
Handle_StepVisual_PresentationSize_Create = _StepVisual.Handle_StepVisual_PresentationSize_Create

def Handle_StepVisual_PresentationSize_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationSize >":
    return _StepVisual.Handle_StepVisual_PresentationSize_DownCast(t)
Handle_StepVisual_PresentationSize_DownCast = _StepVisual.Handle_StepVisual_PresentationSize_DownCast

def Handle_StepVisual_PresentationSize_IsNull(t: 'opencascade::handle< StepVisual_PresentationSize > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationSize_IsNull(t)
Handle_StepVisual_PresentationSize_IsNull = _StepVisual.Handle_StepVisual_PresentationSize_IsNull

def Handle_StepVisual_PresentationStyleAssignment_Create() -> "opencascade::handle< StepVisual_PresentationStyleAssignment >":
    return _StepVisual.Handle_StepVisual_PresentationStyleAssignment_Create()
Handle_StepVisual_PresentationStyleAssignment_Create = _StepVisual.Handle_StepVisual_PresentationStyleAssignment_Create

def Handle_StepVisual_PresentationStyleAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationStyleAssignment >":
    return _StepVisual.Handle_StepVisual_PresentationStyleAssignment_DownCast(t)
Handle_StepVisual_PresentationStyleAssignment_DownCast = _StepVisual.Handle_StepVisual_PresentationStyleAssignment_DownCast

def Handle_StepVisual_PresentationStyleAssignment_IsNull(t: 'opencascade::handle< StepVisual_PresentationStyleAssignment > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationStyleAssignment_IsNull(t)
Handle_StepVisual_PresentationStyleAssignment_IsNull = _StepVisual.Handle_StepVisual_PresentationStyleAssignment_IsNull

def Handle_StepVisual_PresentedItem_Create() -> "opencascade::handle< StepVisual_PresentedItem >":
    return _StepVisual.Handle_StepVisual_PresentedItem_Create()
Handle_StepVisual_PresentedItem_Create = _StepVisual.Handle_StepVisual_PresentedItem_Create

def Handle_StepVisual_PresentedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentedItem >":
    return _StepVisual.Handle_StepVisual_PresentedItem_DownCast(t)
Handle_StepVisual_PresentedItem_DownCast = _StepVisual.Handle_StepVisual_PresentedItem_DownCast

def Handle_StepVisual_PresentedItem_IsNull(t: 'opencascade::handle< StepVisual_PresentedItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentedItem_IsNull(t)
Handle_StepVisual_PresentedItem_IsNull = _StepVisual.Handle_StepVisual_PresentedItem_IsNull

def Handle_StepVisual_PresentedItemRepresentation_Create() -> "opencascade::handle< StepVisual_PresentedItemRepresentation >":
    return _StepVisual.Handle_StepVisual_PresentedItemRepresentation_Create()
Handle_StepVisual_PresentedItemRepresentation_Create = _StepVisual.Handle_StepVisual_PresentedItemRepresentation_Create

def Handle_StepVisual_PresentedItemRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentedItemRepresentation >":
    return _StepVisual.Handle_StepVisual_PresentedItemRepresentation_DownCast(t)
Handle_StepVisual_PresentedItemRepresentation_DownCast = _StepVisual.Handle_StepVisual_PresentedItemRepresentation_DownCast

def Handle_StepVisual_PresentedItemRepresentation_IsNull(t: 'opencascade::handle< StepVisual_PresentedItemRepresentation > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentedItemRepresentation_IsNull(t)
Handle_StepVisual_PresentedItemRepresentation_IsNull = _StepVisual.Handle_StepVisual_PresentedItemRepresentation_IsNull

def Handle_StepVisual_StyledItem_Create() -> "opencascade::handle< StepVisual_StyledItem >":
    return _StepVisual.Handle_StepVisual_StyledItem_Create()
Handle_StepVisual_StyledItem_Create = _StepVisual.Handle_StepVisual_StyledItem_Create

def Handle_StepVisual_StyledItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_StyledItem >":
    return _StepVisual.Handle_StepVisual_StyledItem_DownCast(t)
Handle_StepVisual_StyledItem_DownCast = _StepVisual.Handle_StepVisual_StyledItem_DownCast

def Handle_StepVisual_StyledItem_IsNull(t: 'opencascade::handle< StepVisual_StyledItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_StyledItem_IsNull(t)
Handle_StepVisual_StyledItem_IsNull = _StepVisual.Handle_StepVisual_StyledItem_IsNull

def Handle_StepVisual_SurfaceSideStyle_Create() -> "opencascade::handle< StepVisual_SurfaceSideStyle >":
    return _StepVisual.Handle_StepVisual_SurfaceSideStyle_Create()
Handle_StepVisual_SurfaceSideStyle_Create = _StepVisual.Handle_StepVisual_SurfaceSideStyle_Create

def Handle_StepVisual_SurfaceSideStyle_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceSideStyle >":
    return _StepVisual.Handle_StepVisual_SurfaceSideStyle_DownCast(t)
Handle_StepVisual_SurfaceSideStyle_DownCast = _StepVisual.Handle_StepVisual_SurfaceSideStyle_DownCast

def Handle_StepVisual_SurfaceSideStyle_IsNull(t: 'opencascade::handle< StepVisual_SurfaceSideStyle > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceSideStyle_IsNull(t)
Handle_StepVisual_SurfaceSideStyle_IsNull = _StepVisual.Handle_StepVisual_SurfaceSideStyle_IsNull

def Handle_StepVisual_SurfaceStyleBoundary_Create() -> "opencascade::handle< StepVisual_SurfaceStyleBoundary >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleBoundary_Create()
Handle_StepVisual_SurfaceStyleBoundary_Create = _StepVisual.Handle_StepVisual_SurfaceStyleBoundary_Create

def Handle_StepVisual_SurfaceStyleBoundary_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleBoundary >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleBoundary_DownCast(t)
Handle_StepVisual_SurfaceStyleBoundary_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleBoundary_DownCast

def Handle_StepVisual_SurfaceStyleBoundary_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleBoundary > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleBoundary_IsNull(t)
Handle_StepVisual_SurfaceStyleBoundary_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleBoundary_IsNull

def Handle_StepVisual_SurfaceStyleControlGrid_Create() -> "opencascade::handle< StepVisual_SurfaceStyleControlGrid >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleControlGrid_Create()
Handle_StepVisual_SurfaceStyleControlGrid_Create = _StepVisual.Handle_StepVisual_SurfaceStyleControlGrid_Create

def Handle_StepVisual_SurfaceStyleControlGrid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleControlGrid >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleControlGrid_DownCast(t)
Handle_StepVisual_SurfaceStyleControlGrid_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleControlGrid_DownCast

def Handle_StepVisual_SurfaceStyleControlGrid_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleControlGrid > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleControlGrid_IsNull(t)
Handle_StepVisual_SurfaceStyleControlGrid_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleControlGrid_IsNull

def Handle_StepVisual_SurfaceStyleFillArea_Create() -> "opencascade::handle< StepVisual_SurfaceStyleFillArea >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleFillArea_Create()
Handle_StepVisual_SurfaceStyleFillArea_Create = _StepVisual.Handle_StepVisual_SurfaceStyleFillArea_Create

def Handle_StepVisual_SurfaceStyleFillArea_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleFillArea >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleFillArea_DownCast(t)
Handle_StepVisual_SurfaceStyleFillArea_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleFillArea_DownCast

def Handle_StepVisual_SurfaceStyleFillArea_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleFillArea > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleFillArea_IsNull(t)
Handle_StepVisual_SurfaceStyleFillArea_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleFillArea_IsNull

def Handle_StepVisual_SurfaceStyleParameterLine_Create() -> "opencascade::handle< StepVisual_SurfaceStyleParameterLine >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleParameterLine_Create()
Handle_StepVisual_SurfaceStyleParameterLine_Create = _StepVisual.Handle_StepVisual_SurfaceStyleParameterLine_Create

def Handle_StepVisual_SurfaceStyleParameterLine_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleParameterLine >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleParameterLine_DownCast(t)
Handle_StepVisual_SurfaceStyleParameterLine_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleParameterLine_DownCast

def Handle_StepVisual_SurfaceStyleParameterLine_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleParameterLine > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleParameterLine_IsNull(t)
Handle_StepVisual_SurfaceStyleParameterLine_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleParameterLine_IsNull

def Handle_StepVisual_SurfaceStyleReflectanceAmbient_Create() -> "opencascade::handle< StepVisual_SurfaceStyleReflectanceAmbient >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleReflectanceAmbient_Create()
Handle_StepVisual_SurfaceStyleReflectanceAmbient_Create = _StepVisual.Handle_StepVisual_SurfaceStyleReflectanceAmbient_Create

def Handle_StepVisual_SurfaceStyleReflectanceAmbient_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleReflectanceAmbient >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleReflectanceAmbient_DownCast(t)
Handle_StepVisual_SurfaceStyleReflectanceAmbient_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleReflectanceAmbient_DownCast

def Handle_StepVisual_SurfaceStyleReflectanceAmbient_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleReflectanceAmbient > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleReflectanceAmbient_IsNull(t)
Handle_StepVisual_SurfaceStyleReflectanceAmbient_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleReflectanceAmbient_IsNull

def Handle_StepVisual_SurfaceStyleRendering_Create() -> "opencascade::handle< StepVisual_SurfaceStyleRendering >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleRendering_Create()
Handle_StepVisual_SurfaceStyleRendering_Create = _StepVisual.Handle_StepVisual_SurfaceStyleRendering_Create

def Handle_StepVisual_SurfaceStyleRendering_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleRendering >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleRendering_DownCast(t)
Handle_StepVisual_SurfaceStyleRendering_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleRendering_DownCast

def Handle_StepVisual_SurfaceStyleRendering_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleRendering > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleRendering_IsNull(t)
Handle_StepVisual_SurfaceStyleRendering_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleRendering_IsNull

def Handle_StepVisual_SurfaceStyleSegmentationCurve_Create() -> "opencascade::handle< StepVisual_SurfaceStyleSegmentationCurve >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve_Create()
Handle_StepVisual_SurfaceStyleSegmentationCurve_Create = _StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve_Create

def Handle_StepVisual_SurfaceStyleSegmentationCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleSegmentationCurve >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve_DownCast(t)
Handle_StepVisual_SurfaceStyleSegmentationCurve_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve_DownCast

def Handle_StepVisual_SurfaceStyleSegmentationCurve_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleSegmentationCurve > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve_IsNull(t)
Handle_StepVisual_SurfaceStyleSegmentationCurve_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve_IsNull

def Handle_StepVisual_SurfaceStyleSilhouette_Create() -> "opencascade::handle< StepVisual_SurfaceStyleSilhouette >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleSilhouette_Create()
Handle_StepVisual_SurfaceStyleSilhouette_Create = _StepVisual.Handle_StepVisual_SurfaceStyleSilhouette_Create

def Handle_StepVisual_SurfaceStyleSilhouette_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleSilhouette >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleSilhouette_DownCast(t)
Handle_StepVisual_SurfaceStyleSilhouette_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleSilhouette_DownCast

def Handle_StepVisual_SurfaceStyleSilhouette_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleSilhouette > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleSilhouette_IsNull(t)
Handle_StepVisual_SurfaceStyleSilhouette_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleSilhouette_IsNull

def Handle_StepVisual_SurfaceStyleTransparent_Create() -> "opencascade::handle< StepVisual_SurfaceStyleTransparent >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleTransparent_Create()
Handle_StepVisual_SurfaceStyleTransparent_Create = _StepVisual.Handle_StepVisual_SurfaceStyleTransparent_Create

def Handle_StepVisual_SurfaceStyleTransparent_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleTransparent >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleTransparent_DownCast(t)
Handle_StepVisual_SurfaceStyleTransparent_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleTransparent_DownCast

def Handle_StepVisual_SurfaceStyleTransparent_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleTransparent > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleTransparent_IsNull(t)
Handle_StepVisual_SurfaceStyleTransparent_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleTransparent_IsNull

def Handle_StepVisual_SurfaceStyleUsage_Create() -> "opencascade::handle< StepVisual_SurfaceStyleUsage >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleUsage_Create()
Handle_StepVisual_SurfaceStyleUsage_Create = _StepVisual.Handle_StepVisual_SurfaceStyleUsage_Create

def Handle_StepVisual_SurfaceStyleUsage_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleUsage >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleUsage_DownCast(t)
Handle_StepVisual_SurfaceStyleUsage_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleUsage_DownCast

def Handle_StepVisual_SurfaceStyleUsage_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleUsage > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleUsage_IsNull(t)
Handle_StepVisual_SurfaceStyleUsage_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleUsage_IsNull

def Handle_StepVisual_Template_Create() -> "opencascade::handle< StepVisual_Template >":
    return _StepVisual.Handle_StepVisual_Template_Create()
Handle_StepVisual_Template_Create = _StepVisual.Handle_StepVisual_Template_Create

def Handle_StepVisual_Template_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_Template >":
    return _StepVisual.Handle_StepVisual_Template_DownCast(t)
Handle_StepVisual_Template_DownCast = _StepVisual.Handle_StepVisual_Template_DownCast

def Handle_StepVisual_Template_IsNull(t: 'opencascade::handle< StepVisual_Template > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_Template_IsNull(t)
Handle_StepVisual_Template_IsNull = _StepVisual.Handle_StepVisual_Template_IsNull

def Handle_StepVisual_TemplateInstance_Create() -> "opencascade::handle< StepVisual_TemplateInstance >":
    return _StepVisual.Handle_StepVisual_TemplateInstance_Create()
Handle_StepVisual_TemplateInstance_Create = _StepVisual.Handle_StepVisual_TemplateInstance_Create

def Handle_StepVisual_TemplateInstance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TemplateInstance >":
    return _StepVisual.Handle_StepVisual_TemplateInstance_DownCast(t)
Handle_StepVisual_TemplateInstance_DownCast = _StepVisual.Handle_StepVisual_TemplateInstance_DownCast

def Handle_StepVisual_TemplateInstance_IsNull(t: 'opencascade::handle< StepVisual_TemplateInstance > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TemplateInstance_IsNull(t)
Handle_StepVisual_TemplateInstance_IsNull = _StepVisual.Handle_StepVisual_TemplateInstance_IsNull

def Handle_StepVisual_TessellatedItem_Create() -> "opencascade::handle< StepVisual_TessellatedItem >":
    return _StepVisual.Handle_StepVisual_TessellatedItem_Create()
Handle_StepVisual_TessellatedItem_Create = _StepVisual.Handle_StepVisual_TessellatedItem_Create

def Handle_StepVisual_TessellatedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TessellatedItem >":
    return _StepVisual.Handle_StepVisual_TessellatedItem_DownCast(t)
Handle_StepVisual_TessellatedItem_DownCast = _StepVisual.Handle_StepVisual_TessellatedItem_DownCast

def Handle_StepVisual_TessellatedItem_IsNull(t: 'opencascade::handle< StepVisual_TessellatedItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TessellatedItem_IsNull(t)
Handle_StepVisual_TessellatedItem_IsNull = _StepVisual.Handle_StepVisual_TessellatedItem_IsNull

def Handle_StepVisual_TextLiteral_Create() -> "opencascade::handle< StepVisual_TextLiteral >":
    return _StepVisual.Handle_StepVisual_TextLiteral_Create()
Handle_StepVisual_TextLiteral_Create = _StepVisual.Handle_StepVisual_TextLiteral_Create

def Handle_StepVisual_TextLiteral_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TextLiteral >":
    return _StepVisual.Handle_StepVisual_TextLiteral_DownCast(t)
Handle_StepVisual_TextLiteral_DownCast = _StepVisual.Handle_StepVisual_TextLiteral_DownCast

def Handle_StepVisual_TextLiteral_IsNull(t: 'opencascade::handle< StepVisual_TextLiteral > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TextLiteral_IsNull(t)
Handle_StepVisual_TextLiteral_IsNull = _StepVisual.Handle_StepVisual_TextLiteral_IsNull

def Handle_StepVisual_TextStyle_Create() -> "opencascade::handle< StepVisual_TextStyle >":
    return _StepVisual.Handle_StepVisual_TextStyle_Create()
Handle_StepVisual_TextStyle_Create = _StepVisual.Handle_StepVisual_TextStyle_Create

def Handle_StepVisual_TextStyle_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TextStyle >":
    return _StepVisual.Handle_StepVisual_TextStyle_DownCast(t)
Handle_StepVisual_TextStyle_DownCast = _StepVisual.Handle_StepVisual_TextStyle_DownCast

def Handle_StepVisual_TextStyle_IsNull(t: 'opencascade::handle< StepVisual_TextStyle > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TextStyle_IsNull(t)
Handle_StepVisual_TextStyle_IsNull = _StepVisual.Handle_StepVisual_TextStyle_IsNull

def Handle_StepVisual_TextStyleForDefinedFont_Create() -> "opencascade::handle< StepVisual_TextStyleForDefinedFont >":
    return _StepVisual.Handle_StepVisual_TextStyleForDefinedFont_Create()
Handle_StepVisual_TextStyleForDefinedFont_Create = _StepVisual.Handle_StepVisual_TextStyleForDefinedFont_Create

def Handle_StepVisual_TextStyleForDefinedFont_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TextStyleForDefinedFont >":
    return _StepVisual.Handle_StepVisual_TextStyleForDefinedFont_DownCast(t)
Handle_StepVisual_TextStyleForDefinedFont_DownCast = _StepVisual.Handle_StepVisual_TextStyleForDefinedFont_DownCast

def Handle_StepVisual_TextStyleForDefinedFont_IsNull(t: 'opencascade::handle< StepVisual_TextStyleForDefinedFont > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TextStyleForDefinedFont_IsNull(t)
Handle_StepVisual_TextStyleForDefinedFont_IsNull = _StepVisual.Handle_StepVisual_TextStyleForDefinedFont_IsNull

def Handle_StepVisual_ViewVolume_Create() -> "opencascade::handle< StepVisual_ViewVolume >":
    return _StepVisual.Handle_StepVisual_ViewVolume_Create()
Handle_StepVisual_ViewVolume_Create = _StepVisual.Handle_StepVisual_ViewVolume_Create

def Handle_StepVisual_ViewVolume_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_ViewVolume >":
    return _StepVisual.Handle_StepVisual_ViewVolume_DownCast(t)
Handle_StepVisual_ViewVolume_DownCast = _StepVisual.Handle_StepVisual_ViewVolume_DownCast

def Handle_StepVisual_ViewVolume_IsNull(t: 'opencascade::handle< StepVisual_ViewVolume > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_ViewVolume_IsNull(t)
Handle_StepVisual_ViewVolume_IsNull = _StepVisual.Handle_StepVisual_ViewVolume_IsNull

def Handle_StepVisual_AnnotationOccurrence_Create() -> "opencascade::handle< StepVisual_AnnotationOccurrence >":
    return _StepVisual.Handle_StepVisual_AnnotationOccurrence_Create()
Handle_StepVisual_AnnotationOccurrence_Create = _StepVisual.Handle_StepVisual_AnnotationOccurrence_Create

def Handle_StepVisual_AnnotationOccurrence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AnnotationOccurrence >":
    return _StepVisual.Handle_StepVisual_AnnotationOccurrence_DownCast(t)
Handle_StepVisual_AnnotationOccurrence_DownCast = _StepVisual.Handle_StepVisual_AnnotationOccurrence_DownCast

def Handle_StepVisual_AnnotationOccurrence_IsNull(t: 'opencascade::handle< StepVisual_AnnotationOccurrence > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AnnotationOccurrence_IsNull(t)
Handle_StepVisual_AnnotationOccurrence_IsNull = _StepVisual.Handle_StepVisual_AnnotationOccurrence_IsNull

def Handle_StepVisual_BackgroundColour_Create() -> "opencascade::handle< StepVisual_BackgroundColour >":
    return _StepVisual.Handle_StepVisual_BackgroundColour_Create()
Handle_StepVisual_BackgroundColour_Create = _StepVisual.Handle_StepVisual_BackgroundColour_Create

def Handle_StepVisual_BackgroundColour_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_BackgroundColour >":
    return _StepVisual.Handle_StepVisual_BackgroundColour_DownCast(t)
Handle_StepVisual_BackgroundColour_DownCast = _StepVisual.Handle_StepVisual_BackgroundColour_DownCast

def Handle_StepVisual_BackgroundColour_IsNull(t: 'opencascade::handle< StepVisual_BackgroundColour > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_BackgroundColour_IsNull(t)
Handle_StepVisual_BackgroundColour_IsNull = _StepVisual.Handle_StepVisual_BackgroundColour_IsNull

def Handle_StepVisual_CameraImage2dWithScale_Create() -> "opencascade::handle< StepVisual_CameraImage2dWithScale >":
    return _StepVisual.Handle_StepVisual_CameraImage2dWithScale_Create()
Handle_StepVisual_CameraImage2dWithScale_Create = _StepVisual.Handle_StepVisual_CameraImage2dWithScale_Create

def Handle_StepVisual_CameraImage2dWithScale_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraImage2dWithScale >":
    return _StepVisual.Handle_StepVisual_CameraImage2dWithScale_DownCast(t)
Handle_StepVisual_CameraImage2dWithScale_DownCast = _StepVisual.Handle_StepVisual_CameraImage2dWithScale_DownCast

def Handle_StepVisual_CameraImage2dWithScale_IsNull(t: 'opencascade::handle< StepVisual_CameraImage2dWithScale > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraImage2dWithScale_IsNull(t)
Handle_StepVisual_CameraImage2dWithScale_IsNull = _StepVisual.Handle_StepVisual_CameraImage2dWithScale_IsNull

def Handle_StepVisual_CameraImage3dWithScale_Create() -> "opencascade::handle< StepVisual_CameraImage3dWithScale >":
    return _StepVisual.Handle_StepVisual_CameraImage3dWithScale_Create()
Handle_StepVisual_CameraImage3dWithScale_Create = _StepVisual.Handle_StepVisual_CameraImage3dWithScale_Create

def Handle_StepVisual_CameraImage3dWithScale_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraImage3dWithScale >":
    return _StepVisual.Handle_StepVisual_CameraImage3dWithScale_DownCast(t)
Handle_StepVisual_CameraImage3dWithScale_DownCast = _StepVisual.Handle_StepVisual_CameraImage3dWithScale_DownCast

def Handle_StepVisual_CameraImage3dWithScale_IsNull(t: 'opencascade::handle< StepVisual_CameraImage3dWithScale > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraImage3dWithScale_IsNull(t)
Handle_StepVisual_CameraImage3dWithScale_IsNull = _StepVisual.Handle_StepVisual_CameraImage3dWithScale_IsNull

def Handle_StepVisual_CameraModelD2_Create() -> "opencascade::handle< StepVisual_CameraModelD2 >":
    return _StepVisual.Handle_StepVisual_CameraModelD2_Create()
Handle_StepVisual_CameraModelD2_Create = _StepVisual.Handle_StepVisual_CameraModelD2_Create

def Handle_StepVisual_CameraModelD2_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraModelD2 >":
    return _StepVisual.Handle_StepVisual_CameraModelD2_DownCast(t)
Handle_StepVisual_CameraModelD2_DownCast = _StepVisual.Handle_StepVisual_CameraModelD2_DownCast

def Handle_StepVisual_CameraModelD2_IsNull(t: 'opencascade::handle< StepVisual_CameraModelD2 > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraModelD2_IsNull(t)
Handle_StepVisual_CameraModelD2_IsNull = _StepVisual.Handle_StepVisual_CameraModelD2_IsNull

def Handle_StepVisual_CameraModelD3_Create() -> "opencascade::handle< StepVisual_CameraModelD3 >":
    return _StepVisual.Handle_StepVisual_CameraModelD3_Create()
Handle_StepVisual_CameraModelD3_Create = _StepVisual.Handle_StepVisual_CameraModelD3_Create

def Handle_StepVisual_CameraModelD3_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraModelD3 >":
    return _StepVisual.Handle_StepVisual_CameraModelD3_DownCast(t)
Handle_StepVisual_CameraModelD3_DownCast = _StepVisual.Handle_StepVisual_CameraModelD3_DownCast

def Handle_StepVisual_CameraModelD3_IsNull(t: 'opencascade::handle< StepVisual_CameraModelD3 > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraModelD3_IsNull(t)
Handle_StepVisual_CameraModelD3_IsNull = _StepVisual.Handle_StepVisual_CameraModelD3_IsNull

def Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_Create() -> "opencascade::handle< StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel >":
    return _StepVisual.Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_Create()
Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_Create = _StepVisual.Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_Create

def Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel >":
    return _StepVisual.Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_DownCast(t)
Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_DownCast = _StepVisual.Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_DownCast

def Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_IsNull(t: 'opencascade::handle< StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_IsNull(t)
Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_IsNull = _StepVisual.Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_IsNull

def Handle_StepVisual_ColourSpecification_Create() -> "opencascade::handle< StepVisual_ColourSpecification >":
    return _StepVisual.Handle_StepVisual_ColourSpecification_Create()
Handle_StepVisual_ColourSpecification_Create = _StepVisual.Handle_StepVisual_ColourSpecification_Create

def Handle_StepVisual_ColourSpecification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_ColourSpecification >":
    return _StepVisual.Handle_StepVisual_ColourSpecification_DownCast(t)
Handle_StepVisual_ColourSpecification_DownCast = _StepVisual.Handle_StepVisual_ColourSpecification_DownCast

def Handle_StepVisual_ColourSpecification_IsNull(t: 'opencascade::handle< StepVisual_ColourSpecification > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_ColourSpecification_IsNull(t)
Handle_StepVisual_ColourSpecification_IsNull = _StepVisual.Handle_StepVisual_ColourSpecification_IsNull

def Handle_StepVisual_CompositeTextWithExtent_Create() -> "opencascade::handle< StepVisual_CompositeTextWithExtent >":
    return _StepVisual.Handle_StepVisual_CompositeTextWithExtent_Create()
Handle_StepVisual_CompositeTextWithExtent_Create = _StepVisual.Handle_StepVisual_CompositeTextWithExtent_Create

def Handle_StepVisual_CompositeTextWithExtent_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CompositeTextWithExtent >":
    return _StepVisual.Handle_StepVisual_CompositeTextWithExtent_DownCast(t)
Handle_StepVisual_CompositeTextWithExtent_DownCast = _StepVisual.Handle_StepVisual_CompositeTextWithExtent_DownCast

def Handle_StepVisual_CompositeTextWithExtent_IsNull(t: 'opencascade::handle< StepVisual_CompositeTextWithExtent > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CompositeTextWithExtent_IsNull(t)
Handle_StepVisual_CompositeTextWithExtent_IsNull = _StepVisual.Handle_StepVisual_CompositeTextWithExtent_IsNull

def Handle_StepVisual_ContextDependentInvisibility_Create() -> "opencascade::handle< StepVisual_ContextDependentInvisibility >":
    return _StepVisual.Handle_StepVisual_ContextDependentInvisibility_Create()
Handle_StepVisual_ContextDependentInvisibility_Create = _StepVisual.Handle_StepVisual_ContextDependentInvisibility_Create

def Handle_StepVisual_ContextDependentInvisibility_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_ContextDependentInvisibility >":
    return _StepVisual.Handle_StepVisual_ContextDependentInvisibility_DownCast(t)
Handle_StepVisual_ContextDependentInvisibility_DownCast = _StepVisual.Handle_StepVisual_ContextDependentInvisibility_DownCast

def Handle_StepVisual_ContextDependentInvisibility_IsNull(t: 'opencascade::handle< StepVisual_ContextDependentInvisibility > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_ContextDependentInvisibility_IsNull(t)
Handle_StepVisual_ContextDependentInvisibility_IsNull = _StepVisual.Handle_StepVisual_ContextDependentInvisibility_IsNull

def Handle_StepVisual_CoordinatesList_Create() -> "opencascade::handle< StepVisual_CoordinatesList >":
    return _StepVisual.Handle_StepVisual_CoordinatesList_Create()
Handle_StepVisual_CoordinatesList_Create = _StepVisual.Handle_StepVisual_CoordinatesList_Create

def Handle_StepVisual_CoordinatesList_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CoordinatesList >":
    return _StepVisual.Handle_StepVisual_CoordinatesList_DownCast(t)
Handle_StepVisual_CoordinatesList_DownCast = _StepVisual.Handle_StepVisual_CoordinatesList_DownCast

def Handle_StepVisual_CoordinatesList_IsNull(t: 'opencascade::handle< StepVisual_CoordinatesList > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CoordinatesList_IsNull(t)
Handle_StepVisual_CoordinatesList_IsNull = _StepVisual.Handle_StepVisual_CoordinatesList_IsNull

def Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_Create() -> "opencascade::handle< StepVisual_MechanicalDesignGeometricPresentationRepresentation >":
    return _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_Create()
Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_Create = _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_Create

def Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_MechanicalDesignGeometricPresentationRepresentation >":
    return _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_DownCast(t)
Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_DownCast = _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_DownCast

def Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_IsNull(t: 'opencascade::handle< StepVisual_MechanicalDesignGeometricPresentationRepresentation > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_IsNull(t)
Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_IsNull = _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_IsNull

def Handle_StepVisual_OverRidingStyledItem_Create() -> "opencascade::handle< StepVisual_OverRidingStyledItem >":
    return _StepVisual.Handle_StepVisual_OverRidingStyledItem_Create()
Handle_StepVisual_OverRidingStyledItem_Create = _StepVisual.Handle_StepVisual_OverRidingStyledItem_Create

def Handle_StepVisual_OverRidingStyledItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_OverRidingStyledItem >":
    return _StepVisual.Handle_StepVisual_OverRidingStyledItem_DownCast(t)
Handle_StepVisual_OverRidingStyledItem_DownCast = _StepVisual.Handle_StepVisual_OverRidingStyledItem_DownCast

def Handle_StepVisual_OverRidingStyledItem_IsNull(t: 'opencascade::handle< StepVisual_OverRidingStyledItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_OverRidingStyledItem_IsNull(t)
Handle_StepVisual_OverRidingStyledItem_IsNull = _StepVisual.Handle_StepVisual_OverRidingStyledItem_IsNull

def Handle_StepVisual_PlanarBox_Create() -> "opencascade::handle< StepVisual_PlanarBox >":
    return _StepVisual.Handle_StepVisual_PlanarBox_Create()
Handle_StepVisual_PlanarBox_Create = _StepVisual.Handle_StepVisual_PlanarBox_Create

def Handle_StepVisual_PlanarBox_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PlanarBox >":
    return _StepVisual.Handle_StepVisual_PlanarBox_DownCast(t)
Handle_StepVisual_PlanarBox_DownCast = _StepVisual.Handle_StepVisual_PlanarBox_DownCast

def Handle_StepVisual_PlanarBox_IsNull(t: 'opencascade::handle< StepVisual_PlanarBox > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PlanarBox_IsNull(t)
Handle_StepVisual_PlanarBox_IsNull = _StepVisual.Handle_StepVisual_PlanarBox_IsNull

def Handle_StepVisual_PreDefinedColour_Create() -> "opencascade::handle< StepVisual_PreDefinedColour >":
    return _StepVisual.Handle_StepVisual_PreDefinedColour_Create()
Handle_StepVisual_PreDefinedColour_Create = _StepVisual.Handle_StepVisual_PreDefinedColour_Create

def Handle_StepVisual_PreDefinedColour_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PreDefinedColour >":
    return _StepVisual.Handle_StepVisual_PreDefinedColour_DownCast(t)
Handle_StepVisual_PreDefinedColour_DownCast = _StepVisual.Handle_StepVisual_PreDefinedColour_DownCast

def Handle_StepVisual_PreDefinedColour_IsNull(t: 'opencascade::handle< StepVisual_PreDefinedColour > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PreDefinedColour_IsNull(t)
Handle_StepVisual_PreDefinedColour_IsNull = _StepVisual.Handle_StepVisual_PreDefinedColour_IsNull

def Handle_StepVisual_PreDefinedCurveFont_Create() -> "opencascade::handle< StepVisual_PreDefinedCurveFont >":
    return _StepVisual.Handle_StepVisual_PreDefinedCurveFont_Create()
Handle_StepVisual_PreDefinedCurveFont_Create = _StepVisual.Handle_StepVisual_PreDefinedCurveFont_Create

def Handle_StepVisual_PreDefinedCurveFont_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PreDefinedCurveFont >":
    return _StepVisual.Handle_StepVisual_PreDefinedCurveFont_DownCast(t)
Handle_StepVisual_PreDefinedCurveFont_DownCast = _StepVisual.Handle_StepVisual_PreDefinedCurveFont_DownCast

def Handle_StepVisual_PreDefinedCurveFont_IsNull(t: 'opencascade::handle< StepVisual_PreDefinedCurveFont > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PreDefinedCurveFont_IsNull(t)
Handle_StepVisual_PreDefinedCurveFont_IsNull = _StepVisual.Handle_StepVisual_PreDefinedCurveFont_IsNull

def Handle_StepVisual_PreDefinedTextFont_Create() -> "opencascade::handle< StepVisual_PreDefinedTextFont >":
    return _StepVisual.Handle_StepVisual_PreDefinedTextFont_Create()
Handle_StepVisual_PreDefinedTextFont_Create = _StepVisual.Handle_StepVisual_PreDefinedTextFont_Create

def Handle_StepVisual_PreDefinedTextFont_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PreDefinedTextFont >":
    return _StepVisual.Handle_StepVisual_PreDefinedTextFont_DownCast(t)
Handle_StepVisual_PreDefinedTextFont_DownCast = _StepVisual.Handle_StepVisual_PreDefinedTextFont_DownCast

def Handle_StepVisual_PreDefinedTextFont_IsNull(t: 'opencascade::handle< StepVisual_PreDefinedTextFont > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PreDefinedTextFont_IsNull(t)
Handle_StepVisual_PreDefinedTextFont_IsNull = _StepVisual.Handle_StepVisual_PreDefinedTextFont_IsNull

def Handle_StepVisual_PresentationArea_Create() -> "opencascade::handle< StepVisual_PresentationArea >":
    return _StepVisual.Handle_StepVisual_PresentationArea_Create()
Handle_StepVisual_PresentationArea_Create = _StepVisual.Handle_StepVisual_PresentationArea_Create

def Handle_StepVisual_PresentationArea_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationArea >":
    return _StepVisual.Handle_StepVisual_PresentationArea_DownCast(t)
Handle_StepVisual_PresentationArea_DownCast = _StepVisual.Handle_StepVisual_PresentationArea_DownCast

def Handle_StepVisual_PresentationArea_IsNull(t: 'opencascade::handle< StepVisual_PresentationArea > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationArea_IsNull(t)
Handle_StepVisual_PresentationArea_IsNull = _StepVisual.Handle_StepVisual_PresentationArea_IsNull

def Handle_StepVisual_PresentationStyleByContext_Create() -> "opencascade::handle< StepVisual_PresentationStyleByContext >":
    return _StepVisual.Handle_StepVisual_PresentationStyleByContext_Create()
Handle_StepVisual_PresentationStyleByContext_Create = _StepVisual.Handle_StepVisual_PresentationStyleByContext_Create

def Handle_StepVisual_PresentationStyleByContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationStyleByContext >":
    return _StepVisual.Handle_StepVisual_PresentationStyleByContext_DownCast(t)
Handle_StepVisual_PresentationStyleByContext_DownCast = _StepVisual.Handle_StepVisual_PresentationStyleByContext_DownCast

def Handle_StepVisual_PresentationStyleByContext_IsNull(t: 'opencascade::handle< StepVisual_PresentationStyleByContext > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationStyleByContext_IsNull(t)
Handle_StepVisual_PresentationStyleByContext_IsNull = _StepVisual.Handle_StepVisual_PresentationStyleByContext_IsNull

def Handle_StepVisual_PresentationView_Create() -> "opencascade::handle< StepVisual_PresentationView >":
    return _StepVisual.Handle_StepVisual_PresentationView_Create()
Handle_StepVisual_PresentationView_Create = _StepVisual.Handle_StepVisual_PresentationView_Create

def Handle_StepVisual_PresentationView_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_PresentationView >":
    return _StepVisual.Handle_StepVisual_PresentationView_DownCast(t)
Handle_StepVisual_PresentationView_DownCast = _StepVisual.Handle_StepVisual_PresentationView_DownCast

def Handle_StepVisual_PresentationView_IsNull(t: 'opencascade::handle< StepVisual_PresentationView > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_PresentationView_IsNull(t)
Handle_StepVisual_PresentationView_IsNull = _StepVisual.Handle_StepVisual_PresentationView_IsNull

def Handle_StepVisual_SurfaceStyleRenderingWithProperties_Create() -> "opencascade::handle< StepVisual_SurfaceStyleRenderingWithProperties >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleRenderingWithProperties_Create()
Handle_StepVisual_SurfaceStyleRenderingWithProperties_Create = _StepVisual.Handle_StepVisual_SurfaceStyleRenderingWithProperties_Create

def Handle_StepVisual_SurfaceStyleRenderingWithProperties_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_SurfaceStyleRenderingWithProperties >":
    return _StepVisual.Handle_StepVisual_SurfaceStyleRenderingWithProperties_DownCast(t)
Handle_StepVisual_SurfaceStyleRenderingWithProperties_DownCast = _StepVisual.Handle_StepVisual_SurfaceStyleRenderingWithProperties_DownCast

def Handle_StepVisual_SurfaceStyleRenderingWithProperties_IsNull(t: 'opencascade::handle< StepVisual_SurfaceStyleRenderingWithProperties > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_SurfaceStyleRenderingWithProperties_IsNull(t)
Handle_StepVisual_SurfaceStyleRenderingWithProperties_IsNull = _StepVisual.Handle_StepVisual_SurfaceStyleRenderingWithProperties_IsNull

def Handle_StepVisual_TessellatedAnnotationOccurrence_Create() -> "opencascade::handle< StepVisual_TessellatedAnnotationOccurrence >":
    return _StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence_Create()
Handle_StepVisual_TessellatedAnnotationOccurrence_Create = _StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence_Create

def Handle_StepVisual_TessellatedAnnotationOccurrence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TessellatedAnnotationOccurrence >":
    return _StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence_DownCast(t)
Handle_StepVisual_TessellatedAnnotationOccurrence_DownCast = _StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence_DownCast

def Handle_StepVisual_TessellatedAnnotationOccurrence_IsNull(t: 'opencascade::handle< StepVisual_TessellatedAnnotationOccurrence > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence_IsNull(t)
Handle_StepVisual_TessellatedAnnotationOccurrence_IsNull = _StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence_IsNull

def Handle_StepVisual_TessellatedCurveSet_Create() -> "opencascade::handle< StepVisual_TessellatedCurveSet >":
    return _StepVisual.Handle_StepVisual_TessellatedCurveSet_Create()
Handle_StepVisual_TessellatedCurveSet_Create = _StepVisual.Handle_StepVisual_TessellatedCurveSet_Create

def Handle_StepVisual_TessellatedCurveSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TessellatedCurveSet >":
    return _StepVisual.Handle_StepVisual_TessellatedCurveSet_DownCast(t)
Handle_StepVisual_TessellatedCurveSet_DownCast = _StepVisual.Handle_StepVisual_TessellatedCurveSet_DownCast

def Handle_StepVisual_TessellatedCurveSet_IsNull(t: 'opencascade::handle< StepVisual_TessellatedCurveSet > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TessellatedCurveSet_IsNull(t)
Handle_StepVisual_TessellatedCurveSet_IsNull = _StepVisual.Handle_StepVisual_TessellatedCurveSet_IsNull

def Handle_StepVisual_TessellatedGeometricSet_Create() -> "opencascade::handle< StepVisual_TessellatedGeometricSet >":
    return _StepVisual.Handle_StepVisual_TessellatedGeometricSet_Create()
Handle_StepVisual_TessellatedGeometricSet_Create = _StepVisual.Handle_StepVisual_TessellatedGeometricSet_Create

def Handle_StepVisual_TessellatedGeometricSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TessellatedGeometricSet >":
    return _StepVisual.Handle_StepVisual_TessellatedGeometricSet_DownCast(t)
Handle_StepVisual_TessellatedGeometricSet_DownCast = _StepVisual.Handle_StepVisual_TessellatedGeometricSet_DownCast

def Handle_StepVisual_TessellatedGeometricSet_IsNull(t: 'opencascade::handle< StepVisual_TessellatedGeometricSet > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TessellatedGeometricSet_IsNull(t)
Handle_StepVisual_TessellatedGeometricSet_IsNull = _StepVisual.Handle_StepVisual_TessellatedGeometricSet_IsNull

def Handle_StepVisual_TextStyleWithBoxCharacteristics_Create() -> "opencascade::handle< StepVisual_TextStyleWithBoxCharacteristics >":
    return _StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics_Create()
Handle_StepVisual_TextStyleWithBoxCharacteristics_Create = _StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics_Create

def Handle_StepVisual_TextStyleWithBoxCharacteristics_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_TextStyleWithBoxCharacteristics >":
    return _StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics_DownCast(t)
Handle_StepVisual_TextStyleWithBoxCharacteristics_DownCast = _StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics_DownCast

def Handle_StepVisual_TextStyleWithBoxCharacteristics_IsNull(t: 'opencascade::handle< StepVisual_TextStyleWithBoxCharacteristics > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics_IsNull(t)
Handle_StepVisual_TextStyleWithBoxCharacteristics_IsNull = _StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics_IsNull

def Handle_StepVisual_AnnotationCurveOccurrence_Create() -> "opencascade::handle< StepVisual_AnnotationCurveOccurrence >":
    return _StepVisual.Handle_StepVisual_AnnotationCurveOccurrence_Create()
Handle_StepVisual_AnnotationCurveOccurrence_Create = _StepVisual.Handle_StepVisual_AnnotationCurveOccurrence_Create

def Handle_StepVisual_AnnotationCurveOccurrence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AnnotationCurveOccurrence >":
    return _StepVisual.Handle_StepVisual_AnnotationCurveOccurrence_DownCast(t)
Handle_StepVisual_AnnotationCurveOccurrence_DownCast = _StepVisual.Handle_StepVisual_AnnotationCurveOccurrence_DownCast

def Handle_StepVisual_AnnotationCurveOccurrence_IsNull(t: 'opencascade::handle< StepVisual_AnnotationCurveOccurrence > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AnnotationCurveOccurrence_IsNull(t)
Handle_StepVisual_AnnotationCurveOccurrence_IsNull = _StepVisual.Handle_StepVisual_AnnotationCurveOccurrence_IsNull

def Handle_StepVisual_AnnotationFillAreaOccurrence_Create() -> "opencascade::handle< StepVisual_AnnotationFillAreaOccurrence >":
    return _StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence_Create()
Handle_StepVisual_AnnotationFillAreaOccurrence_Create = _StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence_Create

def Handle_StepVisual_AnnotationFillAreaOccurrence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AnnotationFillAreaOccurrence >":
    return _StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence_DownCast(t)
Handle_StepVisual_AnnotationFillAreaOccurrence_DownCast = _StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence_DownCast

def Handle_StepVisual_AnnotationFillAreaOccurrence_IsNull(t: 'opencascade::handle< StepVisual_AnnotationFillAreaOccurrence > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence_IsNull(t)
Handle_StepVisual_AnnotationFillAreaOccurrence_IsNull = _StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence_IsNull

def Handle_StepVisual_AnnotationPlane_Create() -> "opencascade::handle< StepVisual_AnnotationPlane >":
    return _StepVisual.Handle_StepVisual_AnnotationPlane_Create()
Handle_StepVisual_AnnotationPlane_Create = _StepVisual.Handle_StepVisual_AnnotationPlane_Create

def Handle_StepVisual_AnnotationPlane_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AnnotationPlane >":
    return _StepVisual.Handle_StepVisual_AnnotationPlane_DownCast(t)
Handle_StepVisual_AnnotationPlane_DownCast = _StepVisual.Handle_StepVisual_AnnotationPlane_DownCast

def Handle_StepVisual_AnnotationPlane_IsNull(t: 'opencascade::handle< StepVisual_AnnotationPlane > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AnnotationPlane_IsNull(t)
Handle_StepVisual_AnnotationPlane_IsNull = _StepVisual.Handle_StepVisual_AnnotationPlane_IsNull

def Handle_StepVisual_AnnotationTextOccurrence_Create() -> "opencascade::handle< StepVisual_AnnotationTextOccurrence >":
    return _StepVisual.Handle_StepVisual_AnnotationTextOccurrence_Create()
Handle_StepVisual_AnnotationTextOccurrence_Create = _StepVisual.Handle_StepVisual_AnnotationTextOccurrence_Create

def Handle_StepVisual_AnnotationTextOccurrence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AnnotationTextOccurrence >":
    return _StepVisual.Handle_StepVisual_AnnotationTextOccurrence_DownCast(t)
Handle_StepVisual_AnnotationTextOccurrence_DownCast = _StepVisual.Handle_StepVisual_AnnotationTextOccurrence_DownCast

def Handle_StepVisual_AnnotationTextOccurrence_IsNull(t: 'opencascade::handle< StepVisual_AnnotationTextOccurrence > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AnnotationTextOccurrence_IsNull(t)
Handle_StepVisual_AnnotationTextOccurrence_IsNull = _StepVisual.Handle_StepVisual_AnnotationTextOccurrence_IsNull

def Handle_StepVisual_CameraModelD3MultiClipping_Create() -> "opencascade::handle< StepVisual_CameraModelD3MultiClipping >":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClipping_Create()
Handle_StepVisual_CameraModelD3MultiClipping_Create = _StepVisual.Handle_StepVisual_CameraModelD3MultiClipping_Create

def Handle_StepVisual_CameraModelD3MultiClipping_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_CameraModelD3MultiClipping >":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClipping_DownCast(t)
Handle_StepVisual_CameraModelD3MultiClipping_DownCast = _StepVisual.Handle_StepVisual_CameraModelD3MultiClipping_DownCast

def Handle_StepVisual_CameraModelD3MultiClipping_IsNull(t: 'opencascade::handle< StepVisual_CameraModelD3MultiClipping > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_CameraModelD3MultiClipping_IsNull(t)
Handle_StepVisual_CameraModelD3MultiClipping_IsNull = _StepVisual.Handle_StepVisual_CameraModelD3MultiClipping_IsNull

def Handle_StepVisual_ColourRgb_Create() -> "opencascade::handle< StepVisual_ColourRgb >":
    return _StepVisual.Handle_StepVisual_ColourRgb_Create()
Handle_StepVisual_ColourRgb_Create = _StepVisual.Handle_StepVisual_ColourRgb_Create

def Handle_StepVisual_ColourRgb_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_ColourRgb >":
    return _StepVisual.Handle_StepVisual_ColourRgb_DownCast(t)
Handle_StepVisual_ColourRgb_DownCast = _StepVisual.Handle_StepVisual_ColourRgb_DownCast

def Handle_StepVisual_ColourRgb_IsNull(t: 'opencascade::handle< StepVisual_ColourRgb > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_ColourRgb_IsNull(t)
Handle_StepVisual_ColourRgb_IsNull = _StepVisual.Handle_StepVisual_ColourRgb_IsNull

def Handle_StepVisual_ContextDependentOverRidingStyledItem_Create() -> "opencascade::handle< StepVisual_ContextDependentOverRidingStyledItem >":
    return _StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem_Create()
Handle_StepVisual_ContextDependentOverRidingStyledItem_Create = _StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem_Create

def Handle_StepVisual_ContextDependentOverRidingStyledItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_ContextDependentOverRidingStyledItem >":
    return _StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem_DownCast(t)
Handle_StepVisual_ContextDependentOverRidingStyledItem_DownCast = _StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem_DownCast

def Handle_StepVisual_ContextDependentOverRidingStyledItem_IsNull(t: 'opencascade::handle< StepVisual_ContextDependentOverRidingStyledItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem_IsNull(t)
Handle_StepVisual_ContextDependentOverRidingStyledItem_IsNull = _StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem_IsNull

def Handle_StepVisual_DraughtingAnnotationOccurrence_Create() -> "opencascade::handle< StepVisual_DraughtingAnnotationOccurrence >":
    return _StepVisual.Handle_StepVisual_DraughtingAnnotationOccurrence_Create()
Handle_StepVisual_DraughtingAnnotationOccurrence_Create = _StepVisual.Handle_StepVisual_DraughtingAnnotationOccurrence_Create

def Handle_StepVisual_DraughtingAnnotationOccurrence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_DraughtingAnnotationOccurrence >":
    return _StepVisual.Handle_StepVisual_DraughtingAnnotationOccurrence_DownCast(t)
Handle_StepVisual_DraughtingAnnotationOccurrence_DownCast = _StepVisual.Handle_StepVisual_DraughtingAnnotationOccurrence_DownCast

def Handle_StepVisual_DraughtingAnnotationOccurrence_IsNull(t: 'opencascade::handle< StepVisual_DraughtingAnnotationOccurrence > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_DraughtingAnnotationOccurrence_IsNull(t)
Handle_StepVisual_DraughtingAnnotationOccurrence_IsNull = _StepVisual.Handle_StepVisual_DraughtingAnnotationOccurrence_IsNull

def Handle_StepVisual_DraughtingPreDefinedColour_Create() -> "opencascade::handle< StepVisual_DraughtingPreDefinedColour >":
    return _StepVisual.Handle_StepVisual_DraughtingPreDefinedColour_Create()
Handle_StepVisual_DraughtingPreDefinedColour_Create = _StepVisual.Handle_StepVisual_DraughtingPreDefinedColour_Create

def Handle_StepVisual_DraughtingPreDefinedColour_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_DraughtingPreDefinedColour >":
    return _StepVisual.Handle_StepVisual_DraughtingPreDefinedColour_DownCast(t)
Handle_StepVisual_DraughtingPreDefinedColour_DownCast = _StepVisual.Handle_StepVisual_DraughtingPreDefinedColour_DownCast

def Handle_StepVisual_DraughtingPreDefinedColour_IsNull(t: 'opencascade::handle< StepVisual_DraughtingPreDefinedColour > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_DraughtingPreDefinedColour_IsNull(t)
Handle_StepVisual_DraughtingPreDefinedColour_IsNull = _StepVisual.Handle_StepVisual_DraughtingPreDefinedColour_IsNull

def Handle_StepVisual_DraughtingPreDefinedCurveFont_Create() -> "opencascade::handle< StepVisual_DraughtingPreDefinedCurveFont >":
    return _StepVisual.Handle_StepVisual_DraughtingPreDefinedCurveFont_Create()
Handle_StepVisual_DraughtingPreDefinedCurveFont_Create = _StepVisual.Handle_StepVisual_DraughtingPreDefinedCurveFont_Create

def Handle_StepVisual_DraughtingPreDefinedCurveFont_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_DraughtingPreDefinedCurveFont >":
    return _StepVisual.Handle_StepVisual_DraughtingPreDefinedCurveFont_DownCast(t)
Handle_StepVisual_DraughtingPreDefinedCurveFont_DownCast = _StepVisual.Handle_StepVisual_DraughtingPreDefinedCurveFont_DownCast

def Handle_StepVisual_DraughtingPreDefinedCurveFont_IsNull(t: 'opencascade::handle< StepVisual_DraughtingPreDefinedCurveFont > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_DraughtingPreDefinedCurveFont_IsNull(t)
Handle_StepVisual_DraughtingPreDefinedCurveFont_IsNull = _StepVisual.Handle_StepVisual_DraughtingPreDefinedCurveFont_IsNull

def Handle_StepVisual_MechanicalDesignGeometricPresentationArea_Create() -> "opencascade::handle< StepVisual_MechanicalDesignGeometricPresentationArea >":
    return _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea_Create()
Handle_StepVisual_MechanicalDesignGeometricPresentationArea_Create = _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea_Create

def Handle_StepVisual_MechanicalDesignGeometricPresentationArea_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_MechanicalDesignGeometricPresentationArea >":
    return _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea_DownCast(t)
Handle_StepVisual_MechanicalDesignGeometricPresentationArea_DownCast = _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea_DownCast

def Handle_StepVisual_MechanicalDesignGeometricPresentationArea_IsNull(t: 'opencascade::handle< StepVisual_MechanicalDesignGeometricPresentationArea > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea_IsNull(t)
Handle_StepVisual_MechanicalDesignGeometricPresentationArea_IsNull = _StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea_IsNull

def Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_Create() -> "opencascade::handle< StepVisual_AnnotationCurveOccurrenceAndGeomReprItem >":
    return _StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_Create()
Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_Create = _StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_Create

def Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_AnnotationCurveOccurrenceAndGeomReprItem >":
    return _StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_DownCast(t)
Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_DownCast = _StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_DownCast

def Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_IsNull(t: 'opencascade::handle< StepVisual_AnnotationCurveOccurrenceAndGeomReprItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_IsNull(t)
Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_IsNull = _StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_IsNull

def Handle_StepVisual_HArray1OfAnnotationPlaneElement_Create() -> "opencascade::handle< StepVisual_HArray1OfAnnotationPlaneElement >":
    return _StepVisual.Handle_StepVisual_HArray1OfAnnotationPlaneElement_Create()
Handle_StepVisual_HArray1OfAnnotationPlaneElement_Create = _StepVisual.Handle_StepVisual_HArray1OfAnnotationPlaneElement_Create

def Handle_StepVisual_HArray1OfAnnotationPlaneElement_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfAnnotationPlaneElement >":
    return _StepVisual.Handle_StepVisual_HArray1OfAnnotationPlaneElement_DownCast(t)
Handle_StepVisual_HArray1OfAnnotationPlaneElement_DownCast = _StepVisual.Handle_StepVisual_HArray1OfAnnotationPlaneElement_DownCast

def Handle_StepVisual_HArray1OfAnnotationPlaneElement_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfAnnotationPlaneElement > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfAnnotationPlaneElement_IsNull(t)
Handle_StepVisual_HArray1OfAnnotationPlaneElement_IsNull = _StepVisual.Handle_StepVisual_HArray1OfAnnotationPlaneElement_IsNull

def Handle_StepVisual_HArray1OfDraughtingCalloutElement_Create() -> "opencascade::handle< StepVisual_HArray1OfDraughtingCalloutElement >":
    return _StepVisual.Handle_StepVisual_HArray1OfDraughtingCalloutElement_Create()
Handle_StepVisual_HArray1OfDraughtingCalloutElement_Create = _StepVisual.Handle_StepVisual_HArray1OfDraughtingCalloutElement_Create

def Handle_StepVisual_HArray1OfDraughtingCalloutElement_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfDraughtingCalloutElement >":
    return _StepVisual.Handle_StepVisual_HArray1OfDraughtingCalloutElement_DownCast(t)
Handle_StepVisual_HArray1OfDraughtingCalloutElement_DownCast = _StepVisual.Handle_StepVisual_HArray1OfDraughtingCalloutElement_DownCast

def Handle_StepVisual_HArray1OfDraughtingCalloutElement_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfDraughtingCalloutElement > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfDraughtingCalloutElement_IsNull(t)
Handle_StepVisual_HArray1OfDraughtingCalloutElement_IsNull = _StepVisual.Handle_StepVisual_HArray1OfDraughtingCalloutElement_IsNull

def Handle_StepVisual_HArray1OfDirectionCountSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfDirectionCountSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfDirectionCountSelect_Create()
Handle_StepVisual_HArray1OfDirectionCountSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfDirectionCountSelect_Create

def Handle_StepVisual_HArray1OfDirectionCountSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfDirectionCountSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfDirectionCountSelect_DownCast(t)
Handle_StepVisual_HArray1OfDirectionCountSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfDirectionCountSelect_DownCast

def Handle_StepVisual_HArray1OfDirectionCountSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfDirectionCountSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfDirectionCountSelect_IsNull(t)
Handle_StepVisual_HArray1OfDirectionCountSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfDirectionCountSelect_IsNull

def Handle_StepVisual_HArray1OfStyleContextSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfStyleContextSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfStyleContextSelect_Create()
Handle_StepVisual_HArray1OfStyleContextSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfStyleContextSelect_Create

def Handle_StepVisual_HArray1OfStyleContextSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfStyleContextSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfStyleContextSelect_DownCast(t)
Handle_StepVisual_HArray1OfStyleContextSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfStyleContextSelect_DownCast

def Handle_StepVisual_HArray1OfStyleContextSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfStyleContextSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfStyleContextSelect_IsNull(t)
Handle_StepVisual_HArray1OfStyleContextSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfStyleContextSelect_IsNull

def Handle_StepVisual_HArray1OfPresentationStyleSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfPresentationStyleSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleSelect_Create()
Handle_StepVisual_HArray1OfPresentationStyleSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleSelect_Create

def Handle_StepVisual_HArray1OfPresentationStyleSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfPresentationStyleSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleSelect_DownCast(t)
Handle_StepVisual_HArray1OfPresentationStyleSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleSelect_DownCast

def Handle_StepVisual_HArray1OfPresentationStyleSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfPresentationStyleSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleSelect_IsNull(t)
Handle_StepVisual_HArray1OfPresentationStyleSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleSelect_IsNull

def Handle_StepVisual_HArray1OfCurveStyleFontPattern_Create() -> "opencascade::handle< StepVisual_HArray1OfCurveStyleFontPattern >":
    return _StepVisual.Handle_StepVisual_HArray1OfCurveStyleFontPattern_Create()
Handle_StepVisual_HArray1OfCurveStyleFontPattern_Create = _StepVisual.Handle_StepVisual_HArray1OfCurveStyleFontPattern_Create

def Handle_StepVisual_HArray1OfCurveStyleFontPattern_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfCurveStyleFontPattern >":
    return _StepVisual.Handle_StepVisual_HArray1OfCurveStyleFontPattern_DownCast(t)
Handle_StepVisual_HArray1OfCurveStyleFontPattern_DownCast = _StepVisual.Handle_StepVisual_HArray1OfCurveStyleFontPattern_DownCast

def Handle_StepVisual_HArray1OfCurveStyleFontPattern_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfCurveStyleFontPattern > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfCurveStyleFontPattern_IsNull(t)
Handle_StepVisual_HArray1OfCurveStyleFontPattern_IsNull = _StepVisual.Handle_StepVisual_HArray1OfCurveStyleFontPattern_IsNull

def Handle_StepVisual_HArray1OfRenderingPropertiesSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfRenderingPropertiesSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfRenderingPropertiesSelect_Create()
Handle_StepVisual_HArray1OfRenderingPropertiesSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfRenderingPropertiesSelect_Create

def Handle_StepVisual_HArray1OfRenderingPropertiesSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfRenderingPropertiesSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfRenderingPropertiesSelect_DownCast(t)
Handle_StepVisual_HArray1OfRenderingPropertiesSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfRenderingPropertiesSelect_DownCast

def Handle_StepVisual_HArray1OfRenderingPropertiesSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfRenderingPropertiesSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfRenderingPropertiesSelect_IsNull(t)
Handle_StepVisual_HArray1OfRenderingPropertiesSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfRenderingPropertiesSelect_IsNull

def Handle_StepVisual_HArray1OfBoxCharacteristicSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfBoxCharacteristicSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfBoxCharacteristicSelect_Create()
Handle_StepVisual_HArray1OfBoxCharacteristicSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfBoxCharacteristicSelect_Create

def Handle_StepVisual_HArray1OfBoxCharacteristicSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfBoxCharacteristicSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfBoxCharacteristicSelect_DownCast(t)
Handle_StepVisual_HArray1OfBoxCharacteristicSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfBoxCharacteristicSelect_DownCast

def Handle_StepVisual_HArray1OfBoxCharacteristicSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfBoxCharacteristicSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfBoxCharacteristicSelect_IsNull(t)
Handle_StepVisual_HArray1OfBoxCharacteristicSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfBoxCharacteristicSelect_IsNull

def Handle_StepVisual_HArray1OfPresentationStyleAssignment_Create() -> "opencascade::handle< StepVisual_HArray1OfPresentationStyleAssignment >":
    return _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleAssignment_Create()
Handle_StepVisual_HArray1OfPresentationStyleAssignment_Create = _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleAssignment_Create

def Handle_StepVisual_HArray1OfPresentationStyleAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfPresentationStyleAssignment >":
    return _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleAssignment_DownCast(t)
Handle_StepVisual_HArray1OfPresentationStyleAssignment_DownCast = _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleAssignment_DownCast

def Handle_StepVisual_HArray1OfPresentationStyleAssignment_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfPresentationStyleAssignment > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleAssignment_IsNull(t)
Handle_StepVisual_HArray1OfPresentationStyleAssignment_IsNull = _StepVisual.Handle_StepVisual_HArray1OfPresentationStyleAssignment_IsNull

def Handle_StepVisual_HArray1OfFillStyleSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfFillStyleSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfFillStyleSelect_Create()
Handle_StepVisual_HArray1OfFillStyleSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfFillStyleSelect_Create

def Handle_StepVisual_HArray1OfFillStyleSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfFillStyleSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfFillStyleSelect_DownCast(t)
Handle_StepVisual_HArray1OfFillStyleSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfFillStyleSelect_DownCast

def Handle_StepVisual_HArray1OfFillStyleSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfFillStyleSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfFillStyleSelect_IsNull(t)
Handle_StepVisual_HArray1OfFillStyleSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfFillStyleSelect_IsNull

def Handle_StepVisual_HArray1OfTextOrCharacter_Create() -> "opencascade::handle< StepVisual_HArray1OfTextOrCharacter >":
    return _StepVisual.Handle_StepVisual_HArray1OfTextOrCharacter_Create()
Handle_StepVisual_HArray1OfTextOrCharacter_Create = _StepVisual.Handle_StepVisual_HArray1OfTextOrCharacter_Create

def Handle_StepVisual_HArray1OfTextOrCharacter_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfTextOrCharacter >":
    return _StepVisual.Handle_StepVisual_HArray1OfTextOrCharacter_DownCast(t)
Handle_StepVisual_HArray1OfTextOrCharacter_DownCast = _StepVisual.Handle_StepVisual_HArray1OfTextOrCharacter_DownCast

def Handle_StepVisual_HArray1OfTextOrCharacter_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfTextOrCharacter > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfTextOrCharacter_IsNull(t)
Handle_StepVisual_HArray1OfTextOrCharacter_IsNull = _StepVisual.Handle_StepVisual_HArray1OfTextOrCharacter_IsNull

def Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfSurfaceStyleElementSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_Create()
Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_Create

def Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfSurfaceStyleElementSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_DownCast(t)
Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_DownCast

def Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfSurfaceStyleElementSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_IsNull(t)
Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_IsNull

def Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_Create()
Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_Create

def Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_DownCast(t)
Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_DownCast

def Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_IsNull(t)
Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_IsNull

def Handle_StepVisual_HArray1OfLayeredItem_Create() -> "opencascade::handle< StepVisual_HArray1OfLayeredItem >":
    return _StepVisual.Handle_StepVisual_HArray1OfLayeredItem_Create()
Handle_StepVisual_HArray1OfLayeredItem_Create = _StepVisual.Handle_StepVisual_HArray1OfLayeredItem_Create

def Handle_StepVisual_HArray1OfLayeredItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfLayeredItem >":
    return _StepVisual.Handle_StepVisual_HArray1OfLayeredItem_DownCast(t)
Handle_StepVisual_HArray1OfLayeredItem_DownCast = _StepVisual.Handle_StepVisual_HArray1OfLayeredItem_DownCast

def Handle_StepVisual_HArray1OfLayeredItem_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfLayeredItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfLayeredItem_IsNull(t)
Handle_StepVisual_HArray1OfLayeredItem_IsNull = _StepVisual.Handle_StepVisual_HArray1OfLayeredItem_IsNull

def Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_Create() -> "opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_Create()
Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_Create = _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_Create

def Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect >":
    return _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_DownCast(t)
Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_DownCast = _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_DownCast

def Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_IsNull(t)
Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_IsNull = _StepVisual.Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_IsNull

def Handle_StepVisual_HArray1OfInvisibleItem_Create() -> "opencascade::handle< StepVisual_HArray1OfInvisibleItem >":
    return _StepVisual.Handle_StepVisual_HArray1OfInvisibleItem_Create()
Handle_StepVisual_HArray1OfInvisibleItem_Create = _StepVisual.Handle_StepVisual_HArray1OfInvisibleItem_Create

def Handle_StepVisual_HArray1OfInvisibleItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepVisual_HArray1OfInvisibleItem >":
    return _StepVisual.Handle_StepVisual_HArray1OfInvisibleItem_DownCast(t)
Handle_StepVisual_HArray1OfInvisibleItem_DownCast = _StepVisual.Handle_StepVisual_HArray1OfInvisibleItem_DownCast

def Handle_StepVisual_HArray1OfInvisibleItem_IsNull(t: 'opencascade::handle< StepVisual_HArray1OfInvisibleItem > const &') -> "bool":
    return _StepVisual.Handle_StepVisual_HArray1OfInvisibleItem_IsNull(t)
Handle_StepVisual_HArray1OfInvisibleItem_IsNull = _StepVisual.Handle_StepVisual_HArray1OfInvisibleItem_IsNull
class StepVisual_Array1OfAnnotationPlaneElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfAnnotationPlaneElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfAnnotationPlaneElement, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_AnnotationPlaneElement >::iterator":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_AnnotationPlaneElement >::iterator":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_AnnotationPlaneElement >::const_iterator":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_AnnotationPlaneElement >::const_iterator":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfAnnotationPlaneElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_AnnotationPlaneElement') -> "void":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfAnnotationPlaneElement') -> "NCollection_Array1< StepVisual_AnnotationPlaneElement > &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfAnnotationPlaneElement') -> "NCollection_Array1< StepVisual_AnnotationPlaneElement > &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_AnnotationPlaneElement > &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Set(self, *args)

    def First(self) -> "StepVisual_AnnotationPlaneElement const &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_First(self)

    def ChangeFirst(self) -> "StepVisual_AnnotationPlaneElement &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_ChangeFirst(self)

    def Last(self) -> "StepVisual_AnnotationPlaneElement const &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Last(self)

    def ChangeLast(self) -> "StepVisual_AnnotationPlaneElement &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_AnnotationPlaneElement const &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_AnnotationPlaneElement &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_AnnotationPlaneElement &":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_AnnotationPlaneElement') -> "void":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfAnnotationPlaneElement
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfAnnotationPlaneElement_swigregister = _StepVisual.StepVisual_Array1OfAnnotationPlaneElement_swigregister
StepVisual_Array1OfAnnotationPlaneElement_swigregister(StepVisual_Array1OfAnnotationPlaneElement)

class StepVisual_Array1OfBoxCharacteristicSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfBoxCharacteristicSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfBoxCharacteristicSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_BoxCharacteristicSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_BoxCharacteristicSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_BoxCharacteristicSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_BoxCharacteristicSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfBoxCharacteristicSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_BoxCharacteristicSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfBoxCharacteristicSelect') -> "NCollection_Array1< StepVisual_BoxCharacteristicSelect > &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfBoxCharacteristicSelect') -> "NCollection_Array1< StepVisual_BoxCharacteristicSelect > &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_BoxCharacteristicSelect > &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Set(self, *args)

    def First(self) -> "StepVisual_BoxCharacteristicSelect const &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_BoxCharacteristicSelect &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_BoxCharacteristicSelect const &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_BoxCharacteristicSelect &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_BoxCharacteristicSelect const &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_BoxCharacteristicSelect &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_BoxCharacteristicSelect &":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_BoxCharacteristicSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfBoxCharacteristicSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfBoxCharacteristicSelect_swigregister = _StepVisual.StepVisual_Array1OfBoxCharacteristicSelect_swigregister
StepVisual_Array1OfBoxCharacteristicSelect_swigregister(StepVisual_Array1OfBoxCharacteristicSelect)

class StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingInterectionSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingInterectionSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingInterectionSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingInterectionSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_CameraModelD3MultiClippingInterectionSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect') -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingInterectionSelect > &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect') -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingInterectionSelect > &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingInterectionSelect > &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Set(self, *args)

    def First(self) -> "StepVisual_CameraModelD3MultiClippingInterectionSelect const &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_CameraModelD3MultiClippingInterectionSelect &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_CameraModelD3MultiClippingInterectionSelect const &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_CameraModelD3MultiClippingInterectionSelect &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_CameraModelD3MultiClippingInterectionSelect const &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_CameraModelD3MultiClippingInterectionSelect &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_CameraModelD3MultiClippingInterectionSelect &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_CameraModelD3MultiClippingInterectionSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_swigregister = _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_swigregister
StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect_swigregister(StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect)

class StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingUnionSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingUnionSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingUnionSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingUnionSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_CameraModelD3MultiClippingUnionSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect') -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingUnionSelect > &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect') -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingUnionSelect > &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_CameraModelD3MultiClippingUnionSelect > &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Set(self, *args)

    def First(self) -> "StepVisual_CameraModelD3MultiClippingUnionSelect const &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_CameraModelD3MultiClippingUnionSelect &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_CameraModelD3MultiClippingUnionSelect const &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_CameraModelD3MultiClippingUnionSelect &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_CameraModelD3MultiClippingUnionSelect const &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_CameraModelD3MultiClippingUnionSelect &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_CameraModelD3MultiClippingUnionSelect &":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_CameraModelD3MultiClippingUnionSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_swigregister = _StepVisual.StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_swigregister
StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect_swigregister(StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect)

class StepVisual_Array1OfCurveStyleFontPattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfCurveStyleFontPattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfCurveStyleFontPattern, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepVisual_CurveStyleFontPattern > >::iterator":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepVisual_CurveStyleFontPattern > >::iterator":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepVisual_CurveStyleFontPattern > >::const_iterator":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepVisual_CurveStyleFontPattern > >::const_iterator":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfCurveStyleFontPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepVisual_CurveStyleFontPattern > const &') -> "void":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfCurveStyleFontPattern') -> "NCollection_Array1< opencascade::handle< StepVisual_CurveStyleFontPattern > > &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfCurveStyleFontPattern') -> "NCollection_Array1< opencascade::handle< StepVisual_CurveStyleFontPattern > > &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepVisual_CurveStyleFontPattern > > &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Set(self, *args)

    def First(self) -> "opencascade::handle< StepVisual_CurveStyleFontPattern > const &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepVisual_CurveStyleFontPattern > &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepVisual_CurveStyleFontPattern > const &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepVisual_CurveStyleFontPattern > &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepVisual_CurveStyleFontPattern > const &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepVisual_CurveStyleFontPattern > &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepVisual_CurveStyleFontPattern > &":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepVisual_CurveStyleFontPattern > const &') -> "void":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfCurveStyleFontPattern
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfCurveStyleFontPattern_swigregister = _StepVisual.StepVisual_Array1OfCurveStyleFontPattern_swigregister
StepVisual_Array1OfCurveStyleFontPattern_swigregister(StepVisual_Array1OfCurveStyleFontPattern)

class StepVisual_Array1OfDirectionCountSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfDirectionCountSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfDirectionCountSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_DirectionCountSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_DirectionCountSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_DirectionCountSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_DirectionCountSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfDirectionCountSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_DirectionCountSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfDirectionCountSelect') -> "NCollection_Array1< StepVisual_DirectionCountSelect > &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfDirectionCountSelect') -> "NCollection_Array1< StepVisual_DirectionCountSelect > &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_DirectionCountSelect > &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Set(self, *args)

    def First(self) -> "StepVisual_DirectionCountSelect const &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_DirectionCountSelect &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_DirectionCountSelect const &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_DirectionCountSelect &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_DirectionCountSelect const &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_DirectionCountSelect &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_DirectionCountSelect &":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_DirectionCountSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfDirectionCountSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfDirectionCountSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfDirectionCountSelect_swigregister = _StepVisual.StepVisual_Array1OfDirectionCountSelect_swigregister
StepVisual_Array1OfDirectionCountSelect_swigregister(StepVisual_Array1OfDirectionCountSelect)

class StepVisual_Array1OfDraughtingCalloutElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfDraughtingCalloutElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfDraughtingCalloutElement, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_DraughtingCalloutElement >::iterator":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_DraughtingCalloutElement >::iterator":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_DraughtingCalloutElement >::const_iterator":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_DraughtingCalloutElement >::const_iterator":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfDraughtingCalloutElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_DraughtingCalloutElement') -> "void":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfDraughtingCalloutElement') -> "NCollection_Array1< StepVisual_DraughtingCalloutElement > &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfDraughtingCalloutElement') -> "NCollection_Array1< StepVisual_DraughtingCalloutElement > &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_DraughtingCalloutElement > &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Set(self, *args)

    def First(self) -> "StepVisual_DraughtingCalloutElement const &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_First(self)

    def ChangeFirst(self) -> "StepVisual_DraughtingCalloutElement &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_ChangeFirst(self)

    def Last(self) -> "StepVisual_DraughtingCalloutElement const &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Last(self)

    def ChangeLast(self) -> "StepVisual_DraughtingCalloutElement &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_DraughtingCalloutElement const &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_DraughtingCalloutElement &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_DraughtingCalloutElement &":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_DraughtingCalloutElement') -> "void":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfDraughtingCalloutElement
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfDraughtingCalloutElement_swigregister = _StepVisual.StepVisual_Array1OfDraughtingCalloutElement_swigregister
StepVisual_Array1OfDraughtingCalloutElement_swigregister(StepVisual_Array1OfDraughtingCalloutElement)

class StepVisual_Array1OfFillStyleSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfFillStyleSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfFillStyleSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_FillStyleSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_FillStyleSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_FillStyleSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_FillStyleSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfFillStyleSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_FillStyleSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfFillStyleSelect') -> "NCollection_Array1< StepVisual_FillStyleSelect > &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfFillStyleSelect') -> "NCollection_Array1< StepVisual_FillStyleSelect > &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_FillStyleSelect > &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Set(self, *args)

    def First(self) -> "StepVisual_FillStyleSelect const &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_FillStyleSelect &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_FillStyleSelect const &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_FillStyleSelect &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_FillStyleSelect const &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_FillStyleSelect &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_FillStyleSelect &":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_FillStyleSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfFillStyleSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfFillStyleSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfFillStyleSelect_swigregister = _StepVisual.StepVisual_Array1OfFillStyleSelect_swigregister
StepVisual_Array1OfFillStyleSelect_swigregister(StepVisual_Array1OfFillStyleSelect)

class StepVisual_Array1OfInvisibleItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfInvisibleItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfInvisibleItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_InvisibleItem >::iterator":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_InvisibleItem >::iterator":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_InvisibleItem >::const_iterator":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_InvisibleItem >::const_iterator":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfInvisibleItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_InvisibleItem') -> "void":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfInvisibleItem') -> "NCollection_Array1< StepVisual_InvisibleItem > &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfInvisibleItem') -> "NCollection_Array1< StepVisual_InvisibleItem > &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_InvisibleItem > &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Set(self, *args)

    def First(self) -> "StepVisual_InvisibleItem const &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_First(self)

    def ChangeFirst(self) -> "StepVisual_InvisibleItem &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_ChangeFirst(self)

    def Last(self) -> "StepVisual_InvisibleItem const &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Last(self)

    def ChangeLast(self) -> "StepVisual_InvisibleItem &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_InvisibleItem const &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_InvisibleItem &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_InvisibleItem &":
        return _StepVisual.StepVisual_Array1OfInvisibleItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_InvisibleItem') -> "void":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfInvisibleItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfInvisibleItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfInvisibleItem_swigregister = _StepVisual.StepVisual_Array1OfInvisibleItem_swigregister
StepVisual_Array1OfInvisibleItem_swigregister(StepVisual_Array1OfInvisibleItem)

class StepVisual_Array1OfLayeredItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfLayeredItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfLayeredItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_LayeredItem >::iterator":
        return _StepVisual.StepVisual_Array1OfLayeredItem_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_LayeredItem >::iterator":
        return _StepVisual.StepVisual_Array1OfLayeredItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_LayeredItem >::const_iterator":
        return _StepVisual.StepVisual_Array1OfLayeredItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_LayeredItem >::const_iterator":
        return _StepVisual.StepVisual_Array1OfLayeredItem_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfLayeredItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_LayeredItem') -> "void":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfLayeredItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfLayeredItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfLayeredItem_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfLayeredItem') -> "NCollection_Array1< StepVisual_LayeredItem > &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfLayeredItem') -> "NCollection_Array1< StepVisual_LayeredItem > &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_LayeredItem > &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Set(self, *args)

    def First(self) -> "StepVisual_LayeredItem const &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_First(self)

    def ChangeFirst(self) -> "StepVisual_LayeredItem &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_ChangeFirst(self)

    def Last(self) -> "StepVisual_LayeredItem const &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Last(self)

    def ChangeLast(self) -> "StepVisual_LayeredItem &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_LayeredItem const &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_LayeredItem &":
        return _StepVisual.StepVisual_Array1OfLayeredItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_LayeredItem &":
        return _StepVisual.StepVisual_Array1OfLayeredItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_LayeredItem') -> "void":
        return _StepVisual.StepVisual_Array1OfLayeredItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfLayeredItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfLayeredItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfLayeredItem_swigregister = _StepVisual.StepVisual_Array1OfLayeredItem_swigregister
StepVisual_Array1OfLayeredItem_swigregister(StepVisual_Array1OfLayeredItem)

class StepVisual_Array1OfPresentationStyleAssignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfPresentationStyleAssignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfPresentationStyleAssignment, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepVisual_PresentationStyleAssignment > >::iterator":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepVisual_PresentationStyleAssignment > >::iterator":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepVisual_PresentationStyleAssignment > >::const_iterator":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepVisual_PresentationStyleAssignment > >::const_iterator":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfPresentationStyleAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepVisual_PresentationStyleAssignment > const &') -> "void":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfPresentationStyleAssignment') -> "NCollection_Array1< opencascade::handle< StepVisual_PresentationStyleAssignment > > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfPresentationStyleAssignment') -> "NCollection_Array1< opencascade::handle< StepVisual_PresentationStyleAssignment > > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepVisual_PresentationStyleAssignment > > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Set(self, *args)

    def First(self) -> "opencascade::handle< StepVisual_PresentationStyleAssignment > const &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepVisual_PresentationStyleAssignment > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepVisual_PresentationStyleAssignment > const &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepVisual_PresentationStyleAssignment > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepVisual_PresentationStyleAssignment > const &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepVisual_PresentationStyleAssignment > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepVisual_PresentationStyleAssignment > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepVisual_PresentationStyleAssignment > const &') -> "void":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfPresentationStyleAssignment
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfPresentationStyleAssignment_swigregister = _StepVisual.StepVisual_Array1OfPresentationStyleAssignment_swigregister
StepVisual_Array1OfPresentationStyleAssignment_swigregister(StepVisual_Array1OfPresentationStyleAssignment)

class StepVisual_Array1OfPresentationStyleSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfPresentationStyleSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfPresentationStyleSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_PresentationStyleSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_PresentationStyleSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_PresentationStyleSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_PresentationStyleSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfPresentationStyleSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_PresentationStyleSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfPresentationStyleSelect') -> "NCollection_Array1< StepVisual_PresentationStyleSelect > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfPresentationStyleSelect') -> "NCollection_Array1< StepVisual_PresentationStyleSelect > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_PresentationStyleSelect > &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Set(self, *args)

    def First(self) -> "StepVisual_PresentationStyleSelect const &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_PresentationStyleSelect &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_PresentationStyleSelect const &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_PresentationStyleSelect &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_PresentationStyleSelect const &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_PresentationStyleSelect &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_PresentationStyleSelect &":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_PresentationStyleSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfPresentationStyleSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfPresentationStyleSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfPresentationStyleSelect_swigregister = _StepVisual.StepVisual_Array1OfPresentationStyleSelect_swigregister
StepVisual_Array1OfPresentationStyleSelect_swigregister(StepVisual_Array1OfPresentationStyleSelect)

class StepVisual_Array1OfRenderingPropertiesSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfRenderingPropertiesSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfRenderingPropertiesSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_RenderingPropertiesSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_RenderingPropertiesSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_RenderingPropertiesSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_RenderingPropertiesSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfRenderingPropertiesSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_RenderingPropertiesSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfRenderingPropertiesSelect') -> "NCollection_Array1< StepVisual_RenderingPropertiesSelect > &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfRenderingPropertiesSelect') -> "NCollection_Array1< StepVisual_RenderingPropertiesSelect > &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_RenderingPropertiesSelect > &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Set(self, *args)

    def First(self) -> "StepVisual_RenderingPropertiesSelect const &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_RenderingPropertiesSelect &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_RenderingPropertiesSelect const &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_RenderingPropertiesSelect &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_RenderingPropertiesSelect const &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_RenderingPropertiesSelect &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_RenderingPropertiesSelect &":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_RenderingPropertiesSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfRenderingPropertiesSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfRenderingPropertiesSelect_swigregister = _StepVisual.StepVisual_Array1OfRenderingPropertiesSelect_swigregister
StepVisual_Array1OfRenderingPropertiesSelect_swigregister(StepVisual_Array1OfRenderingPropertiesSelect)

class StepVisual_Array1OfStyleContextSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfStyleContextSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfStyleContextSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_StyleContextSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_StyleContextSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_StyleContextSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_StyleContextSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfStyleContextSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_StyleContextSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfStyleContextSelect') -> "NCollection_Array1< StepVisual_StyleContextSelect > &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfStyleContextSelect') -> "NCollection_Array1< StepVisual_StyleContextSelect > &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_StyleContextSelect > &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Set(self, *args)

    def First(self) -> "StepVisual_StyleContextSelect const &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_StyleContextSelect &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_StyleContextSelect const &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_StyleContextSelect &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_StyleContextSelect const &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_StyleContextSelect &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_StyleContextSelect &":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_StyleContextSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfStyleContextSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfStyleContextSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfStyleContextSelect_swigregister = _StepVisual.StepVisual_Array1OfStyleContextSelect_swigregister
StepVisual_Array1OfStyleContextSelect_swigregister(StepVisual_Array1OfStyleContextSelect)

class StepVisual_Array1OfSurfaceStyleElementSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfSurfaceStyleElementSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfSurfaceStyleElementSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_SurfaceStyleElementSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_SurfaceStyleElementSelect >::iterator":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_SurfaceStyleElementSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_SurfaceStyleElementSelect >::const_iterator":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfSurfaceStyleElementSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_SurfaceStyleElementSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfSurfaceStyleElementSelect') -> "NCollection_Array1< StepVisual_SurfaceStyleElementSelect > &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfSurfaceStyleElementSelect') -> "NCollection_Array1< StepVisual_SurfaceStyleElementSelect > &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_SurfaceStyleElementSelect > &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Set(self, *args)

    def First(self) -> "StepVisual_SurfaceStyleElementSelect const &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_First(self)

    def ChangeFirst(self) -> "StepVisual_SurfaceStyleElementSelect &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_ChangeFirst(self)

    def Last(self) -> "StepVisual_SurfaceStyleElementSelect const &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Last(self)

    def ChangeLast(self) -> "StepVisual_SurfaceStyleElementSelect &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_SurfaceStyleElementSelect const &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_SurfaceStyleElementSelect &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_SurfaceStyleElementSelect &":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_SurfaceStyleElementSelect') -> "void":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfSurfaceStyleElementSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfSurfaceStyleElementSelect_swigregister = _StepVisual.StepVisual_Array1OfSurfaceStyleElementSelect_swigregister
StepVisual_Array1OfSurfaceStyleElementSelect_swigregister(StepVisual_Array1OfSurfaceStyleElementSelect)

class StepVisual_Array1OfTessellatedItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfTessellatedItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfTessellatedItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepVisual_TessellatedItem > >::iterator":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepVisual_TessellatedItem > >::iterator":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepVisual_TessellatedItem > >::const_iterator":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepVisual_TessellatedItem > >::const_iterator":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfTessellatedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepVisual_TessellatedItem > const &') -> "void":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfTessellatedItem') -> "NCollection_Array1< opencascade::handle< StepVisual_TessellatedItem > > &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfTessellatedItem') -> "NCollection_Array1< opencascade::handle< StepVisual_TessellatedItem > > &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepVisual_TessellatedItem > > &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Set(self, *args)

    def First(self) -> "opencascade::handle< StepVisual_TessellatedItem > const &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepVisual_TessellatedItem > &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepVisual_TessellatedItem > const &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepVisual_TessellatedItem > &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepVisual_TessellatedItem > const &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepVisual_TessellatedItem > &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepVisual_TessellatedItem > &":
        return _StepVisual.StepVisual_Array1OfTessellatedItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepVisual_TessellatedItem > const &') -> "void":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfTessellatedItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfTessellatedItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfTessellatedItem_swigregister = _StepVisual.StepVisual_Array1OfTessellatedItem_swigregister
StepVisual_Array1OfTessellatedItem_swigregister(StepVisual_Array1OfTessellatedItem)

class StepVisual_Array1OfTextOrCharacter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Array1OfTextOrCharacter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Array1OfTextOrCharacter, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepVisual_TextOrCharacter >::iterator":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_begin(self)

    def end(self) -> "NCollection_Array1< StepVisual_TextOrCharacter >::iterator":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_end(self)

    def cbegin(self) -> "NCollection_Array1< StepVisual_TextOrCharacter >::const_iterator":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepVisual_TextOrCharacter >::const_iterator":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_Array1OfTextOrCharacter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepVisual_TextOrCharacter') -> "void":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_IsAllocated(self)

    def Assign(self, theOther: 'StepVisual_Array1OfTextOrCharacter') -> "NCollection_Array1< StepVisual_TextOrCharacter > &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Assign(self, theOther)

    def Move(self, theOther: 'StepVisual_Array1OfTextOrCharacter') -> "NCollection_Array1< StepVisual_TextOrCharacter > &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepVisual_TextOrCharacter > &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Set(self, *args)

    def First(self) -> "StepVisual_TextOrCharacter const &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_First(self)

    def ChangeFirst(self) -> "StepVisual_TextOrCharacter &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_ChangeFirst(self)

    def Last(self) -> "StepVisual_TextOrCharacter const &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Last(self)

    def ChangeLast(self) -> "StepVisual_TextOrCharacter &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepVisual_TextOrCharacter const &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepVisual_TextOrCharacter &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepVisual_TextOrCharacter &":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepVisual_TextOrCharacter') -> "void":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepVisual.StepVisual_Array1OfTextOrCharacter_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepVisual.delete_StepVisual_Array1OfTextOrCharacter
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepVisual_Array1OfTextOrCharacter_swigregister = _StepVisual.StepVisual_Array1OfTextOrCharacter_swigregister
StepVisual_Array1OfTextOrCharacter_swigregister(StepVisual_Array1OfTextOrCharacter)

class StepVisual_VectorOfHSequenceOfInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_VectorOfHSequenceOfInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_VectorOfHSequenceOfInteger, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Vector< opencascade::handle< TColStd_HSequenceOfInteger > >::iterator":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_begin(self)

    def end(self) -> "NCollection_Vector< opencascade::handle< TColStd_HSequenceOfInteger > >::iterator":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_end(self)

    def cbegin(self) -> "NCollection_Vector< opencascade::handle< TColStd_HSequenceOfInteger > >::const_iterator":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_cbegin(self)

    def cend(self) -> "NCollection_Vector< opencascade::handle< TColStd_HSequenceOfInteger > >::const_iterator":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_cend(self)

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_VectorOfHSequenceOfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepVisual.delete_StepVisual_VectorOfHSequenceOfInteger
    __del__ = lambda self: None

    def Length(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Length(self)

    def Size(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Size(self)

    def Lower(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Upper(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_IsEmpty(self)

    def Assign(self, *args) -> "void":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Assign(self, *args)

    def Set(self, theOther: 'StepVisual_VectorOfHSequenceOfInteger') -> "NCollection_Vector< opencascade::handle< TColStd_HSequenceOfInteger > > &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Set(self, theOther)

    def Append(self, theValue: 'opencascade::handle< TColStd_HSequenceOfInteger > const &') -> "opencascade::handle< TColStd_HSequenceOfInteger > &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Append(self, theValue)

    def Appended(self) -> "opencascade::handle< TColStd_HSequenceOfInteger > &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Appended(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TColStd_HSequenceOfInteger > const &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Value(self, theIndex)

    def First(self) -> "opencascade::handle< TColStd_HSequenceOfInteger > const &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_First(self)

    def ChangeFirst(self) -> "opencascade::handle< TColStd_HSequenceOfInteger > &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< TColStd_HSequenceOfInteger > const &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_Last(self)

    def ChangeLast(self) -> "opencascade::handle< TColStd_HSequenceOfInteger > &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_ChangeLast(self)

    def __call__(self, *args) -> "opencascade::handle< TColStd_HSequenceOfInteger > &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger___call__(self, *args)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< TColStd_HSequenceOfInteger > &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_ChangeValue(self, theIndex)

    def SetValue(self, theIndex: 'Standard_Integer const', theValue: 'opencascade::handle< TColStd_HSequenceOfInteger > const &') -> "opencascade::handle< TColStd_HSequenceOfInteger > &":
        return _StepVisual.StepVisual_VectorOfHSequenceOfInteger_SetValue(self, theIndex, theValue)
StepVisual_VectorOfHSequenceOfInteger_swigregister = _StepVisual.StepVisual_VectorOfHSequenceOfInteger_swigregister
StepVisual_VectorOfHSequenceOfInteger_swigregister(StepVisual_VectorOfHSequenceOfInteger)

class StepVisual_AnnotationFillArea(OCC.Core.StepShape.StepShape_GeometricCurveSet):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepShape.StepShape_GeometricCurveSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationFillArea, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepShape.StepShape_GeometricCurveSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationFillArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a annotationfillarea.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationFillArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AnnotationFillArea_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationFillArea
    __del__ = lambda self: None
StepVisual_AnnotationFillArea_swigregister = _StepVisual.StepVisual_AnnotationFillArea_swigregister
StepVisual_AnnotationFillArea_swigregister(StepVisual_AnnotationFillArea)

class StepVisual_AnnotationPlaneElement(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationPlaneElement, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationPlaneElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a annotationplaneelement select type.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationPlaneElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DraughtingCallout(self, *args) -> "opencascade::handle< StepVisual_DraughtingCallout >":
        """
        Returns value as a draughtingcallout (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_DraughtingCallout>

        """
        return _StepVisual.StepVisual_AnnotationPlaneElement_DraughtingCallout(self, *args)


    def StyledItem(self, *args) -> "opencascade::handle< StepVisual_StyledItem >":
        """
        Returns value as a styleditem (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_StyledItem>

        """
        return _StepVisual.StepVisual_AnnotationPlaneElement_StyledItem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationPlaneElement
    __del__ = lambda self: None
StepVisual_AnnotationPlaneElement_swigregister = _StepVisual.StepVisual_AnnotationPlaneElement_swigregister
StepVisual_AnnotationPlaneElement_swigregister(StepVisual_AnnotationPlaneElement)

class StepVisual_AnnotationText(OCC.Core.StepRepr.StepRepr_MappedItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_MappedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationText, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_MappedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a annotationtext.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AnnotationText_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationText
    __del__ = lambda self: None
StepVisual_AnnotationText_swigregister = _StepVisual.StepVisual_AnnotationText_swigregister
StepVisual_AnnotationText_swigregister(StepVisual_AnnotationText)

class StepVisual_AreaInSet(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AreaInSet, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AreaInSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a areainset.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AreaInSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Area(self, *args) -> "opencascade::handle< StepVisual_PresentationArea >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PresentationArea>

        """
        return _StepVisual.StepVisual_AreaInSet_Area(self, *args)


    def InSet(self, *args) -> "opencascade::handle< StepVisual_PresentationSet >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PresentationSet>

        """
        return _StepVisual.StepVisual_AreaInSet_InSet(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aArea: StepVisual_PresentationArea
        aInSet: StepVisual_PresentationSet

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_AreaInSet_Init(self, *args)


    def SetArea(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aArea: StepVisual_PresentationArea

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_AreaInSet_SetArea(self, *args)


    def SetInSet(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aInSet: StepVisual_PresentationSet

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_AreaInSet_SetInSet(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AreaInSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AreaInSet
    __del__ = lambda self: None
StepVisual_AreaInSet_swigregister = _StepVisual.StepVisual_AreaInSet_swigregister
StepVisual_AreaInSet_swigregister(StepVisual_AreaInSet)

class StepVisual_AreaOrView(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AreaOrView, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AreaOrView, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a areaorview selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AreaOrView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PresentationArea(self, *args) -> "opencascade::handle< StepVisual_PresentationArea >":
        """
        Returns value as a presentationarea (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationArea>

        """
        return _StepVisual.StepVisual_AreaOrView_PresentationArea(self, *args)


    def PresentationView(self, *args) -> "opencascade::handle< StepVisual_PresentationView >":
        """
        Returns value as a presentationview (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationView>

        """
        return _StepVisual.StepVisual_AreaOrView_PresentationView(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AreaOrView
    __del__ = lambda self: None
StepVisual_AreaOrView_swigregister = _StepVisual.StepVisual_AreaOrView_swigregister
StepVisual_AreaOrView_swigregister(StepVisual_AreaOrView)

class StepVisual_BoxCharacteristicSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_BoxCharacteristicSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_BoxCharacteristicSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_BoxCharacteristicSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def RealValue(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_BoxCharacteristicSelect_RealValue(self, *args)


    def SetRealValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aValue: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_BoxCharacteristicSelect_SetRealValue(self, *args)


    def SetTypeOfContent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aType: int

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_BoxCharacteristicSelect_SetTypeOfContent(self, *args)


    def TypeOfContent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_BoxCharacteristicSelect_TypeOfContent(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_BoxCharacteristicSelect
    __del__ = lambda self: None
StepVisual_BoxCharacteristicSelect_swigregister = _StepVisual.StepVisual_BoxCharacteristicSelect_swigregister
StepVisual_BoxCharacteristicSelect_swigregister(StepVisual_BoxCharacteristicSelect)

class StepVisual_CameraImage(OCC.Core.StepRepr.StepRepr_MappedItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_MappedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraImage, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_MappedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraImage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a cameraimage.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraImage_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraImage
    __del__ = lambda self: None
StepVisual_CameraImage_swigregister = _StepVisual.StepVisual_CameraImage_swigregister
StepVisual_CameraImage_swigregister(StepVisual_CameraImage)

class StepVisual_CameraModel(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a cameramodel.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraModel
    __del__ = lambda self: None
StepVisual_CameraModel_swigregister = _StepVisual.StepVisual_CameraModel_swigregister
StepVisual_CameraModel_swigregister(StepVisual_CameraModel)

class StepVisual_CameraModelD3MultiClippingInterectionSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraModelD3MultiClippingInterectionSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraModelD3MultiClippingInterectionSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a cameramodeld3multiclippinginterectionselect select type.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraModelD3MultiClippingInterectionSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CameraModelD3MultiClippingUnion(self, *args) -> "opencascade::handle< StepVisual_CameraModelD3MultiClippingUnion >":
        """
        Returns value as a cameramodeld3multiclippingunion (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_CameraModelD3MultiClippingUnion>

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingInterectionSelect_CameraModelD3MultiClippingUnion(self, *args)


    def Plane(self, *args) -> "opencascade::handle< StepGeom_Plane >":
        """
        Returns value as a plane (null if another type).

        Returns
        -------
        opencascade::handle<StepGeom_Plane>

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingInterectionSelect_Plane(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraModelD3MultiClippingInterectionSelect
    __del__ = lambda self: None
StepVisual_CameraModelD3MultiClippingInterectionSelect_swigregister = _StepVisual.StepVisual_CameraModelD3MultiClippingInterectionSelect_swigregister
StepVisual_CameraModelD3MultiClippingInterectionSelect_swigregister(StepVisual_CameraModelD3MultiClippingInterectionSelect)

class StepVisual_CameraModelD3MultiClippingIntersection(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraModelD3MultiClippingIntersection, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraModelD3MultiClippingIntersection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a stepvisual_cameramodeld3multiclippingintersection.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraModelD3MultiClippingIntersection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theShapeClipping: StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingIntersection_Init(self, *args)


    def SetShapeClipping(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theShapeClipping: StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingIntersection_SetShapeClipping(self, *args)


    def ShapeClipping(self, *args) -> "opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect > const":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect>

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingIntersection_ShapeClipping(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraModelD3MultiClippingIntersection_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraModelD3MultiClippingIntersection
    __del__ = lambda self: None
StepVisual_CameraModelD3MultiClippingIntersection_swigregister = _StepVisual.StepVisual_CameraModelD3MultiClippingIntersection_swigregister
StepVisual_CameraModelD3MultiClippingIntersection_swigregister(StepVisual_CameraModelD3MultiClippingIntersection)

class StepVisual_CameraModelD3MultiClippingUnion(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraModelD3MultiClippingUnion, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraModelD3MultiClippingUnion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a stepvisual_cameramodeld3multiclippingunion.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraModelD3MultiClippingUnion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theShapeClipping: StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingUnion_Init(self, *args)


    def SetShapeClipping(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theShapeClipping: StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingUnion_SetShapeClipping(self, *args)


    def ShapeClipping(self, *args) -> "opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect > const":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect>

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingUnion_ShapeClipping(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraModelD3MultiClippingUnion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraModelD3MultiClippingUnion
    __del__ = lambda self: None
StepVisual_CameraModelD3MultiClippingUnion_swigregister = _StepVisual.StepVisual_CameraModelD3MultiClippingUnion_swigregister
StepVisual_CameraModelD3MultiClippingUnion_swigregister(StepVisual_CameraModelD3MultiClippingUnion)

class StepVisual_CameraModelD3MultiClippingUnionSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraModelD3MultiClippingUnionSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraModelD3MultiClippingUnionSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a cameramodeld3multiclippingunionselect select type.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraModelD3MultiClippingUnionSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CameraModelD3MultiClippingIntersection(self, *args) -> "opencascade::handle< StepVisual_CameraModelD3MultiClippingIntersection >":
        """
        Returns value as a cameramodeld3multiclippingintersection (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_CameraModelD3MultiClippingIntersection>

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingUnionSelect_CameraModelD3MultiClippingIntersection(self, *args)


    def Plane(self, *args) -> "opencascade::handle< StepGeom_Plane >":
        """
        Returns value as a plane (null if another type).

        Returns
        -------
        opencascade::handle<StepGeom_Plane>

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClippingUnionSelect_Plane(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraModelD3MultiClippingUnionSelect
    __del__ = lambda self: None
StepVisual_CameraModelD3MultiClippingUnionSelect_swigregister = _StepVisual.StepVisual_CameraModelD3MultiClippingUnionSelect_swigregister
StepVisual_CameraModelD3MultiClippingUnionSelect_swigregister(StepVisual_CameraModelD3MultiClippingUnionSelect)

class StepVisual_CameraUsage(OCC.Core.StepRepr.StepRepr_RepresentationMap):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraUsage, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraUsage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a camerausage.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraUsage_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraUsage
    __del__ = lambda self: None
StepVisual_CameraUsage_swigregister = _StepVisual.StepVisual_CameraUsage_swigregister
StepVisual_CameraUsage_swigregister(StepVisual_CameraUsage)

class StepVisual_Colour(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Colour, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Colour, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a colour.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_Colour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_Colour_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_Colour
    __del__ = lambda self: None
StepVisual_Colour_swigregister = _StepVisual.StepVisual_Colour_swigregister
StepVisual_Colour_swigregister(StepVisual_Colour)

class StepVisual_CompositeText(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CompositeText, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CompositeText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a compositetext.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CompositeText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CollectedText(self, *args) -> "opencascade::handle< StepVisual_HArray1OfTextOrCharacter >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfTextOrCharacter>

        """
        return _StepVisual.StepVisual_CompositeText_CollectedText(self, *args)


    def CollectedTextValue(self, *args) -> "StepVisual_TextOrCharacter":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_TextOrCharacter

        """
        return _StepVisual.StepVisual_CompositeText_CollectedTextValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aCollectedText: StepVisual_HArray1OfTextOrCharacter

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CompositeText_Init(self, *args)


    def NbCollectedText(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_CompositeText_NbCollectedText(self, *args)


    def SetCollectedText(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCollectedText: StepVisual_HArray1OfTextOrCharacter

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CompositeText_SetCollectedText(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CompositeText_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CompositeText
    __del__ = lambda self: None
StepVisual_CompositeText_swigregister = _StepVisual.StepVisual_CompositeText_swigregister
StepVisual_CompositeText_swigregister(StepVisual_CompositeText)

class StepVisual_CurveStyle(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CurveStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CurveStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a curvestyle.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CurveStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CurveColour(self, *args) -> "opencascade::handle< StepVisual_Colour >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_Colour>

        """
        return _StepVisual.StepVisual_CurveStyle_CurveColour(self, *args)


    def CurveFont(self, *args) -> "StepVisual_CurveStyleFontSelect":
        """
        No available documentation.

        Returns
        -------
        StepVisual_CurveStyleFontSelect

        """
        return _StepVisual.StepVisual_CurveStyle_CurveFont(self, *args)


    def CurveWidth(self, *args) -> "StepBasic_SizeSelect":
        """
        No available documentation.

        Returns
        -------
        StepBasic_SizeSelect

        """
        return _StepVisual.StepVisual_CurveStyle_CurveWidth(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aCurveFont: StepVisual_CurveStyleFontSelect
        aCurveWidth: StepBasic_SizeSelect
        aCurveColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyle_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_CurveStyle_Name(self, *args)


    def SetCurveColour(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCurveColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyle_SetCurveColour(self, *args)


    def SetCurveFont(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCurveFont: StepVisual_CurveStyleFontSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyle_SetCurveFont(self, *args)


    def SetCurveWidth(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCurveWidth: StepBasic_SizeSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyle_SetCurveWidth(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyle_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CurveStyle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CurveStyle
    __del__ = lambda self: None
StepVisual_CurveStyle_swigregister = _StepVisual.StepVisual_CurveStyle_swigregister
StepVisual_CurveStyle_swigregister(StepVisual_CurveStyle)

class StepVisual_CurveStyleFont(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CurveStyleFont, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CurveStyleFont, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a curvestylefont.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CurveStyleFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPatternList: StepVisual_HArray1OfCurveStyleFontPattern

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyleFont_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_CurveStyleFont_Name(self, *args)


    def NbPatternList(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_CurveStyleFont_NbPatternList(self, *args)


    def PatternList(self, *args) -> "opencascade::handle< StepVisual_HArray1OfCurveStyleFontPattern >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfCurveStyleFontPattern>

        """
        return _StepVisual.StepVisual_CurveStyleFont_PatternList(self, *args)


    def PatternListValue(self, *args) -> "opencascade::handle< StepVisual_CurveStyleFontPattern >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepVisual_CurveStyleFontPattern>

        """
        return _StepVisual.StepVisual_CurveStyleFont_PatternListValue(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyleFont_SetName(self, *args)


    def SetPatternList(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPatternList: StepVisual_HArray1OfCurveStyleFontPattern

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyleFont_SetPatternList(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CurveStyleFont_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CurveStyleFont
    __del__ = lambda self: None
StepVisual_CurveStyleFont_swigregister = _StepVisual.StepVisual_CurveStyleFont_swigregister
StepVisual_CurveStyleFont_swigregister(StepVisual_CurveStyleFont)

class StepVisual_CurveStyleFontPattern(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CurveStyleFontPattern, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CurveStyleFontPattern, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a curvestylefontpattern.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CurveStyleFontPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aVisibleSegmentLength: float
        aInvisibleSegmentLength: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyleFontPattern_Init(self, *args)


    def InvisibleSegmentLength(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_CurveStyleFontPattern_InvisibleSegmentLength(self, *args)


    def SetInvisibleSegmentLength(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aInvisibleSegmentLength: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyleFontPattern_SetInvisibleSegmentLength(self, *args)


    def SetVisibleSegmentLength(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aVisibleSegmentLength: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CurveStyleFontPattern_SetVisibleSegmentLength(self, *args)


    def VisibleSegmentLength(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_CurveStyleFontPattern_VisibleSegmentLength(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CurveStyleFontPattern_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CurveStyleFontPattern
    __del__ = lambda self: None
StepVisual_CurveStyleFontPattern_swigregister = _StepVisual.StepVisual_CurveStyleFontPattern_swigregister
StepVisual_CurveStyleFontPattern_swigregister(StepVisual_CurveStyleFontPattern)

class StepVisual_CurveStyleFontSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CurveStyleFontSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CurveStyleFontSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a curvestylefontselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CurveStyleFontSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CurveStyleFont(self, *args) -> "opencascade::handle< StepVisual_CurveStyleFont >":
        """
        Returns value as a curvestylefont (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_CurveStyleFont>

        """
        return _StepVisual.StepVisual_CurveStyleFontSelect_CurveStyleFont(self, *args)


    def ExternallyDefinedCurveFont(self, *args) -> "opencascade::handle< StepVisual_ExternallyDefinedCurveFont >":
        """
        Returns value as a externallydefinedcurvefont (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_ExternallyDefinedCurveFont>

        """
        return _StepVisual.StepVisual_CurveStyleFontSelect_ExternallyDefinedCurveFont(self, *args)


    def PreDefinedCurveFont(self, *args) -> "opencascade::handle< StepVisual_PreDefinedCurveFont >":
        """
        Returns value as a predefinedcurvefont (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PreDefinedCurveFont>

        """
        return _StepVisual.StepVisual_CurveStyleFontSelect_PreDefinedCurveFont(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CurveStyleFontSelect
    __del__ = lambda self: None
StepVisual_CurveStyleFontSelect_swigregister = _StepVisual.StepVisual_CurveStyleFontSelect_swigregister
StepVisual_CurveStyleFontSelect_swigregister(StepVisual_CurveStyleFontSelect)

class StepVisual_DirectionCountSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_DirectionCountSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_DirectionCountSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_DirectionCountSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetTypeOfContent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTypeOfContent: int

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_DirectionCountSelect_SetTypeOfContent(self, *args)


    def SetUDirectionCount(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aUDirectionCount: int

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_DirectionCountSelect_SetUDirectionCount(self, *args)


    def SetVDirectionCount(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aUDirectionCount: int

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_DirectionCountSelect_SetVDirectionCount(self, *args)


    def TypeOfContent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_DirectionCountSelect_TypeOfContent(self, *args)


    def UDirectionCount(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_DirectionCountSelect_UDirectionCount(self, *args)


    def VDirectionCount(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_DirectionCountSelect_VDirectionCount(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_DirectionCountSelect
    __del__ = lambda self: None
StepVisual_DirectionCountSelect_swigregister = _StepVisual.StepVisual_DirectionCountSelect_swigregister
StepVisual_DirectionCountSelect_swigregister(StepVisual_DirectionCountSelect)

class StepVisual_DraughtingCallout(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_DraughtingCallout, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_DraughtingCallout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a draughtingcallout.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_DraughtingCallout(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Contents(self, *args) -> "opencascade::handle< StepVisual_HArray1OfDraughtingCalloutElement >":
        """
        Returns field contents.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfDraughtingCalloutElement>

        """
        return _StepVisual.StepVisual_DraughtingCallout_Contents(self, *args)


    def ContentsValue(self, *args) -> "StepVisual_DraughtingCalloutElement":
        """
        Returns contents with the given number.

        Parameters
        ----------
        theNum: int

        Returns
        -------
        StepVisual_DraughtingCalloutElement

        """
        return _StepVisual.StepVisual_DraughtingCallout_ContentsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        Init.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theContents: StepVisual_HArray1OfDraughtingCalloutElement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_DraughtingCallout_Init(self, *args)


    def NbContents(self, *args) -> "Standard_Integer":
        """
        Returns number of contents.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_DraughtingCallout_NbContents(self, *args)


    def SetContents(self, *args) -> "void":
        """
        Set field contents.

        Parameters
        ----------
        theContents: StepVisual_HArray1OfDraughtingCalloutElement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_DraughtingCallout_SetContents(self, *args)


    def SetContentsValue(self, *args) -> "void":
        """
        Sets contents with given number.

        Parameters
        ----------
        theNum: int
        theItem: StepVisual_DraughtingCalloutElement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_DraughtingCallout_SetContentsValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_DraughtingCallout_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_DraughtingCallout
    __del__ = lambda self: None
StepVisual_DraughtingCallout_swigregister = _StepVisual.StepVisual_DraughtingCallout_swigregister
StepVisual_DraughtingCallout_swigregister(StepVisual_DraughtingCallout)

class StepVisual_DraughtingCalloutElement(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_DraughtingCalloutElement, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_DraughtingCalloutElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a draughtingcalloutelement select type.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_DraughtingCalloutElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AnnotationCurveOccurrence(self, *args) -> "opencascade::handle< StepVisual_AnnotationCurveOccurrence >":
        """
        Returns value as a annotationcurveoccurrence (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_AnnotationCurveOccurrence>

        """
        return _StepVisual.StepVisual_DraughtingCalloutElement_AnnotationCurveOccurrence(self, *args)


    def AnnotationFillAreaOccurrence(self, *args) -> "opencascade::handle< StepVisual_AnnotationFillAreaOccurrence >":
        """
        Returns value as a annotationfillareaoccurrence.

        Returns
        -------
        opencascade::handle<StepVisual_AnnotationFillAreaOccurrence>

        """
        return _StepVisual.StepVisual_DraughtingCalloutElement_AnnotationFillAreaOccurrence(self, *args)


    def AnnotationTextOccurrence(self, *args) -> "opencascade::handle< StepVisual_AnnotationTextOccurrence >":
        """
        Returns value as a annotationtextoccurrence.

        Returns
        -------
        opencascade::handle<StepVisual_AnnotationTextOccurrence>

        """
        return _StepVisual.StepVisual_DraughtingCalloutElement_AnnotationTextOccurrence(self, *args)


    def TessellatedAnnotationOccurrence(self, *args) -> "opencascade::handle< StepVisual_TessellatedAnnotationOccurrence >":
        """
        Returns value as a tessellatedannotationoccurrence.

        Returns
        -------
        opencascade::handle<StepVisual_TessellatedAnnotationOccurrence>

        """
        return _StepVisual.StepVisual_DraughtingCalloutElement_TessellatedAnnotationOccurrence(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_DraughtingCalloutElement
    __del__ = lambda self: None
StepVisual_DraughtingCalloutElement_swigregister = _StepVisual.StepVisual_DraughtingCalloutElement_swigregister
StepVisual_DraughtingCalloutElement_swigregister(StepVisual_DraughtingCalloutElement)

class StepVisual_DraughtingModel(OCC.Core.StepRepr.StepRepr_Representation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_DraughtingModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_DraughtingModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_DraughtingModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_DraughtingModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_DraughtingModel
    __del__ = lambda self: None
StepVisual_DraughtingModel_swigregister = _StepVisual.StepVisual_DraughtingModel_swigregister
StepVisual_DraughtingModel_swigregister(StepVisual_DraughtingModel)

class StepVisual_ExternallyDefinedCurveFont(OCC.Core.StepBasic.StepBasic_ExternallyDefinedItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ExternallyDefinedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_ExternallyDefinedCurveFont, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ExternallyDefinedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_ExternallyDefinedCurveFont, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_ExternallyDefinedCurveFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_ExternallyDefinedCurveFont_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_ExternallyDefinedCurveFont
    __del__ = lambda self: None
StepVisual_ExternallyDefinedCurveFont_swigregister = _StepVisual.StepVisual_ExternallyDefinedCurveFont_swigregister
StepVisual_ExternallyDefinedCurveFont_swigregister(StepVisual_ExternallyDefinedCurveFont)

class StepVisual_ExternallyDefinedTextFont(OCC.Core.StepBasic.StepBasic_ExternallyDefinedItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ExternallyDefinedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_ExternallyDefinedTextFont, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ExternallyDefinedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_ExternallyDefinedTextFont, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_ExternallyDefinedTextFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_ExternallyDefinedTextFont_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_ExternallyDefinedTextFont
    __del__ = lambda self: None
StepVisual_ExternallyDefinedTextFont_swigregister = _StepVisual.StepVisual_ExternallyDefinedTextFont_swigregister
StepVisual_ExternallyDefinedTextFont_swigregister(StepVisual_ExternallyDefinedTextFont)

class StepVisual_FillAreaStyle(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_FillAreaStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_FillAreaStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a fillareastyle.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_FillAreaStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FillStyles(self, *args) -> "opencascade::handle< StepVisual_HArray1OfFillStyleSelect >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfFillStyleSelect>

        """
        return _StepVisual.StepVisual_FillAreaStyle_FillStyles(self, *args)


    def FillStylesValue(self, *args) -> "StepVisual_FillStyleSelect":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_FillStyleSelect

        """
        return _StepVisual.StepVisual_FillAreaStyle_FillStylesValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aFillStyles: StepVisual_HArray1OfFillStyleSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_FillAreaStyle_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_FillAreaStyle_Name(self, *args)


    def NbFillStyles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_FillAreaStyle_NbFillStyles(self, *args)


    def SetFillStyles(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFillStyles: StepVisual_HArray1OfFillStyleSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_FillAreaStyle_SetFillStyles(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_FillAreaStyle_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_FillAreaStyle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_FillAreaStyle
    __del__ = lambda self: None
StepVisual_FillAreaStyle_swigregister = _StepVisual.StepVisual_FillAreaStyle_swigregister
StepVisual_FillAreaStyle_swigregister(StepVisual_FillAreaStyle)

class StepVisual_FillAreaStyleColour(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_FillAreaStyleColour, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_FillAreaStyleColour, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a fillareastylecolour.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_FillAreaStyleColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FillColour(self, *args) -> "opencascade::handle< StepVisual_Colour >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_Colour>

        """
        return _StepVisual.StepVisual_FillAreaStyleColour_FillColour(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aFillColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_FillAreaStyleColour_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_FillAreaStyleColour_Name(self, *args)


    def SetFillColour(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFillColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_FillAreaStyleColour_SetFillColour(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_FillAreaStyleColour_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_FillAreaStyleColour_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_FillAreaStyleColour
    __del__ = lambda self: None
StepVisual_FillAreaStyleColour_swigregister = _StepVisual.StepVisual_FillAreaStyleColour_swigregister
StepVisual_FillAreaStyleColour_swigregister(StepVisual_FillAreaStyleColour)

class StepVisual_FillStyleSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_FillStyleSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_FillStyleSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a fillstyleselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_FillStyleSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FillAreaStyleColour(self, *args) -> "opencascade::handle< StepVisual_FillAreaStyleColour >":
        """
        Returns value as a fillareastylecolour (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_FillAreaStyleColour>

        """
        return _StepVisual.StepVisual_FillStyleSelect_FillAreaStyleColour(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_FillStyleSelect
    __del__ = lambda self: None
StepVisual_FillStyleSelect_swigregister = _StepVisual.StepVisual_FillStyleSelect_swigregister
StepVisual_FillStyleSelect_swigregister(StepVisual_FillStyleSelect)

class StepVisual_FontSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_FontSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_FontSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a fontselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_FontSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ExternallyDefinedTextFont(self, *args) -> "opencascade::handle< StepVisual_ExternallyDefinedTextFont >":
        """
        Returns value as a externallydefinedtextfont (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_ExternallyDefinedTextFont>

        """
        return _StepVisual.StepVisual_FontSelect_ExternallyDefinedTextFont(self, *args)


    def PreDefinedTextFont(self, *args) -> "opencascade::handle< StepVisual_PreDefinedTextFont >":
        """
        Returns value as a predefinedtextfont (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PreDefinedTextFont>

        """
        return _StepVisual.StepVisual_FontSelect_PreDefinedTextFont(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_FontSelect
    __del__ = lambda self: None
StepVisual_FontSelect_swigregister = _StepVisual.StepVisual_FontSelect_swigregister
StepVisual_FontSelect_swigregister(StepVisual_FontSelect)

class StepVisual_Invisibility(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Invisibility, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Invisibility, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a invisibility.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_Invisibility(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aInvisibleItems: StepVisual_HArray1OfInvisibleItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_Invisibility_Init(self, *args)


    def InvisibleItems(self, *args) -> "opencascade::handle< StepVisual_HArray1OfInvisibleItem >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfInvisibleItem>

        """
        return _StepVisual.StepVisual_Invisibility_InvisibleItems(self, *args)


    def InvisibleItemsValue(self, *args) -> "StepVisual_InvisibleItem":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_InvisibleItem

        """
        return _StepVisual.StepVisual_Invisibility_InvisibleItemsValue(self, *args)


    def NbInvisibleItems(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_Invisibility_NbInvisibleItems(self, *args)


    def SetInvisibleItems(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aInvisibleItems: StepVisual_HArray1OfInvisibleItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_Invisibility_SetInvisibleItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_Invisibility_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_Invisibility
    __del__ = lambda self: None
StepVisual_Invisibility_swigregister = _StepVisual.StepVisual_Invisibility_swigregister
StepVisual_Invisibility_swigregister(StepVisual_Invisibility)

class StepVisual_InvisibilityContext(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_InvisibilityContext, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_InvisibilityContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a invisibilitycontext selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_InvisibilityContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DraughtingModel(self, *args) -> "opencascade::handle< StepVisual_DraughtingModel >":
        """
        Returns value as a presentationset (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_DraughtingModel>

        """
        return _StepVisual.StepVisual_InvisibilityContext_DraughtingModel(self, *args)


    def PresentationRepresentation(self, *args) -> "opencascade::handle< StepVisual_PresentationRepresentation >":
        """
        Returns value as a presentationrepresentation (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationRepresentation>

        """
        return _StepVisual.StepVisual_InvisibilityContext_PresentationRepresentation(self, *args)


    def PresentationSet(self, *args) -> "opencascade::handle< StepVisual_PresentationSet >":
        """
        Returns value as a presentationset (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationSet>

        """
        return _StepVisual.StepVisual_InvisibilityContext_PresentationSet(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_InvisibilityContext
    __del__ = lambda self: None
StepVisual_InvisibilityContext_swigregister = _StepVisual.StepVisual_InvisibilityContext_swigregister
StepVisual_InvisibilityContext_swigregister(StepVisual_InvisibilityContext)

class StepVisual_InvisibleItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_InvisibleItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_InvisibleItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a invisibleitem selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_InvisibleItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PresentationLayerAssignment(self, *args) -> "opencascade::handle< StepVisual_PresentationLayerAssignment >":
        """
        Returns value as a presentationlayerassignment (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationLayerAssignment>

        """
        return _StepVisual.StepVisual_InvisibleItem_PresentationLayerAssignment(self, *args)


    def PresentationRepresentation(self, *args) -> "opencascade::handle< StepVisual_PresentationRepresentation >":
        """
        Returns value as a presentationrepresentation (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationRepresentation>

        """
        return _StepVisual.StepVisual_InvisibleItem_PresentationRepresentation(self, *args)


    def StyledItem(self, *args) -> "opencascade::handle< StepVisual_StyledItem >":
        """
        Returns value as a styleditem (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_StyledItem>

        """
        return _StepVisual.StepVisual_InvisibleItem_StyledItem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_InvisibleItem
    __del__ = lambda self: None
StepVisual_InvisibleItem_swigregister = _StepVisual.StepVisual_InvisibleItem_swigregister
StepVisual_InvisibleItem_swigregister(StepVisual_InvisibleItem)

class StepVisual_LayeredItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_LayeredItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_LayeredItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a layereditem selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_LayeredItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PresentationRepresentation(self, *args) -> "opencascade::handle< StepVisual_PresentationRepresentation >":
        """
        Returns value as a presentationrepresentation (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationRepresentation>

        """
        return _StepVisual.StepVisual_LayeredItem_PresentationRepresentation(self, *args)


    def RepresentationItem(self, *args) -> "opencascade::handle< StepRepr_RepresentationItem >":
        """
        Returns value as a representationitem (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_RepresentationItem>

        """
        return _StepVisual.StepVisual_LayeredItem_RepresentationItem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_LayeredItem
    __del__ = lambda self: None
StepVisual_LayeredItem_swigregister = _StepVisual.StepVisual_LayeredItem_swigregister
StepVisual_LayeredItem_swigregister(StepVisual_LayeredItem)

class StepVisual_MarkerMember(OCC.Core.StepData.StepData_SelectInt):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectInt]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_MarkerMember, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectInt]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_MarkerMember, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_MarkerMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        val: StepVisual_MarkerType

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_MarkerMember_SetValue(self, *args)


    def Value(self, *args) -> "StepVisual_MarkerType":
        """
        No available documentation.

        Returns
        -------
        StepVisual_MarkerType

        """
        return _StepVisual.StepVisual_MarkerMember_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_MarkerMember_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_MarkerMember
    __del__ = lambda self: None
StepVisual_MarkerMember_swigregister = _StepVisual.StepVisual_MarkerMember_swigregister
StepVisual_MarkerMember_swigregister(StepVisual_MarkerMember)

class StepVisual_MarkerSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_MarkerSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_MarkerSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a markerselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_MarkerSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def MarkerMember(self, *args) -> "opencascade::handle< StepVisual_MarkerMember >":
        """
        Gives access to the markermember in order to get/set its value.

        Returns
        -------
        opencascade::handle<StepVisual_MarkerMember>

        """
        return _StepVisual.StepVisual_MarkerSelect_MarkerMember(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_MarkerSelect
    __del__ = lambda self: None
StepVisual_MarkerSelect_swigregister = _StepVisual.StepVisual_MarkerSelect_swigregister
StepVisual_MarkerSelect_swigregister(StepVisual_MarkerSelect)

class StepVisual_NullStyleMember(OCC.Core.StepData.StepData_SelectInt):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectInt]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_NullStyleMember, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectInt]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_NullStyleMember, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_NullStyleMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetName(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Standard_CString: 

        Returns
        -------
        bool

        """
        return _StepVisual.StepVisual_NullStyleMember_SetName(self, *args)


    def SetValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theValue: StepVisual_NullStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_NullStyleMember_SetValue(self, *args)


    def Value(self, *args) -> "StepVisual_NullStyle":
        """
        No available documentation.

        Returns
        -------
        StepVisual_NullStyle

        """
        return _StepVisual.StepVisual_NullStyleMember_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_NullStyleMember_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_NullStyleMember
    __del__ = lambda self: None
StepVisual_NullStyleMember_swigregister = _StepVisual.StepVisual_NullStyleMember_swigregister
StepVisual_NullStyleMember_swigregister(StepVisual_NullStyleMember)

class StepVisual_PlanarExtent(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PlanarExtent, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PlanarExtent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a planarextent.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PlanarExtent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSizeInX: float
        aSizeInY: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PlanarExtent_Init(self, *args)


    def SetSizeInX(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSizeInX: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PlanarExtent_SetSizeInX(self, *args)


    def SetSizeInY(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSizeInY: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PlanarExtent_SetSizeInY(self, *args)


    def SizeInX(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_PlanarExtent_SizeInX(self, *args)


    def SizeInY(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_PlanarExtent_SizeInY(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PlanarExtent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PlanarExtent
    __del__ = lambda self: None
StepVisual_PlanarExtent_swigregister = _StepVisual.StepVisual_PlanarExtent_swigregister
StepVisual_PlanarExtent_swigregister(StepVisual_PlanarExtent)

class StepVisual_PointStyle(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PointStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PointStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a pointstyle.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PointStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aMarker: StepVisual_MarkerSelect
        aMarkerSize: StepBasic_SizeSelect
        aMarkerColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PointStyle_Init(self, *args)


    def Marker(self, *args) -> "StepVisual_MarkerSelect":
        """
        No available documentation.

        Returns
        -------
        StepVisual_MarkerSelect

        """
        return _StepVisual.StepVisual_PointStyle_Marker(self, *args)


    def MarkerColour(self, *args) -> "opencascade::handle< StepVisual_Colour >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_Colour>

        """
        return _StepVisual.StepVisual_PointStyle_MarkerColour(self, *args)


    def MarkerSize(self, *args) -> "StepBasic_SizeSelect":
        """
        No available documentation.

        Returns
        -------
        StepBasic_SizeSelect

        """
        return _StepVisual.StepVisual_PointStyle_MarkerSize(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_PointStyle_Name(self, *args)


    def SetMarker(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMarker: StepVisual_MarkerSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PointStyle_SetMarker(self, *args)


    def SetMarkerColour(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMarkerColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PointStyle_SetMarkerColour(self, *args)


    def SetMarkerSize(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMarkerSize: StepBasic_SizeSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PointStyle_SetMarkerSize(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PointStyle_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PointStyle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PointStyle
    __del__ = lambda self: None
StepVisual_PointStyle_swigregister = _StepVisual.StepVisual_PointStyle_swigregister
StepVisual_PointStyle_swigregister(StepVisual_PointStyle)

class StepVisual_PreDefinedItem(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PreDefinedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PreDefinedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a predefineditem.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PreDefinedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PreDefinedItem_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_PreDefinedItem_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PreDefinedItem_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PreDefinedItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PreDefinedItem
    __del__ = lambda self: None
StepVisual_PreDefinedItem_swigregister = _StepVisual.StepVisual_PreDefinedItem_swigregister
StepVisual_PreDefinedItem_swigregister(StepVisual_PreDefinedItem)

class StepVisual_PresentationLayerAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationLayerAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationLayerAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationlayerassignment.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationLayerAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedItems(self, *args) -> "opencascade::handle< StepVisual_HArray1OfLayeredItem >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfLayeredItem>

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_AssignedItems(self, *args)


    def AssignedItemsValue(self, *args) -> "StepVisual_LayeredItem":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_LayeredItem

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_AssignedItemsValue(self, *args)


    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aAssignedItems: StepVisual_HArray1OfLayeredItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_Name(self, *args)


    def NbAssignedItems(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_NbAssignedItems(self, *args)


    def SetAssignedItems(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedItems: StepVisual_HArray1OfLayeredItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_SetAssignedItems(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationLayerAssignment_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationLayerAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationLayerAssignment
    __del__ = lambda self: None
StepVisual_PresentationLayerAssignment_swigregister = _StepVisual.StepVisual_PresentationLayerAssignment_swigregister
StepVisual_PresentationLayerAssignment_swigregister(StepVisual_PresentationLayerAssignment)

class StepVisual_PresentationLayerUsage(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationLayerUsage, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationLayerUsage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationLayerUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Assignment(self, *args) -> "opencascade::handle< StepVisual_PresentationLayerAssignment >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PresentationLayerAssignment>

        """
        return _StepVisual.StepVisual_PresentationLayerUsage_Assignment(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignment: StepVisual_PresentationLayerAssignment
        aPresentation: StepVisual_PresentationRepresentation

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationLayerUsage_Init(self, *args)


    def Presentation(self, *args) -> "opencascade::handle< StepVisual_PresentationRepresentation >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PresentationRepresentation>

        """
        return _StepVisual.StepVisual_PresentationLayerUsage_Presentation(self, *args)


    def SetAssignment(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignment: StepVisual_PresentationLayerAssignment

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationLayerUsage_SetAssignment(self, *args)


    def SetPresentation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPresentation: StepVisual_PresentationRepresentation

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationLayerUsage_SetPresentation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationLayerUsage_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationLayerUsage
    __del__ = lambda self: None
StepVisual_PresentationLayerUsage_swigregister = _StepVisual.StepVisual_PresentationLayerUsage_swigregister
StepVisual_PresentationLayerUsage_swigregister(StepVisual_PresentationLayerUsage)

class StepVisual_PresentationRepresentation(OCC.Core.StepRepr.StepRepr_Representation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationrepresentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationRepresentation
    __del__ = lambda self: None
StepVisual_PresentationRepresentation_swigregister = _StepVisual.StepVisual_PresentationRepresentation_swigregister
StepVisual_PresentationRepresentation_swigregister(StepVisual_PresentationRepresentation)

class StepVisual_PresentationRepresentationSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationRepresentationSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationRepresentationSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationrepresentationselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationRepresentationSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PresentationRepresentation(self, *args) -> "opencascade::handle< StepVisual_PresentationRepresentation >":
        """
        Returns value as a presentationrepresentation (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationRepresentation>

        """
        return _StepVisual.StepVisual_PresentationRepresentationSelect_PresentationRepresentation(self, *args)


    def PresentationSet(self, *args) -> "opencascade::handle< StepVisual_PresentationSet >":
        """
        Returns value as a presentationset (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationSet>

        """
        return _StepVisual.StepVisual_PresentationRepresentationSelect_PresentationSet(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationRepresentationSelect
    __del__ = lambda self: None
StepVisual_PresentationRepresentationSelect_swigregister = _StepVisual.StepVisual_PresentationRepresentationSelect_swigregister
StepVisual_PresentationRepresentationSelect_swigregister(StepVisual_PresentationRepresentationSelect)

class StepVisual_PresentationSet(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationSet, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationset.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationSet
    __del__ = lambda self: None
StepVisual_PresentationSet_swigregister = _StepVisual.StepVisual_PresentationSet_swigregister
StepVisual_PresentationSet_swigregister(StepVisual_PresentationSet)

class StepVisual_PresentationSize(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationSize, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationsize.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aUnit: StepVisual_PresentationSizeAssignmentSelect
        aSize: StepVisual_PlanarBox

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationSize_Init(self, *args)


    def SetSize(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSize: StepVisual_PlanarBox

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationSize_SetSize(self, *args)


    def SetUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aUnit: StepVisual_PresentationSizeAssignmentSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationSize_SetUnit(self, *args)


    def Size(self, *args) -> "opencascade::handle< StepVisual_PlanarBox >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PlanarBox>

        """
        return _StepVisual.StepVisual_PresentationSize_Size(self, *args)


    def Unit(self, *args) -> "StepVisual_PresentationSizeAssignmentSelect":
        """
        No available documentation.

        Returns
        -------
        StepVisual_PresentationSizeAssignmentSelect

        """
        return _StepVisual.StepVisual_PresentationSize_Unit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationSize_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationSize
    __del__ = lambda self: None
StepVisual_PresentationSize_swigregister = _StepVisual.StepVisual_PresentationSize_swigregister
StepVisual_PresentationSize_swigregister(StepVisual_PresentationSize)

class StepVisual_PresentationSizeAssignmentSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationSizeAssignmentSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationSizeAssignmentSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationsizeassignmentselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationSizeAssignmentSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AreaInSet(self, *args) -> "opencascade::handle< StepVisual_AreaInSet >":
        """
        Returns value as a areainset (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_AreaInSet>

        """
        return _StepVisual.StepVisual_PresentationSizeAssignmentSelect_AreaInSet(self, *args)


    def PresentationArea(self, *args) -> "opencascade::handle< StepVisual_PresentationArea >":
        """
        Returns value as a presentationarea (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationArea>

        """
        return _StepVisual.StepVisual_PresentationSizeAssignmentSelect_PresentationArea(self, *args)


    def PresentationView(self, *args) -> "opencascade::handle< StepVisual_PresentationView >":
        """
        Returns value as a presentationview (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationView>

        """
        return _StepVisual.StepVisual_PresentationSizeAssignmentSelect_PresentationView(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationSizeAssignmentSelect
    __del__ = lambda self: None
StepVisual_PresentationSizeAssignmentSelect_swigregister = _StepVisual.StepVisual_PresentationSizeAssignmentSelect_swigregister
StepVisual_PresentationSizeAssignmentSelect_swigregister(StepVisual_PresentationSizeAssignmentSelect)

class StepVisual_PresentationStyleAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationStyleAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationStyleAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationstyleassignment.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationStyleAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyles: StepVisual_HArray1OfPresentationStyleSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationStyleAssignment_Init(self, *args)


    def NbStyles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_PresentationStyleAssignment_NbStyles(self, *args)


    def SetStyles(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyles: StepVisual_HArray1OfPresentationStyleSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationStyleAssignment_SetStyles(self, *args)


    def Styles(self, *args) -> "opencascade::handle< StepVisual_HArray1OfPresentationStyleSelect >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfPresentationStyleSelect>

        """
        return _StepVisual.StepVisual_PresentationStyleAssignment_Styles(self, *args)


    def StylesValue(self, *args) -> "StepVisual_PresentationStyleSelect":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_PresentationStyleSelect

        """
        return _StepVisual.StepVisual_PresentationStyleAssignment_StylesValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationStyleAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationStyleAssignment
    __del__ = lambda self: None
StepVisual_PresentationStyleAssignment_swigregister = _StepVisual.StepVisual_PresentationStyleAssignment_swigregister
StepVisual_PresentationStyleAssignment_swigregister(StepVisual_PresentationStyleAssignment)

class StepVisual_PresentationStyleSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationStyleSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationStyleSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationstyleselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationStyleSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CurveStyle(self, *args) -> "opencascade::handle< StepVisual_CurveStyle >":
        """
        Returns value as a curvestyle (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_CurveStyle>

        """
        return _StepVisual.StepVisual_PresentationStyleSelect_CurveStyle(self, *args)


    def NullStyle(self, *args) -> "opencascade::handle< StepVisual_NullStyleMember >":
        """
        Returns value as a nullstylemember (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_NullStyleMember>

        """
        return _StepVisual.StepVisual_PresentationStyleSelect_NullStyle(self, *args)


    def PointStyle(self, *args) -> "opencascade::handle< StepVisual_PointStyle >":
        """
        Returns value as a pointstyle (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PointStyle>

        """
        return _StepVisual.StepVisual_PresentationStyleSelect_PointStyle(self, *args)


    def SurfaceStyleUsage(self, *args) -> "opencascade::handle< StepVisual_SurfaceStyleUsage >":
        """
        Returns value as a surfacestyleusage (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_SurfaceStyleUsage>

        """
        return _StepVisual.StepVisual_PresentationStyleSelect_SurfaceStyleUsage(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationStyleSelect
    __del__ = lambda self: None
StepVisual_PresentationStyleSelect_swigregister = _StepVisual.StepVisual_PresentationStyleSelect_swigregister
StepVisual_PresentationStyleSelect_swigregister(StepVisual_PresentationStyleSelect)

class StepVisual_PresentedItem(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentedItem, name)
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentedItem_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StepVisual.new_StepVisual_PresentedItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentedItem
    __del__ = lambda self: None
StepVisual_PresentedItem_swigregister = _StepVisual.StepVisual_PresentedItem_swigregister
StepVisual_PresentedItem_swigregister(StepVisual_PresentedItem)

class StepVisual_PresentedItemRepresentation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentedItemRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentedItemRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentedItemRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPresentation: StepVisual_PresentationRepresentationSelect
        aItem: StepVisual_PresentedItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentedItemRepresentation_Init(self, *args)


    def Item(self, *args) -> "opencascade::handle< StepVisual_PresentedItem >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PresentedItem>

        """
        return _StepVisual.StepVisual_PresentedItemRepresentation_Item(self, *args)


    def Presentation(self, *args) -> "StepVisual_PresentationRepresentationSelect":
        """
        No available documentation.

        Returns
        -------
        StepVisual_PresentationRepresentationSelect

        """
        return _StepVisual.StepVisual_PresentedItemRepresentation_Presentation(self, *args)


    def SetItem(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aItem: StepVisual_PresentedItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentedItemRepresentation_SetItem(self, *args)


    def SetPresentation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPresentation: StepVisual_PresentationRepresentationSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentedItemRepresentation_SetPresentation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentedItemRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentedItemRepresentation
    __del__ = lambda self: None
StepVisual_PresentedItemRepresentation_swigregister = _StepVisual.StepVisual_PresentedItemRepresentation_swigregister
StepVisual_PresentedItemRepresentation_swigregister(StepVisual_PresentedItemRepresentation)

class StepVisual_RenderingPropertiesSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_RenderingPropertiesSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_RenderingPropertiesSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_RenderingPropertiesSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SurfaceStyleReflectanceAmbient(self, *args) -> "opencascade::handle< StepVisual_SurfaceStyleReflectanceAmbient >":
        """
        Returns value as surfacestylereflectanceambient (or null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_SurfaceStyleReflectanceAmbient>

        """
        return _StepVisual.StepVisual_RenderingPropertiesSelect_SurfaceStyleReflectanceAmbient(self, *args)


    def SurfaceStyleTransparent(self, *args) -> "opencascade::handle< StepVisual_SurfaceStyleTransparent >":
        """
        Returns value as surfacestyletransparent (or null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_SurfaceStyleTransparent>

        """
        return _StepVisual.StepVisual_RenderingPropertiesSelect_SurfaceStyleTransparent(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_RenderingPropertiesSelect
    __del__ = lambda self: None
StepVisual_RenderingPropertiesSelect_swigregister = _StepVisual.StepVisual_RenderingPropertiesSelect_swigregister
StepVisual_RenderingPropertiesSelect_swigregister(StepVisual_RenderingPropertiesSelect)

class StepVisual_StyleContextSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_StyleContextSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_StyleContextSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a stylecontextselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_StyleContextSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PresentationSet(self, *args) -> "opencascade::handle< StepVisual_PresentationSet >":
        """
        Returns value as a presentationset (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_PresentationSet>

        """
        return _StepVisual.StepVisual_StyleContextSelect_PresentationSet(self, *args)


    def Representation(self, *args) -> "opencascade::handle< StepRepr_Representation >":
        """
        Returns value as a representation (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_Representation>

        """
        return _StepVisual.StepVisual_StyleContextSelect_Representation(self, *args)


    def RepresentationItem(self, *args) -> "opencascade::handle< StepRepr_RepresentationItem >":
        """
        Returns value as a representationitem (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_RepresentationItem>

        """
        return _StepVisual.StepVisual_StyleContextSelect_RepresentationItem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_StyleContextSelect
    __del__ = lambda self: None
StepVisual_StyleContextSelect_swigregister = _StepVisual.StepVisual_StyleContextSelect_swigregister
StepVisual_StyleContextSelect_swigregister(StepVisual_StyleContextSelect)

class StepVisual_StyledItem(OCC.Core.StepRepr.StepRepr_RepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_StyledItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_StyledItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a styleditem.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_StyledItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aStyles: StepVisual_HArray1OfPresentationStyleAssignment
        aItem: Standard_Transient

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_StyledItem_Init(self, *args)


    def Item(self, *args) -> "opencascade::handle< StepRepr_RepresentationItem > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepRepr_RepresentationItem>

        """
        return _StepVisual.StepVisual_StyledItem_Item(self, *args)


    def ItemAP242(self, *args) -> "StepVisual_StyledItemTarget":
        """
        No available documentation.

        Returns
        -------
        StepVisual_StyledItemTarget

        """
        return _StepVisual.StepVisual_StyledItem_ItemAP242(self, *args)


    def NbStyles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_StyledItem_NbStyles(self, *args)


    def SetItem(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aItem: StepRepr_RepresentationItem

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aItem: StepVisual_StyledItemTarget

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_StyledItem_SetItem(self, *args)


    def SetStyles(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyles: StepVisual_HArray1OfPresentationStyleAssignment

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_StyledItem_SetStyles(self, *args)


    def Styles(self, *args) -> "opencascade::handle< StepVisual_HArray1OfPresentationStyleAssignment > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfPresentationStyleAssignment>

        """
        return _StepVisual.StepVisual_StyledItem_Styles(self, *args)


    def StylesValue(self, *args) -> "opencascade::handle< StepVisual_PresentationStyleAssignment > const &":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepVisual_PresentationStyleAssignment>

        """
        return _StepVisual.StepVisual_StyledItem_StylesValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_StyledItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_StyledItem
    __del__ = lambda self: None
StepVisual_StyledItem_swigregister = _StepVisual.StepVisual_StyledItem_swigregister
StepVisual_StyledItem_swigregister(StepVisual_StyledItem)

class StepVisual_StyledItemTarget(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_StyledItemTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_StyledItemTarget, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a styleditemtarget select type.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_StyledItemTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GeometricRepresentationItem(self, *args) -> "opencascade::handle< StepGeom_GeometricRepresentationItem >":
        """
        Returns value as a geometricrepresentationitem (null if another type).

        Returns
        -------
        opencascade::handle<StepGeom_GeometricRepresentationItem>

        """
        return _StepVisual.StepVisual_StyledItemTarget_GeometricRepresentationItem(self, *args)


    def MappedItem(self, *args) -> "opencascade::handle< StepRepr_MappedItem >":
        """
        Returns value as a mappeditem (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_MappedItem>

        """
        return _StepVisual.StepVisual_StyledItemTarget_MappedItem(self, *args)


    def Representation(self, *args) -> "opencascade::handle< StepRepr_Representation >":
        """
        Returns value as a representation (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_Representation>

        """
        return _StepVisual.StepVisual_StyledItemTarget_Representation(self, *args)


    def TopologicalRepresentationItem(self, *args) -> "opencascade::handle< StepShape_TopologicalRepresentationItem >":
        """
        Returns value as a topologicalrepresentationitem (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_TopologicalRepresentationItem>

        """
        return _StepVisual.StepVisual_StyledItemTarget_TopologicalRepresentationItem(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_StyledItemTarget
    __del__ = lambda self: None
StepVisual_StyledItemTarget_swigregister = _StepVisual.StepVisual_StyledItemTarget_swigregister
StepVisual_StyledItemTarget_swigregister(StepVisual_StyledItemTarget)

class StepVisual_SurfaceSideStyle(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceSideStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceSideStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacesidestyle.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceSideStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aStyles: StepVisual_HArray1OfSurfaceStyleElementSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceSideStyle_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_SurfaceSideStyle_Name(self, *args)


    def NbStyles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_SurfaceSideStyle_NbStyles(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceSideStyle_SetName(self, *args)


    def SetStyles(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyles: StepVisual_HArray1OfSurfaceStyleElementSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceSideStyle_SetStyles(self, *args)


    def Styles(self, *args) -> "opencascade::handle< StepVisual_HArray1OfSurfaceStyleElementSelect >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfSurfaceStyleElementSelect>

        """
        return _StepVisual.StepVisual_SurfaceSideStyle_Styles(self, *args)


    def StylesValue(self, *args) -> "StepVisual_SurfaceStyleElementSelect":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_SurfaceStyleElementSelect

        """
        return _StepVisual.StepVisual_SurfaceSideStyle_StylesValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceSideStyle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceSideStyle
    __del__ = lambda self: None
StepVisual_SurfaceSideStyle_swigregister = _StepVisual.StepVisual_SurfaceSideStyle_swigregister
StepVisual_SurfaceSideStyle_swigregister(StepVisual_SurfaceSideStyle)

class StepVisual_SurfaceStyleBoundary(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleBoundary, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacestyleboundary.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfBoundary: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleBoundary_Init(self, *args)


    def SetStyleOfBoundary(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfBoundary: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleBoundary_SetStyleOfBoundary(self, *args)


    def StyleOfBoundary(self, *args) -> "opencascade::handle< StepVisual_CurveStyle >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_CurveStyle>

        """
        return _StepVisual.StepVisual_SurfaceStyleBoundary_StyleOfBoundary(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleBoundary_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleBoundary
    __del__ = lambda self: None
StepVisual_SurfaceStyleBoundary_swigregister = _StepVisual.StepVisual_SurfaceStyleBoundary_swigregister
StepVisual_SurfaceStyleBoundary_swigregister(StepVisual_SurfaceStyleBoundary)

class StepVisual_SurfaceStyleControlGrid(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleControlGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleControlGrid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacestylecontrolgrid.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleControlGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfControlGrid: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleControlGrid_Init(self, *args)


    def SetStyleOfControlGrid(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfControlGrid: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleControlGrid_SetStyleOfControlGrid(self, *args)


    def StyleOfControlGrid(self, *args) -> "opencascade::handle< StepVisual_CurveStyle >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_CurveStyle>

        """
        return _StepVisual.StepVisual_SurfaceStyleControlGrid_StyleOfControlGrid(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleControlGrid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleControlGrid
    __del__ = lambda self: None
StepVisual_SurfaceStyleControlGrid_swigregister = _StepVisual.StepVisual_SurfaceStyleControlGrid_swigregister
StepVisual_SurfaceStyleControlGrid_swigregister(StepVisual_SurfaceStyleControlGrid)

class StepVisual_SurfaceStyleElementSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleElementSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleElementSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacestyleelementselect selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleElementSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SurfaceStyleBoundary(self, *args) -> "opencascade::handle< StepVisual_SurfaceStyleBoundary >":
        """
        Returns value as a surfacestyleboundary (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_SurfaceStyleBoundary>

        """
        return _StepVisual.StepVisual_SurfaceStyleElementSelect_SurfaceStyleBoundary(self, *args)


    def SurfaceStyleFillArea(self, *args) -> "opencascade::handle< StepVisual_SurfaceStyleFillArea >":
        """
        Returns value as a surfacestylefillarea (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_SurfaceStyleFillArea>

        """
        return _StepVisual.StepVisual_SurfaceStyleElementSelect_SurfaceStyleFillArea(self, *args)


    def SurfaceStyleParameterLine(self, *args) -> "opencascade::handle< StepVisual_SurfaceStyleParameterLine >":
        """
        Returns value as a surfacestyleparameterline (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_SurfaceStyleParameterLine>

        """
        return _StepVisual.StepVisual_SurfaceStyleElementSelect_SurfaceStyleParameterLine(self, *args)


    def SurfaceStyleRendering(self, *args) -> "opencascade::handle< StepVisual_SurfaceStyleRendering >":
        """
        Returns value as a surfacestylerendering (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_SurfaceStyleRendering>

        """
        return _StepVisual.StepVisual_SurfaceStyleElementSelect_SurfaceStyleRendering(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleElementSelect
    __del__ = lambda self: None
StepVisual_SurfaceStyleElementSelect_swigregister = _StepVisual.StepVisual_SurfaceStyleElementSelect_swigregister
StepVisual_SurfaceStyleElementSelect_swigregister(StepVisual_SurfaceStyleElementSelect)

class StepVisual_SurfaceStyleFillArea(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleFillArea, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleFillArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacestylefillarea.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleFillArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FillArea(self, *args) -> "opencascade::handle< StepVisual_FillAreaStyle >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_FillAreaStyle>

        """
        return _StepVisual.StepVisual_SurfaceStyleFillArea_FillArea(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFillArea: StepVisual_FillAreaStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleFillArea_Init(self, *args)


    def SetFillArea(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFillArea: StepVisual_FillAreaStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleFillArea_SetFillArea(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleFillArea_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleFillArea
    __del__ = lambda self: None
StepVisual_SurfaceStyleFillArea_swigregister = _StepVisual.StepVisual_SurfaceStyleFillArea_swigregister
StepVisual_SurfaceStyleFillArea_swigregister(StepVisual_SurfaceStyleFillArea)

class StepVisual_SurfaceStyleParameterLine(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleParameterLine, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleParameterLine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacestyleparameterline.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleParameterLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DirectionCounts(self, *args) -> "opencascade::handle< StepVisual_HArray1OfDirectionCountSelect >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfDirectionCountSelect>

        """
        return _StepVisual.StepVisual_SurfaceStyleParameterLine_DirectionCounts(self, *args)


    def DirectionCountsValue(self, *args) -> "StepVisual_DirectionCountSelect":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_DirectionCountSelect

        """
        return _StepVisual.StepVisual_SurfaceStyleParameterLine_DirectionCountsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfParameterLines: StepVisual_CurveStyle
        aDirectionCounts: StepVisual_HArray1OfDirectionCountSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleParameterLine_Init(self, *args)


    def NbDirectionCounts(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_SurfaceStyleParameterLine_NbDirectionCounts(self, *args)


    def SetDirectionCounts(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDirectionCounts: StepVisual_HArray1OfDirectionCountSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleParameterLine_SetDirectionCounts(self, *args)


    def SetStyleOfParameterLines(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfParameterLines: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleParameterLine_SetStyleOfParameterLines(self, *args)


    def StyleOfParameterLines(self, *args) -> "opencascade::handle< StepVisual_CurveStyle >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_CurveStyle>

        """
        return _StepVisual.StepVisual_SurfaceStyleParameterLine_StyleOfParameterLines(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleParameterLine_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleParameterLine
    __del__ = lambda self: None
StepVisual_SurfaceStyleParameterLine_swigregister = _StepVisual.StepVisual_SurfaceStyleParameterLine_swigregister
StepVisual_SurfaceStyleParameterLine_swigregister(StepVisual_SurfaceStyleParameterLine)

class StepVisual_SurfaceStyleReflectanceAmbient(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleReflectanceAmbient, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleReflectanceAmbient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Default constructor.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleReflectanceAmbient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AmbientReflectance(self, *args) -> "Standard_Real":
        """
        Returns field ambientreflectance.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_SurfaceStyleReflectanceAmbient_AmbientReflectance(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theAmbientReflectance: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleReflectanceAmbient_Init(self, *args)


    def SetAmbientReflectance(self, *args) -> "void":
        """
        Sets field ambientreflectance.

        Parameters
        ----------
        theAmbientReflectance: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleReflectanceAmbient_SetAmbientReflectance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleReflectanceAmbient_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleReflectanceAmbient
    __del__ = lambda self: None
StepVisual_SurfaceStyleReflectanceAmbient_swigregister = _StepVisual.StepVisual_SurfaceStyleReflectanceAmbient_swigregister
StepVisual_SurfaceStyleReflectanceAmbient_swigregister(StepVisual_SurfaceStyleReflectanceAmbient)

class StepVisual_SurfaceStyleRendering(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleRendering, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleRendering, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Default constructor.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleRendering(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theRenderingMethod: StepVisual_ShadingSurfaceMethod
        theSurfaceColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleRendering_Init(self, *args)


    def RenderingMethod(self, *args) -> "StepVisual_ShadingSurfaceMethod":
        """
        Returns field renderingmethod.

        Returns
        -------
        StepVisual_ShadingSurfaceMethod

        """
        return _StepVisual.StepVisual_SurfaceStyleRendering_RenderingMethod(self, *args)


    def SetRenderingMethod(self, *args) -> "void":
        """
        Sets field renderingmethod.

        Parameters
        ----------
        theRenderingMethod: StepVisual_ShadingSurfaceMethod

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleRendering_SetRenderingMethod(self, *args)


    def SetSurfaceColour(self, *args) -> "void":
        """
        Sets field surfacecolour.

        Parameters
        ----------
        theSurfaceColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleRendering_SetSurfaceColour(self, *args)


    def SurfaceColour(self, *args) -> "opencascade::handle< StepVisual_Colour >":
        """
        Returns field surfacecolour.

        Returns
        -------
        opencascade::handle<StepVisual_Colour>

        """
        return _StepVisual.StepVisual_SurfaceStyleRendering_SurfaceColour(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleRendering_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleRendering
    __del__ = lambda self: None
StepVisual_SurfaceStyleRendering_swigregister = _StepVisual.StepVisual_SurfaceStyleRendering_swigregister
StepVisual_SurfaceStyleRendering_swigregister(StepVisual_SurfaceStyleRendering)

class StepVisual_SurfaceStyleSegmentationCurve(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleSegmentationCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleSegmentationCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacestylesegmentationcurve.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleSegmentationCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfSegmentationCurve: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleSegmentationCurve_Init(self, *args)


    def SetStyleOfSegmentationCurve(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfSegmentationCurve: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleSegmentationCurve_SetStyleOfSegmentationCurve(self, *args)


    def StyleOfSegmentationCurve(self, *args) -> "opencascade::handle< StepVisual_CurveStyle >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_CurveStyle>

        """
        return _StepVisual.StepVisual_SurfaceStyleSegmentationCurve_StyleOfSegmentationCurve(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleSegmentationCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleSegmentationCurve
    __del__ = lambda self: None
StepVisual_SurfaceStyleSegmentationCurve_swigregister = _StepVisual.StepVisual_SurfaceStyleSegmentationCurve_swigregister
StepVisual_SurfaceStyleSegmentationCurve_swigregister(StepVisual_SurfaceStyleSegmentationCurve)

class StepVisual_SurfaceStyleSilhouette(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleSilhouette, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleSilhouette, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacestylesilhouette.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleSilhouette(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfSilhouette: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleSilhouette_Init(self, *args)


    def SetStyleOfSilhouette(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleOfSilhouette: StepVisual_CurveStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleSilhouette_SetStyleOfSilhouette(self, *args)


    def StyleOfSilhouette(self, *args) -> "opencascade::handle< StepVisual_CurveStyle >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_CurveStyle>

        """
        return _StepVisual.StepVisual_SurfaceStyleSilhouette_StyleOfSilhouette(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleSilhouette_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleSilhouette
    __del__ = lambda self: None
StepVisual_SurfaceStyleSilhouette_swigregister = _StepVisual.StepVisual_SurfaceStyleSilhouette_swigregister
StepVisual_SurfaceStyleSilhouette_swigregister(StepVisual_SurfaceStyleSilhouette)

class StepVisual_SurfaceStyleTransparent(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleTransparent, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleTransparent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Default constructor.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleTransparent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theTransparency: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleTransparent_Init(self, *args)


    def SetTransparency(self, *args) -> "void":
        """
        Sets field transparency.

        Parameters
        ----------
        theTransparency: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleTransparent_SetTransparency(self, *args)


    def Transparency(self, *args) -> "Standard_Real":
        """
        Returns field transparency.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_SurfaceStyleTransparent_Transparency(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleTransparent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleTransparent
    __del__ = lambda self: None
StepVisual_SurfaceStyleTransparent_swigregister = _StepVisual.StepVisual_SurfaceStyleTransparent_swigregister
StepVisual_SurfaceStyleTransparent_swigregister(StepVisual_SurfaceStyleTransparent)

class StepVisual_SurfaceStyleUsage(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleUsage, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleUsage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacestyleusage.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSide: StepVisual_SurfaceSide
        aStyle: StepVisual_SurfaceSideStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleUsage_Init(self, *args)


    def SetSide(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSide: StepVisual_SurfaceSide

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleUsage_SetSide(self, *args)


    def SetStyle(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyle: StepVisual_SurfaceSideStyle

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleUsage_SetStyle(self, *args)


    def Side(self, *args) -> "StepVisual_SurfaceSide":
        """
        No available documentation.

        Returns
        -------
        StepVisual_SurfaceSide

        """
        return _StepVisual.StepVisual_SurfaceStyleUsage_Side(self, *args)


    def Style(self, *args) -> "opencascade::handle< StepVisual_SurfaceSideStyle >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_SurfaceSideStyle>

        """
        return _StepVisual.StepVisual_SurfaceStyleUsage_Style(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleUsage_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleUsage
    __del__ = lambda self: None
StepVisual_SurfaceStyleUsage_swigregister = _StepVisual.StepVisual_SurfaceStyleUsage_swigregister
StepVisual_SurfaceStyleUsage_swigregister(StepVisual_SurfaceStyleUsage)

class StepVisual_Template(OCC.Core.StepRepr.StepRepr_Representation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_Template, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_Template, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a template.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_Template(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_Template_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_Template
    __del__ = lambda self: None
StepVisual_Template_swigregister = _StepVisual.StepVisual_Template_swigregister
StepVisual_Template_swigregister(StepVisual_Template)

class StepVisual_TemplateInstance(OCC.Core.StepRepr.StepRepr_MappedItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_MappedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TemplateInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_MappedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TemplateInstance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a templateinstance.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TemplateInstance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TemplateInstance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TemplateInstance
    __del__ = lambda self: None
StepVisual_TemplateInstance_swigregister = _StepVisual.StepVisual_TemplateInstance_swigregister
StepVisual_TemplateInstance_swigregister(StepVisual_TemplateInstance)

class StepVisual_TessellatedItem(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TessellatedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TessellatedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a draughtingcalloutelement select type.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TessellatedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TessellatedItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TessellatedItem
    __del__ = lambda self: None
StepVisual_TessellatedItem_swigregister = _StepVisual.StepVisual_TessellatedItem_swigregister
StepVisual_TessellatedItem_swigregister(StepVisual_TessellatedItem)

class StepVisual_TextLiteral(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TextLiteral, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TextLiteral, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a textliteral.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TextLiteral(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Alignment(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_TextLiteral_Alignment(self, *args)


    def Font(self, *args) -> "StepVisual_FontSelect":
        """
        No available documentation.

        Returns
        -------
        StepVisual_FontSelect

        """
        return _StepVisual.StepVisual_TextLiteral_Font(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aLiteral: TCollection_HAsciiString
        aPlacement: StepGeom_Axis2Placement
        aAlignment: TCollection_HAsciiString
        aPath: StepVisual_TextPath
        aFont: StepVisual_FontSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextLiteral_Init(self, *args)


    def Literal(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_TextLiteral_Literal(self, *args)


    def Path(self, *args) -> "StepVisual_TextPath":
        """
        No available documentation.

        Returns
        -------
        StepVisual_TextPath

        """
        return _StepVisual.StepVisual_TextLiteral_Path(self, *args)


    def Placement(self, *args) -> "StepGeom_Axis2Placement":
        """
        No available documentation.

        Returns
        -------
        StepGeom_Axis2Placement

        """
        return _StepVisual.StepVisual_TextLiteral_Placement(self, *args)


    def SetAlignment(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAlignment: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextLiteral_SetAlignment(self, *args)


    def SetFont(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFont: StepVisual_FontSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextLiteral_SetFont(self, *args)


    def SetLiteral(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLiteral: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextLiteral_SetLiteral(self, *args)


    def SetPath(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPath: StepVisual_TextPath

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextLiteral_SetPath(self, *args)


    def SetPlacement(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPlacement: StepGeom_Axis2Placement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextLiteral_SetPlacement(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TextLiteral_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TextLiteral
    __del__ = lambda self: None
StepVisual_TextLiteral_swigregister = _StepVisual.StepVisual_TextLiteral_swigregister
StepVisual_TextLiteral_swigregister(StepVisual_TextLiteral)

class StepVisual_TextOrCharacter(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TextOrCharacter, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TextOrCharacter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a textorcharacter selecttype.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TextOrCharacter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AnnotationText(self, *args) -> "opencascade::handle< StepVisual_AnnotationText >":
        """
        Returns value as a annotationtext (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_AnnotationText>

        """
        return _StepVisual.StepVisual_TextOrCharacter_AnnotationText(self, *args)


    def CompositeText(self, *args) -> "opencascade::handle< StepVisual_CompositeText >":
        """
        Returns value as a compositetext (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_CompositeText>

        """
        return _StepVisual.StepVisual_TextOrCharacter_CompositeText(self, *args)


    def TextLiteral(self, *args) -> "opencascade::handle< StepVisual_TextLiteral >":
        """
        Returns value as a textliteral (null if another type).

        Returns
        -------
        opencascade::handle<StepVisual_TextLiteral>

        """
        return _StepVisual.StepVisual_TextOrCharacter_TextLiteral(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TextOrCharacter
    __del__ = lambda self: None
StepVisual_TextOrCharacter_swigregister = _StepVisual.StepVisual_TextOrCharacter_swigregister
StepVisual_TextOrCharacter_swigregister(StepVisual_TextOrCharacter)

class StepVisual_TextStyle(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TextStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TextStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a textstyle.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TextStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CharacterAppearance(self, *args) -> "opencascade::handle< StepVisual_TextStyleForDefinedFont >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_TextStyleForDefinedFont>

        """
        return _StepVisual.StepVisual_TextStyle_CharacterAppearance(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aCharacterAppearance: StepVisual_TextStyleForDefinedFont

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextStyle_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_TextStyle_Name(self, *args)


    def SetCharacterAppearance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCharacterAppearance: StepVisual_TextStyleForDefinedFont

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextStyle_SetCharacterAppearance(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextStyle_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TextStyle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TextStyle
    __del__ = lambda self: None
StepVisual_TextStyle_swigregister = _StepVisual.StepVisual_TextStyle_swigregister
StepVisual_TextStyle_swigregister(StepVisual_TextStyle)

class StepVisual_TextStyleForDefinedFont(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TextStyleForDefinedFont, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TextStyleForDefinedFont, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a textstylefordefinedfont.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TextStyleForDefinedFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTextColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextStyleForDefinedFont_Init(self, *args)


    def SetTextColour(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTextColour: StepVisual_Colour

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextStyleForDefinedFont_SetTextColour(self, *args)


    def TextColour(self, *args) -> "opencascade::handle< StepVisual_Colour >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_Colour>

        """
        return _StepVisual.StepVisual_TextStyleForDefinedFont_TextColour(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TextStyleForDefinedFont_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TextStyleForDefinedFont
    __del__ = lambda self: None
StepVisual_TextStyleForDefinedFont_swigregister = _StepVisual.StepVisual_TextStyleForDefinedFont_swigregister
StepVisual_TextStyleForDefinedFont_swigregister(StepVisual_TextStyleForDefinedFont)

class StepVisual_ViewVolume(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_ViewVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_ViewVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a viewvolume.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_ViewVolume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BackPlaneClipping(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepVisual.StepVisual_ViewVolume_BackPlaneClipping(self, *args)


    def BackPlaneDistance(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_ViewVolume_BackPlaneDistance(self, *args)


    def FrontPlaneClipping(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepVisual.StepVisual_ViewVolume_FrontPlaneClipping(self, *args)


    def FrontPlaneDistance(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_ViewVolume_FrontPlaneDistance(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aProjectionType: StepVisual_CentralOrParallel
        aProjectionPoint: StepGeom_CartesianPoint
        aViewPlaneDistance: float
        aFrontPlaneDistance: float
        aFrontPlaneClipping: bool
        aBackPlaneDistance: float
        aBackPlaneClipping: bool
        aViewVolumeSidesClipping: bool
        aViewWindow: StepVisual_PlanarBox

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_Init(self, *args)


    def ProjectionPoint(self, *args) -> "opencascade::handle< StepGeom_CartesianPoint >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_CartesianPoint>

        """
        return _StepVisual.StepVisual_ViewVolume_ProjectionPoint(self, *args)


    def ProjectionType(self, *args) -> "StepVisual_CentralOrParallel":
        """
        No available documentation.

        Returns
        -------
        StepVisual_CentralOrParallel

        """
        return _StepVisual.StepVisual_ViewVolume_ProjectionType(self, *args)


    def SetBackPlaneClipping(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBackPlaneClipping: bool

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetBackPlaneClipping(self, *args)


    def SetBackPlaneDistance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBackPlaneDistance: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetBackPlaneDistance(self, *args)


    def SetFrontPlaneClipping(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFrontPlaneClipping: bool

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetFrontPlaneClipping(self, *args)


    def SetFrontPlaneDistance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFrontPlaneDistance: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetFrontPlaneDistance(self, *args)


    def SetProjectionPoint(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aProjectionPoint: StepGeom_CartesianPoint

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetProjectionPoint(self, *args)


    def SetProjectionType(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aProjectionType: StepVisual_CentralOrParallel

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetProjectionType(self, *args)


    def SetViewPlaneDistance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aViewPlaneDistance: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetViewPlaneDistance(self, *args)


    def SetViewVolumeSidesClipping(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aViewVolumeSidesClipping: bool

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetViewVolumeSidesClipping(self, *args)


    def SetViewWindow(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aViewWindow: StepVisual_PlanarBox

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ViewVolume_SetViewWindow(self, *args)


    def ViewPlaneDistance(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_ViewVolume_ViewPlaneDistance(self, *args)


    def ViewVolumeSidesClipping(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepVisual.StepVisual_ViewVolume_ViewVolumeSidesClipping(self, *args)


    def ViewWindow(self, *args) -> "opencascade::handle< StepVisual_PlanarBox >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PlanarBox>

        """
        return _StepVisual.StepVisual_ViewVolume_ViewWindow(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_ViewVolume_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_ViewVolume
    __del__ = lambda self: None
StepVisual_ViewVolume_swigregister = _StepVisual.StepVisual_ViewVolume_swigregister
StepVisual_ViewVolume_swigregister(StepVisual_ViewVolume)

class StepVisual_AnnotationOccurrence(StepVisual_StyledItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_StyledItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationOccurrence, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_StyledItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationOccurrence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a annotationoccurrence.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AnnotationOccurrence_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationOccurrence
    __del__ = lambda self: None
StepVisual_AnnotationOccurrence_swigregister = _StepVisual.StepVisual_AnnotationOccurrence_swigregister
StepVisual_AnnotationOccurrence_swigregister(StepVisual_AnnotationOccurrence)

class StepVisual_BackgroundColour(StepVisual_Colour):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Colour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_BackgroundColour, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Colour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_BackgroundColour, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a backgroundcolour.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_BackgroundColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPresentation: StepVisual_AreaOrView

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_BackgroundColour_Init(self, *args)


    def Presentation(self, *args) -> "StepVisual_AreaOrView":
        """
        No available documentation.

        Returns
        -------
        StepVisual_AreaOrView

        """
        return _StepVisual.StepVisual_BackgroundColour_Presentation(self, *args)


    def SetPresentation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPresentation: StepVisual_AreaOrView

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_BackgroundColour_SetPresentation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_BackgroundColour_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_BackgroundColour
    __del__ = lambda self: None
StepVisual_BackgroundColour_swigregister = _StepVisual.StepVisual_BackgroundColour_swigregister
StepVisual_BackgroundColour_swigregister(StepVisual_BackgroundColour)

class StepVisual_CameraImage2dWithScale(StepVisual_CameraImage):
    __swig_setmethods__ = {}
    for _s in [StepVisual_CameraImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraImage2dWithScale, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_CameraImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraImage2dWithScale, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraImage2dWithScale(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraImage2dWithScale_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraImage2dWithScale
    __del__ = lambda self: None
StepVisual_CameraImage2dWithScale_swigregister = _StepVisual.StepVisual_CameraImage2dWithScale_swigregister
StepVisual_CameraImage2dWithScale_swigregister(StepVisual_CameraImage2dWithScale)

class StepVisual_CameraImage3dWithScale(StepVisual_CameraImage):
    __swig_setmethods__ = {}
    for _s in [StepVisual_CameraImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraImage3dWithScale, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_CameraImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraImage3dWithScale, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraImage3dWithScale(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraImage3dWithScale_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraImage3dWithScale
    __del__ = lambda self: None
StepVisual_CameraImage3dWithScale_swigregister = _StepVisual.StepVisual_CameraImage3dWithScale_swigregister
StepVisual_CameraImage3dWithScale_swigregister(StepVisual_CameraImage3dWithScale)

class StepVisual_CameraModelD2(StepVisual_CameraModel):
    __swig_setmethods__ = {}
    for _s in [StepVisual_CameraModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraModelD2, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_CameraModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraModelD2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a cameramodeld2.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraModelD2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aViewWindow: StepVisual_PlanarBox
        aViewWindowClipping: bool

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD2_Init(self, *args)


    def SetViewWindow(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aViewWindow: StepVisual_PlanarBox

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD2_SetViewWindow(self, *args)


    def SetViewWindowClipping(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aViewWindowClipping: bool

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD2_SetViewWindowClipping(self, *args)


    def ViewWindow(self, *args) -> "opencascade::handle< StepVisual_PlanarBox >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PlanarBox>

        """
        return _StepVisual.StepVisual_CameraModelD2_ViewWindow(self, *args)


    def ViewWindowClipping(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepVisual.StepVisual_CameraModelD2_ViewWindowClipping(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraModelD2_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraModelD2
    __del__ = lambda self: None
StepVisual_CameraModelD2_swigregister = _StepVisual.StepVisual_CameraModelD2_swigregister
StepVisual_CameraModelD2_swigregister(StepVisual_CameraModelD2)

class StepVisual_CameraModelD3(StepVisual_CameraModel):
    __swig_setmethods__ = {}
    for _s in [StepVisual_CameraModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraModelD3, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_CameraModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraModelD3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a cameramodeld3.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraModelD3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aViewReferenceSystem: StepGeom_Axis2Placement3d
        aPerspectiveOfVolume: StepVisual_ViewVolume

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3_Init(self, *args)


    def PerspectiveOfVolume(self, *args) -> "opencascade::handle< StepVisual_ViewVolume >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_ViewVolume>

        """
        return _StepVisual.StepVisual_CameraModelD3_PerspectiveOfVolume(self, *args)


    def SetPerspectiveOfVolume(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPerspectiveOfVolume: StepVisual_ViewVolume

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3_SetPerspectiveOfVolume(self, *args)


    def SetViewReferenceSystem(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aViewReferenceSystem: StepGeom_Axis2Placement3d

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3_SetViewReferenceSystem(self, *args)


    def ViewReferenceSystem(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement3d >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis2Placement3d>

        """
        return _StepVisual.StepVisual_CameraModelD3_ViewReferenceSystem(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraModelD3_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraModelD3
    __del__ = lambda self: None
StepVisual_CameraModelD3_swigregister = _StepVisual.StepVisual_CameraModelD3_swigregister
StepVisual_CameraModelD3_swigregister(StepVisual_CameraModelD3)

class StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel(StepVisual_DraughtingModel):
    __swig_setmethods__ = {}
    for _s in [StepVisual_DraughtingModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_DraughtingModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel
    __del__ = lambda self: None
StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_swigregister = _StepVisual.StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_swigregister
StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel_swigregister(StepVisual_CharacterizedObjAndRepresentationAndDraughtingModel)

class StepVisual_ColourSpecification(StepVisual_Colour):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Colour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_ColourSpecification, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Colour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_ColourSpecification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a colourspecification.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_ColourSpecification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ColourSpecification_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepVisual.StepVisual_ColourSpecification_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ColourSpecification_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_ColourSpecification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_ColourSpecification
    __del__ = lambda self: None
StepVisual_ColourSpecification_swigregister = _StepVisual.StepVisual_ColourSpecification_swigregister
StepVisual_ColourSpecification_swigregister(StepVisual_ColourSpecification)

class StepVisual_CompositeTextWithExtent(StepVisual_CompositeText):
    __swig_setmethods__ = {}
    for _s in [StepVisual_CompositeText]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CompositeTextWithExtent, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_CompositeText]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CompositeTextWithExtent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a compositetextwithextent.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CompositeTextWithExtent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Extent(self, *args) -> "opencascade::handle< StepVisual_PlanarExtent >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_PlanarExtent>

        """
        return _StepVisual.StepVisual_CompositeTextWithExtent_Extent(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aCollectedText: StepVisual_HArray1OfTextOrCharacter
        aExtent: StepVisual_PlanarExtent

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CompositeTextWithExtent_Init(self, *args)


    def SetExtent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aExtent: StepVisual_PlanarExtent

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CompositeTextWithExtent_SetExtent(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CompositeTextWithExtent_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CompositeTextWithExtent
    __del__ = lambda self: None
StepVisual_CompositeTextWithExtent_swigregister = _StepVisual.StepVisual_CompositeTextWithExtent_swigregister
StepVisual_CompositeTextWithExtent_swigregister(StepVisual_CompositeTextWithExtent)

class StepVisual_ContextDependentInvisibility(StepVisual_Invisibility):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Invisibility]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_ContextDependentInvisibility, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Invisibility]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_ContextDependentInvisibility, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a contextdependentinvisibility.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_ContextDependentInvisibility(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aInvisibleItems: StepVisual_HArray1OfInvisibleItem
        aPresentationContext: StepVisual_InvisibilityContext

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ContextDependentInvisibility_Init(self, *args)


    def PresentationContext(self, *args) -> "StepVisual_InvisibilityContext":
        """
        No available documentation.

        Returns
        -------
        StepVisual_InvisibilityContext

        """
        return _StepVisual.StepVisual_ContextDependentInvisibility_PresentationContext(self, *args)


    def SetPresentationContext(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPresentationContext: StepVisual_InvisibilityContext

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ContextDependentInvisibility_SetPresentationContext(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_ContextDependentInvisibility_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_ContextDependentInvisibility
    __del__ = lambda self: None
StepVisual_ContextDependentInvisibility_swigregister = _StepVisual.StepVisual_ContextDependentInvisibility_swigregister
StepVisual_ContextDependentInvisibility_swigregister(StepVisual_ContextDependentInvisibility)

class StepVisual_CoordinatesList(StepVisual_TessellatedItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_TessellatedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CoordinatesList, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_TessellatedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CoordinatesList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a coordinate list.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CoordinatesList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        thePoints: TColgp_HArray1OfXYZ

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CoordinatesList_Init(self, *args)


    def Points(self, *args) -> "opencascade::handle< TColgp_HArray1OfXYZ >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TColgp_HArray1OfXYZ>

        """
        return _StepVisual.StepVisual_CoordinatesList_Points(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CoordinatesList_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CoordinatesList
    __del__ = lambda self: None
StepVisual_CoordinatesList_swigregister = _StepVisual.StepVisual_CoordinatesList_swigregister
StepVisual_CoordinatesList_swigregister(StepVisual_CoordinatesList)

class StepVisual_MechanicalDesignGeometricPresentationRepresentation(StepVisual_PresentationRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PresentationRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_MechanicalDesignGeometricPresentationRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PresentationRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_MechanicalDesignGeometricPresentationRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a mechanicaldesigngeometricpresentationrepresentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_MechanicalDesignGeometricPresentationRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_MechanicalDesignGeometricPresentationRepresentation
    __del__ = lambda self: None
StepVisual_MechanicalDesignGeometricPresentationRepresentation_swigregister = _StepVisual.StepVisual_MechanicalDesignGeometricPresentationRepresentation_swigregister
StepVisual_MechanicalDesignGeometricPresentationRepresentation_swigregister(StepVisual_MechanicalDesignGeometricPresentationRepresentation)

class StepVisual_OverRidingStyledItem(StepVisual_StyledItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_StyledItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_OverRidingStyledItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_StyledItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_OverRidingStyledItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a overridingstyleditem.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_OverRidingStyledItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aStyles: StepVisual_HArray1OfPresentationStyleAssignment
        aItem: Standard_Transient
        aOverRiddenStyle: StepVisual_StyledItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_OverRidingStyledItem_Init(self, *args)


    def OverRiddenStyle(self, *args) -> "opencascade::handle< StepVisual_StyledItem >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_StyledItem>

        """
        return _StepVisual.StepVisual_OverRidingStyledItem_OverRiddenStyle(self, *args)


    def SetOverRiddenStyle(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOverRiddenStyle: StepVisual_StyledItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_OverRidingStyledItem_SetOverRiddenStyle(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_OverRidingStyledItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_OverRidingStyledItem
    __del__ = lambda self: None
StepVisual_OverRidingStyledItem_swigregister = _StepVisual.StepVisual_OverRidingStyledItem_swigregister
StepVisual_OverRidingStyledItem_swigregister(StepVisual_OverRidingStyledItem)

class StepVisual_PlanarBox(StepVisual_PlanarExtent):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PlanarExtent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PlanarBox, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PlanarExtent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PlanarBox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a planarbox.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PlanarBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSizeInX: float
        aSizeInY: float
        aPlacement: StepGeom_Axis2Placement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PlanarBox_Init(self, *args)


    def Placement(self, *args) -> "StepGeom_Axis2Placement":
        """
        No available documentation.

        Returns
        -------
        StepGeom_Axis2Placement

        """
        return _StepVisual.StepVisual_PlanarBox_Placement(self, *args)


    def SetPlacement(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPlacement: StepGeom_Axis2Placement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PlanarBox_SetPlacement(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PlanarBox_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PlanarBox
    __del__ = lambda self: None
StepVisual_PlanarBox_swigregister = _StepVisual.StepVisual_PlanarBox_swigregister
StepVisual_PlanarBox_swigregister(StepVisual_PlanarBox)

class StepVisual_PreDefinedColour(StepVisual_Colour):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Colour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PreDefinedColour, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Colour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PreDefinedColour, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a predefinedcolour.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PreDefinedColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetPreDefinedItem(self, *args) -> "opencascade::handle< StepVisual_PreDefinedItem > const &":
        """
        Return a pre_defined_item part.

        Returns
        -------
        opencascade::handle<StepVisual_PreDefinedItem>

        """
        return _StepVisual.StepVisual_PreDefinedColour_GetPreDefinedItem(self, *args)


    def SetPreDefinedItem(self, *args) -> "void":
        """
        Set a pre_defined_item part.

        Parameters
        ----------
        item: StepVisual_PreDefinedItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PreDefinedColour_SetPreDefinedItem(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PreDefinedColour_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PreDefinedColour
    __del__ = lambda self: None
StepVisual_PreDefinedColour_swigregister = _StepVisual.StepVisual_PreDefinedColour_swigregister
StepVisual_PreDefinedColour_swigregister(StepVisual_PreDefinedColour)

class StepVisual_PreDefinedCurveFont(StepVisual_PreDefinedItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PreDefinedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PreDefinedCurveFont, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PreDefinedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PreDefinedCurveFont, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a predefinedcurvefont.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PreDefinedCurveFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PreDefinedCurveFont_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PreDefinedCurveFont
    __del__ = lambda self: None
StepVisual_PreDefinedCurveFont_swigregister = _StepVisual.StepVisual_PreDefinedCurveFont_swigregister
StepVisual_PreDefinedCurveFont_swigregister(StepVisual_PreDefinedCurveFont)

class StepVisual_PreDefinedTextFont(StepVisual_PreDefinedItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PreDefinedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PreDefinedTextFont, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PreDefinedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PreDefinedTextFont, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a predefinedtextfont.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PreDefinedTextFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PreDefinedTextFont_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PreDefinedTextFont
    __del__ = lambda self: None
StepVisual_PreDefinedTextFont_swigregister = _StepVisual.StepVisual_PreDefinedTextFont_swigregister
StepVisual_PreDefinedTextFont_swigregister(StepVisual_PreDefinedTextFont)

class StepVisual_PresentationArea(StepVisual_PresentationRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PresentationRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationArea, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PresentationRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationarea.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationArea_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationArea
    __del__ = lambda self: None
StepVisual_PresentationArea_swigregister = _StepVisual.StepVisual_PresentationArea_swigregister
StepVisual_PresentationArea_swigregister(StepVisual_PresentationArea)

class StepVisual_PresentationStyleByContext(StepVisual_PresentationStyleAssignment):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PresentationStyleAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationStyleByContext, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PresentationStyleAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationStyleByContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationstylebycontext.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationStyleByContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyles: StepVisual_HArray1OfPresentationStyleSelect
        aStyleContext: StepVisual_StyleContextSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationStyleByContext_Init(self, *args)


    def SetStyleContext(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleContext: StepVisual_StyleContextSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_PresentationStyleByContext_SetStyleContext(self, *args)


    def StyleContext(self, *args) -> "StepVisual_StyleContextSelect":
        """
        No available documentation.

        Returns
        -------
        StepVisual_StyleContextSelect

        """
        return _StepVisual.StepVisual_PresentationStyleByContext_StyleContext(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationStyleByContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationStyleByContext
    __del__ = lambda self: None
StepVisual_PresentationStyleByContext_swigregister = _StepVisual.StepVisual_PresentationStyleByContext_swigregister
StepVisual_PresentationStyleByContext_swigregister(StepVisual_PresentationStyleByContext)

class StepVisual_PresentationView(StepVisual_PresentationRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PresentationRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_PresentationView, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PresentationRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_PresentationView, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a presentationview.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_PresentationView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_PresentationView_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_PresentationView
    __del__ = lambda self: None
StepVisual_PresentationView_swigregister = _StepVisual.StepVisual_PresentationView_swigregister
StepVisual_PresentationView_swigregister(StepVisual_PresentationView)

class StepVisual_SurfaceStyleRenderingWithProperties(StepVisual_SurfaceStyleRendering):
    __swig_setmethods__ = {}
    for _s in [StepVisual_SurfaceStyleRendering]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_SurfaceStyleRenderingWithProperties, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_SurfaceStyleRendering]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_SurfaceStyleRenderingWithProperties, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Default constructor.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_SurfaceStyleRenderingWithProperties(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theSurfaceStyleRendering_RenderingMethod: StepVisual_ShadingSurfaceMethod
        theSurfaceStyleRendering_SurfaceColour: StepVisual_Colour
        theProperties: StepVisual_HArray1OfRenderingPropertiesSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleRenderingWithProperties_Init(self, *args)


    def Properties(self, *args) -> "opencascade::handle< StepVisual_HArray1OfRenderingPropertiesSelect >":
        """
        Returns field properties.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfRenderingPropertiesSelect>

        """
        return _StepVisual.StepVisual_SurfaceStyleRenderingWithProperties_Properties(self, *args)


    def SetProperties(self, *args) -> "void":
        """
        Sets field properties.

        Parameters
        ----------
        theProperties: StepVisual_HArray1OfRenderingPropertiesSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_SurfaceStyleRenderingWithProperties_SetProperties(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_SurfaceStyleRenderingWithProperties_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_SurfaceStyleRenderingWithProperties
    __del__ = lambda self: None
StepVisual_SurfaceStyleRenderingWithProperties_swigregister = _StepVisual.StepVisual_SurfaceStyleRenderingWithProperties_swigregister
StepVisual_SurfaceStyleRenderingWithProperties_swigregister(StepVisual_SurfaceStyleRenderingWithProperties)

class StepVisual_TessellatedAnnotationOccurrence(StepVisual_StyledItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_StyledItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TessellatedAnnotationOccurrence, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_StyledItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TessellatedAnnotationOccurrence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a tesselatedannotationoccurence.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TessellatedAnnotationOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TessellatedAnnotationOccurrence_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TessellatedAnnotationOccurrence
    __del__ = lambda self: None
StepVisual_TessellatedAnnotationOccurrence_swigregister = _StepVisual.StepVisual_TessellatedAnnotationOccurrence_swigregister
StepVisual_TessellatedAnnotationOccurrence_swigregister(StepVisual_TessellatedAnnotationOccurrence)

class StepVisual_TessellatedCurveSet(StepVisual_TessellatedItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_TessellatedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TessellatedCurveSet, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_TessellatedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TessellatedCurveSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a draughtingcalloutelement select type.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TessellatedCurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CoordList(self, *args) -> "opencascade::handle< StepVisual_CoordinatesList >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_CoordinatesList>

        """
        return _StepVisual.StepVisual_TessellatedCurveSet_CoordList(self, *args)


    def Curves(self, *args) -> "NCollection_Handle< StepVisual_VectorOfHSequenceOfInteger >":
        """
        No available documentation.

        Returns
        -------
        NCollection_Handle<StepVisual_VectorOfHSequenceOfInteger >

        """
        return _StepVisual.StepVisual_TessellatedCurveSet_Curves(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theCoordList: StepVisual_CoordinatesList
        theCurves: NCollection_Handle<StepVisual_VectorOfHSequenceOfInteger>

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TessellatedCurveSet_Init(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TessellatedCurveSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TessellatedCurveSet
    __del__ = lambda self: None
StepVisual_TessellatedCurveSet_swigregister = _StepVisual.StepVisual_TessellatedCurveSet_swigregister
StepVisual_TessellatedCurveSet_swigregister(StepVisual_TessellatedCurveSet)

class StepVisual_TessellatedGeometricSet(StepVisual_TessellatedItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_TessellatedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TessellatedGeometricSet, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_TessellatedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TessellatedGeometricSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a draughtingcalloutelement select type.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TessellatedGeometricSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theItems: NCollection_Handle<StepVisual_Array1OfTessellatedItem>

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TessellatedGeometricSet_Init(self, *args)


    def Items(self, *args) -> "NCollection_Handle< StepVisual_Array1OfTessellatedItem >":
        """
        No available documentation.

        Returns
        -------
        NCollection_Handle<StepVisual_Array1OfTessellatedItem >

        """
        return _StepVisual.StepVisual_TessellatedGeometricSet_Items(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TessellatedGeometricSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TessellatedGeometricSet
    __del__ = lambda self: None
StepVisual_TessellatedGeometricSet_swigregister = _StepVisual.StepVisual_TessellatedGeometricSet_swigregister
StepVisual_TessellatedGeometricSet_swigregister(StepVisual_TessellatedGeometricSet)

class StepVisual_TextStyleWithBoxCharacteristics(StepVisual_TextStyle):
    __swig_setmethods__ = {}
    for _s in [StepVisual_TextStyle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_TextStyleWithBoxCharacteristics, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_TextStyle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_TextStyleWithBoxCharacteristics, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a textstylewithboxcharacteristics.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_TextStyleWithBoxCharacteristics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Characteristics(self, *args) -> "opencascade::handle< StepVisual_HArray1OfBoxCharacteristicSelect >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfBoxCharacteristicSelect>

        """
        return _StepVisual.StepVisual_TextStyleWithBoxCharacteristics_Characteristics(self, *args)


    def CharacteristicsValue(self, *args) -> "StepVisual_BoxCharacteristicSelect":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_BoxCharacteristicSelect

        """
        return _StepVisual.StepVisual_TextStyleWithBoxCharacteristics_CharacteristicsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aCharacterAppearance: StepVisual_TextStyleForDefinedFont
        aCharacteristics: StepVisual_HArray1OfBoxCharacteristicSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextStyleWithBoxCharacteristics_Init(self, *args)


    def NbCharacteristics(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_TextStyleWithBoxCharacteristics_NbCharacteristics(self, *args)


    def SetCharacteristics(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCharacteristics: StepVisual_HArray1OfBoxCharacteristicSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_TextStyleWithBoxCharacteristics_SetCharacteristics(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_TextStyleWithBoxCharacteristics_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_TextStyleWithBoxCharacteristics
    __del__ = lambda self: None
StepVisual_TextStyleWithBoxCharacteristics_swigregister = _StepVisual.StepVisual_TextStyleWithBoxCharacteristics_swigregister
StepVisual_TextStyleWithBoxCharacteristics_swigregister(StepVisual_TextStyleWithBoxCharacteristics)

class StepVisual_AnnotationCurveOccurrence(StepVisual_AnnotationOccurrence):
    __swig_setmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationCurveOccurrence, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationCurveOccurrence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a annotationcurveoccurrence.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationCurveOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AnnotationCurveOccurrence_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationCurveOccurrence
    __del__ = lambda self: None
StepVisual_AnnotationCurveOccurrence_swigregister = _StepVisual.StepVisual_AnnotationCurveOccurrence_swigregister
StepVisual_AnnotationCurveOccurrence_swigregister(StepVisual_AnnotationCurveOccurrence)

class StepVisual_AnnotationFillAreaOccurrence(StepVisual_AnnotationOccurrence):
    __swig_setmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationFillAreaOccurrence, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationFillAreaOccurrence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a annotationfillareaoccurrence.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationFillAreaOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FillStyleTarget(self, *args) -> "opencascade::handle< StepGeom_GeometricRepresentationItem >":
        """
        Returns field fill_style_target.

        Returns
        -------
        opencascade::handle<StepGeom_GeometricRepresentationItem>

        """
        return _StepVisual.StepVisual_AnnotationFillAreaOccurrence_FillStyleTarget(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theStyles: StepVisual_HArray1OfPresentationStyleAssignment
        theItem: Standard_Transient
        theFillStyleTarget: StepGeom_GeometricRepresentationItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_AnnotationFillAreaOccurrence_Init(self, *args)


    def SetFillStyleTarget(self, *args) -> "void":
        """
        Set field fill_style_target.

        Parameters
        ----------
        theTarget: StepGeom_GeometricRepresentationItem

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_AnnotationFillAreaOccurrence_SetFillStyleTarget(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AnnotationFillAreaOccurrence_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationFillAreaOccurrence
    __del__ = lambda self: None
StepVisual_AnnotationFillAreaOccurrence_swigregister = _StepVisual.StepVisual_AnnotationFillAreaOccurrence_swigregister
StepVisual_AnnotationFillAreaOccurrence_swigregister(StepVisual_AnnotationFillAreaOccurrence)

class StepVisual_AnnotationPlane(StepVisual_AnnotationOccurrence):
    __swig_setmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationPlane, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a annotationplane.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Elements(self, *args) -> "opencascade::handle< StepVisual_HArray1OfAnnotationPlaneElement >":
        """
        Returns field elements.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfAnnotationPlaneElement>

        """
        return _StepVisual.StepVisual_AnnotationPlane_Elements(self, *args)


    def ElementsValue(self, *args) -> "StepVisual_AnnotationPlaneElement":
        """
        Returns elements with the given number.

        Parameters
        ----------
        theNum: int

        Returns
        -------
        StepVisual_AnnotationPlaneElement

        """
        return _StepVisual.StepVisual_AnnotationPlane_ElementsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theStyles: StepVisual_HArray1OfPresentationStyleAssignment
        theItem: Standard_Transient
        theElements: StepVisual_HArray1OfAnnotationPlaneElement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_AnnotationPlane_Init(self, *args)


    def NbElements(self, *args) -> "Standard_Integer":
        """
        Returns number of elements.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_AnnotationPlane_NbElements(self, *args)


    def SetElements(self, *args) -> "void":
        """
        Set field elements.

        Parameters
        ----------
        theElements: StepVisual_HArray1OfAnnotationPlaneElement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_AnnotationPlane_SetElements(self, *args)


    def SetElementsValue(self, *args) -> "void":
        """
        Sets elements with given number.

        Parameters
        ----------
        theNum: int
        theItem: StepVisual_AnnotationPlaneElement

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_AnnotationPlane_SetElementsValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AnnotationPlane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationPlane
    __del__ = lambda self: None
StepVisual_AnnotationPlane_swigregister = _StepVisual.StepVisual_AnnotationPlane_swigregister
StepVisual_AnnotationPlane_swigregister(StepVisual_AnnotationPlane)

class StepVisual_AnnotationTextOccurrence(StepVisual_AnnotationOccurrence):
    __swig_setmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationTextOccurrence, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationTextOccurrence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a annotationtextoccurrence.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationTextOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AnnotationTextOccurrence_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationTextOccurrence
    __del__ = lambda self: None
StepVisual_AnnotationTextOccurrence_swigregister = _StepVisual.StepVisual_AnnotationTextOccurrence_swigregister
StepVisual_AnnotationTextOccurrence_swigregister(StepVisual_AnnotationTextOccurrence)

class StepVisual_CameraModelD3MultiClipping(StepVisual_CameraModelD3):
    __swig_setmethods__ = {}
    for _s in [StepVisual_CameraModelD3]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_CameraModelD3MultiClipping, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_CameraModelD3]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_CameraModelD3MultiClipping, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a cameramodeld3multiclipping.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_CameraModelD3MultiClipping(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theViewReferenceSystem: StepGeom_Axis2Placement3d
        thePerspectiveOfVolume: StepVisual_ViewVolume
        theShapeClipping: StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClipping_Init(self, *args)


    def SetShapeClipping(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theShapeClipping: StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClipping_SetShapeClipping(self, *args)


    def ShapeClipping(self, *args) -> "opencascade::handle< StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect > const":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect>

        """
        return _StepVisual.StepVisual_CameraModelD3MultiClipping_ShapeClipping(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_CameraModelD3MultiClipping_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_CameraModelD3MultiClipping
    __del__ = lambda self: None
StepVisual_CameraModelD3MultiClipping_swigregister = _StepVisual.StepVisual_CameraModelD3MultiClipping_swigregister
StepVisual_CameraModelD3MultiClipping_swigregister(StepVisual_CameraModelD3MultiClipping)

class StepVisual_ColourRgb(StepVisual_ColourSpecification):
    __swig_setmethods__ = {}
    for _s in [StepVisual_ColourSpecification]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_ColourRgb, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_ColourSpecification]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_ColourRgb, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a colourrgb.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_ColourRgb(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Blue(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_ColourRgb_Blue(self, *args)


    def Green(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_ColourRgb_Green(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aRed: float
        aGreen: float
        aBlue: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ColourRgb_Init(self, *args)


    def Red(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepVisual.StepVisual_ColourRgb_Red(self, *args)


    def SetBlue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBlue: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ColourRgb_SetBlue(self, *args)


    def SetGreen(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aGreen: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ColourRgb_SetGreen(self, *args)


    def SetRed(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRed: float

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ColourRgb_SetRed(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_ColourRgb_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_ColourRgb
    __del__ = lambda self: None
StepVisual_ColourRgb_swigregister = _StepVisual.StepVisual_ColourRgb_swigregister
StepVisual_ColourRgb_swigregister(StepVisual_ColourRgb)

class StepVisual_ContextDependentOverRidingStyledItem(StepVisual_OverRidingStyledItem):
    __swig_setmethods__ = {}
    for _s in [StepVisual_OverRidingStyledItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_ContextDependentOverRidingStyledItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_OverRidingStyledItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_ContextDependentOverRidingStyledItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a contextdependentoverridingstyleditem.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_ContextDependentOverRidingStyledItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aStyles: StepVisual_HArray1OfPresentationStyleAssignment
        aItem: Standard_Transient
        aOverRiddenStyle: StepVisual_StyledItem
        aStyleContext: StepVisual_HArray1OfStyleContextSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ContextDependentOverRidingStyledItem_Init(self, *args)


    def NbStyleContext(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepVisual.StepVisual_ContextDependentOverRidingStyledItem_NbStyleContext(self, *args)


    def SetStyleContext(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStyleContext: StepVisual_HArray1OfStyleContextSelect

        Returns
        -------
        None

        """
        return _StepVisual.StepVisual_ContextDependentOverRidingStyledItem_SetStyleContext(self, *args)


    def StyleContext(self, *args) -> "opencascade::handle< StepVisual_HArray1OfStyleContextSelect >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepVisual_HArray1OfStyleContextSelect>

        """
        return _StepVisual.StepVisual_ContextDependentOverRidingStyledItem_StyleContext(self, *args)


    def StyleContextValue(self, *args) -> "StepVisual_StyleContextSelect":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepVisual_StyleContextSelect

        """
        return _StepVisual.StepVisual_ContextDependentOverRidingStyledItem_StyleContextValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_ContextDependentOverRidingStyledItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_ContextDependentOverRidingStyledItem
    __del__ = lambda self: None
StepVisual_ContextDependentOverRidingStyledItem_swigregister = _StepVisual.StepVisual_ContextDependentOverRidingStyledItem_swigregister
StepVisual_ContextDependentOverRidingStyledItem_swigregister(StepVisual_ContextDependentOverRidingStyledItem)

class StepVisual_DraughtingAnnotationOccurrence(StepVisual_AnnotationOccurrence):
    __swig_setmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_DraughtingAnnotationOccurrence, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_AnnotationOccurrence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_DraughtingAnnotationOccurrence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a draughtingannotationoccurrence.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_DraughtingAnnotationOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_DraughtingAnnotationOccurrence_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_DraughtingAnnotationOccurrence
    __del__ = lambda self: None
StepVisual_DraughtingAnnotationOccurrence_swigregister = _StepVisual.StepVisual_DraughtingAnnotationOccurrence_swigregister
StepVisual_DraughtingAnnotationOccurrence_swigregister(StepVisual_DraughtingAnnotationOccurrence)

class StepVisual_DraughtingPreDefinedColour(StepVisual_PreDefinedColour):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PreDefinedColour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_DraughtingPreDefinedColour, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PreDefinedColour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_DraughtingPreDefinedColour, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a draughtingpredefinedcolour.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_DraughtingPreDefinedColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_DraughtingPreDefinedColour_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_DraughtingPreDefinedColour
    __del__ = lambda self: None
StepVisual_DraughtingPreDefinedColour_swigregister = _StepVisual.StepVisual_DraughtingPreDefinedColour_swigregister
StepVisual_DraughtingPreDefinedColour_swigregister(StepVisual_DraughtingPreDefinedColour)

class StepVisual_DraughtingPreDefinedCurveFont(StepVisual_PreDefinedCurveFont):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PreDefinedCurveFont]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_DraughtingPreDefinedCurveFont, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PreDefinedCurveFont]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_DraughtingPreDefinedCurveFont, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a draughtingpredefinedcurvefont.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_DraughtingPreDefinedCurveFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_DraughtingPreDefinedCurveFont_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_DraughtingPreDefinedCurveFont
    __del__ = lambda self: None
StepVisual_DraughtingPreDefinedCurveFont_swigregister = _StepVisual.StepVisual_DraughtingPreDefinedCurveFont_swigregister
StepVisual_DraughtingPreDefinedCurveFont_swigregister(StepVisual_DraughtingPreDefinedCurveFont)

class StepVisual_MechanicalDesignGeometricPresentationArea(StepVisual_PresentationArea):
    __swig_setmethods__ = {}
    for _s in [StepVisual_PresentationArea]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_MechanicalDesignGeometricPresentationArea, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_PresentationArea]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_MechanicalDesignGeometricPresentationArea, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a mechanicaldesigngeometricpresentationarea.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_MechanicalDesignGeometricPresentationArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_MechanicalDesignGeometricPresentationArea_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_MechanicalDesignGeometricPresentationArea
    __del__ = lambda self: None
StepVisual_MechanicalDesignGeometricPresentationArea_swigregister = _StepVisual.StepVisual_MechanicalDesignGeometricPresentationArea_swigregister
StepVisual_MechanicalDesignGeometricPresentationArea_swigregister(StepVisual_MechanicalDesignGeometricPresentationArea)

class StepVisual_AnnotationCurveOccurrenceAndGeomReprItem(StepVisual_AnnotationCurveOccurrence):
    __swig_setmethods__ = {}
    for _s in [StepVisual_AnnotationCurveOccurrence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_AnnotationCurveOccurrenceAndGeomReprItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_AnnotationCurveOccurrence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_AnnotationCurveOccurrenceAndGeomReprItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepVisual.new_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepVisual.delete_StepVisual_AnnotationCurveOccurrenceAndGeomReprItem
    __del__ = lambda self: None
StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_swigregister = _StepVisual.StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_swigregister
StepVisual_AnnotationCurveOccurrenceAndGeomReprItem_swigregister(StepVisual_AnnotationCurveOccurrenceAndGeomReprItem)

class StepVisual_HArray1OfAnnotationPlaneElement(StepVisual_Array1OfAnnotationPlaneElement, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfAnnotationPlaneElement, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfAnnotationPlaneElement, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfAnnotationPlaneElement, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfAnnotationPlaneElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfAnnotationPlaneElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfAnnotationPlaneElement const &":
        return _StepVisual.StepVisual_HArray1OfAnnotationPlaneElement_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfAnnotationPlaneElement &":
        return _StepVisual.StepVisual_HArray1OfAnnotationPlaneElement_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfAnnotationPlaneElement_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfAnnotationPlaneElement
    __del__ = lambda self: None
StepVisual_HArray1OfAnnotationPlaneElement_swigregister = _StepVisual.StepVisual_HArray1OfAnnotationPlaneElement_swigregister
StepVisual_HArray1OfAnnotationPlaneElement_swigregister(StepVisual_HArray1OfAnnotationPlaneElement)

class StepVisual_HArray1OfDraughtingCalloutElement(StepVisual_Array1OfDraughtingCalloutElement, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfDraughtingCalloutElement, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfDraughtingCalloutElement, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfDraughtingCalloutElement, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfDraughtingCalloutElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfDraughtingCalloutElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfDraughtingCalloutElement const &":
        return _StepVisual.StepVisual_HArray1OfDraughtingCalloutElement_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfDraughtingCalloutElement &":
        return _StepVisual.StepVisual_HArray1OfDraughtingCalloutElement_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfDraughtingCalloutElement_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfDraughtingCalloutElement
    __del__ = lambda self: None
StepVisual_HArray1OfDraughtingCalloutElement_swigregister = _StepVisual.StepVisual_HArray1OfDraughtingCalloutElement_swigregister
StepVisual_HArray1OfDraughtingCalloutElement_swigregister(StepVisual_HArray1OfDraughtingCalloutElement)

class StepVisual_HArray1OfDirectionCountSelect(StepVisual_Array1OfDirectionCountSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfDirectionCountSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfDirectionCountSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfDirectionCountSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfDirectionCountSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfDirectionCountSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfDirectionCountSelect const &":
        return _StepVisual.StepVisual_HArray1OfDirectionCountSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfDirectionCountSelect &":
        return _StepVisual.StepVisual_HArray1OfDirectionCountSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfDirectionCountSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfDirectionCountSelect
    __del__ = lambda self: None
StepVisual_HArray1OfDirectionCountSelect_swigregister = _StepVisual.StepVisual_HArray1OfDirectionCountSelect_swigregister
StepVisual_HArray1OfDirectionCountSelect_swigregister(StepVisual_HArray1OfDirectionCountSelect)

class StepVisual_HArray1OfStyleContextSelect(StepVisual_Array1OfStyleContextSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfStyleContextSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfStyleContextSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfStyleContextSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfStyleContextSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfStyleContextSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfStyleContextSelect const &":
        return _StepVisual.StepVisual_HArray1OfStyleContextSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfStyleContextSelect &":
        return _StepVisual.StepVisual_HArray1OfStyleContextSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfStyleContextSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfStyleContextSelect
    __del__ = lambda self: None
StepVisual_HArray1OfStyleContextSelect_swigregister = _StepVisual.StepVisual_HArray1OfStyleContextSelect_swigregister
StepVisual_HArray1OfStyleContextSelect_swigregister(StepVisual_HArray1OfStyleContextSelect)

class StepVisual_HArray1OfPresentationStyleSelect(StepVisual_Array1OfPresentationStyleSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfPresentationStyleSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfPresentationStyleSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfPresentationStyleSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfPresentationStyleSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfPresentationStyleSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfPresentationStyleSelect const &":
        return _StepVisual.StepVisual_HArray1OfPresentationStyleSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfPresentationStyleSelect &":
        return _StepVisual.StepVisual_HArray1OfPresentationStyleSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfPresentationStyleSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfPresentationStyleSelect
    __del__ = lambda self: None
StepVisual_HArray1OfPresentationStyleSelect_swigregister = _StepVisual.StepVisual_HArray1OfPresentationStyleSelect_swigregister
StepVisual_HArray1OfPresentationStyleSelect_swigregister(StepVisual_HArray1OfPresentationStyleSelect)

class StepVisual_HArray1OfCurveStyleFontPattern(StepVisual_Array1OfCurveStyleFontPattern, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfCurveStyleFontPattern, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfCurveStyleFontPattern, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfCurveStyleFontPattern, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfCurveStyleFontPattern, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfCurveStyleFontPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfCurveStyleFontPattern const &":
        return _StepVisual.StepVisual_HArray1OfCurveStyleFontPattern_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfCurveStyleFontPattern &":
        return _StepVisual.StepVisual_HArray1OfCurveStyleFontPattern_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfCurveStyleFontPattern_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfCurveStyleFontPattern
    __del__ = lambda self: None
StepVisual_HArray1OfCurveStyleFontPattern_swigregister = _StepVisual.StepVisual_HArray1OfCurveStyleFontPattern_swigregister
StepVisual_HArray1OfCurveStyleFontPattern_swigregister(StepVisual_HArray1OfCurveStyleFontPattern)

class StepVisual_HArray1OfRenderingPropertiesSelect(StepVisual_Array1OfRenderingPropertiesSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfRenderingPropertiesSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfRenderingPropertiesSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfRenderingPropertiesSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfRenderingPropertiesSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfRenderingPropertiesSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfRenderingPropertiesSelect const &":
        return _StepVisual.StepVisual_HArray1OfRenderingPropertiesSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfRenderingPropertiesSelect &":
        return _StepVisual.StepVisual_HArray1OfRenderingPropertiesSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfRenderingPropertiesSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfRenderingPropertiesSelect
    __del__ = lambda self: None
StepVisual_HArray1OfRenderingPropertiesSelect_swigregister = _StepVisual.StepVisual_HArray1OfRenderingPropertiesSelect_swigregister
StepVisual_HArray1OfRenderingPropertiesSelect_swigregister(StepVisual_HArray1OfRenderingPropertiesSelect)

class StepVisual_HArray1OfBoxCharacteristicSelect(StepVisual_Array1OfBoxCharacteristicSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfBoxCharacteristicSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfBoxCharacteristicSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfBoxCharacteristicSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfBoxCharacteristicSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfBoxCharacteristicSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfBoxCharacteristicSelect const &":
        return _StepVisual.StepVisual_HArray1OfBoxCharacteristicSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfBoxCharacteristicSelect &":
        return _StepVisual.StepVisual_HArray1OfBoxCharacteristicSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfBoxCharacteristicSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfBoxCharacteristicSelect
    __del__ = lambda self: None
StepVisual_HArray1OfBoxCharacteristicSelect_swigregister = _StepVisual.StepVisual_HArray1OfBoxCharacteristicSelect_swigregister
StepVisual_HArray1OfBoxCharacteristicSelect_swigregister(StepVisual_HArray1OfBoxCharacteristicSelect)

class StepVisual_HArray1OfPresentationStyleAssignment(StepVisual_Array1OfPresentationStyleAssignment, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfPresentationStyleAssignment, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfPresentationStyleAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfPresentationStyleAssignment, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfPresentationStyleAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfPresentationStyleAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfPresentationStyleAssignment const &":
        return _StepVisual.StepVisual_HArray1OfPresentationStyleAssignment_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfPresentationStyleAssignment &":
        return _StepVisual.StepVisual_HArray1OfPresentationStyleAssignment_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfPresentationStyleAssignment_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfPresentationStyleAssignment
    __del__ = lambda self: None
StepVisual_HArray1OfPresentationStyleAssignment_swigregister = _StepVisual.StepVisual_HArray1OfPresentationStyleAssignment_swigregister
StepVisual_HArray1OfPresentationStyleAssignment_swigregister(StepVisual_HArray1OfPresentationStyleAssignment)

class StepVisual_HArray1OfFillStyleSelect(StepVisual_Array1OfFillStyleSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfFillStyleSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfFillStyleSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfFillStyleSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfFillStyleSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfFillStyleSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfFillStyleSelect const &":
        return _StepVisual.StepVisual_HArray1OfFillStyleSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfFillStyleSelect &":
        return _StepVisual.StepVisual_HArray1OfFillStyleSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfFillStyleSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfFillStyleSelect
    __del__ = lambda self: None
StepVisual_HArray1OfFillStyleSelect_swigregister = _StepVisual.StepVisual_HArray1OfFillStyleSelect_swigregister
StepVisual_HArray1OfFillStyleSelect_swigregister(StepVisual_HArray1OfFillStyleSelect)

class StepVisual_HArray1OfTextOrCharacter(StepVisual_Array1OfTextOrCharacter, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfTextOrCharacter, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfTextOrCharacter, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfTextOrCharacter, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfTextOrCharacter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfTextOrCharacter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfTextOrCharacter const &":
        return _StepVisual.StepVisual_HArray1OfTextOrCharacter_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfTextOrCharacter &":
        return _StepVisual.StepVisual_HArray1OfTextOrCharacter_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfTextOrCharacter_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfTextOrCharacter
    __del__ = lambda self: None
StepVisual_HArray1OfTextOrCharacter_swigregister = _StepVisual.StepVisual_HArray1OfTextOrCharacter_swigregister
StepVisual_HArray1OfTextOrCharacter_swigregister(StepVisual_HArray1OfTextOrCharacter)

class StepVisual_HArray1OfSurfaceStyleElementSelect(StepVisual_Array1OfSurfaceStyleElementSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfSurfaceStyleElementSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfSurfaceStyleElementSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfSurfaceStyleElementSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfSurfaceStyleElementSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfSurfaceStyleElementSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfSurfaceStyleElementSelect const &":
        return _StepVisual.StepVisual_HArray1OfSurfaceStyleElementSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfSurfaceStyleElementSelect &":
        return _StepVisual.StepVisual_HArray1OfSurfaceStyleElementSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfSurfaceStyleElementSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfSurfaceStyleElementSelect
    __del__ = lambda self: None
StepVisual_HArray1OfSurfaceStyleElementSelect_swigregister = _StepVisual.StepVisual_HArray1OfSurfaceStyleElementSelect_swigregister
StepVisual_HArray1OfSurfaceStyleElementSelect_swigregister(StepVisual_HArray1OfSurfaceStyleElementSelect)

class StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect(StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect const &":
        return _StepVisual.StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfCameraModelD3MultiClippingUnionSelect &":
        return _StepVisual.StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect
    __del__ = lambda self: None
StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_swigregister = _StepVisual.StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_swigregister
StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect_swigregister(StepVisual_HArray1OfCameraModelD3MultiClippingUnionSelect)

class StepVisual_HArray1OfLayeredItem(StepVisual_Array1OfLayeredItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfLayeredItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfLayeredItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfLayeredItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfLayeredItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfLayeredItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfLayeredItem const &":
        return _StepVisual.StepVisual_HArray1OfLayeredItem_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfLayeredItem &":
        return _StepVisual.StepVisual_HArray1OfLayeredItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfLayeredItem_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfLayeredItem
    __del__ = lambda self: None
StepVisual_HArray1OfLayeredItem_swigregister = _StepVisual.StepVisual_HArray1OfLayeredItem_swigregister
StepVisual_HArray1OfLayeredItem_swigregister(StepVisual_HArray1OfLayeredItem)

class StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect(StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect const &":
        return _StepVisual.StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfCameraModelD3MultiClippingInterectionSelect &":
        return _StepVisual.StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect
    __del__ = lambda self: None
StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_swigregister = _StepVisual.StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_swigregister
StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect_swigregister(StepVisual_HArray1OfCameraModelD3MultiClippingInterectionSelect)

class StepVisual_HArray1OfInvisibleItem(StepVisual_Array1OfInvisibleItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepVisual_Array1OfInvisibleItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepVisual_HArray1OfInvisibleItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepVisual_Array1OfInvisibleItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepVisual_HArray1OfInvisibleItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepVisual.new_StepVisual_HArray1OfInvisibleItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepVisual_Array1OfInvisibleItem const &":
        return _StepVisual.StepVisual_HArray1OfInvisibleItem_Array1(self)

    def ChangeArray1(self) -> "StepVisual_Array1OfInvisibleItem &":
        return _StepVisual.StepVisual_HArray1OfInvisibleItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepVisual_HArray1OfInvisibleItem_DownCast(t)

    __swig_destroy__ = _StepVisual.delete_StepVisual_HArray1OfInvisibleItem
    __del__ = lambda self: None
StepVisual_HArray1OfInvisibleItem_swigregister = _StepVisual.StepVisual_HArray1OfInvisibleItem_swigregister
StepVisual_HArray1OfInvisibleItem_swigregister(StepVisual_HArray1OfInvisibleItem)



# This file is compatible with both classic and new-style classes.


