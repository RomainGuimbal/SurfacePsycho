# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
XmlMDocStd module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_xmlmdocstd.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _XmlMDocStd
else:
    import _XmlMDocStd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDocStd.delete_SwigPyIterator

    def value(self):
        return _XmlMDocStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMDocStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMDocStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMDocStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMDocStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMDocStd.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMDocStd.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMDocStd.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMDocStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMDocStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMDocStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMDocStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMDocStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMDocStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMDocStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMDocStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _XmlMDocStd:
_XmlMDocStd.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _XmlMDocStd.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.XmlMDF
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlMDocStd_XLinkDriver_Create():
    return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_Create()

def Handle_XmlMDocStd_XLinkDriver_DownCast(t):
    return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_DownCast(t)

def Handle_XmlMDocStd_XLinkDriver_IsNull(t):
    return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_IsNull(t)
class xmlmdocstd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AddDrivers(*args):
        r"""

        Parameters
        ----------
        aDriverTable: XmlMDF_ADriverTable
        theMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        Adds the attribute drivers to <adrivertable>.

        """
        return _XmlMDocStd.xmlmdocstd_AddDrivers(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _XmlMDocStd.xmlmdocstd_swiginit(self, _XmlMDocStd.new_xmlmdocstd())
    __swig_destroy__ = _XmlMDocStd.delete_xmlmdocstd

# Register xmlmdocstd in _XmlMDocStd:
_XmlMDocStd.xmlmdocstd_swigregister(xmlmdocstd)
class XmlMDocStd_XLinkDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _XmlMDocStd.XmlMDocStd_XLinkDriver_swiginit(self, _XmlMDocStd.new_XmlMDocStd_XLinkDriver(*args))

    def Paste(self, *args):
        r"""

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _XmlMDocStd.XmlMDocStd_XLinkDriver_Paste(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_XmlMDocStd_XLinkDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDocStd.delete_XmlMDocStd_XLinkDriver

# Register XmlMDocStd_XLinkDriver in _XmlMDocStd:
_XmlMDocStd.XmlMDocStd_XLinkDriver_swigregister(XmlMDocStd_XLinkDriver)



@deprecated
def xmlmdocstd_AddDrivers(*args):
	return xmlmdocstd.AddDrivers(*args)



