# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlMDocStd module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmlmdocstd.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMDocStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMDocStd')
    _XmlMDocStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMDocStd', [dirname(__file__)])
        except ImportError:
            import _XmlMDocStd
            return _XmlMDocStd
        try:
            _mod = imp.load_module('_XmlMDocStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMDocStd = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMDocStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDocStd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XmlMDocStd.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlMDocStd.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlMDocStd.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XmlMDocStd.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMDocStd.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XmlMDocStd.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XmlMDocStd.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XmlMDocStd.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XmlMDocStd.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlMDocStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMDocStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMDocStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlMDocStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlMDocStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlMDocStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XmlMDocStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMDocStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlMDocStd.process_exception(error, method_name, class_name)
process_exception = _XmlMDocStd.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.XmlMDF
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlMDocStd_XLinkDriver_Create() -> "opencascade::handle< XmlMDocStd_XLinkDriver >":
    return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_Create()
Handle_XmlMDocStd_XLinkDriver_Create = _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_Create

def Handle_XmlMDocStd_XLinkDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMDocStd_XLinkDriver >":
    return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_DownCast(t)
Handle_XmlMDocStd_XLinkDriver_DownCast = _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_DownCast

def Handle_XmlMDocStd_XLinkDriver_IsNull(t: 'opencascade::handle< XmlMDocStd_XLinkDriver > const &') -> "bool":
    return _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_IsNull(t)
Handle_XmlMDocStd_XLinkDriver_IsNull = _XmlMDocStd.Handle_XmlMDocStd_XLinkDriver_IsNull
class xmlmdocstd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xmlmdocstd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xmlmdocstd, name)
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        Adds the attribute drivers to <adrivertable>.

        Parameters
        ----------
        aDriverTable: XmlMDF_ADriverTable
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        return _XmlMDocStd.xmlmdocstd_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlMDocStd.new_xmlmdocstd()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDocStd.delete_xmlmdocstd
    __del__ = lambda self: None
xmlmdocstd_swigregister = _XmlMDocStd.xmlmdocstd_swigregister
xmlmdocstd_swigregister(xmlmdocstd)

def xmlmdocstd_AddDrivers(*args) -> "void":
    """
    Adds the attribute drivers to <adrivertable>.

    Parameters
    ----------
    aDriverTable: XmlMDF_ADriverTable
    theMessageDriver: Message_Messenger

    Returns
    -------
    None

    """
    return _XmlMDocStd.xmlmdocstd_AddDrivers(*args)

class XmlMDocStd_XLinkDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMDocStd_XLinkDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMDocStd_XLinkDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMDocStd.new_XmlMDocStd_XLinkDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMDocStd.XmlMDocStd_XLinkDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMDocStd_XLinkDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDocStd.delete_XmlMDocStd_XLinkDriver
    __del__ = lambda self: None
XmlMDocStd_XLinkDriver_swigregister = _XmlMDocStd.XmlMDocStd_XLinkDriver_swigregister
XmlMDocStd_XLinkDriver_swigregister(XmlMDocStd_XLinkDriver)



# This file is compatible with both classic and new-style classes.


