# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
BinXCAFDrivers module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_binxcafdrivers.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BinXCAFDrivers
else:
    import _BinXCAFDrivers

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinXCAFDrivers.delete_SwigPyIterator

    def value(self):
        return _BinXCAFDrivers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinXCAFDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinXCAFDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinXCAFDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinXCAFDrivers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinXCAFDrivers.SwigPyIterator_copy(self)

    def next(self):
        return _BinXCAFDrivers.SwigPyIterator_next(self)

    def __next__(self):
        return _BinXCAFDrivers.SwigPyIterator___next__(self)

    def previous(self):
        return _BinXCAFDrivers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinXCAFDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinXCAFDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinXCAFDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinXCAFDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinXCAFDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinXCAFDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinXCAFDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BinXCAFDrivers:
_BinXCAFDrivers.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BinXCAFDrivers.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.BinMDF
import OCC.Core.TDF
import OCC.Core.BinObjMgt
import OCC.Core.Storage
import OCC.Core.TDocStd
import OCC.Core.CDF
import OCC.Core.CDM
import OCC.Core.Resource
import OCC.Core.PCDM
import OCC.Core.BinDrivers
import OCC.Core.BinLDrivers

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BinXCAFDrivers_DocumentRetrievalDriver_Create():
    return _BinXCAFDrivers.Handle_BinXCAFDrivers_DocumentRetrievalDriver_Create()

def Handle_BinXCAFDrivers_DocumentRetrievalDriver_DownCast(t):
    return _BinXCAFDrivers.Handle_BinXCAFDrivers_DocumentRetrievalDriver_DownCast(t)

def Handle_BinXCAFDrivers_DocumentRetrievalDriver_IsNull(t):
    return _BinXCAFDrivers.Handle_BinXCAFDrivers_DocumentRetrievalDriver_IsNull(t)

def Handle_BinXCAFDrivers_DocumentStorageDriver_Create():
    return _BinXCAFDrivers.Handle_BinXCAFDrivers_DocumentStorageDriver_Create()

def Handle_BinXCAFDrivers_DocumentStorageDriver_DownCast(t):
    return _BinXCAFDrivers.Handle_BinXCAFDrivers_DocumentStorageDriver_DownCast(t)

def Handle_BinXCAFDrivers_DocumentStorageDriver_IsNull(t):
    return _BinXCAFDrivers.Handle_BinXCAFDrivers_DocumentStorageDriver_IsNull(t)
class binxcafdrivers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AttributeDrivers(*args):
        r"""

        Parameters
        ----------
        MsgDrv: Message_Messenger

        Return
        -------
        opencascade::handle<BinMDF_ADriverTable>

        Description
        -----------
        Creates the table of drivers of types supported.

        """
        return _BinXCAFDrivers.binxcafdrivers_AttributeDrivers(*args)

    @staticmethod
    def DefineFormat(*args):
        r"""

        Parameters
        ----------
        theApp: TDocStd_Application

        Return
        -------
        None

        Description
        -----------
        Defines format 'binxcaf' and registers its read and write drivers in the specified application.

        """
        return _BinXCAFDrivers.binxcafdrivers_DefineFormat(*args)

    @staticmethod
    def Factory(*args):
        r"""

        Parameters
        ----------
        theGUID: Standard_GUID

        Return
        -------
        opencascade::handle<Standard_Transient>

        Description
        -----------
        No available documentation.

        """
        return _BinXCAFDrivers.binxcafdrivers_Factory(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _BinXCAFDrivers.binxcafdrivers_swiginit(self, _BinXCAFDrivers.new_binxcafdrivers())
    __swig_destroy__ = _BinXCAFDrivers.delete_binxcafdrivers

# Register binxcafdrivers in _BinXCAFDrivers:
_BinXCAFDrivers.binxcafdrivers_swigregister(binxcafdrivers)
class BinXCAFDrivers_DocumentRetrievalDriver(OCC.Core.BinDrivers.BinDrivers_DocumentRetrievalDriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _BinXCAFDrivers.BinXCAFDrivers_DocumentRetrievalDriver_swiginit(self, _BinXCAFDrivers.new_BinXCAFDrivers_DocumentRetrievalDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BinXCAFDrivers_DocumentRetrievalDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinXCAFDrivers.delete_BinXCAFDrivers_DocumentRetrievalDriver

# Register BinXCAFDrivers_DocumentRetrievalDriver in _BinXCAFDrivers:
_BinXCAFDrivers.BinXCAFDrivers_DocumentRetrievalDriver_swigregister(BinXCAFDrivers_DocumentRetrievalDriver)
class BinXCAFDrivers_DocumentStorageDriver(OCC.Core.BinDrivers.BinDrivers_DocumentStorageDriver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructor.

        """
        _BinXCAFDrivers.BinXCAFDrivers_DocumentStorageDriver_swiginit(self, _BinXCAFDrivers.new_BinXCAFDrivers_DocumentStorageDriver(*args))


    @staticmethod
    def DownCast(t):
      return Handle_BinXCAFDrivers_DocumentStorageDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BinXCAFDrivers.delete_BinXCAFDrivers_DocumentStorageDriver

# Register BinXCAFDrivers_DocumentStorageDriver in _BinXCAFDrivers:
_BinXCAFDrivers.BinXCAFDrivers_DocumentStorageDriver_swigregister(BinXCAFDrivers_DocumentStorageDriver)



@deprecated
def binxcafdrivers_AttributeDrivers(*args):
	return binxcafdrivers.AttributeDrivers(*args)

@deprecated
def binxcafdrivers_DefineFormat(*args):
	return binxcafdrivers.DefineFormat(*args)

@deprecated
def binxcafdrivers_Factory(*args):
	return binxcafdrivers.Factory(*args)



