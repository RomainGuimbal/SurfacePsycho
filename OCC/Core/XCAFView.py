# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XCAFView module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xcafview.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XCAFView')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XCAFView')
    _XCAFView = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFView', [dirname(__file__)])
        except ImportError:
            import _XCAFView
            return _XCAFView
        try:
            _mod = imp.load_module('_XCAFView', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XCAFView = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFView
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFView.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XCAFView.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XCAFView.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XCAFView.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XCAFView.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XCAFView.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XCAFView.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XCAFView.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XCAFView.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XCAFView.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XCAFView.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XCAFView.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XCAFView.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XCAFView.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XCAFView.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XCAFView.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XCAFView.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XCAFView.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XCAFView.process_exception(error, method_name, class_name)
process_exception = _XCAFView.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd

from enum import IntEnum
from OCC.Core.Exception import *

XCAFView_ProjectionType_NoCamera = _XCAFView.XCAFView_ProjectionType_NoCamera
XCAFView_ProjectionType_Parallel = _XCAFView.XCAFView_ProjectionType_Parallel
XCAFView_ProjectionType_Central = _XCAFView.XCAFView_ProjectionType_Central


class XCAFView_ProjectionType(IntEnum):
	XCAFView_ProjectionType_NoCamera = 0
	XCAFView_ProjectionType_Parallel = 1
	XCAFView_ProjectionType_Central = 2
XCAFView_ProjectionType_NoCamera = XCAFView_ProjectionType.XCAFView_ProjectionType_NoCamera
XCAFView_ProjectionType_Parallel = XCAFView_ProjectionType.XCAFView_ProjectionType_Parallel
XCAFView_ProjectionType_Central = XCAFView_ProjectionType.XCAFView_ProjectionType_Central


def Handle_XCAFView_Object_Create() -> "opencascade::handle< XCAFView_Object >":
    return _XCAFView.Handle_XCAFView_Object_Create()
Handle_XCAFView_Object_Create = _XCAFView.Handle_XCAFView_Object_Create

def Handle_XCAFView_Object_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XCAFView_Object >":
    return _XCAFView.Handle_XCAFView_Object_DownCast(t)
Handle_XCAFView_Object_DownCast = _XCAFView.Handle_XCAFView_Object_DownCast

def Handle_XCAFView_Object_IsNull(t: 'opencascade::handle< XCAFView_Object > const &') -> "bool":
    return _XCAFView.Handle_XCAFView_Object_IsNull(t)
Handle_XCAFView_Object_IsNull = _XCAFView.Handle_XCAFView_Object_IsNull
class XCAFView_Object(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XCAFView_Object, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XCAFView_Object, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        theObj: XCAFView_Object

        Returns
        -------
        None

        """
        this = _XCAFView.new_XCAFView_Object(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BackPlaneDistance(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _XCAFView.XCAFView_Object_BackPlaneDistance(self, *args)


    def ClippingExpression(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _XCAFView.XCAFView_Object_ClippingExpression(self, *args)


    def CreateGDTPoints(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theLenght: int

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_CreateGDTPoints(self, *args)


    def FrontPlaneDistance(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _XCAFView.XCAFView_Object_FrontPlaneDistance(self, *args)


    def GDTPoint(self, *args) -> "gp_Pnt":
        """
        No available documentation.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        gp_Pnt

        """
        return _XCAFView.XCAFView_Object_GDTPoint(self, *args)


    def HasBackPlaneClipping(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _XCAFView.XCAFView_Object_HasBackPlaneClipping(self, *args)


    def HasFrontPlaneClipping(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _XCAFView.XCAFView_Object_HasFrontPlaneClipping(self, *args)


    def HasGDTPoints(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _XCAFView.XCAFView_Object_HasGDTPoints(self, *args)


    def HasViewVolumeSidesClipping(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _XCAFView.XCAFView_Object_HasViewVolumeSidesClipping(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _XCAFView.XCAFView_Object_Name(self, *args)


    def NbGDTPoints(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _XCAFView.XCAFView_Object_NbGDTPoints(self, *args)


    def ProjectionPoint(self, *args) -> "gp_Pnt":
        """
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _XCAFView.XCAFView_Object_ProjectionPoint(self, *args)


    def SetBackPlaneDistance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theDistance: float

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetBackPlaneDistance(self, *args)


    def SetClippingExpression(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theExpression: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetClippingExpression(self, *args)


    def SetFrontPlaneDistance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theDistance: float

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetFrontPlaneDistance(self, *args)


    def SetGDTPoint(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theIndex: int
        thePoint: gp_Pnt

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetGDTPoint(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetName(self, *args)


    def SetProjectionPoint(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        thePoint: gp_Pnt

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetProjectionPoint(self, *args)


    def SetType(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theType: XCAFView_ProjectionType

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetType(self, *args)


    def SetUpDirection(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theDirection: gp_Dir

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetUpDirection(self, *args)


    def SetViewDirection(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theDirection: gp_Dir

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetViewDirection(self, *args)


    def SetViewVolumeSidesClipping(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theViewVolumeSidesClipping: bool

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetViewVolumeSidesClipping(self, *args)


    def SetWindowHorizontalSize(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theSize: float

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetWindowHorizontalSize(self, *args)


    def SetWindowVerticalSize(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theSize: float

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetWindowVerticalSize(self, *args)


    def SetZoomFactor(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theZoomFactor: float

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_SetZoomFactor(self, *args)


    def Type(self, *args) -> "XCAFView_ProjectionType":
        """
        No available documentation.

        Returns
        -------
        XCAFView_ProjectionType

        """
        return _XCAFView.XCAFView_Object_Type(self, *args)


    def UnsetBackPlaneClipping(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_UnsetBackPlaneClipping(self, *args)


    def UnsetFrontPlaneClipping(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _XCAFView.XCAFView_Object_UnsetFrontPlaneClipping(self, *args)


    def UpDirection(self, *args) -> "gp_Dir":
        """
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _XCAFView.XCAFView_Object_UpDirection(self, *args)


    def ViewDirection(self, *args) -> "gp_Dir":
        """
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _XCAFView.XCAFView_Object_ViewDirection(self, *args)


    def WindowHorizontalSize(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _XCAFView.XCAFView_Object_WindowHorizontalSize(self, *args)


    def WindowVerticalSize(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _XCAFView.XCAFView_Object_WindowVerticalSize(self, *args)


    def ZoomFactor(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _XCAFView.XCAFView_Object_ZoomFactor(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XCAFView_Object_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XCAFView.delete_XCAFView_Object
    __del__ = lambda self: None
XCAFView_Object_swigregister = _XCAFView.XCAFView_Object_swigregister
XCAFView_Object_swigregister(XCAFView_Object)



# This file is compatible with both classic and new-style classes.


