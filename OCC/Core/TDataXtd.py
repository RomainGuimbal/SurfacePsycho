# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
TDataXtd module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_tdataxtd.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TDataXtd
else:
    import _TDataXtd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDataXtd.delete_SwigPyIterator

    def value(self):
        return _TDataXtd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TDataXtd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TDataXtd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TDataXtd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TDataXtd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TDataXtd.SwigPyIterator_copy(self)

    def next(self):
        return _TDataXtd.SwigPyIterator_next(self)

    def __next__(self):
        return _TDataXtd.SwigPyIterator___next__(self)

    def previous(self):
        return _TDataXtd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TDataXtd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TDataXtd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TDataXtd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TDataXtd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TDataXtd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TDataXtd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TDataXtd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TDataXtd:
_TDataXtd.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _TDataXtd.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TDF
import OCC.Core.TCollection
import OCC.Core.TColStd
import OCC.Core.TDataStd
import OCC.Core.gp
import OCC.Core.TNaming
import OCC.Core.TopTools
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.Quantity
import OCC.Core.Poly
import OCC.Core.TColgp
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.TShort

from enum import IntEnum
from OCC.Core.Exception import *

TDataXtd_RADIUS = _TDataXtd.TDataXtd_RADIUS
TDataXtd_DIAMETER = _TDataXtd.TDataXtd_DIAMETER
TDataXtd_MINOR_RADIUS = _TDataXtd.TDataXtd_MINOR_RADIUS
TDataXtd_MAJOR_RADIUS = _TDataXtd.TDataXtd_MAJOR_RADIUS
TDataXtd_TANGENT = _TDataXtd.TDataXtd_TANGENT
TDataXtd_PARALLEL = _TDataXtd.TDataXtd_PARALLEL
TDataXtd_PERPENDICULAR = _TDataXtd.TDataXtd_PERPENDICULAR
TDataXtd_CONCENTRIC = _TDataXtd.TDataXtd_CONCENTRIC
TDataXtd_COINCIDENT = _TDataXtd.TDataXtd_COINCIDENT
TDataXtd_DISTANCE = _TDataXtd.TDataXtd_DISTANCE
TDataXtd_ANGLE = _TDataXtd.TDataXtd_ANGLE
TDataXtd_EQUAL_RADIUS = _TDataXtd.TDataXtd_EQUAL_RADIUS
TDataXtd_SYMMETRY = _TDataXtd.TDataXtd_SYMMETRY
TDataXtd_MIDPOINT = _TDataXtd.TDataXtd_MIDPOINT
TDataXtd_EQUAL_DISTANCE = _TDataXtd.TDataXtd_EQUAL_DISTANCE
TDataXtd_FIX = _TDataXtd.TDataXtd_FIX
TDataXtd_RIGID = _TDataXtd.TDataXtd_RIGID
TDataXtd_FROM = _TDataXtd.TDataXtd_FROM
TDataXtd_AXIS = _TDataXtd.TDataXtd_AXIS
TDataXtd_MATE = _TDataXtd.TDataXtd_MATE
TDataXtd_ALIGN_FACES = _TDataXtd.TDataXtd_ALIGN_FACES
TDataXtd_ALIGN_AXES = _TDataXtd.TDataXtd_ALIGN_AXES
TDataXtd_AXES_ANGLE = _TDataXtd.TDataXtd_AXES_ANGLE
TDataXtd_FACES_ANGLE = _TDataXtd.TDataXtd_FACES_ANGLE
TDataXtd_ROUND = _TDataXtd.TDataXtd_ROUND
TDataXtd_OFFSET = _TDataXtd.TDataXtd_OFFSET
TDataXtd_ANY_GEOM = _TDataXtd.TDataXtd_ANY_GEOM
TDataXtd_POINT = _TDataXtd.TDataXtd_POINT
TDataXtd_LINE = _TDataXtd.TDataXtd_LINE
TDataXtd_CIRCLE = _TDataXtd.TDataXtd_CIRCLE
TDataXtd_ELLIPSE = _TDataXtd.TDataXtd_ELLIPSE
TDataXtd_SPLINE = _TDataXtd.TDataXtd_SPLINE
TDataXtd_PLANE = _TDataXtd.TDataXtd_PLANE
TDataXtd_CYLINDER = _TDataXtd.TDataXtd_CYLINDER


class TDataXtd_ConstraintEnum(IntEnum):
	TDataXtd_RADIUS = 0
	TDataXtd_DIAMETER = 1
	TDataXtd_MINOR_RADIUS = 2
	TDataXtd_MAJOR_RADIUS = 3
	TDataXtd_TANGENT = 4
	TDataXtd_PARALLEL = 5
	TDataXtd_PERPENDICULAR = 6
	TDataXtd_CONCENTRIC = 7
	TDataXtd_COINCIDENT = 8
	TDataXtd_DISTANCE = 9
	TDataXtd_ANGLE = 10
	TDataXtd_EQUAL_RADIUS = 11
	TDataXtd_SYMMETRY = 12
	TDataXtd_MIDPOINT = 13
	TDataXtd_EQUAL_DISTANCE = 14
	TDataXtd_FIX = 15
	TDataXtd_RIGID = 16
	TDataXtd_FROM = 17
	TDataXtd_AXIS = 18
	TDataXtd_MATE = 19
	TDataXtd_ALIGN_FACES = 20
	TDataXtd_ALIGN_AXES = 21
	TDataXtd_AXES_ANGLE = 22
	TDataXtd_FACES_ANGLE = 23
	TDataXtd_ROUND = 24
	TDataXtd_OFFSET = 25
TDataXtd_RADIUS = TDataXtd_ConstraintEnum.TDataXtd_RADIUS
TDataXtd_DIAMETER = TDataXtd_ConstraintEnum.TDataXtd_DIAMETER
TDataXtd_MINOR_RADIUS = TDataXtd_ConstraintEnum.TDataXtd_MINOR_RADIUS
TDataXtd_MAJOR_RADIUS = TDataXtd_ConstraintEnum.TDataXtd_MAJOR_RADIUS
TDataXtd_TANGENT = TDataXtd_ConstraintEnum.TDataXtd_TANGENT
TDataXtd_PARALLEL = TDataXtd_ConstraintEnum.TDataXtd_PARALLEL
TDataXtd_PERPENDICULAR = TDataXtd_ConstraintEnum.TDataXtd_PERPENDICULAR
TDataXtd_CONCENTRIC = TDataXtd_ConstraintEnum.TDataXtd_CONCENTRIC
TDataXtd_COINCIDENT = TDataXtd_ConstraintEnum.TDataXtd_COINCIDENT
TDataXtd_DISTANCE = TDataXtd_ConstraintEnum.TDataXtd_DISTANCE
TDataXtd_ANGLE = TDataXtd_ConstraintEnum.TDataXtd_ANGLE
TDataXtd_EQUAL_RADIUS = TDataXtd_ConstraintEnum.TDataXtd_EQUAL_RADIUS
TDataXtd_SYMMETRY = TDataXtd_ConstraintEnum.TDataXtd_SYMMETRY
TDataXtd_MIDPOINT = TDataXtd_ConstraintEnum.TDataXtd_MIDPOINT
TDataXtd_EQUAL_DISTANCE = TDataXtd_ConstraintEnum.TDataXtd_EQUAL_DISTANCE
TDataXtd_FIX = TDataXtd_ConstraintEnum.TDataXtd_FIX
TDataXtd_RIGID = TDataXtd_ConstraintEnum.TDataXtd_RIGID
TDataXtd_FROM = TDataXtd_ConstraintEnum.TDataXtd_FROM
TDataXtd_AXIS = TDataXtd_ConstraintEnum.TDataXtd_AXIS
TDataXtd_MATE = TDataXtd_ConstraintEnum.TDataXtd_MATE
TDataXtd_ALIGN_FACES = TDataXtd_ConstraintEnum.TDataXtd_ALIGN_FACES
TDataXtd_ALIGN_AXES = TDataXtd_ConstraintEnum.TDataXtd_ALIGN_AXES
TDataXtd_AXES_ANGLE = TDataXtd_ConstraintEnum.TDataXtd_AXES_ANGLE
TDataXtd_FACES_ANGLE = TDataXtd_ConstraintEnum.TDataXtd_FACES_ANGLE
TDataXtd_ROUND = TDataXtd_ConstraintEnum.TDataXtd_ROUND
TDataXtd_OFFSET = TDataXtd_ConstraintEnum.TDataXtd_OFFSET

class TDataXtd_GeometryEnum(IntEnum):
	TDataXtd_ANY_GEOM = 0
	TDataXtd_POINT = 1
	TDataXtd_LINE = 2
	TDataXtd_CIRCLE = 3
	TDataXtd_ELLIPSE = 4
	TDataXtd_SPLINE = 5
	TDataXtd_PLANE = 6
	TDataXtd_CYLINDER = 7
TDataXtd_ANY_GEOM = TDataXtd_GeometryEnum.TDataXtd_ANY_GEOM
TDataXtd_POINT = TDataXtd_GeometryEnum.TDataXtd_POINT
TDataXtd_LINE = TDataXtd_GeometryEnum.TDataXtd_LINE
TDataXtd_CIRCLE = TDataXtd_GeometryEnum.TDataXtd_CIRCLE
TDataXtd_ELLIPSE = TDataXtd_GeometryEnum.TDataXtd_ELLIPSE
TDataXtd_SPLINE = TDataXtd_GeometryEnum.TDataXtd_SPLINE
TDataXtd_PLANE = TDataXtd_GeometryEnum.TDataXtd_PLANE
TDataXtd_CYLINDER = TDataXtd_GeometryEnum.TDataXtd_CYLINDER


def Handle_TDataXtd_Axis_Create():
    return _TDataXtd.Handle_TDataXtd_Axis_Create()

def Handle_TDataXtd_Axis_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Axis_DownCast(t)

def Handle_TDataXtd_Axis_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Axis_IsNull(t)

def Handle_TDataXtd_Constraint_Create():
    return _TDataXtd.Handle_TDataXtd_Constraint_Create()

def Handle_TDataXtd_Constraint_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Constraint_DownCast(t)

def Handle_TDataXtd_Constraint_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Constraint_IsNull(t)

def Handle_TDataXtd_Geometry_Create():
    return _TDataXtd.Handle_TDataXtd_Geometry_Create()

def Handle_TDataXtd_Geometry_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Geometry_DownCast(t)

def Handle_TDataXtd_Geometry_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Geometry_IsNull(t)

def Handle_TDataXtd_Pattern_Create():
    return _TDataXtd.Handle_TDataXtd_Pattern_Create()

def Handle_TDataXtd_Pattern_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Pattern_DownCast(t)

def Handle_TDataXtd_Pattern_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Pattern_IsNull(t)

def Handle_TDataXtd_Placement_Create():
    return _TDataXtd.Handle_TDataXtd_Placement_Create()

def Handle_TDataXtd_Placement_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Placement_DownCast(t)

def Handle_TDataXtd_Placement_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Placement_IsNull(t)

def Handle_TDataXtd_Plane_Create():
    return _TDataXtd.Handle_TDataXtd_Plane_Create()

def Handle_TDataXtd_Plane_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Plane_DownCast(t)

def Handle_TDataXtd_Plane_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Plane_IsNull(t)

def Handle_TDataXtd_Point_Create():
    return _TDataXtd.Handle_TDataXtd_Point_Create()

def Handle_TDataXtd_Point_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Point_DownCast(t)

def Handle_TDataXtd_Point_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Point_IsNull(t)

def Handle_TDataXtd_Position_Create():
    return _TDataXtd.Handle_TDataXtd_Position_Create()

def Handle_TDataXtd_Position_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Position_DownCast(t)

def Handle_TDataXtd_Position_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Position_IsNull(t)

def Handle_TDataXtd_Presentation_Create():
    return _TDataXtd.Handle_TDataXtd_Presentation_Create()

def Handle_TDataXtd_Presentation_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Presentation_DownCast(t)

def Handle_TDataXtd_Presentation_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Presentation_IsNull(t)

def Handle_TDataXtd_Shape_Create():
    return _TDataXtd.Handle_TDataXtd_Shape_Create()

def Handle_TDataXtd_Shape_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Shape_DownCast(t)

def Handle_TDataXtd_Shape_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Shape_IsNull(t)

def Handle_TDataXtd_Triangulation_Create():
    return _TDataXtd.Handle_TDataXtd_Triangulation_Create()

def Handle_TDataXtd_Triangulation_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_Triangulation_DownCast(t)

def Handle_TDataXtd_Triangulation_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_Triangulation_IsNull(t)

def Handle_TDataXtd_PatternStd_Create():
    return _TDataXtd.Handle_TDataXtd_PatternStd_Create()

def Handle_TDataXtd_PatternStd_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_PatternStd_DownCast(t)

def Handle_TDataXtd_PatternStd_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_PatternStd_IsNull(t)

def Handle_TDataXtd_HArray1OfTrsf_Create():
    return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_Create()

def Handle_TDataXtd_HArray1OfTrsf_DownCast(t):
    return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast(t)

def Handle_TDataXtd_HArray1OfTrsf_IsNull(t):
    return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_IsNull(t)
class TDataXtd_Array1OfTrsf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_begin(self)

    def end(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_end(self)

    def cbegin(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_cbegin(self)

    def cend(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_cend(self)

    def __init__(self, *args):
        _TDataXtd.TDataXtd_Array1OfTrsf_swiginit(self, _TDataXtd.new_TDataXtd_Array1OfTrsf(*args))

    def Init(self, theValue):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Init(self, theValue)

    def Size(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Size(self)

    def Length(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Length(self)

    def IsEmpty(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_IsEmpty(self)

    def Lower(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Lower(self)

    def Upper(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Upper(self)

    def IsDeletable(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_IsDeletable(self)

    def IsAllocated(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_IsAllocated(self)

    def Assign(self, theOther):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Assign(self, theOther)

    def Move(self, theOther):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Move(self, theOther)

    def Set(self, *args):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Set(self, *args)

    def First(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_First(self)

    def ChangeFirst(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_ChangeFirst(self)

    def Last(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Last(self)

    def ChangeLast(self):
        return _TDataXtd.TDataXtd_Array1OfTrsf_ChangeLast(self)

    def Value(self, theIndex):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TDataXtd.TDataXtd_Array1OfTrsf_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TDataXtd.TDataXtd_Array1OfTrsf___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TDataXtd.TDataXtd_Array1OfTrsf_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _TDataXtd.TDataXtd_Array1OfTrsf_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Array1OfTrsf

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TDataXtd_Array1OfTrsf in _TDataXtd:
_TDataXtd.TDataXtd_Array1OfTrsf_swigregister(TDataXtd_Array1OfTrsf)
class tdataxtd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IDList(*args):
        r"""

        Parameters
        ----------
        anIDList: TDF_IDList

        Return
        -------
        None

        Description
        -----------
        Appends to <anidlist> the list of the attributes ids of this package. caution: <anidlist> is not cleared before use. print of tdataext enumeration =============================.

        """
        return _TDataXtd.tdataxtd_IDList(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _TDataXtd.tdataxtd_swiginit(self, _TDataXtd.new_tdataxtd())
    __swig_destroy__ = _TDataXtd.delete_tdataxtd

# Register tdataxtd in _TDataXtd:
_TDataXtd.tdataxtd_swigregister(tdataxtd)
class TDataXtd_Axis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TDataXtd.TDataXtd_Axis_swiginit(self, _TDataXtd.new_TDataXtd_Axis(*args))

    def DumpToString(self):
        r"""DumpToString(TDataXtd_Axis self) -> std::string"""
        return _TDataXtd.TDataXtd_Axis_DumpToString(self)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Class methods ============= returns the guid for an axis.

        """
        return _TDataXtd.TDataXtd_Axis_GetID(*args)

    def ID(self, *args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Axis_ID(self, *args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Axis>

        Description
        -----------
        Finds or creates an axis attribute defined by the label. in the case of a creation of an axis, a compatible named shape should already be associated with label. exceptions standard_nullobject if no compatible named shape is associated with the label.

        Parameters
        ----------
        label: TDF_Label
        L: gp_Lin

        Return
        -------
        opencascade::handle<TDataXtd_Axis>

        Description
        -----------
        Find, or create, an axis attribute and set <p> as generated in the associated namedshape. axis methods ============.

        """
        return _TDataXtd.TDataXtd_Axis_Set(*args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Axis_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Axis

# Register TDataXtd_Axis in _TDataXtd:
_TDataXtd.TDataXtd_Axis_swigregister(TDataXtd_Axis)
class TDataXtd_Constraint(OCC.Core.TDF.TDF_Attribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TDataXtd.TDataXtd_Constraint_swiginit(self, _TDataXtd.new_TDataXtd_Constraint(*args))

    def ClearGeometries(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Removes the geometries involved in the constraint or dimension from the array of topological attributes where they are stored.

        """
        return _TDataXtd.TDataXtd_Constraint_ClearGeometries(self, *args)

    @staticmethod
    def CollectChildConstraints(*args):
        r"""

        Parameters
        ----------
        aLabel: TDF_Label
        TheList: TDF_LabelList

        Return
        -------
        None

        Description
        -----------
        Collects constraints on childs for label <alabel>.

        """
        return _TDataXtd.TDataXtd_Constraint_CollectChildConstraints(*args)

    def DumpToString(self):
        r"""DumpToString(TDataXtd_Constraint self) -> std::string"""
        return _TDataXtd.TDataXtd_Constraint_DumpToString(self)

    def GetGeometry(self, *args):
        r"""

        Parameters
        ----------
        Index: int

        Return
        -------
        opencascade::handle<TNaming_NamedShape>

        Description
        -----------
        Returns the integer index index used to access the array of the constraint or stored geometries of a dimension index has a value between 1 and 4. methods to write constraint fields (use builder) ==================================.

        """
        return _TDataXtd.TDataXtd_Constraint_GetGeometry(self, *args)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Returns the guid for constraints.

        """
        return _TDataXtd.TDataXtd_Constraint_GetID(*args)

    def GetPlane(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TNaming_NamedShape>

        Description
        -----------
        Returns the topological attribute of the plane used for planar - i.e., 2d - constraints. this plane is attached to another label. if the constraint is not planar, in other words, 3d, this function will return a null handle.

        """
        return _TDataXtd.TDataXtd_Constraint_GetPlane(self, *args)

    def GetType(self, *args):
        r"""
        Return
        -------
        TDataXtd_ConstraintEnum

        Description
        -----------
        Returns the type of constraint. this will be an element of the tdataxtd_constraintenum enumeration.

        """
        return _TDataXtd.TDataXtd_Constraint_GetType(self, *args)

    def GetValue(self, *args):
        r"""
        Return
        -------
        opencascade::handle<TDataStd_Real>

        Description
        -----------
        Returns the value of a dimension. this value is a reference to a tdatastd_real attribute. if the attribute is not a dimension, this value will be 0. use isdimension to test this condition.

        """
        return _TDataXtd.TDataXtd_Constraint_GetValue(self, *args)

    def Inverted(self, *args):
        r"""

        Parameters
        ----------
        status: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Constraint_Inverted(self, *args)

    def IsDimension(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if this constraint attribute is a dimension, and therefore has a value.

        """
        return _TDataXtd.TDataXtd_Constraint_IsDimension(self, *args)

    def IsPlanar(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if this constraint attribute is two-dimensional.

        """
        return _TDataXtd.TDataXtd_Constraint_IsPlanar(self, *args)

    def NbGeometries(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of geometry attributes in this constraint attribute. this number will be between 1 and 4.

        """
        return _TDataXtd.TDataXtd_Constraint_NbGeometries(self, *args)

    def Reversed(self, *args):
        r"""

        Parameters
        ----------
        status: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Constraint_Reversed(self, *args)

    def Set(self, *args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Constraint>

        Description
        -----------
        Finds or creates the 2d constraint attribute defined by the planar topological attribute plane and the label label. constraint methods ==================.

        Parameters
        ----------
        type: TDataXtd_ConstraintEnum
        G1: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        Finds or creates the constraint attribute defined by the topological attribute g1 and the constraint type type.

        Parameters
        ----------
        type: TDataXtd_ConstraintEnum
        G1: TNaming_NamedShape
        G2: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        Finds or creates the constraint attribute defined by the topological attributes g1 and g2, and by the constraint type type.

        Parameters
        ----------
        type: TDataXtd_ConstraintEnum
        G1: TNaming_NamedShape
        G2: TNaming_NamedShape
        G3: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        Finds or creates the constraint attribute defined by the topological attributes g1, g2 and g3, and by the constraint type type.

        Parameters
        ----------
        type: TDataXtd_ConstraintEnum
        G1: TNaming_NamedShape
        G2: TNaming_NamedShape
        G3: TNaming_NamedShape
        G4: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        Finds or creates the constraint attribute defined by the topological attributes g1, g2, g3 and g4, and by the constraint type type. methods to read constraint fields =================================.

        """
        return _TDataXtd.TDataXtd_Constraint_Set(self, *args)

    def SetGeometry(self, *args):
        r"""

        Parameters
        ----------
        Index: int
        G: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        Finds or creates the underlying geometry of the constraint defined by the topological attribute g and the integer index index.

        """
        return _TDataXtd.TDataXtd_Constraint_SetGeometry(self, *args)

    def SetPlane(self, *args):
        r"""

        Parameters
        ----------
        plane: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        Finds or creates the plane of the 2d constraint attribute, defined by the planar topological attribute plane.

        """
        return _TDataXtd.TDataXtd_Constraint_SetPlane(self, *args)

    def SetType(self, *args):
        r"""

        Parameters
        ----------
        CTR: TDataXtd_ConstraintEnum

        Return
        -------
        None

        Description
        -----------
        Finds or creates the type of constraint ctr.

        """
        return _TDataXtd.TDataXtd_Constraint_SetType(self, *args)

    def SetValue(self, *args):
        r"""

        Parameters
        ----------
        V: TDataStd_Real

        Return
        -------
        None

        Description
        -----------
        Finds or creates the real number value v of the dimension constraint attribute.

        """
        return _TDataXtd.TDataXtd_Constraint_SetValue(self, *args)

    def Verified(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if this constraint attribute is valid. by default, true is returned. when the value of a dimension is changed or when a geometry is moved, false is returned until the solver sets it back to true.

        Parameters
        ----------
        status: bool

        Return
        -------
        None

        Description
        -----------
        Returns true if this constraint attribute defined by status is valid. by default, true is returned. when the value of a dimension is changed or when a geometry is moved, false is returned until the solver sets it back to true. if status is false, verified is set to false.

        """
        return _TDataXtd.TDataXtd_Constraint_Verified(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Constraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Constraint

# Register TDataXtd_Constraint in _TDataXtd:
_TDataXtd.TDataXtd_Constraint_swigregister(TDataXtd_Constraint)
class TDataXtd_Geometry(OCC.Core.TDF.TDF_Attribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        This and the next methods are used to retrieve underlying geometry of the namedshape, even if no geometry attribute is associated. if not found or not compliant geometry return false.

        """
        _TDataXtd.TDataXtd_Geometry_swiginit(self, _TDataXtd.new_TDataXtd_Geometry(*args))

    @staticmethod
    def Axis(*args):
        r"""

        Parameters
        ----------
        L: TDF_Label
        G: gp_Ax1

        Return
        -------
        bool

        Description
        -----------
        Returns the axis attribute defined by the label l and the axis g.

        Parameters
        ----------
        S: TNaming_NamedShape
        G: gp_Ax1

        Return
        -------
        bool

        Description
        -----------
        Returns the axis attribute defined by the topological attribute s and the axis g.

        """
        return _TDataXtd.TDataXtd_Geometry_Axis(*args)

    @staticmethod
    def Circle(*args):
        r"""

        Parameters
        ----------
        L: TDF_Label
        G: gp_Circ

        Return
        -------
        bool

        Description
        -----------
        Returns the circle attribute defined by the label l and the circle g.

        Parameters
        ----------
        S: TNaming_NamedShape
        G: gp_Circ

        Return
        -------
        bool

        Description
        -----------
        Returns the circle attribute defined by the topological attribute s and the circle g.

        """
        return _TDataXtd.TDataXtd_Geometry_Circle(*args)

    @staticmethod
    def Cylinder(*args):
        r"""

        Parameters
        ----------
        L: TDF_Label
        G: gp_Cylinder

        Return
        -------
        bool

        Description
        -----------
        Returns the cylinder attribute defined by the label l and the cylinder g.

        Parameters
        ----------
        S: TNaming_NamedShape
        G: gp_Cylinder

        Return
        -------
        bool

        Description
        -----------
        Returns the cylinder attribute defined by the topological attribute s and the cylinder g.

        """
        return _TDataXtd.TDataXtd_Geometry_Cylinder(*args)

    def DumpToString(self):
        r"""DumpToString(TDataXtd_Geometry self) -> std::string"""
        return _TDataXtd.TDataXtd_Geometry_DumpToString(self)

    @staticmethod
    def Ellipse(*args):
        r"""

        Parameters
        ----------
        L: TDF_Label
        G: gp_Elips

        Return
        -------
        bool

        Description
        -----------
        Returns the ellipse attribute defined by the label l and the ellipse g.

        Parameters
        ----------
        S: TNaming_NamedShape
        G: gp_Elips

        Return
        -------
        bool

        Description
        -----------
        Returns the ellipse attribute defined by the topological attribute s and the ellipse g.

        """
        return _TDataXtd.TDataXtd_Geometry_Ellipse(*args)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Returns the guid for geometry attributes.

        """
        return _TDataXtd.TDataXtd_Geometry_GetID(*args)

    def GetType(self, *args):
        r"""
        Return
        -------
        TDataXtd_GeometryEnum

        Description
        -----------
        Returns the type of geometric construction.

        """
        return _TDataXtd.TDataXtd_Geometry_GetType(self, *args)

    @staticmethod
    def Line(*args):
        r"""

        Parameters
        ----------
        L: TDF_Label
        G: gp_Lin

        Return
        -------
        bool

        Description
        -----------
        Returns the line attribute defined by the label l and the line g.

        Parameters
        ----------
        S: TNaming_NamedShape
        G: gp_Lin

        Return
        -------
        bool

        Description
        -----------
        Returns the line attribute defined by the topological attribute s and the line g.

        """
        return _TDataXtd.TDataXtd_Geometry_Line(*args)

    @staticmethod
    def Plane(*args):
        r"""

        Parameters
        ----------
        L: TDF_Label
        G: gp_Pln

        Return
        -------
        bool

        Description
        -----------
        Returns the plane attribute defined by the label l and the plane g.

        Parameters
        ----------
        S: TNaming_NamedShape
        G: gp_Pln

        Return
        -------
        bool

        Description
        -----------
        Returns the plane attribute defined by the topological attribute s and the plane g.

        """
        return _TDataXtd.TDataXtd_Geometry_Plane(*args)

    @staticmethod
    def Point(*args):
        r"""

        Parameters
        ----------
        L: TDF_Label
        G: gp_Pnt

        Return
        -------
        bool

        Description
        -----------
        Returns the point attribute defined by the label l and the point g.

        Parameters
        ----------
        S: TNaming_NamedShape
        G: gp_Pnt

        Return
        -------
        bool

        Description
        -----------
        Returns the point attribute defined by the topological attribute s and the point g.

        """
        return _TDataXtd.TDataXtd_Geometry_Point(*args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Geometry>

        Description
        -----------
        Api class methods ================= finds, or creates, a geometry attribute defined by the label label. the default type of geometry is the value any_geom of the enumeration tdataxtd_geometryenum. to specify another value of this enumeration, use the function settype.

        """
        return _TDataXtd.TDataXtd_Geometry_Set(*args)

    def SetType(self, *args):
        r"""

        Parameters
        ----------
        T: TDataXtd_GeometryEnum

        Return
        -------
        None

        Description
        -----------
        Returns the type of geometric construction t of this attribute. t will be a value of the enumeration tdataxtd_geometryenum.

        """
        return _TDataXtd.TDataXtd_Geometry_SetType(self, *args)

    @staticmethod
    def Type(*args):
        r"""

        Parameters
        ----------
        L: TDF_Label

        Return
        -------
        TDataXtd_GeometryEnum

        Description
        -----------
        Returns the label l used to define the type of geometric construction for the geometry attribute.

        Parameters
        ----------
        S: TNaming_NamedShape

        Return
        -------
        TDataXtd_GeometryEnum

        Description
        -----------
        Returns the topological attribute s used to define the type of geometric construction for the geometry attribute.

        """
        return _TDataXtd.TDataXtd_Geometry_Type(*args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Geometry_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Geometry

# Register TDataXtd_Geometry in _TDataXtd:
_TDataXtd.TDataXtd_Geometry_swigregister(TDataXtd_Geometry)
class TDataXtd_Pattern(OCC.Core.TDF.TDF_Attribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ComputeTrsfs(self, *args):
        r"""

        Parameters
        ----------
        Trsfs: TDataXtd_Array1OfTrsf

        Return
        -------
        None

        Description
        -----------
        Give the transformations.

        """
        return _TDataXtd.TDataXtd_Pattern_ComputeTrsfs(self, *args)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Pattern_GetID(*args)

    def NbTrsfs(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Give the number of transformation.

        """
        return _TDataXtd.TDataXtd_Pattern_NbTrsfs(self, *args)

    def PatternID(self, *args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Returns the id of the attribute.

        """
        return _TDataXtd.TDataXtd_Pattern_PatternID(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Pattern_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Pattern

# Register TDataXtd_Pattern in _TDataXtd:
_TDataXtd.TDataXtd_Pattern_swigregister(TDataXtd_Pattern)
class TDataXtd_Placement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TDataXtd.TDataXtd_Placement_swiginit(self, _TDataXtd.new_TDataXtd_Placement(*args))

    def DumpToString(self):
        r"""DumpToString(TDataXtd_Placement self) -> std::string"""
        return _TDataXtd.TDataXtd_Placement_DumpToString(self)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Class methods =============.

        """
        return _TDataXtd.TDataXtd_Placement_GetID(*args)

    def ID(self, *args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Placement_ID(self, *args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Placement>

        Description
        -----------
        Find, or create, an placement attribute. the placement attribute is returned. placement methods =================.

        """
        return _TDataXtd.TDataXtd_Placement_Set(*args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Placement_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Placement

# Register TDataXtd_Placement in _TDataXtd:
_TDataXtd.TDataXtd_Placement_swigregister(TDataXtd_Placement)
class TDataXtd_Plane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TDataXtd.TDataXtd_Plane_swiginit(self, _TDataXtd.new_TDataXtd_Plane(*args))

    def DumpToString(self):
        r"""DumpToString(TDataXtd_Plane self) -> std::string"""
        return _TDataXtd.TDataXtd_Plane_DumpToString(self)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Class methods ============= //! returns the guid for plane attributes.

        """
        return _TDataXtd.TDataXtd_Plane_GetID(*args)

    def ID(self, *args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Plane_ID(self, *args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Plane>

        Description
        -----------
        Finds or creates the plane attribute defined by the label label. warning if you are creating the attribute with this syntax, a planar face should already be associated with label.

        Parameters
        ----------
        label: TDF_Label
        P: gp_Pln

        Return
        -------
        opencascade::handle<TDataXtd_Plane>

        Description
        -----------
        Finds, or creates, a plane attribute and sets <p> as generated the associated namedshape. plane methods =============.

        """
        return _TDataXtd.TDataXtd_Plane_Set(*args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Plane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Plane

# Register TDataXtd_Plane in _TDataXtd:
_TDataXtd.TDataXtd_Plane_swigregister(TDataXtd_Plane)
class TDataXtd_Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TDataXtd.TDataXtd_Point_swiginit(self, _TDataXtd.new_TDataXtd_Point(*args))

    def DumpToString(self):
        r"""DumpToString(TDataXtd_Point self) -> std::string"""
        return _TDataXtd.TDataXtd_Point_DumpToString(self)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Class methods ============= //! returns the guid for point attributes.

        """
        return _TDataXtd.TDataXtd_Point_GetID(*args)

    def ID(self, *args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Point_ID(self, *args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Point>

        Description
        -----------
        Sets the label label as a point attribute. if no object is found, a point attribute is created.

        Parameters
        ----------
        label: TDF_Label
        P: gp_Pnt

        Return
        -------
        opencascade::handle<TDataXtd_Point>

        Description
        -----------
        Sets the label label as a point attribute containing the point p. if no object is found, a point attribute is created. point methods =============.

        """
        return _TDataXtd.TDataXtd_Point_Set(*args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Point_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Point

# Register TDataXtd_Point in _TDataXtd:
_TDataXtd.TDataXtd_Point_swigregister(TDataXtd_Point)
class TDataXtd_Position(OCC.Core.TDF.TDF_Attribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TDataXtd.TDataXtd_Position_swiginit(self, _TDataXtd.new_TDataXtd_Position(*args))

    @staticmethod
    def Get(*args):
        r"""

        Parameters
        ----------
        aLabel: TDF_Label
        aPos: gp_Pnt

        Return
        -------
        bool

        Description
        -----------
        Search label <alabel) for the tdataxtd_position attribute and get its position if found returns true.

        """
        return _TDataXtd.TDataXtd_Position_Get(*args)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Returns the id of the attribute.

        """
        return _TDataXtd.TDataXtd_Position_GetID(*args)

    def GetPosition(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Position_GetPosition(self, *args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        aLabel: TDF_Label
        aPos: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        Create if not found the tdataxtd_position attribute set its position to <apos>.

        Parameters
        ----------
        aLabel: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Position>

        Description
        -----------
        Find an existing, or create an empty, position. the position attribute is returned.

        """
        return _TDataXtd.TDataXtd_Position_Set(*args)

    def SetPosition(self, *args):
        r"""

        Parameters
        ----------
        aPos: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Position_SetPosition(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Position_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Position

# Register TDataXtd_Position in _TDataXtd:
_TDataXtd.TDataXtd_Position_swigregister(TDataXtd_Position)
class TDataXtd_Presentation(OCC.Core.TDF.TDF_Attribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Empty constructor.

        """
        _TDataXtd.TDataXtd_Presentation_swiginit(self, _TDataXtd.new_TDataXtd_Presentation(*args))

    def AddSelectionMode(self, *args):
        r"""

        Parameters
        ----------
        theSelectionMode: int
        theTransaction: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_AddSelectionMode(self, *args)

    def Color(self, *args):
        r"""
        Return
        -------
        Quantity_NameOfColor

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_Color(self, *args)

    def GetDriverGUID(self, *args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Returns the guid of the driver managing display of associated ais object.

        """
        return _TDataXtd.TDataXtd_Presentation_GetDriverGUID(self, *args)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Returns the id of the attribute.

        """
        return _TDataXtd.TDataXtd_Presentation_GetID(*args)

    def GetNbSelectionModes(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of selection modes of the attribute. it starts with 1 .. getnbselectionmodes().

        """
        return _TDataXtd.TDataXtd_Presentation_GetNbSelectionModes(self, *args)

    def HasOwnColor(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnColor(self, *args)

    def HasOwnMaterial(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnMaterial(self, *args)

    def HasOwnMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnMode(self, *args)

    def HasOwnSelectionMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnSelectionMode(self, *args)

    def HasOwnTransparency(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnTransparency(self, *args)

    def HasOwnWidth(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnWidth(self, *args)

    def IsDisplayed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_IsDisplayed(self, *args)

    def MaterialIndex(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_MaterialIndex(self, *args)

    def Mode(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_Mode(self, *args)

    def SelectionMode(self, *args):
        r"""

        Parameters
        ----------
        index: int (optional, default to 1)

        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_SelectionMode(self, *args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        theLabel: TDF_Label
        theDriverId: Standard_GUID

        Return
        -------
        opencascade::handle<TDataXtd_Presentation>

        Description
        -----------
        Create if not found the tdataxtd_presentation attribute and set its driver guid.

        """
        return _TDataXtd.TDataXtd_Presentation_Set(*args)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_NameOfColor

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_SetColor(self, *args)

    def SetDisplayed(self, *args):
        r"""

        Parameters
        ----------
        theIsDisplayed: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_SetDisplayed(self, *args)

    def SetDriverGUID(self, *args):
        r"""

        Parameters
        ----------
        theGUID: Standard_GUID

        Return
        -------
        None

        Description
        -----------
        Sets the guid of the driver managing display of associated ais object.

        """
        return _TDataXtd.TDataXtd_Presentation_SetDriverGUID(self, *args)

    def SetMaterialIndex(self, *args):
        r"""

        Parameters
        ----------
        theMaterialIndex: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_SetMaterialIndex(self, *args)

    def SetMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_SetMode(self, *args)

    def SetSelectionMode(self, *args):
        r"""

        Parameters
        ----------
        theSelectionMode: int
        theTransaction: bool (optional, default to Standard_True)

        Return
        -------
        None

        Description
        -----------
        Sets selection mode. if 'thetransaction' flag is off, modification of the attribute doesn't influence the transaction mechanism (the attribute doesn't participate in undo/redo because of this modification). certainly, if any other data of the attribute is modified (display mode, color, ...), the attribute will be included into undo/redo.

        """
        return _TDataXtd.TDataXtd_Presentation_SetSelectionMode(self, *args)

    def SetTransparency(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_SetTransparency(self, *args)

    def SetWidth(self, *args):
        r"""

        Parameters
        ----------
        theWidth: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_SetWidth(self, *args)

    def Transparency(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_Transparency(self, *args)

    @staticmethod
    def Unset(*args):
        r"""

        Parameters
        ----------
        theLabel: TDF_Label

        Return
        -------
        None

        Description
        -----------
        Remove attribute of this type from the label.

        """
        return _TDataXtd.TDataXtd_Presentation_Unset(*args)

    def UnsetColor(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_UnsetColor(self, *args)

    def UnsetMaterial(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_UnsetMaterial(self, *args)

    def UnsetMode(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_UnsetMode(self, *args)

    def UnsetSelectionMode(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_UnsetSelectionMode(self, *args)

    def UnsetTransparency(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_UnsetTransparency(self, *args)

    def UnsetWidth(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_UnsetWidth(self, *args)

    def Width(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Presentation_Width(self, *args)

    @staticmethod
    def getColorNameFromOldEnum(*args):
        r"""

        Parameters
        ----------
        theOld: int

        Return
        -------
        Quantity_NameOfColor

        Description
        -----------
        Convert values of old quantity_nameofcolor to new enumeration for reading old documents after #0030969 (coding rules - refactor quantity_color.cxx color table definition).

        """
        return _TDataXtd.TDataXtd_Presentation_getColorNameFromOldEnum(*args)

    @staticmethod
    def getOldColorNameFromNewEnum(*args):
        r"""

        Parameters
        ----------
        theNew: Quantity_NameOfColor

        Return
        -------
        int

        Description
        -----------
        Convert quantity_nameofcolor to old enumeration value for writing documents in compatible format.

        """
        return _TDataXtd.TDataXtd_Presentation_getOldColorNameFromNewEnum(*args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Presentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Presentation

# Register TDataXtd_Presentation in _TDataXtd:
_TDataXtd.TDataXtd_Presentation_swigregister(TDataXtd_Presentation)
class TDataXtd_Shape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TDataXtd.TDataXtd_Shape_swiginit(self, _TDataXtd.new_TDataXtd_Shape(*args))

    def DumpToString(self):
        r"""DumpToString(TDataXtd_Shape self) -> std::string"""
        return _TDataXtd.TDataXtd_Shape_DumpToString(self)

    @staticmethod
    def Find(*args):
        r"""

        Parameters
        ----------
        current: TDF_Label
        S: TDataXtd_Shape

        Return
        -------
        bool

        Description
        -----------
        Class methods ============= try to retrieve a shape attribute at <current> label or in fathers label of <current>. returns true if found and set <s>.

        """
        return _TDataXtd.TDataXtd_Shape_Find(*args)

    @staticmethod
    def Get(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        The shape from associated namedshape attribute is returned.

        """
        return _TDataXtd.TDataXtd_Shape_Get(*args)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Shape methods ============.

        """
        return _TDataXtd.TDataXtd_Shape_GetID(*args)

    def ID(self, *args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Shape_ID(self, *args)

    @staticmethod
    def New(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Shape>

        Description
        -----------
        Find, or create, a shape attribute. the shape attribute is returned. raises if <label> has attribute.

        """
        return _TDataXtd.TDataXtd_Shape_New(*args)

    def References(self, *args):
        r"""

        Parameters
        ----------
        DS: TDF_DataSet

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_Shape_References(self, *args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label
        shape: TopoDS_Shape

        Return
        -------
        opencascade::handle<TDataXtd_Shape>

        Description
        -----------
        Create or update associated namedshape attribute. the shape attribute is returned.

        """
        return _TDataXtd.TDataXtd_Shape_Set(*args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Shape_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Shape

# Register TDataXtd_Shape in _TDataXtd:
_TDataXtd.TDataXtd_Shape_swigregister(TDataXtd_Shape)
class TDataXtd_Triangulation(OCC.Core.TDF.TDF_Attribute):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        A constructor. don't use it directly, use please the static method set(), which returns the attribute attached to a label.

        """
        _TDataXtd.TDataXtd_Triangulation_swiginit(self, _TDataXtd.new_TDataXtd_Triangulation(*args))

    def Deflection(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the deflection of this triangulation.

        Parameters
        ----------
        theDeflection: float

        Return
        -------
        None

        Description
        -----------
        Sets the deflection of this triangulation to thedeflection. see more on deflection in polygon2d.

        """
        return _TDataXtd.TDataXtd_Triangulation_Deflection(self, *args)

    def DumpToString(self):
        r"""DumpToString(TDataXtd_Triangulation self) -> std::string"""
        return _TDataXtd.TDataXtd_Triangulation_DumpToString(self)

    def Get(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Poly_Triangulation>

        Description
        -----------
        Returns the underlying triangulation.

        """
        return _TDataXtd.TDataXtd_Triangulation_Get(self, *args)

    @staticmethod
    def GetID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        Returns the id of the triangulation attribute.

        """
        return _TDataXtd.TDataXtd_Triangulation_GetID(*args)

    def HasNormals(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns standard_true if nodal normals are defined.

        """
        return _TDataXtd.TDataXtd_Triangulation_HasNormals(self, *args)

    def HasUVNodes(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return standard_true if 2d nodes are associated with 3d nodes for this triangulation.

        """
        return _TDataXtd.TDataXtd_Triangulation_HasUVNodes(self, *args)

    def NbNodes(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Return the number of nodes for this triangulation.

        """
        return _TDataXtd.TDataXtd_Triangulation_NbNodes(self, *args)

    def NbTriangles(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Return the number of triangles for this triangulation.

        """
        return _TDataXtd.TDataXtd_Triangulation_NbTriangles(self, *args)

    def Node(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int

        Return
        -------
        gp_Pnt

        Description
        -----------
        Return node at the given index. raises standard_outofrange exception if theindex is less than 1 or greater than nbnodes.

        """
        return _TDataXtd.TDataXtd_Triangulation_Node(self, *args)

    def Normal(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int

        Return
        -------
        gp_Dir

        Description
        -----------
        Return normal at the given index. raises standard_outofrange exception.

        """
        return _TDataXtd.TDataXtd_Triangulation_Normal(self, *args)

    def RemoveUVNodes(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Deallocates the uv nodes.

        """
        return _TDataXtd.TDataXtd_Triangulation_RemoveUVNodes(self, *args)

    def Set(self, *args):
        r"""

        Parameters
        ----------
        theLabel: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_Triangulation>

        Description
        -----------
        Finds or creates a triangulation attribute.

        Parameters
        ----------
        theLabel: TDF_Label
        theTriangulation: Poly_Triangulation

        Return
        -------
        opencascade::handle<TDataXtd_Triangulation>

        Description
        -----------
        Finds or creates a triangulation attribute. initializes the attribute by a poly_triangulation object.

        Parameters
        ----------
        theTriangulation: Poly_Triangulation

        Return
        -------
        None

        Description
        -----------
        Sets the triangulation.

        """
        return _TDataXtd.TDataXtd_Triangulation_Set(self, *args)

    def SetNode(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int
        theNode: gp_Pnt

        Return
        -------
        None

        Description
        -----------
        The method differs from poly_triangulation! sets a node at the given index. raises standard_outofrange exception if theindex is less than 1 or greater than nbnodes.

        """
        return _TDataXtd.TDataXtd_Triangulation_SetNode(self, *args)

    def SetNormal(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int
        theNormal: gp_Dir

        Return
        -------
        None

        Description
        -----------
        Changes normal at the given index. raises standard_outofrange exception.

        """
        return _TDataXtd.TDataXtd_Triangulation_SetNormal(self, *args)

    def SetTriangle(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int
        theTriangle: Poly_Triangle

        Return
        -------
        None

        Description
        -----------
        The method differs from poly_triangulation! sets a triangle at the given index. raises standard_outofrange exception if theindex is less than 1 or greater than nbtriangles.

        """
        return _TDataXtd.TDataXtd_Triangulation_SetTriangle(self, *args)

    def SetUVNode(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int
        theUVNode: gp_Pnt2d

        Return
        -------
        None

        Description
        -----------
        The method differs from poly_triangulation! sets a uvnode at the given index. raises standard_outofrange exception if theindex is less than 1 or greater than nbnodes.

        """
        return _TDataXtd.TDataXtd_Triangulation_SetUVNode(self, *args)

    def Triangle(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int

        Return
        -------
        Poly_Triangle

        Description
        -----------
        Return triangle at the given index. raises standard_outofrange exception if theindex is less than 1 or greater than nbtriangles.

        """
        return _TDataXtd.TDataXtd_Triangulation_Triangle(self, *args)

    def UVNode(self, *args):
        r"""

        Parameters
        ----------
        theIndex: int

        Return
        -------
        gp_Pnt2d

        Description
        -----------
        Return uvnode at the given index. raises standard_outofrange exception if theindex is less than 1 or greater than nbnodes.

        """
        return _TDataXtd.TDataXtd_Triangulation_UVNode(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_Triangulation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Triangulation

# Register TDataXtd_Triangulation in _TDataXtd:
_TDataXtd.TDataXtd_Triangulation_swigregister(TDataXtd_Triangulation)
class TDataXtd_PatternStd(TDataXtd_Pattern):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _TDataXtd.TDataXtd_PatternStd_swiginit(self, _TDataXtd.new_TDataXtd_PatternStd(*args))

    def Axis1(self, *args):
        r"""

        Parameters
        ----------
        Axis1: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<TNaming_NamedShape>

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis1(self, *args)

    def Axis1Reversed(self, *args):
        r"""

        Parameters
        ----------
        Axis1Reversed: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis1Reversed(self, *args)

    def Axis2(self, *args):
        r"""

        Parameters
        ----------
        Axis2: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<TNaming_NamedShape>

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis2(self, *args)

    def Axis2Reversed(self, *args):
        r"""

        Parameters
        ----------
        Axis2Reversed: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis2Reversed(self, *args)

    def DumpToString(self):
        r"""DumpToString(TDataXtd_PatternStd self) -> std::string"""
        return _TDataXtd.TDataXtd_PatternStd_DumpToString(self)

    @staticmethod
    def GetPatternID(*args):
        r"""
        Return
        -------
        Standard_GUID

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_GetPatternID(*args)

    def Mirror(self, *args):
        r"""

        Parameters
        ----------
        plane: TNaming_NamedShape

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<TNaming_NamedShape>

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_Mirror(self, *args)

    def NbInstances1(self, *args):
        r"""

        Parameters
        ----------
        NbInstances1: TDataStd_Integer

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<TDataStd_Integer>

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_NbInstances1(self, *args)

    def NbInstances2(self, *args):
        r"""

        Parameters
        ----------
        NbInstances2: TDataStd_Integer

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<TDataStd_Integer>

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_NbInstances2(self, *args)

    @staticmethod
    def Set(*args):
        r"""

        Parameters
        ----------
        label: TDF_Label

        Return
        -------
        opencascade::handle<TDataXtd_PatternStd>

        Description
        -----------
        Find, or create, a patternstd attribute.

        """
        return _TDataXtd.TDataXtd_PatternStd_Set(*args)

    def Signature(self, *args):
        r"""

        Parameters
        ----------
        signature: int

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        int

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_Signature(self, *args)

    def Value1(self, *args):
        r"""

        Parameters
        ----------
        value: TDataStd_Real

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<TDataStd_Real>

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_Value1(self, *args)

    def Value2(self, *args):
        r"""

        Parameters
        ----------
        value: TDataStd_Real

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        opencascade::handle<TDataStd_Real>

        Description
        -----------
        No available documentation.

        """
        return _TDataXtd.TDataXtd_PatternStd_Value2(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_PatternStd_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_PatternStd

# Register TDataXtd_PatternStd in _TDataXtd:
_TDataXtd.TDataXtd_PatternStd_swigregister(TDataXtd_PatternStd)
class TDataXtd_HArray1OfTrsf(TDataXtd_Array1OfTrsf, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TDataXtd.TDataXtd_HArray1OfTrsf_swiginit(self, _TDataXtd.new_TDataXtd_HArray1OfTrsf(*args))

    def Array1(self):
        return _TDataXtd.TDataXtd_HArray1OfTrsf_Array1(self)

    def ChangeArray1(self):
        return _TDataXtd.TDataXtd_HArray1OfTrsf_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TDataXtd_HArray1OfTrsf_DownCast(t)

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_HArray1OfTrsf

# Register TDataXtd_HArray1OfTrsf in _TDataXtd:
_TDataXtd.TDataXtd_HArray1OfTrsf_swigregister(TDataXtd_HArray1OfTrsf)



@deprecated
def tdataxtd_IDList(*args):
	return tdataxtd.IDList(*args)

@deprecated
def TDataXtd_Axis_GetID(*args):
	return TDataXtd_Axis.GetID(*args)

@deprecated
def TDataXtd_Axis_Set(*args):
	return TDataXtd_Axis.Set(*args)

@deprecated
def TDataXtd_Axis_Set(*args):
	return TDataXtd_Axis.Set(*args)

@deprecated
def TDataXtd_Constraint_CollectChildConstraints(*args):
	return TDataXtd_Constraint.CollectChildConstraints(*args)

@deprecated
def TDataXtd_Constraint_GetID(*args):
	return TDataXtd_Constraint.GetID(*args)

@deprecated
def TDataXtd_Constraint_Set(*args):
	return TDataXtd_Constraint.Set(*args)

@deprecated
def TDataXtd_Geometry_Axis(*args):
	return TDataXtd_Geometry.Axis(*args)

@deprecated
def TDataXtd_Geometry_Axis(*args):
	return TDataXtd_Geometry.Axis(*args)

@deprecated
def TDataXtd_Geometry_Circle(*args):
	return TDataXtd_Geometry.Circle(*args)

@deprecated
def TDataXtd_Geometry_Circle(*args):
	return TDataXtd_Geometry.Circle(*args)

@deprecated
def TDataXtd_Geometry_Cylinder(*args):
	return TDataXtd_Geometry.Cylinder(*args)

@deprecated
def TDataXtd_Geometry_Cylinder(*args):
	return TDataXtd_Geometry.Cylinder(*args)

@deprecated
def TDataXtd_Geometry_Ellipse(*args):
	return TDataXtd_Geometry.Ellipse(*args)

@deprecated
def TDataXtd_Geometry_Ellipse(*args):
	return TDataXtd_Geometry.Ellipse(*args)

@deprecated
def TDataXtd_Geometry_GetID(*args):
	return TDataXtd_Geometry.GetID(*args)

@deprecated
def TDataXtd_Geometry_Line(*args):
	return TDataXtd_Geometry.Line(*args)

@deprecated
def TDataXtd_Geometry_Line(*args):
	return TDataXtd_Geometry.Line(*args)

@deprecated
def TDataXtd_Geometry_Plane(*args):
	return TDataXtd_Geometry.Plane(*args)

@deprecated
def TDataXtd_Geometry_Plane(*args):
	return TDataXtd_Geometry.Plane(*args)

@deprecated
def TDataXtd_Geometry_Point(*args):
	return TDataXtd_Geometry.Point(*args)

@deprecated
def TDataXtd_Geometry_Point(*args):
	return TDataXtd_Geometry.Point(*args)

@deprecated
def TDataXtd_Geometry_Set(*args):
	return TDataXtd_Geometry.Set(*args)

@deprecated
def TDataXtd_Geometry_Type(*args):
	return TDataXtd_Geometry.Type(*args)

@deprecated
def TDataXtd_Geometry_Type(*args):
	return TDataXtd_Geometry.Type(*args)

@deprecated
def TDataXtd_Pattern_GetID(*args):
	return TDataXtd_Pattern.GetID(*args)

@deprecated
def TDataXtd_Placement_GetID(*args):
	return TDataXtd_Placement.GetID(*args)

@deprecated
def TDataXtd_Placement_Set(*args):
	return TDataXtd_Placement.Set(*args)

@deprecated
def TDataXtd_Plane_GetID(*args):
	return TDataXtd_Plane.GetID(*args)

@deprecated
def TDataXtd_Plane_Set(*args):
	return TDataXtd_Plane.Set(*args)

@deprecated
def TDataXtd_Plane_Set(*args):
	return TDataXtd_Plane.Set(*args)

@deprecated
def TDataXtd_Point_GetID(*args):
	return TDataXtd_Point.GetID(*args)

@deprecated
def TDataXtd_Point_Set(*args):
	return TDataXtd_Point.Set(*args)

@deprecated
def TDataXtd_Point_Set(*args):
	return TDataXtd_Point.Set(*args)

@deprecated
def TDataXtd_Position_Get(*args):
	return TDataXtd_Position.Get(*args)

@deprecated
def TDataXtd_Position_GetID(*args):
	return TDataXtd_Position.GetID(*args)

@deprecated
def TDataXtd_Position_Set(*args):
	return TDataXtd_Position.Set(*args)

@deprecated
def TDataXtd_Position_Set(*args):
	return TDataXtd_Position.Set(*args)

@deprecated
def TDataXtd_Presentation_GetID(*args):
	return TDataXtd_Presentation.GetID(*args)

@deprecated
def TDataXtd_Presentation_Set(*args):
	return TDataXtd_Presentation.Set(*args)

@deprecated
def TDataXtd_Presentation_Unset(*args):
	return TDataXtd_Presentation.Unset(*args)

@deprecated
def TDataXtd_Presentation_getColorNameFromOldEnum(*args):
	return TDataXtd_Presentation.getColorNameFromOldEnum(*args)

@deprecated
def TDataXtd_Presentation_getOldColorNameFromNewEnum(*args):
	return TDataXtd_Presentation.getOldColorNameFromNewEnum(*args)

@deprecated
def TDataXtd_Shape_Find(*args):
	return TDataXtd_Shape.Find(*args)

@deprecated
def TDataXtd_Shape_Get(*args):
	return TDataXtd_Shape.Get(*args)

@deprecated
def TDataXtd_Shape_GetID(*args):
	return TDataXtd_Shape.GetID(*args)

@deprecated
def TDataXtd_Shape_New(*args):
	return TDataXtd_Shape.New(*args)

@deprecated
def TDataXtd_Shape_Set(*args):
	return TDataXtd_Shape.Set(*args)

@deprecated
def TDataXtd_Triangulation_GetID(*args):
	return TDataXtd_Triangulation.GetID(*args)

@deprecated
def TDataXtd_Triangulation_Set(*args):
	return TDataXtd_Triangulation.Set(*args)

@deprecated
def TDataXtd_Triangulation_Set(*args):
	return TDataXtd_Triangulation.Set(*args)

@deprecated
def TDataXtd_PatternStd_GetPatternID(*args):
	return TDataXtd_PatternStd.GetPatternID(*args)

@deprecated
def TDataXtd_PatternStd_Set(*args):
	return TDataXtd_PatternStd.Set(*args)



