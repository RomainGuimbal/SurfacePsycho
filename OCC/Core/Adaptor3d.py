# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Adaptor3d module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_adaptor3d.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Adaptor3d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Adaptor3d')
    _Adaptor3d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Adaptor3d', [dirname(__file__)])
        except ImportError:
            import _Adaptor3d
            return _Adaptor3d
        try:
            _mod = imp.load_module('_Adaptor3d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Adaptor3d = swig_import_helper()
    del swig_import_helper
else:
    import _Adaptor3d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Adaptor3d.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Adaptor3d.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Adaptor3d.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Adaptor3d.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Adaptor3d.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Adaptor3d.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Adaptor3d.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Adaptor3d.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Adaptor3d.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Adaptor3d.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Adaptor3d.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Adaptor3d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Adaptor3d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Adaptor3d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Adaptor3d.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Adaptor3d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Adaptor3d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Adaptor3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _Adaptor3d.process_exception(error, method_name, class_name)
process_exception = _Adaptor3d.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_Adaptor3d_HCurve_Create() -> "opencascade::handle< Adaptor3d_HCurve >":
    return _Adaptor3d.Handle_Adaptor3d_HCurve_Create()
Handle_Adaptor3d_HCurve_Create = _Adaptor3d.Handle_Adaptor3d_HCurve_Create

def Handle_Adaptor3d_HCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor3d_HCurve >":
    return _Adaptor3d.Handle_Adaptor3d_HCurve_DownCast(t)
Handle_Adaptor3d_HCurve_DownCast = _Adaptor3d.Handle_Adaptor3d_HCurve_DownCast

def Handle_Adaptor3d_HCurve_IsNull(t: 'opencascade::handle< Adaptor3d_HCurve > const &') -> "bool":
    return _Adaptor3d.Handle_Adaptor3d_HCurve_IsNull(t)
Handle_Adaptor3d_HCurve_IsNull = _Adaptor3d.Handle_Adaptor3d_HCurve_IsNull

def Handle_Adaptor3d_HSurface_Create() -> "opencascade::handle< Adaptor3d_HSurface >":
    return _Adaptor3d.Handle_Adaptor3d_HSurface_Create()
Handle_Adaptor3d_HSurface_Create = _Adaptor3d.Handle_Adaptor3d_HSurface_Create

def Handle_Adaptor3d_HSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor3d_HSurface >":
    return _Adaptor3d.Handle_Adaptor3d_HSurface_DownCast(t)
Handle_Adaptor3d_HSurface_DownCast = _Adaptor3d.Handle_Adaptor3d_HSurface_DownCast

def Handle_Adaptor3d_HSurface_IsNull(t: 'opencascade::handle< Adaptor3d_HSurface > const &') -> "bool":
    return _Adaptor3d.Handle_Adaptor3d_HSurface_IsNull(t)
Handle_Adaptor3d_HSurface_IsNull = _Adaptor3d.Handle_Adaptor3d_HSurface_IsNull

def Handle_Adaptor3d_HVertex_Create() -> "opencascade::handle< Adaptor3d_HVertex >":
    return _Adaptor3d.Handle_Adaptor3d_HVertex_Create()
Handle_Adaptor3d_HVertex_Create = _Adaptor3d.Handle_Adaptor3d_HVertex_Create

def Handle_Adaptor3d_HVertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor3d_HVertex >":
    return _Adaptor3d.Handle_Adaptor3d_HVertex_DownCast(t)
Handle_Adaptor3d_HVertex_DownCast = _Adaptor3d.Handle_Adaptor3d_HVertex_DownCast

def Handle_Adaptor3d_HVertex_IsNull(t: 'opencascade::handle< Adaptor3d_HVertex > const &') -> "bool":
    return _Adaptor3d.Handle_Adaptor3d_HVertex_IsNull(t)
Handle_Adaptor3d_HVertex_IsNull = _Adaptor3d.Handle_Adaptor3d_HVertex_IsNull

def Handle_Adaptor3d_TopolTool_Create() -> "opencascade::handle< Adaptor3d_TopolTool >":
    return _Adaptor3d.Handle_Adaptor3d_TopolTool_Create()
Handle_Adaptor3d_TopolTool_Create = _Adaptor3d.Handle_Adaptor3d_TopolTool_Create

def Handle_Adaptor3d_TopolTool_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor3d_TopolTool >":
    return _Adaptor3d.Handle_Adaptor3d_TopolTool_DownCast(t)
Handle_Adaptor3d_TopolTool_DownCast = _Adaptor3d.Handle_Adaptor3d_TopolTool_DownCast

def Handle_Adaptor3d_TopolTool_IsNull(t: 'opencascade::handle< Adaptor3d_TopolTool > const &') -> "bool":
    return _Adaptor3d.Handle_Adaptor3d_TopolTool_IsNull(t)
Handle_Adaptor3d_TopolTool_IsNull = _Adaptor3d.Handle_Adaptor3d_TopolTool_IsNull

def Handle_Adaptor3d_HCurveOnSurface_Create() -> "opencascade::handle< Adaptor3d_HCurveOnSurface >":
    return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Create()
Handle_Adaptor3d_HCurveOnSurface_Create = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_Create

def Handle_Adaptor3d_HCurveOnSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor3d_HCurveOnSurface >":
    return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DownCast(t)
Handle_Adaptor3d_HCurveOnSurface_DownCast = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_DownCast

def Handle_Adaptor3d_HCurveOnSurface_IsNull(t: 'opencascade::handle< Adaptor3d_HCurveOnSurface > const &') -> "bool":
    return _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsNull(t)
Handle_Adaptor3d_HCurveOnSurface_IsNull = _Adaptor3d.Handle_Adaptor3d_HCurveOnSurface_IsNull

def Handle_Adaptor3d_HIsoCurve_Create() -> "opencascade::handle< Adaptor3d_HIsoCurve >":
    return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Create()
Handle_Adaptor3d_HIsoCurve_Create = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_Create

def Handle_Adaptor3d_HIsoCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< Adaptor3d_HIsoCurve >":
    return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DownCast(t)
Handle_Adaptor3d_HIsoCurve_DownCast = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_DownCast

def Handle_Adaptor3d_HIsoCurve_IsNull(t: 'opencascade::handle< Adaptor3d_HIsoCurve > const &') -> "bool":
    return _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsNull(t)
Handle_Adaptor3d_HIsoCurve_IsNull = _Adaptor3d.Handle_Adaptor3d_HIsoCurve_IsNull
class Adaptor3d_Curve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_Curve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_Curve, name)
    __repr__ = _swig_repr

    def BSpline(self, *args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _Adaptor3d.Adaptor3d_Curve_BSpline(self, *args)


    def Bezier(self, *args) -> "opencascade::handle< Geom_BezierCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _Adaptor3d.Adaptor3d_Curve_Bezier(self, *args)


    def Circle(self, *args) -> "gp_Circ":
        """
        No available documentation.

        Returns
        -------
        gp_Circ

        """
        return _Adaptor3d.Adaptor3d_Curve_Circle(self, *args)


    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Curve_Continuity(self, *args)


    def D0(self, *args) -> "void":
        """
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Curve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Curve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Curve_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Curve_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Curve_DN(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Curve_Degree(self, *args)


    def Ellipse(self, *args) -> "gp_Elips":
        """
        No available documentation.

        Returns
        -------
        gp_Elips

        """
        return _Adaptor3d.Adaptor3d_Curve_Ellipse(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Curve_FirstParameter(self, *args)


    def GetType(self, *args) -> "GeomAbs_CurveType":
        """
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _Adaptor3d.Adaptor3d_Curve_GetType(self, *args)


    def Hyperbola(self, *args) -> "gp_Hypr":
        """
        No available documentation.

        Returns
        -------
        gp_Hypr

        """
        return _Adaptor3d.Adaptor3d_Curve_Hyperbola(self, *args)


    def Intervals(self, *args) -> "void":
        """
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accomodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Curve_Intervals(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Curve_IsClosed(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Curve_IsPeriodic(self, *args)


    def IsRational(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Curve_IsRational(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Curve_LastParameter(self, *args)


    def Line(self, *args) -> "gp_Lin":
        """
        No available documentation.

        Returns
        -------
        gp_Lin

        """
        return _Adaptor3d.Adaptor3d_Curve_Line(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Curve_NbIntervals(self, *args)


    def NbKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Curve_NbKnots(self, *args)


    def NbPoles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Curve_NbPoles(self, *args)


    def OffsetCurve(self, *args) -> "opencascade::handle< Geom_OffsetCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_OffsetCurve>

        """
        return _Adaptor3d.Adaptor3d_Curve_OffsetCurve(self, *args)


    def Parabola(self, *args) -> "gp_Parab":
        """
        No available documentation.

        Returns
        -------
        gp_Parab

        """
        return _Adaptor3d.Adaptor3d_Curve_Parabola(self, *args)


    def Period(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Curve_Period(self, *args)


    def Resolution(self, *args) -> "Standard_Real":
        """
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Curve_Resolution(self, *args)


    def Trim(self, *args) -> "opencascade::handle< Adaptor3d_HCurve >":
        """
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_HCurve>

        """
        return _Adaptor3d.Adaptor3d_Curve_Trim(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_Curve_Value(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _Adaptor3d.new_Adaptor3d_Curve()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_Curve
    __del__ = lambda self: None
Adaptor3d_Curve_swigregister = _Adaptor3d.Adaptor3d_Curve_swigregister
Adaptor3d_Curve_swigregister(Adaptor3d_Curve)

class Adaptor3d_HCurve(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_HCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_HCurve, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def BSpline(self, *args) -> "opencascade::handle< Geom_BSplineCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _Adaptor3d.Adaptor3d_HCurve_BSpline(self, *args)


    def Bezier(self, *args) -> "opencascade::handle< Geom_BezierCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _Adaptor3d.Adaptor3d_HCurve_Bezier(self, *args)


    def Circle(self, *args) -> "gp_Circ":
        """
        No available documentation.

        Returns
        -------
        gp_Circ

        """
        return _Adaptor3d.Adaptor3d_HCurve_Circle(self, *args)


    def Continuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HCurve_Continuity(self, *args)


    def Curve(self, *args) -> "Adaptor3d_Curve const &":
        """
        Returns a pointer to the curve inside the hcurve.

        Returns
        -------
        Adaptor3d_Curve

        """
        return _Adaptor3d.Adaptor3d_HCurve_Curve(self, *args)


    def D0(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HCurve_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HCurve_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HCurve_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HCurve_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HCurve_DN(self, *args)


    def Degree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HCurve_Degree(self, *args)


    def Ellipse(self, *args) -> "gp_Elips":
        """
        No available documentation.

        Returns
        -------
        gp_Elips

        """
        return _Adaptor3d.Adaptor3d_HCurve_Ellipse(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HCurve_FirstParameter(self, *args)


    def GetCurve(self, *args) -> "Adaptor3d_Curve &":
        """
        Returns a pointer to the curve inside the hcurve.

        Returns
        -------
        Adaptor3d_Curve

        """
        return _Adaptor3d.Adaptor3d_HCurve_GetCurve(self, *args)


    def GetType(self, *args) -> "GeomAbs_CurveType":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _Adaptor3d.Adaptor3d_HCurve_GetType(self, *args)


    def Hyperbola(self, *args) -> "gp_Hypr":
        """
        No available documentation.

        Returns
        -------
        gp_Hypr

        """
        return _Adaptor3d.Adaptor3d_HCurve_Hyperbola(self, *args)


    def Intervals(self, *args) -> "void":
        """
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accomodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HCurve_Intervals(self, *args)


    def IsClosed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsPeriodic(self, *args)


    def IsRational(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HCurve_IsRational(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HCurve_LastParameter(self, *args)


    def Line(self, *args) -> "gp_Lin":
        """
        No available documentation.

        Returns
        -------
        gp_Lin

        """
        return _Adaptor3d.Adaptor3d_HCurve_Line(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbIntervals(self, *args)


    def NbKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbKnots(self, *args)


    def NbPoles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HCurve_NbPoles(self, *args)


    def OffsetCurve(self, *args) -> "opencascade::handle< Geom_OffsetCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_OffsetCurve>

        """
        return _Adaptor3d.Adaptor3d_HCurve_OffsetCurve(self, *args)


    def Parabola(self, *args) -> "gp_Parab":
        """
        No available documentation.

        Returns
        -------
        gp_Parab

        """
        return _Adaptor3d.Adaptor3d_HCurve_Parabola(self, *args)


    def Period(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HCurve_Period(self, *args)


    def Resolution(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HCurve_Resolution(self, *args)


    def Trim(self, *args) -> "opencascade::handle< Adaptor3d_HCurve >":
        """
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. //! if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_HCurve>

        """
        return _Adaptor3d.Adaptor3d_HCurve_Trim(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        No available documentation.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HCurve_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor3d_HCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HCurve
    __del__ = lambda self: None
Adaptor3d_HCurve_swigregister = _Adaptor3d.Adaptor3d_HCurve_swigregister
Adaptor3d_HCurve_swigregister(Adaptor3d_HCurve)

class Adaptor3d_HSurface(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_HSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_HSurface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AxeOfRevolution(self, *args) -> "gp_Ax1":
        """
        No available documentation.

        Returns
        -------
        gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_HSurface_AxeOfRevolution(self, *args)


    def BSpline(self, *args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurface_BSpline(self, *args)


    def BasisCurve(self, *args) -> "opencascade::handle< Adaptor3d_HCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HCurve>

        """
        return _Adaptor3d.Adaptor3d_HSurface_BasisCurve(self, *args)


    def BasisSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurface_BasisSurface(self, *args)


    def Bezier(self, *args) -> "opencascade::handle< Geom_BezierSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BezierSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurface_Bezier(self, *args)


    def Cone(self, *args) -> "gp_Cone":
        """
        No available documentation.

        Returns
        -------
        gp_Cone

        """
        return _Adaptor3d.Adaptor3d_HSurface_Cone(self, *args)


    def Cylinder(self, *args) -> "gp_Cylinder":
        """
        No available documentation.

        Returns
        -------
        gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_HSurface_Cylinder(self, *args)


    def D0(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurface_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurface_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurface_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec
        D3U: gp_Vec
        D3V: gp_Vec
        D3UUV: gp_Vec
        D3UVV: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurface_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        V: float
        Nu: int
        Nv: int

        Returns
        -------
        gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurface_DN(self, *args)


    def Direction(self, *args) -> "gp_Dir":
        """
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _Adaptor3d.Adaptor3d_HSurface_Direction(self, *args)


    def FirstUParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_FirstUParameter(self, *args)


    def FirstVParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_FirstVParameter(self, *args)


    def GetType(self, *args) -> "GeomAbs_SurfaceType":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_HSurface_GetType(self, *args)


    def IsUClosed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsUClosed(self, *args)


    def IsUPeriodic(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsUPeriodic(self, *args)


    def IsURational(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsURational(self, *args)


    def IsVClosed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVClosed(self, *args)


    def IsVPeriodic(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVPeriodic(self, *args)


    def IsVRational(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurface_IsVRational(self, *args)


    def LastUParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_LastUParameter(self, *args)


    def LastVParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_LastVParameter(self, *args)


    def NbUIntervals(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUIntervals(self, *args)


    def NbUKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUKnots(self, *args)


    def NbUPoles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbUPoles(self, *args)


    def NbVIntervals(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVIntervals(self, *args)


    def NbVKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVKnots(self, *args)


    def NbVPoles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurface_NbVPoles(self, *args)


    def OffsetValue(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_OffsetValue(self, *args)


    def Plane(self, *args) -> "gp_Pln":
        """
        No available documentation.

        Returns
        -------
        gp_Pln

        """
        return _Adaptor3d.Adaptor3d_HSurface_Plane(self, *args)


    def Sphere(self, *args) -> "gp_Sphere":
        """
        No available documentation.

        Returns
        -------
        gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_HSurface_Sphere(self, *args)


    def Surface(self, *args) -> "Adaptor3d_Surface const &":
        """
        Returns a reference to the surface inside the hsurface.

        Returns
        -------
        Adaptor3d_Surface

        """
        return _Adaptor3d.Adaptor3d_HSurface_Surface(self, *args)


    def Torus(self, *args) -> "gp_Torus":
        """
        No available documentation.

        Returns
        -------
        gp_Torus

        """
        return _Adaptor3d.Adaptor3d_HSurface_Torus(self, *args)


    def UContinuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurface_UContinuity(self, *args)


    def UDegree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurface_UDegree(self, *args)


    def UIntervals(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurface_UIntervals(self, *args)


    def UPeriod(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_UPeriod(self, *args)


    def UResolution(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_UResolution(self, *args)


    def UTrim(self, *args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurface_UTrim(self, *args)


    def VContinuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_HSurface_VContinuity(self, *args)


    def VDegree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurface_VDegree(self, *args)


    def VIntervals(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurface_VIntervals(self, *args)


    def VPeriod(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_VPeriod(self, *args)


    def VResolution(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurface_VResolution(self, *args)


    def VTrim(self, *args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurface_VTrim(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        No available documentation.

        Parameters
        ----------
        U: float
        V: float

        Returns
        -------
        gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HSurface_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor3d_HSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HSurface
    __del__ = lambda self: None
Adaptor3d_HSurface_swigregister = _Adaptor3d.Adaptor3d_HSurface_swigregister
Adaptor3d_HSurface_swigregister(Adaptor3d_HSurface)

class Adaptor3d_HSurfaceTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_HSurfaceTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_HSurfaceTool, name)
    __repr__ = _swig_repr

    def AxeOfRevolution(*args) -> "gp_Ax1":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_AxeOfRevolution(*args)

    AxeOfRevolution = staticmethod(AxeOfRevolution)

    def BSpline(*args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BSpline(*args)

    BSpline = staticmethod(BSpline)

    def BasisCurve(*args) -> "opencascade::handle< Adaptor3d_HCurve >":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        opencascade::handle<Adaptor3d_HCurve>

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisCurve(*args)

    BasisCurve = staticmethod(BasisCurve)

    def BasisSurface(*args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisSurface(*args)

    BasisSurface = staticmethod(BasisSurface)

    def Bezier(*args) -> "opencascade::handle< Geom_BezierSurface >":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        opencascade::handle<Geom_BezierSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Bezier(*args)

    Bezier = staticmethod(Bezier)

    def Cone(*args) -> "gp_Cone":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        gp_Cone

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Cone(*args)

    Cone = staticmethod(Cone)

    def Cylinder(*args) -> "gp_Cylinder":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Cylinder(*args)

    Cylinder = staticmethod(Cylinder)

    def D0(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        u: float
        v: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D0(*args)

    D0 = staticmethod(D0)

    def D1(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        u: float
        v: float
        P: gp_Pnt
        D1u: gp_Vec
        D1v: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        u: float
        v: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        u: float
        v: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec
        D3U: gp_Vec
        D3V: gp_Vec
        D3UUV: gp_Vec
        D3UVV: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_D3(*args)

    D3 = staticmethod(D3)

    def DN(*args) -> "gp_Vec":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        u: float
        v: float
        Nu: int
        Nv: int

        Returns
        -------
        gp_Vec

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_DN(*args)

    DN = staticmethod(DN)

    def Direction(*args) -> "gp_Dir":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        gp_Dir

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Direction(*args)

    Direction = staticmethod(Direction)

    def FirstUParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstUParameter(*args)

    FirstUParameter = staticmethod(FirstUParameter)

    def FirstVParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstVParameter(*args)

    FirstVParameter = staticmethod(FirstVParameter)

    def GetType(*args) -> "GeomAbs_SurfaceType":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_GetType(*args)

    GetType = staticmethod(GetType)

    def IsUClosed(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUClosed(*args)

    IsUClosed = staticmethod(IsUClosed)

    def IsUPeriodic(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUPeriodic(*args)

    IsUPeriodic = staticmethod(IsUPeriodic)

    def IsVClosed(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVClosed(*args)

    IsVClosed = staticmethod(IsVClosed)

    def IsVPeriodic(*args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVPeriodic(*args)

    IsVPeriodic = staticmethod(IsVPeriodic)

    def LastUParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_LastUParameter(*args)

    LastUParameter = staticmethod(LastUParameter)

    def LastVParameter(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_LastVParameter(*args)

    LastVParameter = staticmethod(LastVParameter)

    def NbSamplesU(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        int

        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        u1: float
        u2: float

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesU(*args)

    NbSamplesU = staticmethod(NbSamplesU)

    def NbSamplesV(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        int

        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        v1: float
        v2: float

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesV(*args)

    NbSamplesV = staticmethod(NbSamplesV)

    def NbUIntervals(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        Sh: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbUIntervals(*args)

    NbUIntervals = staticmethod(NbUIntervals)

    def NbVIntervals(*args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        Sh: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_NbVIntervals(*args)

    NbVIntervals = staticmethod(NbVIntervals)

    def OffsetValue(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_OffsetValue(*args)

    OffsetValue = staticmethod(OffsetValue)

    def Plane(*args) -> "gp_Pln":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        gp_Pln

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Plane(*args)

    Plane = staticmethod(Plane)

    def Sphere(*args) -> "gp_Sphere":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Sphere(*args)

    Sphere = staticmethod(Sphere)

    def Torus(*args) -> "gp_Torus":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        gp_Torus

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Torus(*args)

    Torus = staticmethod(Torus)

    def UIntervals(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        T: TColStd_Array1OfReal
        Sh: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UIntervals(*args)

    UIntervals = staticmethod(UIntervals)

    def UPeriod(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UPeriod(*args)

    UPeriod = staticmethod(UPeriod)

    def UResolution(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UResolution(*args)

    UResolution = staticmethod(UResolution)

    def UTrim(*args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        If <first> >= <last>.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_UTrim(*args)

    UTrim = staticmethod(UTrim)

    def VIntervals(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        T: TColStd_Array1OfReal
        Sh: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VIntervals(*args)

    VIntervals = staticmethod(VIntervals)

    def VPeriod(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VPeriod(*args)

    VPeriod = staticmethod(VPeriod)

    def VResolution(*args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VResolution(*args)

    VResolution = staticmethod(VResolution)

    def VTrim(*args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        If <first> >= <last>.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_VTrim(*args)

    VTrim = staticmethod(VTrim)

    def Value(*args) -> "gp_Pnt":
        """
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        u: float
        v: float

        Returns
        -------
        gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_HSurfaceTool_Value(*args)

    Value = staticmethod(Value)

    __repr__ = _dumps_object


    def __init__(self):
        this = _Adaptor3d.new_Adaptor3d_HSurfaceTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HSurfaceTool
    __del__ = lambda self: None
Adaptor3d_HSurfaceTool_swigregister = _Adaptor3d.Adaptor3d_HSurfaceTool_swigregister
Adaptor3d_HSurfaceTool_swigregister(Adaptor3d_HSurfaceTool)

def Adaptor3d_HSurfaceTool_AxeOfRevolution(*args) -> "gp_Ax1":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    gp_Ax1

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_AxeOfRevolution(*args)

def Adaptor3d_HSurfaceTool_BSpline(*args) -> "opencascade::handle< Geom_BSplineSurface >":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    opencascade::handle<Geom_BSplineSurface>

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BSpline(*args)

def Adaptor3d_HSurfaceTool_BasisCurve(*args) -> "opencascade::handle< Adaptor3d_HCurve >":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    opencascade::handle<Adaptor3d_HCurve>

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisCurve(*args)

def Adaptor3d_HSurfaceTool_BasisSurface(*args) -> "opencascade::handle< Adaptor3d_HSurface >":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    opencascade::handle<Adaptor3d_HSurface>

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_BasisSurface(*args)

def Adaptor3d_HSurfaceTool_Bezier(*args) -> "opencascade::handle< Geom_BezierSurface >":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    opencascade::handle<Geom_BezierSurface>

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Bezier(*args)

def Adaptor3d_HSurfaceTool_Cone(*args) -> "gp_Cone":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    gp_Cone

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Cone(*args)

def Adaptor3d_HSurfaceTool_Cylinder(*args) -> "gp_Cylinder":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    gp_Cylinder

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Cylinder(*args)

def Adaptor3d_HSurfaceTool_D0(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    u: float
    v: float
    P: gp_Pnt

    Returns
    -------
    None

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D0(*args)

def Adaptor3d_HSurfaceTool_D1(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    u: float
    v: float
    P: gp_Pnt
    D1u: gp_Vec
    D1v: gp_Vec

    Returns
    -------
    None

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D1(*args)

def Adaptor3d_HSurfaceTool_D2(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    u: float
    v: float
    P: gp_Pnt
    D1U: gp_Vec
    D1V: gp_Vec
    D2U: gp_Vec
    D2V: gp_Vec
    D2UV: gp_Vec

    Returns
    -------
    None

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D2(*args)

def Adaptor3d_HSurfaceTool_D3(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    u: float
    v: float
    P: gp_Pnt
    D1U: gp_Vec
    D1V: gp_Vec
    D2U: gp_Vec
    D2V: gp_Vec
    D2UV: gp_Vec
    D3U: gp_Vec
    D3V: gp_Vec
    D3UUV: gp_Vec
    D3UVV: gp_Vec

    Returns
    -------
    None

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_D3(*args)

def Adaptor3d_HSurfaceTool_DN(*args) -> "gp_Vec":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    u: float
    v: float
    Nu: int
    Nv: int

    Returns
    -------
    gp_Vec

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_DN(*args)

def Adaptor3d_HSurfaceTool_Direction(*args) -> "gp_Dir":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    gp_Dir

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Direction(*args)

def Adaptor3d_HSurfaceTool_FirstUParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstUParameter(*args)

def Adaptor3d_HSurfaceTool_FirstVParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_FirstVParameter(*args)

def Adaptor3d_HSurfaceTool_GetType(*args) -> "GeomAbs_SurfaceType":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    GeomAbs_SurfaceType

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_GetType(*args)

def Adaptor3d_HSurfaceTool_IsUClosed(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    bool

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUClosed(*args)

def Adaptor3d_HSurfaceTool_IsUPeriodic(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    bool

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsUPeriodic(*args)

def Adaptor3d_HSurfaceTool_IsVClosed(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    bool

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVClosed(*args)

def Adaptor3d_HSurfaceTool_IsVPeriodic(*args) -> "Standard_Boolean":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    bool

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_IsVPeriodic(*args)

def Adaptor3d_HSurfaceTool_LastUParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_LastUParameter(*args)

def Adaptor3d_HSurfaceTool_LastVParameter(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_LastVParameter(*args)

def Adaptor3d_HSurfaceTool_NbSamplesU(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    int

    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    u1: float
    u2: float

    Returns
    -------
    int

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesU(*args)

def Adaptor3d_HSurfaceTool_NbSamplesV(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    int

    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    v1: float
    v2: float

    Returns
    -------
    int

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbSamplesV(*args)

def Adaptor3d_HSurfaceTool_NbUIntervals(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    Sh: GeomAbs_Shape

    Returns
    -------
    int

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbUIntervals(*args)

def Adaptor3d_HSurfaceTool_NbVIntervals(*args) -> "Standard_Integer":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    Sh: GeomAbs_Shape

    Returns
    -------
    int

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_NbVIntervals(*args)

def Adaptor3d_HSurfaceTool_OffsetValue(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_OffsetValue(*args)

def Adaptor3d_HSurfaceTool_Plane(*args) -> "gp_Pln":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    gp_Pln

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Plane(*args)

def Adaptor3d_HSurfaceTool_Sphere(*args) -> "gp_Sphere":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    gp_Sphere

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Sphere(*args)

def Adaptor3d_HSurfaceTool_Torus(*args) -> "gp_Torus":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    gp_Torus

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Torus(*args)

def Adaptor3d_HSurfaceTool_UIntervals(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    T: TColStd_Array1OfReal
    Sh: GeomAbs_Shape

    Returns
    -------
    None

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UIntervals(*args)

def Adaptor3d_HSurfaceTool_UPeriod(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UPeriod(*args)

def Adaptor3d_HSurfaceTool_UResolution(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    R3d: float

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UResolution(*args)

def Adaptor3d_HSurfaceTool_UTrim(*args) -> "opencascade::handle< Adaptor3d_HSurface >":
    """
    If <first> >= <last>.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    First: float
    Last: float
    Tol: float

    Returns
    -------
    opencascade::handle<Adaptor3d_HSurface>

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_UTrim(*args)

def Adaptor3d_HSurfaceTool_VIntervals(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    T: TColStd_Array1OfReal
    Sh: GeomAbs_Shape

    Returns
    -------
    None

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VIntervals(*args)

def Adaptor3d_HSurfaceTool_VPeriod(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VPeriod(*args)

def Adaptor3d_HSurfaceTool_VResolution(*args) -> "Standard_Real":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    R3d: float

    Returns
    -------
    float

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VResolution(*args)

def Adaptor3d_HSurfaceTool_VTrim(*args) -> "opencascade::handle< Adaptor3d_HSurface >":
    """
    If <first> >= <last>.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    First: float
    Last: float
    Tol: float

    Returns
    -------
    opencascade::handle<Adaptor3d_HSurface>

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_VTrim(*args)

def Adaptor3d_HSurfaceTool_Value(*args) -> "gp_Pnt":
    """
    No available documentation.

    Parameters
    ----------
    S: Adaptor3d_HSurface
    u: float
    v: float

    Returns
    -------
    gp_Pnt

    """
    return _Adaptor3d.Adaptor3d_HSurfaceTool_Value(*args)

class Adaptor3d_HVertex(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_HVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_HVertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        Ori: TopAbs_Orientation
        Resolution: float

        Returns
        -------
        None

        """
        this = _Adaptor3d.new_Adaptor3d_HVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsSame(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        Other: Adaptor3d_HVertex

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_HVertex_IsSame(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        No available documentation.

        Returns
        -------
        TopAbs_Orientation

        """
        return _Adaptor3d.Adaptor3d_HVertex_Orientation(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HVertex_Parameter(self, *args)


    def Resolution(self, *args) -> "Standard_Real":
        """
        Parametric resolution (2d).

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_HVertex_Resolution(self, *args)


    def Value(self, *args) -> "gp_Pnt2d":
        """
        No available documentation.

        Returns
        -------
        gp_Pnt2d

        """
        return _Adaptor3d.Adaptor3d_HVertex_Value(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor3d_HVertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HVertex
    __del__ = lambda self: None
Adaptor3d_HVertex_swigregister = _Adaptor3d.Adaptor3d_HVertex_swigregister
Adaptor3d_HVertex_swigregister(Adaptor3d_HVertex)

class Adaptor3d_InterFunc(OCC.Core.math.math_FunctionWithDerivative):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_InterFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionWithDerivative]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_InterFunc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Build the function u(t)=fixval if fix =1 or v(t)=fixval if fix=2.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        FixVal: float
        Fix: int

        Returns
        -------
        None

        """
        this = _Adaptor3d.new_Adaptor3d_InterFunc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_InterFunc
    __del__ = lambda self: None
Adaptor3d_InterFunc_swigregister = _Adaptor3d.Adaptor3d_InterFunc_swigregister
Adaptor3d_InterFunc_swigregister(Adaptor3d_InterFunc)

class Adaptor3d_Surface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_Surface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_Surface, name)
    __repr__ = _swig_repr

    def AxeOfRevolution(self, *args) -> "gp_Ax1":
        """
        No available documentation.

        Returns
        -------
        gp_Ax1

        """
        return _Adaptor3d.Adaptor3d_Surface_AxeOfRevolution(self, *args)


    def BSpline(self, *args) -> "opencascade::handle< Geom_BSplineSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _Adaptor3d.Adaptor3d_Surface_BSpline(self, *args)


    def BasisCurve(self, *args) -> "opencascade::handle< Adaptor3d_HCurve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HCurve>

        """
        return _Adaptor3d.Adaptor3d_Surface_BasisCurve(self, *args)


    def BasisSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_Surface_BasisSurface(self, *args)


    def Bezier(self, *args) -> "opencascade::handle< Geom_BezierSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BezierSurface>

        """
        return _Adaptor3d.Adaptor3d_Surface_Bezier(self, *args)


    def Cone(self, *args) -> "gp_Cone":
        """
        No available documentation.

        Returns
        -------
        gp_Cone

        """
        return _Adaptor3d.Adaptor3d_Surface_Cone(self, *args)


    def Cylinder(self, *args) -> "gp_Cylinder":
        """
        No available documentation.

        Returns
        -------
        gp_Cylinder

        """
        return _Adaptor3d.Adaptor3d_Surface_Cylinder(self, *args)


    def D0(self, *args) -> "void":
        """
        Computes the point of parameters u,v on the surface.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Surface_D0(self, *args)


    def D1(self, *args) -> "void":
        """
        Computes the point and the first derivatives on the surface. raised if the continuity of the current intervals is not c1.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Surface_D1(self, *args)


    def D2(self, *args) -> "void":
        """
        Computes the point, the first and second derivatives on the surface. raised if the continuity of the current intervals is not c2.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Surface_D2(self, *args)


    def D3(self, *args) -> "void":
        """
        Computes the point, the first, second and third derivatives on the surface. raised if the continuity of the current intervals is not c3.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec
        D3U: gp_Vec
        D3V: gp_Vec
        D3UUV: gp_Vec
        D3UVV: gp_Vec

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Surface_D3(self, *args)


    def DN(self, *args) -> "gp_Vec":
        """
        Computes the derivative of order nu in the direction u and nv in the direction v at the point p(u, v). raised if the current u interval is not not cnu and the current v interval is not cnv. raised if nu + nv < 1 or nu < 0 or nv < 0.

        Parameters
        ----------
        U: float
        V: float
        Nu: int
        Nv: int

        Returns
        -------
        gp_Vec

        """
        return _Adaptor3d.Adaptor3d_Surface_DN(self, *args)


    def Direction(self, *args) -> "gp_Dir":
        """
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _Adaptor3d.Adaptor3d_Surface_Direction(self, *args)


    def FirstUParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_FirstUParameter(self, *args)


    def FirstVParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_FirstVParameter(self, *args)


    def GetType(self, *args) -> "GeomAbs_SurfaceType":
        """
        Returns the type of the surface : plane, cylinder, cone, sphere, torus, beziersurface, bsplinesurface, surfaceofrevolution, surfaceofextrusion, othersurface.

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _Adaptor3d.Adaptor3d_Surface_GetType(self, *args)


    def IsUClosed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsUClosed(self, *args)


    def IsUPeriodic(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsUPeriodic(self, *args)


    def IsURational(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsURational(self, *args)


    def IsVClosed(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVClosed(self, *args)


    def IsVPeriodic(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVPeriodic(self, *args)


    def IsVRational(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_Surface_IsVRational(self, *args)


    def LastUParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_LastUParameter(self, *args)


    def LastVParameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_LastVParameter(self, *args)


    def NbUIntervals(self, *args) -> "Standard_Integer":
        """
        Returns the number of u intervals for continuity <s>. may be one if ucontinuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUIntervals(self, *args)


    def NbUKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUKnots(self, *args)


    def NbUPoles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbUPoles(self, *args)


    def NbVIntervals(self, *args) -> "Standard_Integer":
        """
        Returns the number of v intervals for continuity <s>. may be one if vcontinuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVIntervals(self, *args)


    def NbVKnots(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVKnots(self, *args)


    def NbVPoles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Surface_NbVPoles(self, *args)


    def OffsetValue(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_OffsetValue(self, *args)


    def Plane(self, *args) -> "gp_Pln":
        """
        No available documentation.

        Returns
        -------
        gp_Pln

        """
        return _Adaptor3d.Adaptor3d_Surface_Plane(self, *args)


    def Sphere(self, *args) -> "gp_Sphere":
        """
        No available documentation.

        Returns
        -------
        gp_Sphere

        """
        return _Adaptor3d.Adaptor3d_Surface_Sphere(self, *args)


    def Torus(self, *args) -> "gp_Torus":
        """
        No available documentation.

        Returns
        -------
        gp_Torus

        """
        return _Adaptor3d.Adaptor3d_Surface_Torus(self, *args)


    def UContinuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Surface_UContinuity(self, *args)


    def UDegree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Surface_UDegree(self, *args)


    def UIntervals(self, *args) -> "void":
        """
        Returns the intervals with the requested continuity in the u direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Surface_UIntervals(self, *args)


    def UPeriod(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_UPeriod(self, *args)


    def UResolution(self, *args) -> "Standard_Real":
        """
        Returns the parametric u resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_UResolution(self, *args)


    def UTrim(self, *args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        Returns a surface trimmed in the u direction equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_Surface_UTrim(self, *args)


    def VContinuity(self, *args) -> "GeomAbs_Shape":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Adaptor3d.Adaptor3d_Surface_VContinuity(self, *args)


    def VDegree(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_Surface_VDegree(self, *args)


    def VIntervals(self, *args) -> "void":
        """
        Returns the intervals with the requested continuity in the v direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_Surface_VIntervals(self, *args)


    def VPeriod(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_VPeriod(self, *args)


    def VResolution(self, *args) -> "Standard_Real":
        """
        Returns the parametric v resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_Surface_VResolution(self, *args)


    def VTrim(self, *args) -> "opencascade::handle< Adaptor3d_HSurface >":
        """
        Returns a surface trimmed in the v direction between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_Surface_VTrim(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        Computes the point of parameters u,v on the surface.

        Parameters
        ----------
        U: float
        V: float

        Returns
        -------
        gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_Surface_Value(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        this = _Adaptor3d.new_Adaptor3d_Surface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_Surface
    __del__ = lambda self: None
Adaptor3d_Surface_swigregister = _Adaptor3d.Adaptor3d_Surface_swigregister
Adaptor3d_Surface_swigregister(Adaptor3d_Surface)

class Adaptor3d_TopolTool(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_TopolTool, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_TopolTool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Surface: Adaptor3d_HSurface

        Returns
        -------
        None

        """
        this = _Adaptor3d.new_Adaptor3d_TopolTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BSplSamplePnts(self, *args) -> "void":
        """
        Compute the sample-points for the intersections algorithms by adaptive algorithm for bspline surfaces - is used in samplepnts thedefl is a requred deflection thenumin, thenvmin are minimal nb points for u and v.

        Parameters
        ----------
        theDefl: float
        theNUmin: int
        theNVmin: int

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_BSplSamplePnts(self, *args)


    def Classify(self, *args) -> "TopAbs_State":
        """
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        Tol: float
        ReacdreOnPeriodic: bool,optional
        	default value is Standard_True

        Returns
        -------
        TopAbs_State

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Classify(self, *args)


    def ComputeSamplePoints(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_ComputeSamplePoints(self, *args)


    def DomainIsInfinite(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_DomainIsInfinite(self, *args)


    def Edge(self, *args) -> "Standard_Address":
        """
        No available documentation.

        Returns
        -------
        Standard_Address

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Edge(self, *args)


    def Has3d(self, *args) -> "Standard_Boolean":
        """
        Answers if arcs and vertices may have 3d representations, so that we could use tol3d and pnt methods.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Has3d(self, *args)


    def Identical(self, *args) -> "Standard_Boolean":
        """
        Returns true if the vertices v1 and v2 are identical. this method does not take the orientation of the vertices in account.

        Parameters
        ----------
        V1: Adaptor3d_HVertex
        V2: Adaptor3d_HVertex

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Identical(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Init(self, *args)


    def InitVertexIterator(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_InitVertexIterator(self, *args)


    def Initialize(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        Curve: Adaptor2d_HCurve2d

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Initialize(self, *args)


    def IsThePointOn(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        Tol: float
        ReacdreOnPeriodic: bool,optional
        	default value is Standard_True

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_IsThePointOn(self, *args)


    def IsUniformSampling(self, *args) -> "Standard_Boolean":
        """
        Returns true if provide uniform sampling of points.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_IsUniformSampling(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_More(self, *args)


    def MoreVertex(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _Adaptor3d.Adaptor3d_TopolTool_MoreVertex(self, *args)


    def NbSamples(self, *args) -> "Standard_Integer":
        """
        Compute the sample-points for the intersections algorithms.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamples(self, *args)


    def NbSamplesU(self, *args) -> "Standard_Integer":
        """
        Compute the sample-points for the intersections algorithms.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamplesU(self, *args)


    def NbSamplesV(self, *args) -> "Standard_Integer":
        """
        Compute the sample-points for the intersections algorithms.

        Returns
        -------
        int

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NbSamplesV(self, *args)


    def Next(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Next(self, *args)


    def NextVertex(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_NextVertex(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        If the function returns the orientation of the arc. if the orientation is forward or reversed, the arc is a 'real' limit of the surface. if the orientation is internal or external, the arc is considered as an arc on the surface.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        TopAbs_Orientation

        Returns the orientation of the vertex v. the vertex has been found with an exploration on a given arc. the orientation is the orientation of the vertex on this arc.

        Parameters
        ----------
        V: Adaptor3d_HVertex

        Returns
        -------
        TopAbs_Orientation

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Orientation(self, *args)


    def Pnt(self, *args) -> "gp_Pnt":
        """
        Returns 3d point of the vertex v.

        Parameters
        ----------
        V: Adaptor3d_HVertex

        Returns
        -------
        gp_Pnt

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Pnt(self, *args)


    def SamplePnts(self, *args) -> "void":
        """
        Compute the sample-points for the intersections algorithms by adaptive algorithm for bspline surfaces. for other surfaces algorithm is the same as in method computesamplepoints(), but only fill arrays of u and v sample parameters; thedefl is a requred deflection thenumin, thenvmin are minimal nb points for u and v.

        Parameters
        ----------
        theDefl: float
        theNUmin: int
        theNVmin: int

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_SamplePnts(self, *args)


    def SamplePoint(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Index: int
        P2d: gp_Pnt2d
        P3d: gp_Pnt

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_SamplePoint(self, *args)


    def Tol3d(self, *args) -> "Standard_Real":
        """
        Returns 3d tolerance of the arc c.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        float

        Returns 3d tolerance of the vertex v.

        Parameters
        ----------
        V: Adaptor3d_HVertex

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Tol3d(self, *args)


    def UParameters(self, *args) -> "void":
        """
        Return the set of u parameters on the surface obtained by the method samplepnts.

        Parameters
        ----------
        theArray: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_UParameters(self, *args)


    def VParameters(self, *args) -> "void":
        """
        Return the set of v parameters on the surface obtained by the method samplepnts.

        Parameters
        ----------
        theArray: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_TopolTool_VParameters(self, *args)


    def Value(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Value(self, *args)


    def Vertex(self, *args) -> "opencascade::handle< Adaptor3d_HVertex >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HVertex>

        """
        return _Adaptor3d.Adaptor3d_TopolTool_Vertex(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor3d_TopolTool_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_TopolTool
    __del__ = lambda self: None
Adaptor3d_TopolTool_swigregister = _Adaptor3d.Adaptor3d_TopolTool_swigregister
Adaptor3d_TopolTool_swigregister(Adaptor3d_TopolTool)

class Adaptor3d_CurveOnSurface(Adaptor3d_Curve):
    __swig_setmethods__ = {}
    for _s in [Adaptor3d_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_CurveOnSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [Adaptor3d_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_CurveOnSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        Creates a curveonsurface from the 2d curve <c> and the surface <s>.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        """
        this = _Adaptor3d.new_Adaptor3d_CurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeCurve(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_ChangeCurve(self, *args)


    def ChangeSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_ChangeSurface(self, *args)


    def GetCurve(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor2d_HCurve2d>

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_GetCurve(self, *args)


    def GetSurface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_GetSurface(self, *args)


    def Load(self, *args) -> "void":
        """
        Changes the surface.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        Changes the 2d curve.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d

        Returns
        -------
        None

        Load both curve and surface.

        Parameters
        ----------
        C: Adaptor2d_HCurve2d
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_CurveOnSurface_Load(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_CurveOnSurface
    __del__ = lambda self: None
Adaptor3d_CurveOnSurface_swigregister = _Adaptor3d.Adaptor3d_CurveOnSurface_swigregister
Adaptor3d_CurveOnSurface_swigregister(Adaptor3d_CurveOnSurface)

class Adaptor3d_HCurveOnSurface(Adaptor3d_HCurve):
    __swig_setmethods__ = {}
    for _s in [Adaptor3d_HCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_HCurveOnSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [Adaptor3d_HCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_HCurveOnSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty genhcurve.

        Returns
        -------
        None

        Creates a genhcurve from a curve.

        Parameters
        ----------
        C: Adaptor3d_CurveOnSurface

        Returns
        -------
        None

        """
        this = _Adaptor3d.new_Adaptor3d_HCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeCurve(self, *args) -> "Adaptor3d_CurveOnSurface &":
        """
        Returns the curve used to create the genhcurve.

        Returns
        -------
        Adaptor3d_CurveOnSurface

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_ChangeCurve(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the field of the genhcurve.

        Parameters
        ----------
        C: Adaptor3d_CurveOnSurface

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HCurveOnSurface_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor3d_HCurveOnSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HCurveOnSurface
    __del__ = lambda self: None
Adaptor3d_HCurveOnSurface_swigregister = _Adaptor3d.Adaptor3d_HCurveOnSurface_swigregister
Adaptor3d_HCurveOnSurface_swigregister(Adaptor3d_HCurveOnSurface)

class Adaptor3d_HIsoCurve(Adaptor3d_HCurve):
    __swig_setmethods__ = {}
    for _s in [Adaptor3d_HCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_HIsoCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Adaptor3d_HCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_HIsoCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty genhcurve.

        Returns
        -------
        None

        Creates a genhcurve from a curve.

        Parameters
        ----------
        C: Adaptor3d_IsoCurve

        Returns
        -------
        None

        """
        this = _Adaptor3d.new_Adaptor3d_HIsoCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeCurve(self, *args) -> "Adaptor3d_IsoCurve &":
        """
        Returns the curve used to create the genhcurve.

        Returns
        -------
        Adaptor3d_IsoCurve

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_ChangeCurve(self, *args)


    def Set(self, *args) -> "void":
        """
        Sets the field of the genhcurve.

        Parameters
        ----------
        C: Adaptor3d_IsoCurve

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_HIsoCurve_Set(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_Adaptor3d_HIsoCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_HIsoCurve
    __del__ = lambda self: None
Adaptor3d_HIsoCurve_swigregister = _Adaptor3d.Adaptor3d_HIsoCurve_swigregister
Adaptor3d_HIsoCurve_swigregister(Adaptor3d_HIsoCurve)

class Adaptor3d_IsoCurve(Adaptor3d_Curve):
    __swig_setmethods__ = {}
    for _s in [Adaptor3d_Curve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adaptor3d_IsoCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [Adaptor3d_Curve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adaptor3d_IsoCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        The iso is set to noneiso.

        Returns
        -------
        None

        The surface is loaded. the iso is set to noneiso.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        Creates an isocurve curve. iso defines the type (isou or isou) param defines the value of the iso. the bounds of the iso are the bounds of the surface.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        Iso: GeomAbs_IsoType
        Param: float

        Returns
        -------
        None

        Create an isocurve curve. iso defines the type (isou or isov). param defines the value of the iso. wfirst,wlast define the bounds of the iso.

        Parameters
        ----------
        S: Adaptor3d_HSurface
        Iso: GeomAbs_IsoType
        Param: float
        WFirst: float
        WLast: float

        Returns
        -------
        None

        """
        this = _Adaptor3d.new_Adaptor3d_IsoCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Iso(self, *args) -> "GeomAbs_IsoType":
        """
        No available documentation.

        Returns
        -------
        GeomAbs_IsoType

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Iso(self, *args)


    def Load(self, *args) -> "void":
        """
        Changes the surface. the iso is reset to noneiso.

        Parameters
        ----------
        S: Adaptor3d_HSurface

        Returns
        -------
        None

        Changes the iso on the current surface.

        Parameters
        ----------
        Iso: GeomAbs_IsoType
        Param: float

        Returns
        -------
        None

        Changes the iso on the current surface.

        Parameters
        ----------
        Iso: GeomAbs_IsoType
        Param: float
        WFirst: float
        WLast: float

        Returns
        -------
        None

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Load(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Parameter(self, *args)


    def Surface(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _Adaptor3d.Adaptor3d_IsoCurve_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Adaptor3d.delete_Adaptor3d_IsoCurve
    __del__ = lambda self: None
Adaptor3d_IsoCurve_swigregister = _Adaptor3d.Adaptor3d_IsoCurve_swigregister
Adaptor3d_IsoCurve_swigregister(Adaptor3d_IsoCurve)



# This file is compatible with both classic and new-style classes.


