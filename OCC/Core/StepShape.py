# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepShape module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepshape.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepShape')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepShape')
    _StepShape = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepShape', [dirname(__file__)])
        except ImportError:
            import _StepShape
            return _StepShape
        try:
            _mod = imp.load_module('_StepShape', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepShape = swig_import_helper()
    del swig_import_helper
else:
    import _StepShape
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepShape.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StepShape.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepShape.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepShape.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StepShape.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StepShape.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StepShape.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StepShape.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StepShape.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StepShape.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepShape.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StepShape.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StepShape.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepShape.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepShape.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepShape.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StepShape.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepShape.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepShape.process_exception(error, method_name, class_name)
process_exception = _StepShape.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepGeom
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepRepr
import OCC.Core.StepBasic

from enum import IntEnum
from OCC.Core.Exception import *

StepShape_Equal = _StepShape.StepShape_Equal
StepShape_Large = _StepShape.StepShape_Large
StepShape_Small = _StepShape.StepShape_Small
StepShape_boDifference = _StepShape.StepShape_boDifference
StepShape_boIntersection = _StepShape.StepShape_boIntersection
StepShape_boUnion = _StepShape.StepShape_boUnion


class StepShape_AngleRelator(IntEnum):
	StepShape_Equal = 0
	StepShape_Large = 1
	StepShape_Small = 2
StepShape_Equal = StepShape_AngleRelator.StepShape_Equal
StepShape_Large = StepShape_AngleRelator.StepShape_Large
StepShape_Small = StepShape_AngleRelator.StepShape_Small

class StepShape_BooleanOperator(IntEnum):
	StepShape_boDifference = 0
	StepShape_boIntersection = 1
	StepShape_boUnion = 2
StepShape_boDifference = StepShape_BooleanOperator.StepShape_boDifference
StepShape_boIntersection = StepShape_BooleanOperator.StepShape_boIntersection
StepShape_boUnion = StepShape_BooleanOperator.StepShape_boUnion


def Handle_StepShape_Block_Create() -> "opencascade::handle< StepShape_Block >":
    return _StepShape.Handle_StepShape_Block_Create()
Handle_StepShape_Block_Create = _StepShape.Handle_StepShape_Block_Create

def Handle_StepShape_Block_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Block >":
    return _StepShape.Handle_StepShape_Block_DownCast(t)
Handle_StepShape_Block_DownCast = _StepShape.Handle_StepShape_Block_DownCast

def Handle_StepShape_Block_IsNull(t: 'opencascade::handle< StepShape_Block > const &') -> "bool":
    return _StepShape.Handle_StepShape_Block_IsNull(t)
Handle_StepShape_Block_IsNull = _StepShape.Handle_StepShape_Block_IsNull

def Handle_StepShape_BooleanResult_Create() -> "opencascade::handle< StepShape_BooleanResult >":
    return _StepShape.Handle_StepShape_BooleanResult_Create()
Handle_StepShape_BooleanResult_Create = _StepShape.Handle_StepShape_BooleanResult_Create

def Handle_StepShape_BooleanResult_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_BooleanResult >":
    return _StepShape.Handle_StepShape_BooleanResult_DownCast(t)
Handle_StepShape_BooleanResult_DownCast = _StepShape.Handle_StepShape_BooleanResult_DownCast

def Handle_StepShape_BooleanResult_IsNull(t: 'opencascade::handle< StepShape_BooleanResult > const &') -> "bool":
    return _StepShape.Handle_StepShape_BooleanResult_IsNull(t)
Handle_StepShape_BooleanResult_IsNull = _StepShape.Handle_StepShape_BooleanResult_IsNull

def Handle_StepShape_BoxDomain_Create() -> "opencascade::handle< StepShape_BoxDomain >":
    return _StepShape.Handle_StepShape_BoxDomain_Create()
Handle_StepShape_BoxDomain_Create = _StepShape.Handle_StepShape_BoxDomain_Create

def Handle_StepShape_BoxDomain_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_BoxDomain >":
    return _StepShape.Handle_StepShape_BoxDomain_DownCast(t)
Handle_StepShape_BoxDomain_DownCast = _StepShape.Handle_StepShape_BoxDomain_DownCast

def Handle_StepShape_BoxDomain_IsNull(t: 'opencascade::handle< StepShape_BoxDomain > const &') -> "bool":
    return _StepShape.Handle_StepShape_BoxDomain_IsNull(t)
Handle_StepShape_BoxDomain_IsNull = _StepShape.Handle_StepShape_BoxDomain_IsNull

def Handle_StepShape_ConnectedFaceShapeRepresentation_Create() -> "opencascade::handle< StepShape_ConnectedFaceShapeRepresentation >":
    return _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_Create()
Handle_StepShape_ConnectedFaceShapeRepresentation_Create = _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_Create

def Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ConnectedFaceShapeRepresentation >":
    return _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast(t)
Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast = _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast

def Handle_StepShape_ConnectedFaceShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_ConnectedFaceShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_IsNull(t)
Handle_StepShape_ConnectedFaceShapeRepresentation_IsNull = _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_IsNull

def Handle_StepShape_ContextDependentShapeRepresentation_Create() -> "opencascade::handle< StepShape_ContextDependentShapeRepresentation >":
    return _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_Create()
Handle_StepShape_ContextDependentShapeRepresentation_Create = _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_Create

def Handle_StepShape_ContextDependentShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ContextDependentShapeRepresentation >":
    return _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_DownCast(t)
Handle_StepShape_ContextDependentShapeRepresentation_DownCast = _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_DownCast

def Handle_StepShape_ContextDependentShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_ContextDependentShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_IsNull(t)
Handle_StepShape_ContextDependentShapeRepresentation_IsNull = _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_IsNull

def Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_Create() -> "opencascade::handle< StepShape_DefinitionalRepresentationAndShapeRepresentation >":
    return _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_Create()
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_Create = _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_Create

def Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_DefinitionalRepresentationAndShapeRepresentation >":
    return _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast(t)
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast = _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast

def Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_DefinitionalRepresentationAndShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_IsNull(t)
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_IsNull = _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_IsNull

def Handle_StepShape_DimensionalCharacteristicRepresentation_Create() -> "opencascade::handle< StepShape_DimensionalCharacteristicRepresentation >":
    return _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_Create()
Handle_StepShape_DimensionalCharacteristicRepresentation_Create = _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_Create

def Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_DimensionalCharacteristicRepresentation >":
    return _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast(t)
Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast = _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast

def Handle_StepShape_DimensionalCharacteristicRepresentation_IsNull(t: 'opencascade::handle< StepShape_DimensionalCharacteristicRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_IsNull(t)
Handle_StepShape_DimensionalCharacteristicRepresentation_IsNull = _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_IsNull

def Handle_StepShape_DimensionalLocation_Create() -> "opencascade::handle< StepShape_DimensionalLocation >":
    return _StepShape.Handle_StepShape_DimensionalLocation_Create()
Handle_StepShape_DimensionalLocation_Create = _StepShape.Handle_StepShape_DimensionalLocation_Create

def Handle_StepShape_DimensionalLocation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_DimensionalLocation >":
    return _StepShape.Handle_StepShape_DimensionalLocation_DownCast(t)
Handle_StepShape_DimensionalLocation_DownCast = _StepShape.Handle_StepShape_DimensionalLocation_DownCast

def Handle_StepShape_DimensionalLocation_IsNull(t: 'opencascade::handle< StepShape_DimensionalLocation > const &') -> "bool":
    return _StepShape.Handle_StepShape_DimensionalLocation_IsNull(t)
Handle_StepShape_DimensionalLocation_IsNull = _StepShape.Handle_StepShape_DimensionalLocation_IsNull

def Handle_StepShape_DimensionalSize_Create() -> "opencascade::handle< StepShape_DimensionalSize >":
    return _StepShape.Handle_StepShape_DimensionalSize_Create()
Handle_StepShape_DimensionalSize_Create = _StepShape.Handle_StepShape_DimensionalSize_Create

def Handle_StepShape_DimensionalSize_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_DimensionalSize >":
    return _StepShape.Handle_StepShape_DimensionalSize_DownCast(t)
Handle_StepShape_DimensionalSize_DownCast = _StepShape.Handle_StepShape_DimensionalSize_DownCast

def Handle_StepShape_DimensionalSize_IsNull(t: 'opencascade::handle< StepShape_DimensionalSize > const &') -> "bool":
    return _StepShape.Handle_StepShape_DimensionalSize_IsNull(t)
Handle_StepShape_DimensionalSize_IsNull = _StepShape.Handle_StepShape_DimensionalSize_IsNull

def Handle_StepShape_EdgeBasedWireframeModel_Create() -> "opencascade::handle< StepShape_EdgeBasedWireframeModel >":
    return _StepShape.Handle_StepShape_EdgeBasedWireframeModel_Create()
Handle_StepShape_EdgeBasedWireframeModel_Create = _StepShape.Handle_StepShape_EdgeBasedWireframeModel_Create

def Handle_StepShape_EdgeBasedWireframeModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_EdgeBasedWireframeModel >":
    return _StepShape.Handle_StepShape_EdgeBasedWireframeModel_DownCast(t)
Handle_StepShape_EdgeBasedWireframeModel_DownCast = _StepShape.Handle_StepShape_EdgeBasedWireframeModel_DownCast

def Handle_StepShape_EdgeBasedWireframeModel_IsNull(t: 'opencascade::handle< StepShape_EdgeBasedWireframeModel > const &') -> "bool":
    return _StepShape.Handle_StepShape_EdgeBasedWireframeModel_IsNull(t)
Handle_StepShape_EdgeBasedWireframeModel_IsNull = _StepShape.Handle_StepShape_EdgeBasedWireframeModel_IsNull

def Handle_StepShape_FaceBasedSurfaceModel_Create() -> "opencascade::handle< StepShape_FaceBasedSurfaceModel >":
    return _StepShape.Handle_StepShape_FaceBasedSurfaceModel_Create()
Handle_StepShape_FaceBasedSurfaceModel_Create = _StepShape.Handle_StepShape_FaceBasedSurfaceModel_Create

def Handle_StepShape_FaceBasedSurfaceModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_FaceBasedSurfaceModel >":
    return _StepShape.Handle_StepShape_FaceBasedSurfaceModel_DownCast(t)
Handle_StepShape_FaceBasedSurfaceModel_DownCast = _StepShape.Handle_StepShape_FaceBasedSurfaceModel_DownCast

def Handle_StepShape_FaceBasedSurfaceModel_IsNull(t: 'opencascade::handle< StepShape_FaceBasedSurfaceModel > const &') -> "bool":
    return _StepShape.Handle_StepShape_FaceBasedSurfaceModel_IsNull(t)
Handle_StepShape_FaceBasedSurfaceModel_IsNull = _StepShape.Handle_StepShape_FaceBasedSurfaceModel_IsNull

def Handle_StepShape_GeometricSet_Create() -> "opencascade::handle< StepShape_GeometricSet >":
    return _StepShape.Handle_StepShape_GeometricSet_Create()
Handle_StepShape_GeometricSet_Create = _StepShape.Handle_StepShape_GeometricSet_Create

def Handle_StepShape_GeometricSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_GeometricSet >":
    return _StepShape.Handle_StepShape_GeometricSet_DownCast(t)
Handle_StepShape_GeometricSet_DownCast = _StepShape.Handle_StepShape_GeometricSet_DownCast

def Handle_StepShape_GeometricSet_IsNull(t: 'opencascade::handle< StepShape_GeometricSet > const &') -> "bool":
    return _StepShape.Handle_StepShape_GeometricSet_IsNull(t)
Handle_StepShape_GeometricSet_IsNull = _StepShape.Handle_StepShape_GeometricSet_IsNull

def Handle_StepShape_HalfSpaceSolid_Create() -> "opencascade::handle< StepShape_HalfSpaceSolid >":
    return _StepShape.Handle_StepShape_HalfSpaceSolid_Create()
Handle_StepShape_HalfSpaceSolid_Create = _StepShape.Handle_StepShape_HalfSpaceSolid_Create

def Handle_StepShape_HalfSpaceSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HalfSpaceSolid >":
    return _StepShape.Handle_StepShape_HalfSpaceSolid_DownCast(t)
Handle_StepShape_HalfSpaceSolid_DownCast = _StepShape.Handle_StepShape_HalfSpaceSolid_DownCast

def Handle_StepShape_HalfSpaceSolid_IsNull(t: 'opencascade::handle< StepShape_HalfSpaceSolid > const &') -> "bool":
    return _StepShape.Handle_StepShape_HalfSpaceSolid_IsNull(t)
Handle_StepShape_HalfSpaceSolid_IsNull = _StepShape.Handle_StepShape_HalfSpaceSolid_IsNull

def Handle_StepShape_LimitsAndFits_Create() -> "opencascade::handle< StepShape_LimitsAndFits >":
    return _StepShape.Handle_StepShape_LimitsAndFits_Create()
Handle_StepShape_LimitsAndFits_Create = _StepShape.Handle_StepShape_LimitsAndFits_Create

def Handle_StepShape_LimitsAndFits_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_LimitsAndFits >":
    return _StepShape.Handle_StepShape_LimitsAndFits_DownCast(t)
Handle_StepShape_LimitsAndFits_DownCast = _StepShape.Handle_StepShape_LimitsAndFits_DownCast

def Handle_StepShape_LimitsAndFits_IsNull(t: 'opencascade::handle< StepShape_LimitsAndFits > const &') -> "bool":
    return _StepShape.Handle_StepShape_LimitsAndFits_IsNull(t)
Handle_StepShape_LimitsAndFits_IsNull = _StepShape.Handle_StepShape_LimitsAndFits_IsNull

def Handle_StepShape_MeasureQualification_Create() -> "opencascade::handle< StepShape_MeasureQualification >":
    return _StepShape.Handle_StepShape_MeasureQualification_Create()
Handle_StepShape_MeasureQualification_Create = _StepShape.Handle_StepShape_MeasureQualification_Create

def Handle_StepShape_MeasureQualification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_MeasureQualification >":
    return _StepShape.Handle_StepShape_MeasureQualification_DownCast(t)
Handle_StepShape_MeasureQualification_DownCast = _StepShape.Handle_StepShape_MeasureQualification_DownCast

def Handle_StepShape_MeasureQualification_IsNull(t: 'opencascade::handle< StepShape_MeasureQualification > const &') -> "bool":
    return _StepShape.Handle_StepShape_MeasureQualification_IsNull(t)
Handle_StepShape_MeasureQualification_IsNull = _StepShape.Handle_StepShape_MeasureQualification_IsNull

def Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Create() -> "opencascade::handle< StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem >":
    return _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Create()
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Create = _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Create

def Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem >":
    return _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast(t)
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast = _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast

def Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_IsNull(t: 'opencascade::handle< StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem > const &') -> "bool":
    return _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_IsNull(t)
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_IsNull = _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_IsNull

def Handle_StepShape_PlusMinusTolerance_Create() -> "opencascade::handle< StepShape_PlusMinusTolerance >":
    return _StepShape.Handle_StepShape_PlusMinusTolerance_Create()
Handle_StepShape_PlusMinusTolerance_Create = _StepShape.Handle_StepShape_PlusMinusTolerance_Create

def Handle_StepShape_PlusMinusTolerance_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_PlusMinusTolerance >":
    return _StepShape.Handle_StepShape_PlusMinusTolerance_DownCast(t)
Handle_StepShape_PlusMinusTolerance_DownCast = _StepShape.Handle_StepShape_PlusMinusTolerance_DownCast

def Handle_StepShape_PlusMinusTolerance_IsNull(t: 'opencascade::handle< StepShape_PlusMinusTolerance > const &') -> "bool":
    return _StepShape.Handle_StepShape_PlusMinusTolerance_IsNull(t)
Handle_StepShape_PlusMinusTolerance_IsNull = _StepShape.Handle_StepShape_PlusMinusTolerance_IsNull

def Handle_StepShape_PrecisionQualifier_Create() -> "opencascade::handle< StepShape_PrecisionQualifier >":
    return _StepShape.Handle_StepShape_PrecisionQualifier_Create()
Handle_StepShape_PrecisionQualifier_Create = _StepShape.Handle_StepShape_PrecisionQualifier_Create

def Handle_StepShape_PrecisionQualifier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_PrecisionQualifier >":
    return _StepShape.Handle_StepShape_PrecisionQualifier_DownCast(t)
Handle_StepShape_PrecisionQualifier_DownCast = _StepShape.Handle_StepShape_PrecisionQualifier_DownCast

def Handle_StepShape_PrecisionQualifier_IsNull(t: 'opencascade::handle< StepShape_PrecisionQualifier > const &') -> "bool":
    return _StepShape.Handle_StepShape_PrecisionQualifier_IsNull(t)
Handle_StepShape_PrecisionQualifier_IsNull = _StepShape.Handle_StepShape_PrecisionQualifier_IsNull

def Handle_StepShape_QualifiedRepresentationItem_Create() -> "opencascade::handle< StepShape_QualifiedRepresentationItem >":
    return _StepShape.Handle_StepShape_QualifiedRepresentationItem_Create()
Handle_StepShape_QualifiedRepresentationItem_Create = _StepShape.Handle_StepShape_QualifiedRepresentationItem_Create

def Handle_StepShape_QualifiedRepresentationItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_QualifiedRepresentationItem >":
    return _StepShape.Handle_StepShape_QualifiedRepresentationItem_DownCast(t)
Handle_StepShape_QualifiedRepresentationItem_DownCast = _StepShape.Handle_StepShape_QualifiedRepresentationItem_DownCast

def Handle_StepShape_QualifiedRepresentationItem_IsNull(t: 'opencascade::handle< StepShape_QualifiedRepresentationItem > const &') -> "bool":
    return _StepShape.Handle_StepShape_QualifiedRepresentationItem_IsNull(t)
Handle_StepShape_QualifiedRepresentationItem_IsNull = _StepShape.Handle_StepShape_QualifiedRepresentationItem_IsNull

def Handle_StepShape_RightAngularWedge_Create() -> "opencascade::handle< StepShape_RightAngularWedge >":
    return _StepShape.Handle_StepShape_RightAngularWedge_Create()
Handle_StepShape_RightAngularWedge_Create = _StepShape.Handle_StepShape_RightAngularWedge_Create

def Handle_StepShape_RightAngularWedge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_RightAngularWedge >":
    return _StepShape.Handle_StepShape_RightAngularWedge_DownCast(t)
Handle_StepShape_RightAngularWedge_DownCast = _StepShape.Handle_StepShape_RightAngularWedge_DownCast

def Handle_StepShape_RightAngularWedge_IsNull(t: 'opencascade::handle< StepShape_RightAngularWedge > const &') -> "bool":
    return _StepShape.Handle_StepShape_RightAngularWedge_IsNull(t)
Handle_StepShape_RightAngularWedge_IsNull = _StepShape.Handle_StepShape_RightAngularWedge_IsNull

def Handle_StepShape_RightCircularCone_Create() -> "opencascade::handle< StepShape_RightCircularCone >":
    return _StepShape.Handle_StepShape_RightCircularCone_Create()
Handle_StepShape_RightCircularCone_Create = _StepShape.Handle_StepShape_RightCircularCone_Create

def Handle_StepShape_RightCircularCone_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_RightCircularCone >":
    return _StepShape.Handle_StepShape_RightCircularCone_DownCast(t)
Handle_StepShape_RightCircularCone_DownCast = _StepShape.Handle_StepShape_RightCircularCone_DownCast

def Handle_StepShape_RightCircularCone_IsNull(t: 'opencascade::handle< StepShape_RightCircularCone > const &') -> "bool":
    return _StepShape.Handle_StepShape_RightCircularCone_IsNull(t)
Handle_StepShape_RightCircularCone_IsNull = _StepShape.Handle_StepShape_RightCircularCone_IsNull

def Handle_StepShape_RightCircularCylinder_Create() -> "opencascade::handle< StepShape_RightCircularCylinder >":
    return _StepShape.Handle_StepShape_RightCircularCylinder_Create()
Handle_StepShape_RightCircularCylinder_Create = _StepShape.Handle_StepShape_RightCircularCylinder_Create

def Handle_StepShape_RightCircularCylinder_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_RightCircularCylinder >":
    return _StepShape.Handle_StepShape_RightCircularCylinder_DownCast(t)
Handle_StepShape_RightCircularCylinder_DownCast = _StepShape.Handle_StepShape_RightCircularCylinder_DownCast

def Handle_StepShape_RightCircularCylinder_IsNull(t: 'opencascade::handle< StepShape_RightCircularCylinder > const &') -> "bool":
    return _StepShape.Handle_StepShape_RightCircularCylinder_IsNull(t)
Handle_StepShape_RightCircularCylinder_IsNull = _StepShape.Handle_StepShape_RightCircularCylinder_IsNull

def Handle_StepShape_ShapeDefinitionRepresentation_Create() -> "opencascade::handle< StepShape_ShapeDefinitionRepresentation >":
    return _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_Create()
Handle_StepShape_ShapeDefinitionRepresentation_Create = _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_Create

def Handle_StepShape_ShapeDefinitionRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ShapeDefinitionRepresentation >":
    return _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_DownCast(t)
Handle_StepShape_ShapeDefinitionRepresentation_DownCast = _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_DownCast

def Handle_StepShape_ShapeDefinitionRepresentation_IsNull(t: 'opencascade::handle< StepShape_ShapeDefinitionRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_IsNull(t)
Handle_StepShape_ShapeDefinitionRepresentation_IsNull = _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_IsNull

def Handle_StepShape_ShapeRepresentation_Create() -> "opencascade::handle< StepShape_ShapeRepresentation >":
    return _StepShape.Handle_StepShape_ShapeRepresentation_Create()
Handle_StepShape_ShapeRepresentation_Create = _StepShape.Handle_StepShape_ShapeRepresentation_Create

def Handle_StepShape_ShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ShapeRepresentation >":
    return _StepShape.Handle_StepShape_ShapeRepresentation_DownCast(t)
Handle_StepShape_ShapeRepresentation_DownCast = _StepShape.Handle_StepShape_ShapeRepresentation_DownCast

def Handle_StepShape_ShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_ShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_ShapeRepresentation_IsNull(t)
Handle_StepShape_ShapeRepresentation_IsNull = _StepShape.Handle_StepShape_ShapeRepresentation_IsNull

def Handle_StepShape_ShellBasedSurfaceModel_Create() -> "opencascade::handle< StepShape_ShellBasedSurfaceModel >":
    return _StepShape.Handle_StepShape_ShellBasedSurfaceModel_Create()
Handle_StepShape_ShellBasedSurfaceModel_Create = _StepShape.Handle_StepShape_ShellBasedSurfaceModel_Create

def Handle_StepShape_ShellBasedSurfaceModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ShellBasedSurfaceModel >":
    return _StepShape.Handle_StepShape_ShellBasedSurfaceModel_DownCast(t)
Handle_StepShape_ShellBasedSurfaceModel_DownCast = _StepShape.Handle_StepShape_ShellBasedSurfaceModel_DownCast

def Handle_StepShape_ShellBasedSurfaceModel_IsNull(t: 'opencascade::handle< StepShape_ShellBasedSurfaceModel > const &') -> "bool":
    return _StepShape.Handle_StepShape_ShellBasedSurfaceModel_IsNull(t)
Handle_StepShape_ShellBasedSurfaceModel_IsNull = _StepShape.Handle_StepShape_ShellBasedSurfaceModel_IsNull

def Handle_StepShape_SolidModel_Create() -> "opencascade::handle< StepShape_SolidModel >":
    return _StepShape.Handle_StepShape_SolidModel_Create()
Handle_StepShape_SolidModel_Create = _StepShape.Handle_StepShape_SolidModel_Create

def Handle_StepShape_SolidModel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_SolidModel >":
    return _StepShape.Handle_StepShape_SolidModel_DownCast(t)
Handle_StepShape_SolidModel_DownCast = _StepShape.Handle_StepShape_SolidModel_DownCast

def Handle_StepShape_SolidModel_IsNull(t: 'opencascade::handle< StepShape_SolidModel > const &') -> "bool":
    return _StepShape.Handle_StepShape_SolidModel_IsNull(t)
Handle_StepShape_SolidModel_IsNull = _StepShape.Handle_StepShape_SolidModel_IsNull

def Handle_StepShape_Sphere_Create() -> "opencascade::handle< StepShape_Sphere >":
    return _StepShape.Handle_StepShape_Sphere_Create()
Handle_StepShape_Sphere_Create = _StepShape.Handle_StepShape_Sphere_Create

def Handle_StepShape_Sphere_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Sphere >":
    return _StepShape.Handle_StepShape_Sphere_DownCast(t)
Handle_StepShape_Sphere_DownCast = _StepShape.Handle_StepShape_Sphere_DownCast

def Handle_StepShape_Sphere_IsNull(t: 'opencascade::handle< StepShape_Sphere > const &') -> "bool":
    return _StepShape.Handle_StepShape_Sphere_IsNull(t)
Handle_StepShape_Sphere_IsNull = _StepShape.Handle_StepShape_Sphere_IsNull

def Handle_StepShape_ToleranceValue_Create() -> "opencascade::handle< StepShape_ToleranceValue >":
    return _StepShape.Handle_StepShape_ToleranceValue_Create()
Handle_StepShape_ToleranceValue_Create = _StepShape.Handle_StepShape_ToleranceValue_Create

def Handle_StepShape_ToleranceValue_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ToleranceValue >":
    return _StepShape.Handle_StepShape_ToleranceValue_DownCast(t)
Handle_StepShape_ToleranceValue_DownCast = _StepShape.Handle_StepShape_ToleranceValue_DownCast

def Handle_StepShape_ToleranceValue_IsNull(t: 'opencascade::handle< StepShape_ToleranceValue > const &') -> "bool":
    return _StepShape.Handle_StepShape_ToleranceValue_IsNull(t)
Handle_StepShape_ToleranceValue_IsNull = _StepShape.Handle_StepShape_ToleranceValue_IsNull

def Handle_StepShape_TopologicalRepresentationItem_Create() -> "opencascade::handle< StepShape_TopologicalRepresentationItem >":
    return _StepShape.Handle_StepShape_TopologicalRepresentationItem_Create()
Handle_StepShape_TopologicalRepresentationItem_Create = _StepShape.Handle_StepShape_TopologicalRepresentationItem_Create

def Handle_StepShape_TopologicalRepresentationItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_TopologicalRepresentationItem >":
    return _StepShape.Handle_StepShape_TopologicalRepresentationItem_DownCast(t)
Handle_StepShape_TopologicalRepresentationItem_DownCast = _StepShape.Handle_StepShape_TopologicalRepresentationItem_DownCast

def Handle_StepShape_TopologicalRepresentationItem_IsNull(t: 'opencascade::handle< StepShape_TopologicalRepresentationItem > const &') -> "bool":
    return _StepShape.Handle_StepShape_TopologicalRepresentationItem_IsNull(t)
Handle_StepShape_TopologicalRepresentationItem_IsNull = _StepShape.Handle_StepShape_TopologicalRepresentationItem_IsNull

def Handle_StepShape_Torus_Create() -> "opencascade::handle< StepShape_Torus >":
    return _StepShape.Handle_StepShape_Torus_Create()
Handle_StepShape_Torus_Create = _StepShape.Handle_StepShape_Torus_Create

def Handle_StepShape_Torus_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Torus >":
    return _StepShape.Handle_StepShape_Torus_DownCast(t)
Handle_StepShape_Torus_DownCast = _StepShape.Handle_StepShape_Torus_DownCast

def Handle_StepShape_Torus_IsNull(t: 'opencascade::handle< StepShape_Torus > const &') -> "bool":
    return _StepShape.Handle_StepShape_Torus_IsNull(t)
Handle_StepShape_Torus_IsNull = _StepShape.Handle_StepShape_Torus_IsNull

def Handle_StepShape_TypeQualifier_Create() -> "opencascade::handle< StepShape_TypeQualifier >":
    return _StepShape.Handle_StepShape_TypeQualifier_Create()
Handle_StepShape_TypeQualifier_Create = _StepShape.Handle_StepShape_TypeQualifier_Create

def Handle_StepShape_TypeQualifier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_TypeQualifier >":
    return _StepShape.Handle_StepShape_TypeQualifier_DownCast(t)
Handle_StepShape_TypeQualifier_DownCast = _StepShape.Handle_StepShape_TypeQualifier_DownCast

def Handle_StepShape_TypeQualifier_IsNull(t: 'opencascade::handle< StepShape_TypeQualifier > const &') -> "bool":
    return _StepShape.Handle_StepShape_TypeQualifier_IsNull(t)
Handle_StepShape_TypeQualifier_IsNull = _StepShape.Handle_StepShape_TypeQualifier_IsNull

def Handle_StepShape_ValueFormatTypeQualifier_Create() -> "opencascade::handle< StepShape_ValueFormatTypeQualifier >":
    return _StepShape.Handle_StepShape_ValueFormatTypeQualifier_Create()
Handle_StepShape_ValueFormatTypeQualifier_Create = _StepShape.Handle_StepShape_ValueFormatTypeQualifier_Create

def Handle_StepShape_ValueFormatTypeQualifier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ValueFormatTypeQualifier >":
    return _StepShape.Handle_StepShape_ValueFormatTypeQualifier_DownCast(t)
Handle_StepShape_ValueFormatTypeQualifier_DownCast = _StepShape.Handle_StepShape_ValueFormatTypeQualifier_DownCast

def Handle_StepShape_ValueFormatTypeQualifier_IsNull(t: 'opencascade::handle< StepShape_ValueFormatTypeQualifier > const &') -> "bool":
    return _StepShape.Handle_StepShape_ValueFormatTypeQualifier_IsNull(t)
Handle_StepShape_ValueFormatTypeQualifier_IsNull = _StepShape.Handle_StepShape_ValueFormatTypeQualifier_IsNull

def Handle_StepShape_AdvancedBrepShapeRepresentation_Create() -> "opencascade::handle< StepShape_AdvancedBrepShapeRepresentation >":
    return _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_Create()
Handle_StepShape_AdvancedBrepShapeRepresentation_Create = _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_Create

def Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_AdvancedBrepShapeRepresentation >":
    return _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast(t)
Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast = _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast

def Handle_StepShape_AdvancedBrepShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_AdvancedBrepShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_IsNull(t)
Handle_StepShape_AdvancedBrepShapeRepresentation_IsNull = _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_IsNull

def Handle_StepShape_AngularLocation_Create() -> "opencascade::handle< StepShape_AngularLocation >":
    return _StepShape.Handle_StepShape_AngularLocation_Create()
Handle_StepShape_AngularLocation_Create = _StepShape.Handle_StepShape_AngularLocation_Create

def Handle_StepShape_AngularLocation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_AngularLocation >":
    return _StepShape.Handle_StepShape_AngularLocation_DownCast(t)
Handle_StepShape_AngularLocation_DownCast = _StepShape.Handle_StepShape_AngularLocation_DownCast

def Handle_StepShape_AngularLocation_IsNull(t: 'opencascade::handle< StepShape_AngularLocation > const &') -> "bool":
    return _StepShape.Handle_StepShape_AngularLocation_IsNull(t)
Handle_StepShape_AngularLocation_IsNull = _StepShape.Handle_StepShape_AngularLocation_IsNull

def Handle_StepShape_AngularSize_Create() -> "opencascade::handle< StepShape_AngularSize >":
    return _StepShape.Handle_StepShape_AngularSize_Create()
Handle_StepShape_AngularSize_Create = _StepShape.Handle_StepShape_AngularSize_Create

def Handle_StepShape_AngularSize_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_AngularSize >":
    return _StepShape.Handle_StepShape_AngularSize_DownCast(t)
Handle_StepShape_AngularSize_DownCast = _StepShape.Handle_StepShape_AngularSize_DownCast

def Handle_StepShape_AngularSize_IsNull(t: 'opencascade::handle< StepShape_AngularSize > const &') -> "bool":
    return _StepShape.Handle_StepShape_AngularSize_IsNull(t)
Handle_StepShape_AngularSize_IsNull = _StepShape.Handle_StepShape_AngularSize_IsNull

def Handle_StepShape_BoxedHalfSpace_Create() -> "opencascade::handle< StepShape_BoxedHalfSpace >":
    return _StepShape.Handle_StepShape_BoxedHalfSpace_Create()
Handle_StepShape_BoxedHalfSpace_Create = _StepShape.Handle_StepShape_BoxedHalfSpace_Create

def Handle_StepShape_BoxedHalfSpace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_BoxedHalfSpace >":
    return _StepShape.Handle_StepShape_BoxedHalfSpace_DownCast(t)
Handle_StepShape_BoxedHalfSpace_DownCast = _StepShape.Handle_StepShape_BoxedHalfSpace_DownCast

def Handle_StepShape_BoxedHalfSpace_IsNull(t: 'opencascade::handle< StepShape_BoxedHalfSpace > const &') -> "bool":
    return _StepShape.Handle_StepShape_BoxedHalfSpace_IsNull(t)
Handle_StepShape_BoxedHalfSpace_IsNull = _StepShape.Handle_StepShape_BoxedHalfSpace_IsNull

def Handle_StepShape_CompoundShapeRepresentation_Create() -> "opencascade::handle< StepShape_CompoundShapeRepresentation >":
    return _StepShape.Handle_StepShape_CompoundShapeRepresentation_Create()
Handle_StepShape_CompoundShapeRepresentation_Create = _StepShape.Handle_StepShape_CompoundShapeRepresentation_Create

def Handle_StepShape_CompoundShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_CompoundShapeRepresentation >":
    return _StepShape.Handle_StepShape_CompoundShapeRepresentation_DownCast(t)
Handle_StepShape_CompoundShapeRepresentation_DownCast = _StepShape.Handle_StepShape_CompoundShapeRepresentation_DownCast

def Handle_StepShape_CompoundShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_CompoundShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_CompoundShapeRepresentation_IsNull(t)
Handle_StepShape_CompoundShapeRepresentation_IsNull = _StepShape.Handle_StepShape_CompoundShapeRepresentation_IsNull

def Handle_StepShape_ConnectedEdgeSet_Create() -> "opencascade::handle< StepShape_ConnectedEdgeSet >":
    return _StepShape.Handle_StepShape_ConnectedEdgeSet_Create()
Handle_StepShape_ConnectedEdgeSet_Create = _StepShape.Handle_StepShape_ConnectedEdgeSet_Create

def Handle_StepShape_ConnectedEdgeSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ConnectedEdgeSet >":
    return _StepShape.Handle_StepShape_ConnectedEdgeSet_DownCast(t)
Handle_StepShape_ConnectedEdgeSet_DownCast = _StepShape.Handle_StepShape_ConnectedEdgeSet_DownCast

def Handle_StepShape_ConnectedEdgeSet_IsNull(t: 'opencascade::handle< StepShape_ConnectedEdgeSet > const &') -> "bool":
    return _StepShape.Handle_StepShape_ConnectedEdgeSet_IsNull(t)
Handle_StepShape_ConnectedEdgeSet_IsNull = _StepShape.Handle_StepShape_ConnectedEdgeSet_IsNull

def Handle_StepShape_ConnectedFaceSet_Create() -> "opencascade::handle< StepShape_ConnectedFaceSet >":
    return _StepShape.Handle_StepShape_ConnectedFaceSet_Create()
Handle_StepShape_ConnectedFaceSet_Create = _StepShape.Handle_StepShape_ConnectedFaceSet_Create

def Handle_StepShape_ConnectedFaceSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ConnectedFaceSet >":
    return _StepShape.Handle_StepShape_ConnectedFaceSet_DownCast(t)
Handle_StepShape_ConnectedFaceSet_DownCast = _StepShape.Handle_StepShape_ConnectedFaceSet_DownCast

def Handle_StepShape_ConnectedFaceSet_IsNull(t: 'opencascade::handle< StepShape_ConnectedFaceSet > const &') -> "bool":
    return _StepShape.Handle_StepShape_ConnectedFaceSet_IsNull(t)
Handle_StepShape_ConnectedFaceSet_IsNull = _StepShape.Handle_StepShape_ConnectedFaceSet_IsNull

def Handle_StepShape_CsgShapeRepresentation_Create() -> "opencascade::handle< StepShape_CsgShapeRepresentation >":
    return _StepShape.Handle_StepShape_CsgShapeRepresentation_Create()
Handle_StepShape_CsgShapeRepresentation_Create = _StepShape.Handle_StepShape_CsgShapeRepresentation_Create

def Handle_StepShape_CsgShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_CsgShapeRepresentation >":
    return _StepShape.Handle_StepShape_CsgShapeRepresentation_DownCast(t)
Handle_StepShape_CsgShapeRepresentation_DownCast = _StepShape.Handle_StepShape_CsgShapeRepresentation_DownCast

def Handle_StepShape_CsgShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_CsgShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_CsgShapeRepresentation_IsNull(t)
Handle_StepShape_CsgShapeRepresentation_IsNull = _StepShape.Handle_StepShape_CsgShapeRepresentation_IsNull

def Handle_StepShape_CsgSolid_Create() -> "opencascade::handle< StepShape_CsgSolid >":
    return _StepShape.Handle_StepShape_CsgSolid_Create()
Handle_StepShape_CsgSolid_Create = _StepShape.Handle_StepShape_CsgSolid_Create

def Handle_StepShape_CsgSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_CsgSolid >":
    return _StepShape.Handle_StepShape_CsgSolid_DownCast(t)
Handle_StepShape_CsgSolid_DownCast = _StepShape.Handle_StepShape_CsgSolid_DownCast

def Handle_StepShape_CsgSolid_IsNull(t: 'opencascade::handle< StepShape_CsgSolid > const &') -> "bool":
    return _StepShape.Handle_StepShape_CsgSolid_IsNull(t)
Handle_StepShape_CsgSolid_IsNull = _StepShape.Handle_StepShape_CsgSolid_IsNull

def Handle_StepShape_DimensionalLocationWithPath_Create() -> "opencascade::handle< StepShape_DimensionalLocationWithPath >":
    return _StepShape.Handle_StepShape_DimensionalLocationWithPath_Create()
Handle_StepShape_DimensionalLocationWithPath_Create = _StepShape.Handle_StepShape_DimensionalLocationWithPath_Create

def Handle_StepShape_DimensionalLocationWithPath_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_DimensionalLocationWithPath >":
    return _StepShape.Handle_StepShape_DimensionalLocationWithPath_DownCast(t)
Handle_StepShape_DimensionalLocationWithPath_DownCast = _StepShape.Handle_StepShape_DimensionalLocationWithPath_DownCast

def Handle_StepShape_DimensionalLocationWithPath_IsNull(t: 'opencascade::handle< StepShape_DimensionalLocationWithPath > const &') -> "bool":
    return _StepShape.Handle_StepShape_DimensionalLocationWithPath_IsNull(t)
Handle_StepShape_DimensionalLocationWithPath_IsNull = _StepShape.Handle_StepShape_DimensionalLocationWithPath_IsNull

def Handle_StepShape_DimensionalSizeWithPath_Create() -> "opencascade::handle< StepShape_DimensionalSizeWithPath >":
    return _StepShape.Handle_StepShape_DimensionalSizeWithPath_Create()
Handle_StepShape_DimensionalSizeWithPath_Create = _StepShape.Handle_StepShape_DimensionalSizeWithPath_Create

def Handle_StepShape_DimensionalSizeWithPath_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_DimensionalSizeWithPath >":
    return _StepShape.Handle_StepShape_DimensionalSizeWithPath_DownCast(t)
Handle_StepShape_DimensionalSizeWithPath_DownCast = _StepShape.Handle_StepShape_DimensionalSizeWithPath_DownCast

def Handle_StepShape_DimensionalSizeWithPath_IsNull(t: 'opencascade::handle< StepShape_DimensionalSizeWithPath > const &') -> "bool":
    return _StepShape.Handle_StepShape_DimensionalSizeWithPath_IsNull(t)
Handle_StepShape_DimensionalSizeWithPath_IsNull = _StepShape.Handle_StepShape_DimensionalSizeWithPath_IsNull

def Handle_StepShape_DirectedDimensionalLocation_Create() -> "opencascade::handle< StepShape_DirectedDimensionalLocation >":
    return _StepShape.Handle_StepShape_DirectedDimensionalLocation_Create()
Handle_StepShape_DirectedDimensionalLocation_Create = _StepShape.Handle_StepShape_DirectedDimensionalLocation_Create

def Handle_StepShape_DirectedDimensionalLocation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_DirectedDimensionalLocation >":
    return _StepShape.Handle_StepShape_DirectedDimensionalLocation_DownCast(t)
Handle_StepShape_DirectedDimensionalLocation_DownCast = _StepShape.Handle_StepShape_DirectedDimensionalLocation_DownCast

def Handle_StepShape_DirectedDimensionalLocation_IsNull(t: 'opencascade::handle< StepShape_DirectedDimensionalLocation > const &') -> "bool":
    return _StepShape.Handle_StepShape_DirectedDimensionalLocation_IsNull(t)
Handle_StepShape_DirectedDimensionalLocation_IsNull = _StepShape.Handle_StepShape_DirectedDimensionalLocation_IsNull

def Handle_StepShape_Edge_Create() -> "opencascade::handle< StepShape_Edge >":
    return _StepShape.Handle_StepShape_Edge_Create()
Handle_StepShape_Edge_Create = _StepShape.Handle_StepShape_Edge_Create

def Handle_StepShape_Edge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Edge >":
    return _StepShape.Handle_StepShape_Edge_DownCast(t)
Handle_StepShape_Edge_DownCast = _StepShape.Handle_StepShape_Edge_DownCast

def Handle_StepShape_Edge_IsNull(t: 'opencascade::handle< StepShape_Edge > const &') -> "bool":
    return _StepShape.Handle_StepShape_Edge_IsNull(t)
Handle_StepShape_Edge_IsNull = _StepShape.Handle_StepShape_Edge_IsNull

def Handle_StepShape_EdgeBasedWireframeShapeRepresentation_Create() -> "opencascade::handle< StepShape_EdgeBasedWireframeShapeRepresentation >":
    return _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_Create()
Handle_StepShape_EdgeBasedWireframeShapeRepresentation_Create = _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_Create

def Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_EdgeBasedWireframeShapeRepresentation >":
    return _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast(t)
Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast = _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast

def Handle_StepShape_EdgeBasedWireframeShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_EdgeBasedWireframeShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_IsNull(t)
Handle_StepShape_EdgeBasedWireframeShapeRepresentation_IsNull = _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_IsNull

def Handle_StepShape_Face_Create() -> "opencascade::handle< StepShape_Face >":
    return _StepShape.Handle_StepShape_Face_Create()
Handle_StepShape_Face_Create = _StepShape.Handle_StepShape_Face_Create

def Handle_StepShape_Face_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Face >":
    return _StepShape.Handle_StepShape_Face_DownCast(t)
Handle_StepShape_Face_DownCast = _StepShape.Handle_StepShape_Face_DownCast

def Handle_StepShape_Face_IsNull(t: 'opencascade::handle< StepShape_Face > const &') -> "bool":
    return _StepShape.Handle_StepShape_Face_IsNull(t)
Handle_StepShape_Face_IsNull = _StepShape.Handle_StepShape_Face_IsNull

def Handle_StepShape_FaceBound_Create() -> "opencascade::handle< StepShape_FaceBound >":
    return _StepShape.Handle_StepShape_FaceBound_Create()
Handle_StepShape_FaceBound_Create = _StepShape.Handle_StepShape_FaceBound_Create

def Handle_StepShape_FaceBound_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_FaceBound >":
    return _StepShape.Handle_StepShape_FaceBound_DownCast(t)
Handle_StepShape_FaceBound_DownCast = _StepShape.Handle_StepShape_FaceBound_DownCast

def Handle_StepShape_FaceBound_IsNull(t: 'opencascade::handle< StepShape_FaceBound > const &') -> "bool":
    return _StepShape.Handle_StepShape_FaceBound_IsNull(t)
Handle_StepShape_FaceBound_IsNull = _StepShape.Handle_StepShape_FaceBound_IsNull

def Handle_StepShape_FacetedBrepShapeRepresentation_Create() -> "opencascade::handle< StepShape_FacetedBrepShapeRepresentation >":
    return _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_Create()
Handle_StepShape_FacetedBrepShapeRepresentation_Create = _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_Create

def Handle_StepShape_FacetedBrepShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_FacetedBrepShapeRepresentation >":
    return _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_DownCast(t)
Handle_StepShape_FacetedBrepShapeRepresentation_DownCast = _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_DownCast

def Handle_StepShape_FacetedBrepShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_FacetedBrepShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_IsNull(t)
Handle_StepShape_FacetedBrepShapeRepresentation_IsNull = _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_IsNull

def Handle_StepShape_GeometricCurveSet_Create() -> "opencascade::handle< StepShape_GeometricCurveSet >":
    return _StepShape.Handle_StepShape_GeometricCurveSet_Create()
Handle_StepShape_GeometricCurveSet_Create = _StepShape.Handle_StepShape_GeometricCurveSet_Create

def Handle_StepShape_GeometricCurveSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_GeometricCurveSet >":
    return _StepShape.Handle_StepShape_GeometricCurveSet_DownCast(t)
Handle_StepShape_GeometricCurveSet_DownCast = _StepShape.Handle_StepShape_GeometricCurveSet_DownCast

def Handle_StepShape_GeometricCurveSet_IsNull(t: 'opencascade::handle< StepShape_GeometricCurveSet > const &') -> "bool":
    return _StepShape.Handle_StepShape_GeometricCurveSet_IsNull(t)
Handle_StepShape_GeometricCurveSet_IsNull = _StepShape.Handle_StepShape_GeometricCurveSet_IsNull

def Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_Create() -> "opencascade::handle< StepShape_GeometricallyBoundedSurfaceShapeRepresentation >":
    return _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_Create()
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_Create = _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_Create

def Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_GeometricallyBoundedSurfaceShapeRepresentation >":
    return _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast(t)
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast = _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast

def Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_GeometricallyBoundedSurfaceShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_IsNull(t)
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_IsNull = _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_IsNull

def Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_Create() -> "opencascade::handle< StepShape_GeometricallyBoundedWireframeShapeRepresentation >":
    return _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_Create()
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_Create = _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_Create

def Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_GeometricallyBoundedWireframeShapeRepresentation >":
    return _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast(t)
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast = _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast

def Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_GeometricallyBoundedWireframeShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_IsNull(t)
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_IsNull = _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_IsNull

def Handle_StepShape_Loop_Create() -> "opencascade::handle< StepShape_Loop >":
    return _StepShape.Handle_StepShape_Loop_Create()
Handle_StepShape_Loop_Create = _StepShape.Handle_StepShape_Loop_Create

def Handle_StepShape_Loop_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Loop >":
    return _StepShape.Handle_StepShape_Loop_DownCast(t)
Handle_StepShape_Loop_DownCast = _StepShape.Handle_StepShape_Loop_DownCast

def Handle_StepShape_Loop_IsNull(t: 'opencascade::handle< StepShape_Loop > const &') -> "bool":
    return _StepShape.Handle_StepShape_Loop_IsNull(t)
Handle_StepShape_Loop_IsNull = _StepShape.Handle_StepShape_Loop_IsNull

def Handle_StepShape_LoopAndPath_Create() -> "opencascade::handle< StepShape_LoopAndPath >":
    return _StepShape.Handle_StepShape_LoopAndPath_Create()
Handle_StepShape_LoopAndPath_Create = _StepShape.Handle_StepShape_LoopAndPath_Create

def Handle_StepShape_LoopAndPath_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_LoopAndPath >":
    return _StepShape.Handle_StepShape_LoopAndPath_DownCast(t)
Handle_StepShape_LoopAndPath_DownCast = _StepShape.Handle_StepShape_LoopAndPath_DownCast

def Handle_StepShape_LoopAndPath_IsNull(t: 'opencascade::handle< StepShape_LoopAndPath > const &') -> "bool":
    return _StepShape.Handle_StepShape_LoopAndPath_IsNull(t)
Handle_StepShape_LoopAndPath_IsNull = _StepShape.Handle_StepShape_LoopAndPath_IsNull

def Handle_StepShape_ManifoldSolidBrep_Create() -> "opencascade::handle< StepShape_ManifoldSolidBrep >":
    return _StepShape.Handle_StepShape_ManifoldSolidBrep_Create()
Handle_StepShape_ManifoldSolidBrep_Create = _StepShape.Handle_StepShape_ManifoldSolidBrep_Create

def Handle_StepShape_ManifoldSolidBrep_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ManifoldSolidBrep >":
    return _StepShape.Handle_StepShape_ManifoldSolidBrep_DownCast(t)
Handle_StepShape_ManifoldSolidBrep_DownCast = _StepShape.Handle_StepShape_ManifoldSolidBrep_DownCast

def Handle_StepShape_ManifoldSolidBrep_IsNull(t: 'opencascade::handle< StepShape_ManifoldSolidBrep > const &') -> "bool":
    return _StepShape.Handle_StepShape_ManifoldSolidBrep_IsNull(t)
Handle_StepShape_ManifoldSolidBrep_IsNull = _StepShape.Handle_StepShape_ManifoldSolidBrep_IsNull

def Handle_StepShape_ManifoldSurfaceShapeRepresentation_Create() -> "opencascade::handle< StepShape_ManifoldSurfaceShapeRepresentation >":
    return _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_Create()
Handle_StepShape_ManifoldSurfaceShapeRepresentation_Create = _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_Create

def Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ManifoldSurfaceShapeRepresentation >":
    return _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast(t)
Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast = _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast

def Handle_StepShape_ManifoldSurfaceShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_ManifoldSurfaceShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_IsNull(t)
Handle_StepShape_ManifoldSurfaceShapeRepresentation_IsNull = _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_IsNull

def Handle_StepShape_NonManifoldSurfaceShapeRepresentation_Create() -> "opencascade::handle< StepShape_NonManifoldSurfaceShapeRepresentation >":
    return _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_Create()
Handle_StepShape_NonManifoldSurfaceShapeRepresentation_Create = _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_Create

def Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_NonManifoldSurfaceShapeRepresentation >":
    return _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast(t)
Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast = _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast

def Handle_StepShape_NonManifoldSurfaceShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_NonManifoldSurfaceShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_IsNull(t)
Handle_StepShape_NonManifoldSurfaceShapeRepresentation_IsNull = _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_IsNull

def Handle_StepShape_Path_Create() -> "opencascade::handle< StepShape_Path >":
    return _StepShape.Handle_StepShape_Path_Create()
Handle_StepShape_Path_Create = _StepShape.Handle_StepShape_Path_Create

def Handle_StepShape_Path_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Path >":
    return _StepShape.Handle_StepShape_Path_DownCast(t)
Handle_StepShape_Path_DownCast = _StepShape.Handle_StepShape_Path_DownCast

def Handle_StepShape_Path_IsNull(t: 'opencascade::handle< StepShape_Path > const &') -> "bool":
    return _StepShape.Handle_StepShape_Path_IsNull(t)
Handle_StepShape_Path_IsNull = _StepShape.Handle_StepShape_Path_IsNull

def Handle_StepShape_PointRepresentation_Create() -> "opencascade::handle< StepShape_PointRepresentation >":
    return _StepShape.Handle_StepShape_PointRepresentation_Create()
Handle_StepShape_PointRepresentation_Create = _StepShape.Handle_StepShape_PointRepresentation_Create

def Handle_StepShape_PointRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_PointRepresentation >":
    return _StepShape.Handle_StepShape_PointRepresentation_DownCast(t)
Handle_StepShape_PointRepresentation_DownCast = _StepShape.Handle_StepShape_PointRepresentation_DownCast

def Handle_StepShape_PointRepresentation_IsNull(t: 'opencascade::handle< StepShape_PointRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_PointRepresentation_IsNull(t)
Handle_StepShape_PointRepresentation_IsNull = _StepShape.Handle_StepShape_PointRepresentation_IsNull

def Handle_StepShape_ShapeDimensionRepresentation_Create() -> "opencascade::handle< StepShape_ShapeDimensionRepresentation >":
    return _StepShape.Handle_StepShape_ShapeDimensionRepresentation_Create()
Handle_StepShape_ShapeDimensionRepresentation_Create = _StepShape.Handle_StepShape_ShapeDimensionRepresentation_Create

def Handle_StepShape_ShapeDimensionRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ShapeDimensionRepresentation >":
    return _StepShape.Handle_StepShape_ShapeDimensionRepresentation_DownCast(t)
Handle_StepShape_ShapeDimensionRepresentation_DownCast = _StepShape.Handle_StepShape_ShapeDimensionRepresentation_DownCast

def Handle_StepShape_ShapeDimensionRepresentation_IsNull(t: 'opencascade::handle< StepShape_ShapeDimensionRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_ShapeDimensionRepresentation_IsNull(t)
Handle_StepShape_ShapeDimensionRepresentation_IsNull = _StepShape.Handle_StepShape_ShapeDimensionRepresentation_IsNull

def Handle_StepShape_ShapeRepresentationWithParameters_Create() -> "opencascade::handle< StepShape_ShapeRepresentationWithParameters >":
    return _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_Create()
Handle_StepShape_ShapeRepresentationWithParameters_Create = _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_Create

def Handle_StepShape_ShapeRepresentationWithParameters_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ShapeRepresentationWithParameters >":
    return _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_DownCast(t)
Handle_StepShape_ShapeRepresentationWithParameters_DownCast = _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_DownCast

def Handle_StepShape_ShapeRepresentationWithParameters_IsNull(t: 'opencascade::handle< StepShape_ShapeRepresentationWithParameters > const &') -> "bool":
    return _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_IsNull(t)
Handle_StepShape_ShapeRepresentationWithParameters_IsNull = _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_IsNull

def Handle_StepShape_SolidReplica_Create() -> "opencascade::handle< StepShape_SolidReplica >":
    return _StepShape.Handle_StepShape_SolidReplica_Create()
Handle_StepShape_SolidReplica_Create = _StepShape.Handle_StepShape_SolidReplica_Create

def Handle_StepShape_SolidReplica_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_SolidReplica >":
    return _StepShape.Handle_StepShape_SolidReplica_DownCast(t)
Handle_StepShape_SolidReplica_DownCast = _StepShape.Handle_StepShape_SolidReplica_DownCast

def Handle_StepShape_SolidReplica_IsNull(t: 'opencascade::handle< StepShape_SolidReplica > const &') -> "bool":
    return _StepShape.Handle_StepShape_SolidReplica_IsNull(t)
Handle_StepShape_SolidReplica_IsNull = _StepShape.Handle_StepShape_SolidReplica_IsNull

def Handle_StepShape_SweptAreaSolid_Create() -> "opencascade::handle< StepShape_SweptAreaSolid >":
    return _StepShape.Handle_StepShape_SweptAreaSolid_Create()
Handle_StepShape_SweptAreaSolid_Create = _StepShape.Handle_StepShape_SweptAreaSolid_Create

def Handle_StepShape_SweptAreaSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_SweptAreaSolid >":
    return _StepShape.Handle_StepShape_SweptAreaSolid_DownCast(t)
Handle_StepShape_SweptAreaSolid_DownCast = _StepShape.Handle_StepShape_SweptAreaSolid_DownCast

def Handle_StepShape_SweptAreaSolid_IsNull(t: 'opencascade::handle< StepShape_SweptAreaSolid > const &') -> "bool":
    return _StepShape.Handle_StepShape_SweptAreaSolid_IsNull(t)
Handle_StepShape_SweptAreaSolid_IsNull = _StepShape.Handle_StepShape_SweptAreaSolid_IsNull

def Handle_StepShape_SweptFaceSolid_Create() -> "opencascade::handle< StepShape_SweptFaceSolid >":
    return _StepShape.Handle_StepShape_SweptFaceSolid_Create()
Handle_StepShape_SweptFaceSolid_Create = _StepShape.Handle_StepShape_SweptFaceSolid_Create

def Handle_StepShape_SweptFaceSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_SweptFaceSolid >":
    return _StepShape.Handle_StepShape_SweptFaceSolid_DownCast(t)
Handle_StepShape_SweptFaceSolid_DownCast = _StepShape.Handle_StepShape_SweptFaceSolid_DownCast

def Handle_StepShape_SweptFaceSolid_IsNull(t: 'opencascade::handle< StepShape_SweptFaceSolid > const &') -> "bool":
    return _StepShape.Handle_StepShape_SweptFaceSolid_IsNull(t)
Handle_StepShape_SweptFaceSolid_IsNull = _StepShape.Handle_StepShape_SweptFaceSolid_IsNull

def Handle_StepShape_TransitionalShapeRepresentation_Create() -> "opencascade::handle< StepShape_TransitionalShapeRepresentation >":
    return _StepShape.Handle_StepShape_TransitionalShapeRepresentation_Create()
Handle_StepShape_TransitionalShapeRepresentation_Create = _StepShape.Handle_StepShape_TransitionalShapeRepresentation_Create

def Handle_StepShape_TransitionalShapeRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_TransitionalShapeRepresentation >":
    return _StepShape.Handle_StepShape_TransitionalShapeRepresentation_DownCast(t)
Handle_StepShape_TransitionalShapeRepresentation_DownCast = _StepShape.Handle_StepShape_TransitionalShapeRepresentation_DownCast

def Handle_StepShape_TransitionalShapeRepresentation_IsNull(t: 'opencascade::handle< StepShape_TransitionalShapeRepresentation > const &') -> "bool":
    return _StepShape.Handle_StepShape_TransitionalShapeRepresentation_IsNull(t)
Handle_StepShape_TransitionalShapeRepresentation_IsNull = _StepShape.Handle_StepShape_TransitionalShapeRepresentation_IsNull

def Handle_StepShape_Vertex_Create() -> "opencascade::handle< StepShape_Vertex >":
    return _StepShape.Handle_StepShape_Vertex_Create()
Handle_StepShape_Vertex_Create = _StepShape.Handle_StepShape_Vertex_Create

def Handle_StepShape_Vertex_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Vertex >":
    return _StepShape.Handle_StepShape_Vertex_DownCast(t)
Handle_StepShape_Vertex_DownCast = _StepShape.Handle_StepShape_Vertex_DownCast

def Handle_StepShape_Vertex_IsNull(t: 'opencascade::handle< StepShape_Vertex > const &') -> "bool":
    return _StepShape.Handle_StepShape_Vertex_IsNull(t)
Handle_StepShape_Vertex_IsNull = _StepShape.Handle_StepShape_Vertex_IsNull

def Handle_StepShape_BrepWithVoids_Create() -> "opencascade::handle< StepShape_BrepWithVoids >":
    return _StepShape.Handle_StepShape_BrepWithVoids_Create()
Handle_StepShape_BrepWithVoids_Create = _StepShape.Handle_StepShape_BrepWithVoids_Create

def Handle_StepShape_BrepWithVoids_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_BrepWithVoids >":
    return _StepShape.Handle_StepShape_BrepWithVoids_DownCast(t)
Handle_StepShape_BrepWithVoids_DownCast = _StepShape.Handle_StepShape_BrepWithVoids_DownCast

def Handle_StepShape_BrepWithVoids_IsNull(t: 'opencascade::handle< StepShape_BrepWithVoids > const &') -> "bool":
    return _StepShape.Handle_StepShape_BrepWithVoids_IsNull(t)
Handle_StepShape_BrepWithVoids_IsNull = _StepShape.Handle_StepShape_BrepWithVoids_IsNull

def Handle_StepShape_ClosedShell_Create() -> "opencascade::handle< StepShape_ClosedShell >":
    return _StepShape.Handle_StepShape_ClosedShell_Create()
Handle_StepShape_ClosedShell_Create = _StepShape.Handle_StepShape_ClosedShell_Create

def Handle_StepShape_ClosedShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ClosedShell >":
    return _StepShape.Handle_StepShape_ClosedShell_DownCast(t)
Handle_StepShape_ClosedShell_DownCast = _StepShape.Handle_StepShape_ClosedShell_DownCast

def Handle_StepShape_ClosedShell_IsNull(t: 'opencascade::handle< StepShape_ClosedShell > const &') -> "bool":
    return _StepShape.Handle_StepShape_ClosedShell_IsNull(t)
Handle_StepShape_ClosedShell_IsNull = _StepShape.Handle_StepShape_ClosedShell_IsNull

def Handle_StepShape_ConnectedFaceSubSet_Create() -> "opencascade::handle< StepShape_ConnectedFaceSubSet >":
    return _StepShape.Handle_StepShape_ConnectedFaceSubSet_Create()
Handle_StepShape_ConnectedFaceSubSet_Create = _StepShape.Handle_StepShape_ConnectedFaceSubSet_Create

def Handle_StepShape_ConnectedFaceSubSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ConnectedFaceSubSet >":
    return _StepShape.Handle_StepShape_ConnectedFaceSubSet_DownCast(t)
Handle_StepShape_ConnectedFaceSubSet_DownCast = _StepShape.Handle_StepShape_ConnectedFaceSubSet_DownCast

def Handle_StepShape_ConnectedFaceSubSet_IsNull(t: 'opencascade::handle< StepShape_ConnectedFaceSubSet > const &') -> "bool":
    return _StepShape.Handle_StepShape_ConnectedFaceSubSet_IsNull(t)
Handle_StepShape_ConnectedFaceSubSet_IsNull = _StepShape.Handle_StepShape_ConnectedFaceSubSet_IsNull

def Handle_StepShape_EdgeCurve_Create() -> "opencascade::handle< StepShape_EdgeCurve >":
    return _StepShape.Handle_StepShape_EdgeCurve_Create()
Handle_StepShape_EdgeCurve_Create = _StepShape.Handle_StepShape_EdgeCurve_Create

def Handle_StepShape_EdgeCurve_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_EdgeCurve >":
    return _StepShape.Handle_StepShape_EdgeCurve_DownCast(t)
Handle_StepShape_EdgeCurve_DownCast = _StepShape.Handle_StepShape_EdgeCurve_DownCast

def Handle_StepShape_EdgeCurve_IsNull(t: 'opencascade::handle< StepShape_EdgeCurve > const &') -> "bool":
    return _StepShape.Handle_StepShape_EdgeCurve_IsNull(t)
Handle_StepShape_EdgeCurve_IsNull = _StepShape.Handle_StepShape_EdgeCurve_IsNull

def Handle_StepShape_EdgeLoop_Create() -> "opencascade::handle< StepShape_EdgeLoop >":
    return _StepShape.Handle_StepShape_EdgeLoop_Create()
Handle_StepShape_EdgeLoop_Create = _StepShape.Handle_StepShape_EdgeLoop_Create

def Handle_StepShape_EdgeLoop_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_EdgeLoop >":
    return _StepShape.Handle_StepShape_EdgeLoop_DownCast(t)
Handle_StepShape_EdgeLoop_DownCast = _StepShape.Handle_StepShape_EdgeLoop_DownCast

def Handle_StepShape_EdgeLoop_IsNull(t: 'opencascade::handle< StepShape_EdgeLoop > const &') -> "bool":
    return _StepShape.Handle_StepShape_EdgeLoop_IsNull(t)
Handle_StepShape_EdgeLoop_IsNull = _StepShape.Handle_StepShape_EdgeLoop_IsNull

def Handle_StepShape_ExtrudedAreaSolid_Create() -> "opencascade::handle< StepShape_ExtrudedAreaSolid >":
    return _StepShape.Handle_StepShape_ExtrudedAreaSolid_Create()
Handle_StepShape_ExtrudedAreaSolid_Create = _StepShape.Handle_StepShape_ExtrudedAreaSolid_Create

def Handle_StepShape_ExtrudedAreaSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ExtrudedAreaSolid >":
    return _StepShape.Handle_StepShape_ExtrudedAreaSolid_DownCast(t)
Handle_StepShape_ExtrudedAreaSolid_DownCast = _StepShape.Handle_StepShape_ExtrudedAreaSolid_DownCast

def Handle_StepShape_ExtrudedAreaSolid_IsNull(t: 'opencascade::handle< StepShape_ExtrudedAreaSolid > const &') -> "bool":
    return _StepShape.Handle_StepShape_ExtrudedAreaSolid_IsNull(t)
Handle_StepShape_ExtrudedAreaSolid_IsNull = _StepShape.Handle_StepShape_ExtrudedAreaSolid_IsNull

def Handle_StepShape_ExtrudedFaceSolid_Create() -> "opencascade::handle< StepShape_ExtrudedFaceSolid >":
    return _StepShape.Handle_StepShape_ExtrudedFaceSolid_Create()
Handle_StepShape_ExtrudedFaceSolid_Create = _StepShape.Handle_StepShape_ExtrudedFaceSolid_Create

def Handle_StepShape_ExtrudedFaceSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_ExtrudedFaceSolid >":
    return _StepShape.Handle_StepShape_ExtrudedFaceSolid_DownCast(t)
Handle_StepShape_ExtrudedFaceSolid_DownCast = _StepShape.Handle_StepShape_ExtrudedFaceSolid_DownCast

def Handle_StepShape_ExtrudedFaceSolid_IsNull(t: 'opencascade::handle< StepShape_ExtrudedFaceSolid > const &') -> "bool":
    return _StepShape.Handle_StepShape_ExtrudedFaceSolid_IsNull(t)
Handle_StepShape_ExtrudedFaceSolid_IsNull = _StepShape.Handle_StepShape_ExtrudedFaceSolid_IsNull

def Handle_StepShape_FaceOuterBound_Create() -> "opencascade::handle< StepShape_FaceOuterBound >":
    return _StepShape.Handle_StepShape_FaceOuterBound_Create()
Handle_StepShape_FaceOuterBound_Create = _StepShape.Handle_StepShape_FaceOuterBound_Create

def Handle_StepShape_FaceOuterBound_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_FaceOuterBound >":
    return _StepShape.Handle_StepShape_FaceOuterBound_DownCast(t)
Handle_StepShape_FaceOuterBound_DownCast = _StepShape.Handle_StepShape_FaceOuterBound_DownCast

def Handle_StepShape_FaceOuterBound_IsNull(t: 'opencascade::handle< StepShape_FaceOuterBound > const &') -> "bool":
    return _StepShape.Handle_StepShape_FaceOuterBound_IsNull(t)
Handle_StepShape_FaceOuterBound_IsNull = _StepShape.Handle_StepShape_FaceOuterBound_IsNull

def Handle_StepShape_FaceSurface_Create() -> "opencascade::handle< StepShape_FaceSurface >":
    return _StepShape.Handle_StepShape_FaceSurface_Create()
Handle_StepShape_FaceSurface_Create = _StepShape.Handle_StepShape_FaceSurface_Create

def Handle_StepShape_FaceSurface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_FaceSurface >":
    return _StepShape.Handle_StepShape_FaceSurface_DownCast(t)
Handle_StepShape_FaceSurface_DownCast = _StepShape.Handle_StepShape_FaceSurface_DownCast

def Handle_StepShape_FaceSurface_IsNull(t: 'opencascade::handle< StepShape_FaceSurface > const &') -> "bool":
    return _StepShape.Handle_StepShape_FaceSurface_IsNull(t)
Handle_StepShape_FaceSurface_IsNull = _StepShape.Handle_StepShape_FaceSurface_IsNull

def Handle_StepShape_FacetedBrep_Create() -> "opencascade::handle< StepShape_FacetedBrep >":
    return _StepShape.Handle_StepShape_FacetedBrep_Create()
Handle_StepShape_FacetedBrep_Create = _StepShape.Handle_StepShape_FacetedBrep_Create

def Handle_StepShape_FacetedBrep_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_FacetedBrep >":
    return _StepShape.Handle_StepShape_FacetedBrep_DownCast(t)
Handle_StepShape_FacetedBrep_DownCast = _StepShape.Handle_StepShape_FacetedBrep_DownCast

def Handle_StepShape_FacetedBrep_IsNull(t: 'opencascade::handle< StepShape_FacetedBrep > const &') -> "bool":
    return _StepShape.Handle_StepShape_FacetedBrep_IsNull(t)
Handle_StepShape_FacetedBrep_IsNull = _StepShape.Handle_StepShape_FacetedBrep_IsNull

def Handle_StepShape_FacetedBrepAndBrepWithVoids_Create() -> "opencascade::handle< StepShape_FacetedBrepAndBrepWithVoids >":
    return _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_Create()
Handle_StepShape_FacetedBrepAndBrepWithVoids_Create = _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_Create

def Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_FacetedBrepAndBrepWithVoids >":
    return _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast(t)
Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast = _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast

def Handle_StepShape_FacetedBrepAndBrepWithVoids_IsNull(t: 'opencascade::handle< StepShape_FacetedBrepAndBrepWithVoids > const &') -> "bool":
    return _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_IsNull(t)
Handle_StepShape_FacetedBrepAndBrepWithVoids_IsNull = _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_IsNull

def Handle_StepShape_OpenShell_Create() -> "opencascade::handle< StepShape_OpenShell >":
    return _StepShape.Handle_StepShape_OpenShell_Create()
Handle_StepShape_OpenShell_Create = _StepShape.Handle_StepShape_OpenShell_Create

def Handle_StepShape_OpenShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_OpenShell >":
    return _StepShape.Handle_StepShape_OpenShell_DownCast(t)
Handle_StepShape_OpenShell_DownCast = _StepShape.Handle_StepShape_OpenShell_DownCast

def Handle_StepShape_OpenShell_IsNull(t: 'opencascade::handle< StepShape_OpenShell > const &') -> "bool":
    return _StepShape.Handle_StepShape_OpenShell_IsNull(t)
Handle_StepShape_OpenShell_IsNull = _StepShape.Handle_StepShape_OpenShell_IsNull

def Handle_StepShape_OrientedEdge_Create() -> "opencascade::handle< StepShape_OrientedEdge >":
    return _StepShape.Handle_StepShape_OrientedEdge_Create()
Handle_StepShape_OrientedEdge_Create = _StepShape.Handle_StepShape_OrientedEdge_Create

def Handle_StepShape_OrientedEdge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_OrientedEdge >":
    return _StepShape.Handle_StepShape_OrientedEdge_DownCast(t)
Handle_StepShape_OrientedEdge_DownCast = _StepShape.Handle_StepShape_OrientedEdge_DownCast

def Handle_StepShape_OrientedEdge_IsNull(t: 'opencascade::handle< StepShape_OrientedEdge > const &') -> "bool":
    return _StepShape.Handle_StepShape_OrientedEdge_IsNull(t)
Handle_StepShape_OrientedEdge_IsNull = _StepShape.Handle_StepShape_OrientedEdge_IsNull

def Handle_StepShape_OrientedFace_Create() -> "opencascade::handle< StepShape_OrientedFace >":
    return _StepShape.Handle_StepShape_OrientedFace_Create()
Handle_StepShape_OrientedFace_Create = _StepShape.Handle_StepShape_OrientedFace_Create

def Handle_StepShape_OrientedFace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_OrientedFace >":
    return _StepShape.Handle_StepShape_OrientedFace_DownCast(t)
Handle_StepShape_OrientedFace_DownCast = _StepShape.Handle_StepShape_OrientedFace_DownCast

def Handle_StepShape_OrientedFace_IsNull(t: 'opencascade::handle< StepShape_OrientedFace > const &') -> "bool":
    return _StepShape.Handle_StepShape_OrientedFace_IsNull(t)
Handle_StepShape_OrientedFace_IsNull = _StepShape.Handle_StepShape_OrientedFace_IsNull

def Handle_StepShape_OrientedPath_Create() -> "opencascade::handle< StepShape_OrientedPath >":
    return _StepShape.Handle_StepShape_OrientedPath_Create()
Handle_StepShape_OrientedPath_Create = _StepShape.Handle_StepShape_OrientedPath_Create

def Handle_StepShape_OrientedPath_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_OrientedPath >":
    return _StepShape.Handle_StepShape_OrientedPath_DownCast(t)
Handle_StepShape_OrientedPath_DownCast = _StepShape.Handle_StepShape_OrientedPath_DownCast

def Handle_StepShape_OrientedPath_IsNull(t: 'opencascade::handle< StepShape_OrientedPath > const &') -> "bool":
    return _StepShape.Handle_StepShape_OrientedPath_IsNull(t)
Handle_StepShape_OrientedPath_IsNull = _StepShape.Handle_StepShape_OrientedPath_IsNull

def Handle_StepShape_PolyLoop_Create() -> "opencascade::handle< StepShape_PolyLoop >":
    return _StepShape.Handle_StepShape_PolyLoop_Create()
Handle_StepShape_PolyLoop_Create = _StepShape.Handle_StepShape_PolyLoop_Create

def Handle_StepShape_PolyLoop_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_PolyLoop >":
    return _StepShape.Handle_StepShape_PolyLoop_DownCast(t)
Handle_StepShape_PolyLoop_DownCast = _StepShape.Handle_StepShape_PolyLoop_DownCast

def Handle_StepShape_PolyLoop_IsNull(t: 'opencascade::handle< StepShape_PolyLoop > const &') -> "bool":
    return _StepShape.Handle_StepShape_PolyLoop_IsNull(t)
Handle_StepShape_PolyLoop_IsNull = _StepShape.Handle_StepShape_PolyLoop_IsNull

def Handle_StepShape_RevolvedAreaSolid_Create() -> "opencascade::handle< StepShape_RevolvedAreaSolid >":
    return _StepShape.Handle_StepShape_RevolvedAreaSolid_Create()
Handle_StepShape_RevolvedAreaSolid_Create = _StepShape.Handle_StepShape_RevolvedAreaSolid_Create

def Handle_StepShape_RevolvedAreaSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_RevolvedAreaSolid >":
    return _StepShape.Handle_StepShape_RevolvedAreaSolid_DownCast(t)
Handle_StepShape_RevolvedAreaSolid_DownCast = _StepShape.Handle_StepShape_RevolvedAreaSolid_DownCast

def Handle_StepShape_RevolvedAreaSolid_IsNull(t: 'opencascade::handle< StepShape_RevolvedAreaSolid > const &') -> "bool":
    return _StepShape.Handle_StepShape_RevolvedAreaSolid_IsNull(t)
Handle_StepShape_RevolvedAreaSolid_IsNull = _StepShape.Handle_StepShape_RevolvedAreaSolid_IsNull

def Handle_StepShape_RevolvedFaceSolid_Create() -> "opencascade::handle< StepShape_RevolvedFaceSolid >":
    return _StepShape.Handle_StepShape_RevolvedFaceSolid_Create()
Handle_StepShape_RevolvedFaceSolid_Create = _StepShape.Handle_StepShape_RevolvedFaceSolid_Create

def Handle_StepShape_RevolvedFaceSolid_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_RevolvedFaceSolid >":
    return _StepShape.Handle_StepShape_RevolvedFaceSolid_DownCast(t)
Handle_StepShape_RevolvedFaceSolid_DownCast = _StepShape.Handle_StepShape_RevolvedFaceSolid_DownCast

def Handle_StepShape_RevolvedFaceSolid_IsNull(t: 'opencascade::handle< StepShape_RevolvedFaceSolid > const &') -> "bool":
    return _StepShape.Handle_StepShape_RevolvedFaceSolid_IsNull(t)
Handle_StepShape_RevolvedFaceSolid_IsNull = _StepShape.Handle_StepShape_RevolvedFaceSolid_IsNull

def Handle_StepShape_Subedge_Create() -> "opencascade::handle< StepShape_Subedge >":
    return _StepShape.Handle_StepShape_Subedge_Create()
Handle_StepShape_Subedge_Create = _StepShape.Handle_StepShape_Subedge_Create

def Handle_StepShape_Subedge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Subedge >":
    return _StepShape.Handle_StepShape_Subedge_DownCast(t)
Handle_StepShape_Subedge_DownCast = _StepShape.Handle_StepShape_Subedge_DownCast

def Handle_StepShape_Subedge_IsNull(t: 'opencascade::handle< StepShape_Subedge > const &') -> "bool":
    return _StepShape.Handle_StepShape_Subedge_IsNull(t)
Handle_StepShape_Subedge_IsNull = _StepShape.Handle_StepShape_Subedge_IsNull

def Handle_StepShape_Subface_Create() -> "opencascade::handle< StepShape_Subface >":
    return _StepShape.Handle_StepShape_Subface_Create()
Handle_StepShape_Subface_Create = _StepShape.Handle_StepShape_Subface_Create

def Handle_StepShape_Subface_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_Subface >":
    return _StepShape.Handle_StepShape_Subface_DownCast(t)
Handle_StepShape_Subface_DownCast = _StepShape.Handle_StepShape_Subface_DownCast

def Handle_StepShape_Subface_IsNull(t: 'opencascade::handle< StepShape_Subface > const &') -> "bool":
    return _StepShape.Handle_StepShape_Subface_IsNull(t)
Handle_StepShape_Subface_IsNull = _StepShape.Handle_StepShape_Subface_IsNull

def Handle_StepShape_VertexLoop_Create() -> "opencascade::handle< StepShape_VertexLoop >":
    return _StepShape.Handle_StepShape_VertexLoop_Create()
Handle_StepShape_VertexLoop_Create = _StepShape.Handle_StepShape_VertexLoop_Create

def Handle_StepShape_VertexLoop_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_VertexLoop >":
    return _StepShape.Handle_StepShape_VertexLoop_DownCast(t)
Handle_StepShape_VertexLoop_DownCast = _StepShape.Handle_StepShape_VertexLoop_DownCast

def Handle_StepShape_VertexLoop_IsNull(t: 'opencascade::handle< StepShape_VertexLoop > const &') -> "bool":
    return _StepShape.Handle_StepShape_VertexLoop_IsNull(t)
Handle_StepShape_VertexLoop_IsNull = _StepShape.Handle_StepShape_VertexLoop_IsNull

def Handle_StepShape_VertexPoint_Create() -> "opencascade::handle< StepShape_VertexPoint >":
    return _StepShape.Handle_StepShape_VertexPoint_Create()
Handle_StepShape_VertexPoint_Create = _StepShape.Handle_StepShape_VertexPoint_Create

def Handle_StepShape_VertexPoint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_VertexPoint >":
    return _StepShape.Handle_StepShape_VertexPoint_DownCast(t)
Handle_StepShape_VertexPoint_DownCast = _StepShape.Handle_StepShape_VertexPoint_DownCast

def Handle_StepShape_VertexPoint_IsNull(t: 'opencascade::handle< StepShape_VertexPoint > const &') -> "bool":
    return _StepShape.Handle_StepShape_VertexPoint_IsNull(t)
Handle_StepShape_VertexPoint_IsNull = _StepShape.Handle_StepShape_VertexPoint_IsNull

def Handle_StepShape_AdvancedFace_Create() -> "opencascade::handle< StepShape_AdvancedFace >":
    return _StepShape.Handle_StepShape_AdvancedFace_Create()
Handle_StepShape_AdvancedFace_Create = _StepShape.Handle_StepShape_AdvancedFace_Create

def Handle_StepShape_AdvancedFace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_AdvancedFace >":
    return _StepShape.Handle_StepShape_AdvancedFace_DownCast(t)
Handle_StepShape_AdvancedFace_DownCast = _StepShape.Handle_StepShape_AdvancedFace_DownCast

def Handle_StepShape_AdvancedFace_IsNull(t: 'opencascade::handle< StepShape_AdvancedFace > const &') -> "bool":
    return _StepShape.Handle_StepShape_AdvancedFace_IsNull(t)
Handle_StepShape_AdvancedFace_IsNull = _StepShape.Handle_StepShape_AdvancedFace_IsNull

def Handle_StepShape_OrientedClosedShell_Create() -> "opencascade::handle< StepShape_OrientedClosedShell >":
    return _StepShape.Handle_StepShape_OrientedClosedShell_Create()
Handle_StepShape_OrientedClosedShell_Create = _StepShape.Handle_StepShape_OrientedClosedShell_Create

def Handle_StepShape_OrientedClosedShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_OrientedClosedShell >":
    return _StepShape.Handle_StepShape_OrientedClosedShell_DownCast(t)
Handle_StepShape_OrientedClosedShell_DownCast = _StepShape.Handle_StepShape_OrientedClosedShell_DownCast

def Handle_StepShape_OrientedClosedShell_IsNull(t: 'opencascade::handle< StepShape_OrientedClosedShell > const &') -> "bool":
    return _StepShape.Handle_StepShape_OrientedClosedShell_IsNull(t)
Handle_StepShape_OrientedClosedShell_IsNull = _StepShape.Handle_StepShape_OrientedClosedShell_IsNull

def Handle_StepShape_OrientedOpenShell_Create() -> "opencascade::handle< StepShape_OrientedOpenShell >":
    return _StepShape.Handle_StepShape_OrientedOpenShell_Create()
Handle_StepShape_OrientedOpenShell_Create = _StepShape.Handle_StepShape_OrientedOpenShell_Create

def Handle_StepShape_OrientedOpenShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_OrientedOpenShell >":
    return _StepShape.Handle_StepShape_OrientedOpenShell_DownCast(t)
Handle_StepShape_OrientedOpenShell_DownCast = _StepShape.Handle_StepShape_OrientedOpenShell_DownCast

def Handle_StepShape_OrientedOpenShell_IsNull(t: 'opencascade::handle< StepShape_OrientedOpenShell > const &') -> "bool":
    return _StepShape.Handle_StepShape_OrientedOpenShell_IsNull(t)
Handle_StepShape_OrientedOpenShell_IsNull = _StepShape.Handle_StepShape_OrientedOpenShell_IsNull

def Handle_StepShape_SeamEdge_Create() -> "opencascade::handle< StepShape_SeamEdge >":
    return _StepShape.Handle_StepShape_SeamEdge_Create()
Handle_StepShape_SeamEdge_Create = _StepShape.Handle_StepShape_SeamEdge_Create

def Handle_StepShape_SeamEdge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_SeamEdge >":
    return _StepShape.Handle_StepShape_SeamEdge_DownCast(t)
Handle_StepShape_SeamEdge_DownCast = _StepShape.Handle_StepShape_SeamEdge_DownCast

def Handle_StepShape_SeamEdge_IsNull(t: 'opencascade::handle< StepShape_SeamEdge > const &') -> "bool":
    return _StepShape.Handle_StepShape_SeamEdge_IsNull(t)
Handle_StepShape_SeamEdge_IsNull = _StepShape.Handle_StepShape_SeamEdge_IsNull

def Handle_StepShape_HArray1OfConnectedEdgeSet_Create() -> "opencascade::handle< StepShape_HArray1OfConnectedEdgeSet >":
    return _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_Create()
Handle_StepShape_HArray1OfConnectedEdgeSet_Create = _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_Create

def Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfConnectedEdgeSet >":
    return _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast(t)
Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast = _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast

def Handle_StepShape_HArray1OfConnectedEdgeSet_IsNull(t: 'opencascade::handle< StepShape_HArray1OfConnectedEdgeSet > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_IsNull(t)
Handle_StepShape_HArray1OfConnectedEdgeSet_IsNull = _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_IsNull

def Handle_StepShape_HArray1OfFaceBound_Create() -> "opencascade::handle< StepShape_HArray1OfFaceBound >":
    return _StepShape.Handle_StepShape_HArray1OfFaceBound_Create()
Handle_StepShape_HArray1OfFaceBound_Create = _StepShape.Handle_StepShape_HArray1OfFaceBound_Create

def Handle_StepShape_HArray1OfFaceBound_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfFaceBound >":
    return _StepShape.Handle_StepShape_HArray1OfFaceBound_DownCast(t)
Handle_StepShape_HArray1OfFaceBound_DownCast = _StepShape.Handle_StepShape_HArray1OfFaceBound_DownCast

def Handle_StepShape_HArray1OfFaceBound_IsNull(t: 'opencascade::handle< StepShape_HArray1OfFaceBound > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfFaceBound_IsNull(t)
Handle_StepShape_HArray1OfFaceBound_IsNull = _StepShape.Handle_StepShape_HArray1OfFaceBound_IsNull

def Handle_StepShape_HArray1OfGeometricSetSelect_Create() -> "opencascade::handle< StepShape_HArray1OfGeometricSetSelect >":
    return _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_Create()
Handle_StepShape_HArray1OfGeometricSetSelect_Create = _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_Create

def Handle_StepShape_HArray1OfGeometricSetSelect_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfGeometricSetSelect >":
    return _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_DownCast(t)
Handle_StepShape_HArray1OfGeometricSetSelect_DownCast = _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_DownCast

def Handle_StepShape_HArray1OfGeometricSetSelect_IsNull(t: 'opencascade::handle< StepShape_HArray1OfGeometricSetSelect > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_IsNull(t)
Handle_StepShape_HArray1OfGeometricSetSelect_IsNull = _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_IsNull

def Handle_StepShape_HArray1OfConnectedFaceSet_Create() -> "opencascade::handle< StepShape_HArray1OfConnectedFaceSet >":
    return _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_Create()
Handle_StepShape_HArray1OfConnectedFaceSet_Create = _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_Create

def Handle_StepShape_HArray1OfConnectedFaceSet_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfConnectedFaceSet >":
    return _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_DownCast(t)
Handle_StepShape_HArray1OfConnectedFaceSet_DownCast = _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_DownCast

def Handle_StepShape_HArray1OfConnectedFaceSet_IsNull(t: 'opencascade::handle< StepShape_HArray1OfConnectedFaceSet > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_IsNull(t)
Handle_StepShape_HArray1OfConnectedFaceSet_IsNull = _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_IsNull

def Handle_StepShape_HArray1OfEdge_Create() -> "opencascade::handle< StepShape_HArray1OfEdge >":
    return _StepShape.Handle_StepShape_HArray1OfEdge_Create()
Handle_StepShape_HArray1OfEdge_Create = _StepShape.Handle_StepShape_HArray1OfEdge_Create

def Handle_StepShape_HArray1OfEdge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfEdge >":
    return _StepShape.Handle_StepShape_HArray1OfEdge_DownCast(t)
Handle_StepShape_HArray1OfEdge_DownCast = _StepShape.Handle_StepShape_HArray1OfEdge_DownCast

def Handle_StepShape_HArray1OfEdge_IsNull(t: 'opencascade::handle< StepShape_HArray1OfEdge > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfEdge_IsNull(t)
Handle_StepShape_HArray1OfEdge_IsNull = _StepShape.Handle_StepShape_HArray1OfEdge_IsNull

def Handle_StepShape_HArray1OfFace_Create() -> "opencascade::handle< StepShape_HArray1OfFace >":
    return _StepShape.Handle_StepShape_HArray1OfFace_Create()
Handle_StepShape_HArray1OfFace_Create = _StepShape.Handle_StepShape_HArray1OfFace_Create

def Handle_StepShape_HArray1OfFace_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfFace >":
    return _StepShape.Handle_StepShape_HArray1OfFace_DownCast(t)
Handle_StepShape_HArray1OfFace_DownCast = _StepShape.Handle_StepShape_HArray1OfFace_DownCast

def Handle_StepShape_HArray1OfFace_IsNull(t: 'opencascade::handle< StepShape_HArray1OfFace > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfFace_IsNull(t)
Handle_StepShape_HArray1OfFace_IsNull = _StepShape.Handle_StepShape_HArray1OfFace_IsNull

def Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_Create() -> "opencascade::handle< StepShape_HArray1OfShapeDimensionRepresentationItem >":
    return _StepShape.Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_Create()
Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_Create = _StepShape.Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_Create

def Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfShapeDimensionRepresentationItem >":
    return _StepShape.Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_DownCast(t)
Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_DownCast = _StepShape.Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_DownCast

def Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_IsNull(t: 'opencascade::handle< StepShape_HArray1OfShapeDimensionRepresentationItem > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_IsNull(t)
Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_IsNull = _StepShape.Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_IsNull

def Handle_StepShape_HArray1OfValueQualifier_Create() -> "opencascade::handle< StepShape_HArray1OfValueQualifier >":
    return _StepShape.Handle_StepShape_HArray1OfValueQualifier_Create()
Handle_StepShape_HArray1OfValueQualifier_Create = _StepShape.Handle_StepShape_HArray1OfValueQualifier_Create

def Handle_StepShape_HArray1OfValueQualifier_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfValueQualifier >":
    return _StepShape.Handle_StepShape_HArray1OfValueQualifier_DownCast(t)
Handle_StepShape_HArray1OfValueQualifier_DownCast = _StepShape.Handle_StepShape_HArray1OfValueQualifier_DownCast

def Handle_StepShape_HArray1OfValueQualifier_IsNull(t: 'opencascade::handle< StepShape_HArray1OfValueQualifier > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfValueQualifier_IsNull(t)
Handle_StepShape_HArray1OfValueQualifier_IsNull = _StepShape.Handle_StepShape_HArray1OfValueQualifier_IsNull

def Handle_StepShape_HArray1OfShell_Create() -> "opencascade::handle< StepShape_HArray1OfShell >":
    return _StepShape.Handle_StepShape_HArray1OfShell_Create()
Handle_StepShape_HArray1OfShell_Create = _StepShape.Handle_StepShape_HArray1OfShell_Create

def Handle_StepShape_HArray1OfShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfShell >":
    return _StepShape.Handle_StepShape_HArray1OfShell_DownCast(t)
Handle_StepShape_HArray1OfShell_DownCast = _StepShape.Handle_StepShape_HArray1OfShell_DownCast

def Handle_StepShape_HArray1OfShell_IsNull(t: 'opencascade::handle< StepShape_HArray1OfShell > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfShell_IsNull(t)
Handle_StepShape_HArray1OfShell_IsNull = _StepShape.Handle_StepShape_HArray1OfShell_IsNull

def Handle_StepShape_HArray1OfOrientedClosedShell_Create() -> "opencascade::handle< StepShape_HArray1OfOrientedClosedShell >":
    return _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_Create()
Handle_StepShape_HArray1OfOrientedClosedShell_Create = _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_Create

def Handle_StepShape_HArray1OfOrientedClosedShell_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfOrientedClosedShell >":
    return _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_DownCast(t)
Handle_StepShape_HArray1OfOrientedClosedShell_DownCast = _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_DownCast

def Handle_StepShape_HArray1OfOrientedClosedShell_IsNull(t: 'opencascade::handle< StepShape_HArray1OfOrientedClosedShell > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_IsNull(t)
Handle_StepShape_HArray1OfOrientedClosedShell_IsNull = _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_IsNull

def Handle_StepShape_HArray1OfOrientedEdge_Create() -> "opencascade::handle< StepShape_HArray1OfOrientedEdge >":
    return _StepShape.Handle_StepShape_HArray1OfOrientedEdge_Create()
Handle_StepShape_HArray1OfOrientedEdge_Create = _StepShape.Handle_StepShape_HArray1OfOrientedEdge_Create

def Handle_StepShape_HArray1OfOrientedEdge_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepShape_HArray1OfOrientedEdge >":
    return _StepShape.Handle_StepShape_HArray1OfOrientedEdge_DownCast(t)
Handle_StepShape_HArray1OfOrientedEdge_DownCast = _StepShape.Handle_StepShape_HArray1OfOrientedEdge_DownCast

def Handle_StepShape_HArray1OfOrientedEdge_IsNull(t: 'opencascade::handle< StepShape_HArray1OfOrientedEdge > const &') -> "bool":
    return _StepShape.Handle_StepShape_HArray1OfOrientedEdge_IsNull(t)
Handle_StepShape_HArray1OfOrientedEdge_IsNull = _StepShape.Handle_StepShape_HArray1OfOrientedEdge_IsNull
class StepShape_Array1OfConnectedEdgeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfConnectedEdgeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfConnectedEdgeSet, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedEdgeSet > >::iterator":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedEdgeSet > >::iterator":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedEdgeSet > >::const_iterator":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedEdgeSet > >::const_iterator":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfConnectedEdgeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepShape_ConnectedEdgeSet > const &') -> "void":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfConnectedEdgeSet') -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedEdgeSet > > &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfConnectedEdgeSet') -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedEdgeSet > > &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedEdgeSet > > &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Set(self, *args)

    def First(self) -> "opencascade::handle< StepShape_ConnectedEdgeSet > const &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepShape_ConnectedEdgeSet > &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepShape_ConnectedEdgeSet > const &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepShape_ConnectedEdgeSet > &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_ConnectedEdgeSet > const &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_ConnectedEdgeSet > &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepShape_ConnectedEdgeSet > &":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepShape_ConnectedEdgeSet > const &') -> "void":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfConnectedEdgeSet
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfConnectedEdgeSet_swigregister = _StepShape.StepShape_Array1OfConnectedEdgeSet_swigregister
StepShape_Array1OfConnectedEdgeSet_swigregister(StepShape_Array1OfConnectedEdgeSet)

class StepShape_Array1OfConnectedFaceSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfConnectedFaceSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfConnectedFaceSet, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedFaceSet > >::iterator":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedFaceSet > >::iterator":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedFaceSet > >::const_iterator":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedFaceSet > >::const_iterator":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfConnectedFaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepShape_ConnectedFaceSet > const &') -> "void":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfConnectedFaceSet') -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedFaceSet > > &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfConnectedFaceSet') -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedFaceSet > > &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepShape_ConnectedFaceSet > > &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Set(self, *args)

    def First(self) -> "opencascade::handle< StepShape_ConnectedFaceSet > const &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepShape_ConnectedFaceSet > &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepShape_ConnectedFaceSet > const &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepShape_ConnectedFaceSet > &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_ConnectedFaceSet > const &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_ConnectedFaceSet > &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepShape_ConnectedFaceSet > &":
        return _StepShape.StepShape_Array1OfConnectedFaceSet___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepShape_ConnectedFaceSet > const &') -> "void":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfConnectedFaceSet
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfConnectedFaceSet_swigregister = _StepShape.StepShape_Array1OfConnectedFaceSet_swigregister
StepShape_Array1OfConnectedFaceSet_swigregister(StepShape_Array1OfConnectedFaceSet)

class StepShape_Array1OfEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfEdge, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepShape_Edge > >::iterator":
        return _StepShape.StepShape_Array1OfEdge_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepShape_Edge > >::iterator":
        return _StepShape.StepShape_Array1OfEdge_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepShape_Edge > >::const_iterator":
        return _StepShape.StepShape_Array1OfEdge_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepShape_Edge > >::const_iterator":
        return _StepShape.StepShape_Array1OfEdge_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepShape_Edge > const &') -> "void":
        return _StepShape.StepShape_Array1OfEdge_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfEdge_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfEdge_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfEdge_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfEdge_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfEdge_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfEdge_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfEdge_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfEdge') -> "NCollection_Array1< opencascade::handle< StepShape_Edge > > &":
        return _StepShape.StepShape_Array1OfEdge_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfEdge') -> "NCollection_Array1< opencascade::handle< StepShape_Edge > > &":
        return _StepShape.StepShape_Array1OfEdge_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepShape_Edge > > &":
        return _StepShape.StepShape_Array1OfEdge_Set(self, *args)

    def First(self) -> "opencascade::handle< StepShape_Edge > const &":
        return _StepShape.StepShape_Array1OfEdge_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepShape_Edge > &":
        return _StepShape.StepShape_Array1OfEdge_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepShape_Edge > const &":
        return _StepShape.StepShape_Array1OfEdge_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepShape_Edge > &":
        return _StepShape.StepShape_Array1OfEdge_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_Edge > const &":
        return _StepShape.StepShape_Array1OfEdge_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_Edge > &":
        return _StepShape.StepShape_Array1OfEdge_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepShape_Edge > &":
        return _StepShape.StepShape_Array1OfEdge___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepShape_Edge > const &') -> "void":
        return _StepShape.StepShape_Array1OfEdge_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfEdge_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfEdge
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfEdge_swigregister = _StepShape.StepShape_Array1OfEdge_swigregister
StepShape_Array1OfEdge_swigregister(StepShape_Array1OfEdge)

class StepShape_Array1OfFace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfFace, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepShape_Face > >::iterator":
        return _StepShape.StepShape_Array1OfFace_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepShape_Face > >::iterator":
        return _StepShape.StepShape_Array1OfFace_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepShape_Face > >::const_iterator":
        return _StepShape.StepShape_Array1OfFace_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepShape_Face > >::const_iterator":
        return _StepShape.StepShape_Array1OfFace_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepShape_Face > const &') -> "void":
        return _StepShape.StepShape_Array1OfFace_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfFace_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfFace_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfFace_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfFace_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfFace_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfFace_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfFace_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfFace') -> "NCollection_Array1< opencascade::handle< StepShape_Face > > &":
        return _StepShape.StepShape_Array1OfFace_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfFace') -> "NCollection_Array1< opencascade::handle< StepShape_Face > > &":
        return _StepShape.StepShape_Array1OfFace_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepShape_Face > > &":
        return _StepShape.StepShape_Array1OfFace_Set(self, *args)

    def First(self) -> "opencascade::handle< StepShape_Face > const &":
        return _StepShape.StepShape_Array1OfFace_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepShape_Face > &":
        return _StepShape.StepShape_Array1OfFace_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepShape_Face > const &":
        return _StepShape.StepShape_Array1OfFace_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepShape_Face > &":
        return _StepShape.StepShape_Array1OfFace_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_Face > const &":
        return _StepShape.StepShape_Array1OfFace_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_Face > &":
        return _StepShape.StepShape_Array1OfFace_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepShape_Face > &":
        return _StepShape.StepShape_Array1OfFace___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepShape_Face > const &') -> "void":
        return _StepShape.StepShape_Array1OfFace_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfFace_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfFace
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfFace_swigregister = _StepShape.StepShape_Array1OfFace_swigregister
StepShape_Array1OfFace_swigregister(StepShape_Array1OfFace)

class StepShape_Array1OfFaceBound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfFaceBound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfFaceBound, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepShape_FaceBound > >::iterator":
        return _StepShape.StepShape_Array1OfFaceBound_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepShape_FaceBound > >::iterator":
        return _StepShape.StepShape_Array1OfFaceBound_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepShape_FaceBound > >::const_iterator":
        return _StepShape.StepShape_Array1OfFaceBound_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepShape_FaceBound > >::const_iterator":
        return _StepShape.StepShape_Array1OfFaceBound_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfFaceBound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepShape_FaceBound > const &') -> "void":
        return _StepShape.StepShape_Array1OfFaceBound_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfFaceBound_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfFaceBound_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfFaceBound_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfFaceBound_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfFaceBound_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfFaceBound_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfFaceBound_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfFaceBound') -> "NCollection_Array1< opencascade::handle< StepShape_FaceBound > > &":
        return _StepShape.StepShape_Array1OfFaceBound_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfFaceBound') -> "NCollection_Array1< opencascade::handle< StepShape_FaceBound > > &":
        return _StepShape.StepShape_Array1OfFaceBound_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepShape_FaceBound > > &":
        return _StepShape.StepShape_Array1OfFaceBound_Set(self, *args)

    def First(self) -> "opencascade::handle< StepShape_FaceBound > const &":
        return _StepShape.StepShape_Array1OfFaceBound_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepShape_FaceBound > &":
        return _StepShape.StepShape_Array1OfFaceBound_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepShape_FaceBound > const &":
        return _StepShape.StepShape_Array1OfFaceBound_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepShape_FaceBound > &":
        return _StepShape.StepShape_Array1OfFaceBound_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_FaceBound > const &":
        return _StepShape.StepShape_Array1OfFaceBound_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_FaceBound > &":
        return _StepShape.StepShape_Array1OfFaceBound_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepShape_FaceBound > &":
        return _StepShape.StepShape_Array1OfFaceBound___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepShape_FaceBound > const &') -> "void":
        return _StepShape.StepShape_Array1OfFaceBound_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfFaceBound_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfFaceBound
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfFaceBound_swigregister = _StepShape.StepShape_Array1OfFaceBound_swigregister
StepShape_Array1OfFaceBound_swigregister(StepShape_Array1OfFaceBound)

class StepShape_Array1OfGeometricSetSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfGeometricSetSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfGeometricSetSelect, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepShape_GeometricSetSelect >::iterator":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_begin(self)

    def end(self) -> "NCollection_Array1< StepShape_GeometricSetSelect >::iterator":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_end(self)

    def cbegin(self) -> "NCollection_Array1< StepShape_GeometricSetSelect >::const_iterator":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepShape_GeometricSetSelect >::const_iterator":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfGeometricSetSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepShape_GeometricSetSelect') -> "void":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfGeometricSetSelect') -> "NCollection_Array1< StepShape_GeometricSetSelect > &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfGeometricSetSelect') -> "NCollection_Array1< StepShape_GeometricSetSelect > &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepShape_GeometricSetSelect > &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Set(self, *args)

    def First(self) -> "StepShape_GeometricSetSelect const &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_First(self)

    def ChangeFirst(self) -> "StepShape_GeometricSetSelect &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_ChangeFirst(self)

    def Last(self) -> "StepShape_GeometricSetSelect const &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Last(self)

    def ChangeLast(self) -> "StepShape_GeometricSetSelect &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepShape_GeometricSetSelect const &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepShape_GeometricSetSelect &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepShape_GeometricSetSelect &":
        return _StepShape.StepShape_Array1OfGeometricSetSelect___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepShape_GeometricSetSelect') -> "void":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfGeometricSetSelect
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfGeometricSetSelect_swigregister = _StepShape.StepShape_Array1OfGeometricSetSelect_swigregister
StepShape_Array1OfGeometricSetSelect_swigregister(StepShape_Array1OfGeometricSetSelect)

class StepShape_Array1OfOrientedClosedShell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfOrientedClosedShell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfOrientedClosedShell, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedClosedShell > >::iterator":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedClosedShell > >::iterator":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedClosedShell > >::const_iterator":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedClosedShell > >::const_iterator":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfOrientedClosedShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepShape_OrientedClosedShell > const &') -> "void":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfOrientedClosedShell') -> "NCollection_Array1< opencascade::handle< StepShape_OrientedClosedShell > > &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfOrientedClosedShell') -> "NCollection_Array1< opencascade::handle< StepShape_OrientedClosedShell > > &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedClosedShell > > &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Set(self, *args)

    def First(self) -> "opencascade::handle< StepShape_OrientedClosedShell > const &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepShape_OrientedClosedShell > &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepShape_OrientedClosedShell > const &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepShape_OrientedClosedShell > &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_OrientedClosedShell > const &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_OrientedClosedShell > &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepShape_OrientedClosedShell > &":
        return _StepShape.StepShape_Array1OfOrientedClosedShell___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepShape_OrientedClosedShell > const &') -> "void":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfOrientedClosedShell
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfOrientedClosedShell_swigregister = _StepShape.StepShape_Array1OfOrientedClosedShell_swigregister
StepShape_Array1OfOrientedClosedShell_swigregister(StepShape_Array1OfOrientedClosedShell)

class StepShape_Array1OfOrientedEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfOrientedEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfOrientedEdge, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedEdge > >::iterator":
        return _StepShape.StepShape_Array1OfOrientedEdge_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedEdge > >::iterator":
        return _StepShape.StepShape_Array1OfOrientedEdge_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedEdge > >::const_iterator":
        return _StepShape.StepShape_Array1OfOrientedEdge_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedEdge > >::const_iterator":
        return _StepShape.StepShape_Array1OfOrientedEdge_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfOrientedEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepShape_OrientedEdge > const &') -> "void":
        return _StepShape.StepShape_Array1OfOrientedEdge_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfOrientedEdge_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfOrientedEdge_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfOrientedEdge_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfOrientedEdge_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfOrientedEdge_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfOrientedEdge_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfOrientedEdge_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfOrientedEdge') -> "NCollection_Array1< opencascade::handle< StepShape_OrientedEdge > > &":
        return _StepShape.StepShape_Array1OfOrientedEdge_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfOrientedEdge') -> "NCollection_Array1< opencascade::handle< StepShape_OrientedEdge > > &":
        return _StepShape.StepShape_Array1OfOrientedEdge_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepShape_OrientedEdge > > &":
        return _StepShape.StepShape_Array1OfOrientedEdge_Set(self, *args)

    def First(self) -> "opencascade::handle< StepShape_OrientedEdge > const &":
        return _StepShape.StepShape_Array1OfOrientedEdge_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepShape_OrientedEdge > &":
        return _StepShape.StepShape_Array1OfOrientedEdge_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepShape_OrientedEdge > const &":
        return _StepShape.StepShape_Array1OfOrientedEdge_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepShape_OrientedEdge > &":
        return _StepShape.StepShape_Array1OfOrientedEdge_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_OrientedEdge > const &":
        return _StepShape.StepShape_Array1OfOrientedEdge_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepShape_OrientedEdge > &":
        return _StepShape.StepShape_Array1OfOrientedEdge_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepShape_OrientedEdge > &":
        return _StepShape.StepShape_Array1OfOrientedEdge___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepShape_OrientedEdge > const &') -> "void":
        return _StepShape.StepShape_Array1OfOrientedEdge_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfOrientedEdge_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfOrientedEdge
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfOrientedEdge_swigregister = _StepShape.StepShape_Array1OfOrientedEdge_swigregister
StepShape_Array1OfOrientedEdge_swigregister(StepShape_Array1OfOrientedEdge)

class StepShape_Array1OfShapeDimensionRepresentationItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfShapeDimensionRepresentationItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfShapeDimensionRepresentationItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepShape_ShapeDimensionRepresentationItem >::iterator":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_begin(self)

    def end(self) -> "NCollection_Array1< StepShape_ShapeDimensionRepresentationItem >::iterator":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepShape_ShapeDimensionRepresentationItem >::const_iterator":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepShape_ShapeDimensionRepresentationItem >::const_iterator":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfShapeDimensionRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepShape_ShapeDimensionRepresentationItem') -> "void":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfShapeDimensionRepresentationItem') -> "NCollection_Array1< StepShape_ShapeDimensionRepresentationItem > &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfShapeDimensionRepresentationItem') -> "NCollection_Array1< StepShape_ShapeDimensionRepresentationItem > &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepShape_ShapeDimensionRepresentationItem > &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Set(self, *args)

    def First(self) -> "StepShape_ShapeDimensionRepresentationItem const &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_First(self)

    def ChangeFirst(self) -> "StepShape_ShapeDimensionRepresentationItem &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_ChangeFirst(self)

    def Last(self) -> "StepShape_ShapeDimensionRepresentationItem const &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Last(self)

    def ChangeLast(self) -> "StepShape_ShapeDimensionRepresentationItem &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepShape_ShapeDimensionRepresentationItem const &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepShape_ShapeDimensionRepresentationItem &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepShape_ShapeDimensionRepresentationItem &":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepShape_ShapeDimensionRepresentationItem') -> "void":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfShapeDimensionRepresentationItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfShapeDimensionRepresentationItem_swigregister = _StepShape.StepShape_Array1OfShapeDimensionRepresentationItem_swigregister
StepShape_Array1OfShapeDimensionRepresentationItem_swigregister(StepShape_Array1OfShapeDimensionRepresentationItem)

class StepShape_Array1OfShell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfShell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfShell, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepShape_Shell >::iterator":
        return _StepShape.StepShape_Array1OfShell_begin(self)

    def end(self) -> "NCollection_Array1< StepShape_Shell >::iterator":
        return _StepShape.StepShape_Array1OfShell_end(self)

    def cbegin(self) -> "NCollection_Array1< StepShape_Shell >::const_iterator":
        return _StepShape.StepShape_Array1OfShell_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepShape_Shell >::const_iterator":
        return _StepShape.StepShape_Array1OfShell_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepShape_Shell') -> "void":
        return _StepShape.StepShape_Array1OfShell_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfShell_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfShell_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfShell_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfShell_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfShell_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfShell_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfShell_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfShell') -> "NCollection_Array1< StepShape_Shell > &":
        return _StepShape.StepShape_Array1OfShell_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfShell') -> "NCollection_Array1< StepShape_Shell > &":
        return _StepShape.StepShape_Array1OfShell_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepShape_Shell > &":
        return _StepShape.StepShape_Array1OfShell_Set(self, *args)

    def First(self) -> "StepShape_Shell const &":
        return _StepShape.StepShape_Array1OfShell_First(self)

    def ChangeFirst(self) -> "StepShape_Shell &":
        return _StepShape.StepShape_Array1OfShell_ChangeFirst(self)

    def Last(self) -> "StepShape_Shell const &":
        return _StepShape.StepShape_Array1OfShell_Last(self)

    def ChangeLast(self) -> "StepShape_Shell &":
        return _StepShape.StepShape_Array1OfShell_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepShape_Shell const &":
        return _StepShape.StepShape_Array1OfShell_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepShape_Shell &":
        return _StepShape.StepShape_Array1OfShell_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepShape_Shell &":
        return _StepShape.StepShape_Array1OfShell___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepShape_Shell') -> "void":
        return _StepShape.StepShape_Array1OfShell_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfShell_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfShell
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfShell_swigregister = _StepShape.StepShape_Array1OfShell_swigregister
StepShape_Array1OfShell_swigregister(StepShape_Array1OfShell)

class StepShape_Array1OfValueQualifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Array1OfValueQualifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Array1OfValueQualifier, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepShape_ValueQualifier >::iterator":
        return _StepShape.StepShape_Array1OfValueQualifier_begin(self)

    def end(self) -> "NCollection_Array1< StepShape_ValueQualifier >::iterator":
        return _StepShape.StepShape_Array1OfValueQualifier_end(self)

    def cbegin(self) -> "NCollection_Array1< StepShape_ValueQualifier >::const_iterator":
        return _StepShape.StepShape_Array1OfValueQualifier_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepShape_ValueQualifier >::const_iterator":
        return _StepShape.StepShape_Array1OfValueQualifier_cend(self)

    def __init__(self, *args):
        this = _StepShape.new_StepShape_Array1OfValueQualifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepShape_ValueQualifier') -> "void":
        return _StepShape.StepShape_Array1OfValueQualifier_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfValueQualifier_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfValueQualifier_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfValueQualifier_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfValueQualifier_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepShape.StepShape_Array1OfValueQualifier_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfValueQualifier_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepShape.StepShape_Array1OfValueQualifier_IsAllocated(self)

    def Assign(self, theOther: 'StepShape_Array1OfValueQualifier') -> "NCollection_Array1< StepShape_ValueQualifier > &":
        return _StepShape.StepShape_Array1OfValueQualifier_Assign(self, theOther)

    def Move(self, theOther: 'StepShape_Array1OfValueQualifier') -> "NCollection_Array1< StepShape_ValueQualifier > &":
        return _StepShape.StepShape_Array1OfValueQualifier_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepShape_ValueQualifier > &":
        return _StepShape.StepShape_Array1OfValueQualifier_Set(self, *args)

    def First(self) -> "StepShape_ValueQualifier const &":
        return _StepShape.StepShape_Array1OfValueQualifier_First(self)

    def ChangeFirst(self) -> "StepShape_ValueQualifier &":
        return _StepShape.StepShape_Array1OfValueQualifier_ChangeFirst(self)

    def Last(self) -> "StepShape_ValueQualifier const &":
        return _StepShape.StepShape_Array1OfValueQualifier_Last(self)

    def ChangeLast(self) -> "StepShape_ValueQualifier &":
        return _StepShape.StepShape_Array1OfValueQualifier_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepShape_ValueQualifier const &":
        return _StepShape.StepShape_Array1OfValueQualifier_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepShape_ValueQualifier &":
        return _StepShape.StepShape_Array1OfValueQualifier_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepShape_ValueQualifier &":
        return _StepShape.StepShape_Array1OfValueQualifier___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepShape_ValueQualifier') -> "void":
        return _StepShape.StepShape_Array1OfValueQualifier_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepShape.StepShape_Array1OfValueQualifier_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfValueQualifier
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepShape_Array1OfValueQualifier_swigregister = _StepShape.StepShape_Array1OfValueQualifier_swigregister
StepShape_Array1OfValueQualifier_swigregister(StepShape_Array1OfValueQualifier)

class StepShape_Block(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Block, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Block, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a block.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Block(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPosition: StepGeom_Axis2Placement3d
        aX: float
        aY: float
        aZ: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Block_Init(self, *args)


    def Position(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement3d >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis2Placement3d>

        """
        return _StepShape.StepShape_Block_Position(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPosition: StepGeom_Axis2Placement3d

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Block_SetPosition(self, *args)


    def SetX(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aX: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Block_SetX(self, *args)


    def SetY(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aY: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Block_SetY(self, *args)


    def SetZ(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aZ: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Block_SetZ(self, *args)


    def X(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_Block_X(self, *args)


    def Y(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_Block_Y(self, *args)


    def Z(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_Block_Z(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Block_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Block
    __del__ = lambda self: None
StepShape_Block_swigregister = _StepShape.StepShape_Block_swigregister
StepShape_Block_swigregister(StepShape_Block)

class StepShape_BooleanOperand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_BooleanOperand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_BooleanOperand, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a booleanoperand selecttype.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_BooleanOperand(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BooleanResult(self, *args) -> "opencascade::handle< StepShape_BooleanResult >":
        """
        Returns value as a booleanresult (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_BooleanResult>

        """
        return _StepShape.StepShape_BooleanOperand_BooleanResult(self, *args)


    def CsgPrimitive(self, *args) -> "StepShape_CsgPrimitive":
        """
        Returns value as a csgprimitive (null if another type) csgprimitive is another select type.

        Returns
        -------
        StepShape_CsgPrimitive

        """
        return _StepShape.StepShape_BooleanOperand_CsgPrimitive(self, *args)


    def HalfSpaceSolid(self, *args) -> "opencascade::handle< StepShape_HalfSpaceSolid >":
        """
        Returns value as a halfspacesolid (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_HalfSpaceSolid>

        """
        return _StepShape.StepShape_BooleanOperand_HalfSpaceSolid(self, *args)


    def SetBooleanResult(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBooleanResult: StepShape_BooleanResult

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanOperand_SetBooleanResult(self, *args)


    def SetCsgPrimitive(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCsgPrimitive: StepShape_CsgPrimitive

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanOperand_SetCsgPrimitive(self, *args)


    def SetHalfSpaceSolid(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aHalfSpaceSolid: StepShape_HalfSpaceSolid

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanOperand_SetHalfSpaceSolid(self, *args)


    def SetSolidModel(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSolidModel: StepShape_SolidModel

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanOperand_SetSolidModel(self, *args)


    def SetTypeOfContent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTypeOfContent: int

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanOperand_SetTypeOfContent(self, *args)


    def SolidModel(self, *args) -> "opencascade::handle< StepShape_SolidModel >":
        """
        Returns value as a solidmodel (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_SolidModel>

        """
        return _StepShape.StepShape_BooleanOperand_SolidModel(self, *args)


    def TypeOfContent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_BooleanOperand_TypeOfContent(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BooleanOperand
    __del__ = lambda self: None
StepShape_BooleanOperand_swigregister = _StepShape.StepShape_BooleanOperand_swigregister
StepShape_BooleanOperand_swigregister(StepShape_BooleanOperand)

class StepShape_BooleanResult(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_BooleanResult, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_BooleanResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a booleanresult.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_BooleanResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FirstOperand(self, *args) -> "StepShape_BooleanOperand":
        """
        No available documentation.

        Returns
        -------
        StepShape_BooleanOperand

        """
        return _StepShape.StepShape_BooleanResult_FirstOperand(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aOperator: StepShape_BooleanOperator
        aFirstOperand: StepShape_BooleanOperand
        aSecondOperand: StepShape_BooleanOperand

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanResult_Init(self, *args)


    def Operator(self, *args) -> "StepShape_BooleanOperator":
        """
        No available documentation.

        Returns
        -------
        StepShape_BooleanOperator

        """
        return _StepShape.StepShape_BooleanResult_Operator(self, *args)


    def SecondOperand(self, *args) -> "StepShape_BooleanOperand":
        """
        No available documentation.

        Returns
        -------
        StepShape_BooleanOperand

        """
        return _StepShape.StepShape_BooleanResult_SecondOperand(self, *args)


    def SetFirstOperand(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFirstOperand: StepShape_BooleanOperand

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanResult_SetFirstOperand(self, *args)


    def SetOperator(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOperator: StepShape_BooleanOperator

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanResult_SetOperator(self, *args)


    def SetSecondOperand(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSecondOperand: StepShape_BooleanOperand

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BooleanResult_SetSecondOperand(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_BooleanResult_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BooleanResult
    __del__ = lambda self: None
StepShape_BooleanResult_swigregister = _StepShape.StepShape_BooleanResult_swigregister
StepShape_BooleanResult_swigregister(StepShape_BooleanResult)

class StepShape_BoxDomain(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_BoxDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_BoxDomain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a boxdomain.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_BoxDomain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Corner(self, *args) -> "opencascade::handle< StepGeom_CartesianPoint >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_CartesianPoint>

        """
        return _StepShape.StepShape_BoxDomain_Corner(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCorner: StepGeom_CartesianPoint
        aXlength: float
        aYlength: float
        aZlength: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BoxDomain_Init(self, *args)


    def SetCorner(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCorner: StepGeom_CartesianPoint

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BoxDomain_SetCorner(self, *args)


    def SetXlength(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aXlength: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BoxDomain_SetXlength(self, *args)


    def SetYlength(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aYlength: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BoxDomain_SetYlength(self, *args)


    def SetZlength(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aZlength: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BoxDomain_SetZlength(self, *args)


    def Xlength(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_BoxDomain_Xlength(self, *args)


    def Ylength(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_BoxDomain_Ylength(self, *args)


    def Zlength(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_BoxDomain_Zlength(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_BoxDomain_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BoxDomain
    __del__ = lambda self: None
StepShape_BoxDomain_swigregister = _StepShape.StepShape_BoxDomain_swigregister
StepShape_BoxDomain_swigregister(StepShape_BoxDomain)

class StepShape_ConnectedFaceShapeRepresentation(OCC.Core.StepRepr.StepRepr_Representation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ConnectedFaceShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ConnectedFaceShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ConnectedFaceShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ConnectedFaceShapeRepresentation
    __del__ = lambda self: None
StepShape_ConnectedFaceShapeRepresentation_swigregister = _StepShape.StepShape_ConnectedFaceShapeRepresentation_swigregister
StepShape_ConnectedFaceShapeRepresentation_swigregister(StepShape_ConnectedFaceShapeRepresentation)

class StepShape_ContextDependentShapeRepresentation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ContextDependentShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ContextDependentShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ContextDependentShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRepRel: StepRepr_ShapeRepresentationRelationship
        aProRel: StepRepr_ProductDefinitionShape

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_Init(self, *args)


    def RepresentationRelation(self, *args) -> "opencascade::handle< StepRepr_ShapeRepresentationRelationship >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepRepr_ShapeRepresentationRelationship>

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_RepresentationRelation(self, *args)


    def RepresentedProductRelation(self, *args) -> "opencascade::handle< StepRepr_ProductDefinitionShape >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepRepr_ProductDefinitionShape>

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_RepresentedProductRelation(self, *args)


    def SetRepresentationRelation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRepRel: StepRepr_ShapeRepresentationRelationship

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_SetRepresentationRelation(self, *args)


    def SetRepresentedProductRelation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aProRel: StepRepr_ProductDefinitionShape

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_SetRepresentedProductRelation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ContextDependentShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ContextDependentShapeRepresentation
    __del__ = lambda self: None
StepShape_ContextDependentShapeRepresentation_swigregister = _StepShape.StepShape_ContextDependentShapeRepresentation_swigregister
StepShape_ContextDependentShapeRepresentation_swigregister(StepShape_ContextDependentShapeRepresentation)

class StepShape_CsgPrimitive(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_CsgPrimitive, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_CsgPrimitive, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a csgprimitive selecttype.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_CsgPrimitive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Block(self, *args) -> "opencascade::handle< StepShape_Block >":
        """
        Returns value as a block (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_Block>

        """
        return _StepShape.StepShape_CsgPrimitive_Block(self, *args)


    def RightAngularWedge(self, *args) -> "opencascade::handle< StepShape_RightAngularWedge >":
        """
        Returns value as a rightangularwedge (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_RightAngularWedge>

        """
        return _StepShape.StepShape_CsgPrimitive_RightAngularWedge(self, *args)


    def RightCircularCone(self, *args) -> "opencascade::handle< StepShape_RightCircularCone >":
        """
        Returns value as a rightcircularcone (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_RightCircularCone>

        """
        return _StepShape.StepShape_CsgPrimitive_RightCircularCone(self, *args)


    def RightCircularCylinder(self, *args) -> "opencascade::handle< StepShape_RightCircularCylinder >":
        """
        Returns value as a rightcircularcylinder (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_RightCircularCylinder>

        """
        return _StepShape.StepShape_CsgPrimitive_RightCircularCylinder(self, *args)


    def Sphere(self, *args) -> "opencascade::handle< StepShape_Sphere >":
        """
        Returns value as a sphere (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_Sphere>

        """
        return _StepShape.StepShape_CsgPrimitive_Sphere(self, *args)


    def Torus(self, *args) -> "opencascade::handle< StepShape_Torus >":
        """
        Returns value as a torus (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_Torus>

        """
        return _StepShape.StepShape_CsgPrimitive_Torus(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CsgPrimitive
    __del__ = lambda self: None
StepShape_CsgPrimitive_swigregister = _StepShape.StepShape_CsgPrimitive_swigregister
StepShape_CsgPrimitive_swigregister(StepShape_CsgPrimitive)

class StepShape_CsgSelect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_CsgSelect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_CsgSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a csgselect selecttype.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_CsgSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BooleanResult(self, *args) -> "opencascade::handle< StepShape_BooleanResult >":
        """
        Returns value as a booleanresult (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_BooleanResult>

        """
        return _StepShape.StepShape_CsgSelect_BooleanResult(self, *args)


    def CsgPrimitive(self, *args) -> "StepShape_CsgPrimitive":
        """
        Returns value as a csgprimitive (null if another type).

        Returns
        -------
        StepShape_CsgPrimitive

        """
        return _StepShape.StepShape_CsgSelect_CsgPrimitive(self, *args)


    def SetBooleanResult(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBooleanResult: StepShape_BooleanResult

        Returns
        -------
        None

        """
        return _StepShape.StepShape_CsgSelect_SetBooleanResult(self, *args)


    def SetCsgPrimitive(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCsgPrimitive: StepShape_CsgPrimitive

        Returns
        -------
        None

        """
        return _StepShape.StepShape_CsgSelect_SetCsgPrimitive(self, *args)


    def SetTypeOfContent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTypeOfContent: int

        Returns
        -------
        None

        """
        return _StepShape.StepShape_CsgSelect_SetTypeOfContent(self, *args)


    def TypeOfContent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_CsgSelect_TypeOfContent(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CsgSelect
    __del__ = lambda self: None
StepShape_CsgSelect_swigregister = _StepShape.StepShape_CsgSelect_swigregister
StepShape_CsgSelect_swigregister(StepShape_CsgSelect)

class StepShape_DefinitionalRepresentationAndShapeRepresentation(OCC.Core.StepRepr.StepRepr_DefinitionalRepresentation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_DefinitionalRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_DefinitionalRepresentationAndShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_DefinitionalRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_DefinitionalRepresentationAndShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_DefinitionalRepresentationAndShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DefinitionalRepresentationAndShapeRepresentation
    __del__ = lambda self: None
StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister = _StepShape.StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister
StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister(StepShape_DefinitionalRepresentationAndShapeRepresentation)

class StepShape_DimensionalCharacteristic(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_DimensionalCharacteristic, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_DimensionalCharacteristic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_DimensionalCharacteristic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DimensionalLocation(self, *args) -> "opencascade::handle< StepShape_DimensionalLocation >":
        """
        Returns value as dimensionallocation (or null if another type).

        Returns
        -------
        opencascade::handle<StepShape_DimensionalLocation>

        """
        return _StepShape.StepShape_DimensionalCharacteristic_DimensionalLocation(self, *args)


    def DimensionalSize(self, *args) -> "opencascade::handle< StepShape_DimensionalSize >":
        """
        Returns value as dimensionalsize (or null if another type).

        Returns
        -------
        opencascade::handle<StepShape_DimensionalSize>

        """
        return _StepShape.StepShape_DimensionalCharacteristic_DimensionalSize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalCharacteristic
    __del__ = lambda self: None
StepShape_DimensionalCharacteristic_swigregister = _StepShape.StepShape_DimensionalCharacteristic_swigregister
StepShape_DimensionalCharacteristic_swigregister(StepShape_DimensionalCharacteristic)

class StepShape_DimensionalCharacteristicRepresentation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_DimensionalCharacteristicRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_DimensionalCharacteristicRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_DimensionalCharacteristicRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimension(self, *args) -> "StepShape_DimensionalCharacteristic":
        """
        Returns field dimension.

        Returns
        -------
        StepShape_DimensionalCharacteristic

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_Dimension(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aDimension: StepShape_DimensionalCharacteristic
        aRepresentation: StepShape_ShapeDimensionRepresentation

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_Init(self, *args)


    def Representation(self, *args) -> "opencascade::handle< StepShape_ShapeDimensionRepresentation >":
        """
        Returns field representation.

        Returns
        -------
        opencascade::handle<StepShape_ShapeDimensionRepresentation>

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_Representation(self, *args)


    def SetDimension(self, *args) -> "void":
        """
        Set field dimension.

        Parameters
        ----------
        Dimension: StepShape_DimensionalCharacteristic

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_SetDimension(self, *args)


    def SetRepresentation(self, *args) -> "void":
        """
        Set field representation.

        Parameters
        ----------
        Representation: StepShape_ShapeDimensionRepresentation

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_SetRepresentation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalCharacteristicRepresentation
    __del__ = lambda self: None
StepShape_DimensionalCharacteristicRepresentation_swigregister = _StepShape.StepShape_DimensionalCharacteristicRepresentation_swigregister
StepShape_DimensionalCharacteristicRepresentation_swigregister(StepShape_DimensionalCharacteristicRepresentation)

class StepShape_DimensionalLocation(OCC.Core.StepRepr.StepRepr_ShapeAspectRelationship):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspectRelationship]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_DimensionalLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_ShapeAspectRelationship]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_DimensionalLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_DimensionalLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_DimensionalLocation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalLocation
    __del__ = lambda self: None
StepShape_DimensionalLocation_swigregister = _StepShape.StepShape_DimensionalLocation_swigregister
StepShape_DimensionalLocation_swigregister(StepShape_DimensionalLocation)

class StepShape_DimensionalSize(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_DimensionalSize, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_DimensionalSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_DimensionalSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AppliesTo(self, *args) -> "opencascade::handle< StepRepr_ShapeAspect >":
        """
        Returns field appliesto.

        Returns
        -------
        opencascade::handle<StepRepr_ShapeAspect>

        """
        return _StepShape.StepShape_DimensionalSize_AppliesTo(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAppliesTo: StepRepr_ShapeAspect
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalSize_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_DimensionalSize_Name(self, *args)


    def SetAppliesTo(self, *args) -> "void":
        """
        Set field appliesto.

        Parameters
        ----------
        AppliesTo: StepRepr_ShapeAspect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalSize_SetAppliesTo(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalSize_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_DimensionalSize_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalSize
    __del__ = lambda self: None
StepShape_DimensionalSize_swigregister = _StepShape.StepShape_DimensionalSize_swigregister
StepShape_DimensionalSize_swigregister(StepShape_DimensionalSize)

class StepShape_EdgeBasedWireframeModel(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_EdgeBasedWireframeModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_EdgeBasedWireframeModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_EdgeBasedWireframeModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EbwmBoundary(self, *args) -> "opencascade::handle< StepShape_HArray1OfConnectedEdgeSet >":
        """
        Returns field ebwmboundary.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfConnectedEdgeSet>

        """
        return _StepShape.StepShape_EdgeBasedWireframeModel_EbwmBoundary(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aEbwmBoundary: StepShape_HArray1OfConnectedEdgeSet

        Returns
        -------
        None

        """
        return _StepShape.StepShape_EdgeBasedWireframeModel_Init(self, *args)


    def SetEbwmBoundary(self, *args) -> "void":
        """
        Set field ebwmboundary.

        Parameters
        ----------
        EbwmBoundary: StepShape_HArray1OfConnectedEdgeSet

        Returns
        -------
        None

        """
        return _StepShape.StepShape_EdgeBasedWireframeModel_SetEbwmBoundary(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_EdgeBasedWireframeModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_EdgeBasedWireframeModel
    __del__ = lambda self: None
StepShape_EdgeBasedWireframeModel_swigregister = _StepShape.StepShape_EdgeBasedWireframeModel_swigregister
StepShape_EdgeBasedWireframeModel_swigregister(StepShape_EdgeBasedWireframeModel)

class StepShape_FaceBasedSurfaceModel(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_FaceBasedSurfaceModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_FaceBasedSurfaceModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_FaceBasedSurfaceModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FbsmFaces(self, *args) -> "opencascade::handle< StepShape_HArray1OfConnectedFaceSet >":
        """
        Returns field fbsmfaces.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfConnectedFaceSet>

        """
        return _StepShape.StepShape_FaceBasedSurfaceModel_FbsmFaces(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFbsmFaces: StepShape_HArray1OfConnectedFaceSet

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FaceBasedSurfaceModel_Init(self, *args)


    def SetFbsmFaces(self, *args) -> "void":
        """
        Set field fbsmfaces.

        Parameters
        ----------
        FbsmFaces: StepShape_HArray1OfConnectedFaceSet

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FaceBasedSurfaceModel_SetFbsmFaces(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_FaceBasedSurfaceModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FaceBasedSurfaceModel
    __del__ = lambda self: None
StepShape_FaceBasedSurfaceModel_swigregister = _StepShape.StepShape_FaceBasedSurfaceModel_swigregister
StepShape_FaceBasedSurfaceModel_swigregister(StepShape_FaceBasedSurfaceModel)

class StepShape_GeometricSet(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_GeometricSet, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_GeometricSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a geometricset.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_GeometricSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Elements(self, *args) -> "opencascade::handle< StepShape_HArray1OfGeometricSetSelect >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfGeometricSetSelect>

        """
        return _StepShape.StepShape_GeometricSet_Elements(self, *args)


    def ElementsValue(self, *args) -> "StepShape_GeometricSetSelect":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepShape_GeometricSetSelect

        """
        return _StepShape.StepShape_GeometricSet_ElementsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aElements: StepShape_HArray1OfGeometricSetSelect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_GeometricSet_Init(self, *args)


    def NbElements(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_GeometricSet_NbElements(self, *args)


    def SetElements(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aElements: StepShape_HArray1OfGeometricSetSelect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_GeometricSet_SetElements(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_GeometricSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricSet
    __del__ = lambda self: None
StepShape_GeometricSet_swigregister = _StepShape.StepShape_GeometricSet_swigregister
StepShape_GeometricSet_swigregister(StepShape_GeometricSet)

class StepShape_GeometricSetSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_GeometricSetSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_GeometricSetSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a geometricsetselect selecttype.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_GeometricSetSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Curve(self, *args) -> "opencascade::handle< StepGeom_Curve >":
        """
        Returns value as a curve (null if another type).

        Returns
        -------
        opencascade::handle<StepGeom_Curve>

        """
        return _StepShape.StepShape_GeometricSetSelect_Curve(self, *args)


    def Point(self, *args) -> "opencascade::handle< StepGeom_Point >":
        """
        Returns value as a point (null if another type).

        Returns
        -------
        opencascade::handle<StepGeom_Point>

        """
        return _StepShape.StepShape_GeometricSetSelect_Point(self, *args)


    def Surface(self, *args) -> "opencascade::handle< StepGeom_Surface >":
        """
        Returns value as a surface (null if another type).

        Returns
        -------
        opencascade::handle<StepGeom_Surface>

        """
        return _StepShape.StepShape_GeometricSetSelect_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricSetSelect
    __del__ = lambda self: None
StepShape_GeometricSetSelect_swigregister = _StepShape.StepShape_GeometricSetSelect_swigregister
StepShape_GeometricSetSelect_swigregister(StepShape_GeometricSetSelect)

class StepShape_HalfSpaceSolid(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HalfSpaceSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HalfSpaceSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a halfspacesolid.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_HalfSpaceSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AgreementFlag(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_HalfSpaceSolid_AgreementFlag(self, *args)


    def BaseSurface(self, *args) -> "opencascade::handle< StepGeom_Surface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Surface>

        """
        return _StepShape.StepShape_HalfSpaceSolid_BaseSurface(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aBaseSurface: StepGeom_Surface
        aAgreementFlag: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_HalfSpaceSolid_Init(self, *args)


    def SetAgreementFlag(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAgreementFlag: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_HalfSpaceSolid_SetAgreementFlag(self, *args)


    def SetBaseSurface(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBaseSurface: StepGeom_Surface

        Returns
        -------
        None

        """
        return _StepShape.StepShape_HalfSpaceSolid_SetBaseSurface(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HalfSpaceSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HalfSpaceSolid
    __del__ = lambda self: None
StepShape_HalfSpaceSolid_swigregister = _StepShape.StepShape_HalfSpaceSolid_swigregister
StepShape_HalfSpaceSolid_swigregister(StepShape_HalfSpaceSolid)

class StepShape_LimitsAndFits(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_LimitsAndFits, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_LimitsAndFits, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_LimitsAndFits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FormVariance(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_LimitsAndFits_FormVariance(self, *args)


    def Grade(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_LimitsAndFits_Grade(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        form_variance: TCollection_HAsciiString
        zone_variance: TCollection_HAsciiString
        grade: TCollection_HAsciiString
        source: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LimitsAndFits_Init(self, *args)


    def SetFormVariance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        form_variance: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LimitsAndFits_SetFormVariance(self, *args)


    def SetGrade(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        grade: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LimitsAndFits_SetGrade(self, *args)


    def SetSource(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        source: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LimitsAndFits_SetSource(self, *args)


    def SetZoneVariance(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        zone_variance: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LimitsAndFits_SetZoneVariance(self, *args)


    def Source(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_LimitsAndFits_Source(self, *args)


    def ZoneVariance(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_LimitsAndFits_ZoneVariance(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_LimitsAndFits_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_LimitsAndFits
    __del__ = lambda self: None
StepShape_LimitsAndFits_swigregister = _StepShape.StepShape_LimitsAndFits_swigregister
StepShape_LimitsAndFits_swigregister(StepShape_LimitsAndFits)

class StepShape_MeasureQualification(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_MeasureQualification, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_MeasureQualification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_MeasureQualification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_MeasureQualification_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_HAsciiString
        description: TCollection_HAsciiString
        qualified_measure: StepBasic_MeasureWithUnit
        qualifiers: StepShape_HArray1OfValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureQualification_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_MeasureQualification_Name(self, *args)


    def NbQualifiers(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_MeasureQualification_NbQualifiers(self, *args)


    def QualifiedMeasure(self, *args) -> "opencascade::handle< StepBasic_MeasureWithUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_MeasureWithUnit>

        """
        return _StepShape.StepShape_MeasureQualification_QualifiedMeasure(self, *args)


    def Qualifiers(self, *args) -> "opencascade::handle< StepShape_HArray1OfValueQualifier >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfValueQualifier>

        """
        return _StepShape.StepShape_MeasureQualification_Qualifiers(self, *args)


    def QualifiersValue(self, *args) -> "StepShape_ValueQualifier":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepShape_ValueQualifier

        """
        return _StepShape.StepShape_MeasureQualification_QualifiersValue(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureQualification_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureQualification_SetName(self, *args)


    def SetQualifiedMeasure(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        qualified_measure: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureQualification_SetQualifiedMeasure(self, *args)


    def SetQualifiers(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        qualifiers: StepShape_HArray1OfValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureQualification_SetQualifiers(self, *args)


    def SetQualifiersValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        num: int
        aqualifier: StepShape_ValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureQualification_SetQualifiersValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_MeasureQualification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_MeasureQualification
    __del__ = lambda self: None
StepShape_MeasureQualification_swigregister = _StepShape.StepShape_MeasureQualification_swigregister
StepShape_MeasureQualification_swigregister(StepShape_MeasureQualification)

class StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem(OCC.Core.StepRepr.StepRepr_RepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aValueComponent: StepBasic_MeasureValueMember
        aUnitComponent: StepBasic_Unit
        qualifiers: StepShape_HArray1OfValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Init(self, *args)


    def Measure(self, *args) -> "opencascade::handle< StepBasic_MeasureWithUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_MeasureWithUnit>

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Measure(self, *args)


    def NbQualifiers(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_NbQualifiers(self, *args)


    def Qualifiers(self, *args) -> "opencascade::handle< StepShape_HArray1OfValueQualifier >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfValueQualifier>

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Qualifiers(self, *args)


    def QualifiersValue(self, *args) -> "StepShape_ValueQualifier":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepShape_ValueQualifier

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_QualifiersValue(self, *args)


    def SetMeasure(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Measure: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetMeasure(self, *args)


    def SetQualifiers(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        qualifiers: StepShape_HArray1OfValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetQualifiers(self, *args)


    def SetQualifiersValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        num: int
        aqualifier: StepShape_ValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetQualifiersValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem
    __del__ = lambda self: None
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister = _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister(StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)

class StepShape_PlusMinusTolerance(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_PlusMinusTolerance, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_PlusMinusTolerance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_PlusMinusTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        range: StepShape_ToleranceMethodDefinition
        toleranced_dimension: StepShape_DimensionalCharacteristic

        Returns
        -------
        None

        """
        return _StepShape.StepShape_PlusMinusTolerance_Init(self, *args)


    def Range(self, *args) -> "StepShape_ToleranceMethodDefinition":
        """
        No available documentation.

        Returns
        -------
        StepShape_ToleranceMethodDefinition

        """
        return _StepShape.StepShape_PlusMinusTolerance_Range(self, *args)


    def SetRange(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        range: StepShape_ToleranceMethodDefinition

        Returns
        -------
        None

        """
        return _StepShape.StepShape_PlusMinusTolerance_SetRange(self, *args)


    def SetTolerancedDimension(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        toleranced_dimension: StepShape_DimensionalCharacteristic

        Returns
        -------
        None

        """
        return _StepShape.StepShape_PlusMinusTolerance_SetTolerancedDimension(self, *args)


    def TolerancedDimension(self, *args) -> "StepShape_DimensionalCharacteristic":
        """
        No available documentation.

        Returns
        -------
        StepShape_DimensionalCharacteristic

        """
        return _StepShape.StepShape_PlusMinusTolerance_TolerancedDimension(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_PlusMinusTolerance_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_PlusMinusTolerance
    __del__ = lambda self: None
StepShape_PlusMinusTolerance_swigregister = _StepShape.StepShape_PlusMinusTolerance_swigregister
StepShape_PlusMinusTolerance_swigregister(StepShape_PlusMinusTolerance)

class StepShape_PrecisionQualifier(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_PrecisionQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_PrecisionQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_PrecisionQualifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        precision_value: int

        Returns
        -------
        None

        """
        return _StepShape.StepShape_PrecisionQualifier_Init(self, *args)


    def PrecisionValue(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_PrecisionQualifier_PrecisionValue(self, *args)


    def SetPrecisionValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        precision_value: int

        Returns
        -------
        None

        """
        return _StepShape.StepShape_PrecisionQualifier_SetPrecisionValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_PrecisionQualifier_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_PrecisionQualifier
    __del__ = lambda self: None
StepShape_PrecisionQualifier_swigregister = _StepShape.StepShape_PrecisionQualifier_swigregister
StepShape_PrecisionQualifier_swigregister(StepShape_PrecisionQualifier)

class StepShape_QualifiedRepresentationItem(OCC.Core.StepRepr.StepRepr_RepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_QualifiedRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_QualifiedRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_QualifiedRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        qualifiers: StepShape_HArray1OfValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_Init(self, *args)


    def NbQualifiers(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_NbQualifiers(self, *args)


    def Qualifiers(self, *args) -> "opencascade::handle< StepShape_HArray1OfValueQualifier >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfValueQualifier>

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_Qualifiers(self, *args)


    def QualifiersValue(self, *args) -> "StepShape_ValueQualifier":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepShape_ValueQualifier

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_QualifiersValue(self, *args)


    def SetQualifiers(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        qualifiers: StepShape_HArray1OfValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_SetQualifiers(self, *args)


    def SetQualifiersValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        num: int
        aqualifier: StepShape_ValueQualifier

        Returns
        -------
        None

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_SetQualifiersValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_QualifiedRepresentationItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_QualifiedRepresentationItem
    __del__ = lambda self: None
StepShape_QualifiedRepresentationItem_swigregister = _StepShape.StepShape_QualifiedRepresentationItem_swigregister
StepShape_QualifiedRepresentationItem_swigregister(StepShape_QualifiedRepresentationItem)

class StepShape_ReversibleTopologyItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ReversibleTopologyItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ReversibleTopologyItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a reversibletopologyitem selecttype.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ReversibleTopologyItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ClosedShell(self, *args) -> "opencascade::handle< StepShape_ClosedShell >":
        """
        Returns value as a closedshell (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_ClosedShell>

        """
        return _StepShape.StepShape_ReversibleTopologyItem_ClosedShell(self, *args)


    def Edge(self, *args) -> "opencascade::handle< StepShape_Edge >":
        """
        Returns value as a edge (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_Edge>

        """
        return _StepShape.StepShape_ReversibleTopologyItem_Edge(self, *args)


    def Face(self, *args) -> "opencascade::handle< StepShape_Face >":
        """
        Returns value as a face (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_Face>

        """
        return _StepShape.StepShape_ReversibleTopologyItem_Face(self, *args)


    def FaceBound(self, *args) -> "opencascade::handle< StepShape_FaceBound >":
        """
        Returns value as a facebound (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_FaceBound>

        """
        return _StepShape.StepShape_ReversibleTopologyItem_FaceBound(self, *args)


    def OpenShell(self, *args) -> "opencascade::handle< StepShape_OpenShell >":
        """
        Returns value as a openshell (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_OpenShell>

        """
        return _StepShape.StepShape_ReversibleTopologyItem_OpenShell(self, *args)


    def Path(self, *args) -> "opencascade::handle< StepShape_Path >":
        """
        Returns value as a path (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_Path>

        """
        return _StepShape.StepShape_ReversibleTopologyItem_Path(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ReversibleTopologyItem
    __del__ = lambda self: None
StepShape_ReversibleTopologyItem_swigregister = _StepShape.StepShape_ReversibleTopologyItem_swigregister
StepShape_ReversibleTopologyItem_swigregister(StepShape_ReversibleTopologyItem)

class StepShape_RightAngularWedge(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_RightAngularWedge, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_RightAngularWedge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a rightangularwedge.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_RightAngularWedge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPosition: StepGeom_Axis2Placement3d
        aX: float
        aY: float
        aZ: float
        aLtx: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightAngularWedge_Init(self, *args)


    def Ltx(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightAngularWedge_Ltx(self, *args)


    def Position(self, *args) -> "opencascade::handle< StepGeom_Axis2Placement3d >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis2Placement3d>

        """
        return _StepShape.StepShape_RightAngularWedge_Position(self, *args)


    def SetLtx(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLtx: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightAngularWedge_SetLtx(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPosition: StepGeom_Axis2Placement3d

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightAngularWedge_SetPosition(self, *args)


    def SetX(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aX: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightAngularWedge_SetX(self, *args)


    def SetY(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aY: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightAngularWedge_SetY(self, *args)


    def SetZ(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aZ: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightAngularWedge_SetZ(self, *args)


    def X(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightAngularWedge_X(self, *args)


    def Y(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightAngularWedge_Y(self, *args)


    def Z(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightAngularWedge_Z(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_RightAngularWedge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RightAngularWedge
    __del__ = lambda self: None
StepShape_RightAngularWedge_swigregister = _StepShape.StepShape_RightAngularWedge_swigregister
StepShape_RightAngularWedge_swigregister(StepShape_RightAngularWedge)

class StepShape_RightCircularCone(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_RightCircularCone, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_RightCircularCone, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a rightcircularcone.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_RightCircularCone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Height(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightCircularCone_Height(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPosition: StepGeom_Axis1Placement
        aHeight: float
        aRadius: float
        aSemiAngle: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCone_Init(self, *args)


    def Position(self, *args) -> "opencascade::handle< StepGeom_Axis1Placement >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis1Placement>

        """
        return _StepShape.StepShape_RightCircularCone_Position(self, *args)


    def Radius(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightCircularCone_Radius(self, *args)


    def SemiAngle(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightCircularCone_SemiAngle(self, *args)


    def SetHeight(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aHeight: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCone_SetHeight(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPosition: StepGeom_Axis1Placement

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCone_SetPosition(self, *args)


    def SetRadius(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRadius: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCone_SetRadius(self, *args)


    def SetSemiAngle(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSemiAngle: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCone_SetSemiAngle(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_RightCircularCone_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RightCircularCone
    __del__ = lambda self: None
StepShape_RightCircularCone_swigregister = _StepShape.StepShape_RightCircularCone_swigregister
StepShape_RightCircularCone_swigregister(StepShape_RightCircularCone)

class StepShape_RightCircularCylinder(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_RightCircularCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_RightCircularCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a rightcircularcylinder.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_RightCircularCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Height(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightCircularCylinder_Height(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPosition: StepGeom_Axis1Placement
        aHeight: float
        aRadius: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCylinder_Init(self, *args)


    def Position(self, *args) -> "opencascade::handle< StepGeom_Axis1Placement >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis1Placement>

        """
        return _StepShape.StepShape_RightCircularCylinder_Position(self, *args)


    def Radius(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RightCircularCylinder_Radius(self, *args)


    def SetHeight(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aHeight: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCylinder_SetHeight(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPosition: StepGeom_Axis1Placement

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCylinder_SetPosition(self, *args)


    def SetRadius(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRadius: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RightCircularCylinder_SetRadius(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_RightCircularCylinder_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RightCircularCylinder
    __del__ = lambda self: None
StepShape_RightCircularCylinder_swigregister = _StepShape.StepShape_RightCircularCylinder_swigregister
StepShape_RightCircularCylinder_swigregister(StepShape_RightCircularCylinder)

class StepShape_ShapeDefinitionRepresentation(OCC.Core.StepRepr.StepRepr_PropertyDefinitionRepresentation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_PropertyDefinitionRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ShapeDefinitionRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_PropertyDefinitionRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ShapeDefinitionRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ShapeDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ShapeDefinitionRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeDefinitionRepresentation
    __del__ = lambda self: None
StepShape_ShapeDefinitionRepresentation_swigregister = _StepShape.StepShape_ShapeDefinitionRepresentation_swigregister
StepShape_ShapeDefinitionRepresentation_swigregister(StepShape_ShapeDefinitionRepresentation)

class StepShape_ShapeDimensionRepresentationItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ShapeDimensionRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ShapeDimensionRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a shapedimensionrepresentationitem select type.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ShapeDimensionRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CompoundRepresentationItem(self, *args) -> "opencascade::handle< StepRepr_CompoundRepresentationItem >":
        """
        Returns value as a compoundrepresentationitem (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_CompoundRepresentationItem>

        """
        return _StepShape.StepShape_ShapeDimensionRepresentationItem_CompoundRepresentationItem(self, *args)


    def DescriptiveRepresentationItem(self, *args) -> "opencascade::handle< StepRepr_DescriptiveRepresentationItem >":
        """
        Returns value as a descriptiverepresentationitem (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_DescriptiveRepresentationItem>

        """
        return _StepShape.StepShape_ShapeDimensionRepresentationItem_DescriptiveRepresentationItem(self, *args)


    def MeasureRepresentationItem(self, *args) -> "opencascade::handle< StepRepr_MeasureRepresentationItem >":
        """
        Returns value as a measurerepresentationitem (null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_MeasureRepresentationItem>

        """
        return _StepShape.StepShape_ShapeDimensionRepresentationItem_MeasureRepresentationItem(self, *args)


    def Placement(self, *args) -> "opencascade::handle< StepGeom_Placement >":
        """
        Returns value as a placement (null if another type).

        Returns
        -------
        opencascade::handle<StepGeom_Placement>

        """
        return _StepShape.StepShape_ShapeDimensionRepresentationItem_Placement(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeDimensionRepresentationItem
    __del__ = lambda self: None
StepShape_ShapeDimensionRepresentationItem_swigregister = _StepShape.StepShape_ShapeDimensionRepresentationItem_swigregister
StepShape_ShapeDimensionRepresentationItem_swigregister(StepShape_ShapeDimensionRepresentationItem)

class StepShape_ShapeRepresentation(OCC.Core.StepRepr.StepRepr_Representation):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_Representation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a shaperepresentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeRepresentation
    __del__ = lambda self: None
StepShape_ShapeRepresentation_swigregister = _StepShape.StepShape_ShapeRepresentation_swigregister
StepShape_ShapeRepresentation_swigregister(StepShape_ShapeRepresentation)

class StepShape_Shell(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Shell, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Shell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a shell selecttype.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Shell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ClosedShell(self, *args) -> "opencascade::handle< StepShape_ClosedShell >":
        """
        Returns value as a closedshell (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_ClosedShell>

        """
        return _StepShape.StepShape_Shell_ClosedShell(self, *args)


    def OpenShell(self, *args) -> "opencascade::handle< StepShape_OpenShell >":
        """
        Returns value as a openshell (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_OpenShell>

        """
        return _StepShape.StepShape_Shell_OpenShell(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Shell
    __del__ = lambda self: None
StepShape_Shell_swigregister = _StepShape.StepShape_Shell_swigregister
StepShape_Shell_swigregister(StepShape_Shell)

class StepShape_ShellBasedSurfaceModel(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ShellBasedSurfaceModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ShellBasedSurfaceModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a shellbasedsurfacemodel.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ShellBasedSurfaceModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSbsmBoundary: StepShape_HArray1OfShell

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_Init(self, *args)


    def NbSbsmBoundary(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_NbSbsmBoundary(self, *args)


    def SbsmBoundary(self, *args) -> "opencascade::handle< StepShape_HArray1OfShell >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfShell>

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_SbsmBoundary(self, *args)


    def SbsmBoundaryValue(self, *args) -> "StepShape_Shell":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        StepShape_Shell

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_SbsmBoundaryValue(self, *args)


    def SetSbsmBoundary(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSbsmBoundary: StepShape_HArray1OfShell

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_SetSbsmBoundary(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ShellBasedSurfaceModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShellBasedSurfaceModel
    __del__ = lambda self: None
StepShape_ShellBasedSurfaceModel_swigregister = _StepShape.StepShape_ShellBasedSurfaceModel_swigregister
StepShape_ShellBasedSurfaceModel_swigregister(StepShape_ShellBasedSurfaceModel)

class StepShape_SolidModel(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_SolidModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_SolidModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a solidmodel.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_SolidModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_SolidModel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SolidModel
    __del__ = lambda self: None
StepShape_SolidModel_swigregister = _StepShape.StepShape_SolidModel_swigregister
StepShape_SolidModel_swigregister(StepShape_SolidModel)

class StepShape_Sphere(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Sphere, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Sphere, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a sphere.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Sphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Centre(self, *args) -> "opencascade::handle< StepGeom_Point >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Point>

        """
        return _StepShape.StepShape_Sphere_Centre(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aRadius: float
        aCentre: StepGeom_Point

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Sphere_Init(self, *args)


    def Radius(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_Sphere_Radius(self, *args)


    def SetCentre(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCentre: StepGeom_Point

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Sphere_SetCentre(self, *args)


    def SetRadius(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRadius: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Sphere_SetRadius(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Sphere_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Sphere
    __del__ = lambda self: None
StepShape_Sphere_swigregister = _StepShape.StepShape_Sphere_swigregister
StepShape_Sphere_swigregister(StepShape_Sphere)

class StepShape_SurfaceModel(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_SurfaceModel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_SurfaceModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a surfacemodel selecttype.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_SurfaceModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ShellBasedSurfaceModel(self, *args) -> "opencascade::handle< StepShape_ShellBasedSurfaceModel >":
        """
        Returns value as a shellbasedsurfacemodel (null if another type).

        Returns
        -------
        opencascade::handle<StepShape_ShellBasedSurfaceModel>

        """
        return _StepShape.StepShape_SurfaceModel_ShellBasedSurfaceModel(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SurfaceModel
    __del__ = lambda self: None
StepShape_SurfaceModel_swigregister = _StepShape.StepShape_SurfaceModel_swigregister
StepShape_SurfaceModel_swigregister(StepShape_SurfaceModel)

class StepShape_ToleranceMethodDefinition(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ToleranceMethodDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ToleranceMethodDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ToleranceMethodDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LimitsAndFits(self, *args) -> "opencascade::handle< StepShape_LimitsAndFits >":
        """
        Returns value as limitsandfits.

        Returns
        -------
        opencascade::handle<StepShape_LimitsAndFits>

        """
        return _StepShape.StepShape_ToleranceMethodDefinition_LimitsAndFits(self, *args)


    def ToleranceValue(self, *args) -> "opencascade::handle< StepShape_ToleranceValue >":
        """
        Returns value as tolerancevalue.

        Returns
        -------
        opencascade::handle<StepShape_ToleranceValue>

        """
        return _StepShape.StepShape_ToleranceMethodDefinition_ToleranceValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ToleranceMethodDefinition
    __del__ = lambda self: None
StepShape_ToleranceMethodDefinition_swigregister = _StepShape.StepShape_ToleranceMethodDefinition_swigregister
StepShape_ToleranceMethodDefinition_swigregister(StepShape_ToleranceMethodDefinition)

class StepShape_ToleranceValue(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ToleranceValue, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ToleranceValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ToleranceValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        lower_bound: Standard_Transient
        upper_bound: Standard_Transient

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ToleranceValue_Init(self, *args)


    def LowerBound(self, *args) -> "opencascade::handle< Standard_Transient >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Standard_Transient>

        """
        return _StepShape.StepShape_ToleranceValue_LowerBound(self, *args)


    def SetLowerBound(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        lower_bound: Standard_Transient

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ToleranceValue_SetLowerBound(self, *args)


    def SetUpperBound(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        upper_bound: Standard_Transient

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ToleranceValue_SetUpperBound(self, *args)


    def UpperBound(self, *args) -> "opencascade::handle< Standard_Transient >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Standard_Transient>

        """
        return _StepShape.StepShape_ToleranceValue_UpperBound(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ToleranceValue_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ToleranceValue
    __del__ = lambda self: None
StepShape_ToleranceValue_swigregister = _StepShape.StepShape_ToleranceValue_swigregister
StepShape_ToleranceValue_swigregister(StepShape_ToleranceValue)

class StepShape_TopologicalRepresentationItem(OCC.Core.StepRepr.StepRepr_RepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_TopologicalRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepRepr.StepRepr_RepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_TopologicalRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a topologicalrepresentationitem.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_TopologicalRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_TopologicalRepresentationItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_TopologicalRepresentationItem
    __del__ = lambda self: None
StepShape_TopologicalRepresentationItem_swigregister = _StepShape.StepShape_TopologicalRepresentationItem_swigregister
StepShape_TopologicalRepresentationItem_swigregister(StepShape_TopologicalRepresentationItem)

class StepShape_Torus(OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Torus, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepGeom.StepGeom_GeometricRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Torus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a torus.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Torus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPosition: StepGeom_Axis1Placement
        aMajorRadius: float
        aMinorRadius: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Torus_Init(self, *args)


    def MajorRadius(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_Torus_MajorRadius(self, *args)


    def MinorRadius(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_Torus_MinorRadius(self, *args)


    def Position(self, *args) -> "opencascade::handle< StepGeom_Axis1Placement >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis1Placement>

        """
        return _StepShape.StepShape_Torus_Position(self, *args)


    def SetMajorRadius(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMajorRadius: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Torus_SetMajorRadius(self, *args)


    def SetMinorRadius(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMinorRadius: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Torus_SetMinorRadius(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPosition: StepGeom_Axis1Placement

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Torus_SetPosition(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Torus_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Torus
    __del__ = lambda self: None
StepShape_Torus_swigregister = _StepShape.StepShape_Torus_swigregister
StepShape_Torus_swigregister(StepShape_Torus)

class StepShape_TypeQualifier(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_TypeQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_TypeQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_TypeQualifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_TypeQualifier_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_TypeQualifier_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_TypeQualifier_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_TypeQualifier_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_TypeQualifier
    __del__ = lambda self: None
StepShape_TypeQualifier_swigregister = _StepShape.StepShape_TypeQualifier_swigregister
StepShape_TypeQualifier_swigregister(StepShape_TypeQualifier)

class StepShape_ValueFormatTypeQualifier(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ValueFormatTypeQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ValueFormatTypeQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ValueFormatTypeQualifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FormatType(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field formattype.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepShape.StepShape_ValueFormatTypeQualifier_FormatType(self, *args)


    def Init(self, *args) -> "void":
        """
        Init all field own and inherited.

        Parameters
        ----------
        theFormatType: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ValueFormatTypeQualifier_Init(self, *args)


    def SetFormatType(self, *args) -> "void":
        """
        Set field formattype.

        Parameters
        ----------
        theFormatType: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ValueFormatTypeQualifier_SetFormatType(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ValueFormatTypeQualifier_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ValueFormatTypeQualifier
    __del__ = lambda self: None
StepShape_ValueFormatTypeQualifier_swigregister = _StepShape.StepShape_ValueFormatTypeQualifier_swigregister
StepShape_ValueFormatTypeQualifier_swigregister(StepShape_ValueFormatTypeQualifier)

class StepShape_ValueQualifier(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ValueQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ValueQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ValueQualifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PrecisionQualifier(self, *args) -> "opencascade::handle< StepShape_PrecisionQualifier >":
        """
        Returns value as precisionqualifier.

        Returns
        -------
        opencascade::handle<StepShape_PrecisionQualifier>

        """
        return _StepShape.StepShape_ValueQualifier_PrecisionQualifier(self, *args)


    def TypeQualifier(self, *args) -> "opencascade::handle< StepShape_TypeQualifier >":
        """
        Returns value as typequalifier.

        Returns
        -------
        opencascade::handle<StepShape_TypeQualifier>

        """
        return _StepShape.StepShape_ValueQualifier_TypeQualifier(self, *args)


    def ValueFormatTypeQualifier(self, *args) -> "opencascade::handle< StepShape_ValueFormatTypeQualifier >":
        """
        Returns value as valueformattypequalifier.

        Returns
        -------
        opencascade::handle<StepShape_ValueFormatTypeQualifier>

        """
        return _StepShape.StepShape_ValueQualifier_ValueFormatTypeQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ValueQualifier
    __del__ = lambda self: None
StepShape_ValueQualifier_swigregister = _StepShape.StepShape_ValueQualifier_swigregister
StepShape_ValueQualifier_swigregister(StepShape_ValueQualifier)

class StepShape_AdvancedBrepShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_AdvancedBrepShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_AdvancedBrepShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a advancedbrepshaperepresentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_AdvancedBrepShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_AdvancedBrepShapeRepresentation
    __del__ = lambda self: None
StepShape_AdvancedBrepShapeRepresentation_swigregister = _StepShape.StepShape_AdvancedBrepShapeRepresentation_swigregister
StepShape_AdvancedBrepShapeRepresentation_swigregister(StepShape_AdvancedBrepShapeRepresentation)

class StepShape_AngularLocation(StepShape_DimensionalLocation):
    __swig_setmethods__ = {}
    for _s in [StepShape_DimensionalLocation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_AngularLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_DimensionalLocation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_AngularLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_AngularLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AngleSelection(self, *args) -> "StepShape_AngleRelator":
        """
        Returns field angleselection.

        Returns
        -------
        StepShape_AngleRelator

        """
        return _StepShape.StepShape_AngularLocation_AngleSelection(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aShapeAspectRelationship_Name: TCollection_HAsciiString
        hasShapeAspectRelationship_Description: bool
        aShapeAspectRelationship_Description: TCollection_HAsciiString
        aShapeAspectRelationship_RelatingShapeAspect: StepRepr_ShapeAspect
        aShapeAspectRelationship_RelatedShapeAspect: StepRepr_ShapeAspect
        aAngleSelection: StepShape_AngleRelator

        Returns
        -------
        None

        """
        return _StepShape.StepShape_AngularLocation_Init(self, *args)


    def SetAngleSelection(self, *args) -> "void":
        """
        Set field angleselection.

        Parameters
        ----------
        AngleSelection: StepShape_AngleRelator

        Returns
        -------
        None

        """
        return _StepShape.StepShape_AngularLocation_SetAngleSelection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_AngularLocation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_AngularLocation
    __del__ = lambda self: None
StepShape_AngularLocation_swigregister = _StepShape.StepShape_AngularLocation_swigregister
StepShape_AngularLocation_swigregister(StepShape_AngularLocation)

class StepShape_AngularSize(StepShape_DimensionalSize):
    __swig_setmethods__ = {}
    for _s in [StepShape_DimensionalSize]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_AngularSize, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_DimensionalSize]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_AngularSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_AngularSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AngleSelection(self, *args) -> "StepShape_AngleRelator":
        """
        Returns field angleselection.

        Returns
        -------
        StepShape_AngleRelator

        """
        return _StepShape.StepShape_AngularSize_AngleSelection(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aDimensionalSize_AppliesTo: StepRepr_ShapeAspect
        aDimensionalSize_Name: TCollection_HAsciiString
        aAngleSelection: StepShape_AngleRelator

        Returns
        -------
        None

        """
        return _StepShape.StepShape_AngularSize_Init(self, *args)


    def SetAngleSelection(self, *args) -> "void":
        """
        Set field angleselection.

        Parameters
        ----------
        AngleSelection: StepShape_AngleRelator

        Returns
        -------
        None

        """
        return _StepShape.StepShape_AngularSize_SetAngleSelection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_AngularSize_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_AngularSize
    __del__ = lambda self: None
StepShape_AngularSize_swigregister = _StepShape.StepShape_AngularSize_swigregister
StepShape_AngularSize_swigregister(StepShape_AngularSize)

class StepShape_BoxedHalfSpace(StepShape_HalfSpaceSolid):
    __swig_setmethods__ = {}
    for _s in [StepShape_HalfSpaceSolid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_BoxedHalfSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_HalfSpaceSolid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_BoxedHalfSpace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a boxedhalfspace.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_BoxedHalfSpace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Enclosure(self, *args) -> "opencascade::handle< StepShape_BoxDomain >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_BoxDomain>

        """
        return _StepShape.StepShape_BoxedHalfSpace_Enclosure(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aBaseSurface: StepGeom_Surface
        aAgreementFlag: bool
        aEnclosure: StepShape_BoxDomain

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BoxedHalfSpace_Init(self, *args)


    def SetEnclosure(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aEnclosure: StepShape_BoxDomain

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BoxedHalfSpace_SetEnclosure(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_BoxedHalfSpace_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BoxedHalfSpace
    __del__ = lambda self: None
StepShape_BoxedHalfSpace_swigregister = _StepShape.StepShape_BoxedHalfSpace_swigregister
StepShape_BoxedHalfSpace_swigregister(StepShape_BoxedHalfSpace)

class StepShape_CompoundShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_CompoundShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_CompoundShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_CompoundShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_CompoundShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CompoundShapeRepresentation
    __del__ = lambda self: None
StepShape_CompoundShapeRepresentation_swigregister = _StepShape.StepShape_CompoundShapeRepresentation_swigregister
StepShape_CompoundShapeRepresentation_swigregister(StepShape_CompoundShapeRepresentation)

class StepShape_ConnectedEdgeSet(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ConnectedEdgeSet, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ConnectedEdgeSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ConnectedEdgeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CesEdges(self, *args) -> "opencascade::handle< StepShape_HArray1OfEdge >":
        """
        Returns field cesedges.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfEdge>

        """
        return _StepShape.StepShape_ConnectedEdgeSet_CesEdges(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aCesEdges: StepShape_HArray1OfEdge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ConnectedEdgeSet_Init(self, *args)


    def SetCesEdges(self, *args) -> "void":
        """
        Set field cesedges.

        Parameters
        ----------
        CesEdges: StepShape_HArray1OfEdge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ConnectedEdgeSet_SetCesEdges(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ConnectedEdgeSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ConnectedEdgeSet
    __del__ = lambda self: None
StepShape_ConnectedEdgeSet_swigregister = _StepShape.StepShape_ConnectedEdgeSet_swigregister
StepShape_ConnectedEdgeSet_swigregister(StepShape_ConnectedEdgeSet)

class StepShape_ConnectedFaceSet(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ConnectedFaceSet, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ConnectedFaceSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a connectedfaceset.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ConnectedFaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CfsFaces(self, *args) -> "opencascade::handle< StepShape_HArray1OfFace >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfFace>

        """
        return _StepShape.StepShape_ConnectedFaceSet_CfsFaces(self, *args)


    def CfsFacesValue(self, *args) -> "opencascade::handle< StepShape_Face >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepShape_Face>

        """
        return _StepShape.StepShape_ConnectedFaceSet_CfsFacesValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aCfsFaces: StepShape_HArray1OfFace

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ConnectedFaceSet_Init(self, *args)


    def NbCfsFaces(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_ConnectedFaceSet_NbCfsFaces(self, *args)


    def SetCfsFaces(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCfsFaces: StepShape_HArray1OfFace

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ConnectedFaceSet_SetCfsFaces(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ConnectedFaceSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ConnectedFaceSet
    __del__ = lambda self: None
StepShape_ConnectedFaceSet_swigregister = _StepShape.StepShape_ConnectedFaceSet_swigregister
StepShape_ConnectedFaceSet_swigregister(StepShape_ConnectedFaceSet)

class StepShape_CsgShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_CsgShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_CsgShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a csgshaperepresentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_CsgShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_CsgShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CsgShapeRepresentation
    __del__ = lambda self: None
StepShape_CsgShapeRepresentation_swigregister = _StepShape.StepShape_CsgShapeRepresentation_swigregister
StepShape_CsgShapeRepresentation_swigregister(StepShape_CsgShapeRepresentation)

class StepShape_CsgSolid(StepShape_SolidModel):
    __swig_setmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_CsgSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_CsgSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a csgsolid.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_CsgSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aTreeRootExpression: StepShape_CsgSelect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_CsgSolid_Init(self, *args)


    def SetTreeRootExpression(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTreeRootExpression: StepShape_CsgSelect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_CsgSolid_SetTreeRootExpression(self, *args)


    def TreeRootExpression(self, *args) -> "StepShape_CsgSelect":
        """
        No available documentation.

        Returns
        -------
        StepShape_CsgSelect

        """
        return _StepShape.StepShape_CsgSolid_TreeRootExpression(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_CsgSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CsgSolid
    __del__ = lambda self: None
StepShape_CsgSolid_swigregister = _StepShape.StepShape_CsgSolid_swigregister
StepShape_CsgSolid_swigregister(StepShape_CsgSolid)

class StepShape_DimensionalLocationWithPath(StepShape_DimensionalLocation):
    __swig_setmethods__ = {}
    for _s in [StepShape_DimensionalLocation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_DimensionalLocationWithPath, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_DimensionalLocation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_DimensionalLocationWithPath, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_DimensionalLocationWithPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aShapeAspectRelationship_Name: TCollection_HAsciiString
        hasShapeAspectRelationship_Description: bool
        aShapeAspectRelationship_Description: TCollection_HAsciiString
        aShapeAspectRelationship_RelatingShapeAspect: StepRepr_ShapeAspect
        aShapeAspectRelationship_RelatedShapeAspect: StepRepr_ShapeAspect
        aPath: StepRepr_ShapeAspect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalLocationWithPath_Init(self, *args)


    def Path(self, *args) -> "opencascade::handle< StepRepr_ShapeAspect >":
        """
        Returns field path.

        Returns
        -------
        opencascade::handle<StepRepr_ShapeAspect>

        """
        return _StepShape.StepShape_DimensionalLocationWithPath_Path(self, *args)


    def SetPath(self, *args) -> "void":
        """
        Set field path.

        Parameters
        ----------
        Path: StepRepr_ShapeAspect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalLocationWithPath_SetPath(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_DimensionalLocationWithPath_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalLocationWithPath
    __del__ = lambda self: None
StepShape_DimensionalLocationWithPath_swigregister = _StepShape.StepShape_DimensionalLocationWithPath_swigregister
StepShape_DimensionalLocationWithPath_swigregister(StepShape_DimensionalLocationWithPath)

class StepShape_DimensionalSizeWithPath(StepShape_DimensionalSize):
    __swig_setmethods__ = {}
    for _s in [StepShape_DimensionalSize]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_DimensionalSizeWithPath, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_DimensionalSize]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_DimensionalSizeWithPath, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_DimensionalSizeWithPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aDimensionalSize_AppliesTo: StepRepr_ShapeAspect
        aDimensionalSize_Name: TCollection_HAsciiString
        aPath: StepRepr_ShapeAspect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalSizeWithPath_Init(self, *args)


    def Path(self, *args) -> "opencascade::handle< StepRepr_ShapeAspect >":
        """
        Returns field path.

        Returns
        -------
        opencascade::handle<StepRepr_ShapeAspect>

        """
        return _StepShape.StepShape_DimensionalSizeWithPath_Path(self, *args)


    def SetPath(self, *args) -> "void":
        """
        Set field path.

        Parameters
        ----------
        Path: StepRepr_ShapeAspect

        Returns
        -------
        None

        """
        return _StepShape.StepShape_DimensionalSizeWithPath_SetPath(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_DimensionalSizeWithPath_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalSizeWithPath
    __del__ = lambda self: None
StepShape_DimensionalSizeWithPath_swigregister = _StepShape.StepShape_DimensionalSizeWithPath_swigregister
StepShape_DimensionalSizeWithPath_swigregister(StepShape_DimensionalSizeWithPath)

class StepShape_DirectedDimensionalLocation(StepShape_DimensionalLocation):
    __swig_setmethods__ = {}
    for _s in [StepShape_DimensionalLocation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_DirectedDimensionalLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_DimensionalLocation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_DirectedDimensionalLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_DirectedDimensionalLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_DirectedDimensionalLocation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DirectedDimensionalLocation
    __del__ = lambda self: None
StepShape_DirectedDimensionalLocation_swigregister = _StepShape.StepShape_DirectedDimensionalLocation_swigregister
StepShape_DirectedDimensionalLocation_swigregister(StepShape_DirectedDimensionalLocation)

class StepShape_Edge(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Edge, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Edge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a edge.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EdgeEnd(self, *args) -> "opencascade::handle< StepShape_Vertex >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_Vertex>

        """
        return _StepShape.StepShape_Edge_EdgeEnd(self, *args)


    def EdgeStart(self, *args) -> "opencascade::handle< StepShape_Vertex >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_Vertex>

        """
        return _StepShape.StepShape_Edge_EdgeStart(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aEdgeStart: StepShape_Vertex
        aEdgeEnd: StepShape_Vertex

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Edge_Init(self, *args)


    def SetEdgeEnd(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aEdgeEnd: StepShape_Vertex

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Edge_SetEdgeEnd(self, *args)


    def SetEdgeStart(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aEdgeStart: StepShape_Vertex

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Edge_SetEdgeStart(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Edge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Edge
    __del__ = lambda self: None
StepShape_Edge_swigregister = _StepShape.StepShape_Edge_swigregister
StepShape_Edge_swigregister(StepShape_Edge)

class StepShape_EdgeBasedWireframeShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_EdgeBasedWireframeShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_EdgeBasedWireframeShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_EdgeBasedWireframeShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_EdgeBasedWireframeShapeRepresentation
    __del__ = lambda self: None
StepShape_EdgeBasedWireframeShapeRepresentation_swigregister = _StepShape.StepShape_EdgeBasedWireframeShapeRepresentation_swigregister
StepShape_EdgeBasedWireframeShapeRepresentation_swigregister(StepShape_EdgeBasedWireframeShapeRepresentation)

class StepShape_Face(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Face, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Face, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a face.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Bounds(self, *args) -> "opencascade::handle< StepShape_HArray1OfFaceBound >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfFaceBound>

        """
        return _StepShape.StepShape_Face_Bounds(self, *args)


    def BoundsValue(self, *args) -> "opencascade::handle< StepShape_FaceBound >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepShape_FaceBound>

        """
        return _StepShape.StepShape_Face_BoundsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aBounds: StepShape_HArray1OfFaceBound

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Face_Init(self, *args)


    def NbBounds(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_Face_NbBounds(self, *args)


    def SetBounds(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBounds: StepShape_HArray1OfFaceBound

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Face_SetBounds(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Face_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Face
    __del__ = lambda self: None
StepShape_Face_swigregister = _StepShape.StepShape_Face_swigregister
StepShape_Face_swigregister(StepShape_Face)

class StepShape_FaceBound(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_FaceBound, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_FaceBound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a facebound.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_FaceBound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Bound(self, *args) -> "opencascade::handle< StepShape_Loop >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_Loop>

        """
        return _StepShape.StepShape_FaceBound_Bound(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aBound: StepShape_Loop
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FaceBound_Init(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_FaceBound_Orientation(self, *args)


    def SetBound(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBound: StepShape_Loop

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FaceBound_SetBound(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FaceBound_SetOrientation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_FaceBound_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FaceBound
    __del__ = lambda self: None
StepShape_FaceBound_swigregister = _StepShape.StepShape_FaceBound_swigregister
StepShape_FaceBound_swigregister(StepShape_FaceBound)

class StepShape_FacetedBrepShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_FacetedBrepShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_FacetedBrepShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a facetedbrepshaperepresentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_FacetedBrepShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_FacetedBrepShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FacetedBrepShapeRepresentation
    __del__ = lambda self: None
StepShape_FacetedBrepShapeRepresentation_swigregister = _StepShape.StepShape_FacetedBrepShapeRepresentation_swigregister
StepShape_FacetedBrepShapeRepresentation_swigregister(StepShape_FacetedBrepShapeRepresentation)

class StepShape_GeometricCurveSet(StepShape_GeometricSet):
    __swig_setmethods__ = {}
    for _s in [StepShape_GeometricSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_GeometricCurveSet, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_GeometricSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_GeometricCurveSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a geometriccurveset.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_GeometricCurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_GeometricCurveSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricCurveSet
    __del__ = lambda self: None
StepShape_GeometricCurveSet_swigregister = _StepShape.StepShape_GeometricCurveSet_swigregister
StepShape_GeometricCurveSet_swigregister(StepShape_GeometricCurveSet)

class StepShape_GeometricallyBoundedSurfaceShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_GeometricallyBoundedSurfaceShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_GeometricallyBoundedSurfaceShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a geometricallyboundedsurfaceshaperepresentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_GeometricallyBoundedSurfaceShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricallyBoundedSurfaceShapeRepresentation
    __del__ = lambda self: None
StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister = _StepShape.StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister
StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister(StepShape_GeometricallyBoundedSurfaceShapeRepresentation)

class StepShape_GeometricallyBoundedWireframeShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_GeometricallyBoundedWireframeShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_GeometricallyBoundedWireframeShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a geometricallyboundedwireframeshaperepresentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_GeometricallyBoundedWireframeShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricallyBoundedWireframeShapeRepresentation
    __del__ = lambda self: None
StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister = _StepShape.StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister
StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister(StepShape_GeometricallyBoundedWireframeShapeRepresentation)

class StepShape_Loop(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Loop, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Loop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a loop.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Loop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Loop_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Loop
    __del__ = lambda self: None
StepShape_Loop_swigregister = _StepShape.StepShape_Loop_swigregister
StepShape_Loop_swigregister(StepShape_Loop)

class StepShape_LoopAndPath(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_LoopAndPath, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_LoopAndPath, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a loopandpath.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_LoopAndPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EdgeList(self, *args) -> "opencascade::handle< StepShape_HArray1OfOrientedEdge >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfOrientedEdge>

        """
        return _StepShape.StepShape_LoopAndPath_EdgeList(self, *args)


    def EdgeListValue(self, *args) -> "opencascade::handle< StepShape_OrientedEdge >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepShape_OrientedEdge>

        """
        return _StepShape.StepShape_LoopAndPath_EdgeListValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aLoop: StepShape_Loop
        aPath: StepShape_Path

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aEdgeList: StepShape_HArray1OfOrientedEdge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LoopAndPath_Init(self, *args)


    def Loop(self, *args) -> "opencascade::handle< StepShape_Loop >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_Loop>

        """
        return _StepShape.StepShape_LoopAndPath_Loop(self, *args)


    def NbEdgeList(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_LoopAndPath_NbEdgeList(self, *args)


    def Path(self, *args) -> "opencascade::handle< StepShape_Path >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_Path>

        """
        return _StepShape.StepShape_LoopAndPath_Path(self, *args)


    def SetEdgeList(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aEdgeList: StepShape_HArray1OfOrientedEdge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LoopAndPath_SetEdgeList(self, *args)


    def SetLoop(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLoop: StepShape_Loop

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LoopAndPath_SetLoop(self, *args)


    def SetPath(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPath: StepShape_Path

        Returns
        -------
        None

        """
        return _StepShape.StepShape_LoopAndPath_SetPath(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_LoopAndPath_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_LoopAndPath
    __del__ = lambda self: None
StepShape_LoopAndPath_swigregister = _StepShape.StepShape_LoopAndPath_swigregister
StepShape_LoopAndPath_swigregister(StepShape_LoopAndPath)

class StepShape_ManifoldSolidBrep(StepShape_SolidModel):
    __swig_setmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ManifoldSolidBrep, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ManifoldSolidBrep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a manifoldsolidbrep.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ManifoldSolidBrep(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aOuter: StepShape_ClosedShell

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aOuter: StepShape_ConnectedFaceSet

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ManifoldSolidBrep_Init(self, *args)


    def Outer(self, *args) -> "opencascade::handle< StepShape_ConnectedFaceSet >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_ConnectedFaceSet>

        """
        return _StepShape.StepShape_ManifoldSolidBrep_Outer(self, *args)


    def SetOuter(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOuter: StepShape_ConnectedFaceSet

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ManifoldSolidBrep_SetOuter(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ManifoldSolidBrep_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ManifoldSolidBrep
    __del__ = lambda self: None
StepShape_ManifoldSolidBrep_swigregister = _StepShape.StepShape_ManifoldSolidBrep_swigregister
StepShape_ManifoldSolidBrep_swigregister(StepShape_ManifoldSolidBrep)

class StepShape_ManifoldSurfaceShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ManifoldSurfaceShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ManifoldSurfaceShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a manifoldsurfaceshaperepresentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ManifoldSurfaceShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ManifoldSurfaceShapeRepresentation
    __del__ = lambda self: None
StepShape_ManifoldSurfaceShapeRepresentation_swigregister = _StepShape.StepShape_ManifoldSurfaceShapeRepresentation_swigregister
StepShape_ManifoldSurfaceShapeRepresentation_swigregister(StepShape_ManifoldSurfaceShapeRepresentation)

class StepShape_NonManifoldSurfaceShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_NonManifoldSurfaceShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_NonManifoldSurfaceShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_NonManifoldSurfaceShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_NonManifoldSurfaceShapeRepresentation
    __del__ = lambda self: None
StepShape_NonManifoldSurfaceShapeRepresentation_swigregister = _StepShape.StepShape_NonManifoldSurfaceShapeRepresentation_swigregister
StepShape_NonManifoldSurfaceShapeRepresentation_swigregister(StepShape_NonManifoldSurfaceShapeRepresentation)

class StepShape_Path(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Path, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Path, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a path.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Path(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EdgeList(self, *args) -> "opencascade::handle< StepShape_HArray1OfOrientedEdge >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfOrientedEdge>

        """
        return _StepShape.StepShape_Path_EdgeList(self, *args)


    def EdgeListValue(self, *args) -> "opencascade::handle< StepShape_OrientedEdge >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepShape_OrientedEdge>

        """
        return _StepShape.StepShape_Path_EdgeListValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aEdgeList: StepShape_HArray1OfOrientedEdge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Path_Init(self, *args)


    def NbEdgeList(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_Path_NbEdgeList(self, *args)


    def SetEdgeList(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aEdgeList: StepShape_HArray1OfOrientedEdge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Path_SetEdgeList(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Path_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Path
    __del__ = lambda self: None
StepShape_Path_swigregister = _StepShape.StepShape_Path_swigregister
StepShape_Path_swigregister(StepShape_Path)

class StepShape_PointRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_PointRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_PointRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_PointRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_PointRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_PointRepresentation
    __del__ = lambda self: None
StepShape_PointRepresentation_swigregister = _StepShape.StepShape_PointRepresentation_swigregister
StepShape_PointRepresentation_swigregister(StepShape_PointRepresentation)

class StepShape_ShapeDimensionRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ShapeDimensionRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ShapeDimensionRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ShapeDimensionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields ap214.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theItems: StepRepr_HArray1OfRepresentationItem
        theContextOfItems: StepRepr_RepresentationContext

        Returns
        -------
        None

        Initialize all fields ap242.

        Parameters
        ----------
        theName: TCollection_HAsciiString
        theItems: StepShape_HArray1OfShapeDimensionRepresentationItem
        theContextOfItems: StepRepr_RepresentationContext

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ShapeDimensionRepresentation_Init(self, *args)


    def ItemsAP242(self, *args) -> "opencascade::handle< StepShape_HArray1OfShapeDimensionRepresentationItem >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfShapeDimensionRepresentationItem>

        """
        return _StepShape.StepShape_ShapeDimensionRepresentation_ItemsAP242(self, *args)


    def SetItemsAP242(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theItems: StepShape_HArray1OfShapeDimensionRepresentationItem

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ShapeDimensionRepresentation_SetItemsAP242(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ShapeDimensionRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeDimensionRepresentation
    __del__ = lambda self: None
StepShape_ShapeDimensionRepresentation_swigregister = _StepShape.StepShape_ShapeDimensionRepresentation_swigregister
StepShape_ShapeDimensionRepresentation_swigregister(StepShape_ShapeDimensionRepresentation)

class StepShape_ShapeRepresentationWithParameters(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ShapeRepresentationWithParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ShapeRepresentationWithParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ShapeRepresentationWithParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ShapeRepresentationWithParameters_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeRepresentationWithParameters
    __del__ = lambda self: None
StepShape_ShapeRepresentationWithParameters_swigregister = _StepShape.StepShape_ShapeRepresentationWithParameters_swigregister
StepShape_ShapeRepresentationWithParameters_swigregister(StepShape_ShapeRepresentationWithParameters)

class StepShape_SolidReplica(StepShape_SolidModel):
    __swig_setmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_SolidReplica, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_SolidReplica, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a solidreplica.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_SolidReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aParentSolid: StepShape_SolidModel
        aTransformation: StepGeom_CartesianTransformationOperator3d

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SolidReplica_Init(self, *args)


    def ParentSolid(self, *args) -> "opencascade::handle< StepShape_SolidModel >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_SolidModel>

        """
        return _StepShape.StepShape_SolidReplica_ParentSolid(self, *args)


    def SetParentSolid(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aParentSolid: StepShape_SolidModel

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SolidReplica_SetParentSolid(self, *args)


    def SetTransformation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTransformation: StepGeom_CartesianTransformationOperator3d

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SolidReplica_SetTransformation(self, *args)


    def Transformation(self, *args) -> "opencascade::handle< StepGeom_CartesianTransformationOperator3d >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_CartesianTransformationOperator3d>

        """
        return _StepShape.StepShape_SolidReplica_Transformation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_SolidReplica_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SolidReplica
    __del__ = lambda self: None
StepShape_SolidReplica_swigregister = _StepShape.StepShape_SolidReplica_swigregister
StepShape_SolidReplica_swigregister(StepShape_SolidReplica)

class StepShape_SweptAreaSolid(StepShape_SolidModel):
    __swig_setmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_SweptAreaSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_SweptAreaSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a sweptareasolid.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_SweptAreaSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSweptArea: StepGeom_CurveBoundedSurface

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SweptAreaSolid_Init(self, *args)


    def SetSweptArea(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSweptArea: StepGeom_CurveBoundedSurface

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SweptAreaSolid_SetSweptArea(self, *args)


    def SweptArea(self, *args) -> "opencascade::handle< StepGeom_CurveBoundedSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_CurveBoundedSurface>

        """
        return _StepShape.StepShape_SweptAreaSolid_SweptArea(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_SweptAreaSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SweptAreaSolid
    __del__ = lambda self: None
StepShape_SweptAreaSolid_swigregister = _StepShape.StepShape_SweptAreaSolid_swigregister
StepShape_SweptAreaSolid_swigregister(StepShape_SweptAreaSolid)

class StepShape_SweptFaceSolid(StepShape_SolidModel):
    __swig_setmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_SweptFaceSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SolidModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_SweptFaceSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a sweptfacesolid.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_SweptFaceSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSweptArea: StepShape_FaceSurface

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SweptFaceSolid_Init(self, *args)


    def SetSweptFace(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSweptArea: StepShape_FaceSurface

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SweptFaceSolid_SetSweptFace(self, *args)


    def SweptFace(self, *args) -> "opencascade::handle< StepShape_FaceSurface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_FaceSurface>

        """
        return _StepShape.StepShape_SweptFaceSolid_SweptFace(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_SweptFaceSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SweptFaceSolid
    __del__ = lambda self: None
StepShape_SweptFaceSolid_swigregister = _StepShape.StepShape_SweptFaceSolid_swigregister
StepShape_SweptFaceSolid_swigregister(StepShape_SweptFaceSolid)

class StepShape_TransitionalShapeRepresentation(StepShape_ShapeRepresentation):
    __swig_setmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_TransitionalShapeRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ShapeRepresentation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_TransitionalShapeRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a transitionalshaperepresentation.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_TransitionalShapeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_TransitionalShapeRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_TransitionalShapeRepresentation
    __del__ = lambda self: None
StepShape_TransitionalShapeRepresentation_swigregister = _StepShape.StepShape_TransitionalShapeRepresentation_swigregister
StepShape_TransitionalShapeRepresentation_swigregister(StepShape_TransitionalShapeRepresentation)

class StepShape_Vertex(StepShape_TopologicalRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Vertex, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_TopologicalRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Vertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a vertex.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Vertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Vertex_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Vertex
    __del__ = lambda self: None
StepShape_Vertex_swigregister = _StepShape.StepShape_Vertex_swigregister
StepShape_Vertex_swigregister(StepShape_Vertex)

class StepShape_BrepWithVoids(StepShape_ManifoldSolidBrep):
    __swig_setmethods__ = {}
    for _s in [StepShape_ManifoldSolidBrep]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_BrepWithVoids, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ManifoldSolidBrep]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_BrepWithVoids, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a brepwithvoids.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_BrepWithVoids(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aOuter: StepShape_ClosedShell
        aVoids: StepShape_HArray1OfOrientedClosedShell

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BrepWithVoids_Init(self, *args)


    def NbVoids(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_BrepWithVoids_NbVoids(self, *args)


    def SetVoids(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aVoids: StepShape_HArray1OfOrientedClosedShell

        Returns
        -------
        None

        """
        return _StepShape.StepShape_BrepWithVoids_SetVoids(self, *args)


    def Voids(self, *args) -> "opencascade::handle< StepShape_HArray1OfOrientedClosedShell >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfOrientedClosedShell>

        """
        return _StepShape.StepShape_BrepWithVoids_Voids(self, *args)


    def VoidsValue(self, *args) -> "opencascade::handle< StepShape_OrientedClosedShell >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepShape_OrientedClosedShell>

        """
        return _StepShape.StepShape_BrepWithVoids_VoidsValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_BrepWithVoids_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BrepWithVoids
    __del__ = lambda self: None
StepShape_BrepWithVoids_swigregister = _StepShape.StepShape_BrepWithVoids_swigregister
StepShape_BrepWithVoids_swigregister(StepShape_BrepWithVoids)

class StepShape_ClosedShell(StepShape_ConnectedFaceSet):
    __swig_setmethods__ = {}
    for _s in [StepShape_ConnectedFaceSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ClosedShell, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ConnectedFaceSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ClosedShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a closedshell.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ClosedShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ClosedShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ClosedShell
    __del__ = lambda self: None
StepShape_ClosedShell_swigregister = _StepShape.StepShape_ClosedShell_swigregister
StepShape_ClosedShell_swigregister(StepShape_ClosedShell)

class StepShape_ConnectedFaceSubSet(StepShape_ConnectedFaceSet):
    __swig_setmethods__ = {}
    for _s in [StepShape_ConnectedFaceSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ConnectedFaceSubSet, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ConnectedFaceSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ConnectedFaceSubSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ConnectedFaceSubSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aConnectedFaceSet_CfsFaces: StepShape_HArray1OfFace
        aParentFaceSet: StepShape_ConnectedFaceSet

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ConnectedFaceSubSet_Init(self, *args)


    def ParentFaceSet(self, *args) -> "opencascade::handle< StepShape_ConnectedFaceSet >":
        """
        Returns field parentfaceset.

        Returns
        -------
        opencascade::handle<StepShape_ConnectedFaceSet>

        """
        return _StepShape.StepShape_ConnectedFaceSubSet_ParentFaceSet(self, *args)


    def SetParentFaceSet(self, *args) -> "void":
        """
        Set field parentfaceset.

        Parameters
        ----------
        ParentFaceSet: StepShape_ConnectedFaceSet

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ConnectedFaceSubSet_SetParentFaceSet(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ConnectedFaceSubSet_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ConnectedFaceSubSet
    __del__ = lambda self: None
StepShape_ConnectedFaceSubSet_swigregister = _StepShape.StepShape_ConnectedFaceSubSet_swigregister
StepShape_ConnectedFaceSubSet_swigregister(StepShape_ConnectedFaceSubSet)

class StepShape_EdgeCurve(StepShape_Edge):
    __swig_setmethods__ = {}
    for _s in [StepShape_Edge]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_EdgeCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Edge]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_EdgeCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a edgecurve.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_EdgeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EdgeGeometry(self, *args) -> "opencascade::handle< StepGeom_Curve >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Curve>

        """
        return _StepShape.StepShape_EdgeCurve_EdgeGeometry(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aEdgeStart: StepShape_Vertex
        aEdgeEnd: StepShape_Vertex
        aEdgeGeometry: StepGeom_Curve
        aSameSense: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_EdgeCurve_Init(self, *args)


    def SameSense(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_EdgeCurve_SameSense(self, *args)


    def SetEdgeGeometry(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aEdgeGeometry: StepGeom_Curve

        Returns
        -------
        None

        """
        return _StepShape.StepShape_EdgeCurve_SetEdgeGeometry(self, *args)


    def SetSameSense(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSameSense: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_EdgeCurve_SetSameSense(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_EdgeCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_EdgeCurve
    __del__ = lambda self: None
StepShape_EdgeCurve_swigregister = _StepShape.StepShape_EdgeCurve_swigregister
StepShape_EdgeCurve_swigregister(StepShape_EdgeCurve)

class StepShape_EdgeLoop(StepShape_Loop):
    __swig_setmethods__ = {}
    for _s in [StepShape_Loop]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_EdgeLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Loop]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_EdgeLoop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a edgeloop.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_EdgeLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EdgeList(self, *args) -> "opencascade::handle< StepShape_HArray1OfOrientedEdge >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfOrientedEdge>

        """
        return _StepShape.StepShape_EdgeLoop_EdgeList(self, *args)


    def EdgeListValue(self, *args) -> "opencascade::handle< StepShape_OrientedEdge >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepShape_OrientedEdge>

        """
        return _StepShape.StepShape_EdgeLoop_EdgeListValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aEdgeList: StepShape_HArray1OfOrientedEdge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_EdgeLoop_Init(self, *args)


    def NbEdgeList(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_EdgeLoop_NbEdgeList(self, *args)


    def SetEdgeList(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aEdgeList: StepShape_HArray1OfOrientedEdge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_EdgeLoop_SetEdgeList(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_EdgeLoop_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_EdgeLoop
    __del__ = lambda self: None
StepShape_EdgeLoop_swigregister = _StepShape.StepShape_EdgeLoop_swigregister
StepShape_EdgeLoop_swigregister(StepShape_EdgeLoop)

class StepShape_ExtrudedAreaSolid(StepShape_SweptAreaSolid):
    __swig_setmethods__ = {}
    for _s in [StepShape_SweptAreaSolid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ExtrudedAreaSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SweptAreaSolid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ExtrudedAreaSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a extrudedareasolid.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ExtrudedAreaSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Depth(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_Depth(self, *args)


    def ExtrudedDirection(self, *args) -> "opencascade::handle< StepGeom_Direction >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Direction>

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_ExtrudedDirection(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSweptArea: StepGeom_CurveBoundedSurface
        aExtrudedDirection: StepGeom_Direction
        aDepth: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_Init(self, *args)


    def SetDepth(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDepth: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_SetDepth(self, *args)


    def SetExtrudedDirection(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aExtrudedDirection: StepGeom_Direction

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_SetExtrudedDirection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ExtrudedAreaSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ExtrudedAreaSolid
    __del__ = lambda self: None
StepShape_ExtrudedAreaSolid_swigregister = _StepShape.StepShape_ExtrudedAreaSolid_swigregister
StepShape_ExtrudedAreaSolid_swigregister(StepShape_ExtrudedAreaSolid)

class StepShape_ExtrudedFaceSolid(StepShape_SweptFaceSolid):
    __swig_setmethods__ = {}
    for _s in [StepShape_SweptFaceSolid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_ExtrudedFaceSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SweptFaceSolid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_ExtrudedFaceSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a extrudedfacesolid.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_ExtrudedFaceSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Depth(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_Depth(self, *args)


    def ExtrudedDirection(self, *args) -> "opencascade::handle< StepGeom_Direction >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Direction>

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_ExtrudedDirection(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSweptArea: StepShape_FaceSurface
        aExtrudedDirection: StepGeom_Direction
        aDepth: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_Init(self, *args)


    def SetDepth(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDepth: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_SetDepth(self, *args)


    def SetExtrudedDirection(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aExtrudedDirection: StepGeom_Direction

        Returns
        -------
        None

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_SetExtrudedDirection(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_ExtrudedFaceSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ExtrudedFaceSolid
    __del__ = lambda self: None
StepShape_ExtrudedFaceSolid_swigregister = _StepShape.StepShape_ExtrudedFaceSolid_swigregister
StepShape_ExtrudedFaceSolid_swigregister(StepShape_ExtrudedFaceSolid)

class StepShape_FaceOuterBound(StepShape_FaceBound):
    __swig_setmethods__ = {}
    for _s in [StepShape_FaceBound]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_FaceOuterBound, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_FaceBound]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_FaceOuterBound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a faceouterbound.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_FaceOuterBound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_FaceOuterBound_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FaceOuterBound
    __del__ = lambda self: None
StepShape_FaceOuterBound_swigregister = _StepShape.StepShape_FaceOuterBound_swigregister
StepShape_FaceOuterBound_swigregister(StepShape_FaceOuterBound)

class StepShape_FaceSurface(StepShape_Face):
    __swig_setmethods__ = {}
    for _s in [StepShape_Face]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_FaceSurface, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Face]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_FaceSurface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a facesurface.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_FaceSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FaceGeometry(self, *args) -> "opencascade::handle< StepGeom_Surface >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Surface>

        """
        return _StepShape.StepShape_FaceSurface_FaceGeometry(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aBounds: StepShape_HArray1OfFaceBound
        aFaceGeometry: StepGeom_Surface
        aSameSense: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FaceSurface_Init(self, *args)


    def SameSense(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_FaceSurface_SameSense(self, *args)


    def SetFaceGeometry(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFaceGeometry: StepGeom_Surface

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FaceSurface_SetFaceGeometry(self, *args)


    def SetSameSense(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSameSense: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FaceSurface_SetSameSense(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_FaceSurface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FaceSurface
    __del__ = lambda self: None
StepShape_FaceSurface_swigregister = _StepShape.StepShape_FaceSurface_swigregister
StepShape_FaceSurface_swigregister(StepShape_FaceSurface)

class StepShape_FacetedBrep(StepShape_ManifoldSolidBrep):
    __swig_setmethods__ = {}
    for _s in [StepShape_ManifoldSolidBrep]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_FacetedBrep, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ManifoldSolidBrep]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_FacetedBrep, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a facetedbrep.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_FacetedBrep(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_FacetedBrep_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FacetedBrep
    __del__ = lambda self: None
StepShape_FacetedBrep_swigregister = _StepShape.StepShape_FacetedBrep_swigregister
StepShape_FacetedBrep_swigregister(StepShape_FacetedBrep)

class StepShape_FacetedBrepAndBrepWithVoids(StepShape_ManifoldSolidBrep):
    __swig_setmethods__ = {}
    for _s in [StepShape_ManifoldSolidBrep]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_FacetedBrepAndBrepWithVoids, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ManifoldSolidBrep]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_FacetedBrepAndBrepWithVoids, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a facetedbrepandbrepwithvoids.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_FacetedBrepAndBrepWithVoids(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BrepWithVoids(self, *args) -> "opencascade::handle< StepShape_BrepWithVoids >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_BrepWithVoids>

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_BrepWithVoids(self, *args)


    def FacetedBrep(self, *args) -> "opencascade::handle< StepShape_FacetedBrep >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_FacetedBrep>

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_FacetedBrep(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aOuter: StepShape_ClosedShell
        aFacetedBrep: StepShape_FacetedBrep
        aBrepWithVoids: StepShape_BrepWithVoids

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aOuter: StepShape_ClosedShell
        aVoids: StepShape_HArray1OfOrientedClosedShell

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_Init(self, *args)


    def NbVoids(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_NbVoids(self, *args)


    def SetBrepWithVoids(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aBrepWithVoids: StepShape_BrepWithVoids

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetBrepWithVoids(self, *args)


    def SetFacetedBrep(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFacetedBrep: StepShape_FacetedBrep

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetFacetedBrep(self, *args)


    def SetVoids(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aVoids: StepShape_HArray1OfOrientedClosedShell

        Returns
        -------
        None

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetVoids(self, *args)


    def Voids(self, *args) -> "opencascade::handle< StepShape_HArray1OfOrientedClosedShell >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_HArray1OfOrientedClosedShell>

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_Voids(self, *args)


    def VoidsValue(self, *args) -> "opencascade::handle< StepShape_OrientedClosedShell >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepShape_OrientedClosedShell>

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_VoidsValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FacetedBrepAndBrepWithVoids
    __del__ = lambda self: None
StepShape_FacetedBrepAndBrepWithVoids_swigregister = _StepShape.StepShape_FacetedBrepAndBrepWithVoids_swigregister
StepShape_FacetedBrepAndBrepWithVoids_swigregister(StepShape_FacetedBrepAndBrepWithVoids)

class StepShape_OpenShell(StepShape_ConnectedFaceSet):
    __swig_setmethods__ = {}
    for _s in [StepShape_ConnectedFaceSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_OpenShell, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ConnectedFaceSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_OpenShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a openshell.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_OpenShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_OpenShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OpenShell
    __del__ = lambda self: None
StepShape_OpenShell_swigregister = _StepShape.StepShape_OpenShell_swigregister
StepShape_OpenShell_swigregister(StepShape_OpenShell)

class StepShape_OrientedEdge(StepShape_Edge):
    __swig_setmethods__ = {}
    for _s in [StepShape_Edge]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_OrientedEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Edge]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_OrientedEdge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a orientededge.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_OrientedEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EdgeElement(self, *args) -> "opencascade::handle< StepShape_Edge >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_Edge>

        """
        return _StepShape.StepShape_OrientedEdge_EdgeElement(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aEdgeElement: StepShape_Edge
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedEdge_Init(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_OrientedEdge_Orientation(self, *args)


    def SetEdgeElement(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aEdgeElement: StepShape_Edge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedEdge_SetEdgeElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedEdge_SetOrientation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_OrientedEdge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedEdge
    __del__ = lambda self: None
StepShape_OrientedEdge_swigregister = _StepShape.StepShape_OrientedEdge_swigregister
StepShape_OrientedEdge_swigregister(StepShape_OrientedEdge)

class StepShape_OrientedFace(StepShape_Face):
    __swig_setmethods__ = {}
    for _s in [StepShape_Face]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_OrientedFace, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Face]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_OrientedFace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a orientedface.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_OrientedFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FaceElement(self, *args) -> "opencascade::handle< StepShape_Face >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_Face>

        """
        return _StepShape.StepShape_OrientedFace_FaceElement(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aFaceElement: StepShape_Face
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedFace_Init(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_OrientedFace_Orientation(self, *args)


    def SetFaceElement(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFaceElement: StepShape_Face

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedFace_SetFaceElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedFace_SetOrientation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_OrientedFace_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedFace
    __del__ = lambda self: None
StepShape_OrientedFace_swigregister = _StepShape.StepShape_OrientedFace_swigregister
StepShape_OrientedFace_swigregister(StepShape_OrientedFace)

class StepShape_OrientedPath(StepShape_Path):
    __swig_setmethods__ = {}
    for _s in [StepShape_Path]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_OrientedPath, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Path]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_OrientedPath, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a orientedpath.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_OrientedPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPathElement: StepShape_EdgeLoop
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedPath_Init(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_OrientedPath_Orientation(self, *args)


    def PathElement(self, *args) -> "opencascade::handle< StepShape_EdgeLoop >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_EdgeLoop>

        """
        return _StepShape.StepShape_OrientedPath_PathElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedPath_SetOrientation(self, *args)


    def SetPathElement(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPathElement: StepShape_EdgeLoop

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedPath_SetPathElement(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_OrientedPath_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedPath
    __del__ = lambda self: None
StepShape_OrientedPath_swigregister = _StepShape.StepShape_OrientedPath_swigregister
StepShape_OrientedPath_swigregister(StepShape_OrientedPath)

class StepShape_PolyLoop(StepShape_Loop):
    __swig_setmethods__ = {}
    for _s in [StepShape_Loop]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_PolyLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Loop]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_PolyLoop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a polyloop.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_PolyLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPolygon: StepGeom_HArray1OfCartesianPoint

        Returns
        -------
        None

        """
        return _StepShape.StepShape_PolyLoop_Init(self, *args)


    def NbPolygon(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepShape.StepShape_PolyLoop_NbPolygon(self, *args)


    def Polygon(self, *args) -> "opencascade::handle< StepGeom_HArray1OfCartesianPoint >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_HArray1OfCartesianPoint>

        """
        return _StepShape.StepShape_PolyLoop_Polygon(self, *args)


    def PolygonValue(self, *args) -> "opencascade::handle< StepGeom_CartesianPoint >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepGeom_CartesianPoint>

        """
        return _StepShape.StepShape_PolyLoop_PolygonValue(self, *args)


    def SetPolygon(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPolygon: StepGeom_HArray1OfCartesianPoint

        Returns
        -------
        None

        """
        return _StepShape.StepShape_PolyLoop_SetPolygon(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_PolyLoop_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_PolyLoop
    __del__ = lambda self: None
StepShape_PolyLoop_swigregister = _StepShape.StepShape_PolyLoop_swigregister
StepShape_PolyLoop_swigregister(StepShape_PolyLoop)

class StepShape_RevolvedAreaSolid(StepShape_SweptAreaSolid):
    __swig_setmethods__ = {}
    for _s in [StepShape_SweptAreaSolid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_RevolvedAreaSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SweptAreaSolid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_RevolvedAreaSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a revolvedareasolid.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_RevolvedAreaSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angle(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RevolvedAreaSolid_Angle(self, *args)


    def Axis(self, *args) -> "opencascade::handle< StepGeom_Axis1Placement >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis1Placement>

        """
        return _StepShape.StepShape_RevolvedAreaSolid_Axis(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSweptArea: StepGeom_CurveBoundedSurface
        aAxis: StepGeom_Axis1Placement
        aAngle: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RevolvedAreaSolid_Init(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAngle: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RevolvedAreaSolid_SetAngle(self, *args)


    def SetAxis(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAxis: StepGeom_Axis1Placement

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RevolvedAreaSolid_SetAxis(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_RevolvedAreaSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RevolvedAreaSolid
    __del__ = lambda self: None
StepShape_RevolvedAreaSolid_swigregister = _StepShape.StepShape_RevolvedAreaSolid_swigregister
StepShape_RevolvedAreaSolid_swigregister(StepShape_RevolvedAreaSolid)

class StepShape_RevolvedFaceSolid(StepShape_SweptFaceSolid):
    __swig_setmethods__ = {}
    for _s in [StepShape_SweptFaceSolid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_RevolvedFaceSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_SweptFaceSolid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_RevolvedFaceSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a revolvedfacesolid.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_RevolvedFaceSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angle(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepShape.StepShape_RevolvedFaceSolid_Angle(self, *args)


    def Axis(self, *args) -> "opencascade::handle< StepGeom_Axis1Placement >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Axis1Placement>

        """
        return _StepShape.StepShape_RevolvedFaceSolid_Axis(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSweptArea: StepShape_FaceSurface

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aSweptArea: StepShape_FaceSurface
        aAxis: StepGeom_Axis1Placement
        aAngle: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RevolvedFaceSolid_Init(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAngle: float

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RevolvedFaceSolid_SetAngle(self, *args)


    def SetAxis(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAxis: StepGeom_Axis1Placement

        Returns
        -------
        None

        """
        return _StepShape.StepShape_RevolvedFaceSolid_SetAxis(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_RevolvedFaceSolid_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RevolvedFaceSolid
    __del__ = lambda self: None
StepShape_RevolvedFaceSolid_swigregister = _StepShape.StepShape_RevolvedFaceSolid_swigregister
StepShape_RevolvedFaceSolid_swigregister(StepShape_RevolvedFaceSolid)

class StepShape_Subedge(StepShape_Edge):
    __swig_setmethods__ = {}
    for _s in [StepShape_Edge]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Subedge, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Edge]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Subedge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Subedge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aEdge_EdgeStart: StepShape_Vertex
        aEdge_EdgeEnd: StepShape_Vertex
        aParentEdge: StepShape_Edge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Subedge_Init(self, *args)


    def ParentEdge(self, *args) -> "opencascade::handle< StepShape_Edge >":
        """
        Returns field parentedge.

        Returns
        -------
        opencascade::handle<StepShape_Edge>

        """
        return _StepShape.StepShape_Subedge_ParentEdge(self, *args)


    def SetParentEdge(self, *args) -> "void":
        """
        Set field parentedge.

        Parameters
        ----------
        ParentEdge: StepShape_Edge

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Subedge_SetParentEdge(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Subedge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Subedge
    __del__ = lambda self: None
StepShape_Subedge_swigregister = _StepShape.StepShape_Subedge_swigregister
StepShape_Subedge_swigregister(StepShape_Subedge)

class StepShape_Subface(StepShape_Face):
    __swig_setmethods__ = {}
    for _s in [StepShape_Face]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_Subface, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Face]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_Subface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_Subface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aFace_Bounds: StepShape_HArray1OfFaceBound
        aParentFace: StepShape_Face

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Subface_Init(self, *args)


    def ParentFace(self, *args) -> "opencascade::handle< StepShape_Face >":
        """
        Returns field parentface.

        Returns
        -------
        opencascade::handle<StepShape_Face>

        """
        return _StepShape.StepShape_Subface_ParentFace(self, *args)


    def SetParentFace(self, *args) -> "void":
        """
        Set field parentface.

        Parameters
        ----------
        ParentFace: StepShape_Face

        Returns
        -------
        None

        """
        return _StepShape.StepShape_Subface_SetParentFace(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_Subface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Subface
    __del__ = lambda self: None
StepShape_Subface_swigregister = _StepShape.StepShape_Subface_swigregister
StepShape_Subface_swigregister(StepShape_Subface)

class StepShape_VertexLoop(StepShape_Loop):
    __swig_setmethods__ = {}
    for _s in [StepShape_Loop]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_VertexLoop, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Loop]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_VertexLoop, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a vertexloop.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_VertexLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aLoopVertex: StepShape_Vertex

        Returns
        -------
        None

        """
        return _StepShape.StepShape_VertexLoop_Init(self, *args)


    def LoopVertex(self, *args) -> "opencascade::handle< StepShape_Vertex >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_Vertex>

        """
        return _StepShape.StepShape_VertexLoop_LoopVertex(self, *args)


    def SetLoopVertex(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLoopVertex: StepShape_Vertex

        Returns
        -------
        None

        """
        return _StepShape.StepShape_VertexLoop_SetLoopVertex(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_VertexLoop_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_VertexLoop
    __del__ = lambda self: None
StepShape_VertexLoop_swigregister = _StepShape.StepShape_VertexLoop_swigregister
StepShape_VertexLoop_swigregister(StepShape_VertexLoop)

class StepShape_VertexPoint(StepShape_Vertex):
    __swig_setmethods__ = {}
    for _s in [StepShape_Vertex]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_VertexPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Vertex]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_VertexPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a vertexpoint.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_VertexPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aVertexGeometry: StepGeom_Point

        Returns
        -------
        None

        """
        return _StepShape.StepShape_VertexPoint_Init(self, *args)


    def SetVertexGeometry(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aVertexGeometry: StepGeom_Point

        Returns
        -------
        None

        """
        return _StepShape.StepShape_VertexPoint_SetVertexGeometry(self, *args)


    def VertexGeometry(self, *args) -> "opencascade::handle< StepGeom_Point >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepGeom_Point>

        """
        return _StepShape.StepShape_VertexPoint_VertexGeometry(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_VertexPoint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_VertexPoint
    __del__ = lambda self: None
StepShape_VertexPoint_swigregister = _StepShape.StepShape_VertexPoint_swigregister
StepShape_VertexPoint_swigregister(StepShape_VertexPoint)

class StepShape_AdvancedFace(StepShape_FaceSurface):
    __swig_setmethods__ = {}
    for _s in [StepShape_FaceSurface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_AdvancedFace, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_FaceSurface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_AdvancedFace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a advancedface.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_AdvancedFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_AdvancedFace_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_AdvancedFace
    __del__ = lambda self: None
StepShape_AdvancedFace_swigregister = _StepShape.StepShape_AdvancedFace_swigregister
StepShape_AdvancedFace_swigregister(StepShape_AdvancedFace)

class StepShape_OrientedClosedShell(StepShape_ClosedShell):
    __swig_setmethods__ = {}
    for _s in [StepShape_ClosedShell]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_OrientedClosedShell, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_ClosedShell]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_OrientedClosedShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a orientedclosedshell.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_OrientedClosedShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ClosedShellElement(self, *args) -> "opencascade::handle< StepShape_ClosedShell >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_ClosedShell>

        """
        return _StepShape.StepShape_OrientedClosedShell_ClosedShellElement(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aClosedShellElement: StepShape_ClosedShell
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedClosedShell_Init(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_OrientedClosedShell_Orientation(self, *args)


    def SetClosedShellElement(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aClosedShellElement: StepShape_ClosedShell

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedClosedShell_SetClosedShellElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedClosedShell_SetOrientation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_OrientedClosedShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedClosedShell
    __del__ = lambda self: None
StepShape_OrientedClosedShell_swigregister = _StepShape.StepShape_OrientedClosedShell_swigregister
StepShape_OrientedClosedShell_swigregister(StepShape_OrientedClosedShell)

class StepShape_OrientedOpenShell(StepShape_OpenShell):
    __swig_setmethods__ = {}
    for _s in [StepShape_OpenShell]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_OrientedOpenShell, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_OpenShell]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_OrientedOpenShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a orientedopenshell.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_OrientedOpenShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aOpenShellElement: StepShape_OpenShell
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedOpenShell_Init(self, *args)


    def OpenShellElement(self, *args) -> "opencascade::handle< StepShape_OpenShell >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepShape_OpenShell>

        """
        return _StepShape.StepShape_OrientedOpenShell_OpenShellElement(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepShape.StepShape_OrientedOpenShell_Orientation(self, *args)


    def SetOpenShellElement(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOpenShellElement: StepShape_OpenShell

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedOpenShell_SetOpenShellElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOrientation: bool

        Returns
        -------
        None

        """
        return _StepShape.StepShape_OrientedOpenShell_SetOrientation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_OrientedOpenShell_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedOpenShell
    __del__ = lambda self: None
StepShape_OrientedOpenShell_swigregister = _StepShape.StepShape_OrientedOpenShell_swigregister
StepShape_OrientedOpenShell_swigregister(StepShape_OrientedOpenShell)

class StepShape_SeamEdge(StepShape_OrientedEdge):
    __swig_setmethods__ = {}
    for _s in [StepShape_OrientedEdge]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_SeamEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_OrientedEdge]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_SeamEdge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepShape.new_StepShape_SeamEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRepresentationItem_Name: TCollection_HAsciiString
        aOrientedEdge_EdgeElement: StepShape_Edge
        aOrientedEdge_Orientation: bool
        aPcurveReference: StepGeom_Pcurve

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SeamEdge_Init(self, *args)


    def PcurveReference(self, *args) -> "opencascade::handle< StepGeom_Pcurve >":
        """
        Returns field pcurvereference.

        Returns
        -------
        opencascade::handle<StepGeom_Pcurve>

        """
        return _StepShape.StepShape_SeamEdge_PcurveReference(self, *args)


    def SetPcurveReference(self, *args) -> "void":
        """
        Set field pcurvereference.

        Parameters
        ----------
        PcurveReference: StepGeom_Pcurve

        Returns
        -------
        None

        """
        return _StepShape.StepShape_SeamEdge_SetPcurveReference(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepShape_SeamEdge_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SeamEdge
    __del__ = lambda self: None
StepShape_SeamEdge_swigregister = _StepShape.StepShape_SeamEdge_swigregister
StepShape_SeamEdge_swigregister(StepShape_SeamEdge)

class StepShape_HArray1OfConnectedEdgeSet(StepShape_Array1OfConnectedEdgeSet, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfConnectedEdgeSet, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfConnectedEdgeSet, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfConnectedEdgeSet, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfConnectedEdgeSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfConnectedEdgeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfConnectedEdgeSet const &":
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfConnectedEdgeSet &":
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfConnectedEdgeSet
    __del__ = lambda self: None
StepShape_HArray1OfConnectedEdgeSet_swigregister = _StepShape.StepShape_HArray1OfConnectedEdgeSet_swigregister
StepShape_HArray1OfConnectedEdgeSet_swigregister(StepShape_HArray1OfConnectedEdgeSet)

class StepShape_HArray1OfFaceBound(StepShape_Array1OfFaceBound, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfFaceBound, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfFaceBound, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfFaceBound, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfFaceBound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfFaceBound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfFaceBound const &":
        return _StepShape.StepShape_HArray1OfFaceBound_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfFaceBound &":
        return _StepShape.StepShape_HArray1OfFaceBound_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfFaceBound_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfFaceBound
    __del__ = lambda self: None
StepShape_HArray1OfFaceBound_swigregister = _StepShape.StepShape_HArray1OfFaceBound_swigregister
StepShape_HArray1OfFaceBound_swigregister(StepShape_HArray1OfFaceBound)

class StepShape_HArray1OfGeometricSetSelect(StepShape_Array1OfGeometricSetSelect, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfGeometricSetSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfGeometricSetSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfGeometricSetSelect, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfGeometricSetSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfGeometricSetSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfGeometricSetSelect const &":
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfGeometricSetSelect &":
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfGeometricSetSelect_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfGeometricSetSelect
    __del__ = lambda self: None
StepShape_HArray1OfGeometricSetSelect_swigregister = _StepShape.StepShape_HArray1OfGeometricSetSelect_swigregister
StepShape_HArray1OfGeometricSetSelect_swigregister(StepShape_HArray1OfGeometricSetSelect)

class StepShape_HArray1OfConnectedFaceSet(StepShape_Array1OfConnectedFaceSet, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfConnectedFaceSet, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfConnectedFaceSet, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfConnectedFaceSet, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfConnectedFaceSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfConnectedFaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfConnectedFaceSet const &":
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfConnectedFaceSet &":
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfConnectedFaceSet_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfConnectedFaceSet
    __del__ = lambda self: None
StepShape_HArray1OfConnectedFaceSet_swigregister = _StepShape.StepShape_HArray1OfConnectedFaceSet_swigregister
StepShape_HArray1OfConnectedFaceSet_swigregister(StepShape_HArray1OfConnectedFaceSet)

class StepShape_HArray1OfEdge(StepShape_Array1OfEdge, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfEdge, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfEdge, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfEdge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfEdge const &":
        return _StepShape.StepShape_HArray1OfEdge_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfEdge &":
        return _StepShape.StepShape_HArray1OfEdge_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfEdge_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfEdge
    __del__ = lambda self: None
StepShape_HArray1OfEdge_swigregister = _StepShape.StepShape_HArray1OfEdge_swigregister
StepShape_HArray1OfEdge_swigregister(StepShape_HArray1OfEdge)

class StepShape_HArray1OfFace(StepShape_Array1OfFace, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfFace, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfFace, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfFace, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfFace, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfFace const &":
        return _StepShape.StepShape_HArray1OfFace_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfFace &":
        return _StepShape.StepShape_HArray1OfFace_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfFace_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfFace
    __del__ = lambda self: None
StepShape_HArray1OfFace_swigregister = _StepShape.StepShape_HArray1OfFace_swigregister
StepShape_HArray1OfFace_swigregister(StepShape_HArray1OfFace)

class StepShape_HArray1OfShapeDimensionRepresentationItem(StepShape_Array1OfShapeDimensionRepresentationItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfShapeDimensionRepresentationItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfShapeDimensionRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfShapeDimensionRepresentationItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfShapeDimensionRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfShapeDimensionRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfShapeDimensionRepresentationItem const &":
        return _StepShape.StepShape_HArray1OfShapeDimensionRepresentationItem_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfShapeDimensionRepresentationItem &":
        return _StepShape.StepShape_HArray1OfShapeDimensionRepresentationItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfShapeDimensionRepresentationItem_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfShapeDimensionRepresentationItem
    __del__ = lambda self: None
StepShape_HArray1OfShapeDimensionRepresentationItem_swigregister = _StepShape.StepShape_HArray1OfShapeDimensionRepresentationItem_swigregister
StepShape_HArray1OfShapeDimensionRepresentationItem_swigregister(StepShape_HArray1OfShapeDimensionRepresentationItem)

class StepShape_HArray1OfValueQualifier(StepShape_Array1OfValueQualifier, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfValueQualifier, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfValueQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfValueQualifier, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfValueQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfValueQualifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfValueQualifier const &":
        return _StepShape.StepShape_HArray1OfValueQualifier_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfValueQualifier &":
        return _StepShape.StepShape_HArray1OfValueQualifier_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfValueQualifier_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfValueQualifier
    __del__ = lambda self: None
StepShape_HArray1OfValueQualifier_swigregister = _StepShape.StepShape_HArray1OfValueQualifier_swigregister
StepShape_HArray1OfValueQualifier_swigregister(StepShape_HArray1OfValueQualifier)

class StepShape_HArray1OfShell(StepShape_Array1OfShell, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfShell, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfShell, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfShell, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfShell const &":
        return _StepShape.StepShape_HArray1OfShell_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfShell &":
        return _StepShape.StepShape_HArray1OfShell_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfShell_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfShell
    __del__ = lambda self: None
StepShape_HArray1OfShell_swigregister = _StepShape.StepShape_HArray1OfShell_swigregister
StepShape_HArray1OfShell_swigregister(StepShape_HArray1OfShell)

class StepShape_HArray1OfOrientedClosedShell(StepShape_Array1OfOrientedClosedShell, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfOrientedClosedShell, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfOrientedClosedShell, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfOrientedClosedShell, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfOrientedClosedShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfOrientedClosedShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfOrientedClosedShell const &":
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfOrientedClosedShell &":
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfOrientedClosedShell_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfOrientedClosedShell
    __del__ = lambda self: None
StepShape_HArray1OfOrientedClosedShell_swigregister = _StepShape.StepShape_HArray1OfOrientedClosedShell_swigregister
StepShape_HArray1OfOrientedClosedShell_swigregister(StepShape_HArray1OfOrientedClosedShell)

class StepShape_HArray1OfOrientedEdge(StepShape_Array1OfOrientedEdge, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepShape_Array1OfOrientedEdge, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepShape_HArray1OfOrientedEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [StepShape_Array1OfOrientedEdge, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepShape_HArray1OfOrientedEdge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepShape.new_StepShape_HArray1OfOrientedEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepShape_Array1OfOrientedEdge const &":
        return _StepShape.StepShape_HArray1OfOrientedEdge_Array1(self)

    def ChangeArray1(self) -> "StepShape_Array1OfOrientedEdge &":
        return _StepShape.StepShape_HArray1OfOrientedEdge_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepShape_HArray1OfOrientedEdge_DownCast(t)

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfOrientedEdge
    __del__ = lambda self: None
StepShape_HArray1OfOrientedEdge_swigregister = _StepShape.StepShape_HArray1OfOrientedEdge_swigregister
StepShape_HArray1OfOrientedEdge_swigregister(StepShape_HArray1OfOrientedEdge)



# This file is compatible with both classic and new-style classes.


