# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepAP203 module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepap203.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepAP203')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepAP203')
    _StepAP203 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepAP203', [dirname(__file__)])
        except ImportError:
            import _StepAP203
            return _StepAP203
        try:
            _mod = imp.load_module('_StepAP203', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepAP203 = swig_import_helper()
    del swig_import_helper
else:
    import _StepAP203
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP203.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StepAP203.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepAP203.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepAP203.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StepAP203.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StepAP203.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StepAP203.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StepAP203.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StepAP203.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StepAP203.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepAP203.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StepAP203.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StepAP203.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepAP203.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepAP203.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepAP203.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StepAP203.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepAP203.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepAP203.process_exception(error, method_name, class_name)
process_exception = _StepAP203.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource
import OCC.Core.StepBasic
import OCC.Core.StepRepr

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_StepAP203_CcDesignApproval_Create() -> "opencascade::handle< StepAP203_CcDesignApproval >":
    return _StepAP203.Handle_StepAP203_CcDesignApproval_Create()
Handle_StepAP203_CcDesignApproval_Create = _StepAP203.Handle_StepAP203_CcDesignApproval_Create

def Handle_StepAP203_CcDesignApproval_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_CcDesignApproval >":
    return _StepAP203.Handle_StepAP203_CcDesignApproval_DownCast(t)
Handle_StepAP203_CcDesignApproval_DownCast = _StepAP203.Handle_StepAP203_CcDesignApproval_DownCast

def Handle_StepAP203_CcDesignApproval_IsNull(t: 'opencascade::handle< StepAP203_CcDesignApproval > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_CcDesignApproval_IsNull(t)
Handle_StepAP203_CcDesignApproval_IsNull = _StepAP203.Handle_StepAP203_CcDesignApproval_IsNull

def Handle_StepAP203_CcDesignCertification_Create() -> "opencascade::handle< StepAP203_CcDesignCertification >":
    return _StepAP203.Handle_StepAP203_CcDesignCertification_Create()
Handle_StepAP203_CcDesignCertification_Create = _StepAP203.Handle_StepAP203_CcDesignCertification_Create

def Handle_StepAP203_CcDesignCertification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_CcDesignCertification >":
    return _StepAP203.Handle_StepAP203_CcDesignCertification_DownCast(t)
Handle_StepAP203_CcDesignCertification_DownCast = _StepAP203.Handle_StepAP203_CcDesignCertification_DownCast

def Handle_StepAP203_CcDesignCertification_IsNull(t: 'opencascade::handle< StepAP203_CcDesignCertification > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_CcDesignCertification_IsNull(t)
Handle_StepAP203_CcDesignCertification_IsNull = _StepAP203.Handle_StepAP203_CcDesignCertification_IsNull

def Handle_StepAP203_CcDesignContract_Create() -> "opencascade::handle< StepAP203_CcDesignContract >":
    return _StepAP203.Handle_StepAP203_CcDesignContract_Create()
Handle_StepAP203_CcDesignContract_Create = _StepAP203.Handle_StepAP203_CcDesignContract_Create

def Handle_StepAP203_CcDesignContract_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_CcDesignContract >":
    return _StepAP203.Handle_StepAP203_CcDesignContract_DownCast(t)
Handle_StepAP203_CcDesignContract_DownCast = _StepAP203.Handle_StepAP203_CcDesignContract_DownCast

def Handle_StepAP203_CcDesignContract_IsNull(t: 'opencascade::handle< StepAP203_CcDesignContract > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_CcDesignContract_IsNull(t)
Handle_StepAP203_CcDesignContract_IsNull = _StepAP203.Handle_StepAP203_CcDesignContract_IsNull

def Handle_StepAP203_CcDesignDateAndTimeAssignment_Create() -> "opencascade::handle< StepAP203_CcDesignDateAndTimeAssignment >":
    return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_Create()
Handle_StepAP203_CcDesignDateAndTimeAssignment_Create = _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_Create

def Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_CcDesignDateAndTimeAssignment >":
    return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast(t)
Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast = _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast

def Handle_StepAP203_CcDesignDateAndTimeAssignment_IsNull(t: 'opencascade::handle< StepAP203_CcDesignDateAndTimeAssignment > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_IsNull(t)
Handle_StepAP203_CcDesignDateAndTimeAssignment_IsNull = _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_IsNull

def Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Create() -> "opencascade::handle< StepAP203_CcDesignPersonAndOrganizationAssignment >":
    return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Create()
Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Create = _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Create

def Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_CcDesignPersonAndOrganizationAssignment >":
    return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast(t)
Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast = _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast

def Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_IsNull(t: 'opencascade::handle< StepAP203_CcDesignPersonAndOrganizationAssignment > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_IsNull(t)
Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_IsNull = _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_IsNull

def Handle_StepAP203_CcDesignSecurityClassification_Create() -> "opencascade::handle< StepAP203_CcDesignSecurityClassification >":
    return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_Create()
Handle_StepAP203_CcDesignSecurityClassification_Create = _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_Create

def Handle_StepAP203_CcDesignSecurityClassification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_CcDesignSecurityClassification >":
    return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_DownCast(t)
Handle_StepAP203_CcDesignSecurityClassification_DownCast = _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_DownCast

def Handle_StepAP203_CcDesignSecurityClassification_IsNull(t: 'opencascade::handle< StepAP203_CcDesignSecurityClassification > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_IsNull(t)
Handle_StepAP203_CcDesignSecurityClassification_IsNull = _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_IsNull

def Handle_StepAP203_CcDesignSpecificationReference_Create() -> "opencascade::handle< StepAP203_CcDesignSpecificationReference >":
    return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_Create()
Handle_StepAP203_CcDesignSpecificationReference_Create = _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_Create

def Handle_StepAP203_CcDesignSpecificationReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_CcDesignSpecificationReference >":
    return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_DownCast(t)
Handle_StepAP203_CcDesignSpecificationReference_DownCast = _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_DownCast

def Handle_StepAP203_CcDesignSpecificationReference_IsNull(t: 'opencascade::handle< StepAP203_CcDesignSpecificationReference > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_IsNull(t)
Handle_StepAP203_CcDesignSpecificationReference_IsNull = _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_IsNull

def Handle_StepAP203_Change_Create() -> "opencascade::handle< StepAP203_Change >":
    return _StepAP203.Handle_StepAP203_Change_Create()
Handle_StepAP203_Change_Create = _StepAP203.Handle_StepAP203_Change_Create

def Handle_StepAP203_Change_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_Change >":
    return _StepAP203.Handle_StepAP203_Change_DownCast(t)
Handle_StepAP203_Change_DownCast = _StepAP203.Handle_StepAP203_Change_DownCast

def Handle_StepAP203_Change_IsNull(t: 'opencascade::handle< StepAP203_Change > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_Change_IsNull(t)
Handle_StepAP203_Change_IsNull = _StepAP203.Handle_StepAP203_Change_IsNull

def Handle_StepAP203_ChangeRequest_Create() -> "opencascade::handle< StepAP203_ChangeRequest >":
    return _StepAP203.Handle_StepAP203_ChangeRequest_Create()
Handle_StepAP203_ChangeRequest_Create = _StepAP203.Handle_StepAP203_ChangeRequest_Create

def Handle_StepAP203_ChangeRequest_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_ChangeRequest >":
    return _StepAP203.Handle_StepAP203_ChangeRequest_DownCast(t)
Handle_StepAP203_ChangeRequest_DownCast = _StepAP203.Handle_StepAP203_ChangeRequest_DownCast

def Handle_StepAP203_ChangeRequest_IsNull(t: 'opencascade::handle< StepAP203_ChangeRequest > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_ChangeRequest_IsNull(t)
Handle_StepAP203_ChangeRequest_IsNull = _StepAP203.Handle_StepAP203_ChangeRequest_IsNull

def Handle_StepAP203_StartRequest_Create() -> "opencascade::handle< StepAP203_StartRequest >":
    return _StepAP203.Handle_StepAP203_StartRequest_Create()
Handle_StepAP203_StartRequest_Create = _StepAP203.Handle_StepAP203_StartRequest_Create

def Handle_StepAP203_StartRequest_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_StartRequest >":
    return _StepAP203.Handle_StepAP203_StartRequest_DownCast(t)
Handle_StepAP203_StartRequest_DownCast = _StepAP203.Handle_StepAP203_StartRequest_DownCast

def Handle_StepAP203_StartRequest_IsNull(t: 'opencascade::handle< StepAP203_StartRequest > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_StartRequest_IsNull(t)
Handle_StepAP203_StartRequest_IsNull = _StepAP203.Handle_StepAP203_StartRequest_IsNull

def Handle_StepAP203_StartWork_Create() -> "opencascade::handle< StepAP203_StartWork >":
    return _StepAP203.Handle_StepAP203_StartWork_Create()
Handle_StepAP203_StartWork_Create = _StepAP203.Handle_StepAP203_StartWork_Create

def Handle_StepAP203_StartWork_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_StartWork >":
    return _StepAP203.Handle_StepAP203_StartWork_DownCast(t)
Handle_StepAP203_StartWork_DownCast = _StepAP203.Handle_StepAP203_StartWork_DownCast

def Handle_StepAP203_StartWork_IsNull(t: 'opencascade::handle< StepAP203_StartWork > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_StartWork_IsNull(t)
Handle_StepAP203_StartWork_IsNull = _StepAP203.Handle_StepAP203_StartWork_IsNull

def Handle_StepAP203_HArray1OfSpecifiedItem_Create() -> "opencascade::handle< StepAP203_HArray1OfSpecifiedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_Create()
Handle_StepAP203_HArray1OfSpecifiedItem_Create = _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_Create

def Handle_StepAP203_HArray1OfSpecifiedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfSpecifiedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_DownCast(t)
Handle_StepAP203_HArray1OfSpecifiedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_DownCast

def Handle_StepAP203_HArray1OfSpecifiedItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfSpecifiedItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_IsNull(t)
Handle_StepAP203_HArray1OfSpecifiedItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_IsNull

def Handle_StepAP203_HArray1OfPersonOrganizationItem_Create() -> "opencascade::handle< StepAP203_HArray1OfPersonOrganizationItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_Create()
Handle_StepAP203_HArray1OfPersonOrganizationItem_Create = _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_Create

def Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfPersonOrganizationItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast(t)
Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast

def Handle_StepAP203_HArray1OfPersonOrganizationItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfPersonOrganizationItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_IsNull(t)
Handle_StepAP203_HArray1OfPersonOrganizationItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_IsNull

def Handle_StepAP203_HArray1OfChangeRequestItem_Create() -> "opencascade::handle< StepAP203_HArray1OfChangeRequestItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Create()
Handle_StepAP203_HArray1OfChangeRequestItem_Create = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Create

def Handle_StepAP203_HArray1OfChangeRequestItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfChangeRequestItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_DownCast(t)
Handle_StepAP203_HArray1OfChangeRequestItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_DownCast

def Handle_StepAP203_HArray1OfChangeRequestItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfChangeRequestItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IsNull(t)
Handle_StepAP203_HArray1OfChangeRequestItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IsNull

def Handle_StepAP203_HArray1OfContractedItem_Create() -> "opencascade::handle< StepAP203_HArray1OfContractedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_Create()
Handle_StepAP203_HArray1OfContractedItem_Create = _StepAP203.Handle_StepAP203_HArray1OfContractedItem_Create

def Handle_StepAP203_HArray1OfContractedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfContractedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_DownCast(t)
Handle_StepAP203_HArray1OfContractedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfContractedItem_DownCast

def Handle_StepAP203_HArray1OfContractedItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfContractedItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_IsNull(t)
Handle_StepAP203_HArray1OfContractedItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfContractedItem_IsNull

def Handle_StepAP203_HArray1OfCertifiedItem_Create() -> "opencascade::handle< StepAP203_HArray1OfCertifiedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_Create()
Handle_StepAP203_HArray1OfCertifiedItem_Create = _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_Create

def Handle_StepAP203_HArray1OfCertifiedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfCertifiedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_DownCast(t)
Handle_StepAP203_HArray1OfCertifiedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_DownCast

def Handle_StepAP203_HArray1OfCertifiedItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfCertifiedItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_IsNull(t)
Handle_StepAP203_HArray1OfCertifiedItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_IsNull

def Handle_StepAP203_HArray1OfStartRequestItem_Create() -> "opencascade::handle< StepAP203_HArray1OfStartRequestItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_Create()
Handle_StepAP203_HArray1OfStartRequestItem_Create = _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_Create

def Handle_StepAP203_HArray1OfStartRequestItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfStartRequestItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_DownCast(t)
Handle_StepAP203_HArray1OfStartRequestItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_DownCast

def Handle_StepAP203_HArray1OfStartRequestItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfStartRequestItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_IsNull(t)
Handle_StepAP203_HArray1OfStartRequestItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_IsNull

def Handle_StepAP203_HArray1OfDateTimeItem_Create() -> "opencascade::handle< StepAP203_HArray1OfDateTimeItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_Create()
Handle_StepAP203_HArray1OfDateTimeItem_Create = _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_Create

def Handle_StepAP203_HArray1OfDateTimeItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfDateTimeItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_DownCast(t)
Handle_StepAP203_HArray1OfDateTimeItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_DownCast

def Handle_StepAP203_HArray1OfDateTimeItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfDateTimeItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_IsNull(t)
Handle_StepAP203_HArray1OfDateTimeItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_IsNull

def Handle_StepAP203_HArray1OfApprovedItem_Create() -> "opencascade::handle< StepAP203_HArray1OfApprovedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_Create()
Handle_StepAP203_HArray1OfApprovedItem_Create = _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_Create

def Handle_StepAP203_HArray1OfApprovedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfApprovedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_DownCast(t)
Handle_StepAP203_HArray1OfApprovedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_DownCast

def Handle_StepAP203_HArray1OfApprovedItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfApprovedItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_IsNull(t)
Handle_StepAP203_HArray1OfApprovedItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_IsNull

def Handle_StepAP203_HArray1OfWorkItem_Create() -> "opencascade::handle< StepAP203_HArray1OfWorkItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Create()
Handle_StepAP203_HArray1OfWorkItem_Create = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Create

def Handle_StepAP203_HArray1OfWorkItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfWorkItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_DownCast(t)
Handle_StepAP203_HArray1OfWorkItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_DownCast

def Handle_StepAP203_HArray1OfWorkItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfWorkItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IsNull(t)
Handle_StepAP203_HArray1OfWorkItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IsNull

def Handle_StepAP203_HArray1OfClassifiedItem_Create() -> "opencascade::handle< StepAP203_HArray1OfClassifiedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_Create()
Handle_StepAP203_HArray1OfClassifiedItem_Create = _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_Create

def Handle_StepAP203_HArray1OfClassifiedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepAP203_HArray1OfClassifiedItem >":
    return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_DownCast(t)
Handle_StepAP203_HArray1OfClassifiedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_DownCast

def Handle_StepAP203_HArray1OfClassifiedItem_IsNull(t: 'opencascade::handle< StepAP203_HArray1OfClassifiedItem > const &') -> "bool":
    return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_IsNull(t)
Handle_StepAP203_HArray1OfClassifiedItem_IsNull = _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_IsNull
class StepAP203_Array1OfApprovedItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfApprovedItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfApprovedItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_ApprovedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfApprovedItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_ApprovedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfApprovedItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_ApprovedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfApprovedItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_ApprovedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfApprovedItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfApprovedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_ApprovedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfApprovedItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfApprovedItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfApprovedItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfApprovedItem') -> "NCollection_Array1< StepAP203_ApprovedItem > &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfApprovedItem') -> "NCollection_Array1< StepAP203_ApprovedItem > &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_ApprovedItem > &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Set(self, *args)

    def First(self) -> "StepAP203_ApprovedItem const &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_First(self)

    def ChangeFirst(self) -> "StepAP203_ApprovedItem &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_ApprovedItem const &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Last(self)

    def ChangeLast(self) -> "StepAP203_ApprovedItem &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_ApprovedItem const &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_ApprovedItem &":
        return _StepAP203.StepAP203_Array1OfApprovedItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_ApprovedItem &":
        return _StepAP203.StepAP203_Array1OfApprovedItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_ApprovedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfApprovedItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfApprovedItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfApprovedItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfApprovedItem_swigregister = _StepAP203.StepAP203_Array1OfApprovedItem_swigregister
StepAP203_Array1OfApprovedItem_swigregister(StepAP203_Array1OfApprovedItem)

class StepAP203_Array1OfCertifiedItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfCertifiedItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfCertifiedItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_CertifiedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_CertifiedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_CertifiedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_CertifiedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfCertifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_CertifiedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfCertifiedItem') -> "NCollection_Array1< StepAP203_CertifiedItem > &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfCertifiedItem') -> "NCollection_Array1< StepAP203_CertifiedItem > &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_CertifiedItem > &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Set(self, *args)

    def First(self) -> "StepAP203_CertifiedItem const &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_First(self)

    def ChangeFirst(self) -> "StepAP203_CertifiedItem &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_CertifiedItem const &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Last(self)

    def ChangeLast(self) -> "StepAP203_CertifiedItem &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_CertifiedItem const &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_CertifiedItem &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_CertifiedItem &":
        return _StepAP203.StepAP203_Array1OfCertifiedItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_CertifiedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfCertifiedItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfCertifiedItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfCertifiedItem_swigregister = _StepAP203.StepAP203_Array1OfCertifiedItem_swigregister
StepAP203_Array1OfCertifiedItem_swigregister(StepAP203_Array1OfCertifiedItem)

class StepAP203_Array1OfChangeRequestItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfChangeRequestItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfChangeRequestItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_ChangeRequestItem >::iterator":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_ChangeRequestItem >::iterator":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_ChangeRequestItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_ChangeRequestItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfChangeRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_ChangeRequestItem') -> "void":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfChangeRequestItem') -> "NCollection_Array1< StepAP203_ChangeRequestItem > &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfChangeRequestItem') -> "NCollection_Array1< StepAP203_ChangeRequestItem > &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_ChangeRequestItem > &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Set(self, *args)

    def First(self) -> "StepAP203_ChangeRequestItem const &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_First(self)

    def ChangeFirst(self) -> "StepAP203_ChangeRequestItem &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_ChangeRequestItem const &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Last(self)

    def ChangeLast(self) -> "StepAP203_ChangeRequestItem &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_ChangeRequestItem const &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_ChangeRequestItem &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_ChangeRequestItem &":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_ChangeRequestItem') -> "void":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfChangeRequestItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfChangeRequestItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfChangeRequestItem_swigregister = _StepAP203.StepAP203_Array1OfChangeRequestItem_swigregister
StepAP203_Array1OfChangeRequestItem_swigregister(StepAP203_Array1OfChangeRequestItem)

class StepAP203_Array1OfClassifiedItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfClassifiedItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfClassifiedItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_ClassifiedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_ClassifiedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_ClassifiedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_ClassifiedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfClassifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_ClassifiedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfClassifiedItem') -> "NCollection_Array1< StepAP203_ClassifiedItem > &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfClassifiedItem') -> "NCollection_Array1< StepAP203_ClassifiedItem > &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_ClassifiedItem > &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Set(self, *args)

    def First(self) -> "StepAP203_ClassifiedItem const &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_First(self)

    def ChangeFirst(self) -> "StepAP203_ClassifiedItem &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_ClassifiedItem const &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Last(self)

    def ChangeLast(self) -> "StepAP203_ClassifiedItem &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_ClassifiedItem const &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_ClassifiedItem &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_ClassifiedItem &":
        return _StepAP203.StepAP203_Array1OfClassifiedItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_ClassifiedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfClassifiedItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfClassifiedItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfClassifiedItem_swigregister = _StepAP203.StepAP203_Array1OfClassifiedItem_swigregister
StepAP203_Array1OfClassifiedItem_swigregister(StepAP203_Array1OfClassifiedItem)

class StepAP203_Array1OfContractedItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfContractedItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfContractedItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_ContractedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfContractedItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_ContractedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfContractedItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_ContractedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfContractedItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_ContractedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfContractedItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfContractedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_ContractedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfContractedItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfContractedItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfContractedItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfContractedItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfContractedItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfContractedItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfContractedItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfContractedItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfContractedItem') -> "NCollection_Array1< StepAP203_ContractedItem > &":
        return _StepAP203.StepAP203_Array1OfContractedItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfContractedItem') -> "NCollection_Array1< StepAP203_ContractedItem > &":
        return _StepAP203.StepAP203_Array1OfContractedItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_ContractedItem > &":
        return _StepAP203.StepAP203_Array1OfContractedItem_Set(self, *args)

    def First(self) -> "StepAP203_ContractedItem const &":
        return _StepAP203.StepAP203_Array1OfContractedItem_First(self)

    def ChangeFirst(self) -> "StepAP203_ContractedItem &":
        return _StepAP203.StepAP203_Array1OfContractedItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_ContractedItem const &":
        return _StepAP203.StepAP203_Array1OfContractedItem_Last(self)

    def ChangeLast(self) -> "StepAP203_ContractedItem &":
        return _StepAP203.StepAP203_Array1OfContractedItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_ContractedItem const &":
        return _StepAP203.StepAP203_Array1OfContractedItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_ContractedItem &":
        return _StepAP203.StepAP203_Array1OfContractedItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_ContractedItem &":
        return _StepAP203.StepAP203_Array1OfContractedItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_ContractedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfContractedItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfContractedItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfContractedItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfContractedItem_swigregister = _StepAP203.StepAP203_Array1OfContractedItem_swigregister
StepAP203_Array1OfContractedItem_swigregister(StepAP203_Array1OfContractedItem)

class StepAP203_Array1OfDateTimeItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfDateTimeItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfDateTimeItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_DateTimeItem >::iterator":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_DateTimeItem >::iterator":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_DateTimeItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_DateTimeItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfDateTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_DateTimeItem') -> "void":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfDateTimeItem') -> "NCollection_Array1< StepAP203_DateTimeItem > &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfDateTimeItem') -> "NCollection_Array1< StepAP203_DateTimeItem > &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_DateTimeItem > &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Set(self, *args)

    def First(self) -> "StepAP203_DateTimeItem const &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_First(self)

    def ChangeFirst(self) -> "StepAP203_DateTimeItem &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_DateTimeItem const &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Last(self)

    def ChangeLast(self) -> "StepAP203_DateTimeItem &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_DateTimeItem const &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_DateTimeItem &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_DateTimeItem &":
        return _StepAP203.StepAP203_Array1OfDateTimeItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_DateTimeItem') -> "void":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfDateTimeItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfDateTimeItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfDateTimeItem_swigregister = _StepAP203.StepAP203_Array1OfDateTimeItem_swigregister
StepAP203_Array1OfDateTimeItem_swigregister(StepAP203_Array1OfDateTimeItem)

class StepAP203_Array1OfPersonOrganizationItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfPersonOrganizationItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfPersonOrganizationItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_PersonOrganizationItem >::iterator":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_PersonOrganizationItem >::iterator":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_PersonOrganizationItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_PersonOrganizationItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfPersonOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_PersonOrganizationItem') -> "void":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfPersonOrganizationItem') -> "NCollection_Array1< StepAP203_PersonOrganizationItem > &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfPersonOrganizationItem') -> "NCollection_Array1< StepAP203_PersonOrganizationItem > &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_PersonOrganizationItem > &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Set(self, *args)

    def First(self) -> "StepAP203_PersonOrganizationItem const &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_First(self)

    def ChangeFirst(self) -> "StepAP203_PersonOrganizationItem &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_PersonOrganizationItem const &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Last(self)

    def ChangeLast(self) -> "StepAP203_PersonOrganizationItem &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_PersonOrganizationItem const &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_PersonOrganizationItem &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_PersonOrganizationItem &":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_PersonOrganizationItem') -> "void":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfPersonOrganizationItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfPersonOrganizationItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfPersonOrganizationItem_swigregister = _StepAP203.StepAP203_Array1OfPersonOrganizationItem_swigregister
StepAP203_Array1OfPersonOrganizationItem_swigregister(StepAP203_Array1OfPersonOrganizationItem)

class StepAP203_Array1OfSpecifiedItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfSpecifiedItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfSpecifiedItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_SpecifiedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_SpecifiedItem >::iterator":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_SpecifiedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_SpecifiedItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfSpecifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_SpecifiedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfSpecifiedItem') -> "NCollection_Array1< StepAP203_SpecifiedItem > &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfSpecifiedItem') -> "NCollection_Array1< StepAP203_SpecifiedItem > &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_SpecifiedItem > &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Set(self, *args)

    def First(self) -> "StepAP203_SpecifiedItem const &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_First(self)

    def ChangeFirst(self) -> "StepAP203_SpecifiedItem &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_SpecifiedItem const &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Last(self)

    def ChangeLast(self) -> "StepAP203_SpecifiedItem &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_SpecifiedItem const &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_SpecifiedItem &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_SpecifiedItem &":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_SpecifiedItem') -> "void":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfSpecifiedItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfSpecifiedItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfSpecifiedItem_swigregister = _StepAP203.StepAP203_Array1OfSpecifiedItem_swigregister
StepAP203_Array1OfSpecifiedItem_swigregister(StepAP203_Array1OfSpecifiedItem)

class StepAP203_Array1OfStartRequestItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfStartRequestItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfStartRequestItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_StartRequestItem >::iterator":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_StartRequestItem >::iterator":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_StartRequestItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_StartRequestItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfStartRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_StartRequestItem') -> "void":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfStartRequestItem') -> "NCollection_Array1< StepAP203_StartRequestItem > &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfStartRequestItem') -> "NCollection_Array1< StepAP203_StartRequestItem > &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_StartRequestItem > &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Set(self, *args)

    def First(self) -> "StepAP203_StartRequestItem const &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_First(self)

    def ChangeFirst(self) -> "StepAP203_StartRequestItem &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_StartRequestItem const &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Last(self)

    def ChangeLast(self) -> "StepAP203_StartRequestItem &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_StartRequestItem const &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_StartRequestItem &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_StartRequestItem &":
        return _StepAP203.StepAP203_Array1OfStartRequestItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_StartRequestItem') -> "void":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfStartRequestItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfStartRequestItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfStartRequestItem_swigregister = _StepAP203.StepAP203_Array1OfStartRequestItem_swigregister
StepAP203_Array1OfStartRequestItem_swigregister(StepAP203_Array1OfStartRequestItem)

class StepAP203_Array1OfWorkItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Array1OfWorkItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Array1OfWorkItem, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< StepAP203_WorkItem >::iterator":
        return _StepAP203.StepAP203_Array1OfWorkItem_begin(self)

    def end(self) -> "NCollection_Array1< StepAP203_WorkItem >::iterator":
        return _StepAP203.StepAP203_Array1OfWorkItem_end(self)

    def cbegin(self) -> "NCollection_Array1< StepAP203_WorkItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfWorkItem_cbegin(self)

    def cend(self) -> "NCollection_Array1< StepAP203_WorkItem >::const_iterator":
        return _StepAP203.StepAP203_Array1OfWorkItem_cend(self)

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_Array1OfWorkItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'StepAP203_WorkItem') -> "void":
        return _StepAP203.StepAP203_Array1OfWorkItem_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfWorkItem_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfWorkItem_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfWorkItem_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfWorkItem_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepAP203.StepAP203_Array1OfWorkItem_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfWorkItem_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepAP203.StepAP203_Array1OfWorkItem_IsAllocated(self)

    def Assign(self, theOther: 'StepAP203_Array1OfWorkItem') -> "NCollection_Array1< StepAP203_WorkItem > &":
        return _StepAP203.StepAP203_Array1OfWorkItem_Assign(self, theOther)

    def Move(self, theOther: 'StepAP203_Array1OfWorkItem') -> "NCollection_Array1< StepAP203_WorkItem > &":
        return _StepAP203.StepAP203_Array1OfWorkItem_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< StepAP203_WorkItem > &":
        return _StepAP203.StepAP203_Array1OfWorkItem_Set(self, *args)

    def First(self) -> "StepAP203_WorkItem const &":
        return _StepAP203.StepAP203_Array1OfWorkItem_First(self)

    def ChangeFirst(self) -> "StepAP203_WorkItem &":
        return _StepAP203.StepAP203_Array1OfWorkItem_ChangeFirst(self)

    def Last(self) -> "StepAP203_WorkItem const &":
        return _StepAP203.StepAP203_Array1OfWorkItem_Last(self)

    def ChangeLast(self) -> "StepAP203_WorkItem &":
        return _StepAP203.StepAP203_Array1OfWorkItem_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "StepAP203_WorkItem const &":
        return _StepAP203.StepAP203_Array1OfWorkItem_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "StepAP203_WorkItem &":
        return _StepAP203.StepAP203_Array1OfWorkItem_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "StepAP203_WorkItem &":
        return _StepAP203.StepAP203_Array1OfWorkItem___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'StepAP203_WorkItem') -> "void":
        return _StepAP203.StepAP203_Array1OfWorkItem_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepAP203.StepAP203_Array1OfWorkItem_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepAP203.delete_StepAP203_Array1OfWorkItem
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepAP203_Array1OfWorkItem_swigregister = _StepAP203.StepAP203_Array1OfWorkItem_swigregister
StepAP203_Array1OfWorkItem_swigregister(StepAP203_Array1OfWorkItem)

class StepAP203_ApprovedItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_ApprovedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_ApprovedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_ApprovedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Certification(self, *args) -> "opencascade::handle< StepBasic_Certification >":
        """
        Returns value as certification (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Certification>

        """
        return _StepAP203.StepAP203_ApprovedItem_Certification(self, *args)


    def Change(self, *args) -> "opencascade::handle< StepAP203_Change >":
        """
        Returns value as change (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_Change>

        """
        return _StepAP203.StepAP203_ApprovedItem_Change(self, *args)


    def ChangeRequest(self, *args) -> "opencascade::handle< StepAP203_ChangeRequest >":
        """
        Returns value as changerequest (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_ChangeRequest>

        """
        return _StepAP203.StepAP203_ApprovedItem_ChangeRequest(self, *args)


    def ConfigurationEffectivity(self, *args) -> "opencascade::handle< StepRepr_ConfigurationEffectivity >":
        """
        Returns value as configurationeffectivity (or null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_ConfigurationEffectivity>

        """
        return _StepAP203.StepAP203_ApprovedItem_ConfigurationEffectivity(self, *args)


    def ConfigurationItem(self, *args) -> "opencascade::handle< StepRepr_ConfigurationItem >":
        """
        Returns value as configurationitem (or null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_ConfigurationItem>

        """
        return _StepAP203.StepAP203_ApprovedItem_ConfigurationItem(self, *args)


    def Contract(self, *args) -> "opencascade::handle< StepBasic_Contract >":
        """
        Returns value as contract (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Contract>

        """
        return _StepAP203.StepAP203_ApprovedItem_Contract(self, *args)


    def ProductDefinition(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        Returns value as productdefinition (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinition>

        """
        return _StepAP203.StepAP203_ApprovedItem_ProductDefinition(self, *args)


    def ProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns value as productdefinitionformation (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepAP203.StepAP203_ApprovedItem_ProductDefinitionFormation(self, *args)


    def SecurityClassification(self, *args) -> "opencascade::handle< StepBasic_SecurityClassification >":
        """
        Returns value as securityclassification (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_SecurityClassification>

        """
        return _StepAP203.StepAP203_ApprovedItem_SecurityClassification(self, *args)


    def StartRequest(self, *args) -> "opencascade::handle< StepAP203_StartRequest >":
        """
        Returns value as startrequest (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_StartRequest>

        """
        return _StepAP203.StepAP203_ApprovedItem_StartRequest(self, *args)


    def StartWork(self, *args) -> "opencascade::handle< StepAP203_StartWork >":
        """
        Returns value as startwork (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_StartWork>

        """
        return _StepAP203.StepAP203_ApprovedItem_StartWork(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_ApprovedItem
    __del__ = lambda self: None
StepAP203_ApprovedItem_swigregister = _StepAP203.StepAP203_ApprovedItem_swigregister
StepAP203_ApprovedItem_swigregister(StepAP203_ApprovedItem)

class StepAP203_CcDesignApproval(OCC.Core.StepBasic.StepBasic_ApprovalAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ApprovalAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_CcDesignApproval, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ApprovalAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_CcDesignApproval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_CcDesignApproval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aApprovalAssignment_AssignedApproval: StepBasic_Approval
        aItems: StepAP203_HArray1OfApprovedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignApproval_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfApprovedItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfApprovedItem>

        """
        return _StepAP203.StepAP203_CcDesignApproval_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfApprovedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignApproval_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_CcDesignApproval_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignApproval
    __del__ = lambda self: None
StepAP203_CcDesignApproval_swigregister = _StepAP203.StepAP203_CcDesignApproval_swigregister
StepAP203_CcDesignApproval_swigregister(StepAP203_CcDesignApproval)

class StepAP203_CcDesignCertification(OCC.Core.StepBasic.StepBasic_CertificationAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_CertificationAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_CcDesignCertification, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_CertificationAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_CcDesignCertification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_CcDesignCertification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aCertificationAssignment_AssignedCertification: StepBasic_Certification
        aItems: StepAP203_HArray1OfCertifiedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignCertification_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfCertifiedItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfCertifiedItem>

        """
        return _StepAP203.StepAP203_CcDesignCertification_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfCertifiedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignCertification_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_CcDesignCertification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignCertification
    __del__ = lambda self: None
StepAP203_CcDesignCertification_swigregister = _StepAP203.StepAP203_CcDesignCertification_swigregister
StepAP203_CcDesignCertification_swigregister(StepAP203_CcDesignCertification)

class StepAP203_CcDesignContract(OCC.Core.StepBasic.StepBasic_ContractAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ContractAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_CcDesignContract, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ContractAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_CcDesignContract, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_CcDesignContract(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aContractAssignment_AssignedContract: StepBasic_Contract
        aItems: StepAP203_HArray1OfContractedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignContract_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfContractedItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfContractedItem>

        """
        return _StepAP203.StepAP203_CcDesignContract_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfContractedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignContract_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_CcDesignContract_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignContract
    __del__ = lambda self: None
StepAP203_CcDesignContract_swigregister = _StepAP203.StepAP203_CcDesignContract_swigregister
StepAP203_CcDesignContract_swigregister(StepAP203_CcDesignContract)

class StepAP203_CcDesignDateAndTimeAssignment(OCC.Core.StepBasic.StepBasic_DateAndTimeAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_DateAndTimeAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_CcDesignDateAndTimeAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_DateAndTimeAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_CcDesignDateAndTimeAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_CcDesignDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aDateAndTimeAssignment_AssignedDateAndTime: StepBasic_DateAndTime
        aDateAndTimeAssignment_Role: StepBasic_DateTimeRole
        aItems: StepAP203_HArray1OfDateTimeItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfDateTimeItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfDateTimeItem>

        """
        return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfDateTimeItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignDateAndTimeAssignment
    __del__ = lambda self: None
StepAP203_CcDesignDateAndTimeAssignment_swigregister = _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_swigregister
StepAP203_CcDesignDateAndTimeAssignment_swigregister(StepAP203_CcDesignDateAndTimeAssignment)

class StepAP203_CcDesignPersonAndOrganizationAssignment(OCC.Core.StepBasic.StepBasic_PersonAndOrganizationAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_PersonAndOrganizationAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_CcDesignPersonAndOrganizationAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_PersonAndOrganizationAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_CcDesignPersonAndOrganizationAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_CcDesignPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aPersonAndOrganizationAssignment_AssignedPersonAndOrganization: StepBasic_PersonAndOrganization
        aPersonAndOrganizationAssignment_Role: StepBasic_PersonAndOrganizationRole
        aItems: StepAP203_HArray1OfPersonOrganizationItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfPersonOrganizationItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfPersonOrganizationItem>

        """
        return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfPersonOrganizationItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignPersonAndOrganizationAssignment
    __del__ = lambda self: None
StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister = _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister
StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister(StepAP203_CcDesignPersonAndOrganizationAssignment)

class StepAP203_CcDesignSecurityClassification(OCC.Core.StepBasic.StepBasic_SecurityClassificationAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_SecurityClassificationAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_CcDesignSecurityClassification, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_SecurityClassificationAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_CcDesignSecurityClassification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_CcDesignSecurityClassification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aSecurityClassificationAssignment_AssignedSecurityClassification: StepBasic_SecurityClassification
        aItems: StepAP203_HArray1OfClassifiedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignSecurityClassification_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfClassifiedItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfClassifiedItem>

        """
        return _StepAP203.StepAP203_CcDesignSecurityClassification_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfClassifiedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignSecurityClassification_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_CcDesignSecurityClassification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignSecurityClassification
    __del__ = lambda self: None
StepAP203_CcDesignSecurityClassification_swigregister = _StepAP203.StepAP203_CcDesignSecurityClassification_swigregister
StepAP203_CcDesignSecurityClassification_swigregister(StepAP203_CcDesignSecurityClassification)

class StepAP203_CcDesignSpecificationReference(OCC.Core.StepBasic.StepBasic_DocumentReference):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_DocumentReference]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_CcDesignSpecificationReference, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_DocumentReference]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_CcDesignSpecificationReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_CcDesignSpecificationReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aDocumentReference_AssignedDocument: StepBasic_Document
        aDocumentReference_Source: TCollection_HAsciiString
        aItems: StepAP203_HArray1OfSpecifiedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignSpecificationReference_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfSpecifiedItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfSpecifiedItem>

        """
        return _StepAP203.StepAP203_CcDesignSpecificationReference_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfSpecifiedItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_CcDesignSpecificationReference_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_CcDesignSpecificationReference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignSpecificationReference
    __del__ = lambda self: None
StepAP203_CcDesignSpecificationReference_swigregister = _StepAP203.StepAP203_CcDesignSpecificationReference_swigregister
StepAP203_CcDesignSpecificationReference_swigregister(StepAP203_CcDesignSpecificationReference)

class StepAP203_CertifiedItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_CertifiedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_CertifiedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_CertifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SuppliedPartRelationship(self, *args) -> "opencascade::handle< StepRepr_SuppliedPartRelationship >":
        """
        Returns value as suppliedpartrelationship (or null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_SuppliedPartRelationship>

        """
        return _StepAP203.StepAP203_CertifiedItem_SuppliedPartRelationship(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_CertifiedItem
    __del__ = lambda self: None
StepAP203_CertifiedItem_swigregister = _StepAP203.StepAP203_CertifiedItem_swigregister
StepAP203_CertifiedItem_swigregister(StepAP203_CertifiedItem)

class StepAP203_Change(OCC.Core.StepBasic.StepBasic_ActionAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ActionAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_Change, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ActionAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_Change, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_Change(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aActionAssignment_AssignedAction: StepBasic_Action
        aItems: StepAP203_HArray1OfWorkItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_Change_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfWorkItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfWorkItem>

        """
        return _StepAP203.StepAP203_Change_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfWorkItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_Change_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_Change_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_Change
    __del__ = lambda self: None
StepAP203_Change_swigregister = _StepAP203.StepAP203_Change_swigregister
StepAP203_Change_swigregister(StepAP203_Change)

class StepAP203_ChangeRequest(OCC.Core.StepBasic.StepBasic_ActionRequestAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ActionRequestAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_ChangeRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ActionRequestAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_ChangeRequest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_ChangeRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aActionRequestAssignment_AssignedActionRequest: StepBasic_VersionedActionRequest
        aItems: StepAP203_HArray1OfChangeRequestItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_ChangeRequest_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfChangeRequestItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfChangeRequestItem>

        """
        return _StepAP203.StepAP203_ChangeRequest_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfChangeRequestItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_ChangeRequest_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_ChangeRequest_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_ChangeRequest
    __del__ = lambda self: None
StepAP203_ChangeRequest_swigregister = _StepAP203.StepAP203_ChangeRequest_swigregister
StepAP203_ChangeRequest_swigregister(StepAP203_ChangeRequest)

class StepAP203_ChangeRequestItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_ChangeRequestItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_ChangeRequestItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_ChangeRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns value as productdefinitionformation (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepAP203.StepAP203_ChangeRequestItem_ProductDefinitionFormation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_ChangeRequestItem
    __del__ = lambda self: None
StepAP203_ChangeRequestItem_swigregister = _StepAP203.StepAP203_ChangeRequestItem_swigregister
StepAP203_ChangeRequestItem_swigregister(StepAP203_ChangeRequestItem)

class StepAP203_ClassifiedItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_ClassifiedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_ClassifiedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_ClassifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssemblyComponentUsage(self, *args) -> "opencascade::handle< StepRepr_AssemblyComponentUsage >":
        """
        Returns value as assemblycomponentusage (or null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_AssemblyComponentUsage>

        """
        return _StepAP203.StepAP203_ClassifiedItem_AssemblyComponentUsage(self, *args)


    def ProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns value as productdefinitionformation (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepAP203.StepAP203_ClassifiedItem_ProductDefinitionFormation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_ClassifiedItem
    __del__ = lambda self: None
StepAP203_ClassifiedItem_swigregister = _StepAP203.StepAP203_ClassifiedItem_swigregister
StepAP203_ClassifiedItem_swigregister(StepAP203_ClassifiedItem)

class StepAP203_ContractedItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_ContractedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_ContractedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_ContractedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns value as productdefinitionformation (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepAP203.StepAP203_ContractedItem_ProductDefinitionFormation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_ContractedItem
    __del__ = lambda self: None
StepAP203_ContractedItem_swigregister = _StepAP203.StepAP203_ContractedItem_swigregister
StepAP203_ContractedItem_swigregister(StepAP203_ContractedItem)

class StepAP203_DateTimeItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_DateTimeItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_DateTimeItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_DateTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ApprovalPersonOrganization(self, *args) -> "opencascade::handle< StepBasic_ApprovalPersonOrganization >":
        """
        Returns value as approvalpersonorganization (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ApprovalPersonOrganization>

        """
        return _StepAP203.StepAP203_DateTimeItem_ApprovalPersonOrganization(self, *args)


    def Certification(self, *args) -> "opencascade::handle< StepBasic_Certification >":
        """
        Returns value as certification (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Certification>

        """
        return _StepAP203.StepAP203_DateTimeItem_Certification(self, *args)


    def Change(self, *args) -> "opencascade::handle< StepAP203_Change >":
        """
        Returns value as change (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_Change>

        """
        return _StepAP203.StepAP203_DateTimeItem_Change(self, *args)


    def ChangeRequest(self, *args) -> "opencascade::handle< StepAP203_ChangeRequest >":
        """
        Returns value as changerequest (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_ChangeRequest>

        """
        return _StepAP203.StepAP203_DateTimeItem_ChangeRequest(self, *args)


    def Contract(self, *args) -> "opencascade::handle< StepBasic_Contract >":
        """
        Returns value as contract (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Contract>

        """
        return _StepAP203.StepAP203_DateTimeItem_Contract(self, *args)


    def ProductDefinition(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        Returns value as productdefinition (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinition>

        """
        return _StepAP203.StepAP203_DateTimeItem_ProductDefinition(self, *args)


    def SecurityClassification(self, *args) -> "opencascade::handle< StepBasic_SecurityClassification >":
        """
        Returns value as securityclassification (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_SecurityClassification>

        """
        return _StepAP203.StepAP203_DateTimeItem_SecurityClassification(self, *args)


    def StartRequest(self, *args) -> "opencascade::handle< StepAP203_StartRequest >":
        """
        Returns value as startrequest (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_StartRequest>

        """
        return _StepAP203.StepAP203_DateTimeItem_StartRequest(self, *args)


    def StartWork(self, *args) -> "opencascade::handle< StepAP203_StartWork >":
        """
        Returns value as startwork (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_StartWork>

        """
        return _StepAP203.StepAP203_DateTimeItem_StartWork(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_DateTimeItem
    __del__ = lambda self: None
StepAP203_DateTimeItem_swigregister = _StepAP203.StepAP203_DateTimeItem_swigregister
StepAP203_DateTimeItem_swigregister(StepAP203_DateTimeItem)

class StepAP203_PersonOrganizationItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_PersonOrganizationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_PersonOrganizationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_PersonOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Change(self, *args) -> "opencascade::handle< StepAP203_Change >":
        """
        Returns value as change (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_Change>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_Change(self, *args)


    def ChangeRequest(self, *args) -> "opencascade::handle< StepAP203_ChangeRequest >":
        """
        Returns value as changerequest (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_ChangeRequest>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_ChangeRequest(self, *args)


    def ConfigurationItem(self, *args) -> "opencascade::handle< StepRepr_ConfigurationItem >":
        """
        Returns value as configurationitem (or null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_ConfigurationItem>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_ConfigurationItem(self, *args)


    def Contract(self, *args) -> "opencascade::handle< StepBasic_Contract >":
        """
        Returns value as contract (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Contract>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_Contract(self, *args)


    def Product(self, *args) -> "opencascade::handle< StepBasic_Product >":
        """
        Returns value as product (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Product>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_Product(self, *args)


    def ProductDefinition(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        Returns value as productdefinition (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinition>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_ProductDefinition(self, *args)


    def ProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns value as productdefinitionformation (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_ProductDefinitionFormation(self, *args)


    def SecurityClassification(self, *args) -> "opencascade::handle< StepBasic_SecurityClassification >":
        """
        Returns value as securityclassification (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_SecurityClassification>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_SecurityClassification(self, *args)


    def StartRequest(self, *args) -> "opencascade::handle< StepAP203_StartRequest >":
        """
        Returns value as startrequest (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_StartRequest>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_StartRequest(self, *args)


    def StartWork(self, *args) -> "opencascade::handle< StepAP203_StartWork >":
        """
        Returns value as startwork (or null if another type).

        Returns
        -------
        opencascade::handle<StepAP203_StartWork>

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_StartWork(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_PersonOrganizationItem
    __del__ = lambda self: None
StepAP203_PersonOrganizationItem_swigregister = _StepAP203.StepAP203_PersonOrganizationItem_swigregister
StepAP203_PersonOrganizationItem_swigregister(StepAP203_PersonOrganizationItem)

class StepAP203_SpecifiedItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_SpecifiedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_SpecifiedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_SpecifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ProductDefinition(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        Returns value as productdefinition (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinition>

        """
        return _StepAP203.StepAP203_SpecifiedItem_ProductDefinition(self, *args)


    def ShapeAspect(self, *args) -> "opencascade::handle< StepRepr_ShapeAspect >":
        """
        Returns value as shapeaspect (or null if another type).

        Returns
        -------
        opencascade::handle<StepRepr_ShapeAspect>

        """
        return _StepAP203.StepAP203_SpecifiedItem_ShapeAspect(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_SpecifiedItem
    __del__ = lambda self: None
StepAP203_SpecifiedItem_swigregister = _StepAP203.StepAP203_SpecifiedItem_swigregister
StepAP203_SpecifiedItem_swigregister(StepAP203_SpecifiedItem)

class StepAP203_StartRequest(OCC.Core.StepBasic.StepBasic_ActionRequestAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ActionRequestAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_StartRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ActionRequestAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_StartRequest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_StartRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aActionRequestAssignment_AssignedActionRequest: StepBasic_VersionedActionRequest
        aItems: StepAP203_HArray1OfStartRequestItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_StartRequest_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfStartRequestItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfStartRequestItem>

        """
        return _StepAP203.StepAP203_StartRequest_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfStartRequestItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_StartRequest_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_StartRequest_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_StartRequest
    __del__ = lambda self: None
StepAP203_StartRequest_swigregister = _StepAP203.StepAP203_StartRequest_swigregister
StepAP203_StartRequest_swigregister(StepAP203_StartRequest)

class StepAP203_StartRequestItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_StartRequestItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_StartRequestItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_StartRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns value as productdefinitionformation (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepAP203.StepAP203_StartRequestItem_ProductDefinitionFormation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_StartRequestItem
    __del__ = lambda self: None
StepAP203_StartRequestItem_swigregister = _StepAP203.StepAP203_StartRequestItem_swigregister
StepAP203_StartRequestItem_swigregister(StepAP203_StartRequestItem)

class StepAP203_StartWork(OCC.Core.StepBasic.StepBasic_ActionAssignment):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ActionAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_StartWork, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepBasic.StepBasic_ActionAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_StartWork, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_StartWork(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aActionAssignment_AssignedAction: StepBasic_Action
        aItems: StepAP203_HArray1OfWorkItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_StartWork_Init(self, *args)


    def Items(self, *args) -> "opencascade::handle< StepAP203_HArray1OfWorkItem >":
        """
        Returns field items.

        Returns
        -------
        opencascade::handle<StepAP203_HArray1OfWorkItem>

        """
        return _StepAP203.StepAP203_StartWork_Items(self, *args)


    def SetItems(self, *args) -> "void":
        """
        Set field items.

        Parameters
        ----------
        Items: StepAP203_HArray1OfWorkItem

        Returns
        -------
        None

        """
        return _StepAP203.StepAP203_StartWork_SetItems(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_StartWork_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_StartWork
    __del__ = lambda self: None
StepAP203_StartWork_swigregister = _StepAP203.StepAP203_StartWork_swigregister
StepAP203_StartWork_swigregister(StepAP203_StartWork)

class StepAP203_WorkItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_WorkItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_WorkItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepAP203.new_StepAP203_WorkItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns value as productdefinitionformation (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepAP203.StepAP203_WorkItem_ProductDefinitionFormation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepAP203.delete_StepAP203_WorkItem
    __del__ = lambda self: None
StepAP203_WorkItem_swigregister = _StepAP203.StepAP203_WorkItem_swigregister
StepAP203_WorkItem_swigregister(StepAP203_WorkItem)

class StepAP203_HArray1OfSpecifiedItem(StepAP203_Array1OfSpecifiedItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfSpecifiedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfSpecifiedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfSpecifiedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfSpecifiedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfSpecifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfSpecifiedItem const &":
        return _StepAP203.StepAP203_HArray1OfSpecifiedItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfSpecifiedItem &":
        return _StepAP203.StepAP203_HArray1OfSpecifiedItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfSpecifiedItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfSpecifiedItem
    __del__ = lambda self: None
StepAP203_HArray1OfSpecifiedItem_swigregister = _StepAP203.StepAP203_HArray1OfSpecifiedItem_swigregister
StepAP203_HArray1OfSpecifiedItem_swigregister(StepAP203_HArray1OfSpecifiedItem)

class StepAP203_HArray1OfPersonOrganizationItem(StepAP203_Array1OfPersonOrganizationItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfPersonOrganizationItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfPersonOrganizationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfPersonOrganizationItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfPersonOrganizationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfPersonOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfPersonOrganizationItem const &":
        return _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfPersonOrganizationItem &":
        return _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfPersonOrganizationItem
    __del__ = lambda self: None
StepAP203_HArray1OfPersonOrganizationItem_swigregister = _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_swigregister
StepAP203_HArray1OfPersonOrganizationItem_swigregister(StepAP203_HArray1OfPersonOrganizationItem)

class StepAP203_HArray1OfChangeRequestItem(StepAP203_Array1OfChangeRequestItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfChangeRequestItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfChangeRequestItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfChangeRequestItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfChangeRequestItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfChangeRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfChangeRequestItem const &":
        return _StepAP203.StepAP203_HArray1OfChangeRequestItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfChangeRequestItem &":
        return _StepAP203.StepAP203_HArray1OfChangeRequestItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfChangeRequestItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfChangeRequestItem
    __del__ = lambda self: None
StepAP203_HArray1OfChangeRequestItem_swigregister = _StepAP203.StepAP203_HArray1OfChangeRequestItem_swigregister
StepAP203_HArray1OfChangeRequestItem_swigregister(StepAP203_HArray1OfChangeRequestItem)

class StepAP203_HArray1OfContractedItem(StepAP203_Array1OfContractedItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfContractedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfContractedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfContractedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfContractedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfContractedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfContractedItem const &":
        return _StepAP203.StepAP203_HArray1OfContractedItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfContractedItem &":
        return _StepAP203.StepAP203_HArray1OfContractedItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfContractedItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfContractedItem
    __del__ = lambda self: None
StepAP203_HArray1OfContractedItem_swigregister = _StepAP203.StepAP203_HArray1OfContractedItem_swigregister
StepAP203_HArray1OfContractedItem_swigregister(StepAP203_HArray1OfContractedItem)

class StepAP203_HArray1OfCertifiedItem(StepAP203_Array1OfCertifiedItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfCertifiedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfCertifiedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfCertifiedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfCertifiedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfCertifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfCertifiedItem const &":
        return _StepAP203.StepAP203_HArray1OfCertifiedItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfCertifiedItem &":
        return _StepAP203.StepAP203_HArray1OfCertifiedItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfCertifiedItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfCertifiedItem
    __del__ = lambda self: None
StepAP203_HArray1OfCertifiedItem_swigregister = _StepAP203.StepAP203_HArray1OfCertifiedItem_swigregister
StepAP203_HArray1OfCertifiedItem_swigregister(StepAP203_HArray1OfCertifiedItem)

class StepAP203_HArray1OfStartRequestItem(StepAP203_Array1OfStartRequestItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfStartRequestItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfStartRequestItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfStartRequestItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfStartRequestItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfStartRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfStartRequestItem const &":
        return _StepAP203.StepAP203_HArray1OfStartRequestItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfStartRequestItem &":
        return _StepAP203.StepAP203_HArray1OfStartRequestItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfStartRequestItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfStartRequestItem
    __del__ = lambda self: None
StepAP203_HArray1OfStartRequestItem_swigregister = _StepAP203.StepAP203_HArray1OfStartRequestItem_swigregister
StepAP203_HArray1OfStartRequestItem_swigregister(StepAP203_HArray1OfStartRequestItem)

class StepAP203_HArray1OfDateTimeItem(StepAP203_Array1OfDateTimeItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfDateTimeItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfDateTimeItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfDateTimeItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfDateTimeItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfDateTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfDateTimeItem const &":
        return _StepAP203.StepAP203_HArray1OfDateTimeItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfDateTimeItem &":
        return _StepAP203.StepAP203_HArray1OfDateTimeItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfDateTimeItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfDateTimeItem
    __del__ = lambda self: None
StepAP203_HArray1OfDateTimeItem_swigregister = _StepAP203.StepAP203_HArray1OfDateTimeItem_swigregister
StepAP203_HArray1OfDateTimeItem_swigregister(StepAP203_HArray1OfDateTimeItem)

class StepAP203_HArray1OfApprovedItem(StepAP203_Array1OfApprovedItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfApprovedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfApprovedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfApprovedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfApprovedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfApprovedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfApprovedItem const &":
        return _StepAP203.StepAP203_HArray1OfApprovedItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfApprovedItem &":
        return _StepAP203.StepAP203_HArray1OfApprovedItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfApprovedItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfApprovedItem
    __del__ = lambda self: None
StepAP203_HArray1OfApprovedItem_swigregister = _StepAP203.StepAP203_HArray1OfApprovedItem_swigregister
StepAP203_HArray1OfApprovedItem_swigregister(StepAP203_HArray1OfApprovedItem)

class StepAP203_HArray1OfWorkItem(StepAP203_Array1OfWorkItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfWorkItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfWorkItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfWorkItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfWorkItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfWorkItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfWorkItem const &":
        return _StepAP203.StepAP203_HArray1OfWorkItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfWorkItem &":
        return _StepAP203.StepAP203_HArray1OfWorkItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfWorkItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfWorkItem
    __del__ = lambda self: None
StepAP203_HArray1OfWorkItem_swigregister = _StepAP203.StepAP203_HArray1OfWorkItem_swigregister
StepAP203_HArray1OfWorkItem_swigregister(StepAP203_HArray1OfWorkItem)

class StepAP203_HArray1OfClassifiedItem(StepAP203_Array1OfClassifiedItem, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepAP203_Array1OfClassifiedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepAP203_HArray1OfClassifiedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [StepAP203_Array1OfClassifiedItem, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepAP203_HArray1OfClassifiedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepAP203.new_StepAP203_HArray1OfClassifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepAP203_Array1OfClassifiedItem const &":
        return _StepAP203.StepAP203_HArray1OfClassifiedItem_Array1(self)

    def ChangeArray1(self) -> "StepAP203_Array1OfClassifiedItem &":
        return _StepAP203.StepAP203_HArray1OfClassifiedItem_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepAP203_HArray1OfClassifiedItem_DownCast(t)

    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfClassifiedItem
    __del__ = lambda self: None
StepAP203_HArray1OfClassifiedItem_swigregister = _StepAP203.StepAP203_HArray1OfClassifiedItem_swigregister
StepAP203_HArray1OfClassifiedItem_swigregister(StepAP203_HArray1OfClassifiedItem)



# This file is compatible with both classic and new-style classes.


