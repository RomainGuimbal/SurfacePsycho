# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ApproxInt module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_approxint.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ApproxInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ApproxInt')
    _ApproxInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ApproxInt', [dirname(__file__)])
        except ImportError:
            import _ApproxInt
            return _ApproxInt
        try:
            _mod = imp.load_module('_ApproxInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ApproxInt = swig_import_helper()
    del swig_import_helper
else:
    import _ApproxInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ApproxInt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _ApproxInt.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ApproxInt.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ApproxInt.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _ApproxInt.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _ApproxInt.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _ApproxInt.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _ApproxInt.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _ApproxInt.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _ApproxInt.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ApproxInt.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _ApproxInt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _ApproxInt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ApproxInt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ApproxInt.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ApproxInt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _ApproxInt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ApproxInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ApproxInt.process_exception(error, method_name, class_name)
process_exception = _ApproxInt.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColgp
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.IntSurf
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d

from enum import IntEnum
from OCC.Core.Exception import *



class ApproxInt_KnotTools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApproxInt_KnotTools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApproxInt_KnotTools, name)
    __repr__ = _swig_repr

    def BuildKnots(*args) -> "void":
        """
        Main function to build optimal knot sequence. at least one set from (thepntsxyz, thepntsu1v1, thepntsu2v2) should exist. @param thepntsxyz - set of 3d points. @param thepntsu1v1 - set of 2d points. @param thepntsu2v2 - set of 2d points. @param thepars - expected parameters assoiated with set. @param theapproxxyz - flag, existence of 3d set. @param theapproxu1v1 - flag existence of first 2d set. @param theapproxu2v2 - flag existence of second 2d set. @param theminnbpnts - minimal number of points per knot interval. @param theknots - output knots sequence.

        Parameters
        ----------
        thePntsXYZ: TColgp_Array1OfPnt
        thePntsU1V1: TColgp_Array1OfPnt2d
        thePntsU2V2: TColgp_Array1OfPnt2d
        thePars: math_Vector
        theApproxXYZ: bool
        theApproxU1V1: bool
        theApproxU2V2: bool
        theMinNbPnts: int
        theKnots: NCollection_Vector<int>

        Returns
        -------
        None

        """
        return _ApproxInt.ApproxInt_KnotTools_BuildKnots(*args)

    BuildKnots = staticmethod(BuildKnots)

    __repr__ = _dumps_object


    def __init__(self):
        this = _ApproxInt.new_ApproxInt_KnotTools()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ApproxInt.delete_ApproxInt_KnotTools
    __del__ = lambda self: None
ApproxInt_KnotTools_swigregister = _ApproxInt.ApproxInt_KnotTools_swigregister
ApproxInt_KnotTools_swigregister(ApproxInt_KnotTools)

def ApproxInt_KnotTools_BuildKnots(*args) -> "void":
    """
    Main function to build optimal knot sequence. at least one set from (thepntsxyz, thepntsu1v1, thepntsu2v2) should exist. @param thepntsxyz - set of 3d points. @param thepntsu1v1 - set of 2d points. @param thepntsu2v2 - set of 2d points. @param thepars - expected parameters assoiated with set. @param theapproxxyz - flag, existence of 3d set. @param theapproxu1v1 - flag existence of first 2d set. @param theapproxu2v2 - flag existence of second 2d set. @param theminnbpnts - minimal number of points per knot interval. @param theknots - output knots sequence.

    Parameters
    ----------
    thePntsXYZ: TColgp_Array1OfPnt
    thePntsU1V1: TColgp_Array1OfPnt2d
    thePntsU2V2: TColgp_Array1OfPnt2d
    thePars: math_Vector
    theApproxXYZ: bool
    theApproxU1V1: bool
    theApproxU2V2: bool
    theMinNbPnts: int
    theKnots: NCollection_Vector<int>

    Returns
    -------
    None

    """
    return _ApproxInt.ApproxInt_KnotTools_BuildKnots(*args)

class ApproxInt_SvSurfaces(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApproxInt_SvSurfaces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApproxInt_SvSurfaces, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Compute(self, *args) -> "Standard_Boolean":
        """
        Returns true if tg,tguv1 tguv2 can be computed.

        Parameters
        ----------
        Pt: gp_Pnt
        Tg: gp_Vec
        Tguv1: gp_Vec2d
        Tguv2: gp_Vec2d

        Returns
        -------
        u1: float
        v1: float
        u2: float
        v2: float

        """
        return _ApproxInt.ApproxInt_SvSurfaces_Compute(self, *args)


    def Pnt(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        u1: float
        v1: float
        u2: float
        v2: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _ApproxInt.ApproxInt_SvSurfaces_Pnt(self, *args)


    def SeekPoint(self, *args) -> "Standard_Boolean":
        """
        Computes point on curve and parameters on the surfaces.

        Parameters
        ----------
        u1: float
        v1: float
        u2: float
        v2: float
        Point: IntSurf_PntOn2S

        Returns
        -------
        bool

        """
        return _ApproxInt.ApproxInt_SvSurfaces_SeekPoint(self, *args)


    def Tangency(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        u1: float
        v1: float
        u2: float
        v2: float
        Tg: gp_Vec

        Returns
        -------
        bool

        """
        return _ApproxInt.ApproxInt_SvSurfaces_Tangency(self, *args)


    def TangencyOnSurf1(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        u1: float
        v1: float
        u2: float
        v2: float
        Tg: gp_Vec2d

        Returns
        -------
        bool

        """
        return _ApproxInt.ApproxInt_SvSurfaces_TangencyOnSurf1(self, *args)


    def TangencyOnSurf2(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        u1: float
        v1: float
        u2: float
        v2: float
        Tg: gp_Vec2d

        Returns
        -------
        bool

        """
        return _ApproxInt.ApproxInt_SvSurfaces_TangencyOnSurf2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ApproxInt.delete_ApproxInt_SvSurfaces
    __del__ = lambda self: None
ApproxInt_SvSurfaces_swigregister = _ApproxInt.ApproxInt_SvSurfaces_swigregister
ApproxInt_SvSurfaces_swigregister(ApproxInt_SvSurfaces)



# This file is compatible with both classic and new-style classes.


