# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
ShapeProcessAPI module, see official documentation at
https://dev.opencascade.org/doc/occt-7.7.0/refman/html/package_shapeprocessapi.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ShapeProcessAPI
else:
    import _ShapeProcessAPI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeProcessAPI.delete_SwigPyIterator

    def value(self):
        return _ShapeProcessAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ShapeProcessAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ShapeProcessAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ShapeProcessAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ShapeProcessAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ShapeProcessAPI.SwigPyIterator_copy(self)

    def next(self):
        return _ShapeProcessAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _ShapeProcessAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _ShapeProcessAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ShapeProcessAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ShapeProcessAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ShapeProcessAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ShapeProcessAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ShapeProcessAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ShapeProcessAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ShapeProcessAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ShapeProcessAPI:
_ShapeProcessAPI.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _ShapeProcessAPI.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _ShapeProcessAPI.ios_base_erase_event
    imbue_event = _ShapeProcessAPI.ios_base_imbue_event
    copyfmt_event = _ShapeProcessAPI.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _ShapeProcessAPI.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _ShapeProcessAPI.ios_base_flags(self, *args)

    def setf(self, *args):
        return _ShapeProcessAPI.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _ShapeProcessAPI.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _ShapeProcessAPI.ios_base_precision(self, *args)

    def width(self, *args):
        return _ShapeProcessAPI.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _ShapeProcessAPI.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _ShapeProcessAPI.ios_base_imbue(self, __loc)

    def getloc(self):
        return _ShapeProcessAPI.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _ShapeProcessAPI.ios_base_xalloc()

    def iword(self, __ix):
        return _ShapeProcessAPI.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _ShapeProcessAPI.ios_base_pword(self, __ix)
    __swig_destroy__ = _ShapeProcessAPI.delete_ios_base

# Register ios_base in _ShapeProcessAPI:
_ShapeProcessAPI.ios_base_swigregister(ios_base)
cvar = _ShapeProcessAPI.cvar
ios_base.boolalpha = _ShapeProcessAPI.cvar.ios_base_boolalpha
ios_base.dec = _ShapeProcessAPI.cvar.ios_base_dec
ios_base.fixed = _ShapeProcessAPI.cvar.ios_base_fixed
ios_base.hex = _ShapeProcessAPI.cvar.ios_base_hex
ios_base.internal = _ShapeProcessAPI.cvar.ios_base_internal
ios_base.left = _ShapeProcessAPI.cvar.ios_base_left
ios_base.oct = _ShapeProcessAPI.cvar.ios_base_oct
ios_base.right = _ShapeProcessAPI.cvar.ios_base_right
ios_base.scientific = _ShapeProcessAPI.cvar.ios_base_scientific
ios_base.showbase = _ShapeProcessAPI.cvar.ios_base_showbase
ios_base.showpoint = _ShapeProcessAPI.cvar.ios_base_showpoint
ios_base.showpos = _ShapeProcessAPI.cvar.ios_base_showpos
ios_base.skipws = _ShapeProcessAPI.cvar.ios_base_skipws
ios_base.unitbuf = _ShapeProcessAPI.cvar.ios_base_unitbuf
ios_base.uppercase = _ShapeProcessAPI.cvar.ios_base_uppercase
ios_base.adjustfield = _ShapeProcessAPI.cvar.ios_base_adjustfield
ios_base.basefield = _ShapeProcessAPI.cvar.ios_base_basefield
ios_base.floatfield = _ShapeProcessAPI.cvar.ios_base_floatfield
ios_base.badbit = _ShapeProcessAPI.cvar.ios_base_badbit
ios_base.eofbit = _ShapeProcessAPI.cvar.ios_base_eofbit
ios_base.failbit = _ShapeProcessAPI.cvar.ios_base_failbit
ios_base.goodbit = _ShapeProcessAPI.cvar.ios_base_goodbit
ios_base.app = _ShapeProcessAPI.cvar.ios_base_app
ios_base.ate = _ShapeProcessAPI.cvar.ios_base_ate
ios_base.binary = _ShapeProcessAPI.cvar.ios_base_binary
ios_base.ios_base_in = _ShapeProcessAPI.cvar.ios_base_ios_base_in
ios_base.out = _ShapeProcessAPI.cvar.ios_base_out
ios_base.trunc = _ShapeProcessAPI.cvar.ios_base_trunc
ios_base.beg = _ShapeProcessAPI.cvar.ios_base_beg
ios_base.cur = _ShapeProcessAPI.cvar.ios_base_cur
ios_base.end = _ShapeProcessAPI.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _ShapeProcessAPI.ios_rdstate(self)

    def clear(self, *args):
        return _ShapeProcessAPI.ios_clear(self, *args)

    def setstate(self, __state):
        return _ShapeProcessAPI.ios_setstate(self, __state)

    def good(self):
        return _ShapeProcessAPI.ios_good(self)

    def eof(self):
        return _ShapeProcessAPI.ios_eof(self)

    def fail(self):
        return _ShapeProcessAPI.ios_fail(self)

    def bad(self):
        return _ShapeProcessAPI.ios_bad(self)

    def exceptions(self, *args):
        return _ShapeProcessAPI.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _ShapeProcessAPI.ios_swiginit(self, _ShapeProcessAPI.new_ios(__sb))
    __swig_destroy__ = _ShapeProcessAPI.delete_ios

    def tie(self, *args):
        return _ShapeProcessAPI.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _ShapeProcessAPI.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _ShapeProcessAPI.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _ShapeProcessAPI.ios_fill(self, *args)

    def imbue(self, __loc):
        return _ShapeProcessAPI.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _ShapeProcessAPI.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _ShapeProcessAPI.ios_widen(self, __c)

# Register ios in _ShapeProcessAPI:
_ShapeProcessAPI.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _ShapeProcessAPI.ostream_swiginit(self, _ShapeProcessAPI.new_ostream(__sb))
    __swig_destroy__ = _ShapeProcessAPI.delete_ostream

    def __lshift__(self, *args):
        return _ShapeProcessAPI.ostream___lshift__(self, *args)

    def put(self, __c):
        return _ShapeProcessAPI.ostream_put(self, __c)

    def write(self, __s, __n):
        return _ShapeProcessAPI.ostream_write(self, __s, __n)

    def flush(self):
        return _ShapeProcessAPI.ostream_flush(self)

    def tellp(self):
        return _ShapeProcessAPI.ostream_tellp(self)

    def seekp(self, *args):
        return _ShapeProcessAPI.ostream_seekp(self, *args)

# Register ostream in _ShapeProcessAPI:
_ShapeProcessAPI.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _ShapeProcessAPI.istream_swiginit(self, _ShapeProcessAPI.new_istream(__sb))
    __swig_destroy__ = _ShapeProcessAPI.delete_istream

    def __rshift__(self, *args):
        return _ShapeProcessAPI.istream___rshift__(self, *args)

    def gcount(self):
        return _ShapeProcessAPI.istream_gcount(self)

    def get(self, *args):
        return _ShapeProcessAPI.istream_get(self, *args)

    def getline(self, *args):
        return _ShapeProcessAPI.istream_getline(self, *args)

    def ignore(self, *args):
        return _ShapeProcessAPI.istream_ignore(self, *args)

    def peek(self):
        return _ShapeProcessAPI.istream_peek(self)

    def read(self, __s, __n):
        return _ShapeProcessAPI.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _ShapeProcessAPI.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _ShapeProcessAPI.istream_putback(self, __c)

    def unget(self):
        return _ShapeProcessAPI.istream_unget(self)

    def sync(self):
        return _ShapeProcessAPI.istream_sync(self)

    def tellg(self):
        return _ShapeProcessAPI.istream_tellg(self)

    def seekg(self, *args):
        return _ShapeProcessAPI.istream_seekg(self, *args)

# Register istream in _ShapeProcessAPI:
_ShapeProcessAPI.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _ShapeProcessAPI.iostream_swiginit(self, _ShapeProcessAPI.new_iostream(__sb))
    __swig_destroy__ = _ShapeProcessAPI.delete_iostream

# Register iostream in _ShapeProcessAPI:
_ShapeProcessAPI.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _ShapeProcessAPI.endl_cb_ptr
endl = _ShapeProcessAPI.endl
ends_cb_ptr = _ShapeProcessAPI.ends_cb_ptr
ends = _ShapeProcessAPI.ends
flush_cb_ptr = _ShapeProcessAPI.flush_cb_ptr
flush = _ShapeProcessAPI.flush
import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.ShapeProcess
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.Resource
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.TopTools
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Geom2d
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.ShapeBuild

from enum import IntEnum
from OCC.Core.Exception import *



class ShapeProcessAPI_ApplySequence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        rscName: str
        seqName: str (optional, default to )

        Return
        -------
        None

        Description
        -----------
        Creates an object and loads resource file and sequence of operators given by their names.

        """
        _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_swiginit(self, _ShapeProcessAPI.new_ShapeProcessAPI_ApplySequence(*args))

    def ClearMap(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Clears mymap with accumulated history.

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_ClearMap(self, *args)

    def Context(self, *args):
        r"""
        Return
        -------
        opencascade::handle<ShapeProcess_ShapeContext>

        Description
        -----------
        Returns object for managing resource file and sequence of operators.

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Context(self, *args)

    def Map(self, *args):
        r"""
        Return
        -------
        TopTools_DataMapOfShapeShape

        Description
        -----------
        Returns mymap with accumulated history.

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Map(self, *args)

    def PrepareShape(self, *args):
        r"""

        Parameters
        ----------
        shape: TopoDS_Shape
        fillmap: bool (optional, default to Standard_False)
        until: TopAbs_ShapeEnum (optional, default to TopAbs_SHAPE)
        theProgress: Message_ProgressRange (optional, default to Message_ProgressRange())

        Return
        -------
        TopoDS_Shape

        Description
        -----------
        Performs sequence of operators stored in myrsc. if <fillmap> is true adds history 'shape-shape' into mymap for shape and its subshapes until level <until> (included). if <until> is topabs_shape, all the subshapes are considered.

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrepareShape(self, *args)

    def PrintPreparationResult(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Prints result of preparation onto the messenger of the context. note that results can be accumulated from previous preparations it method clearmap was not called before prepareshape.

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrintPreparationResult(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeProcessAPI.delete_ShapeProcessAPI_ApplySequence

# Register ShapeProcessAPI_ApplySequence in _ShapeProcessAPI:
_ShapeProcessAPI.ShapeProcessAPI_ApplySequence_swigregister(ShapeProcessAPI_ApplySequence)



