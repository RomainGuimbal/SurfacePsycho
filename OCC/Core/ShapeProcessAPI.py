# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeProcessAPI module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapeprocessapi.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeProcessAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeProcessAPI')
    _ShapeProcessAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeProcessAPI', [dirname(__file__)])
        except ImportError:
            import _ShapeProcessAPI
            return _ShapeProcessAPI
        try:
            _mod = imp.load_module('_ShapeProcessAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeProcessAPI = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeProcessAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeProcessAPI.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _ShapeProcessAPI.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ShapeProcessAPI.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ShapeProcessAPI.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _ShapeProcessAPI.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeProcessAPI.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _ShapeProcessAPI.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _ShapeProcessAPI.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _ShapeProcessAPI.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _ShapeProcessAPI.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ShapeProcessAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeProcessAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeProcessAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ShapeProcessAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ShapeProcessAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ShapeProcessAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _ShapeProcessAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ShapeProcessAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ShapeProcessAPI.process_exception(error, method_name, class_name)
process_exception = _ShapeProcessAPI.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.ShapeProcess
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.Resource
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Geom2d
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.ShapeBuild

from enum import IntEnum
from OCC.Core.Exception import *



class ShapeProcessAPI_ApplySequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeProcessAPI_ApplySequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeProcessAPI_ApplySequence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an object and loads resource file and sequence of operators given by their names.

        Parameters
        ----------
        rscName: char *
        seqName: char *,optional
        	default value is 

        Returns
        -------
        None

        """
        this = _ShapeProcessAPI.new_ShapeProcessAPI_ApplySequence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ClearMap(self, *args) -> "void":
        """
        Clears mymap with accumulated history.

        Returns
        -------
        None

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_ClearMap(self, *args)


    def Context(self, *args) -> "opencascade::handle< ShapeProcess_ShapeContext > &":
        """
        Returns object for managing resource file and sequence of operators.

        Returns
        -------
        opencascade::handle<ShapeProcess_ShapeContext>

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Context(self, *args)


    def Map(self, *args) -> "TopTools_DataMapOfShapeShape const &":
        """
        Returns mymap with accumulated history.

        Returns
        -------
        TopTools_DataMapOfShapeShape

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Map(self, *args)


    def PrepareShape(self, *args) -> "TopoDS_Shape":
        """
        Performs sequence of operators stored in myrsc. if <fillmap> is true adds history 'shape-shape' into mymap for shape and its subshapes until level <until> (included). if <until> is topabs_shape, all the subshapes are considered.

        Parameters
        ----------
        shape: TopoDS_Shape
        fillmap: bool,optional
        	default value is Standard_False
        until: TopAbs_ShapeEnum,optional
        	default value is TopAbs_SHAPE
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrepareShape(self, *args)


    def PrintPreparationResult(self, *args) -> "void":
        """
        Prints result of preparation onto the messenger of the context. note that results can be accumulated from previous preparations it method clearmap was not called before prepareshape.

        Returns
        -------
        None

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrintPreparationResult(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeProcessAPI.delete_ShapeProcessAPI_ApplySequence
    __del__ = lambda self: None
ShapeProcessAPI_ApplySequence_swigregister = _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_swigregister
ShapeProcessAPI_ApplySequence_swigregister(ShapeProcessAPI_ApplySequence)



# This file is compatible with both classic and new-style classes.


