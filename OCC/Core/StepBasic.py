# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
StepBasic module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_stepbasic.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepBasic')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepBasic')
    _StepBasic = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepBasic', [dirname(__file__)])
        except ImportError:
            import _StepBasic
            return _StepBasic
        try:
            _mod = imp.load_module('_StepBasic', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepBasic = swig_import_helper()
    del swig_import_helper
else:
    import _StepBasic
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepBasic.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StepBasic.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepBasic.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StepBasic.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StepBasic.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StepBasic.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StepBasic.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StepBasic.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StepBasic.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StepBasic.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepBasic.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StepBasic.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StepBasic.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepBasic.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StepBasic.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StepBasic.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StepBasic.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepBasic.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _StepBasic.process_exception(error, method_name, class_name)
process_exception = _StepBasic.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TCollection
import OCC.Core.StepData
import OCC.Core.Interface
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.MoniTool
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Resource

from enum import IntEnum
from OCC.Core.Exception import *

StepBasic_sMade = _StepBasic.StepBasic_sMade
StepBasic_sBought = _StepBasic.StepBasic_sBought
StepBasic_sNotKnown = _StepBasic.StepBasic_sNotKnown
StepBasic_aobAhead = _StepBasic.StepBasic_aobAhead
StepBasic_aobExact = _StepBasic.StepBasic_aobExact
StepBasic_aobBehind = _StepBasic.StepBasic_aobBehind
StepBasic_sunMetre = _StepBasic.StepBasic_sunMetre
StepBasic_sunGram = _StepBasic.StepBasic_sunGram
StepBasic_sunSecond = _StepBasic.StepBasic_sunSecond
StepBasic_sunAmpere = _StepBasic.StepBasic_sunAmpere
StepBasic_sunKelvin = _StepBasic.StepBasic_sunKelvin
StepBasic_sunMole = _StepBasic.StepBasic_sunMole
StepBasic_sunCandela = _StepBasic.StepBasic_sunCandela
StepBasic_sunRadian = _StepBasic.StepBasic_sunRadian
StepBasic_sunSteradian = _StepBasic.StepBasic_sunSteradian
StepBasic_sunHertz = _StepBasic.StepBasic_sunHertz
StepBasic_sunNewton = _StepBasic.StepBasic_sunNewton
StepBasic_sunPascal = _StepBasic.StepBasic_sunPascal
StepBasic_sunJoule = _StepBasic.StepBasic_sunJoule
StepBasic_sunWatt = _StepBasic.StepBasic_sunWatt
StepBasic_sunCoulomb = _StepBasic.StepBasic_sunCoulomb
StepBasic_sunVolt = _StepBasic.StepBasic_sunVolt
StepBasic_sunFarad = _StepBasic.StepBasic_sunFarad
StepBasic_sunOhm = _StepBasic.StepBasic_sunOhm
StepBasic_sunSiemens = _StepBasic.StepBasic_sunSiemens
StepBasic_sunWeber = _StepBasic.StepBasic_sunWeber
StepBasic_sunTesla = _StepBasic.StepBasic_sunTesla
StepBasic_sunHenry = _StepBasic.StepBasic_sunHenry
StepBasic_sunDegreeCelsius = _StepBasic.StepBasic_sunDegreeCelsius
StepBasic_sunLumen = _StepBasic.StepBasic_sunLumen
StepBasic_sunLux = _StepBasic.StepBasic_sunLux
StepBasic_sunBecquerel = _StepBasic.StepBasic_sunBecquerel
StepBasic_sunGray = _StepBasic.StepBasic_sunGray
StepBasic_sunSievert = _StepBasic.StepBasic_sunSievert
StepBasic_spExa = _StepBasic.StepBasic_spExa
StepBasic_spPeta = _StepBasic.StepBasic_spPeta
StepBasic_spTera = _StepBasic.StepBasic_spTera
StepBasic_spGiga = _StepBasic.StepBasic_spGiga
StepBasic_spMega = _StepBasic.StepBasic_spMega
StepBasic_spKilo = _StepBasic.StepBasic_spKilo
StepBasic_spHecto = _StepBasic.StepBasic_spHecto
StepBasic_spDeca = _StepBasic.StepBasic_spDeca
StepBasic_spDeci = _StepBasic.StepBasic_spDeci
StepBasic_spCenti = _StepBasic.StepBasic_spCenti
StepBasic_spMilli = _StepBasic.StepBasic_spMilli
StepBasic_spMicro = _StepBasic.StepBasic_spMicro
StepBasic_spNano = _StepBasic.StepBasic_spNano
StepBasic_spPico = _StepBasic.StepBasic_spPico
StepBasic_spFemto = _StepBasic.StepBasic_spFemto
StepBasic_spAtto = _StepBasic.StepBasic_spAtto


class StepBasic_Source(IntEnum):
	StepBasic_sMade = 0
	StepBasic_sBought = 1
	StepBasic_sNotKnown = 2
StepBasic_sMade = StepBasic_Source.StepBasic_sMade
StepBasic_sBought = StepBasic_Source.StepBasic_sBought
StepBasic_sNotKnown = StepBasic_Source.StepBasic_sNotKnown

class StepBasic_AheadOrBehind(IntEnum):
	StepBasic_aobAhead = 0
	StepBasic_aobExact = 1
	StepBasic_aobBehind = 2
StepBasic_aobAhead = StepBasic_AheadOrBehind.StepBasic_aobAhead
StepBasic_aobExact = StepBasic_AheadOrBehind.StepBasic_aobExact
StepBasic_aobBehind = StepBasic_AheadOrBehind.StepBasic_aobBehind

class StepBasic_SiUnitName(IntEnum):
	StepBasic_sunMetre = 0
	StepBasic_sunGram = 1
	StepBasic_sunSecond = 2
	StepBasic_sunAmpere = 3
	StepBasic_sunKelvin = 4
	StepBasic_sunMole = 5
	StepBasic_sunCandela = 6
	StepBasic_sunRadian = 7
	StepBasic_sunSteradian = 8
	StepBasic_sunHertz = 9
	StepBasic_sunNewton = 10
	StepBasic_sunPascal = 11
	StepBasic_sunJoule = 12
	StepBasic_sunWatt = 13
	StepBasic_sunCoulomb = 14
	StepBasic_sunVolt = 15
	StepBasic_sunFarad = 16
	StepBasic_sunOhm = 17
	StepBasic_sunSiemens = 18
	StepBasic_sunWeber = 19
	StepBasic_sunTesla = 20
	StepBasic_sunHenry = 21
	StepBasic_sunDegreeCelsius = 22
	StepBasic_sunLumen = 23
	StepBasic_sunLux = 24
	StepBasic_sunBecquerel = 25
	StepBasic_sunGray = 26
	StepBasic_sunSievert = 27
StepBasic_sunMetre = StepBasic_SiUnitName.StepBasic_sunMetre
StepBasic_sunGram = StepBasic_SiUnitName.StepBasic_sunGram
StepBasic_sunSecond = StepBasic_SiUnitName.StepBasic_sunSecond
StepBasic_sunAmpere = StepBasic_SiUnitName.StepBasic_sunAmpere
StepBasic_sunKelvin = StepBasic_SiUnitName.StepBasic_sunKelvin
StepBasic_sunMole = StepBasic_SiUnitName.StepBasic_sunMole
StepBasic_sunCandela = StepBasic_SiUnitName.StepBasic_sunCandela
StepBasic_sunRadian = StepBasic_SiUnitName.StepBasic_sunRadian
StepBasic_sunSteradian = StepBasic_SiUnitName.StepBasic_sunSteradian
StepBasic_sunHertz = StepBasic_SiUnitName.StepBasic_sunHertz
StepBasic_sunNewton = StepBasic_SiUnitName.StepBasic_sunNewton
StepBasic_sunPascal = StepBasic_SiUnitName.StepBasic_sunPascal
StepBasic_sunJoule = StepBasic_SiUnitName.StepBasic_sunJoule
StepBasic_sunWatt = StepBasic_SiUnitName.StepBasic_sunWatt
StepBasic_sunCoulomb = StepBasic_SiUnitName.StepBasic_sunCoulomb
StepBasic_sunVolt = StepBasic_SiUnitName.StepBasic_sunVolt
StepBasic_sunFarad = StepBasic_SiUnitName.StepBasic_sunFarad
StepBasic_sunOhm = StepBasic_SiUnitName.StepBasic_sunOhm
StepBasic_sunSiemens = StepBasic_SiUnitName.StepBasic_sunSiemens
StepBasic_sunWeber = StepBasic_SiUnitName.StepBasic_sunWeber
StepBasic_sunTesla = StepBasic_SiUnitName.StepBasic_sunTesla
StepBasic_sunHenry = StepBasic_SiUnitName.StepBasic_sunHenry
StepBasic_sunDegreeCelsius = StepBasic_SiUnitName.StepBasic_sunDegreeCelsius
StepBasic_sunLumen = StepBasic_SiUnitName.StepBasic_sunLumen
StepBasic_sunLux = StepBasic_SiUnitName.StepBasic_sunLux
StepBasic_sunBecquerel = StepBasic_SiUnitName.StepBasic_sunBecquerel
StepBasic_sunGray = StepBasic_SiUnitName.StepBasic_sunGray
StepBasic_sunSievert = StepBasic_SiUnitName.StepBasic_sunSievert

class StepBasic_SiPrefix(IntEnum):
	StepBasic_spExa = 0
	StepBasic_spPeta = 1
	StepBasic_spTera = 2
	StepBasic_spGiga = 3
	StepBasic_spMega = 4
	StepBasic_spKilo = 5
	StepBasic_spHecto = 6
	StepBasic_spDeca = 7
	StepBasic_spDeci = 8
	StepBasic_spCenti = 9
	StepBasic_spMilli = 10
	StepBasic_spMicro = 11
	StepBasic_spNano = 12
	StepBasic_spPico = 13
	StepBasic_spFemto = 14
	StepBasic_spAtto = 15
StepBasic_spExa = StepBasic_SiPrefix.StepBasic_spExa
StepBasic_spPeta = StepBasic_SiPrefix.StepBasic_spPeta
StepBasic_spTera = StepBasic_SiPrefix.StepBasic_spTera
StepBasic_spGiga = StepBasic_SiPrefix.StepBasic_spGiga
StepBasic_spMega = StepBasic_SiPrefix.StepBasic_spMega
StepBasic_spKilo = StepBasic_SiPrefix.StepBasic_spKilo
StepBasic_spHecto = StepBasic_SiPrefix.StepBasic_spHecto
StepBasic_spDeca = StepBasic_SiPrefix.StepBasic_spDeca
StepBasic_spDeci = StepBasic_SiPrefix.StepBasic_spDeci
StepBasic_spCenti = StepBasic_SiPrefix.StepBasic_spCenti
StepBasic_spMilli = StepBasic_SiPrefix.StepBasic_spMilli
StepBasic_spMicro = StepBasic_SiPrefix.StepBasic_spMicro
StepBasic_spNano = StepBasic_SiPrefix.StepBasic_spNano
StepBasic_spPico = StepBasic_SiPrefix.StepBasic_spPico
StepBasic_spFemto = StepBasic_SiPrefix.StepBasic_spFemto
StepBasic_spAtto = StepBasic_SiPrefix.StepBasic_spAtto


def Handle_StepBasic_Action_Create() -> "opencascade::handle< StepBasic_Action >":
    return _StepBasic.Handle_StepBasic_Action_Create()
Handle_StepBasic_Action_Create = _StepBasic.Handle_StepBasic_Action_Create

def Handle_StepBasic_Action_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Action >":
    return _StepBasic.Handle_StepBasic_Action_DownCast(t)
Handle_StepBasic_Action_DownCast = _StepBasic.Handle_StepBasic_Action_DownCast

def Handle_StepBasic_Action_IsNull(t: 'opencascade::handle< StepBasic_Action > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Action_IsNull(t)
Handle_StepBasic_Action_IsNull = _StepBasic.Handle_StepBasic_Action_IsNull

def Handle_StepBasic_ActionAssignment_Create() -> "opencascade::handle< StepBasic_ActionAssignment >":
    return _StepBasic.Handle_StepBasic_ActionAssignment_Create()
Handle_StepBasic_ActionAssignment_Create = _StepBasic.Handle_StepBasic_ActionAssignment_Create

def Handle_StepBasic_ActionAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ActionAssignment >":
    return _StepBasic.Handle_StepBasic_ActionAssignment_DownCast(t)
Handle_StepBasic_ActionAssignment_DownCast = _StepBasic.Handle_StepBasic_ActionAssignment_DownCast

def Handle_StepBasic_ActionAssignment_IsNull(t: 'opencascade::handle< StepBasic_ActionAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ActionAssignment_IsNull(t)
Handle_StepBasic_ActionAssignment_IsNull = _StepBasic.Handle_StepBasic_ActionAssignment_IsNull

def Handle_StepBasic_ActionMethod_Create() -> "opencascade::handle< StepBasic_ActionMethod >":
    return _StepBasic.Handle_StepBasic_ActionMethod_Create()
Handle_StepBasic_ActionMethod_Create = _StepBasic.Handle_StepBasic_ActionMethod_Create

def Handle_StepBasic_ActionMethod_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ActionMethod >":
    return _StepBasic.Handle_StepBasic_ActionMethod_DownCast(t)
Handle_StepBasic_ActionMethod_DownCast = _StepBasic.Handle_StepBasic_ActionMethod_DownCast

def Handle_StepBasic_ActionMethod_IsNull(t: 'opencascade::handle< StepBasic_ActionMethod > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ActionMethod_IsNull(t)
Handle_StepBasic_ActionMethod_IsNull = _StepBasic.Handle_StepBasic_ActionMethod_IsNull

def Handle_StepBasic_ActionRequestAssignment_Create() -> "opencascade::handle< StepBasic_ActionRequestAssignment >":
    return _StepBasic.Handle_StepBasic_ActionRequestAssignment_Create()
Handle_StepBasic_ActionRequestAssignment_Create = _StepBasic.Handle_StepBasic_ActionRequestAssignment_Create

def Handle_StepBasic_ActionRequestAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ActionRequestAssignment >":
    return _StepBasic.Handle_StepBasic_ActionRequestAssignment_DownCast(t)
Handle_StepBasic_ActionRequestAssignment_DownCast = _StepBasic.Handle_StepBasic_ActionRequestAssignment_DownCast

def Handle_StepBasic_ActionRequestAssignment_IsNull(t: 'opencascade::handle< StepBasic_ActionRequestAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ActionRequestAssignment_IsNull(t)
Handle_StepBasic_ActionRequestAssignment_IsNull = _StepBasic.Handle_StepBasic_ActionRequestAssignment_IsNull

def Handle_StepBasic_ActionRequestSolution_Create() -> "opencascade::handle< StepBasic_ActionRequestSolution >":
    return _StepBasic.Handle_StepBasic_ActionRequestSolution_Create()
Handle_StepBasic_ActionRequestSolution_Create = _StepBasic.Handle_StepBasic_ActionRequestSolution_Create

def Handle_StepBasic_ActionRequestSolution_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ActionRequestSolution >":
    return _StepBasic.Handle_StepBasic_ActionRequestSolution_DownCast(t)
Handle_StepBasic_ActionRequestSolution_DownCast = _StepBasic.Handle_StepBasic_ActionRequestSolution_DownCast

def Handle_StepBasic_ActionRequestSolution_IsNull(t: 'opencascade::handle< StepBasic_ActionRequestSolution > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ActionRequestSolution_IsNull(t)
Handle_StepBasic_ActionRequestSolution_IsNull = _StepBasic.Handle_StepBasic_ActionRequestSolution_IsNull

def Handle_StepBasic_Address_Create() -> "opencascade::handle< StepBasic_Address >":
    return _StepBasic.Handle_StepBasic_Address_Create()
Handle_StepBasic_Address_Create = _StepBasic.Handle_StepBasic_Address_Create

def Handle_StepBasic_Address_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Address >":
    return _StepBasic.Handle_StepBasic_Address_DownCast(t)
Handle_StepBasic_Address_DownCast = _StepBasic.Handle_StepBasic_Address_DownCast

def Handle_StepBasic_Address_IsNull(t: 'opencascade::handle< StepBasic_Address > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Address_IsNull(t)
Handle_StepBasic_Address_IsNull = _StepBasic.Handle_StepBasic_Address_IsNull

def Handle_StepBasic_ApplicationContext_Create() -> "opencascade::handle< StepBasic_ApplicationContext >":
    return _StepBasic.Handle_StepBasic_ApplicationContext_Create()
Handle_StepBasic_ApplicationContext_Create = _StepBasic.Handle_StepBasic_ApplicationContext_Create

def Handle_StepBasic_ApplicationContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApplicationContext >":
    return _StepBasic.Handle_StepBasic_ApplicationContext_DownCast(t)
Handle_StepBasic_ApplicationContext_DownCast = _StepBasic.Handle_StepBasic_ApplicationContext_DownCast

def Handle_StepBasic_ApplicationContext_IsNull(t: 'opencascade::handle< StepBasic_ApplicationContext > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApplicationContext_IsNull(t)
Handle_StepBasic_ApplicationContext_IsNull = _StepBasic.Handle_StepBasic_ApplicationContext_IsNull

def Handle_StepBasic_ApplicationContextElement_Create() -> "opencascade::handle< StepBasic_ApplicationContextElement >":
    return _StepBasic.Handle_StepBasic_ApplicationContextElement_Create()
Handle_StepBasic_ApplicationContextElement_Create = _StepBasic.Handle_StepBasic_ApplicationContextElement_Create

def Handle_StepBasic_ApplicationContextElement_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApplicationContextElement >":
    return _StepBasic.Handle_StepBasic_ApplicationContextElement_DownCast(t)
Handle_StepBasic_ApplicationContextElement_DownCast = _StepBasic.Handle_StepBasic_ApplicationContextElement_DownCast

def Handle_StepBasic_ApplicationContextElement_IsNull(t: 'opencascade::handle< StepBasic_ApplicationContextElement > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApplicationContextElement_IsNull(t)
Handle_StepBasic_ApplicationContextElement_IsNull = _StepBasic.Handle_StepBasic_ApplicationContextElement_IsNull

def Handle_StepBasic_ApplicationProtocolDefinition_Create() -> "opencascade::handle< StepBasic_ApplicationProtocolDefinition >":
    return _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_Create()
Handle_StepBasic_ApplicationProtocolDefinition_Create = _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_Create

def Handle_StepBasic_ApplicationProtocolDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApplicationProtocolDefinition >":
    return _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_DownCast(t)
Handle_StepBasic_ApplicationProtocolDefinition_DownCast = _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_DownCast

def Handle_StepBasic_ApplicationProtocolDefinition_IsNull(t: 'opencascade::handle< StepBasic_ApplicationProtocolDefinition > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_IsNull(t)
Handle_StepBasic_ApplicationProtocolDefinition_IsNull = _StepBasic.Handle_StepBasic_ApplicationProtocolDefinition_IsNull

def Handle_StepBasic_Approval_Create() -> "opencascade::handle< StepBasic_Approval >":
    return _StepBasic.Handle_StepBasic_Approval_Create()
Handle_StepBasic_Approval_Create = _StepBasic.Handle_StepBasic_Approval_Create

def Handle_StepBasic_Approval_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Approval >":
    return _StepBasic.Handle_StepBasic_Approval_DownCast(t)
Handle_StepBasic_Approval_DownCast = _StepBasic.Handle_StepBasic_Approval_DownCast

def Handle_StepBasic_Approval_IsNull(t: 'opencascade::handle< StepBasic_Approval > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Approval_IsNull(t)
Handle_StepBasic_Approval_IsNull = _StepBasic.Handle_StepBasic_Approval_IsNull

def Handle_StepBasic_ApprovalAssignment_Create() -> "opencascade::handle< StepBasic_ApprovalAssignment >":
    return _StepBasic.Handle_StepBasic_ApprovalAssignment_Create()
Handle_StepBasic_ApprovalAssignment_Create = _StepBasic.Handle_StepBasic_ApprovalAssignment_Create

def Handle_StepBasic_ApprovalAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApprovalAssignment >":
    return _StepBasic.Handle_StepBasic_ApprovalAssignment_DownCast(t)
Handle_StepBasic_ApprovalAssignment_DownCast = _StepBasic.Handle_StepBasic_ApprovalAssignment_DownCast

def Handle_StepBasic_ApprovalAssignment_IsNull(t: 'opencascade::handle< StepBasic_ApprovalAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApprovalAssignment_IsNull(t)
Handle_StepBasic_ApprovalAssignment_IsNull = _StepBasic.Handle_StepBasic_ApprovalAssignment_IsNull

def Handle_StepBasic_ApprovalDateTime_Create() -> "opencascade::handle< StepBasic_ApprovalDateTime >":
    return _StepBasic.Handle_StepBasic_ApprovalDateTime_Create()
Handle_StepBasic_ApprovalDateTime_Create = _StepBasic.Handle_StepBasic_ApprovalDateTime_Create

def Handle_StepBasic_ApprovalDateTime_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApprovalDateTime >":
    return _StepBasic.Handle_StepBasic_ApprovalDateTime_DownCast(t)
Handle_StepBasic_ApprovalDateTime_DownCast = _StepBasic.Handle_StepBasic_ApprovalDateTime_DownCast

def Handle_StepBasic_ApprovalDateTime_IsNull(t: 'opencascade::handle< StepBasic_ApprovalDateTime > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApprovalDateTime_IsNull(t)
Handle_StepBasic_ApprovalDateTime_IsNull = _StepBasic.Handle_StepBasic_ApprovalDateTime_IsNull

def Handle_StepBasic_ApprovalPersonOrganization_Create() -> "opencascade::handle< StepBasic_ApprovalPersonOrganization >":
    return _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_Create()
Handle_StepBasic_ApprovalPersonOrganization_Create = _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_Create

def Handle_StepBasic_ApprovalPersonOrganization_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApprovalPersonOrganization >":
    return _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_DownCast(t)
Handle_StepBasic_ApprovalPersonOrganization_DownCast = _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_DownCast

def Handle_StepBasic_ApprovalPersonOrganization_IsNull(t: 'opencascade::handle< StepBasic_ApprovalPersonOrganization > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_IsNull(t)
Handle_StepBasic_ApprovalPersonOrganization_IsNull = _StepBasic.Handle_StepBasic_ApprovalPersonOrganization_IsNull

def Handle_StepBasic_ApprovalRelationship_Create() -> "opencascade::handle< StepBasic_ApprovalRelationship >":
    return _StepBasic.Handle_StepBasic_ApprovalRelationship_Create()
Handle_StepBasic_ApprovalRelationship_Create = _StepBasic.Handle_StepBasic_ApprovalRelationship_Create

def Handle_StepBasic_ApprovalRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApprovalRelationship >":
    return _StepBasic.Handle_StepBasic_ApprovalRelationship_DownCast(t)
Handle_StepBasic_ApprovalRelationship_DownCast = _StepBasic.Handle_StepBasic_ApprovalRelationship_DownCast

def Handle_StepBasic_ApprovalRelationship_IsNull(t: 'opencascade::handle< StepBasic_ApprovalRelationship > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApprovalRelationship_IsNull(t)
Handle_StepBasic_ApprovalRelationship_IsNull = _StepBasic.Handle_StepBasic_ApprovalRelationship_IsNull

def Handle_StepBasic_ApprovalRole_Create() -> "opencascade::handle< StepBasic_ApprovalRole >":
    return _StepBasic.Handle_StepBasic_ApprovalRole_Create()
Handle_StepBasic_ApprovalRole_Create = _StepBasic.Handle_StepBasic_ApprovalRole_Create

def Handle_StepBasic_ApprovalRole_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApprovalRole >":
    return _StepBasic.Handle_StepBasic_ApprovalRole_DownCast(t)
Handle_StepBasic_ApprovalRole_DownCast = _StepBasic.Handle_StepBasic_ApprovalRole_DownCast

def Handle_StepBasic_ApprovalRole_IsNull(t: 'opencascade::handle< StepBasic_ApprovalRole > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApprovalRole_IsNull(t)
Handle_StepBasic_ApprovalRole_IsNull = _StepBasic.Handle_StepBasic_ApprovalRole_IsNull

def Handle_StepBasic_ApprovalStatus_Create() -> "opencascade::handle< StepBasic_ApprovalStatus >":
    return _StepBasic.Handle_StepBasic_ApprovalStatus_Create()
Handle_StepBasic_ApprovalStatus_Create = _StepBasic.Handle_StepBasic_ApprovalStatus_Create

def Handle_StepBasic_ApprovalStatus_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ApprovalStatus >":
    return _StepBasic.Handle_StepBasic_ApprovalStatus_DownCast(t)
Handle_StepBasic_ApprovalStatus_DownCast = _StepBasic.Handle_StepBasic_ApprovalStatus_DownCast

def Handle_StepBasic_ApprovalStatus_IsNull(t: 'opencascade::handle< StepBasic_ApprovalStatus > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ApprovalStatus_IsNull(t)
Handle_StepBasic_ApprovalStatus_IsNull = _StepBasic.Handle_StepBasic_ApprovalStatus_IsNull

def Handle_StepBasic_Certification_Create() -> "opencascade::handle< StepBasic_Certification >":
    return _StepBasic.Handle_StepBasic_Certification_Create()
Handle_StepBasic_Certification_Create = _StepBasic.Handle_StepBasic_Certification_Create

def Handle_StepBasic_Certification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Certification >":
    return _StepBasic.Handle_StepBasic_Certification_DownCast(t)
Handle_StepBasic_Certification_DownCast = _StepBasic.Handle_StepBasic_Certification_DownCast

def Handle_StepBasic_Certification_IsNull(t: 'opencascade::handle< StepBasic_Certification > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Certification_IsNull(t)
Handle_StepBasic_Certification_IsNull = _StepBasic.Handle_StepBasic_Certification_IsNull

def Handle_StepBasic_CertificationAssignment_Create() -> "opencascade::handle< StepBasic_CertificationAssignment >":
    return _StepBasic.Handle_StepBasic_CertificationAssignment_Create()
Handle_StepBasic_CertificationAssignment_Create = _StepBasic.Handle_StepBasic_CertificationAssignment_Create

def Handle_StepBasic_CertificationAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_CertificationAssignment >":
    return _StepBasic.Handle_StepBasic_CertificationAssignment_DownCast(t)
Handle_StepBasic_CertificationAssignment_DownCast = _StepBasic.Handle_StepBasic_CertificationAssignment_DownCast

def Handle_StepBasic_CertificationAssignment_IsNull(t: 'opencascade::handle< StepBasic_CertificationAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_CertificationAssignment_IsNull(t)
Handle_StepBasic_CertificationAssignment_IsNull = _StepBasic.Handle_StepBasic_CertificationAssignment_IsNull

def Handle_StepBasic_CertificationType_Create() -> "opencascade::handle< StepBasic_CertificationType >":
    return _StepBasic.Handle_StepBasic_CertificationType_Create()
Handle_StepBasic_CertificationType_Create = _StepBasic.Handle_StepBasic_CertificationType_Create

def Handle_StepBasic_CertificationType_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_CertificationType >":
    return _StepBasic.Handle_StepBasic_CertificationType_DownCast(t)
Handle_StepBasic_CertificationType_DownCast = _StepBasic.Handle_StepBasic_CertificationType_DownCast

def Handle_StepBasic_CertificationType_IsNull(t: 'opencascade::handle< StepBasic_CertificationType > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_CertificationType_IsNull(t)
Handle_StepBasic_CertificationType_IsNull = _StepBasic.Handle_StepBasic_CertificationType_IsNull

def Handle_StepBasic_CharacterizedObject_Create() -> "opencascade::handle< StepBasic_CharacterizedObject >":
    return _StepBasic.Handle_StepBasic_CharacterizedObject_Create()
Handle_StepBasic_CharacterizedObject_Create = _StepBasic.Handle_StepBasic_CharacterizedObject_Create

def Handle_StepBasic_CharacterizedObject_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_CharacterizedObject >":
    return _StepBasic.Handle_StepBasic_CharacterizedObject_DownCast(t)
Handle_StepBasic_CharacterizedObject_DownCast = _StepBasic.Handle_StepBasic_CharacterizedObject_DownCast

def Handle_StepBasic_CharacterizedObject_IsNull(t: 'opencascade::handle< StepBasic_CharacterizedObject > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_CharacterizedObject_IsNull(t)
Handle_StepBasic_CharacterizedObject_IsNull = _StepBasic.Handle_StepBasic_CharacterizedObject_IsNull

def Handle_StepBasic_Contract_Create() -> "opencascade::handle< StepBasic_Contract >":
    return _StepBasic.Handle_StepBasic_Contract_Create()
Handle_StepBasic_Contract_Create = _StepBasic.Handle_StepBasic_Contract_Create

def Handle_StepBasic_Contract_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Contract >":
    return _StepBasic.Handle_StepBasic_Contract_DownCast(t)
Handle_StepBasic_Contract_DownCast = _StepBasic.Handle_StepBasic_Contract_DownCast

def Handle_StepBasic_Contract_IsNull(t: 'opencascade::handle< StepBasic_Contract > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Contract_IsNull(t)
Handle_StepBasic_Contract_IsNull = _StepBasic.Handle_StepBasic_Contract_IsNull

def Handle_StepBasic_ContractAssignment_Create() -> "opencascade::handle< StepBasic_ContractAssignment >":
    return _StepBasic.Handle_StepBasic_ContractAssignment_Create()
Handle_StepBasic_ContractAssignment_Create = _StepBasic.Handle_StepBasic_ContractAssignment_Create

def Handle_StepBasic_ContractAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ContractAssignment >":
    return _StepBasic.Handle_StepBasic_ContractAssignment_DownCast(t)
Handle_StepBasic_ContractAssignment_DownCast = _StepBasic.Handle_StepBasic_ContractAssignment_DownCast

def Handle_StepBasic_ContractAssignment_IsNull(t: 'opencascade::handle< StepBasic_ContractAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ContractAssignment_IsNull(t)
Handle_StepBasic_ContractAssignment_IsNull = _StepBasic.Handle_StepBasic_ContractAssignment_IsNull

def Handle_StepBasic_ContractType_Create() -> "opencascade::handle< StepBasic_ContractType >":
    return _StepBasic.Handle_StepBasic_ContractType_Create()
Handle_StepBasic_ContractType_Create = _StepBasic.Handle_StepBasic_ContractType_Create

def Handle_StepBasic_ContractType_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ContractType >":
    return _StepBasic.Handle_StepBasic_ContractType_DownCast(t)
Handle_StepBasic_ContractType_DownCast = _StepBasic.Handle_StepBasic_ContractType_DownCast

def Handle_StepBasic_ContractType_IsNull(t: 'opencascade::handle< StepBasic_ContractType > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ContractType_IsNull(t)
Handle_StepBasic_ContractType_IsNull = _StepBasic.Handle_StepBasic_ContractType_IsNull

def Handle_StepBasic_CoordinatedUniversalTimeOffset_Create() -> "opencascade::handle< StepBasic_CoordinatedUniversalTimeOffset >":
    return _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_Create()
Handle_StepBasic_CoordinatedUniversalTimeOffset_Create = _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_Create

def Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_CoordinatedUniversalTimeOffset >":
    return _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast(t)
Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast = _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast

def Handle_StepBasic_CoordinatedUniversalTimeOffset_IsNull(t: 'opencascade::handle< StepBasic_CoordinatedUniversalTimeOffset > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_IsNull(t)
Handle_StepBasic_CoordinatedUniversalTimeOffset_IsNull = _StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset_IsNull

def Handle_StepBasic_Date_Create() -> "opencascade::handle< StepBasic_Date >":
    return _StepBasic.Handle_StepBasic_Date_Create()
Handle_StepBasic_Date_Create = _StepBasic.Handle_StepBasic_Date_Create

def Handle_StepBasic_Date_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Date >":
    return _StepBasic.Handle_StepBasic_Date_DownCast(t)
Handle_StepBasic_Date_DownCast = _StepBasic.Handle_StepBasic_Date_DownCast

def Handle_StepBasic_Date_IsNull(t: 'opencascade::handle< StepBasic_Date > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Date_IsNull(t)
Handle_StepBasic_Date_IsNull = _StepBasic.Handle_StepBasic_Date_IsNull

def Handle_StepBasic_DateAndTime_Create() -> "opencascade::handle< StepBasic_DateAndTime >":
    return _StepBasic.Handle_StepBasic_DateAndTime_Create()
Handle_StepBasic_DateAndTime_Create = _StepBasic.Handle_StepBasic_DateAndTime_Create

def Handle_StepBasic_DateAndTime_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DateAndTime >":
    return _StepBasic.Handle_StepBasic_DateAndTime_DownCast(t)
Handle_StepBasic_DateAndTime_DownCast = _StepBasic.Handle_StepBasic_DateAndTime_DownCast

def Handle_StepBasic_DateAndTime_IsNull(t: 'opencascade::handle< StepBasic_DateAndTime > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DateAndTime_IsNull(t)
Handle_StepBasic_DateAndTime_IsNull = _StepBasic.Handle_StepBasic_DateAndTime_IsNull

def Handle_StepBasic_DateAndTimeAssignment_Create() -> "opencascade::handle< StepBasic_DateAndTimeAssignment >":
    return _StepBasic.Handle_StepBasic_DateAndTimeAssignment_Create()
Handle_StepBasic_DateAndTimeAssignment_Create = _StepBasic.Handle_StepBasic_DateAndTimeAssignment_Create

def Handle_StepBasic_DateAndTimeAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DateAndTimeAssignment >":
    return _StepBasic.Handle_StepBasic_DateAndTimeAssignment_DownCast(t)
Handle_StepBasic_DateAndTimeAssignment_DownCast = _StepBasic.Handle_StepBasic_DateAndTimeAssignment_DownCast

def Handle_StepBasic_DateAndTimeAssignment_IsNull(t: 'opencascade::handle< StepBasic_DateAndTimeAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DateAndTimeAssignment_IsNull(t)
Handle_StepBasic_DateAndTimeAssignment_IsNull = _StepBasic.Handle_StepBasic_DateAndTimeAssignment_IsNull

def Handle_StepBasic_DateAssignment_Create() -> "opencascade::handle< StepBasic_DateAssignment >":
    return _StepBasic.Handle_StepBasic_DateAssignment_Create()
Handle_StepBasic_DateAssignment_Create = _StepBasic.Handle_StepBasic_DateAssignment_Create

def Handle_StepBasic_DateAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DateAssignment >":
    return _StepBasic.Handle_StepBasic_DateAssignment_DownCast(t)
Handle_StepBasic_DateAssignment_DownCast = _StepBasic.Handle_StepBasic_DateAssignment_DownCast

def Handle_StepBasic_DateAssignment_IsNull(t: 'opencascade::handle< StepBasic_DateAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DateAssignment_IsNull(t)
Handle_StepBasic_DateAssignment_IsNull = _StepBasic.Handle_StepBasic_DateAssignment_IsNull

def Handle_StepBasic_DateRole_Create() -> "opencascade::handle< StepBasic_DateRole >":
    return _StepBasic.Handle_StepBasic_DateRole_Create()
Handle_StepBasic_DateRole_Create = _StepBasic.Handle_StepBasic_DateRole_Create

def Handle_StepBasic_DateRole_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DateRole >":
    return _StepBasic.Handle_StepBasic_DateRole_DownCast(t)
Handle_StepBasic_DateRole_DownCast = _StepBasic.Handle_StepBasic_DateRole_DownCast

def Handle_StepBasic_DateRole_IsNull(t: 'opencascade::handle< StepBasic_DateRole > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DateRole_IsNull(t)
Handle_StepBasic_DateRole_IsNull = _StepBasic.Handle_StepBasic_DateRole_IsNull

def Handle_StepBasic_DateTimeRole_Create() -> "opencascade::handle< StepBasic_DateTimeRole >":
    return _StepBasic.Handle_StepBasic_DateTimeRole_Create()
Handle_StepBasic_DateTimeRole_Create = _StepBasic.Handle_StepBasic_DateTimeRole_Create

def Handle_StepBasic_DateTimeRole_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DateTimeRole >":
    return _StepBasic.Handle_StepBasic_DateTimeRole_DownCast(t)
Handle_StepBasic_DateTimeRole_DownCast = _StepBasic.Handle_StepBasic_DateTimeRole_DownCast

def Handle_StepBasic_DateTimeRole_IsNull(t: 'opencascade::handle< StepBasic_DateTimeRole > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DateTimeRole_IsNull(t)
Handle_StepBasic_DateTimeRole_IsNull = _StepBasic.Handle_StepBasic_DateTimeRole_IsNull

def Handle_StepBasic_DerivedUnit_Create() -> "opencascade::handle< StepBasic_DerivedUnit >":
    return _StepBasic.Handle_StepBasic_DerivedUnit_Create()
Handle_StepBasic_DerivedUnit_Create = _StepBasic.Handle_StepBasic_DerivedUnit_Create

def Handle_StepBasic_DerivedUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DerivedUnit >":
    return _StepBasic.Handle_StepBasic_DerivedUnit_DownCast(t)
Handle_StepBasic_DerivedUnit_DownCast = _StepBasic.Handle_StepBasic_DerivedUnit_DownCast

def Handle_StepBasic_DerivedUnit_IsNull(t: 'opencascade::handle< StepBasic_DerivedUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DerivedUnit_IsNull(t)
Handle_StepBasic_DerivedUnit_IsNull = _StepBasic.Handle_StepBasic_DerivedUnit_IsNull

def Handle_StepBasic_DerivedUnitElement_Create() -> "opencascade::handle< StepBasic_DerivedUnitElement >":
    return _StepBasic.Handle_StepBasic_DerivedUnitElement_Create()
Handle_StepBasic_DerivedUnitElement_Create = _StepBasic.Handle_StepBasic_DerivedUnitElement_Create

def Handle_StepBasic_DerivedUnitElement_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DerivedUnitElement >":
    return _StepBasic.Handle_StepBasic_DerivedUnitElement_DownCast(t)
Handle_StepBasic_DerivedUnitElement_DownCast = _StepBasic.Handle_StepBasic_DerivedUnitElement_DownCast

def Handle_StepBasic_DerivedUnitElement_IsNull(t: 'opencascade::handle< StepBasic_DerivedUnitElement > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DerivedUnitElement_IsNull(t)
Handle_StepBasic_DerivedUnitElement_IsNull = _StepBasic.Handle_StepBasic_DerivedUnitElement_IsNull

def Handle_StepBasic_DimensionalExponents_Create() -> "opencascade::handle< StepBasic_DimensionalExponents >":
    return _StepBasic.Handle_StepBasic_DimensionalExponents_Create()
Handle_StepBasic_DimensionalExponents_Create = _StepBasic.Handle_StepBasic_DimensionalExponents_Create

def Handle_StepBasic_DimensionalExponents_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DimensionalExponents >":
    return _StepBasic.Handle_StepBasic_DimensionalExponents_DownCast(t)
Handle_StepBasic_DimensionalExponents_DownCast = _StepBasic.Handle_StepBasic_DimensionalExponents_DownCast

def Handle_StepBasic_DimensionalExponents_IsNull(t: 'opencascade::handle< StepBasic_DimensionalExponents > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DimensionalExponents_IsNull(t)
Handle_StepBasic_DimensionalExponents_IsNull = _StepBasic.Handle_StepBasic_DimensionalExponents_IsNull

def Handle_StepBasic_Document_Create() -> "opencascade::handle< StepBasic_Document >":
    return _StepBasic.Handle_StepBasic_Document_Create()
Handle_StepBasic_Document_Create = _StepBasic.Handle_StepBasic_Document_Create

def Handle_StepBasic_Document_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Document >":
    return _StepBasic.Handle_StepBasic_Document_DownCast(t)
Handle_StepBasic_Document_DownCast = _StepBasic.Handle_StepBasic_Document_DownCast

def Handle_StepBasic_Document_IsNull(t: 'opencascade::handle< StepBasic_Document > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Document_IsNull(t)
Handle_StepBasic_Document_IsNull = _StepBasic.Handle_StepBasic_Document_IsNull

def Handle_StepBasic_DocumentProductAssociation_Create() -> "opencascade::handle< StepBasic_DocumentProductAssociation >":
    return _StepBasic.Handle_StepBasic_DocumentProductAssociation_Create()
Handle_StepBasic_DocumentProductAssociation_Create = _StepBasic.Handle_StepBasic_DocumentProductAssociation_Create

def Handle_StepBasic_DocumentProductAssociation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DocumentProductAssociation >":
    return _StepBasic.Handle_StepBasic_DocumentProductAssociation_DownCast(t)
Handle_StepBasic_DocumentProductAssociation_DownCast = _StepBasic.Handle_StepBasic_DocumentProductAssociation_DownCast

def Handle_StepBasic_DocumentProductAssociation_IsNull(t: 'opencascade::handle< StepBasic_DocumentProductAssociation > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DocumentProductAssociation_IsNull(t)
Handle_StepBasic_DocumentProductAssociation_IsNull = _StepBasic.Handle_StepBasic_DocumentProductAssociation_IsNull

def Handle_StepBasic_DocumentReference_Create() -> "opencascade::handle< StepBasic_DocumentReference >":
    return _StepBasic.Handle_StepBasic_DocumentReference_Create()
Handle_StepBasic_DocumentReference_Create = _StepBasic.Handle_StepBasic_DocumentReference_Create

def Handle_StepBasic_DocumentReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DocumentReference >":
    return _StepBasic.Handle_StepBasic_DocumentReference_DownCast(t)
Handle_StepBasic_DocumentReference_DownCast = _StepBasic.Handle_StepBasic_DocumentReference_DownCast

def Handle_StepBasic_DocumentReference_IsNull(t: 'opencascade::handle< StepBasic_DocumentReference > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DocumentReference_IsNull(t)
Handle_StepBasic_DocumentReference_IsNull = _StepBasic.Handle_StepBasic_DocumentReference_IsNull

def Handle_StepBasic_DocumentRelationship_Create() -> "opencascade::handle< StepBasic_DocumentRelationship >":
    return _StepBasic.Handle_StepBasic_DocumentRelationship_Create()
Handle_StepBasic_DocumentRelationship_Create = _StepBasic.Handle_StepBasic_DocumentRelationship_Create

def Handle_StepBasic_DocumentRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DocumentRelationship >":
    return _StepBasic.Handle_StepBasic_DocumentRelationship_DownCast(t)
Handle_StepBasic_DocumentRelationship_DownCast = _StepBasic.Handle_StepBasic_DocumentRelationship_DownCast

def Handle_StepBasic_DocumentRelationship_IsNull(t: 'opencascade::handle< StepBasic_DocumentRelationship > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DocumentRelationship_IsNull(t)
Handle_StepBasic_DocumentRelationship_IsNull = _StepBasic.Handle_StepBasic_DocumentRelationship_IsNull

def Handle_StepBasic_DocumentRepresentationType_Create() -> "opencascade::handle< StepBasic_DocumentRepresentationType >":
    return _StepBasic.Handle_StepBasic_DocumentRepresentationType_Create()
Handle_StepBasic_DocumentRepresentationType_Create = _StepBasic.Handle_StepBasic_DocumentRepresentationType_Create

def Handle_StepBasic_DocumentRepresentationType_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DocumentRepresentationType >":
    return _StepBasic.Handle_StepBasic_DocumentRepresentationType_DownCast(t)
Handle_StepBasic_DocumentRepresentationType_DownCast = _StepBasic.Handle_StepBasic_DocumentRepresentationType_DownCast

def Handle_StepBasic_DocumentRepresentationType_IsNull(t: 'opencascade::handle< StepBasic_DocumentRepresentationType > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DocumentRepresentationType_IsNull(t)
Handle_StepBasic_DocumentRepresentationType_IsNull = _StepBasic.Handle_StepBasic_DocumentRepresentationType_IsNull

def Handle_StepBasic_DocumentType_Create() -> "opencascade::handle< StepBasic_DocumentType >":
    return _StepBasic.Handle_StepBasic_DocumentType_Create()
Handle_StepBasic_DocumentType_Create = _StepBasic.Handle_StepBasic_DocumentType_Create

def Handle_StepBasic_DocumentType_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DocumentType >":
    return _StepBasic.Handle_StepBasic_DocumentType_DownCast(t)
Handle_StepBasic_DocumentType_DownCast = _StepBasic.Handle_StepBasic_DocumentType_DownCast

def Handle_StepBasic_DocumentType_IsNull(t: 'opencascade::handle< StepBasic_DocumentType > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DocumentType_IsNull(t)
Handle_StepBasic_DocumentType_IsNull = _StepBasic.Handle_StepBasic_DocumentType_IsNull

def Handle_StepBasic_DocumentUsageConstraint_Create() -> "opencascade::handle< StepBasic_DocumentUsageConstraint >":
    return _StepBasic.Handle_StepBasic_DocumentUsageConstraint_Create()
Handle_StepBasic_DocumentUsageConstraint_Create = _StepBasic.Handle_StepBasic_DocumentUsageConstraint_Create

def Handle_StepBasic_DocumentUsageConstraint_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DocumentUsageConstraint >":
    return _StepBasic.Handle_StepBasic_DocumentUsageConstraint_DownCast(t)
Handle_StepBasic_DocumentUsageConstraint_DownCast = _StepBasic.Handle_StepBasic_DocumentUsageConstraint_DownCast

def Handle_StepBasic_DocumentUsageConstraint_IsNull(t: 'opencascade::handle< StepBasic_DocumentUsageConstraint > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DocumentUsageConstraint_IsNull(t)
Handle_StepBasic_DocumentUsageConstraint_IsNull = _StepBasic.Handle_StepBasic_DocumentUsageConstraint_IsNull

def Handle_StepBasic_Effectivity_Create() -> "opencascade::handle< StepBasic_Effectivity >":
    return _StepBasic.Handle_StepBasic_Effectivity_Create()
Handle_StepBasic_Effectivity_Create = _StepBasic.Handle_StepBasic_Effectivity_Create

def Handle_StepBasic_Effectivity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Effectivity >":
    return _StepBasic.Handle_StepBasic_Effectivity_DownCast(t)
Handle_StepBasic_Effectivity_DownCast = _StepBasic.Handle_StepBasic_Effectivity_DownCast

def Handle_StepBasic_Effectivity_IsNull(t: 'opencascade::handle< StepBasic_Effectivity > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Effectivity_IsNull(t)
Handle_StepBasic_Effectivity_IsNull = _StepBasic.Handle_StepBasic_Effectivity_IsNull

def Handle_StepBasic_EffectivityAssignment_Create() -> "opencascade::handle< StepBasic_EffectivityAssignment >":
    return _StepBasic.Handle_StepBasic_EffectivityAssignment_Create()
Handle_StepBasic_EffectivityAssignment_Create = _StepBasic.Handle_StepBasic_EffectivityAssignment_Create

def Handle_StepBasic_EffectivityAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_EffectivityAssignment >":
    return _StepBasic.Handle_StepBasic_EffectivityAssignment_DownCast(t)
Handle_StepBasic_EffectivityAssignment_DownCast = _StepBasic.Handle_StepBasic_EffectivityAssignment_DownCast

def Handle_StepBasic_EffectivityAssignment_IsNull(t: 'opencascade::handle< StepBasic_EffectivityAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_EffectivityAssignment_IsNull(t)
Handle_StepBasic_EffectivityAssignment_IsNull = _StepBasic.Handle_StepBasic_EffectivityAssignment_IsNull

def Handle_StepBasic_EulerAngles_Create() -> "opencascade::handle< StepBasic_EulerAngles >":
    return _StepBasic.Handle_StepBasic_EulerAngles_Create()
Handle_StepBasic_EulerAngles_Create = _StepBasic.Handle_StepBasic_EulerAngles_Create

def Handle_StepBasic_EulerAngles_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_EulerAngles >":
    return _StepBasic.Handle_StepBasic_EulerAngles_DownCast(t)
Handle_StepBasic_EulerAngles_DownCast = _StepBasic.Handle_StepBasic_EulerAngles_DownCast

def Handle_StepBasic_EulerAngles_IsNull(t: 'opencascade::handle< StepBasic_EulerAngles > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_EulerAngles_IsNull(t)
Handle_StepBasic_EulerAngles_IsNull = _StepBasic.Handle_StepBasic_EulerAngles_IsNull

def Handle_StepBasic_ExternalSource_Create() -> "opencascade::handle< StepBasic_ExternalSource >":
    return _StepBasic.Handle_StepBasic_ExternalSource_Create()
Handle_StepBasic_ExternalSource_Create = _StepBasic.Handle_StepBasic_ExternalSource_Create

def Handle_StepBasic_ExternalSource_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ExternalSource >":
    return _StepBasic.Handle_StepBasic_ExternalSource_DownCast(t)
Handle_StepBasic_ExternalSource_DownCast = _StepBasic.Handle_StepBasic_ExternalSource_DownCast

def Handle_StepBasic_ExternalSource_IsNull(t: 'opencascade::handle< StepBasic_ExternalSource > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ExternalSource_IsNull(t)
Handle_StepBasic_ExternalSource_IsNull = _StepBasic.Handle_StepBasic_ExternalSource_IsNull

def Handle_StepBasic_ExternallyDefinedItem_Create() -> "opencascade::handle< StepBasic_ExternallyDefinedItem >":
    return _StepBasic.Handle_StepBasic_ExternallyDefinedItem_Create()
Handle_StepBasic_ExternallyDefinedItem_Create = _StepBasic.Handle_StepBasic_ExternallyDefinedItem_Create

def Handle_StepBasic_ExternallyDefinedItem_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ExternallyDefinedItem >":
    return _StepBasic.Handle_StepBasic_ExternallyDefinedItem_DownCast(t)
Handle_StepBasic_ExternallyDefinedItem_DownCast = _StepBasic.Handle_StepBasic_ExternallyDefinedItem_DownCast

def Handle_StepBasic_ExternallyDefinedItem_IsNull(t: 'opencascade::handle< StepBasic_ExternallyDefinedItem > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ExternallyDefinedItem_IsNull(t)
Handle_StepBasic_ExternallyDefinedItem_IsNull = _StepBasic.Handle_StepBasic_ExternallyDefinedItem_IsNull

def Handle_StepBasic_GeneralProperty_Create() -> "opencascade::handle< StepBasic_GeneralProperty >":
    return _StepBasic.Handle_StepBasic_GeneralProperty_Create()
Handle_StepBasic_GeneralProperty_Create = _StepBasic.Handle_StepBasic_GeneralProperty_Create

def Handle_StepBasic_GeneralProperty_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_GeneralProperty >":
    return _StepBasic.Handle_StepBasic_GeneralProperty_DownCast(t)
Handle_StepBasic_GeneralProperty_DownCast = _StepBasic.Handle_StepBasic_GeneralProperty_DownCast

def Handle_StepBasic_GeneralProperty_IsNull(t: 'opencascade::handle< StepBasic_GeneralProperty > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_GeneralProperty_IsNull(t)
Handle_StepBasic_GeneralProperty_IsNull = _StepBasic.Handle_StepBasic_GeneralProperty_IsNull

def Handle_StepBasic_Group_Create() -> "opencascade::handle< StepBasic_Group >":
    return _StepBasic.Handle_StepBasic_Group_Create()
Handle_StepBasic_Group_Create = _StepBasic.Handle_StepBasic_Group_Create

def Handle_StepBasic_Group_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Group >":
    return _StepBasic.Handle_StepBasic_Group_DownCast(t)
Handle_StepBasic_Group_DownCast = _StepBasic.Handle_StepBasic_Group_DownCast

def Handle_StepBasic_Group_IsNull(t: 'opencascade::handle< StepBasic_Group > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Group_IsNull(t)
Handle_StepBasic_Group_IsNull = _StepBasic.Handle_StepBasic_Group_IsNull

def Handle_StepBasic_GroupAssignment_Create() -> "opencascade::handle< StepBasic_GroupAssignment >":
    return _StepBasic.Handle_StepBasic_GroupAssignment_Create()
Handle_StepBasic_GroupAssignment_Create = _StepBasic.Handle_StepBasic_GroupAssignment_Create

def Handle_StepBasic_GroupAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_GroupAssignment >":
    return _StepBasic.Handle_StepBasic_GroupAssignment_DownCast(t)
Handle_StepBasic_GroupAssignment_DownCast = _StepBasic.Handle_StepBasic_GroupAssignment_DownCast

def Handle_StepBasic_GroupAssignment_IsNull(t: 'opencascade::handle< StepBasic_GroupAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_GroupAssignment_IsNull(t)
Handle_StepBasic_GroupAssignment_IsNull = _StepBasic.Handle_StepBasic_GroupAssignment_IsNull

def Handle_StepBasic_GroupRelationship_Create() -> "opencascade::handle< StepBasic_GroupRelationship >":
    return _StepBasic.Handle_StepBasic_GroupRelationship_Create()
Handle_StepBasic_GroupRelationship_Create = _StepBasic.Handle_StepBasic_GroupRelationship_Create

def Handle_StepBasic_GroupRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_GroupRelationship >":
    return _StepBasic.Handle_StepBasic_GroupRelationship_DownCast(t)
Handle_StepBasic_GroupRelationship_DownCast = _StepBasic.Handle_StepBasic_GroupRelationship_DownCast

def Handle_StepBasic_GroupRelationship_IsNull(t: 'opencascade::handle< StepBasic_GroupRelationship > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_GroupRelationship_IsNull(t)
Handle_StepBasic_GroupRelationship_IsNull = _StepBasic.Handle_StepBasic_GroupRelationship_IsNull

def Handle_StepBasic_IdentificationAssignment_Create() -> "opencascade::handle< StepBasic_IdentificationAssignment >":
    return _StepBasic.Handle_StepBasic_IdentificationAssignment_Create()
Handle_StepBasic_IdentificationAssignment_Create = _StepBasic.Handle_StepBasic_IdentificationAssignment_Create

def Handle_StepBasic_IdentificationAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_IdentificationAssignment >":
    return _StepBasic.Handle_StepBasic_IdentificationAssignment_DownCast(t)
Handle_StepBasic_IdentificationAssignment_DownCast = _StepBasic.Handle_StepBasic_IdentificationAssignment_DownCast

def Handle_StepBasic_IdentificationAssignment_IsNull(t: 'opencascade::handle< StepBasic_IdentificationAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_IdentificationAssignment_IsNull(t)
Handle_StepBasic_IdentificationAssignment_IsNull = _StepBasic.Handle_StepBasic_IdentificationAssignment_IsNull

def Handle_StepBasic_IdentificationRole_Create() -> "opencascade::handle< StepBasic_IdentificationRole >":
    return _StepBasic.Handle_StepBasic_IdentificationRole_Create()
Handle_StepBasic_IdentificationRole_Create = _StepBasic.Handle_StepBasic_IdentificationRole_Create

def Handle_StepBasic_IdentificationRole_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_IdentificationRole >":
    return _StepBasic.Handle_StepBasic_IdentificationRole_DownCast(t)
Handle_StepBasic_IdentificationRole_DownCast = _StepBasic.Handle_StepBasic_IdentificationRole_DownCast

def Handle_StepBasic_IdentificationRole_IsNull(t: 'opencascade::handle< StepBasic_IdentificationRole > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_IdentificationRole_IsNull(t)
Handle_StepBasic_IdentificationRole_IsNull = _StepBasic.Handle_StepBasic_IdentificationRole_IsNull

def Handle_StepBasic_LocalTime_Create() -> "opencascade::handle< StepBasic_LocalTime >":
    return _StepBasic.Handle_StepBasic_LocalTime_Create()
Handle_StepBasic_LocalTime_Create = _StepBasic.Handle_StepBasic_LocalTime_Create

def Handle_StepBasic_LocalTime_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_LocalTime >":
    return _StepBasic.Handle_StepBasic_LocalTime_DownCast(t)
Handle_StepBasic_LocalTime_DownCast = _StepBasic.Handle_StepBasic_LocalTime_DownCast

def Handle_StepBasic_LocalTime_IsNull(t: 'opencascade::handle< StepBasic_LocalTime > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_LocalTime_IsNull(t)
Handle_StepBasic_LocalTime_IsNull = _StepBasic.Handle_StepBasic_LocalTime_IsNull

def Handle_StepBasic_MeasureValueMember_Create() -> "opencascade::handle< StepBasic_MeasureValueMember >":
    return _StepBasic.Handle_StepBasic_MeasureValueMember_Create()
Handle_StepBasic_MeasureValueMember_Create = _StepBasic.Handle_StepBasic_MeasureValueMember_Create

def Handle_StepBasic_MeasureValueMember_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_MeasureValueMember >":
    return _StepBasic.Handle_StepBasic_MeasureValueMember_DownCast(t)
Handle_StepBasic_MeasureValueMember_DownCast = _StepBasic.Handle_StepBasic_MeasureValueMember_DownCast

def Handle_StepBasic_MeasureValueMember_IsNull(t: 'opencascade::handle< StepBasic_MeasureValueMember > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_MeasureValueMember_IsNull(t)
Handle_StepBasic_MeasureValueMember_IsNull = _StepBasic.Handle_StepBasic_MeasureValueMember_IsNull

def Handle_StepBasic_MeasureWithUnit_Create() -> "opencascade::handle< StepBasic_MeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_MeasureWithUnit_Create()
Handle_StepBasic_MeasureWithUnit_Create = _StepBasic.Handle_StepBasic_MeasureWithUnit_Create

def Handle_StepBasic_MeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_MeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_MeasureWithUnit_DownCast(t)
Handle_StepBasic_MeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_MeasureWithUnit_DownCast

def Handle_StepBasic_MeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_MeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_MeasureWithUnit_IsNull(t)
Handle_StepBasic_MeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_MeasureWithUnit_IsNull

def Handle_StepBasic_NameAssignment_Create() -> "opencascade::handle< StepBasic_NameAssignment >":
    return _StepBasic.Handle_StepBasic_NameAssignment_Create()
Handle_StepBasic_NameAssignment_Create = _StepBasic.Handle_StepBasic_NameAssignment_Create

def Handle_StepBasic_NameAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_NameAssignment >":
    return _StepBasic.Handle_StepBasic_NameAssignment_DownCast(t)
Handle_StepBasic_NameAssignment_DownCast = _StepBasic.Handle_StepBasic_NameAssignment_DownCast

def Handle_StepBasic_NameAssignment_IsNull(t: 'opencascade::handle< StepBasic_NameAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_NameAssignment_IsNull(t)
Handle_StepBasic_NameAssignment_IsNull = _StepBasic.Handle_StepBasic_NameAssignment_IsNull

def Handle_StepBasic_NamedUnit_Create() -> "opencascade::handle< StepBasic_NamedUnit >":
    return _StepBasic.Handle_StepBasic_NamedUnit_Create()
Handle_StepBasic_NamedUnit_Create = _StepBasic.Handle_StepBasic_NamedUnit_Create

def Handle_StepBasic_NamedUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_NamedUnit >":
    return _StepBasic.Handle_StepBasic_NamedUnit_DownCast(t)
Handle_StepBasic_NamedUnit_DownCast = _StepBasic.Handle_StepBasic_NamedUnit_DownCast

def Handle_StepBasic_NamedUnit_IsNull(t: 'opencascade::handle< StepBasic_NamedUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_NamedUnit_IsNull(t)
Handle_StepBasic_NamedUnit_IsNull = _StepBasic.Handle_StepBasic_NamedUnit_IsNull

def Handle_StepBasic_ObjectRole_Create() -> "opencascade::handle< StepBasic_ObjectRole >":
    return _StepBasic.Handle_StepBasic_ObjectRole_Create()
Handle_StepBasic_ObjectRole_Create = _StepBasic.Handle_StepBasic_ObjectRole_Create

def Handle_StepBasic_ObjectRole_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ObjectRole >":
    return _StepBasic.Handle_StepBasic_ObjectRole_DownCast(t)
Handle_StepBasic_ObjectRole_DownCast = _StepBasic.Handle_StepBasic_ObjectRole_DownCast

def Handle_StepBasic_ObjectRole_IsNull(t: 'opencascade::handle< StepBasic_ObjectRole > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ObjectRole_IsNull(t)
Handle_StepBasic_ObjectRole_IsNull = _StepBasic.Handle_StepBasic_ObjectRole_IsNull

def Handle_StepBasic_Organization_Create() -> "opencascade::handle< StepBasic_Organization >":
    return _StepBasic.Handle_StepBasic_Organization_Create()
Handle_StepBasic_Organization_Create = _StepBasic.Handle_StepBasic_Organization_Create

def Handle_StepBasic_Organization_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Organization >":
    return _StepBasic.Handle_StepBasic_Organization_DownCast(t)
Handle_StepBasic_Organization_DownCast = _StepBasic.Handle_StepBasic_Organization_DownCast

def Handle_StepBasic_Organization_IsNull(t: 'opencascade::handle< StepBasic_Organization > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Organization_IsNull(t)
Handle_StepBasic_Organization_IsNull = _StepBasic.Handle_StepBasic_Organization_IsNull

def Handle_StepBasic_OrganizationAssignment_Create() -> "opencascade::handle< StepBasic_OrganizationAssignment >":
    return _StepBasic.Handle_StepBasic_OrganizationAssignment_Create()
Handle_StepBasic_OrganizationAssignment_Create = _StepBasic.Handle_StepBasic_OrganizationAssignment_Create

def Handle_StepBasic_OrganizationAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_OrganizationAssignment >":
    return _StepBasic.Handle_StepBasic_OrganizationAssignment_DownCast(t)
Handle_StepBasic_OrganizationAssignment_DownCast = _StepBasic.Handle_StepBasic_OrganizationAssignment_DownCast

def Handle_StepBasic_OrganizationAssignment_IsNull(t: 'opencascade::handle< StepBasic_OrganizationAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_OrganizationAssignment_IsNull(t)
Handle_StepBasic_OrganizationAssignment_IsNull = _StepBasic.Handle_StepBasic_OrganizationAssignment_IsNull

def Handle_StepBasic_OrganizationRole_Create() -> "opencascade::handle< StepBasic_OrganizationRole >":
    return _StepBasic.Handle_StepBasic_OrganizationRole_Create()
Handle_StepBasic_OrganizationRole_Create = _StepBasic.Handle_StepBasic_OrganizationRole_Create

def Handle_StepBasic_OrganizationRole_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_OrganizationRole >":
    return _StepBasic.Handle_StepBasic_OrganizationRole_DownCast(t)
Handle_StepBasic_OrganizationRole_DownCast = _StepBasic.Handle_StepBasic_OrganizationRole_DownCast

def Handle_StepBasic_OrganizationRole_IsNull(t: 'opencascade::handle< StepBasic_OrganizationRole > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_OrganizationRole_IsNull(t)
Handle_StepBasic_OrganizationRole_IsNull = _StepBasic.Handle_StepBasic_OrganizationRole_IsNull

def Handle_StepBasic_Person_Create() -> "opencascade::handle< StepBasic_Person >":
    return _StepBasic.Handle_StepBasic_Person_Create()
Handle_StepBasic_Person_Create = _StepBasic.Handle_StepBasic_Person_Create

def Handle_StepBasic_Person_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Person >":
    return _StepBasic.Handle_StepBasic_Person_DownCast(t)
Handle_StepBasic_Person_DownCast = _StepBasic.Handle_StepBasic_Person_DownCast

def Handle_StepBasic_Person_IsNull(t: 'opencascade::handle< StepBasic_Person > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Person_IsNull(t)
Handle_StepBasic_Person_IsNull = _StepBasic.Handle_StepBasic_Person_IsNull

def Handle_StepBasic_PersonAndOrganization_Create() -> "opencascade::handle< StepBasic_PersonAndOrganization >":
    return _StepBasic.Handle_StepBasic_PersonAndOrganization_Create()
Handle_StepBasic_PersonAndOrganization_Create = _StepBasic.Handle_StepBasic_PersonAndOrganization_Create

def Handle_StepBasic_PersonAndOrganization_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_PersonAndOrganization >":
    return _StepBasic.Handle_StepBasic_PersonAndOrganization_DownCast(t)
Handle_StepBasic_PersonAndOrganization_DownCast = _StepBasic.Handle_StepBasic_PersonAndOrganization_DownCast

def Handle_StepBasic_PersonAndOrganization_IsNull(t: 'opencascade::handle< StepBasic_PersonAndOrganization > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_PersonAndOrganization_IsNull(t)
Handle_StepBasic_PersonAndOrganization_IsNull = _StepBasic.Handle_StepBasic_PersonAndOrganization_IsNull

def Handle_StepBasic_PersonAndOrganizationAssignment_Create() -> "opencascade::handle< StepBasic_PersonAndOrganizationAssignment >":
    return _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_Create()
Handle_StepBasic_PersonAndOrganizationAssignment_Create = _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_Create

def Handle_StepBasic_PersonAndOrganizationAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_PersonAndOrganizationAssignment >":
    return _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_DownCast(t)
Handle_StepBasic_PersonAndOrganizationAssignment_DownCast = _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_DownCast

def Handle_StepBasic_PersonAndOrganizationAssignment_IsNull(t: 'opencascade::handle< StepBasic_PersonAndOrganizationAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_IsNull(t)
Handle_StepBasic_PersonAndOrganizationAssignment_IsNull = _StepBasic.Handle_StepBasic_PersonAndOrganizationAssignment_IsNull

def Handle_StepBasic_PersonAndOrganizationRole_Create() -> "opencascade::handle< StepBasic_PersonAndOrganizationRole >":
    return _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_Create()
Handle_StepBasic_PersonAndOrganizationRole_Create = _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_Create

def Handle_StepBasic_PersonAndOrganizationRole_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_PersonAndOrganizationRole >":
    return _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_DownCast(t)
Handle_StepBasic_PersonAndOrganizationRole_DownCast = _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_DownCast

def Handle_StepBasic_PersonAndOrganizationRole_IsNull(t: 'opencascade::handle< StepBasic_PersonAndOrganizationRole > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_IsNull(t)
Handle_StepBasic_PersonAndOrganizationRole_IsNull = _StepBasic.Handle_StepBasic_PersonAndOrganizationRole_IsNull

def Handle_StepBasic_Product_Create() -> "opencascade::handle< StepBasic_Product >":
    return _StepBasic.Handle_StepBasic_Product_Create()
Handle_StepBasic_Product_Create = _StepBasic.Handle_StepBasic_Product_Create

def Handle_StepBasic_Product_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_Product >":
    return _StepBasic.Handle_StepBasic_Product_DownCast(t)
Handle_StepBasic_Product_DownCast = _StepBasic.Handle_StepBasic_Product_DownCast

def Handle_StepBasic_Product_IsNull(t: 'opencascade::handle< StepBasic_Product > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_Product_IsNull(t)
Handle_StepBasic_Product_IsNull = _StepBasic.Handle_StepBasic_Product_IsNull

def Handle_StepBasic_ProductCategory_Create() -> "opencascade::handle< StepBasic_ProductCategory >":
    return _StepBasic.Handle_StepBasic_ProductCategory_Create()
Handle_StepBasic_ProductCategory_Create = _StepBasic.Handle_StepBasic_ProductCategory_Create

def Handle_StepBasic_ProductCategory_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductCategory >":
    return _StepBasic.Handle_StepBasic_ProductCategory_DownCast(t)
Handle_StepBasic_ProductCategory_DownCast = _StepBasic.Handle_StepBasic_ProductCategory_DownCast

def Handle_StepBasic_ProductCategory_IsNull(t: 'opencascade::handle< StepBasic_ProductCategory > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductCategory_IsNull(t)
Handle_StepBasic_ProductCategory_IsNull = _StepBasic.Handle_StepBasic_ProductCategory_IsNull

def Handle_StepBasic_ProductCategoryRelationship_Create() -> "opencascade::handle< StepBasic_ProductCategoryRelationship >":
    return _StepBasic.Handle_StepBasic_ProductCategoryRelationship_Create()
Handle_StepBasic_ProductCategoryRelationship_Create = _StepBasic.Handle_StepBasic_ProductCategoryRelationship_Create

def Handle_StepBasic_ProductCategoryRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductCategoryRelationship >":
    return _StepBasic.Handle_StepBasic_ProductCategoryRelationship_DownCast(t)
Handle_StepBasic_ProductCategoryRelationship_DownCast = _StepBasic.Handle_StepBasic_ProductCategoryRelationship_DownCast

def Handle_StepBasic_ProductCategoryRelationship_IsNull(t: 'opencascade::handle< StepBasic_ProductCategoryRelationship > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductCategoryRelationship_IsNull(t)
Handle_StepBasic_ProductCategoryRelationship_IsNull = _StepBasic.Handle_StepBasic_ProductCategoryRelationship_IsNull

def Handle_StepBasic_ProductDefinition_Create() -> "opencascade::handle< StepBasic_ProductDefinition >":
    return _StepBasic.Handle_StepBasic_ProductDefinition_Create()
Handle_StepBasic_ProductDefinition_Create = _StepBasic.Handle_StepBasic_ProductDefinition_Create

def Handle_StepBasic_ProductDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinition >":
    return _StepBasic.Handle_StepBasic_ProductDefinition_DownCast(t)
Handle_StepBasic_ProductDefinition_DownCast = _StepBasic.Handle_StepBasic_ProductDefinition_DownCast

def Handle_StepBasic_ProductDefinition_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinition > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinition_IsNull(t)
Handle_StepBasic_ProductDefinition_IsNull = _StepBasic.Handle_StepBasic_ProductDefinition_IsNull

def Handle_StepBasic_ProductDefinitionFormation_Create() -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormation_Create()
Handle_StepBasic_ProductDefinitionFormation_Create = _StepBasic.Handle_StepBasic_ProductDefinitionFormation_Create

def Handle_StepBasic_ProductDefinitionFormation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormation_DownCast(t)
Handle_StepBasic_ProductDefinitionFormation_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionFormation_DownCast

def Handle_StepBasic_ProductDefinitionFormation_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionFormation > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormation_IsNull(t)
Handle_StepBasic_ProductDefinitionFormation_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionFormation_IsNull

def Handle_StepBasic_ProductDefinitionFormationRelationship_Create() -> "opencascade::handle< StepBasic_ProductDefinitionFormationRelationship >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_Create()
Handle_StepBasic_ProductDefinitionFormationRelationship_Create = _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_Create

def Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionFormationRelationship >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast(t)
Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast

def Handle_StepBasic_ProductDefinitionFormationRelationship_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionFormationRelationship > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_IsNull(t)
Handle_StepBasic_ProductDefinitionFormationRelationship_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship_IsNull

def Handle_StepBasic_ProductDefinitionReference_Create() -> "opencascade::handle< StepBasic_ProductDefinitionReference >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionReference_Create()
Handle_StepBasic_ProductDefinitionReference_Create = _StepBasic.Handle_StepBasic_ProductDefinitionReference_Create

def Handle_StepBasic_ProductDefinitionReference_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionReference >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionReference_DownCast(t)
Handle_StepBasic_ProductDefinitionReference_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionReference_DownCast

def Handle_StepBasic_ProductDefinitionReference_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionReference > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionReference_IsNull(t)
Handle_StepBasic_ProductDefinitionReference_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionReference_IsNull

def Handle_StepBasic_ProductDefinitionRelationship_Create() -> "opencascade::handle< StepBasic_ProductDefinitionRelationship >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_Create()
Handle_StepBasic_ProductDefinitionRelationship_Create = _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_Create

def Handle_StepBasic_ProductDefinitionRelationship_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionRelationship >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_DownCast(t)
Handle_StepBasic_ProductDefinitionRelationship_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_DownCast

def Handle_StepBasic_ProductDefinitionRelationship_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionRelationship > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_IsNull(t)
Handle_StepBasic_ProductDefinitionRelationship_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionRelationship_IsNull

def Handle_StepBasic_RoleAssociation_Create() -> "opencascade::handle< StepBasic_RoleAssociation >":
    return _StepBasic.Handle_StepBasic_RoleAssociation_Create()
Handle_StepBasic_RoleAssociation_Create = _StepBasic.Handle_StepBasic_RoleAssociation_Create

def Handle_StepBasic_RoleAssociation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_RoleAssociation >":
    return _StepBasic.Handle_StepBasic_RoleAssociation_DownCast(t)
Handle_StepBasic_RoleAssociation_DownCast = _StepBasic.Handle_StepBasic_RoleAssociation_DownCast

def Handle_StepBasic_RoleAssociation_IsNull(t: 'opencascade::handle< StepBasic_RoleAssociation > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_RoleAssociation_IsNull(t)
Handle_StepBasic_RoleAssociation_IsNull = _StepBasic.Handle_StepBasic_RoleAssociation_IsNull

def Handle_StepBasic_SecurityClassification_Create() -> "opencascade::handle< StepBasic_SecurityClassification >":
    return _StepBasic.Handle_StepBasic_SecurityClassification_Create()
Handle_StepBasic_SecurityClassification_Create = _StepBasic.Handle_StepBasic_SecurityClassification_Create

def Handle_StepBasic_SecurityClassification_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SecurityClassification >":
    return _StepBasic.Handle_StepBasic_SecurityClassification_DownCast(t)
Handle_StepBasic_SecurityClassification_DownCast = _StepBasic.Handle_StepBasic_SecurityClassification_DownCast

def Handle_StepBasic_SecurityClassification_IsNull(t: 'opencascade::handle< StepBasic_SecurityClassification > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SecurityClassification_IsNull(t)
Handle_StepBasic_SecurityClassification_IsNull = _StepBasic.Handle_StepBasic_SecurityClassification_IsNull

def Handle_StepBasic_SecurityClassificationAssignment_Create() -> "opencascade::handle< StepBasic_SecurityClassificationAssignment >":
    return _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_Create()
Handle_StepBasic_SecurityClassificationAssignment_Create = _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_Create

def Handle_StepBasic_SecurityClassificationAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SecurityClassificationAssignment >":
    return _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_DownCast(t)
Handle_StepBasic_SecurityClassificationAssignment_DownCast = _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_DownCast

def Handle_StepBasic_SecurityClassificationAssignment_IsNull(t: 'opencascade::handle< StepBasic_SecurityClassificationAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_IsNull(t)
Handle_StepBasic_SecurityClassificationAssignment_IsNull = _StepBasic.Handle_StepBasic_SecurityClassificationAssignment_IsNull

def Handle_StepBasic_SecurityClassificationLevel_Create() -> "opencascade::handle< StepBasic_SecurityClassificationLevel >":
    return _StepBasic.Handle_StepBasic_SecurityClassificationLevel_Create()
Handle_StepBasic_SecurityClassificationLevel_Create = _StepBasic.Handle_StepBasic_SecurityClassificationLevel_Create

def Handle_StepBasic_SecurityClassificationLevel_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SecurityClassificationLevel >":
    return _StepBasic.Handle_StepBasic_SecurityClassificationLevel_DownCast(t)
Handle_StepBasic_SecurityClassificationLevel_DownCast = _StepBasic.Handle_StepBasic_SecurityClassificationLevel_DownCast

def Handle_StepBasic_SecurityClassificationLevel_IsNull(t: 'opencascade::handle< StepBasic_SecurityClassificationLevel > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SecurityClassificationLevel_IsNull(t)
Handle_StepBasic_SecurityClassificationLevel_IsNull = _StepBasic.Handle_StepBasic_SecurityClassificationLevel_IsNull

def Handle_StepBasic_SizeMember_Create() -> "opencascade::handle< StepBasic_SizeMember >":
    return _StepBasic.Handle_StepBasic_SizeMember_Create()
Handle_StepBasic_SizeMember_Create = _StepBasic.Handle_StepBasic_SizeMember_Create

def Handle_StepBasic_SizeMember_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SizeMember >":
    return _StepBasic.Handle_StepBasic_SizeMember_DownCast(t)
Handle_StepBasic_SizeMember_DownCast = _StepBasic.Handle_StepBasic_SizeMember_DownCast

def Handle_StepBasic_SizeMember_IsNull(t: 'opencascade::handle< StepBasic_SizeMember > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SizeMember_IsNull(t)
Handle_StepBasic_SizeMember_IsNull = _StepBasic.Handle_StepBasic_SizeMember_IsNull

def Handle_StepBasic_VersionedActionRequest_Create() -> "opencascade::handle< StepBasic_VersionedActionRequest >":
    return _StepBasic.Handle_StepBasic_VersionedActionRequest_Create()
Handle_StepBasic_VersionedActionRequest_Create = _StepBasic.Handle_StepBasic_VersionedActionRequest_Create

def Handle_StepBasic_VersionedActionRequest_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_VersionedActionRequest >":
    return _StepBasic.Handle_StepBasic_VersionedActionRequest_DownCast(t)
Handle_StepBasic_VersionedActionRequest_DownCast = _StepBasic.Handle_StepBasic_VersionedActionRequest_DownCast

def Handle_StepBasic_VersionedActionRequest_IsNull(t: 'opencascade::handle< StepBasic_VersionedActionRequest > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_VersionedActionRequest_IsNull(t)
Handle_StepBasic_VersionedActionRequest_IsNull = _StepBasic.Handle_StepBasic_VersionedActionRequest_IsNull

def Handle_StepBasic_AreaUnit_Create() -> "opencascade::handle< StepBasic_AreaUnit >":
    return _StepBasic.Handle_StepBasic_AreaUnit_Create()
Handle_StepBasic_AreaUnit_Create = _StepBasic.Handle_StepBasic_AreaUnit_Create

def Handle_StepBasic_AreaUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_AreaUnit >":
    return _StepBasic.Handle_StepBasic_AreaUnit_DownCast(t)
Handle_StepBasic_AreaUnit_DownCast = _StepBasic.Handle_StepBasic_AreaUnit_DownCast

def Handle_StepBasic_AreaUnit_IsNull(t: 'opencascade::handle< StepBasic_AreaUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_AreaUnit_IsNull(t)
Handle_StepBasic_AreaUnit_IsNull = _StepBasic.Handle_StepBasic_AreaUnit_IsNull

def Handle_StepBasic_CalendarDate_Create() -> "opencascade::handle< StepBasic_CalendarDate >":
    return _StepBasic.Handle_StepBasic_CalendarDate_Create()
Handle_StepBasic_CalendarDate_Create = _StepBasic.Handle_StepBasic_CalendarDate_Create

def Handle_StepBasic_CalendarDate_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_CalendarDate >":
    return _StepBasic.Handle_StepBasic_CalendarDate_DownCast(t)
Handle_StepBasic_CalendarDate_DownCast = _StepBasic.Handle_StepBasic_CalendarDate_DownCast

def Handle_StepBasic_CalendarDate_IsNull(t: 'opencascade::handle< StepBasic_CalendarDate > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_CalendarDate_IsNull(t)
Handle_StepBasic_CalendarDate_IsNull = _StepBasic.Handle_StepBasic_CalendarDate_IsNull

def Handle_StepBasic_ConversionBasedUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnit_Create()
Handle_StepBasic_ConversionBasedUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnit_Create

def Handle_StepBasic_ConversionBasedUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnit_DownCast

def Handle_StepBasic_ConversionBasedUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnit_IsNull

def Handle_StepBasic_DigitalDocument_Create() -> "opencascade::handle< StepBasic_DigitalDocument >":
    return _StepBasic.Handle_StepBasic_DigitalDocument_Create()
Handle_StepBasic_DigitalDocument_Create = _StepBasic.Handle_StepBasic_DigitalDocument_Create

def Handle_StepBasic_DigitalDocument_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DigitalDocument >":
    return _StepBasic.Handle_StepBasic_DigitalDocument_DownCast(t)
Handle_StepBasic_DigitalDocument_DownCast = _StepBasic.Handle_StepBasic_DigitalDocument_DownCast

def Handle_StepBasic_DigitalDocument_IsNull(t: 'opencascade::handle< StepBasic_DigitalDocument > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DigitalDocument_IsNull(t)
Handle_StepBasic_DigitalDocument_IsNull = _StepBasic.Handle_StepBasic_DigitalDocument_IsNull

def Handle_StepBasic_DocumentFile_Create() -> "opencascade::handle< StepBasic_DocumentFile >":
    return _StepBasic.Handle_StepBasic_DocumentFile_Create()
Handle_StepBasic_DocumentFile_Create = _StepBasic.Handle_StepBasic_DocumentFile_Create

def Handle_StepBasic_DocumentFile_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DocumentFile >":
    return _StepBasic.Handle_StepBasic_DocumentFile_DownCast(t)
Handle_StepBasic_DocumentFile_DownCast = _StepBasic.Handle_StepBasic_DocumentFile_DownCast

def Handle_StepBasic_DocumentFile_IsNull(t: 'opencascade::handle< StepBasic_DocumentFile > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DocumentFile_IsNull(t)
Handle_StepBasic_DocumentFile_IsNull = _StepBasic.Handle_StepBasic_DocumentFile_IsNull

def Handle_StepBasic_DocumentProductEquivalence_Create() -> "opencascade::handle< StepBasic_DocumentProductEquivalence >":
    return _StepBasic.Handle_StepBasic_DocumentProductEquivalence_Create()
Handle_StepBasic_DocumentProductEquivalence_Create = _StepBasic.Handle_StepBasic_DocumentProductEquivalence_Create

def Handle_StepBasic_DocumentProductEquivalence_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DocumentProductEquivalence >":
    return _StepBasic.Handle_StepBasic_DocumentProductEquivalence_DownCast(t)
Handle_StepBasic_DocumentProductEquivalence_DownCast = _StepBasic.Handle_StepBasic_DocumentProductEquivalence_DownCast

def Handle_StepBasic_DocumentProductEquivalence_IsNull(t: 'opencascade::handle< StepBasic_DocumentProductEquivalence > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DocumentProductEquivalence_IsNull(t)
Handle_StepBasic_DocumentProductEquivalence_IsNull = _StepBasic.Handle_StepBasic_DocumentProductEquivalence_IsNull

def Handle_StepBasic_ExternalIdentificationAssignment_Create() -> "opencascade::handle< StepBasic_ExternalIdentificationAssignment >":
    return _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_Create()
Handle_StepBasic_ExternalIdentificationAssignment_Create = _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_Create

def Handle_StepBasic_ExternalIdentificationAssignment_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ExternalIdentificationAssignment >":
    return _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_DownCast(t)
Handle_StepBasic_ExternalIdentificationAssignment_DownCast = _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_DownCast

def Handle_StepBasic_ExternalIdentificationAssignment_IsNull(t: 'opencascade::handle< StepBasic_ExternalIdentificationAssignment > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_IsNull(t)
Handle_StepBasic_ExternalIdentificationAssignment_IsNull = _StepBasic.Handle_StepBasic_ExternalIdentificationAssignment_IsNull

def Handle_StepBasic_LengthMeasureWithUnit_Create() -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_Create()
Handle_StepBasic_LengthMeasureWithUnit_Create = _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_Create

def Handle_StepBasic_LengthMeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_LengthMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_DownCast(t)
Handle_StepBasic_LengthMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_DownCast

def Handle_StepBasic_LengthMeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_LengthMeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_IsNull(t)
Handle_StepBasic_LengthMeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_LengthMeasureWithUnit_IsNull

def Handle_StepBasic_LengthUnit_Create() -> "opencascade::handle< StepBasic_LengthUnit >":
    return _StepBasic.Handle_StepBasic_LengthUnit_Create()
Handle_StepBasic_LengthUnit_Create = _StepBasic.Handle_StepBasic_LengthUnit_Create

def Handle_StepBasic_LengthUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_LengthUnit >":
    return _StepBasic.Handle_StepBasic_LengthUnit_DownCast(t)
Handle_StepBasic_LengthUnit_DownCast = _StepBasic.Handle_StepBasic_LengthUnit_DownCast

def Handle_StepBasic_LengthUnit_IsNull(t: 'opencascade::handle< StepBasic_LengthUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_LengthUnit_IsNull(t)
Handle_StepBasic_LengthUnit_IsNull = _StepBasic.Handle_StepBasic_LengthUnit_IsNull

def Handle_StepBasic_MassMeasureWithUnit_Create() -> "opencascade::handle< StepBasic_MassMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_MassMeasureWithUnit_Create()
Handle_StepBasic_MassMeasureWithUnit_Create = _StepBasic.Handle_StepBasic_MassMeasureWithUnit_Create

def Handle_StepBasic_MassMeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_MassMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_MassMeasureWithUnit_DownCast(t)
Handle_StepBasic_MassMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_MassMeasureWithUnit_DownCast

def Handle_StepBasic_MassMeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_MassMeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_MassMeasureWithUnit_IsNull(t)
Handle_StepBasic_MassMeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_MassMeasureWithUnit_IsNull

def Handle_StepBasic_MassUnit_Create() -> "opencascade::handle< StepBasic_MassUnit >":
    return _StepBasic.Handle_StepBasic_MassUnit_Create()
Handle_StepBasic_MassUnit_Create = _StepBasic.Handle_StepBasic_MassUnit_Create

def Handle_StepBasic_MassUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_MassUnit >":
    return _StepBasic.Handle_StepBasic_MassUnit_DownCast(t)
Handle_StepBasic_MassUnit_DownCast = _StepBasic.Handle_StepBasic_MassUnit_DownCast

def Handle_StepBasic_MassUnit_IsNull(t: 'opencascade::handle< StepBasic_MassUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_MassUnit_IsNull(t)
Handle_StepBasic_MassUnit_IsNull = _StepBasic.Handle_StepBasic_MassUnit_IsNull

def Handle_StepBasic_OrdinalDate_Create() -> "opencascade::handle< StepBasic_OrdinalDate >":
    return _StepBasic.Handle_StepBasic_OrdinalDate_Create()
Handle_StepBasic_OrdinalDate_Create = _StepBasic.Handle_StepBasic_OrdinalDate_Create

def Handle_StepBasic_OrdinalDate_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_OrdinalDate >":
    return _StepBasic.Handle_StepBasic_OrdinalDate_DownCast(t)
Handle_StepBasic_OrdinalDate_DownCast = _StepBasic.Handle_StepBasic_OrdinalDate_DownCast

def Handle_StepBasic_OrdinalDate_IsNull(t: 'opencascade::handle< StepBasic_OrdinalDate > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_OrdinalDate_IsNull(t)
Handle_StepBasic_OrdinalDate_IsNull = _StepBasic.Handle_StepBasic_OrdinalDate_IsNull

def Handle_StepBasic_OrganizationalAddress_Create() -> "opencascade::handle< StepBasic_OrganizationalAddress >":
    return _StepBasic.Handle_StepBasic_OrganizationalAddress_Create()
Handle_StepBasic_OrganizationalAddress_Create = _StepBasic.Handle_StepBasic_OrganizationalAddress_Create

def Handle_StepBasic_OrganizationalAddress_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_OrganizationalAddress >":
    return _StepBasic.Handle_StepBasic_OrganizationalAddress_DownCast(t)
Handle_StepBasic_OrganizationalAddress_DownCast = _StepBasic.Handle_StepBasic_OrganizationalAddress_DownCast

def Handle_StepBasic_OrganizationalAddress_IsNull(t: 'opencascade::handle< StepBasic_OrganizationalAddress > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_OrganizationalAddress_IsNull(t)
Handle_StepBasic_OrganizationalAddress_IsNull = _StepBasic.Handle_StepBasic_OrganizationalAddress_IsNull

def Handle_StepBasic_PersonalAddress_Create() -> "opencascade::handle< StepBasic_PersonalAddress >":
    return _StepBasic.Handle_StepBasic_PersonalAddress_Create()
Handle_StepBasic_PersonalAddress_Create = _StepBasic.Handle_StepBasic_PersonalAddress_Create

def Handle_StepBasic_PersonalAddress_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_PersonalAddress >":
    return _StepBasic.Handle_StepBasic_PersonalAddress_DownCast(t)
Handle_StepBasic_PersonalAddress_DownCast = _StepBasic.Handle_StepBasic_PersonalAddress_DownCast

def Handle_StepBasic_PersonalAddress_IsNull(t: 'opencascade::handle< StepBasic_PersonalAddress > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_PersonalAddress_IsNull(t)
Handle_StepBasic_PersonalAddress_IsNull = _StepBasic.Handle_StepBasic_PersonalAddress_IsNull

def Handle_StepBasic_PhysicallyModeledProductDefinition_Create() -> "opencascade::handle< StepBasic_PhysicallyModeledProductDefinition >":
    return _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_Create()
Handle_StepBasic_PhysicallyModeledProductDefinition_Create = _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_Create

def Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_PhysicallyModeledProductDefinition >":
    return _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast(t)
Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast = _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast

def Handle_StepBasic_PhysicallyModeledProductDefinition_IsNull(t: 'opencascade::handle< StepBasic_PhysicallyModeledProductDefinition > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_IsNull(t)
Handle_StepBasic_PhysicallyModeledProductDefinition_IsNull = _StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition_IsNull

def Handle_StepBasic_PlaneAngleMeasureWithUnit_Create() -> "opencascade::handle< StepBasic_PlaneAngleMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_Create()
Handle_StepBasic_PlaneAngleMeasureWithUnit_Create = _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_Create

def Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_PlaneAngleMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast(t)
Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast

def Handle_StepBasic_PlaneAngleMeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_PlaneAngleMeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_IsNull(t)
Handle_StepBasic_PlaneAngleMeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit_IsNull

def Handle_StepBasic_PlaneAngleUnit_Create() -> "opencascade::handle< StepBasic_PlaneAngleUnit >":
    return _StepBasic.Handle_StepBasic_PlaneAngleUnit_Create()
Handle_StepBasic_PlaneAngleUnit_Create = _StepBasic.Handle_StepBasic_PlaneAngleUnit_Create

def Handle_StepBasic_PlaneAngleUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_PlaneAngleUnit >":
    return _StepBasic.Handle_StepBasic_PlaneAngleUnit_DownCast(t)
Handle_StepBasic_PlaneAngleUnit_DownCast = _StepBasic.Handle_StepBasic_PlaneAngleUnit_DownCast

def Handle_StepBasic_PlaneAngleUnit_IsNull(t: 'opencascade::handle< StepBasic_PlaneAngleUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_PlaneAngleUnit_IsNull(t)
Handle_StepBasic_PlaneAngleUnit_IsNull = _StepBasic.Handle_StepBasic_PlaneAngleUnit_IsNull

def Handle_StepBasic_ProductConceptContext_Create() -> "opencascade::handle< StepBasic_ProductConceptContext >":
    return _StepBasic.Handle_StepBasic_ProductConceptContext_Create()
Handle_StepBasic_ProductConceptContext_Create = _StepBasic.Handle_StepBasic_ProductConceptContext_Create

def Handle_StepBasic_ProductConceptContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductConceptContext >":
    return _StepBasic.Handle_StepBasic_ProductConceptContext_DownCast(t)
Handle_StepBasic_ProductConceptContext_DownCast = _StepBasic.Handle_StepBasic_ProductConceptContext_DownCast

def Handle_StepBasic_ProductConceptContext_IsNull(t: 'opencascade::handle< StepBasic_ProductConceptContext > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductConceptContext_IsNull(t)
Handle_StepBasic_ProductConceptContext_IsNull = _StepBasic.Handle_StepBasic_ProductConceptContext_IsNull

def Handle_StepBasic_ProductContext_Create() -> "opencascade::handle< StepBasic_ProductContext >":
    return _StepBasic.Handle_StepBasic_ProductContext_Create()
Handle_StepBasic_ProductContext_Create = _StepBasic.Handle_StepBasic_ProductContext_Create

def Handle_StepBasic_ProductContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductContext >":
    return _StepBasic.Handle_StepBasic_ProductContext_DownCast(t)
Handle_StepBasic_ProductContext_DownCast = _StepBasic.Handle_StepBasic_ProductContext_DownCast

def Handle_StepBasic_ProductContext_IsNull(t: 'opencascade::handle< StepBasic_ProductContext > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductContext_IsNull(t)
Handle_StepBasic_ProductContext_IsNull = _StepBasic.Handle_StepBasic_ProductContext_IsNull

def Handle_StepBasic_ProductDefinitionContext_Create() -> "opencascade::handle< StepBasic_ProductDefinitionContext >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionContext_Create()
Handle_StepBasic_ProductDefinitionContext_Create = _StepBasic.Handle_StepBasic_ProductDefinitionContext_Create

def Handle_StepBasic_ProductDefinitionContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionContext >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionContext_DownCast(t)
Handle_StepBasic_ProductDefinitionContext_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionContext_DownCast

def Handle_StepBasic_ProductDefinitionContext_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionContext > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionContext_IsNull(t)
Handle_StepBasic_ProductDefinitionContext_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionContext_IsNull

def Handle_StepBasic_ProductDefinitionEffectivity_Create() -> "opencascade::handle< StepBasic_ProductDefinitionEffectivity >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_Create()
Handle_StepBasic_ProductDefinitionEffectivity_Create = _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_Create

def Handle_StepBasic_ProductDefinitionEffectivity_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionEffectivity >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_DownCast(t)
Handle_StepBasic_ProductDefinitionEffectivity_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_DownCast

def Handle_StepBasic_ProductDefinitionEffectivity_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionEffectivity > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_IsNull(t)
Handle_StepBasic_ProductDefinitionEffectivity_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionEffectivity_IsNull

def Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_Create() -> "opencascade::handle< StepBasic_ProductDefinitionFormationWithSpecifiedSource >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_Create()
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_Create = _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_Create

def Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionFormationWithSpecifiedSource >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast(t)
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast

def Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionFormationWithSpecifiedSource > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_IsNull(t)
Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_IsNull

def Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_Create() -> "opencascade::handle< StepBasic_ProductDefinitionReferenceWithLocalRepresentation >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_Create()
Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_Create = _StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_Create

def Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionReferenceWithLocalRepresentation >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_DownCast(t)
Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_DownCast

def Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionReferenceWithLocalRepresentation > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_IsNull(t)
Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_IsNull

def Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_Create() -> "opencascade::handle< StepBasic_ProductDefinitionWithAssociatedDocuments >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_Create()
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_Create = _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_Create

def Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductDefinitionWithAssociatedDocuments >":
    return _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast(t)
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast = _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast

def Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_IsNull(t: 'opencascade::handle< StepBasic_ProductDefinitionWithAssociatedDocuments > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_IsNull(t)
Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_IsNull = _StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_IsNull

def Handle_StepBasic_ProductRelatedProductCategory_Create() -> "opencascade::handle< StepBasic_ProductRelatedProductCategory >":
    return _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_Create()
Handle_StepBasic_ProductRelatedProductCategory_Create = _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_Create

def Handle_StepBasic_ProductRelatedProductCategory_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductRelatedProductCategory >":
    return _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_DownCast(t)
Handle_StepBasic_ProductRelatedProductCategory_DownCast = _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_DownCast

def Handle_StepBasic_ProductRelatedProductCategory_IsNull(t: 'opencascade::handle< StepBasic_ProductRelatedProductCategory > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_IsNull(t)
Handle_StepBasic_ProductRelatedProductCategory_IsNull = _StepBasic.Handle_StepBasic_ProductRelatedProductCategory_IsNull

def Handle_StepBasic_RatioMeasureWithUnit_Create() -> "opencascade::handle< StepBasic_RatioMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_Create()
Handle_StepBasic_RatioMeasureWithUnit_Create = _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_Create

def Handle_StepBasic_RatioMeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_RatioMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_DownCast(t)
Handle_StepBasic_RatioMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_DownCast

def Handle_StepBasic_RatioMeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_RatioMeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_IsNull(t)
Handle_StepBasic_RatioMeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_RatioMeasureWithUnit_IsNull

def Handle_StepBasic_RatioUnit_Create() -> "opencascade::handle< StepBasic_RatioUnit >":
    return _StepBasic.Handle_StepBasic_RatioUnit_Create()
Handle_StepBasic_RatioUnit_Create = _StepBasic.Handle_StepBasic_RatioUnit_Create

def Handle_StepBasic_RatioUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_RatioUnit >":
    return _StepBasic.Handle_StepBasic_RatioUnit_DownCast(t)
Handle_StepBasic_RatioUnit_DownCast = _StepBasic.Handle_StepBasic_RatioUnit_DownCast

def Handle_StepBasic_RatioUnit_IsNull(t: 'opencascade::handle< StepBasic_RatioUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_RatioUnit_IsNull(t)
Handle_StepBasic_RatioUnit_IsNull = _StepBasic.Handle_StepBasic_RatioUnit_IsNull

def Handle_StepBasic_SiUnit_Create() -> "opencascade::handle< StepBasic_SiUnit >":
    return _StepBasic.Handle_StepBasic_SiUnit_Create()
Handle_StepBasic_SiUnit_Create = _StepBasic.Handle_StepBasic_SiUnit_Create

def Handle_StepBasic_SiUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnit >":
    return _StepBasic.Handle_StepBasic_SiUnit_DownCast(t)
Handle_StepBasic_SiUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnit_DownCast

def Handle_StepBasic_SiUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnit_IsNull(t)
Handle_StepBasic_SiUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnit_IsNull

def Handle_StepBasic_SolidAngleMeasureWithUnit_Create() -> "opencascade::handle< StepBasic_SolidAngleMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_Create()
Handle_StepBasic_SolidAngleMeasureWithUnit_Create = _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_Create

def Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SolidAngleMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast(t)
Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast

def Handle_StepBasic_SolidAngleMeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_SolidAngleMeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_IsNull(t)
Handle_StepBasic_SolidAngleMeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit_IsNull

def Handle_StepBasic_SolidAngleUnit_Create() -> "opencascade::handle< StepBasic_SolidAngleUnit >":
    return _StepBasic.Handle_StepBasic_SolidAngleUnit_Create()
Handle_StepBasic_SolidAngleUnit_Create = _StepBasic.Handle_StepBasic_SolidAngleUnit_Create

def Handle_StepBasic_SolidAngleUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SolidAngleUnit >":
    return _StepBasic.Handle_StepBasic_SolidAngleUnit_DownCast(t)
Handle_StepBasic_SolidAngleUnit_DownCast = _StepBasic.Handle_StepBasic_SolidAngleUnit_DownCast

def Handle_StepBasic_SolidAngleUnit_IsNull(t: 'opencascade::handle< StepBasic_SolidAngleUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SolidAngleUnit_IsNull(t)
Handle_StepBasic_SolidAngleUnit_IsNull = _StepBasic.Handle_StepBasic_SolidAngleUnit_IsNull

def Handle_StepBasic_ThermodynamicTemperatureUnit_Create() -> "opencascade::handle< StepBasic_ThermodynamicTemperatureUnit >":
    return _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_Create()
Handle_StepBasic_ThermodynamicTemperatureUnit_Create = _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_Create

def Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ThermodynamicTemperatureUnit >":
    return _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast(t)
Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast = _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast

def Handle_StepBasic_ThermodynamicTemperatureUnit_IsNull(t: 'opencascade::handle< StepBasic_ThermodynamicTemperatureUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_IsNull(t)
Handle_StepBasic_ThermodynamicTemperatureUnit_IsNull = _StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit_IsNull

def Handle_StepBasic_TimeMeasureWithUnit_Create() -> "opencascade::handle< StepBasic_TimeMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_Create()
Handle_StepBasic_TimeMeasureWithUnit_Create = _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_Create

def Handle_StepBasic_TimeMeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_TimeMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_DownCast(t)
Handle_StepBasic_TimeMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_DownCast

def Handle_StepBasic_TimeMeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_TimeMeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_IsNull(t)
Handle_StepBasic_TimeMeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_TimeMeasureWithUnit_IsNull

def Handle_StepBasic_TimeUnit_Create() -> "opencascade::handle< StepBasic_TimeUnit >":
    return _StepBasic.Handle_StepBasic_TimeUnit_Create()
Handle_StepBasic_TimeUnit_Create = _StepBasic.Handle_StepBasic_TimeUnit_Create

def Handle_StepBasic_TimeUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_TimeUnit >":
    return _StepBasic.Handle_StepBasic_TimeUnit_DownCast(t)
Handle_StepBasic_TimeUnit_DownCast = _StepBasic.Handle_StepBasic_TimeUnit_DownCast

def Handle_StepBasic_TimeUnit_IsNull(t: 'opencascade::handle< StepBasic_TimeUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_TimeUnit_IsNull(t)
Handle_StepBasic_TimeUnit_IsNull = _StepBasic.Handle_StepBasic_TimeUnit_IsNull

def Handle_StepBasic_UncertaintyMeasureWithUnit_Create() -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_Create()
Handle_StepBasic_UncertaintyMeasureWithUnit_Create = _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_Create

def Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast(t)
Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast

def Handle_StepBasic_UncertaintyMeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_IsNull(t)
Handle_StepBasic_UncertaintyMeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit_IsNull

def Handle_StepBasic_VolumeUnit_Create() -> "opencascade::handle< StepBasic_VolumeUnit >":
    return _StepBasic.Handle_StepBasic_VolumeUnit_Create()
Handle_StepBasic_VolumeUnit_Create = _StepBasic.Handle_StepBasic_VolumeUnit_Create

def Handle_StepBasic_VolumeUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_VolumeUnit >":
    return _StepBasic.Handle_StepBasic_VolumeUnit_DownCast(t)
Handle_StepBasic_VolumeUnit_DownCast = _StepBasic.Handle_StepBasic_VolumeUnit_DownCast

def Handle_StepBasic_VolumeUnit_IsNull(t: 'opencascade::handle< StepBasic_VolumeUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_VolumeUnit_IsNull(t)
Handle_StepBasic_VolumeUnit_IsNull = _StepBasic.Handle_StepBasic_VolumeUnit_IsNull

def Handle_StepBasic_WeekOfYearAndDayDate_Create() -> "opencascade::handle< StepBasic_WeekOfYearAndDayDate >":
    return _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_Create()
Handle_StepBasic_WeekOfYearAndDayDate_Create = _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_Create

def Handle_StepBasic_WeekOfYearAndDayDate_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_WeekOfYearAndDayDate >":
    return _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_DownCast(t)
Handle_StepBasic_WeekOfYearAndDayDate_DownCast = _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_DownCast

def Handle_StepBasic_WeekOfYearAndDayDate_IsNull(t: 'opencascade::handle< StepBasic_WeekOfYearAndDayDate > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_IsNull(t)
Handle_StepBasic_WeekOfYearAndDayDate_IsNull = _StepBasic.Handle_StepBasic_WeekOfYearAndDayDate_IsNull

def Handle_StepBasic_ConversionBasedUnitAndAreaUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnitAndAreaUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_Create()
Handle_StepBasic_ConversionBasedUnitAndAreaUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_Create

def Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnitAndAreaUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast

def Handle_StepBasic_ConversionBasedUnitAndAreaUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnitAndAreaUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnitAndAreaUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit_IsNull

def Handle_StepBasic_ConversionBasedUnitAndLengthUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnitAndLengthUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_Create()
Handle_StepBasic_ConversionBasedUnitAndLengthUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_Create

def Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnitAndLengthUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast

def Handle_StepBasic_ConversionBasedUnitAndLengthUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnitAndLengthUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnitAndLengthUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit_IsNull

def Handle_StepBasic_ConversionBasedUnitAndMassUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnitAndMassUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_Create()
Handle_StepBasic_ConversionBasedUnitAndMassUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_Create

def Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnitAndMassUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast

def Handle_StepBasic_ConversionBasedUnitAndMassUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnitAndMassUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnitAndMassUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit_IsNull

def Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnitAndPlaneAngleUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_Create()
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_Create

def Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnitAndPlaneAngleUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast

def Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnitAndPlaneAngleUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_IsNull

def Handle_StepBasic_ConversionBasedUnitAndRatioUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnitAndRatioUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_Create()
Handle_StepBasic_ConversionBasedUnitAndRatioUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_Create

def Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnitAndRatioUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast

def Handle_StepBasic_ConversionBasedUnitAndRatioUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnitAndRatioUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnitAndRatioUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit_IsNull

def Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnitAndSolidAngleUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_Create()
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_Create

def Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnitAndSolidAngleUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast

def Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnitAndSolidAngleUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_IsNull

def Handle_StepBasic_ConversionBasedUnitAndTimeUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnitAndTimeUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_Create()
Handle_StepBasic_ConversionBasedUnitAndTimeUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_Create

def Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnitAndTimeUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast

def Handle_StepBasic_ConversionBasedUnitAndTimeUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnitAndTimeUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnitAndTimeUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit_IsNull

def Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_Create() -> "opencascade::handle< StepBasic_ConversionBasedUnitAndVolumeUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_Create()
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_Create = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_Create

def Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ConversionBasedUnitAndVolumeUnit >":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast(t)
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast

def Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_IsNull(t: 'opencascade::handle< StepBasic_ConversionBasedUnitAndVolumeUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_IsNull(t)
Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_IsNull = _StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_IsNull

def Handle_StepBasic_DesignContext_Create() -> "opencascade::handle< StepBasic_DesignContext >":
    return _StepBasic.Handle_StepBasic_DesignContext_Create()
Handle_StepBasic_DesignContext_Create = _StepBasic.Handle_StepBasic_DesignContext_Create

def Handle_StepBasic_DesignContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_DesignContext >":
    return _StepBasic.Handle_StepBasic_DesignContext_DownCast(t)
Handle_StepBasic_DesignContext_DownCast = _StepBasic.Handle_StepBasic_DesignContext_DownCast

def Handle_StepBasic_DesignContext_IsNull(t: 'opencascade::handle< StepBasic_DesignContext > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_DesignContext_IsNull(t)
Handle_StepBasic_DesignContext_IsNull = _StepBasic.Handle_StepBasic_DesignContext_IsNull

def Handle_StepBasic_MechanicalContext_Create() -> "opencascade::handle< StepBasic_MechanicalContext >":
    return _StepBasic.Handle_StepBasic_MechanicalContext_Create()
Handle_StepBasic_MechanicalContext_Create = _StepBasic.Handle_StepBasic_MechanicalContext_Create

def Handle_StepBasic_MechanicalContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_MechanicalContext >":
    return _StepBasic.Handle_StepBasic_MechanicalContext_DownCast(t)
Handle_StepBasic_MechanicalContext_DownCast = _StepBasic.Handle_StepBasic_MechanicalContext_DownCast

def Handle_StepBasic_MechanicalContext_IsNull(t: 'opencascade::handle< StepBasic_MechanicalContext > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_MechanicalContext_IsNull(t)
Handle_StepBasic_MechanicalContext_IsNull = _StepBasic.Handle_StepBasic_MechanicalContext_IsNull

def Handle_StepBasic_ProductType_Create() -> "opencascade::handle< StepBasic_ProductType >":
    return _StepBasic.Handle_StepBasic_ProductType_Create()
Handle_StepBasic_ProductType_Create = _StepBasic.Handle_StepBasic_ProductType_Create

def Handle_StepBasic_ProductType_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_ProductType >":
    return _StepBasic.Handle_StepBasic_ProductType_DownCast(t)
Handle_StepBasic_ProductType_DownCast = _StepBasic.Handle_StepBasic_ProductType_DownCast

def Handle_StepBasic_ProductType_IsNull(t: 'opencascade::handle< StepBasic_ProductType > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_ProductType_IsNull(t)
Handle_StepBasic_ProductType_IsNull = _StepBasic.Handle_StepBasic_ProductType_IsNull

def Handle_StepBasic_SiUnitAndAreaUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndAreaUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_Create()
Handle_StepBasic_SiUnitAndAreaUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_Create

def Handle_StepBasic_SiUnitAndAreaUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndAreaUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_DownCast(t)
Handle_StepBasic_SiUnitAndAreaUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_DownCast

def Handle_StepBasic_SiUnitAndAreaUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndAreaUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_IsNull(t)
Handle_StepBasic_SiUnitAndAreaUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndAreaUnit_IsNull

def Handle_StepBasic_SiUnitAndLengthUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndLengthUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_Create()
Handle_StepBasic_SiUnitAndLengthUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_Create

def Handle_StepBasic_SiUnitAndLengthUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndLengthUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_DownCast(t)
Handle_StepBasic_SiUnitAndLengthUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_DownCast

def Handle_StepBasic_SiUnitAndLengthUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndLengthUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_IsNull(t)
Handle_StepBasic_SiUnitAndLengthUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndLengthUnit_IsNull

def Handle_StepBasic_SiUnitAndMassUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndMassUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_Create()
Handle_StepBasic_SiUnitAndMassUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_Create

def Handle_StepBasic_SiUnitAndMassUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndMassUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_DownCast(t)
Handle_StepBasic_SiUnitAndMassUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_DownCast

def Handle_StepBasic_SiUnitAndMassUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndMassUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_IsNull(t)
Handle_StepBasic_SiUnitAndMassUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndMassUnit_IsNull

def Handle_StepBasic_SiUnitAndPlaneAngleUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndPlaneAngleUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_Create()
Handle_StepBasic_SiUnitAndPlaneAngleUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_Create

def Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndPlaneAngleUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast(t)
Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast

def Handle_StepBasic_SiUnitAndPlaneAngleUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndPlaneAngleUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_IsNull(t)
Handle_StepBasic_SiUnitAndPlaneAngleUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit_IsNull

def Handle_StepBasic_SiUnitAndRatioUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndRatioUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_Create()
Handle_StepBasic_SiUnitAndRatioUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_Create

def Handle_StepBasic_SiUnitAndRatioUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndRatioUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_DownCast(t)
Handle_StepBasic_SiUnitAndRatioUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_DownCast

def Handle_StepBasic_SiUnitAndRatioUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndRatioUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_IsNull(t)
Handle_StepBasic_SiUnitAndRatioUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndRatioUnit_IsNull

def Handle_StepBasic_SiUnitAndSolidAngleUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndSolidAngleUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_Create()
Handle_StepBasic_SiUnitAndSolidAngleUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_Create

def Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndSolidAngleUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast(t)
Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast

def Handle_StepBasic_SiUnitAndSolidAngleUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndSolidAngleUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_IsNull(t)
Handle_StepBasic_SiUnitAndSolidAngleUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit_IsNull

def Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndThermodynamicTemperatureUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_Create()
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_Create

def Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndThermodynamicTemperatureUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast(t)
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast

def Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndThermodynamicTemperatureUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_IsNull(t)
Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_IsNull

def Handle_StepBasic_SiUnitAndTimeUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndTimeUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_Create()
Handle_StepBasic_SiUnitAndTimeUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_Create

def Handle_StepBasic_SiUnitAndTimeUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndTimeUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_DownCast(t)
Handle_StepBasic_SiUnitAndTimeUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_DownCast

def Handle_StepBasic_SiUnitAndTimeUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndTimeUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_IsNull(t)
Handle_StepBasic_SiUnitAndTimeUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndTimeUnit_IsNull

def Handle_StepBasic_SiUnitAndVolumeUnit_Create() -> "opencascade::handle< StepBasic_SiUnitAndVolumeUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_Create()
Handle_StepBasic_SiUnitAndVolumeUnit_Create = _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_Create

def Handle_StepBasic_SiUnitAndVolumeUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_SiUnitAndVolumeUnit >":
    return _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_DownCast(t)
Handle_StepBasic_SiUnitAndVolumeUnit_DownCast = _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_DownCast

def Handle_StepBasic_SiUnitAndVolumeUnit_IsNull(t: 'opencascade::handle< StepBasic_SiUnitAndVolumeUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_IsNull(t)
Handle_StepBasic_SiUnitAndVolumeUnit_IsNull = _StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit_IsNull

def Handle_StepBasic_HArray1OfOrganization_Create() -> "opencascade::handle< StepBasic_HArray1OfOrganization >":
    return _StepBasic.Handle_StepBasic_HArray1OfOrganization_Create()
Handle_StepBasic_HArray1OfOrganization_Create = _StepBasic.Handle_StepBasic_HArray1OfOrganization_Create

def Handle_StepBasic_HArray1OfOrganization_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfOrganization >":
    return _StepBasic.Handle_StepBasic_HArray1OfOrganization_DownCast(t)
Handle_StepBasic_HArray1OfOrganization_DownCast = _StepBasic.Handle_StepBasic_HArray1OfOrganization_DownCast

def Handle_StepBasic_HArray1OfOrganization_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfOrganization > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfOrganization_IsNull(t)
Handle_StepBasic_HArray1OfOrganization_IsNull = _StepBasic.Handle_StepBasic_HArray1OfOrganization_IsNull

def Handle_StepBasic_HArray1OfProductDefinition_Create() -> "opencascade::handle< StepBasic_HArray1OfProductDefinition >":
    return _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_Create()
Handle_StepBasic_HArray1OfProductDefinition_Create = _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_Create

def Handle_StepBasic_HArray1OfProductDefinition_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfProductDefinition >":
    return _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_DownCast(t)
Handle_StepBasic_HArray1OfProductDefinition_DownCast = _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_DownCast

def Handle_StepBasic_HArray1OfProductDefinition_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfProductDefinition > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_IsNull(t)
Handle_StepBasic_HArray1OfProductDefinition_IsNull = _StepBasic.Handle_StepBasic_HArray1OfProductDefinition_IsNull

def Handle_StepBasic_HArray1OfDerivedUnitElement_Create() -> "opencascade::handle< StepBasic_HArray1OfDerivedUnitElement >":
    return _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_Create()
Handle_StepBasic_HArray1OfDerivedUnitElement_Create = _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_Create

def Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfDerivedUnitElement >":
    return _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast(t)
Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast = _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast

def Handle_StepBasic_HArray1OfDerivedUnitElement_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfDerivedUnitElement > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_IsNull(t)
Handle_StepBasic_HArray1OfDerivedUnitElement_IsNull = _StepBasic.Handle_StepBasic_HArray1OfDerivedUnitElement_IsNull

def Handle_StepBasic_HArray1OfPerson_Create() -> "opencascade::handle< StepBasic_HArray1OfPerson >":
    return _StepBasic.Handle_StepBasic_HArray1OfPerson_Create()
Handle_StepBasic_HArray1OfPerson_Create = _StepBasic.Handle_StepBasic_HArray1OfPerson_Create

def Handle_StepBasic_HArray1OfPerson_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfPerson >":
    return _StepBasic.Handle_StepBasic_HArray1OfPerson_DownCast(t)
Handle_StepBasic_HArray1OfPerson_DownCast = _StepBasic.Handle_StepBasic_HArray1OfPerson_DownCast

def Handle_StepBasic_HArray1OfPerson_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfPerson > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfPerson_IsNull(t)
Handle_StepBasic_HArray1OfPerson_IsNull = _StepBasic.Handle_StepBasic_HArray1OfPerson_IsNull

def Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_Create() -> "opencascade::handle< StepBasic_HArray1OfUncertaintyMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_Create()
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_Create = _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_Create

def Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfUncertaintyMeasureWithUnit >":
    return _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast(t)
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast = _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast

def Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfUncertaintyMeasureWithUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_IsNull(t)
Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_IsNull = _StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_IsNull

def Handle_StepBasic_HArray1OfApproval_Create() -> "opencascade::handle< StepBasic_HArray1OfApproval >":
    return _StepBasic.Handle_StepBasic_HArray1OfApproval_Create()
Handle_StepBasic_HArray1OfApproval_Create = _StepBasic.Handle_StepBasic_HArray1OfApproval_Create

def Handle_StepBasic_HArray1OfApproval_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfApproval >":
    return _StepBasic.Handle_StepBasic_HArray1OfApproval_DownCast(t)
Handle_StepBasic_HArray1OfApproval_DownCast = _StepBasic.Handle_StepBasic_HArray1OfApproval_DownCast

def Handle_StepBasic_HArray1OfApproval_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfApproval > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfApproval_IsNull(t)
Handle_StepBasic_HArray1OfApproval_IsNull = _StepBasic.Handle_StepBasic_HArray1OfApproval_IsNull

def Handle_StepBasic_HArray1OfNamedUnit_Create() -> "opencascade::handle< StepBasic_HArray1OfNamedUnit >":
    return _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_Create()
Handle_StepBasic_HArray1OfNamedUnit_Create = _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_Create

def Handle_StepBasic_HArray1OfNamedUnit_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfNamedUnit >":
    return _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_DownCast(t)
Handle_StepBasic_HArray1OfNamedUnit_DownCast = _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_DownCast

def Handle_StepBasic_HArray1OfNamedUnit_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfNamedUnit > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_IsNull(t)
Handle_StepBasic_HArray1OfNamedUnit_IsNull = _StepBasic.Handle_StepBasic_HArray1OfNamedUnit_IsNull

def Handle_StepBasic_HArray1OfProductContext_Create() -> "opencascade::handle< StepBasic_HArray1OfProductContext >":
    return _StepBasic.Handle_StepBasic_HArray1OfProductContext_Create()
Handle_StepBasic_HArray1OfProductContext_Create = _StepBasic.Handle_StepBasic_HArray1OfProductContext_Create

def Handle_StepBasic_HArray1OfProductContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfProductContext >":
    return _StepBasic.Handle_StepBasic_HArray1OfProductContext_DownCast(t)
Handle_StepBasic_HArray1OfProductContext_DownCast = _StepBasic.Handle_StepBasic_HArray1OfProductContext_DownCast

def Handle_StepBasic_HArray1OfProductContext_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfProductContext > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfProductContext_IsNull(t)
Handle_StepBasic_HArray1OfProductContext_IsNull = _StepBasic.Handle_StepBasic_HArray1OfProductContext_IsNull

def Handle_StepBasic_HArray1OfDocument_Create() -> "opencascade::handle< StepBasic_HArray1OfDocument >":
    return _StepBasic.Handle_StepBasic_HArray1OfDocument_Create()
Handle_StepBasic_HArray1OfDocument_Create = _StepBasic.Handle_StepBasic_HArray1OfDocument_Create

def Handle_StepBasic_HArray1OfDocument_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfDocument >":
    return _StepBasic.Handle_StepBasic_HArray1OfDocument_DownCast(t)
Handle_StepBasic_HArray1OfDocument_DownCast = _StepBasic.Handle_StepBasic_HArray1OfDocument_DownCast

def Handle_StepBasic_HArray1OfDocument_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfDocument > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfDocument_IsNull(t)
Handle_StepBasic_HArray1OfDocument_IsNull = _StepBasic.Handle_StepBasic_HArray1OfDocument_IsNull

def Handle_StepBasic_HArray1OfProduct_Create() -> "opencascade::handle< StepBasic_HArray1OfProduct >":
    return _StepBasic.Handle_StepBasic_HArray1OfProduct_Create()
Handle_StepBasic_HArray1OfProduct_Create = _StepBasic.Handle_StepBasic_HArray1OfProduct_Create

def Handle_StepBasic_HArray1OfProduct_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< StepBasic_HArray1OfProduct >":
    return _StepBasic.Handle_StepBasic_HArray1OfProduct_DownCast(t)
Handle_StepBasic_HArray1OfProduct_DownCast = _StepBasic.Handle_StepBasic_HArray1OfProduct_DownCast

def Handle_StepBasic_HArray1OfProduct_IsNull(t: 'opencascade::handle< StepBasic_HArray1OfProduct > const &') -> "bool":
    return _StepBasic.Handle_StepBasic_HArray1OfProduct_IsNull(t)
Handle_StepBasic_HArray1OfProduct_IsNull = _StepBasic.Handle_StepBasic_HArray1OfProduct_IsNull
class StepBasic_Array1OfApproval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfApproval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfApproval, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Approval > >::iterator":
        return _StepBasic.StepBasic_Array1OfApproval_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Approval > >::iterator":
        return _StepBasic.StepBasic_Array1OfApproval_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Approval > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfApproval_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Approval > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfApproval_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfApproval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_Approval > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfApproval_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfApproval_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfApproval_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfApproval_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfApproval_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfApproval_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfApproval_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfApproval_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfApproval') -> "NCollection_Array1< opencascade::handle< StepBasic_Approval > > &":
        return _StepBasic.StepBasic_Array1OfApproval_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfApproval') -> "NCollection_Array1< opencascade::handle< StepBasic_Approval > > &":
        return _StepBasic.StepBasic_Array1OfApproval_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_Approval > > &":
        return _StepBasic.StepBasic_Array1OfApproval_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_Approval > const &":
        return _StepBasic.StepBasic_Array1OfApproval_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_Approval > &":
        return _StepBasic.StepBasic_Array1OfApproval_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_Approval > const &":
        return _StepBasic.StepBasic_Array1OfApproval_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_Approval > &":
        return _StepBasic.StepBasic_Array1OfApproval_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Approval > const &":
        return _StepBasic.StepBasic_Array1OfApproval_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Approval > &":
        return _StepBasic.StepBasic_Array1OfApproval_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_Approval > &":
        return _StepBasic.StepBasic_Array1OfApproval___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_Approval > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfApproval_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfApproval_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfApproval
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfApproval_swigregister = _StepBasic.StepBasic_Array1OfApproval_swigregister
StepBasic_Array1OfApproval_swigregister(StepBasic_Array1OfApproval)

class StepBasic_Array1OfDerivedUnitElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfDerivedUnitElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfDerivedUnitElement, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_DerivedUnitElement > >::iterator":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_DerivedUnitElement > >::iterator":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_DerivedUnitElement > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_DerivedUnitElement > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfDerivedUnitElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_DerivedUnitElement > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfDerivedUnitElement') -> "NCollection_Array1< opencascade::handle< StepBasic_DerivedUnitElement > > &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfDerivedUnitElement') -> "NCollection_Array1< opencascade::handle< StepBasic_DerivedUnitElement > > &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_DerivedUnitElement > > &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_DerivedUnitElement > const &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_DerivedUnitElement > &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_DerivedUnitElement > const &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_DerivedUnitElement > &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_DerivedUnitElement > const &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_DerivedUnitElement > &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_DerivedUnitElement > &":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_DerivedUnitElement > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfDerivedUnitElement_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfDerivedUnitElement
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfDerivedUnitElement_swigregister = _StepBasic.StepBasic_Array1OfDerivedUnitElement_swigregister
StepBasic_Array1OfDerivedUnitElement_swigregister(StepBasic_Array1OfDerivedUnitElement)

class StepBasic_Array1OfDocument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfDocument, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Document > >::iterator":
        return _StepBasic.StepBasic_Array1OfDocument_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Document > >::iterator":
        return _StepBasic.StepBasic_Array1OfDocument_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Document > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfDocument_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Document > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfDocument_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_Document > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfDocument_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfDocument_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfDocument_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfDocument_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfDocument_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfDocument_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfDocument_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfDocument_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfDocument') -> "NCollection_Array1< opencascade::handle< StepBasic_Document > > &":
        return _StepBasic.StepBasic_Array1OfDocument_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfDocument') -> "NCollection_Array1< opencascade::handle< StepBasic_Document > > &":
        return _StepBasic.StepBasic_Array1OfDocument_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_Document > > &":
        return _StepBasic.StepBasic_Array1OfDocument_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_Document > const &":
        return _StepBasic.StepBasic_Array1OfDocument_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_Document > &":
        return _StepBasic.StepBasic_Array1OfDocument_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_Document > const &":
        return _StepBasic.StepBasic_Array1OfDocument_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_Document > &":
        return _StepBasic.StepBasic_Array1OfDocument_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Document > const &":
        return _StepBasic.StepBasic_Array1OfDocument_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Document > &":
        return _StepBasic.StepBasic_Array1OfDocument_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_Document > &":
        return _StepBasic.StepBasic_Array1OfDocument___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_Document > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfDocument_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfDocument_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfDocument
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfDocument_swigregister = _StepBasic.StepBasic_Array1OfDocument_swigregister
StepBasic_Array1OfDocument_swigregister(StepBasic_Array1OfDocument)

class StepBasic_Array1OfNamedUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfNamedUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfNamedUnit, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_NamedUnit > >::iterator":
        return _StepBasic.StepBasic_Array1OfNamedUnit_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_NamedUnit > >::iterator":
        return _StepBasic.StepBasic_Array1OfNamedUnit_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_NamedUnit > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfNamedUnit_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_NamedUnit > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfNamedUnit_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfNamedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_NamedUnit > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfNamedUnit_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfNamedUnit_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfNamedUnit_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfNamedUnit') -> "NCollection_Array1< opencascade::handle< StepBasic_NamedUnit > > &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfNamedUnit') -> "NCollection_Array1< opencascade::handle< StepBasic_NamedUnit > > &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_NamedUnit > > &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_NamedUnit > const &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_NamedUnit > &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_NamedUnit > const &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_NamedUnit > &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_NamedUnit > const &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_NamedUnit > &":
        return _StepBasic.StepBasic_Array1OfNamedUnit_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_NamedUnit > &":
        return _StepBasic.StepBasic_Array1OfNamedUnit___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_NamedUnit > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfNamedUnit_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfNamedUnit_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfNamedUnit
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfNamedUnit_swigregister = _StepBasic.StepBasic_Array1OfNamedUnit_swigregister
StepBasic_Array1OfNamedUnit_swigregister(StepBasic_Array1OfNamedUnit)

class StepBasic_Array1OfOrganization(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfOrganization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfOrganization, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Organization > >::iterator":
        return _StepBasic.StepBasic_Array1OfOrganization_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Organization > >::iterator":
        return _StepBasic.StepBasic_Array1OfOrganization_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Organization > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfOrganization_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Organization > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfOrganization_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfOrganization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_Organization > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfOrganization_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfOrganization_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfOrganization_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfOrganization_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfOrganization_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfOrganization_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfOrganization_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfOrganization_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfOrganization') -> "NCollection_Array1< opencascade::handle< StepBasic_Organization > > &":
        return _StepBasic.StepBasic_Array1OfOrganization_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfOrganization') -> "NCollection_Array1< opencascade::handle< StepBasic_Organization > > &":
        return _StepBasic.StepBasic_Array1OfOrganization_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_Organization > > &":
        return _StepBasic.StepBasic_Array1OfOrganization_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_Organization > const &":
        return _StepBasic.StepBasic_Array1OfOrganization_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_Organization > &":
        return _StepBasic.StepBasic_Array1OfOrganization_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_Organization > const &":
        return _StepBasic.StepBasic_Array1OfOrganization_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_Organization > &":
        return _StepBasic.StepBasic_Array1OfOrganization_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Organization > const &":
        return _StepBasic.StepBasic_Array1OfOrganization_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Organization > &":
        return _StepBasic.StepBasic_Array1OfOrganization_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_Organization > &":
        return _StepBasic.StepBasic_Array1OfOrganization___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_Organization > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfOrganization_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfOrganization_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfOrganization
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfOrganization_swigregister = _StepBasic.StepBasic_Array1OfOrganization_swigregister
StepBasic_Array1OfOrganization_swigregister(StepBasic_Array1OfOrganization)

class StepBasic_Array1OfPerson(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfPerson, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfPerson, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Person > >::iterator":
        return _StepBasic.StepBasic_Array1OfPerson_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Person > >::iterator":
        return _StepBasic.StepBasic_Array1OfPerson_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Person > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfPerson_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Person > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfPerson_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfPerson(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_Person > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfPerson_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfPerson_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfPerson_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfPerson_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfPerson_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfPerson_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfPerson_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfPerson_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfPerson') -> "NCollection_Array1< opencascade::handle< StepBasic_Person > > &":
        return _StepBasic.StepBasic_Array1OfPerson_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfPerson') -> "NCollection_Array1< opencascade::handle< StepBasic_Person > > &":
        return _StepBasic.StepBasic_Array1OfPerson_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_Person > > &":
        return _StepBasic.StepBasic_Array1OfPerson_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_Person > const &":
        return _StepBasic.StepBasic_Array1OfPerson_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_Person > &":
        return _StepBasic.StepBasic_Array1OfPerson_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_Person > const &":
        return _StepBasic.StepBasic_Array1OfPerson_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_Person > &":
        return _StepBasic.StepBasic_Array1OfPerson_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Person > const &":
        return _StepBasic.StepBasic_Array1OfPerson_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Person > &":
        return _StepBasic.StepBasic_Array1OfPerson_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_Person > &":
        return _StepBasic.StepBasic_Array1OfPerson___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_Person > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfPerson_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfPerson_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfPerson
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfPerson_swigregister = _StepBasic.StepBasic_Array1OfPerson_swigregister
StepBasic_Array1OfPerson_swigregister(StepBasic_Array1OfPerson)

class StepBasic_Array1OfProduct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfProduct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfProduct, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Product > >::iterator":
        return _StepBasic.StepBasic_Array1OfProduct_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Product > >::iterator":
        return _StepBasic.StepBasic_Array1OfProduct_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Product > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfProduct_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_Product > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfProduct_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfProduct(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_Product > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfProduct_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProduct_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProduct_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProduct_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProduct_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProduct_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProduct_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProduct_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfProduct') -> "NCollection_Array1< opencascade::handle< StepBasic_Product > > &":
        return _StepBasic.StepBasic_Array1OfProduct_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfProduct') -> "NCollection_Array1< opencascade::handle< StepBasic_Product > > &":
        return _StepBasic.StepBasic_Array1OfProduct_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_Product > > &":
        return _StepBasic.StepBasic_Array1OfProduct_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_Product > const &":
        return _StepBasic.StepBasic_Array1OfProduct_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_Product > &":
        return _StepBasic.StepBasic_Array1OfProduct_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_Product > const &":
        return _StepBasic.StepBasic_Array1OfProduct_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_Product > &":
        return _StepBasic.StepBasic_Array1OfProduct_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Product > const &":
        return _StepBasic.StepBasic_Array1OfProduct_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_Product > &":
        return _StepBasic.StepBasic_Array1OfProduct_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_Product > &":
        return _StepBasic.StepBasic_Array1OfProduct___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_Product > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfProduct_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfProduct_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfProduct
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfProduct_swigregister = _StepBasic.StepBasic_Array1OfProduct_swigregister
StepBasic_Array1OfProduct_swigregister(StepBasic_Array1OfProduct)

class StepBasic_Array1OfProductContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfProductContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfProductContext, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductContext > >::iterator":
        return _StepBasic.StepBasic_Array1OfProductContext_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductContext > >::iterator":
        return _StepBasic.StepBasic_Array1OfProductContext_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductContext > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfProductContext_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductContext > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfProductContext_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfProductContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_ProductContext > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfProductContext_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProductContext_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProductContext_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProductContext_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProductContext_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProductContext_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProductContext_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProductContext_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfProductContext') -> "NCollection_Array1< opencascade::handle< StepBasic_ProductContext > > &":
        return _StepBasic.StepBasic_Array1OfProductContext_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfProductContext') -> "NCollection_Array1< opencascade::handle< StepBasic_ProductContext > > &":
        return _StepBasic.StepBasic_Array1OfProductContext_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductContext > > &":
        return _StepBasic.StepBasic_Array1OfProductContext_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_ProductContext > const &":
        return _StepBasic.StepBasic_Array1OfProductContext_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_ProductContext > &":
        return _StepBasic.StepBasic_Array1OfProductContext_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_ProductContext > const &":
        return _StepBasic.StepBasic_Array1OfProductContext_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_ProductContext > &":
        return _StepBasic.StepBasic_Array1OfProductContext_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_ProductContext > const &":
        return _StepBasic.StepBasic_Array1OfProductContext_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_ProductContext > &":
        return _StepBasic.StepBasic_Array1OfProductContext_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_ProductContext > &":
        return _StepBasic.StepBasic_Array1OfProductContext___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_ProductContext > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfProductContext_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfProductContext_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfProductContext
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfProductContext_swigregister = _StepBasic.StepBasic_Array1OfProductContext_swigregister
StepBasic_Array1OfProductContext_swigregister(StepBasic_Array1OfProductContext)

class StepBasic_Array1OfProductDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfProductDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfProductDefinition, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductDefinition > >::iterator":
        return _StepBasic.StepBasic_Array1OfProductDefinition_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductDefinition > >::iterator":
        return _StepBasic.StepBasic_Array1OfProductDefinition_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductDefinition > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfProductDefinition_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductDefinition > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfProductDefinition_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfProductDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_ProductDefinition > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProductDefinition_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProductDefinition_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfProductDefinition_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfProductDefinition') -> "NCollection_Array1< opencascade::handle< StepBasic_ProductDefinition > > &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfProductDefinition') -> "NCollection_Array1< opencascade::handle< StepBasic_ProductDefinition > > &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_ProductDefinition > > &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_ProductDefinition > const &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_ProductDefinition > &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_ProductDefinition > const &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_ProductDefinition > &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_ProductDefinition > const &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_ProductDefinition > &":
        return _StepBasic.StepBasic_Array1OfProductDefinition_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition > &":
        return _StepBasic.StepBasic_Array1OfProductDefinition___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_ProductDefinition > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfProductDefinition_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfProductDefinition_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfProductDefinition
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfProductDefinition_swigregister = _StepBasic.StepBasic_Array1OfProductDefinition_swigregister
StepBasic_Array1OfProductDefinition_swigregister(StepBasic_Array1OfProductDefinition)

class StepBasic_Array1OfUncertaintyMeasureWithUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Array1OfUncertaintyMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Array1OfUncertaintyMeasureWithUnit, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > >::iterator":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_begin(self)

    def end(self) -> "NCollection_Array1< opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > >::iterator":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_end(self)

    def cbegin(self) -> "NCollection_Array1< opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_cbegin(self)

    def cend(self) -> "NCollection_Array1< opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > >::const_iterator":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_cend(self)

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_Array1OfUncertaintyMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, theValue: 'opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Init(self, theValue)

    def Size(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Size(self)

    def Length(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Length(self)

    def IsEmpty(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_IsEmpty(self)

    def Lower(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Lower(self)

    def Upper(self) -> "Standard_Integer":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Upper(self)

    def IsDeletable(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_IsDeletable(self)

    def IsAllocated(self) -> "Standard_Boolean":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_IsAllocated(self)

    def Assign(self, theOther: 'StepBasic_Array1OfUncertaintyMeasureWithUnit') -> "NCollection_Array1< opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > > &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Assign(self, theOther)

    def Move(self, theOther: 'StepBasic_Array1OfUncertaintyMeasureWithUnit') -> "NCollection_Array1< opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > > &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Move(self, theOther)

    def Set(self, *args) -> "NCollection_Array1< opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > > &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Set(self, *args)

    def First(self) -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > const &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_First(self)

    def ChangeFirst(self) -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_ChangeFirst(self)

    def Last(self) -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > const &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Last(self)

    def ChangeLast(self) -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_ChangeLast(self)

    def Value(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > const &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Value(self, theIndex)

    def ChangeValue(self, theIndex: 'Standard_Integer const') -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_ChangeValue(self, theIndex)

    def __call__(self, *args) -> "opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > &":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit___call__(self, *args)

    def SetValue(self, theIndex: 'Standard_Integer const', theItem: 'opencascade::handle< StepBasic_UncertaintyMeasureWithUnit > const &') -> "void":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_SetValue(self, theIndex, theItem)

    def Resize(self, theLower: 'Standard_Integer const', theUpper: 'Standard_Integer const', theToCopyData: 'Standard_Boolean const') -> "void":
        return _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _StepBasic.delete_StepBasic_Array1OfUncertaintyMeasureWithUnit
    __del__ = lambda self: None

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next

StepBasic_Array1OfUncertaintyMeasureWithUnit_swigregister = _StepBasic.StepBasic_Array1OfUncertaintyMeasureWithUnit_swigregister
StepBasic_Array1OfUncertaintyMeasureWithUnit_swigregister(StepBasic_Array1OfUncertaintyMeasureWithUnit)

class StepBasic_Action(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Action, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Action, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Action(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChosenMethod(self, *args) -> "opencascade::handle< StepBasic_ActionMethod >":
        """
        Returns field chosenmethod.

        Returns
        -------
        opencascade::handle<StepBasic_ActionMethod>

        """
        return _StepBasic.StepBasic_Action_ChosenMethod(self, *args)


    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Action_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Action_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString
        aChosenMethod: StepBasic_ActionMethod

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Action_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Action_Name(self, *args)


    def SetChosenMethod(self, *args) -> "void":
        """
        Set field chosenmethod.

        Parameters
        ----------
        ChosenMethod: StepBasic_ActionMethod

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Action_SetChosenMethod(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Action_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Action_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Action_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Action
    __del__ = lambda self: None
StepBasic_Action_swigregister = _StepBasic.StepBasic_Action_swigregister
StepBasic_Action_swigregister(StepBasic_Action)

class StepBasic_ActionAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ActionAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ActionAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ActionAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedAction(self, *args) -> "opencascade::handle< StepBasic_Action >":
        """
        Returns field assignedaction.

        Returns
        -------
        opencascade::handle<StepBasic_Action>

        """
        return _StepBasic.StepBasic_ActionAssignment_AssignedAction(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAssignedAction: StepBasic_Action

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionAssignment_Init(self, *args)


    def SetAssignedAction(self, *args) -> "void":
        """
        Set field assignedaction.

        Parameters
        ----------
        AssignedAction: StepBasic_Action

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionAssignment_SetAssignedAction(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ActionAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ActionAssignment
    __del__ = lambda self: None
StepBasic_ActionAssignment_swigregister = _StepBasic.StepBasic_ActionAssignment_swigregister
StepBasic_ActionAssignment_swigregister(StepBasic_ActionAssignment)

class StepBasic_ActionMethod(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ActionMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ActionMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ActionMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Consequence(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field consequence.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ActionMethod_Consequence(self, *args)


    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ActionMethod_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_ActionMethod_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString
        aConsequence: TCollection_HAsciiString
        aPurpose: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionMethod_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ActionMethod_Name(self, *args)


    def Purpose(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field purpose.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ActionMethod_Purpose(self, *args)


    def SetConsequence(self, *args) -> "void":
        """
        Set field consequence.

        Parameters
        ----------
        Consequence: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionMethod_SetConsequence(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionMethod_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionMethod_SetName(self, *args)


    def SetPurpose(self, *args) -> "void":
        """
        Set field purpose.

        Parameters
        ----------
        Purpose: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionMethod_SetPurpose(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ActionMethod_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ActionMethod
    __del__ = lambda self: None
StepBasic_ActionMethod_swigregister = _StepBasic.StepBasic_ActionMethod_swigregister
StepBasic_ActionMethod_swigregister(StepBasic_ActionMethod)

class StepBasic_ActionRequestAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ActionRequestAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ActionRequestAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ActionRequestAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedActionRequest(self, *args) -> "opencascade::handle< StepBasic_VersionedActionRequest >":
        """
        Returns field assignedactionrequest.

        Returns
        -------
        opencascade::handle<StepBasic_VersionedActionRequest>

        """
        return _StepBasic.StepBasic_ActionRequestAssignment_AssignedActionRequest(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAssignedActionRequest: StepBasic_VersionedActionRequest

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionRequestAssignment_Init(self, *args)


    def SetAssignedActionRequest(self, *args) -> "void":
        """
        Set field assignedactionrequest.

        Parameters
        ----------
        AssignedActionRequest: StepBasic_VersionedActionRequest

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionRequestAssignment_SetAssignedActionRequest(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ActionRequestAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ActionRequestAssignment
    __del__ = lambda self: None
StepBasic_ActionRequestAssignment_swigregister = _StepBasic.StepBasic_ActionRequestAssignment_swigregister
StepBasic_ActionRequestAssignment_swigregister(StepBasic_ActionRequestAssignment)

class StepBasic_ActionRequestSolution(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ActionRequestSolution, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ActionRequestSolution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ActionRequestSolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aMethod: StepBasic_ActionMethod
        aRequest: StepBasic_VersionedActionRequest

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionRequestSolution_Init(self, *args)


    def Method(self, *args) -> "opencascade::handle< StepBasic_ActionMethod >":
        """
        Returns field method.

        Returns
        -------
        opencascade::handle<StepBasic_ActionMethod>

        """
        return _StepBasic.StepBasic_ActionRequestSolution_Method(self, *args)


    def Request(self, *args) -> "opencascade::handle< StepBasic_VersionedActionRequest >":
        """
        Returns field request.

        Returns
        -------
        opencascade::handle<StepBasic_VersionedActionRequest>

        """
        return _StepBasic.StepBasic_ActionRequestSolution_Request(self, *args)


    def SetMethod(self, *args) -> "void":
        """
        Set field method.

        Parameters
        ----------
        Method: StepBasic_ActionMethod

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionRequestSolution_SetMethod(self, *args)


    def SetRequest(self, *args) -> "void":
        """
        Set field request.

        Parameters
        ----------
        Request: StepBasic_VersionedActionRequest

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ActionRequestSolution_SetRequest(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ActionRequestSolution_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ActionRequestSolution
    __del__ = lambda self: None
StepBasic_ActionRequestSolution_swigregister = _StepBasic.StepBasic_ActionRequestSolution_swigregister
StepBasic_ActionRequestSolution_swigregister(StepBasic_ActionRequestSolution)

class StepBasic_Address(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Address, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Address, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a address.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Address(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Country(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_Country(self, *args)


    def ElectronicMailAddress(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_ElectronicMailAddress(self, *args)


    def FacsimileNumber(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_FacsimileNumber(self, *args)


    def HasCountry(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasCountry(self, *args)


    def HasElectronicMailAddress(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasElectronicMailAddress(self, *args)


    def HasFacsimileNumber(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasFacsimileNumber(self, *args)


    def HasInternalLocation(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasInternalLocation(self, *args)


    def HasPostalBox(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasPostalBox(self, *args)


    def HasPostalCode(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasPostalCode(self, *args)


    def HasRegion(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasRegion(self, *args)


    def HasStreet(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasStreet(self, *args)


    def HasStreetNumber(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasStreetNumber(self, *args)


    def HasTelephoneNumber(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasTelephoneNumber(self, *args)


    def HasTelexNumber(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasTelexNumber(self, *args)


    def HasTown(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Address_HasTown(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAinternalLocation: bool
        aInternalLocation: TCollection_HAsciiString
        hasAstreetNumber: bool
        aStreetNumber: TCollection_HAsciiString
        hasAstreet: bool
        aStreet: TCollection_HAsciiString
        hasApostalBox: bool
        aPostalBox: TCollection_HAsciiString
        hasAtown: bool
        aTown: TCollection_HAsciiString
        hasAregion: bool
        aRegion: TCollection_HAsciiString
        hasApostalCode: bool
        aPostalCode: TCollection_HAsciiString
        hasAcountry: bool
        aCountry: TCollection_HAsciiString
        hasAfacsimileNumber: bool
        aFacsimileNumber: TCollection_HAsciiString
        hasAtelephoneNumber: bool
        aTelephoneNumber: TCollection_HAsciiString
        hasAelectronicMailAddress: bool
        aElectronicMailAddress: TCollection_HAsciiString
        hasAtelexNumber: bool
        aTelexNumber: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_Init(self, *args)


    def InternalLocation(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_InternalLocation(self, *args)


    def PostalBox(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_PostalBox(self, *args)


    def PostalCode(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_PostalCode(self, *args)


    def Region(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_Region(self, *args)


    def SetCountry(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aCountry: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetCountry(self, *args)


    def SetElectronicMailAddress(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aElectronicMailAddress: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetElectronicMailAddress(self, *args)


    def SetFacsimileNumber(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFacsimileNumber: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetFacsimileNumber(self, *args)


    def SetInternalLocation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aInternalLocation: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetInternalLocation(self, *args)


    def SetPostalBox(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPostalBox: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetPostalBox(self, *args)


    def SetPostalCode(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPostalCode: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetPostalCode(self, *args)


    def SetRegion(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRegion: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetRegion(self, *args)


    def SetStreet(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStreet: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetStreet(self, *args)


    def SetStreetNumber(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStreetNumber: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetStreetNumber(self, *args)


    def SetTelephoneNumber(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTelephoneNumber: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetTelephoneNumber(self, *args)


    def SetTelexNumber(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTelexNumber: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetTelexNumber(self, *args)


    def SetTown(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTown: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_SetTown(self, *args)


    def Street(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_Street(self, *args)


    def StreetNumber(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_StreetNumber(self, *args)


    def TelephoneNumber(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_TelephoneNumber(self, *args)


    def TelexNumber(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_TelexNumber(self, *args)


    def Town(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Address_Town(self, *args)


    def UnSetCountry(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetCountry(self, *args)


    def UnSetElectronicMailAddress(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetElectronicMailAddress(self, *args)


    def UnSetFacsimileNumber(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetFacsimileNumber(self, *args)


    def UnSetInternalLocation(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetInternalLocation(self, *args)


    def UnSetPostalBox(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetPostalBox(self, *args)


    def UnSetPostalCode(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetPostalCode(self, *args)


    def UnSetRegion(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetRegion(self, *args)


    def UnSetStreet(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetStreet(self, *args)


    def UnSetStreetNumber(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetStreetNumber(self, *args)


    def UnSetTelephoneNumber(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetTelephoneNumber(self, *args)


    def UnSetTelexNumber(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetTelexNumber(self, *args)


    def UnSetTown(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Address_UnSetTown(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Address_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Address
    __del__ = lambda self: None
StepBasic_Address_swigregister = _StepBasic.StepBasic_Address_swigregister
StepBasic_Address_swigregister(StepBasic_Address)

class StepBasic_ApplicationContext(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApplicationContext, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApplicationContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a applicationcontext.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ApplicationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Application(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ApplicationContext_Application(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aApplication: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationContext_Init(self, *args)


    def SetApplication(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aApplication: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationContext_SetApplication(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApplicationContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApplicationContext
    __del__ = lambda self: None
StepBasic_ApplicationContext_swigregister = _StepBasic.StepBasic_ApplicationContext_swigregister
StepBasic_ApplicationContext_swigregister(StepBasic_ApplicationContext)

class StepBasic_ApplicationContextElement(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApplicationContextElement, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApplicationContextElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a applicationcontextelement.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ApplicationContextElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FrameOfReference(self, *args) -> "opencascade::handle< StepBasic_ApplicationContext >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_ApplicationContext>

        """
        return _StepBasic.StepBasic_ApplicationContextElement_FrameOfReference(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aFrameOfReference: StepBasic_ApplicationContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationContextElement_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ApplicationContextElement_Name(self, *args)


    def SetFrameOfReference(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFrameOfReference: StepBasic_ApplicationContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationContextElement_SetFrameOfReference(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationContextElement_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApplicationContextElement_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApplicationContextElement
    __del__ = lambda self: None
StepBasic_ApplicationContextElement_swigregister = _StepBasic.StepBasic_ApplicationContextElement_swigregister
StepBasic_ApplicationContextElement_swigregister(StepBasic_ApplicationContextElement)

class StepBasic_ApplicationProtocolDefinition(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApplicationProtocolDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApplicationProtocolDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a applicationprotocoldefinition.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ApplicationProtocolDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Application(self, *args) -> "opencascade::handle< StepBasic_ApplicationContext >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_ApplicationContext>

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_Application(self, *args)


    def ApplicationInterpretedModelSchemaName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_ApplicationInterpretedModelSchemaName(self, *args)


    def ApplicationProtocolYear(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_ApplicationProtocolYear(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStatus: TCollection_HAsciiString
        aApplicationInterpretedModelSchemaName: TCollection_HAsciiString
        aApplicationProtocolYear: int
        aApplication: StepBasic_ApplicationContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_Init(self, *args)


    def SetApplication(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aApplication: StepBasic_ApplicationContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplication(self, *args)


    def SetApplicationInterpretedModelSchemaName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aApplicationInterpretedModelSchemaName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplicationInterpretedModelSchemaName(self, *args)


    def SetApplicationProtocolYear(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aApplicationProtocolYear: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_SetApplicationProtocolYear(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStatus: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_SetStatus(self, *args)


    def Status(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ApplicationProtocolDefinition_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApplicationProtocolDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApplicationProtocolDefinition
    __del__ = lambda self: None
StepBasic_ApplicationProtocolDefinition_swigregister = _StepBasic.StepBasic_ApplicationProtocolDefinition_swigregister
StepBasic_ApplicationProtocolDefinition_swigregister(StepBasic_ApplicationProtocolDefinition)

class StepBasic_Approval(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Approval, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Approval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a approval.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Approval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStatus: StepBasic_ApprovalStatus
        aLevel: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Approval_Init(self, *args)


    def Level(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Approval_Level(self, *args)


    def SetLevel(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLevel: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Approval_SetLevel(self, *args)


    def SetStatus(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aStatus: StepBasic_ApprovalStatus

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Approval_SetStatus(self, *args)


    def Status(self, *args) -> "opencascade::handle< StepBasic_ApprovalStatus >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_ApprovalStatus>

        """
        return _StepBasic.StepBasic_Approval_Status(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Approval_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Approval
    __del__ = lambda self: None
StepBasic_Approval_swigregister = _StepBasic.StepBasic_Approval_swigregister
StepBasic_Approval_swigregister(StepBasic_Approval)

class StepBasic_ApprovalAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApprovalAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApprovalAssignment, name)
    __repr__ = _swig_repr

    def AssignedApproval(self, *args) -> "opencascade::handle< StepBasic_Approval >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Approval>

        """
        return _StepBasic.StepBasic_ApprovalAssignment_AssignedApproval(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedApproval: StepBasic_Approval

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalAssignment_Init(self, *args)


    def SetAssignedApproval(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedApproval: StepBasic_Approval

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalAssignment_SetAssignedApproval(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApprovalAssignment_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StepBasic.new_StepBasic_ApprovalAssignment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalAssignment
    __del__ = lambda self: None
StepBasic_ApprovalAssignment_swigregister = _StepBasic.StepBasic_ApprovalAssignment_swigregister
StepBasic_ApprovalAssignment_swigregister(StepBasic_ApprovalAssignment)

class StepBasic_ApprovalDateTime(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApprovalDateTime, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApprovalDateTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ApprovalDateTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DateTime(self, *args) -> "StepBasic_DateTimeSelect":
        """
        No available documentation.

        Returns
        -------
        StepBasic_DateTimeSelect

        """
        return _StepBasic.StepBasic_ApprovalDateTime_DateTime(self, *args)


    def DatedApproval(self, *args) -> "opencascade::handle< StepBasic_Approval >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Approval>

        """
        return _StepBasic.StepBasic_ApprovalDateTime_DatedApproval(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDateTime: StepBasic_DateTimeSelect
        aDatedApproval: StepBasic_Approval

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalDateTime_Init(self, *args)


    def SetDateTime(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDateTime: StepBasic_DateTimeSelect

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalDateTime_SetDateTime(self, *args)


    def SetDatedApproval(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDatedApproval: StepBasic_Approval

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalDateTime_SetDatedApproval(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApprovalDateTime_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalDateTime
    __del__ = lambda self: None
StepBasic_ApprovalDateTime_swigregister = _StepBasic.StepBasic_ApprovalDateTime_swigregister
StepBasic_ApprovalDateTime_swigregister(StepBasic_ApprovalDateTime)

class StepBasic_ApprovalPersonOrganization(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApprovalPersonOrganization, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApprovalPersonOrganization, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a approvalpersonorganization.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ApprovalPersonOrganization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AuthorizedApproval(self, *args) -> "opencascade::handle< StepBasic_Approval >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Approval>

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_AuthorizedApproval(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPersonOrganization: StepBasic_PersonOrganizationSelect
        aAuthorizedApproval: StepBasic_Approval
        aRole: StepBasic_ApprovalRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_Init(self, *args)


    def PersonOrganization(self, *args) -> "StepBasic_PersonOrganizationSelect":
        """
        No available documentation.

        Returns
        -------
        StepBasic_PersonOrganizationSelect

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_PersonOrganization(self, *args)


    def Role(self, *args) -> "opencascade::handle< StepBasic_ApprovalRole >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_ApprovalRole>

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_Role(self, *args)


    def SetAuthorizedApproval(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAuthorizedApproval: StepBasic_Approval

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_SetAuthorizedApproval(self, *args)


    def SetPersonOrganization(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPersonOrganization: StepBasic_PersonOrganizationSelect

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_SetPersonOrganization(self, *args)


    def SetRole(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRole: StepBasic_ApprovalRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalPersonOrganization_SetRole(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApprovalPersonOrganization_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalPersonOrganization
    __del__ = lambda self: None
StepBasic_ApprovalPersonOrganization_swigregister = _StepBasic.StepBasic_ApprovalPersonOrganization_swigregister
StepBasic_ApprovalPersonOrganization_swigregister(StepBasic_ApprovalPersonOrganization)

class StepBasic_ApprovalRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApprovalRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApprovalRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a approvalrelationship.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ApprovalRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ApprovalRelationship_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aRelatingApproval: StepBasic_Approval
        aRelatedApproval: StepBasic_Approval

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ApprovalRelationship_Name(self, *args)


    def RelatedApproval(self, *args) -> "opencascade::handle< StepBasic_Approval >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Approval>

        """
        return _StepBasic.StepBasic_ApprovalRelationship_RelatedApproval(self, *args)


    def RelatingApproval(self, *args) -> "opencascade::handle< StepBasic_Approval >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Approval>

        """
        return _StepBasic.StepBasic_ApprovalRelationship_RelatingApproval(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_SetName(self, *args)


    def SetRelatedApproval(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRelatedApproval: StepBasic_Approval

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_SetRelatedApproval(self, *args)


    def SetRelatingApproval(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRelatingApproval: StepBasic_Approval

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalRelationship_SetRelatingApproval(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApprovalRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalRelationship
    __del__ = lambda self: None
StepBasic_ApprovalRelationship_swigregister = _StepBasic.StepBasic_ApprovalRelationship_swigregister
StepBasic_ApprovalRelationship_swigregister(StepBasic_ApprovalRelationship)

class StepBasic_ApprovalRole(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApprovalRole, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApprovalRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a approvalrole.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ApprovalRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRole: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalRole_Init(self, *args)


    def Role(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ApprovalRole_Role(self, *args)


    def SetRole(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRole: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalRole_SetRole(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApprovalRole_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalRole
    __del__ = lambda self: None
StepBasic_ApprovalRole_swigregister = _StepBasic.StepBasic_ApprovalRole_swigregister
StepBasic_ApprovalRole_swigregister(StepBasic_ApprovalRole)

class StepBasic_ApprovalStatus(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ApprovalStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ApprovalStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a approvalstatus.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ApprovalStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalStatus_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ApprovalStatus_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ApprovalStatus_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ApprovalStatus_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ApprovalStatus
    __del__ = lambda self: None
StepBasic_ApprovalStatus_swigregister = _StepBasic.StepBasic_ApprovalStatus_swigregister
StepBasic_ApprovalStatus_swigregister(StepBasic_ApprovalStatus)

class StepBasic_Certification(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Certification, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Certification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Certification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPurpose: TCollection_HAsciiString
        aKind: StepBasic_CertificationType

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Certification_Init(self, *args)


    def Kind(self, *args) -> "opencascade::handle< StepBasic_CertificationType >":
        """
        Returns field kind.

        Returns
        -------
        opencascade::handle<StepBasic_CertificationType>

        """
        return _StepBasic.StepBasic_Certification_Kind(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Certification_Name(self, *args)


    def Purpose(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field purpose.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Certification_Purpose(self, *args)


    def SetKind(self, *args) -> "void":
        """
        Set field kind.

        Parameters
        ----------
        Kind: StepBasic_CertificationType

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Certification_SetKind(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Certification_SetName(self, *args)


    def SetPurpose(self, *args) -> "void":
        """
        Set field purpose.

        Parameters
        ----------
        Purpose: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Certification_SetPurpose(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Certification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Certification
    __del__ = lambda self: None
StepBasic_Certification_swigregister = _StepBasic.StepBasic_Certification_swigregister
StepBasic_Certification_swigregister(StepBasic_Certification)

class StepBasic_CertificationAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_CertificationAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_CertificationAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_CertificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedCertification(self, *args) -> "opencascade::handle< StepBasic_Certification >":
        """
        Returns field assignedcertification.

        Returns
        -------
        opencascade::handle<StepBasic_Certification>

        """
        return _StepBasic.StepBasic_CertificationAssignment_AssignedCertification(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAssignedCertification: StepBasic_Certification

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CertificationAssignment_Init(self, *args)


    def SetAssignedCertification(self, *args) -> "void":
        """
        Set field assignedcertification.

        Parameters
        ----------
        AssignedCertification: StepBasic_Certification

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CertificationAssignment_SetAssignedCertification(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_CertificationAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_CertificationAssignment
    __del__ = lambda self: None
StepBasic_CertificationAssignment_swigregister = _StepBasic.StepBasic_CertificationAssignment_swigregister
StepBasic_CertificationAssignment_swigregister(StepBasic_CertificationAssignment)

class StepBasic_CertificationType(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_CertificationType, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_CertificationType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_CertificationType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_CertificationType_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CertificationType_Init(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CertificationType_SetDescription(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_CertificationType_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_CertificationType
    __del__ = lambda self: None
StepBasic_CertificationType_swigregister = _StepBasic.StepBasic_CertificationType_swigregister
StepBasic_CertificationType_swigregister(StepBasic_CertificationType)

class StepBasic_CharacterizedObject(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_CharacterizedObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_CharacterizedObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_CharacterizedObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_CharacterizedObject_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_CharacterizedObject_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CharacterizedObject_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_CharacterizedObject_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CharacterizedObject_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CharacterizedObject_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_CharacterizedObject_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_CharacterizedObject
    __del__ = lambda self: None
StepBasic_CharacterizedObject_swigregister = _StepBasic.StepBasic_CharacterizedObject_swigregister
StepBasic_CharacterizedObject_swigregister(StepBasic_CharacterizedObject)

class StepBasic_Contract(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Contract, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Contract, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Contract(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPurpose: TCollection_HAsciiString
        aKind: StepBasic_ContractType

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Contract_Init(self, *args)


    def Kind(self, *args) -> "opencascade::handle< StepBasic_ContractType >":
        """
        Returns field kind.

        Returns
        -------
        opencascade::handle<StepBasic_ContractType>

        """
        return _StepBasic.StepBasic_Contract_Kind(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Contract_Name(self, *args)


    def Purpose(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field purpose.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Contract_Purpose(self, *args)


    def SetKind(self, *args) -> "void":
        """
        Set field kind.

        Parameters
        ----------
        Kind: StepBasic_ContractType

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Contract_SetKind(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Contract_SetName(self, *args)


    def SetPurpose(self, *args) -> "void":
        """
        Set field purpose.

        Parameters
        ----------
        Purpose: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Contract_SetPurpose(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Contract_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Contract
    __del__ = lambda self: None
StepBasic_Contract_swigregister = _StepBasic.StepBasic_Contract_swigregister
StepBasic_Contract_swigregister(StepBasic_Contract)

class StepBasic_ContractAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ContractAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ContractAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ContractAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedContract(self, *args) -> "opencascade::handle< StepBasic_Contract >":
        """
        Returns field assignedcontract.

        Returns
        -------
        opencascade::handle<StepBasic_Contract>

        """
        return _StepBasic.StepBasic_ContractAssignment_AssignedContract(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAssignedContract: StepBasic_Contract

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ContractAssignment_Init(self, *args)


    def SetAssignedContract(self, *args) -> "void":
        """
        Set field assignedcontract.

        Parameters
        ----------
        AssignedContract: StepBasic_Contract

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ContractAssignment_SetAssignedContract(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ContractAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ContractAssignment
    __del__ = lambda self: None
StepBasic_ContractAssignment_swigregister = _StepBasic.StepBasic_ContractAssignment_swigregister
StepBasic_ContractAssignment_swigregister(StepBasic_ContractAssignment)

class StepBasic_ContractType(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ContractType, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ContractType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ContractType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ContractType_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ContractType_Init(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ContractType_SetDescription(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ContractType_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ContractType
    __del__ = lambda self: None
StepBasic_ContractType_swigregister = _StepBasic.StepBasic_ContractType_swigregister
StepBasic_ContractType_swigregister(StepBasic_ContractType)

class StepBasic_CoordinatedUniversalTimeOffset(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_CoordinatedUniversalTimeOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_CoordinatedUniversalTimeOffset, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a coordinateduniversaltimeoffset.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_CoordinatedUniversalTimeOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def HasMinuteOffset(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_HasMinuteOffset(self, *args)


    def HourOffset(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_HourOffset(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aHourOffset: int
        hasAminuteOffset: bool
        aMinuteOffset: int
        aSense: StepBasic_AheadOrBehind

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_Init(self, *args)


    def MinuteOffset(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_MinuteOffset(self, *args)


    def Sense(self, *args) -> "StepBasic_AheadOrBehind":
        """
        No available documentation.

        Returns
        -------
        StepBasic_AheadOrBehind

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_Sense(self, *args)


    def SetHourOffset(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aHourOffset: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetHourOffset(self, *args)


    def SetMinuteOffset(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMinuteOffset: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetMinuteOffset(self, *args)


    def SetSense(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSense: StepBasic_AheadOrBehind

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_SetSense(self, *args)


    def UnSetMinuteOffset(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_UnSetMinuteOffset(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_CoordinatedUniversalTimeOffset_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_CoordinatedUniversalTimeOffset
    __del__ = lambda self: None
StepBasic_CoordinatedUniversalTimeOffset_swigregister = _StepBasic.StepBasic_CoordinatedUniversalTimeOffset_swigregister
StepBasic_CoordinatedUniversalTimeOffset_swigregister(StepBasic_CoordinatedUniversalTimeOffset)

class StepBasic_Date(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Date, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Date, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a date.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Date(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aYearComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Date_Init(self, *args)


    def SetYearComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aYearComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Date_SetYearComponent(self, *args)


    def YearComponent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_Date_YearComponent(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Date_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Date
    __del__ = lambda self: None
StepBasic_Date_swigregister = _StepBasic.StepBasic_Date_swigregister
StepBasic_Date_swigregister(StepBasic_Date)

class StepBasic_DateAndTime(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DateAndTime, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DateAndTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a dateandtime.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DateAndTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DateComponent(self, *args) -> "opencascade::handle< StepBasic_Date >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Date>

        """
        return _StepBasic.StepBasic_DateAndTime_DateComponent(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDateComponent: StepBasic_Date
        aTimeComponent: StepBasic_LocalTime

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAndTime_Init(self, *args)


    def SetDateComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDateComponent: StepBasic_Date

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAndTime_SetDateComponent(self, *args)


    def SetTimeComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTimeComponent: StepBasic_LocalTime

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAndTime_SetTimeComponent(self, *args)


    def TimeComponent(self, *args) -> "opencascade::handle< StepBasic_LocalTime >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_LocalTime>

        """
        return _StepBasic.StepBasic_DateAndTime_TimeComponent(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DateAndTime_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateAndTime
    __del__ = lambda self: None
StepBasic_DateAndTime_swigregister = _StepBasic.StepBasic_DateAndTime_swigregister
StepBasic_DateAndTime_swigregister(StepBasic_DateAndTime)

class StepBasic_DateAndTimeAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DateAndTimeAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DateAndTimeAssignment, name)
    __repr__ = _swig_repr

    def AssignedDateAndTime(self, *args) -> "opencascade::handle< StepBasic_DateAndTime >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_DateAndTime>

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_AssignedDateAndTime(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedDateAndTime: StepBasic_DateAndTime
        aRole: StepBasic_DateTimeRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_Init(self, *args)


    def Role(self, *args) -> "opencascade::handle< StepBasic_DateTimeRole >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_DateTimeRole>

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_Role(self, *args)


    def SetAssignedDateAndTime(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedDateAndTime: StepBasic_DateAndTime

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_SetAssignedDateAndTime(self, *args)


    def SetRole(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRole: StepBasic_DateTimeRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAndTimeAssignment_SetRole(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DateAndTimeAssignment_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StepBasic.new_StepBasic_DateAndTimeAssignment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepBasic.delete_StepBasic_DateAndTimeAssignment
    __del__ = lambda self: None
StepBasic_DateAndTimeAssignment_swigregister = _StepBasic.StepBasic_DateAndTimeAssignment_swigregister
StepBasic_DateAndTimeAssignment_swigregister(StepBasic_DateAndTimeAssignment)

class StepBasic_DateAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DateAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DateAssignment, name)
    __repr__ = _swig_repr

    def AssignedDate(self, *args) -> "opencascade::handle< StepBasic_Date >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Date>

        """
        return _StepBasic.StepBasic_DateAssignment_AssignedDate(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedDate: StepBasic_Date
        aRole: StepBasic_DateRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAssignment_Init(self, *args)


    def Role(self, *args) -> "opencascade::handle< StepBasic_DateRole >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_DateRole>

        """
        return _StepBasic.StepBasic_DateAssignment_Role(self, *args)


    def SetAssignedDate(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedDate: StepBasic_Date

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAssignment_SetAssignedDate(self, *args)


    def SetRole(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRole: StepBasic_DateRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateAssignment_SetRole(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DateAssignment_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StepBasic.new_StepBasic_DateAssignment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepBasic.delete_StepBasic_DateAssignment
    __del__ = lambda self: None
StepBasic_DateAssignment_swigregister = _StepBasic.StepBasic_DateAssignment_swigregister
StepBasic_DateAssignment_swigregister(StepBasic_DateAssignment)

class StepBasic_DateRole(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DateRole, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DateRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a daterole.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DateRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateRole_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DateRole_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateRole_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DateRole_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateRole
    __del__ = lambda self: None
StepBasic_DateRole_swigregister = _StepBasic.StepBasic_DateRole_swigregister
StepBasic_DateRole_swigregister(StepBasic_DateRole)

class StepBasic_DateTimeRole(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DateTimeRole, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DateTimeRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a datetimerole.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DateTimeRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateTimeRole_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DateTimeRole_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DateTimeRole_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DateTimeRole_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateTimeRole
    __del__ = lambda self: None
StepBasic_DateTimeRole_swigregister = _StepBasic.StepBasic_DateTimeRole_swigregister
StepBasic_DateTimeRole_swigregister(StepBasic_DateTimeRole)

class StepBasic_DateTimeSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DateTimeSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DateTimeSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a datetimeselect selecttype.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DateTimeSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Date(self, *args) -> "opencascade::handle< StepBasic_Date >":
        """
        Returns value as a date (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Date>

        """
        return _StepBasic.StepBasic_DateTimeSelect_Date(self, *args)


    def DateAndTime(self, *args) -> "opencascade::handle< StepBasic_DateAndTime >":
        """
        Returns value as a dateandtime (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_DateAndTime>

        """
        return _StepBasic.StepBasic_DateTimeSelect_DateAndTime(self, *args)


    def LocalTime(self, *args) -> "opencascade::handle< StepBasic_LocalTime >":
        """
        Returns value as a localtime (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_LocalTime>

        """
        return _StepBasic.StepBasic_DateTimeSelect_LocalTime(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DateTimeSelect
    __del__ = lambda self: None
StepBasic_DateTimeSelect_swigregister = _StepBasic.StepBasic_DateTimeSelect_swigregister
StepBasic_DateTimeSelect_swigregister(StepBasic_DateTimeSelect)

class StepBasic_DerivedUnit(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DerivedUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DerivedUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DerivedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Elements(self, *args) -> "opencascade::handle< StepBasic_HArray1OfDerivedUnitElement >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_HArray1OfDerivedUnitElement>

        """
        return _StepBasic.StepBasic_DerivedUnit_Elements(self, *args)


    def ElementsValue(self, *args) -> "opencascade::handle< StepBasic_DerivedUnitElement >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepBasic_DerivedUnitElement>

        """
        return _StepBasic.StepBasic_DerivedUnit_ElementsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        elements: StepBasic_HArray1OfDerivedUnitElement

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DerivedUnit_Init(self, *args)


    def NbElements(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_DerivedUnit_NbElements(self, *args)


    def SetElements(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        elements: StepBasic_HArray1OfDerivedUnitElement

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DerivedUnit_SetElements(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DerivedUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DerivedUnit
    __del__ = lambda self: None
StepBasic_DerivedUnit_swigregister = _StepBasic.StepBasic_DerivedUnit_swigregister
StepBasic_DerivedUnit_swigregister(StepBasic_DerivedUnit)

class StepBasic_DerivedUnitElement(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DerivedUnitElement, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DerivedUnitElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DerivedUnitElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_DerivedUnitElement_Exponent(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aUnit: StepBasic_NamedUnit
        aExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DerivedUnitElement_Init(self, *args)


    def SetExponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DerivedUnitElement_SetExponent(self, *args)


    def SetUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aUnit: StepBasic_NamedUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DerivedUnitElement_SetUnit(self, *args)


    def Unit(self, *args) -> "opencascade::handle< StepBasic_NamedUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_NamedUnit>

        """
        return _StepBasic.StepBasic_DerivedUnitElement_Unit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DerivedUnitElement_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DerivedUnitElement
    __del__ = lambda self: None
StepBasic_DerivedUnitElement_swigregister = _StepBasic.StepBasic_DerivedUnitElement_swigregister
StepBasic_DerivedUnitElement_swigregister(StepBasic_DerivedUnitElement)

class StepBasic_DimensionalExponents(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DimensionalExponents, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DimensionalExponents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a dimensionalexponents.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DimensionalExponents(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AmountOfSubstanceExponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_DimensionalExponents_AmountOfSubstanceExponent(self, *args)


    def ElectricCurrentExponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_DimensionalExponents_ElectricCurrentExponent(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLengthExponent: float
        aMassExponent: float
        aTimeExponent: float
        aElectricCurrentExponent: float
        aThermodynamicTemperatureExponent: float
        aAmountOfSubstanceExponent: float
        aLuminousIntensityExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DimensionalExponents_Init(self, *args)


    def LengthExponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_DimensionalExponents_LengthExponent(self, *args)


    def LuminousIntensityExponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_DimensionalExponents_LuminousIntensityExponent(self, *args)


    def MassExponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_DimensionalExponents_MassExponent(self, *args)


    def SetAmountOfSubstanceExponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAmountOfSubstanceExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetAmountOfSubstanceExponent(self, *args)


    def SetElectricCurrentExponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aElectricCurrentExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetElectricCurrentExponent(self, *args)


    def SetLengthExponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLengthExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetLengthExponent(self, *args)


    def SetLuminousIntensityExponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLuminousIntensityExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetLuminousIntensityExponent(self, *args)


    def SetMassExponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMassExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetMassExponent(self, *args)


    def SetThermodynamicTemperatureExponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aThermodynamicTemperatureExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetThermodynamicTemperatureExponent(self, *args)


    def SetTimeExponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTimeExponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DimensionalExponents_SetTimeExponent(self, *args)


    def ThermodynamicTemperatureExponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_DimensionalExponents_ThermodynamicTemperatureExponent(self, *args)


    def TimeExponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_DimensionalExponents_TimeExponent(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DimensionalExponents_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DimensionalExponents
    __del__ = lambda self: None
StepBasic_DimensionalExponents_swigregister = _StepBasic.StepBasic_DimensionalExponents_swigregister
StepBasic_DimensionalExponents_swigregister(StepBasic_DimensionalExponents)

class StepBasic_Document(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Document, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Document, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Document(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Document_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Document_HasDescription(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field id.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Document_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString
        aKind: StepBasic_DocumentType

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Document_Init(self, *args)


    def Kind(self, *args) -> "opencascade::handle< StepBasic_DocumentType >":
        """
        Returns field kind.

        Returns
        -------
        opencascade::handle<StepBasic_DocumentType>

        """
        return _StepBasic.StepBasic_Document_Kind(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Document_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Document_SetDescription(self, *args)


    def SetId(self, *args) -> "void":
        """
        Set field id.

        Parameters
        ----------
        Id: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Document_SetId(self, *args)


    def SetKind(self, *args) -> "void":
        """
        Set field kind.

        Parameters
        ----------
        Kind: StepBasic_DocumentType

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Document_SetKind(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Document_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Document_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Document
    __del__ = lambda self: None
StepBasic_Document_swigregister = _StepBasic.StepBasic_Document_swigregister
StepBasic_Document_swigregister(StepBasic_Document)

class StepBasic_DocumentProductAssociation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DocumentProductAssociation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DocumentProductAssociation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DocumentProductAssociation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString
        aRelatingDocument: StepBasic_Document
        aRelatedProduct: StepBasic_ProductOrFormationOrDefinition

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_Name(self, *args)


    def RelatedProduct(self, *args) -> "StepBasic_ProductOrFormationOrDefinition":
        """
        Returns field relatedproduct.

        Returns
        -------
        StepBasic_ProductOrFormationOrDefinition

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_RelatedProduct(self, *args)


    def RelatingDocument(self, *args) -> "opencascade::handle< StepBasic_Document >":
        """
        Returns field relatingdocument.

        Returns
        -------
        opencascade::handle<StepBasic_Document>

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_RelatingDocument(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_SetName(self, *args)


    def SetRelatedProduct(self, *args) -> "void":
        """
        Set field relatedproduct.

        Parameters
        ----------
        RelatedProduct: StepBasic_ProductOrFormationOrDefinition

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_SetRelatedProduct(self, *args)


    def SetRelatingDocument(self, *args) -> "void":
        """
        Set field relatingdocument.

        Parameters
        ----------
        RelatingDocument: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentProductAssociation_SetRelatingDocument(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DocumentProductAssociation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentProductAssociation
    __del__ = lambda self: None
StepBasic_DocumentProductAssociation_swigregister = _StepBasic.StepBasic_DocumentProductAssociation_swigregister
StepBasic_DocumentProductAssociation_swigregister(StepBasic_DocumentProductAssociation)

class StepBasic_DocumentReference(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DocumentReference, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DocumentReference, name)
    __repr__ = _swig_repr

    def AssignedDocument(self, *args) -> "opencascade::handle< StepBasic_Document >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Document>

        """
        return _StepBasic.StepBasic_DocumentReference_AssignedDocument(self, *args)


    def Init0(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedDocument: StepBasic_Document
        aSource: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentReference_Init0(self, *args)


    def SetAssignedDocument(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedDocument: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentReference_SetAssignedDocument(self, *args)


    def SetSource(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSource: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentReference_SetSource(self, *args)


    def Source(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentReference_Source(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DocumentReference_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StepBasic.new_StepBasic_DocumentReference()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentReference
    __del__ = lambda self: None
StepBasic_DocumentReference_swigregister = _StepBasic.StepBasic_DocumentReference_swigregister
StepBasic_DocumentReference_swigregister(StepBasic_DocumentReference)

class StepBasic_DocumentRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DocumentRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DocumentRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DocumentRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentRelationship_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aRelating: StepBasic_Document
        aRelated: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentRelationship_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentRelationship_Name(self, *args)


    def RelatedDocument(self, *args) -> "opencascade::handle< StepBasic_Document >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Document>

        """
        return _StepBasic.StepBasic_DocumentRelationship_RelatedDocument(self, *args)


    def RelatingDocument(self, *args) -> "opencascade::handle< StepBasic_Document >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Document>

        """
        return _StepBasic.StepBasic_DocumentRelationship_RelatingDocument(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentRelationship_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentRelationship_SetName(self, *args)


    def SetRelatedDocument(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRelated: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentRelationship_SetRelatedDocument(self, *args)


    def SetRelatingDocument(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRelating: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentRelationship_SetRelatingDocument(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DocumentRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentRelationship
    __del__ = lambda self: None
StepBasic_DocumentRelationship_swigregister = _StepBasic.StepBasic_DocumentRelationship_swigregister
StepBasic_DocumentRelationship_swigregister(StepBasic_DocumentRelationship)

class StepBasic_DocumentRepresentationType(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DocumentRepresentationType, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DocumentRepresentationType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DocumentRepresentationType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aRepresentedDocument: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_Name(self, *args)


    def RepresentedDocument(self, *args) -> "opencascade::handle< StepBasic_Document >":
        """
        Returns field representeddocument.

        Returns
        -------
        opencascade::handle<StepBasic_Document>

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_RepresentedDocument(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_SetName(self, *args)


    def SetRepresentedDocument(self, *args) -> "void":
        """
        Set field representeddocument.

        Parameters
        ----------
        RepresentedDocument: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentRepresentationType_SetRepresentedDocument(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DocumentRepresentationType_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentRepresentationType
    __del__ = lambda self: None
StepBasic_DocumentRepresentationType_swigregister = _StepBasic.StepBasic_DocumentRepresentationType_swigregister
StepBasic_DocumentRepresentationType_swigregister(StepBasic_DocumentRepresentationType)

class StepBasic_DocumentType(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DocumentType, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DocumentType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DocumentType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        apdt: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentType_Init(self, *args)


    def ProductDataType(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentType_ProductDataType(self, *args)


    def SetProductDataType(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        apdt: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentType_SetProductDataType(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DocumentType_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentType
    __del__ = lambda self: None
StepBasic_DocumentType_swigregister = _StepBasic.StepBasic_DocumentType_swigregister
StepBasic_DocumentType_swigregister(StepBasic_DocumentType)

class StepBasic_DocumentUsageConstraint(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DocumentUsageConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DocumentUsageConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DocumentUsageConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSource: StepBasic_Document
        ase: TCollection_HAsciiString
        asev: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_Init(self, *args)


    def SetSource(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSource: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SetSource(self, *args)


    def SetSubjectElement(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ase: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SetSubjectElement(self, *args)


    def SetSubjectElementValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        asev: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SetSubjectElementValue(self, *args)


    def Source(self, *args) -> "opencascade::handle< StepBasic_Document >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Document>

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_Source(self, *args)


    def SubjectElement(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SubjectElement(self, *args)


    def SubjectElementValue(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_DocumentUsageConstraint_SubjectElementValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DocumentUsageConstraint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentUsageConstraint
    __del__ = lambda self: None
StepBasic_DocumentUsageConstraint_swigregister = _StepBasic.StepBasic_DocumentUsageConstraint_swigregister
StepBasic_DocumentUsageConstraint_swigregister(StepBasic_DocumentUsageConstraint)

class StepBasic_Effectivity(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Effectivity, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Effectivity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Effectivity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Effectivity_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aid: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Effectivity_Init(self, *args)


    def SetId(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aid: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Effectivity_SetId(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Effectivity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Effectivity
    __del__ = lambda self: None
StepBasic_Effectivity_swigregister = _StepBasic.StepBasic_Effectivity_swigregister
StepBasic_Effectivity_swigregister(StepBasic_Effectivity)

class StepBasic_EffectivityAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_EffectivityAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_EffectivityAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_EffectivityAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedEffectivity(self, *args) -> "opencascade::handle< StepBasic_Effectivity >":
        """
        Returns field assignedeffectivity.

        Returns
        -------
        opencascade::handle<StepBasic_Effectivity>

        """
        return _StepBasic.StepBasic_EffectivityAssignment_AssignedEffectivity(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAssignedEffectivity: StepBasic_Effectivity

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_EffectivityAssignment_Init(self, *args)


    def SetAssignedEffectivity(self, *args) -> "void":
        """
        Set field assignedeffectivity.

        Parameters
        ----------
        AssignedEffectivity: StepBasic_Effectivity

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_EffectivityAssignment_SetAssignedEffectivity(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_EffectivityAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_EffectivityAssignment
    __del__ = lambda self: None
StepBasic_EffectivityAssignment_swigregister = _StepBasic.StepBasic_EffectivityAssignment_swigregister
StepBasic_EffectivityAssignment_swigregister(StepBasic_EffectivityAssignment)

class StepBasic_EulerAngles(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_EulerAngles, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_EulerAngles, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_EulerAngles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Angles(self, *args) -> "opencascade::handle< TColStd_HArray1OfReal >":
        """
        Returns field angles.

        Returns
        -------
        opencascade::handle<TColStd_HArray1OfReal>

        """
        return _StepBasic.StepBasic_EulerAngles_Angles(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAngles: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_EulerAngles_Init(self, *args)


    def SetAngles(self, *args) -> "void":
        """
        Set field angles.

        Parameters
        ----------
        Angles: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_EulerAngles_SetAngles(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_EulerAngles_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_EulerAngles
    __del__ = lambda self: None
StepBasic_EulerAngles_swigregister = _StepBasic.StepBasic_EulerAngles_swigregister
StepBasic_EulerAngles_swigregister(StepBasic_EulerAngles)

class StepBasic_ExternalSource(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ExternalSource, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ExternalSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ExternalSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aSourceId: StepBasic_SourceItem

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ExternalSource_Init(self, *args)


    def SetSourceId(self, *args) -> "void":
        """
        Set field sourceid.

        Parameters
        ----------
        SourceId: StepBasic_SourceItem

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ExternalSource_SetSourceId(self, *args)


    def SourceId(self, *args) -> "StepBasic_SourceItem":
        """
        Returns field sourceid.

        Returns
        -------
        StepBasic_SourceItem

        """
        return _StepBasic.StepBasic_ExternalSource_SourceId(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ExternalSource_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ExternalSource
    __del__ = lambda self: None
StepBasic_ExternalSource_swigregister = _StepBasic.StepBasic_ExternalSource_swigregister
StepBasic_ExternalSource_swigregister(StepBasic_ExternalSource)

class StepBasic_ExternallyDefinedItem(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ExternallyDefinedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ExternallyDefinedItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ExternallyDefinedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aItemId: StepBasic_SourceItem
        aSource: StepBasic_ExternalSource

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_Init(self, *args)


    def ItemId(self, *args) -> "StepBasic_SourceItem":
        """
        Returns field itemid.

        Returns
        -------
        StepBasic_SourceItem

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_ItemId(self, *args)


    def SetItemId(self, *args) -> "void":
        """
        Set field itemid.

        Parameters
        ----------
        ItemId: StepBasic_SourceItem

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_SetItemId(self, *args)


    def SetSource(self, *args) -> "void":
        """
        Set field source.

        Parameters
        ----------
        Source: StepBasic_ExternalSource

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_SetSource(self, *args)


    def Source(self, *args) -> "opencascade::handle< StepBasic_ExternalSource >":
        """
        Returns field source.

        Returns
        -------
        opencascade::handle<StepBasic_ExternalSource>

        """
        return _StepBasic.StepBasic_ExternallyDefinedItem_Source(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ExternallyDefinedItem_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ExternallyDefinedItem
    __del__ = lambda self: None
StepBasic_ExternallyDefinedItem_swigregister = _StepBasic.StepBasic_ExternallyDefinedItem_swigregister
StepBasic_ExternallyDefinedItem_swigregister(StepBasic_ExternallyDefinedItem)

class StepBasic_GeneralProperty(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_GeneralProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_GeneralProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_GeneralProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_GeneralProperty_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_GeneralProperty_HasDescription(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field id.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_GeneralProperty_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GeneralProperty_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_GeneralProperty_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GeneralProperty_SetDescription(self, *args)


    def SetId(self, *args) -> "void":
        """
        Set field id.

        Parameters
        ----------
        Id: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GeneralProperty_SetId(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GeneralProperty_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_GeneralProperty_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_GeneralProperty
    __del__ = lambda self: None
StepBasic_GeneralProperty_swigregister = _StepBasic.StepBasic_GeneralProperty_swigregister
StepBasic_GeneralProperty_swigregister(StepBasic_GeneralProperty)

class StepBasic_Group(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Group, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Group, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Group_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Group_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Group_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Group_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Group_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Group_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Group_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Group
    __del__ = lambda self: None
StepBasic_Group_swigregister = _StepBasic.StepBasic_Group_swigregister
StepBasic_Group_swigregister(StepBasic_Group)

class StepBasic_GroupAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_GroupAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_GroupAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_GroupAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedGroup(self, *args) -> "opencascade::handle< StepBasic_Group >":
        """
        Returns field assignedgroup.

        Returns
        -------
        opencascade::handle<StepBasic_Group>

        """
        return _StepBasic.StepBasic_GroupAssignment_AssignedGroup(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAssignedGroup: StepBasic_Group

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GroupAssignment_Init(self, *args)


    def SetAssignedGroup(self, *args) -> "void":
        """
        Set field assignedgroup.

        Parameters
        ----------
        AssignedGroup: StepBasic_Group

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GroupAssignment_SetAssignedGroup(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_GroupAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_GroupAssignment
    __del__ = lambda self: None
StepBasic_GroupAssignment_swigregister = _StepBasic.StepBasic_GroupAssignment_swigregister
StepBasic_GroupAssignment_swigregister(StepBasic_GroupAssignment)

class StepBasic_GroupRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_GroupRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_GroupRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_GroupRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_GroupRelationship_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_GroupRelationship_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString
        aRelatingGroup: StepBasic_Group
        aRelatedGroup: StepBasic_Group

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GroupRelationship_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_GroupRelationship_Name(self, *args)


    def RelatedGroup(self, *args) -> "opencascade::handle< StepBasic_Group >":
        """
        Returns field relatedgroup.

        Returns
        -------
        opencascade::handle<StepBasic_Group>

        """
        return _StepBasic.StepBasic_GroupRelationship_RelatedGroup(self, *args)


    def RelatingGroup(self, *args) -> "opencascade::handle< StepBasic_Group >":
        """
        Returns field relatinggroup.

        Returns
        -------
        opencascade::handle<StepBasic_Group>

        """
        return _StepBasic.StepBasic_GroupRelationship_RelatingGroup(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GroupRelationship_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GroupRelationship_SetName(self, *args)


    def SetRelatedGroup(self, *args) -> "void":
        """
        Set field relatedgroup.

        Parameters
        ----------
        RelatedGroup: StepBasic_Group

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GroupRelationship_SetRelatedGroup(self, *args)


    def SetRelatingGroup(self, *args) -> "void":
        """
        Set field relatinggroup.

        Parameters
        ----------
        RelatingGroup: StepBasic_Group

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_GroupRelationship_SetRelatingGroup(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_GroupRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_GroupRelationship
    __del__ = lambda self: None
StepBasic_GroupRelationship_swigregister = _StepBasic.StepBasic_GroupRelationship_swigregister
StepBasic_GroupRelationship_swigregister(StepBasic_GroupRelationship)

class StepBasic_IdentificationAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_IdentificationAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_IdentificationAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_IdentificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedId(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field assignedid.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_IdentificationAssignment_AssignedId(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAssignedId: TCollection_HAsciiString
        aRole: StepBasic_IdentificationRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_IdentificationAssignment_Init(self, *args)


    def Role(self, *args) -> "opencascade::handle< StepBasic_IdentificationRole >":
        """
        Returns field role.

        Returns
        -------
        opencascade::handle<StepBasic_IdentificationRole>

        """
        return _StepBasic.StepBasic_IdentificationAssignment_Role(self, *args)


    def SetAssignedId(self, *args) -> "void":
        """
        Set field assignedid.

        Parameters
        ----------
        AssignedId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_IdentificationAssignment_SetAssignedId(self, *args)


    def SetRole(self, *args) -> "void":
        """
        Set field role.

        Parameters
        ----------
        Role: StepBasic_IdentificationRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_IdentificationAssignment_SetRole(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_IdentificationAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_IdentificationAssignment
    __del__ = lambda self: None
StepBasic_IdentificationAssignment_swigregister = _StepBasic.StepBasic_IdentificationAssignment_swigregister
StepBasic_IdentificationAssignment_swigregister(StepBasic_IdentificationAssignment)

class StepBasic_IdentificationRole(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_IdentificationRole, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_IdentificationRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_IdentificationRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_IdentificationRole_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_IdentificationRole_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_IdentificationRole_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_IdentificationRole_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_IdentificationRole_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_IdentificationRole_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_IdentificationRole_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_IdentificationRole
    __del__ = lambda self: None
StepBasic_IdentificationRole_swigregister = _StepBasic.StepBasic_IdentificationRole_swigregister
StepBasic_IdentificationRole_swigregister(StepBasic_IdentificationRole)

class StepBasic_LocalTime(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_LocalTime, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_LocalTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a localtime.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_LocalTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def HasMinuteComponent(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_LocalTime_HasMinuteComponent(self, *args)


    def HasSecondComponent(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_LocalTime_HasSecondComponent(self, *args)


    def HourComponent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_LocalTime_HourComponent(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aHourComponent: int
        hasAminuteComponent: bool
        aMinuteComponent: int
        hasAsecondComponent: bool
        aSecondComponent: float
        aZone: StepBasic_CoordinatedUniversalTimeOffset

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_LocalTime_Init(self, *args)


    def MinuteComponent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_LocalTime_MinuteComponent(self, *args)


    def SecondComponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_LocalTime_SecondComponent(self, *args)


    def SetHourComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aHourComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_LocalTime_SetHourComponent(self, *args)


    def SetMinuteComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMinuteComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_LocalTime_SetMinuteComponent(self, *args)


    def SetSecondComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSecondComponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_LocalTime_SetSecondComponent(self, *args)


    def SetZone(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aZone: StepBasic_CoordinatedUniversalTimeOffset

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_LocalTime_SetZone(self, *args)


    def UnSetMinuteComponent(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_LocalTime_UnSetMinuteComponent(self, *args)


    def UnSetSecondComponent(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_LocalTime_UnSetSecondComponent(self, *args)


    def Zone(self, *args) -> "opencascade::handle< StepBasic_CoordinatedUniversalTimeOffset >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_CoordinatedUniversalTimeOffset>

        """
        return _StepBasic.StepBasic_LocalTime_Zone(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_LocalTime_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_LocalTime
    __del__ = lambda self: None
StepBasic_LocalTime_swigregister = _StepBasic.StepBasic_LocalTime_swigregister
StepBasic_LocalTime_swigregister(StepBasic_LocalTime)

class StepBasic_MeasureValueMember(OCC.Core.StepData.StepData_SelectReal):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_MeasureValueMember, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_MeasureValueMember, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_MeasureValueMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_MeasureValueMember_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_MeasureValueMember
    __del__ = lambda self: None
StepBasic_MeasureValueMember_swigregister = _StepBasic.StepBasic_MeasureValueMember_swigregister
StepBasic_MeasureValueMember_swigregister(StepBasic_MeasureValueMember)

class StepBasic_MeasureWithUnit(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_MeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_MeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a measurewithunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_MeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aValueComponent: StepBasic_MeasureValueMember
        aUnitComponent: StepBasic_Unit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_MeasureWithUnit_Init(self, *args)


    def SetUnitComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aUnitComponent: StepBasic_Unit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_MeasureWithUnit_SetUnitComponent(self, *args)


    def SetValueComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aValueComponent: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_MeasureWithUnit_SetValueComponent(self, *args)


    def SetValueComponentMember(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        val: StepBasic_MeasureValueMember

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_MeasureWithUnit_SetValueComponentMember(self, *args)


    def UnitComponent(self, *args) -> "StepBasic_Unit":
        """
        No available documentation.

        Returns
        -------
        StepBasic_Unit

        """
        return _StepBasic.StepBasic_MeasureWithUnit_UnitComponent(self, *args)


    def ValueComponent(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_MeasureWithUnit_ValueComponent(self, *args)


    def ValueComponentMember(self, *args) -> "opencascade::handle< StepBasic_MeasureValueMember >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_MeasureValueMember>

        """
        return _StepBasic.StepBasic_MeasureWithUnit_ValueComponentMember(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_MeasureWithUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_MeasureWithUnit
    __del__ = lambda self: None
StepBasic_MeasureWithUnit_swigregister = _StepBasic.StepBasic_MeasureWithUnit_swigregister
StepBasic_MeasureWithUnit_swigregister(StepBasic_MeasureWithUnit)

class StepBasic_NameAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_NameAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_NameAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_NameAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssignedName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field assignedname.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_NameAssignment_AssignedName(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aAssignedName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_NameAssignment_Init(self, *args)


    def SetAssignedName(self, *args) -> "void":
        """
        Set field assignedname.

        Parameters
        ----------
        AssignedName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_NameAssignment_SetAssignedName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_NameAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_NameAssignment
    __del__ = lambda self: None
StepBasic_NameAssignment_swigregister = _StepBasic.StepBasic_NameAssignment_swigregister
StepBasic_NameAssignment_swigregister(StepBasic_NameAssignment)

class StepBasic_NamedUnit(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_NamedUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_NamedUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a namedunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_NamedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimensions(self, *args) -> "opencascade::handle< StepBasic_DimensionalExponents >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_DimensionalExponents>

        """
        return _StepBasic.StepBasic_NamedUnit_Dimensions(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_NamedUnit_Init(self, *args)


    def SetDimensions(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_NamedUnit_SetDimensions(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_NamedUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_NamedUnit
    __del__ = lambda self: None
StepBasic_NamedUnit_swigregister = _StepBasic.StepBasic_NamedUnit_swigregister
StepBasic_NamedUnit_swigregister(StepBasic_NamedUnit)

class StepBasic_ObjectRole(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ObjectRole, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ObjectRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ObjectRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ObjectRole_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_ObjectRole_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ObjectRole_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ObjectRole_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ObjectRole_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ObjectRole_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ObjectRole_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ObjectRole
    __del__ = lambda self: None
StepBasic_ObjectRole_swigregister = _StepBasic.StepBasic_ObjectRole_swigregister
StepBasic_ObjectRole_swigregister(StepBasic_ObjectRole)

class StepBasic_Organization(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Organization, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Organization, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a organization.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Organization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Organization_Description(self, *args)


    def HasId(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Organization_HasId(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Organization_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAid: bool
        aId: TCollection_HAsciiString
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Organization_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Organization_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Organization_SetDescription(self, *args)


    def SetId(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Organization_SetId(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Organization_SetName(self, *args)


    def UnSetId(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Organization_UnSetId(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Organization_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Organization
    __del__ = lambda self: None
StepBasic_Organization_swigregister = _StepBasic.StepBasic_Organization_swigregister
StepBasic_Organization_swigregister(StepBasic_Organization)

class StepBasic_OrganizationAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_OrganizationAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_OrganizationAssignment, name)
    __repr__ = _swig_repr

    def AssignedOrganization(self, *args) -> "opencascade::handle< StepBasic_Organization >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Organization>

        """
        return _StepBasic.StepBasic_OrganizationAssignment_AssignedOrganization(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedOrganization: StepBasic_Organization
        aRole: StepBasic_OrganizationRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrganizationAssignment_Init(self, *args)


    def Role(self, *args) -> "opencascade::handle< StepBasic_OrganizationRole >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_OrganizationRole>

        """
        return _StepBasic.StepBasic_OrganizationAssignment_Role(self, *args)


    def SetAssignedOrganization(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedOrganization: StepBasic_Organization

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrganizationAssignment_SetAssignedOrganization(self, *args)


    def SetRole(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRole: StepBasic_OrganizationRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrganizationAssignment_SetRole(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_OrganizationAssignment_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StepBasic.new_StepBasic_OrganizationAssignment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepBasic.delete_StepBasic_OrganizationAssignment
    __del__ = lambda self: None
StepBasic_OrganizationAssignment_swigregister = _StepBasic.StepBasic_OrganizationAssignment_swigregister
StepBasic_OrganizationAssignment_swigregister(StepBasic_OrganizationAssignment)

class StepBasic_OrganizationRole(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_OrganizationRole, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_OrganizationRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a organizationrole.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_OrganizationRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrganizationRole_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_OrganizationRole_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrganizationRole_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_OrganizationRole_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_OrganizationRole
    __del__ = lambda self: None
StepBasic_OrganizationRole_swigregister = _StepBasic.StepBasic_OrganizationRole_swigregister
StepBasic_OrganizationRole_swigregister(StepBasic_OrganizationRole)

class StepBasic_Person(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Person, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Person, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a person.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Person(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FirstName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Person_FirstName(self, *args)


    def HasFirstName(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Person_HasFirstName(self, *args)


    def HasLastName(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Person_HasLastName(self, *args)


    def HasMiddleNames(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Person_HasMiddleNames(self, *args)


    def HasPrefixTitles(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Person_HasPrefixTitles(self, *args)


    def HasSuffixTitles(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_Person_HasSuffixTitles(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Person_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString
        hasAlastName: bool
        aLastName: TCollection_HAsciiString
        hasAfirstName: bool
        aFirstName: TCollection_HAsciiString
        hasAmiddleNames: bool
        aMiddleNames: Interface_HArray1OfHAsciiString
        hasAprefixTitles: bool
        aPrefixTitles: Interface_HArray1OfHAsciiString
        hasAsuffixTitles: bool
        aSuffixTitles: Interface_HArray1OfHAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_Init(self, *args)


    def LastName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Person_LastName(self, *args)


    def MiddleNames(self, *args) -> "opencascade::handle< Interface_HArray1OfHAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Interface_HArray1OfHAsciiString>

        """
        return _StepBasic.StepBasic_Person_MiddleNames(self, *args)


    def MiddleNamesValue(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Person_MiddleNamesValue(self, *args)


    def NbMiddleNames(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_Person_NbMiddleNames(self, *args)


    def NbPrefixTitles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_Person_NbPrefixTitles(self, *args)


    def NbSuffixTitles(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_Person_NbSuffixTitles(self, *args)


    def PrefixTitles(self, *args) -> "opencascade::handle< Interface_HArray1OfHAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Interface_HArray1OfHAsciiString>

        """
        return _StepBasic.StepBasic_Person_PrefixTitles(self, *args)


    def PrefixTitlesValue(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Person_PrefixTitlesValue(self, *args)


    def SetFirstName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFirstName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_SetFirstName(self, *args)


    def SetId(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_SetId(self, *args)


    def SetLastName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLastName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_SetLastName(self, *args)


    def SetMiddleNames(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMiddleNames: Interface_HArray1OfHAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_SetMiddleNames(self, *args)


    def SetPrefixTitles(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPrefixTitles: Interface_HArray1OfHAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_SetPrefixTitles(self, *args)


    def SetSuffixTitles(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSuffixTitles: Interface_HArray1OfHAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_SetSuffixTitles(self, *args)


    def SuffixTitles(self, *args) -> "opencascade::handle< Interface_HArray1OfHAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Interface_HArray1OfHAsciiString>

        """
        return _StepBasic.StepBasic_Person_SuffixTitles(self, *args)


    def SuffixTitlesValue(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Person_SuffixTitlesValue(self, *args)


    def UnSetFirstName(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_UnSetFirstName(self, *args)


    def UnSetLastName(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_UnSetLastName(self, *args)


    def UnSetMiddleNames(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_UnSetMiddleNames(self, *args)


    def UnSetPrefixTitles(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_UnSetPrefixTitles(self, *args)


    def UnSetSuffixTitles(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Person_UnSetSuffixTitles(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Person_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Person
    __del__ = lambda self: None
StepBasic_Person_swigregister = _StepBasic.StepBasic_Person_swigregister
StepBasic_Person_swigregister(StepBasic_Person)

class StepBasic_PersonAndOrganization(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_PersonAndOrganization, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_PersonAndOrganization, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a personandorganization.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_PersonAndOrganization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aThePerson: StepBasic_Person
        aTheOrganization: StepBasic_Organization

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonAndOrganization_Init(self, *args)


    def SetTheOrganization(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTheOrganization: StepBasic_Organization

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonAndOrganization_SetTheOrganization(self, *args)


    def SetThePerson(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aThePerson: StepBasic_Person

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonAndOrganization_SetThePerson(self, *args)


    def TheOrganization(self, *args) -> "opencascade::handle< StepBasic_Organization >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Organization>

        """
        return _StepBasic.StepBasic_PersonAndOrganization_TheOrganization(self, *args)


    def ThePerson(self, *args) -> "opencascade::handle< StepBasic_Person >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Person>

        """
        return _StepBasic.StepBasic_PersonAndOrganization_ThePerson(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_PersonAndOrganization_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonAndOrganization
    __del__ = lambda self: None
StepBasic_PersonAndOrganization_swigregister = _StepBasic.StepBasic_PersonAndOrganization_swigregister
StepBasic_PersonAndOrganization_swigregister(StepBasic_PersonAndOrganization)

class StepBasic_PersonAndOrganizationAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_PersonAndOrganizationAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_PersonAndOrganizationAssignment, name)
    __repr__ = _swig_repr

    def AssignedPersonAndOrganization(self, *args) -> "opencascade::handle< StepBasic_PersonAndOrganization >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_PersonAndOrganization>

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_AssignedPersonAndOrganization(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedPersonAndOrganization: StepBasic_PersonAndOrganization
        aRole: StepBasic_PersonAndOrganizationRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_Init(self, *args)


    def Role(self, *args) -> "opencascade::handle< StepBasic_PersonAndOrganizationRole >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_PersonAndOrganizationRole>

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_Role(self, *args)


    def SetAssignedPersonAndOrganization(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedPersonAndOrganization: StepBasic_PersonAndOrganization

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_SetAssignedPersonAndOrganization(self, *args)


    def SetRole(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRole: StepBasic_PersonAndOrganizationRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonAndOrganizationAssignment_SetRole(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_PersonAndOrganizationAssignment_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StepBasic.new_StepBasic_PersonAndOrganizationAssignment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonAndOrganizationAssignment
    __del__ = lambda self: None
StepBasic_PersonAndOrganizationAssignment_swigregister = _StepBasic.StepBasic_PersonAndOrganizationAssignment_swigregister
StepBasic_PersonAndOrganizationAssignment_swigregister(StepBasic_PersonAndOrganizationAssignment)

class StepBasic_PersonAndOrganizationRole(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_PersonAndOrganizationRole, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_PersonAndOrganizationRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a personandorganizationrole.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_PersonAndOrganizationRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonAndOrganizationRole_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_PersonAndOrganizationRole_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonAndOrganizationRole_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_PersonAndOrganizationRole_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonAndOrganizationRole
    __del__ = lambda self: None
StepBasic_PersonAndOrganizationRole_swigregister = _StepBasic.StepBasic_PersonAndOrganizationRole_swigregister
StepBasic_PersonAndOrganizationRole_swigregister(StepBasic_PersonAndOrganizationRole)

class StepBasic_PersonOrganizationSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_PersonOrganizationSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_PersonOrganizationSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a personorganizationselect selecttype.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_PersonOrganizationSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Organization(self, *args) -> "opencascade::handle< StepBasic_Organization >":
        """
        Returns value as a organization (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Organization>

        """
        return _StepBasic.StepBasic_PersonOrganizationSelect_Organization(self, *args)


    def Person(self, *args) -> "opencascade::handle< StepBasic_Person >":
        """
        Returns value as a person (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Person>

        """
        return _StepBasic.StepBasic_PersonOrganizationSelect_Person(self, *args)


    def PersonAndOrganization(self, *args) -> "opencascade::handle< StepBasic_PersonAndOrganization >":
        """
        Returns value as a personandorganization (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_PersonAndOrganization>

        """
        return _StepBasic.StepBasic_PersonOrganizationSelect_PersonAndOrganization(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonOrganizationSelect
    __del__ = lambda self: None
StepBasic_PersonOrganizationSelect_swigregister = _StepBasic.StepBasic_PersonOrganizationSelect_swigregister
StepBasic_PersonOrganizationSelect_swigregister(StepBasic_PersonOrganizationSelect)

class StepBasic_Product(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Product, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Product, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a product.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Product(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Product_Description(self, *args)


    def FrameOfReference(self, *args) -> "opencascade::handle< StepBasic_HArray1OfProductContext >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_HArray1OfProductContext>

        """
        return _StepBasic.StepBasic_Product_FrameOfReference(self, *args)


    def FrameOfReferenceValue(self, *args) -> "opencascade::handle< StepBasic_ProductContext >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepBasic_ProductContext>

        """
        return _StepBasic.StepBasic_Product_FrameOfReferenceValue(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Product_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aFrameOfReference: StepBasic_HArray1OfProductContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Product_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_Product_Name(self, *args)


    def NbFrameOfReference(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_Product_NbFrameOfReference(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Product_SetDescription(self, *args)


    def SetFrameOfReference(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFrameOfReference: StepBasic_HArray1OfProductContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Product_SetFrameOfReference(self, *args)


    def SetId(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Product_SetId(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_Product_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_Product_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Product
    __del__ = lambda self: None
StepBasic_Product_swigregister = _StepBasic.StepBasic_Product_swigregister
StepBasic_Product_swigregister(StepBasic_Product)

class StepBasic_ProductCategory(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductCategory, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductCategory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productcategory.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductCategory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductCategory_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_ProductCategory_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasAdescription: bool
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategory_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductCategory_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategory_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategory_SetName(self, *args)


    def UnSetDescription(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategory_UnSetDescription(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductCategory_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductCategory
    __del__ = lambda self: None
StepBasic_ProductCategory_swigregister = _StepBasic.StepBasic_ProductCategory_swigregister
StepBasic_ProductCategory_swigregister(StepBasic_ProductCategory)

class StepBasic_ProductCategoryRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductCategoryRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductCategoryRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductCategoryRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Category(self, *args) -> "opencascade::handle< StepBasic_ProductCategory >":
        """
        Returns field category.

        Returns
        -------
        opencascade::handle<StepBasic_ProductCategory>

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_Category(self, *args)


    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_HasDescription(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString
        aCategory: StepBasic_ProductCategory
        aSubCategory: StepBasic_ProductCategory

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_Name(self, *args)


    def SetCategory(self, *args) -> "void":
        """
        Set field category.

        Parameters
        ----------
        Category: StepBasic_ProductCategory

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SetCategory(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SetName(self, *args)


    def SetSubCategory(self, *args) -> "void":
        """
        Set field subcategory.

        Parameters
        ----------
        SubCategory: StepBasic_ProductCategory

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SetSubCategory(self, *args)


    def SubCategory(self, *args) -> "opencascade::handle< StepBasic_ProductCategory >":
        """
        Returns field subcategory.

        Returns
        -------
        opencascade::handle<StepBasic_ProductCategory>

        """
        return _StepBasic.StepBasic_ProductCategoryRelationship_SubCategory(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductCategoryRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductCategoryRelationship
    __del__ = lambda self: None
StepBasic_ProductCategoryRelationship_swigregister = _StepBasic.StepBasic_ProductCategoryRelationship_swigregister
StepBasic_ProductCategoryRelationship_swigregister(StepBasic_ProductCategoryRelationship)

class StepBasic_ProductDefinition(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productdefinition.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinition_Description(self, *args)


    def Formation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepBasic.StepBasic_ProductDefinition_Formation(self, *args)


    def FrameOfReference(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionContext >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionContext>

        """
        return _StepBasic.StepBasic_ProductDefinition_FrameOfReference(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinition_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aFormation: StepBasic_ProductDefinitionFormation
        aFrameOfReference: StepBasic_ProductDefinitionContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinition_Init(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinition_SetDescription(self, *args)


    def SetFormation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFormation: StepBasic_ProductDefinitionFormation

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinition_SetFormation(self, *args)


    def SetFrameOfReference(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aFrameOfReference: StepBasic_ProductDefinitionContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinition_SetFrameOfReference(self, *args)


    def SetId(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinition_SetId(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinition
    __del__ = lambda self: None
StepBasic_ProductDefinition_swigregister = _StepBasic.StepBasic_ProductDefinition_swigregister
StepBasic_ProductDefinition_swigregister(StepBasic_ProductDefinition)

class StepBasic_ProductDefinitionFormation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionFormation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionFormation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productdefinitionformation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionFormation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_Description(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aOfProduct: StepBasic_Product

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_Init(self, *args)


    def OfProduct(self, *args) -> "opencascade::handle< StepBasic_Product >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_Product>

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_OfProduct(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_SetDescription(self, *args)


    def SetId(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_SetId(self, *args)


    def SetOfProduct(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOfProduct: StepBasic_Product

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormation_SetOfProduct(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionFormation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionFormation
    __del__ = lambda self: None
StepBasic_ProductDefinitionFormation_swigregister = _StepBasic.StepBasic_ProductDefinitionFormation_swigregister
StepBasic_ProductDefinitionFormation_swigregister(StepBasic_ProductDefinitionFormation)

class StepBasic_ProductDefinitionFormationRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionFormationRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionFormationRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionFormationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_Description(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field id.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aRelatingProductDefinitionFormation: StepBasic_ProductDefinitionFormation
        aRelatedProductDefinitionFormation: StepBasic_ProductDefinitionFormation

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_Name(self, *args)


    def RelatedProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns field relatedproductdefinitionformation.

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_RelatedProductDefinitionFormation(self, *args)


    def RelatingProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns field relatingproductdefinitionformation.

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_RelatingProductDefinitionFormation(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetDescription(self, *args)


    def SetId(self, *args) -> "void":
        """
        Set field id.

        Parameters
        ----------
        Id: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetId(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetName(self, *args)


    def SetRelatedProductDefinitionFormation(self, *args) -> "void":
        """
        Set field relatedproductdefinitionformation.

        Parameters
        ----------
        RelatedProductDefinitionFormation: StepBasic_ProductDefinitionFormation

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetRelatedProductDefinitionFormation(self, *args)


    def SetRelatingProductDefinitionFormation(self, *args) -> "void":
        """
        Set field relatingproductdefinitionformation.

        Parameters
        ----------
        RelatingProductDefinitionFormation: StepBasic_ProductDefinitionFormation

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationRelationship_SetRelatingProductDefinitionFormation(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionFormationRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionFormationRelationship
    __del__ = lambda self: None
StepBasic_ProductDefinitionFormationRelationship_swigregister = _StepBasic.StepBasic_ProductDefinitionFormationRelationship_swigregister
StepBasic_ProductDefinitionFormationRelationship_swigregister(StepBasic_ProductDefinitionFormationRelationship)

class StepBasic_ProductDefinitionOrReference(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionOrReference, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionOrReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productdefinitionorreference selecttype.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionOrReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ProductDefinition(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        Returns value as a productdefinition (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinition>

        """
        return _StepBasic.StepBasic_ProductDefinitionOrReference_ProductDefinition(self, *args)


    def ProductDefinitionReference(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionReference >":
        """
        Returns value as a productdefinitionreference (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionReference>

        """
        return _StepBasic.StepBasic_ProductDefinitionOrReference_ProductDefinitionReference(self, *args)


    def ProductDefinitionReferenceWithLocalRepresentation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionReferenceWithLocalRepresentation >":
        """
        Returns value as a productdefinitionreferencewithlocalrepresentation (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionReferenceWithLocalRepresentation>

        """
        return _StepBasic.StepBasic_ProductDefinitionOrReference_ProductDefinitionReferenceWithLocalRepresentation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionOrReference
    __del__ = lambda self: None
StepBasic_ProductDefinitionOrReference_swigregister = _StepBasic.StepBasic_ProductDefinitionOrReference_swigregister
StepBasic_ProductDefinitionOrReference_swigregister(StepBasic_ProductDefinitionOrReference)

class StepBasic_ProductDefinitionReference(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionReference, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionReference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def HasIdOwningOrganizationName(self, *args) -> "Standard_Boolean":
        """
        Returns true if idowningorganizationname exists.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_HasIdOwningOrganizationName(self, *args)


    def IdOwningOrganizationName(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field idowningorganizationname.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_IdOwningOrganizationName(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        theSource: StepBasic_ExternalSource
        theProductId: TCollection_HAsciiString
        theProductDefinitionFormationId: TCollection_HAsciiString
        theProductDefinitionId: TCollection_HAsciiString
        theIdOwningOrganizationName: TCollection_HAsciiString

        Returns
        -------
        None

        Initialize all fields (own and inherited).

        Parameters
        ----------
        theSource: StepBasic_ExternalSource
        theProductId: TCollection_HAsciiString
        theProductDefinitionFormationId: TCollection_HAsciiString
        theProductDefinitionId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_Init(self, *args)


    def ProductDefinitionFormationId(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field productdefinitionformationid.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_ProductDefinitionFormationId(self, *args)


    def ProductDefinitionId(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field productdefinitionid.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_ProductDefinitionId(self, *args)


    def ProductId(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field productid.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_ProductId(self, *args)


    def SetIdOwningOrganizationName(self, *args) -> "void":
        """
        Set field idowningorganizationname.

        Parameters
        ----------
        theIdOwningOrganizationName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_SetIdOwningOrganizationName(self, *args)


    def SetProductDefinitionFormationId(self, *args) -> "void":
        """
        Set field productdefinitionformationid.

        Parameters
        ----------
        theProductDefinitionFormationId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_SetProductDefinitionFormationId(self, *args)


    def SetProductDefinitionId(self, *args) -> "void":
        """
        Set field productdefinitionid.

        Parameters
        ----------
        theProductDefinitionId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_SetProductDefinitionId(self, *args)


    def SetProductId(self, *args) -> "void":
        """
        Set field productid.

        Parameters
        ----------
        theProductId: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_SetProductId(self, *args)


    def SetSource(self, *args) -> "void":
        """
        Set field source.

        Parameters
        ----------
        theSource: StepBasic_ExternalSource

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_SetSource(self, *args)


    def Source(self, *args) -> "opencascade::handle< StepBasic_ExternalSource >":
        """
        Returns field source.

        Returns
        -------
        opencascade::handle<StepBasic_ExternalSource>

        """
        return _StepBasic.StepBasic_ProductDefinitionReference_Source(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionReference_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionReference
    __del__ = lambda self: None
StepBasic_ProductDefinitionReference_swigregister = _StepBasic.StepBasic_ProductDefinitionReference_swigregister
StepBasic_ProductDefinitionReference_swigregister(StepBasic_ProductDefinitionReference)

class StepBasic_ProductDefinitionRelationship(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionRelationship, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionRelationship, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_HasDescription(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field id.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString
        aRelatingProductDefinition: StepBasic_ProductDefinition
        aRelatedProductDefinition: StepBasic_ProductDefinition

        Returns
        -------
        None

        Initialize all fields (own and inherited).

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aName: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString
        aRelatingProductDefinition: StepBasic_ProductDefinitionOrReference
        aRelatedProductDefinition: StepBasic_ProductDefinitionOrReference

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field name.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_Name(self, *args)


    def RelatedProductDefinition(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        Returns field relatedproductdefinition.

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinition>

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args) -> "StepBasic_ProductDefinitionOrReference":
        """
        Returns field relatedproductdefinition in ap242.

        Returns
        -------
        StepBasic_ProductDefinitionOrReference

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_RelatedProductDefinitionAP242(self, *args)


    def RelatingProductDefinition(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        Returns field relatingproductdefinition.

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinition>

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args) -> "StepBasic_ProductDefinitionOrReference":
        """
        Returns field relatingproductdefinition in ap242.

        Returns
        -------
        StepBasic_ProductDefinitionOrReference

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_RelatingProductDefinitionAP242(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetDescription(self, *args)


    def SetId(self, *args) -> "void":
        """
        Set field id.

        Parameters
        ----------
        Id: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetId(self, *args)


    def SetName(self, *args) -> "void":
        """
        Set field name.

        Parameters
        ----------
        Name: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetName(self, *args)


    def SetRelatedProductDefinition(self, *args) -> "void":
        """
        Set field relatedproductdefinition.

        Parameters
        ----------
        RelatedProductDefinition: StepBasic_ProductDefinition

        Returns
        -------
        None

        Set field relatedproductdefinition in ap242.

        Parameters
        ----------
        RelatedProductDefinition: StepBasic_ProductDefinitionOrReference

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetRelatedProductDefinition(self, *args)


    def SetRelatingProductDefinition(self, *args) -> "void":
        """
        Set field relatingproductdefinition.

        Parameters
        ----------
        RelatingProductDefinition: StepBasic_ProductDefinition

        Returns
        -------
        None

        Set field relatingproductdefinition in ap242.

        Parameters
        ----------
        RelatingProductDefinition: StepBasic_ProductDefinitionOrReference

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionRelationship_SetRelatingProductDefinition(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionRelationship_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionRelationship
    __del__ = lambda self: None
StepBasic_ProductDefinitionRelationship_swigregister = _StepBasic.StepBasic_ProductDefinitionRelationship_swigregister
StepBasic_ProductDefinitionRelationship_swigregister(StepBasic_ProductDefinitionRelationship)

class StepBasic_ProductOrFormationOrDefinition(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductOrFormationOrDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductOrFormationOrDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductOrFormationOrDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Product(self, *args) -> "opencascade::handle< StepBasic_Product >":
        """
        Returns value as product (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_Product>

        """
        return _StepBasic.StepBasic_ProductOrFormationOrDefinition_Product(self, *args)


    def ProductDefinition(self, *args) -> "opencascade::handle< StepBasic_ProductDefinition >":
        """
        Returns value as productdefinition (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinition>

        """
        return _StepBasic.StepBasic_ProductOrFormationOrDefinition_ProductDefinition(self, *args)


    def ProductDefinitionFormation(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionFormation >":
        """
        Returns value as productdefinitionformation (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionFormation>

        """
        return _StepBasic.StepBasic_ProductOrFormationOrDefinition_ProductDefinitionFormation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductOrFormationOrDefinition
    __del__ = lambda self: None
StepBasic_ProductOrFormationOrDefinition_swigregister = _StepBasic.StepBasic_ProductOrFormationOrDefinition_swigregister
StepBasic_ProductOrFormationOrDefinition_swigregister(StepBasic_ProductOrFormationOrDefinition)

class StepBasic_RoleAssociation(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_RoleAssociation, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_RoleAssociation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_RoleAssociation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aRole: StepBasic_ObjectRole
        aItemWithRole: StepBasic_RoleSelect

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_RoleAssociation_Init(self, *args)


    def ItemWithRole(self, *args) -> "StepBasic_RoleSelect":
        """
        Returns field itemwithrole.

        Returns
        -------
        StepBasic_RoleSelect

        """
        return _StepBasic.StepBasic_RoleAssociation_ItemWithRole(self, *args)


    def Role(self, *args) -> "opencascade::handle< StepBasic_ObjectRole >":
        """
        Returns field role.

        Returns
        -------
        opencascade::handle<StepBasic_ObjectRole>

        """
        return _StepBasic.StepBasic_RoleAssociation_Role(self, *args)


    def SetItemWithRole(self, *args) -> "void":
        """
        Set field itemwithrole.

        Parameters
        ----------
        ItemWithRole: StepBasic_RoleSelect

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_RoleAssociation_SetItemWithRole(self, *args)


    def SetRole(self, *args) -> "void":
        """
        Set field role.

        Parameters
        ----------
        Role: StepBasic_ObjectRole

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_RoleAssociation_SetRole(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_RoleAssociation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_RoleAssociation
    __del__ = lambda self: None
StepBasic_RoleAssociation_swigregister = _StepBasic.StepBasic_RoleAssociation_swigregister
StepBasic_RoleAssociation_swigregister(StepBasic_RoleAssociation)

class StepBasic_RoleSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_RoleSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_RoleSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_RoleSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ActionAssignment(self, *args) -> "opencascade::handle< StepBasic_ActionAssignment >":
        """
        Returns value as actionassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ActionAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_ActionAssignment(self, *args)


    def ActionRequestAssignment(self, *args) -> "opencascade::handle< StepBasic_ActionRequestAssignment >":
        """
        Returns value as actionrequestassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ActionRequestAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_ActionRequestAssignment(self, *args)


    def ApprovalAssignment(self, *args) -> "opencascade::handle< StepBasic_ApprovalAssignment >":
        """
        Returns value as approvalassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ApprovalAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_ApprovalAssignment(self, *args)


    def ApprovalDateTime(self, *args) -> "opencascade::handle< StepBasic_ApprovalDateTime >":
        """
        Returns value as approvaldatetime (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ApprovalDateTime>

        """
        return _StepBasic.StepBasic_RoleSelect_ApprovalDateTime(self, *args)


    def CertificationAssignment(self, *args) -> "opencascade::handle< StepBasic_CertificationAssignment >":
        """
        Returns value as certificationassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_CertificationAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_CertificationAssignment(self, *args)


    def ContractAssignment(self, *args) -> "opencascade::handle< StepBasic_ContractAssignment >":
        """
        Returns value as contractassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_ContractAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_ContractAssignment(self, *args)


    def DocumentReference(self, *args) -> "opencascade::handle< StepBasic_DocumentReference >":
        """
        Returns value as documentreference (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_DocumentReference>

        """
        return _StepBasic.StepBasic_RoleSelect_DocumentReference(self, *args)


    def EffectivityAssignment(self, *args) -> "opencascade::handle< StepBasic_EffectivityAssignment >":
        """
        Returns value as effectivityassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_EffectivityAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_EffectivityAssignment(self, *args)


    def GroupAssignment(self, *args) -> "opencascade::handle< StepBasic_GroupAssignment >":
        """
        Returns value as groupassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_GroupAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_GroupAssignment(self, *args)


    def NameAssignment(self, *args) -> "opencascade::handle< StepBasic_NameAssignment >":
        """
        Returns value as nameassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_NameAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_NameAssignment(self, *args)


    def SecurityClassificationAssignment(self, *args) -> "opencascade::handle< StepBasic_SecurityClassificationAssignment >":
        """
        Returns value as securityclassificationassignment (or null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_SecurityClassificationAssignment>

        """
        return _StepBasic.StepBasic_RoleSelect_SecurityClassificationAssignment(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_RoleSelect
    __del__ = lambda self: None
StepBasic_RoleSelect_swigregister = _StepBasic.StepBasic_RoleSelect_swigregister
StepBasic_RoleSelect_swigregister(StepBasic_RoleSelect)

class StepBasic_SecurityClassification(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SecurityClassification, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SecurityClassification, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a securityclassification.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SecurityClassification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aPurpose: TCollection_HAsciiString
        aSecurityLevel: StepBasic_SecurityClassificationLevel

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SecurityClassification_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_SecurityClassification_Name(self, *args)


    def Purpose(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_SecurityClassification_Purpose(self, *args)


    def SecurityLevel(self, *args) -> "opencascade::handle< StepBasic_SecurityClassificationLevel >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_SecurityClassificationLevel>

        """
        return _StepBasic.StepBasic_SecurityClassification_SecurityLevel(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SecurityClassification_SetName(self, *args)


    def SetPurpose(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPurpose: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SecurityClassification_SetPurpose(self, *args)


    def SetSecurityLevel(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSecurityLevel: StepBasic_SecurityClassificationLevel

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SecurityClassification_SetSecurityLevel(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SecurityClassification_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SecurityClassification
    __del__ = lambda self: None
StepBasic_SecurityClassification_swigregister = _StepBasic.StepBasic_SecurityClassification_swigregister
StepBasic_SecurityClassification_swigregister(StepBasic_SecurityClassification)

class StepBasic_SecurityClassificationAssignment(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SecurityClassificationAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SecurityClassificationAssignment, name)
    __repr__ = _swig_repr

    def AssignedSecurityClassification(self, *args) -> "opencascade::handle< StepBasic_SecurityClassification >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_SecurityClassification>

        """
        return _StepBasic.StepBasic_SecurityClassificationAssignment_AssignedSecurityClassification(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedSecurityClassification: StepBasic_SecurityClassification

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SecurityClassificationAssignment_Init(self, *args)


    def SetAssignedSecurityClassification(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aAssignedSecurityClassification: StepBasic_SecurityClassification

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SecurityClassificationAssignment_SetAssignedSecurityClassification(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SecurityClassificationAssignment_DownCast(t)


    __repr__ = _dumps_object


    def __init__(self):
        this = _StepBasic.new_StepBasic_SecurityClassificationAssignment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepBasic.delete_StepBasic_SecurityClassificationAssignment
    __del__ = lambda self: None
StepBasic_SecurityClassificationAssignment_swigregister = _StepBasic.StepBasic_SecurityClassificationAssignment_swigregister
StepBasic_SecurityClassificationAssignment_swigregister(StepBasic_SecurityClassificationAssignment)

class StepBasic_SecurityClassificationLevel(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SecurityClassificationLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SecurityClassificationLevel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a securityclassificationlevel.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SecurityClassificationLevel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SecurityClassificationLevel_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_SecurityClassificationLevel_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SecurityClassificationLevel_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SecurityClassificationLevel_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SecurityClassificationLevel
    __del__ = lambda self: None
StepBasic_SecurityClassificationLevel_swigregister = _StepBasic.StepBasic_SecurityClassificationLevel_swigregister
StepBasic_SecurityClassificationLevel_swigregister(StepBasic_SecurityClassificationLevel)

class StepBasic_SizeMember(OCC.Core.StepData.StepData_SelectReal):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectReal]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SizeMember, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectReal]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SizeMember, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SizeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SizeMember_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SizeMember
    __del__ = lambda self: None
StepBasic_SizeMember_swigregister = _StepBasic.StepBasic_SizeMember_swigregister
StepBasic_SizeMember_swigregister(StepBasic_SizeMember)

class StepBasic_SizeSelect(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SizeSelect, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SizeSelect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a sizeselect selecttype.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SizeSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def RealValue(self, *args) -> "Standard_Real":
        """
        Returns value as a real (null if another type).

        Returns
        -------
        float

        """
        return _StepBasic.StepBasic_SizeSelect_RealValue(self, *args)


    def SetRealValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aReal: float

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SizeSelect_SetRealValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SizeSelect
    __del__ = lambda self: None
StepBasic_SizeSelect_swigregister = _StepBasic.StepBasic_SizeSelect_swigregister
StepBasic_SizeSelect_swigregister(StepBasic_SizeSelect)

class StepBasic_SourceItem(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SourceItem, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SourceItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SourceItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Identifier(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns value as identifier (or null if another type).

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_SourceItem_Identifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SourceItem
    __del__ = lambda self: None
StepBasic_SourceItem_swigregister = _StepBasic.StepBasic_SourceItem_swigregister
StepBasic_SourceItem_swigregister(StepBasic_SourceItem)

class StepBasic_Unit(OCC.Core.StepData.StepData_SelectType):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_Unit, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.StepData.StepData_SelectType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_Unit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates empty object.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_Unit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DerivedUnit(self, *args) -> "opencascade::handle< StepBasic_DerivedUnit >":
        """
        Returns value as a derivedunit (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_DerivedUnit>

        """
        return _StepBasic.StepBasic_Unit_DerivedUnit(self, *args)


    def NamedUnit(self, *args) -> "opencascade::handle< StepBasic_NamedUnit >":
        """
        Returns value as a namedunit (null if another type).

        Returns
        -------
        opencascade::handle<StepBasic_NamedUnit>

        """
        return _StepBasic.StepBasic_Unit_NamedUnit(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_Unit
    __del__ = lambda self: None
StepBasic_Unit_swigregister = _StepBasic.StepBasic_Unit_swigregister
StepBasic_Unit_swigregister(StepBasic_Unit)

class StepBasic_VersionedActionRequest(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_VersionedActionRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_VersionedActionRequest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_VersionedActionRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field description.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Description(self, *args)


    def HasDescription(self, *args) -> "Standard_Boolean":
        """
        Returns true if optional field description is defined.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_VersionedActionRequest_HasDescription(self, *args)


    def Id(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field id.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Id(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aVersion: TCollection_HAsciiString
        aPurpose: TCollection_HAsciiString
        hasDescription: bool
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Init(self, *args)


    def Purpose(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field purpose.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Purpose(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        Set field description.

        Parameters
        ----------
        Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_SetDescription(self, *args)


    def SetId(self, *args) -> "void":
        """
        Set field id.

        Parameters
        ----------
        Id: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_SetId(self, *args)


    def SetPurpose(self, *args) -> "void":
        """
        Set field purpose.

        Parameters
        ----------
        Purpose: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_SetPurpose(self, *args)


    def SetVersion(self, *args) -> "void":
        """
        Set field version.

        Parameters
        ----------
        Version: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_VersionedActionRequest_SetVersion(self, *args)


    def Version(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field version.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_VersionedActionRequest_Version(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_VersionedActionRequest_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_VersionedActionRequest
    __del__ = lambda self: None
StepBasic_VersionedActionRequest_swigregister = _StepBasic.StepBasic_VersionedActionRequest_swigregister
StepBasic_VersionedActionRequest_swigregister(StepBasic_VersionedActionRequest)

class StepBasic_AreaUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_AreaUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_AreaUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_AreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_AreaUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_AreaUnit
    __del__ = lambda self: None
StepBasic_AreaUnit_swigregister = _StepBasic.StepBasic_AreaUnit_swigregister
StepBasic_AreaUnit_swigregister(StepBasic_AreaUnit)

class StepBasic_CalendarDate(StepBasic_Date):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Date]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_CalendarDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Date]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_CalendarDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a calendardate.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_CalendarDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DayComponent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_CalendarDate_DayComponent(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aYearComponent: int
        aDayComponent: int
        aMonthComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CalendarDate_Init(self, *args)


    def MonthComponent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_CalendarDate_MonthComponent(self, *args)


    def SetDayComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDayComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CalendarDate_SetDayComponent(self, *args)


    def SetMonthComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMonthComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_CalendarDate_SetMonthComponent(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_CalendarDate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_CalendarDate
    __del__ = lambda self: None
StepBasic_CalendarDate_swigregister = _StepBasic.StepBasic_CalendarDate_swigregister
StepBasic_CalendarDate_swigregister(StepBasic_CalendarDate)

class StepBasic_ConversionBasedUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ConversionFactor(self, *args) -> "opencascade::handle< StepBasic_MeasureWithUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_MeasureWithUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_ConversionFactor(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents
        aName: TCollection_HAsciiString
        aConversionFactor: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_Name(self, *args)


    def SetConversionFactor(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aConversionFactor: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_SetConversionFactor(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnit_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnit_swigregister
StepBasic_ConversionBasedUnit_swigregister(StepBasic_ConversionBasedUnit)

class StepBasic_DigitalDocument(StepBasic_Document):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Document]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DigitalDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Document]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DigitalDocument, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DigitalDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DigitalDocument_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DigitalDocument
    __del__ = lambda self: None
StepBasic_DigitalDocument_swigregister = _StepBasic.StepBasic_DigitalDocument_swigregister
StepBasic_DigitalDocument_swigregister(StepBasic_DigitalDocument)

class StepBasic_DocumentFile(StepBasic_Document):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Document]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DocumentFile, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Document]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DocumentFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DocumentFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CharacterizedObject(self, *args) -> "opencascade::handle< StepBasic_CharacterizedObject >":
        """
        Returns data for supertype characterizedobject.

        Returns
        -------
        opencascade::handle<StepBasic_CharacterizedObject>

        """
        return _StepBasic.StepBasic_DocumentFile_CharacterizedObject(self, *args)


    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aDocument_Id: TCollection_HAsciiString
        aDocument_Name: TCollection_HAsciiString
        hasDocument_Description: bool
        aDocument_Description: TCollection_HAsciiString
        aDocument_Kind: StepBasic_DocumentType
        aCharacterizedObject_Name: TCollection_HAsciiString
        hasCharacterizedObject_Description: bool
        aCharacterizedObject_Description: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentFile_Init(self, *args)


    def SetCharacterizedObject(self, *args) -> "void":
        """
        Set data for supertype characterizedobject.

        Parameters
        ----------
        CharacterizedObject: StepBasic_CharacterizedObject

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_DocumentFile_SetCharacterizedObject(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DocumentFile_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentFile
    __del__ = lambda self: None
StepBasic_DocumentFile_swigregister = _StepBasic.StepBasic_DocumentFile_swigregister
StepBasic_DocumentFile_swigregister(StepBasic_DocumentFile)

class StepBasic_DocumentProductEquivalence(StepBasic_DocumentProductAssociation):
    __swig_setmethods__ = {}
    for _s in [StepBasic_DocumentProductAssociation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DocumentProductEquivalence, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_DocumentProductAssociation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DocumentProductEquivalence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DocumentProductEquivalence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DocumentProductEquivalence_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DocumentProductEquivalence
    __del__ = lambda self: None
StepBasic_DocumentProductEquivalence_swigregister = _StepBasic.StepBasic_DocumentProductEquivalence_swigregister
StepBasic_DocumentProductEquivalence_swigregister(StepBasic_DocumentProductEquivalence)

class StepBasic_ExternalIdentificationAssignment(StepBasic_IdentificationAssignment):
    __swig_setmethods__ = {}
    for _s in [StepBasic_IdentificationAssignment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ExternalIdentificationAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_IdentificationAssignment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ExternalIdentificationAssignment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ExternalIdentificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aIdentificationAssignment_AssignedId: TCollection_HAsciiString
        aIdentificationAssignment_Role: StepBasic_IdentificationRole
        aSource: StepBasic_ExternalSource

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ExternalIdentificationAssignment_Init(self, *args)


    def SetSource(self, *args) -> "void":
        """
        Set field source.

        Parameters
        ----------
        Source: StepBasic_ExternalSource

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ExternalIdentificationAssignment_SetSource(self, *args)


    def Source(self, *args) -> "opencascade::handle< StepBasic_ExternalSource >":
        """
        Returns field source.

        Returns
        -------
        opencascade::handle<StepBasic_ExternalSource>

        """
        return _StepBasic.StepBasic_ExternalIdentificationAssignment_Source(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ExternalIdentificationAssignment_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ExternalIdentificationAssignment
    __del__ = lambda self: None
StepBasic_ExternalIdentificationAssignment_swigregister = _StepBasic.StepBasic_ExternalIdentificationAssignment_swigregister
StepBasic_ExternalIdentificationAssignment_swigregister(StepBasic_ExternalIdentificationAssignment)

class StepBasic_LengthMeasureWithUnit(StepBasic_MeasureWithUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_LengthMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_LengthMeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a lengthmeasurewithunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_LengthMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_LengthMeasureWithUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_LengthMeasureWithUnit
    __del__ = lambda self: None
StepBasic_LengthMeasureWithUnit_swigregister = _StepBasic.StepBasic_LengthMeasureWithUnit_swigregister
StepBasic_LengthMeasureWithUnit_swigregister(StepBasic_LengthMeasureWithUnit)

class StepBasic_LengthUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_LengthUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_LengthUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a lengthunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_LengthUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_LengthUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_LengthUnit
    __del__ = lambda self: None
StepBasic_LengthUnit_swigregister = _StepBasic.StepBasic_LengthUnit_swigregister
StepBasic_LengthUnit_swigregister(StepBasic_LengthUnit)

class StepBasic_MassMeasureWithUnit(StepBasic_MeasureWithUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_MassMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_MassMeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a massmeasurewithunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_MassMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_MassMeasureWithUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_MassMeasureWithUnit
    __del__ = lambda self: None
StepBasic_MassMeasureWithUnit_swigregister = _StepBasic.StepBasic_MassMeasureWithUnit_swigregister
StepBasic_MassMeasureWithUnit_swigregister(StepBasic_MassMeasureWithUnit)

class StepBasic_MassUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_MassUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_MassUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_MassUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_MassUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_MassUnit
    __del__ = lambda self: None
StepBasic_MassUnit_swigregister = _StepBasic.StepBasic_MassUnit_swigregister
StepBasic_MassUnit_swigregister(StepBasic_MassUnit)

class StepBasic_OrdinalDate(StepBasic_Date):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Date]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_OrdinalDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Date]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_OrdinalDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a ordinaldate.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_OrdinalDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DayComponent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_OrdinalDate_DayComponent(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aYearComponent: int
        aDayComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrdinalDate_Init(self, *args)


    def SetDayComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDayComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrdinalDate_SetDayComponent(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_OrdinalDate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_OrdinalDate
    __del__ = lambda self: None
StepBasic_OrdinalDate_swigregister = _StepBasic.StepBasic_OrdinalDate_swigregister
StepBasic_OrdinalDate_swigregister(StepBasic_OrdinalDate)

class StepBasic_OrganizationalAddress(StepBasic_Address):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Address]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_OrganizationalAddress, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Address]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_OrganizationalAddress, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a organizationaladdress.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_OrganizationalAddress(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_OrganizationalAddress_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAinternalLocation: bool
        aInternalLocation: TCollection_HAsciiString
        hasAstreetNumber: bool
        aStreetNumber: TCollection_HAsciiString
        hasAstreet: bool
        aStreet: TCollection_HAsciiString
        hasApostalBox: bool
        aPostalBox: TCollection_HAsciiString
        hasAtown: bool
        aTown: TCollection_HAsciiString
        hasAregion: bool
        aRegion: TCollection_HAsciiString
        hasApostalCode: bool
        aPostalCode: TCollection_HAsciiString
        hasAcountry: bool
        aCountry: TCollection_HAsciiString
        hasAfacsimileNumber: bool
        aFacsimileNumber: TCollection_HAsciiString
        hasAtelephoneNumber: bool
        aTelephoneNumber: TCollection_HAsciiString
        hasAelectronicMailAddress: bool
        aElectronicMailAddress: TCollection_HAsciiString
        hasAtelexNumber: bool
        aTelexNumber: TCollection_HAsciiString
        aOrganizations: StepBasic_HArray1OfOrganization
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrganizationalAddress_Init(self, *args)


    def NbOrganizations(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_OrganizationalAddress_NbOrganizations(self, *args)


    def Organizations(self, *args) -> "opencascade::handle< StepBasic_HArray1OfOrganization >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_HArray1OfOrganization>

        """
        return _StepBasic.StepBasic_OrganizationalAddress_Organizations(self, *args)


    def OrganizationsValue(self, *args) -> "opencascade::handle< StepBasic_Organization >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepBasic_Organization>

        """
        return _StepBasic.StepBasic_OrganizationalAddress_OrganizationsValue(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrganizationalAddress_SetDescription(self, *args)


    def SetOrganizations(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aOrganizations: StepBasic_HArray1OfOrganization

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_OrganizationalAddress_SetOrganizations(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_OrganizationalAddress_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_OrganizationalAddress
    __del__ = lambda self: None
StepBasic_OrganizationalAddress_swigregister = _StepBasic.StepBasic_OrganizationalAddress_swigregister
StepBasic_OrganizationalAddress_swigregister(StepBasic_OrganizationalAddress)

class StepBasic_PersonalAddress(StepBasic_Address):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Address]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_PersonalAddress, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Address]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_PersonalAddress, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a personaladdress.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_PersonalAddress(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_PersonalAddress_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAinternalLocation: bool
        aInternalLocation: TCollection_HAsciiString
        hasAstreetNumber: bool
        aStreetNumber: TCollection_HAsciiString
        hasAstreet: bool
        aStreet: TCollection_HAsciiString
        hasApostalBox: bool
        aPostalBox: TCollection_HAsciiString
        hasAtown: bool
        aTown: TCollection_HAsciiString
        hasAregion: bool
        aRegion: TCollection_HAsciiString
        hasApostalCode: bool
        aPostalCode: TCollection_HAsciiString
        hasAcountry: bool
        aCountry: TCollection_HAsciiString
        hasAfacsimileNumber: bool
        aFacsimileNumber: TCollection_HAsciiString
        hasAtelephoneNumber: bool
        aTelephoneNumber: TCollection_HAsciiString
        hasAelectronicMailAddress: bool
        aElectronicMailAddress: TCollection_HAsciiString
        hasAtelexNumber: bool
        aTelexNumber: TCollection_HAsciiString
        aPeople: StepBasic_HArray1OfPerson
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonalAddress_Init(self, *args)


    def NbPeople(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_PersonalAddress_NbPeople(self, *args)


    def People(self, *args) -> "opencascade::handle< StepBasic_HArray1OfPerson >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_HArray1OfPerson>

        """
        return _StepBasic.StepBasic_PersonalAddress_People(self, *args)


    def PeopleValue(self, *args) -> "opencascade::handle< StepBasic_Person >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepBasic_Person>

        """
        return _StepBasic.StepBasic_PersonalAddress_PeopleValue(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonalAddress_SetDescription(self, *args)


    def SetPeople(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPeople: StepBasic_HArray1OfPerson

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_PersonalAddress_SetPeople(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_PersonalAddress_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_PersonalAddress
    __del__ = lambda self: None
StepBasic_PersonalAddress_swigregister = _StepBasic.StepBasic_PersonalAddress_swigregister
StepBasic_PersonalAddress_swigregister(StepBasic_PersonalAddress)

class StepBasic_PhysicallyModeledProductDefinition(StepBasic_ProductDefinition):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ProductDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_PhysicallyModeledProductDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ProductDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_PhysicallyModeledProductDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_PhysicallyModeledProductDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_PhysicallyModeledProductDefinition_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_PhysicallyModeledProductDefinition
    __del__ = lambda self: None
StepBasic_PhysicallyModeledProductDefinition_swigregister = _StepBasic.StepBasic_PhysicallyModeledProductDefinition_swigregister
StepBasic_PhysicallyModeledProductDefinition_swigregister(StepBasic_PhysicallyModeledProductDefinition)

class StepBasic_PlaneAngleMeasureWithUnit(StepBasic_MeasureWithUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_PlaneAngleMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_PlaneAngleMeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a planeanglemeasurewithunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_PlaneAngleMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_PlaneAngleMeasureWithUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_PlaneAngleMeasureWithUnit
    __del__ = lambda self: None
StepBasic_PlaneAngleMeasureWithUnit_swigregister = _StepBasic.StepBasic_PlaneAngleMeasureWithUnit_swigregister
StepBasic_PlaneAngleMeasureWithUnit_swigregister(StepBasic_PlaneAngleMeasureWithUnit)

class StepBasic_PlaneAngleUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_PlaneAngleUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_PlaneAngleUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a planeangleunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_PlaneAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_PlaneAngleUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_PlaneAngleUnit
    __del__ = lambda self: None
StepBasic_PlaneAngleUnit_swigregister = _StepBasic.StepBasic_PlaneAngleUnit_swigregister
StepBasic_PlaneAngleUnit_swigregister(StepBasic_PlaneAngleUnit)

class StepBasic_ProductConceptContext(StepBasic_ApplicationContextElement):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ApplicationContextElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductConceptContext, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ApplicationContextElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductConceptContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductConceptContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        Initialize all fields (own and inherited).

        Parameters
        ----------
        aApplicationContextElement_Name: TCollection_HAsciiString
        aApplicationContextElement_FrameOfReference: StepBasic_ApplicationContext
        aMarketSegmentType: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductConceptContext_Init(self, *args)


    def MarketSegmentType(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        Returns field marketsegmenttype.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductConceptContext_MarketSegmentType(self, *args)


    def SetMarketSegmentType(self, *args) -> "void":
        """
        Set field marketsegmenttype.

        Parameters
        ----------
        MarketSegmentType: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductConceptContext_SetMarketSegmentType(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductConceptContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductConceptContext
    __del__ = lambda self: None
StepBasic_ProductConceptContext_swigregister = _StepBasic.StepBasic_ProductConceptContext_swigregister
StepBasic_ProductConceptContext_swigregister(StepBasic_ProductConceptContext)

class StepBasic_ProductContext(StepBasic_ApplicationContextElement):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ApplicationContextElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductContext, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ApplicationContextElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productcontext.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DisciplineType(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductContext_DisciplineType(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aFrameOfReference: StepBasic_ApplicationContext
        aDisciplineType: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductContext_Init(self, *args)


    def SetDisciplineType(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDisciplineType: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductContext_SetDisciplineType(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductContext
    __del__ = lambda self: None
StepBasic_ProductContext_swigregister = _StepBasic.StepBasic_ProductContext_swigregister
StepBasic_ProductContext_swigregister(StepBasic_ProductContext)

class StepBasic_ProductDefinitionContext(StepBasic_ApplicationContextElement):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ApplicationContextElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionContext, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ApplicationContextElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productdefinitioncontext.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        aFrameOfReference: StepBasic_ApplicationContext
        aLifeCycleStage: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionContext_Init(self, *args)


    def LifeCycleStage(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_ProductDefinitionContext_LifeCycleStage(self, *args)


    def SetLifeCycleStage(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLifeCycleStage: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionContext_SetLifeCycleStage(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionContext
    __del__ = lambda self: None
StepBasic_ProductDefinitionContext_swigregister = _StepBasic.StepBasic_ProductDefinitionContext_swigregister
StepBasic_ProductDefinitionContext_swigregister(StepBasic_ProductDefinitionContext)

class StepBasic_ProductDefinitionEffectivity(StepBasic_Effectivity):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Effectivity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionEffectivity, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Effectivity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionEffectivity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionEffectivity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aUsage: StepBasic_ProductDefinitionRelationship

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionEffectivity_Init(self, *args)


    def SetUsage(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aUsage: StepBasic_ProductDefinitionRelationship

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionEffectivity_SetUsage(self, *args)


    def Usage(self, *args) -> "opencascade::handle< StepBasic_ProductDefinitionRelationship >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_ProductDefinitionRelationship>

        """
        return _StepBasic.StepBasic_ProductDefinitionEffectivity_Usage(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionEffectivity_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionEffectivity
    __del__ = lambda self: None
StepBasic_ProductDefinitionEffectivity_swigregister = _StepBasic.StepBasic_ProductDefinitionEffectivity_swigregister
StepBasic_ProductDefinitionEffectivity_swigregister(StepBasic_ProductDefinitionEffectivity)

class StepBasic_ProductDefinitionFormationWithSpecifiedSource(StepBasic_ProductDefinitionFormation):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ProductDefinitionFormation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionFormationWithSpecifiedSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ProductDefinitionFormation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionFormationWithSpecifiedSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productdefinitionformationwithspecifiedsource.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionFormationWithSpecifiedSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aOfProduct: StepBasic_Product
        aMakeOrBuy: StepBasic_Source

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_Init(self, *args)


    def MakeOrBuy(self, *args) -> "StepBasic_Source":
        """
        No available documentation.

        Returns
        -------
        StepBasic_Source

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_MakeOrBuy(self, *args)


    def SetMakeOrBuy(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMakeOrBuy: StepBasic_Source

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_SetMakeOrBuy(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionFormationWithSpecifiedSource
    __del__ = lambda self: None
StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister = _StepBasic.StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister
StepBasic_ProductDefinitionFormationWithSpecifiedSource_swigregister(StepBasic_ProductDefinitionFormationWithSpecifiedSource)

class StepBasic_ProductDefinitionReferenceWithLocalRepresentation(StepBasic_ProductDefinition):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ProductDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionReferenceWithLocalRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ProductDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionReferenceWithLocalRepresentation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productdefinitionreferencewithlocalrepresentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionReferenceWithLocalRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        theSource: StepBasic_ExternalSource
        theId: TCollection_HAsciiString
        theDescription: TCollection_HAsciiString
        theFormation: StepBasic_ProductDefinitionFormation
        theFrameOfReference: StepBasic_ProductDefinitionContext

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionReferenceWithLocalRepresentation_Init(self, *args)


    def SetSource(self, *args) -> "void":
        """
        Set field source.

        Parameters
        ----------
        theSource: StepBasic_ExternalSource

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionReferenceWithLocalRepresentation_SetSource(self, *args)


    def Source(self, *args) -> "opencascade::handle< StepBasic_ExternalSource >":
        """
        Returns field source.

        Returns
        -------
        opencascade::handle<StepBasic_ExternalSource>

        """
        return _StepBasic.StepBasic_ProductDefinitionReferenceWithLocalRepresentation_Source(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionReferenceWithLocalRepresentation
    __del__ = lambda self: None
StepBasic_ProductDefinitionReferenceWithLocalRepresentation_swigregister = _StepBasic.StepBasic_ProductDefinitionReferenceWithLocalRepresentation_swigregister
StepBasic_ProductDefinitionReferenceWithLocalRepresentation_swigregister(StepBasic_ProductDefinitionReferenceWithLocalRepresentation)

class StepBasic_ProductDefinitionWithAssociatedDocuments(StepBasic_ProductDefinition):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ProductDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductDefinitionWithAssociatedDocuments, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ProductDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductDefinitionWithAssociatedDocuments, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductDefinitionWithAssociatedDocuments(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DocIds(self, *args) -> "opencascade::handle< StepBasic_HArray1OfDocument >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_HArray1OfDocument>

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_DocIds(self, *args)


    def DocIdsValue(self, *args) -> "opencascade::handle< StepBasic_Document >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepBasic_Document>

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_DocIdsValue(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aId: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString
        aFormation: StepBasic_ProductDefinitionFormation
        aFrame: StepBasic_ProductDefinitionContext
        aDocIds: StepBasic_HArray1OfDocument

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_Init(self, *args)


    def NbDocIds(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_NbDocIds(self, *args)


    def SetDocIds(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        DocIds: StepBasic_HArray1OfDocument

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_SetDocIds(self, *args)


    def SetDocIdsValue(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        num: int
        adoc: StepBasic_Document

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_SetDocIdsValue(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductDefinitionWithAssociatedDocuments_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductDefinitionWithAssociatedDocuments
    __del__ = lambda self: None
StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister = _StepBasic.StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister
StepBasic_ProductDefinitionWithAssociatedDocuments_swigregister(StepBasic_ProductDefinitionWithAssociatedDocuments)

class StepBasic_ProductRelatedProductCategory(StepBasic_ProductCategory):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ProductCategory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductRelatedProductCategory, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ProductCategory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductRelatedProductCategory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a productrelatedproductcategory.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductRelatedProductCategory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString
        hasAdescription: bool
        aDescription: TCollection_HAsciiString
        aProducts: StepBasic_HArray1OfProduct

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_Init(self, *args)


    def NbProducts(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_NbProducts(self, *args)


    def Products(self, *args) -> "opencascade::handle< StepBasic_HArray1OfProduct >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_HArray1OfProduct>

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_Products(self, *args)


    def ProductsValue(self, *args) -> "opencascade::handle< StepBasic_Product >":
        """
        No available documentation.

        Parameters
        ----------
        num: int

        Returns
        -------
        opencascade::handle<StepBasic_Product>

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_ProductsValue(self, *args)


    def SetProducts(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aProducts: StepBasic_HArray1OfProduct

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ProductRelatedProductCategory_SetProducts(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductRelatedProductCategory_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductRelatedProductCategory
    __del__ = lambda self: None
StepBasic_ProductRelatedProductCategory_swigregister = _StepBasic.StepBasic_ProductRelatedProductCategory_swigregister
StepBasic_ProductRelatedProductCategory_swigregister(StepBasic_ProductRelatedProductCategory)

class StepBasic_RatioMeasureWithUnit(StepBasic_MeasureWithUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_RatioMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_RatioMeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a ratiomeasurewithunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_RatioMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_RatioMeasureWithUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_RatioMeasureWithUnit
    __del__ = lambda self: None
StepBasic_RatioMeasureWithUnit_swigregister = _StepBasic.StepBasic_RatioMeasureWithUnit_swigregister
StepBasic_RatioMeasureWithUnit_swigregister(StepBasic_RatioMeasureWithUnit)

class StepBasic_RatioUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_RatioUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_RatioUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a ratiounit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_RatioUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_RatioUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_RatioUnit
    __del__ = lambda self: None
StepBasic_RatioUnit_swigregister = _StepBasic.StepBasic_RatioUnit_swigregister
StepBasic_RatioUnit_swigregister(StepBasic_RatioUnit)

class StepBasic_SiUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def HasPrefix(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_SiUnit_HasPrefix(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAprefix: bool
        aPrefix: StepBasic_SiPrefix
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnit_Init(self, *args)


    def Name(self, *args) -> "StepBasic_SiUnitName":
        """
        No available documentation.

        Returns
        -------
        StepBasic_SiUnitName

        """
        return _StepBasic.StepBasic_SiUnit_Name(self, *args)


    def Prefix(self, *args) -> "StepBasic_SiPrefix":
        """
        No available documentation.

        Returns
        -------
        StepBasic_SiPrefix

        """
        return _StepBasic.StepBasic_SiUnit_Prefix(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnit_SetName(self, *args)


    def SetPrefix(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPrefix: StepBasic_SiPrefix

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnit_SetPrefix(self, *args)


    def UnSetPrefix(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnit_UnSetPrefix(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnit
    __del__ = lambda self: None
StepBasic_SiUnit_swigregister = _StepBasic.StepBasic_SiUnit_swigregister
StepBasic_SiUnit_swigregister(StepBasic_SiUnit)

class StepBasic_SolidAngleMeasureWithUnit(StepBasic_MeasureWithUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SolidAngleMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SolidAngleMeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a solidanglemeasurewithunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SolidAngleMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SolidAngleMeasureWithUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SolidAngleMeasureWithUnit
    __del__ = lambda self: None
StepBasic_SolidAngleMeasureWithUnit_swigregister = _StepBasic.StepBasic_SolidAngleMeasureWithUnit_swigregister
StepBasic_SolidAngleMeasureWithUnit_swigregister(StepBasic_SolidAngleMeasureWithUnit)

class StepBasic_SolidAngleUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SolidAngleUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SolidAngleUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a solidangleunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SolidAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SolidAngleUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SolidAngleUnit
    __del__ = lambda self: None
StepBasic_SolidAngleUnit_swigregister = _StepBasic.StepBasic_SolidAngleUnit_swigregister
StepBasic_SolidAngleUnit_swigregister(StepBasic_SolidAngleUnit)

class StepBasic_ThermodynamicTemperatureUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ThermodynamicTemperatureUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ThermodynamicTemperatureUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Empty constructor.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ThermodynamicTemperatureUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ThermodynamicTemperatureUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ThermodynamicTemperatureUnit
    __del__ = lambda self: None
StepBasic_ThermodynamicTemperatureUnit_swigregister = _StepBasic.StepBasic_ThermodynamicTemperatureUnit_swigregister
StepBasic_ThermodynamicTemperatureUnit_swigregister(StepBasic_ThermodynamicTemperatureUnit)

class StepBasic_TimeMeasureWithUnit(StepBasic_MeasureWithUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_TimeMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_TimeMeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a timemeasurewithunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_TimeMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_TimeMeasureWithUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_TimeMeasureWithUnit
    __del__ = lambda self: None
StepBasic_TimeMeasureWithUnit_swigregister = _StepBasic.StepBasic_TimeMeasureWithUnit_swigregister
StepBasic_TimeMeasureWithUnit_swigregister(StepBasic_TimeMeasureWithUnit)

class StepBasic_TimeUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_TimeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_TimeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a timeunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_TimeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_TimeUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_TimeUnit
    __del__ = lambda self: None
StepBasic_TimeUnit_swigregister = _StepBasic.StepBasic_TimeUnit_swigregister
StepBasic_TimeUnit_swigregister(StepBasic_TimeUnit)

class StepBasic_UncertaintyMeasureWithUnit(StepBasic_MeasureWithUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_UncertaintyMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_MeasureWithUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_UncertaintyMeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a uncertaintymeasurewithunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_UncertaintyMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Description(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_Description(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aValueComponent: StepBasic_MeasureValueMember
        aUnitComponent: StepBasic_Unit
        aName: TCollection_HAsciiString
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_Init(self, *args)


    def Name(self, *args) -> "opencascade::handle< TCollection_HAsciiString >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<TCollection_HAsciiString>

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_Name(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDescription: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_SetDescription(self, *args)


    def SetName(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aName: TCollection_HAsciiString

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_UncertaintyMeasureWithUnit_SetName(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_UncertaintyMeasureWithUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_UncertaintyMeasureWithUnit
    __del__ = lambda self: None
StepBasic_UncertaintyMeasureWithUnit_swigregister = _StepBasic.StepBasic_UncertaintyMeasureWithUnit_swigregister
StepBasic_UncertaintyMeasureWithUnit_swigregister(StepBasic_UncertaintyMeasureWithUnit)

class StepBasic_VolumeUnit(StepBasic_NamedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_VolumeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_NamedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_VolumeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_VolumeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_VolumeUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_VolumeUnit
    __del__ = lambda self: None
StepBasic_VolumeUnit_swigregister = _StepBasic.StepBasic_VolumeUnit_swigregister
StepBasic_VolumeUnit_swigregister(StepBasic_VolumeUnit)

class StepBasic_WeekOfYearAndDayDate(StepBasic_Date):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Date]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_WeekOfYearAndDayDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Date]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_WeekOfYearAndDayDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a weekofyearanddaydate.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_WeekOfYearAndDayDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DayComponent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_DayComponent(self, *args)


    def HasDayComponent(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Returns
        -------
        bool

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_HasDayComponent(self, *args)


    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aYearComponent: int
        aWeekComponent: int
        hasAdayComponent: bool
        aDayComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_Init(self, *args)


    def SetDayComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDayComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_SetDayComponent(self, *args)


    def SetWeekComponent(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aWeekComponent: int

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_SetWeekComponent(self, *args)


    def UnSetDayComponent(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_UnSetDayComponent(self, *args)


    def WeekComponent(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _StepBasic.StepBasic_WeekOfYearAndDayDate_WeekComponent(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_WeekOfYearAndDayDate_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_WeekOfYearAndDayDate
    __del__ = lambda self: None
StepBasic_WeekOfYearAndDayDate_swigregister = _StepBasic.StepBasic_WeekOfYearAndDayDate_swigregister
StepBasic_WeekOfYearAndDayDate_swigregister(StepBasic_WeekOfYearAndDayDate)

class StepBasic_ConversionBasedUnitAndAreaUnit(StepBasic_ConversionBasedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnitAndAreaUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnitAndAreaUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunitandareaunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnitAndAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AreaUnit(self, *args) -> "opencascade::handle< StepBasic_AreaUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_AreaUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_AreaUnit(self, *args)


    def SetAreaUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        anAreaUnit: StepBasic_AreaUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_SetAreaUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnitAndAreaUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndAreaUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnitAndAreaUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndAreaUnit_swigregister
StepBasic_ConversionBasedUnitAndAreaUnit_swigregister(StepBasic_ConversionBasedUnitAndAreaUnit)

class StepBasic_ConversionBasedUnitAndLengthUnit(StepBasic_ConversionBasedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnitAndLengthUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnitAndLengthUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunitandlengthunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnitAndLengthUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents
        aName: TCollection_HAsciiString
        aConversionFactor: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_Init(self, *args)


    def LengthUnit(self, *args) -> "opencascade::handle< StepBasic_LengthUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_LengthUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_LengthUnit(self, *args)


    def SetLengthUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLengthUnit: StepBasic_LengthUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_SetLengthUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnitAndLengthUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndLengthUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnitAndLengthUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndLengthUnit_swigregister
StepBasic_ConversionBasedUnitAndLengthUnit_swigregister(StepBasic_ConversionBasedUnitAndLengthUnit)

class StepBasic_ConversionBasedUnitAndMassUnit(StepBasic_ConversionBasedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnitAndMassUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnitAndMassUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunitandlengthunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnitAndMassUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents
        aName: TCollection_HAsciiString
        aConversionFactor: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_Init(self, *args)


    def MassUnit(self, *args) -> "opencascade::handle< StepBasic_MassUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_MassUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_MassUnit(self, *args)


    def SetMassUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMassUnit: StepBasic_MassUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_SetMassUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnitAndMassUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndMassUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnitAndMassUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndMassUnit_swigregister
StepBasic_ConversionBasedUnitAndMassUnit_swigregister(StepBasic_ConversionBasedUnitAndMassUnit)

class StepBasic_ConversionBasedUnitAndPlaneAngleUnit(StepBasic_ConversionBasedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnitAndPlaneAngleUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnitAndPlaneAngleUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunitandplaneangleunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnitAndPlaneAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents
        aName: TCollection_HAsciiString
        aConversionFactor: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_Init(self, *args)


    def PlaneAngleUnit(self, *args) -> "opencascade::handle< StepBasic_PlaneAngleUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_PlaneAngleUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_PlaneAngleUnit(self, *args)


    def SetPlaneAngleUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPlaneAngleUnit: StepBasic_PlaneAngleUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_SetPlaneAngleUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndPlaneAngleUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister
StepBasic_ConversionBasedUnitAndPlaneAngleUnit_swigregister(StepBasic_ConversionBasedUnitAndPlaneAngleUnit)

class StepBasic_ConversionBasedUnitAndRatioUnit(StepBasic_ConversionBasedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnitAndRatioUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnitAndRatioUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunitandratiounit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnitAndRatioUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents
        aName: TCollection_HAsciiString
        aConversionFactor: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_Init(self, *args)


    def RatioUnit(self, *args) -> "opencascade::handle< StepBasic_RatioUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_RatioUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_RatioUnit(self, *args)


    def SetRatioUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRatioUnit: StepBasic_RatioUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_SetRatioUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnitAndRatioUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndRatioUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnitAndRatioUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndRatioUnit_swigregister
StepBasic_ConversionBasedUnitAndRatioUnit_swigregister(StepBasic_ConversionBasedUnitAndRatioUnit)

class StepBasic_ConversionBasedUnitAndSolidAngleUnit(StepBasic_ConversionBasedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnitAndSolidAngleUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnitAndSolidAngleUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunitandsolidangleunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnitAndSolidAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents
        aName: TCollection_HAsciiString
        aConversionFactor: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_Init(self, *args)


    def SetSolidAngleUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSolidAngleUnit: StepBasic_SolidAngleUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_SetSolidAngleUnit(self, *args)


    def SolidAngleUnit(self, *args) -> "opencascade::handle< StepBasic_SolidAngleUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_SolidAngleUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_SolidAngleUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndSolidAngleUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister
StepBasic_ConversionBasedUnitAndSolidAngleUnit_swigregister(StepBasic_ConversionBasedUnitAndSolidAngleUnit)

class StepBasic_ConversionBasedUnitAndTimeUnit(StepBasic_ConversionBasedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnitAndTimeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnitAndTimeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunitandtimeunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnitAndTimeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aDimensions: StepBasic_DimensionalExponents
        aName: TCollection_HAsciiString
        aConversionFactor: StepBasic_MeasureWithUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_Init(self, *args)


    def SetTimeUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTimeUnit: StepBasic_TimeUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_SetTimeUnit(self, *args)


    def TimeUnit(self, *args) -> "opencascade::handle< StepBasic_TimeUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_TimeUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_TimeUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnitAndTimeUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndTimeUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnitAndTimeUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndTimeUnit_swigregister
StepBasic_ConversionBasedUnitAndTimeUnit_swigregister(StepBasic_ConversionBasedUnitAndTimeUnit)

class StepBasic_ConversionBasedUnitAndVolumeUnit(StepBasic_ConversionBasedUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ConversionBasedUnitAndVolumeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ConversionBasedUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ConversionBasedUnitAndVolumeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a conversionbasedunitandvolumeunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ConversionBasedUnitAndVolumeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetVolumeUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aVolumeUnit: StepBasic_VolumeUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_SetVolumeUnit(self, *args)


    def VolumeUnit(self, *args) -> "opencascade::handle< StepBasic_VolumeUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_VolumeUnit>

        """
        return _StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_VolumeUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ConversionBasedUnitAndVolumeUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ConversionBasedUnitAndVolumeUnit
    __del__ = lambda self: None
StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister = _StepBasic.StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister
StepBasic_ConversionBasedUnitAndVolumeUnit_swigregister(StepBasic_ConversionBasedUnitAndVolumeUnit)

class StepBasic_DesignContext(StepBasic_ProductDefinitionContext):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ProductDefinitionContext]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_DesignContext, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ProductDefinitionContext]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_DesignContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_DesignContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_DesignContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_DesignContext
    __del__ = lambda self: None
StepBasic_DesignContext_swigregister = _StepBasic.StepBasic_DesignContext_swigregister
StepBasic_DesignContext_swigregister(StepBasic_DesignContext)

class StepBasic_MechanicalContext(StepBasic_ProductContext):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ProductContext]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_MechanicalContext, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ProductContext]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_MechanicalContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a mechanicalcontext.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_MechanicalContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_MechanicalContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_MechanicalContext
    __del__ = lambda self: None
StepBasic_MechanicalContext_swigregister = _StepBasic.StepBasic_MechanicalContext_swigregister
StepBasic_MechanicalContext_swigregister(StepBasic_MechanicalContext)

class StepBasic_ProductType(StepBasic_ProductRelatedProductCategory):
    __swig_setmethods__ = {}
    for _s in [StepBasic_ProductRelatedProductCategory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_ProductType, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_ProductRelatedProductCategory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_ProductType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a producttype.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_ProductType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_ProductType_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_ProductType
    __del__ = lambda self: None
StepBasic_ProductType_swigregister = _StepBasic.StepBasic_ProductType_swigregister
StepBasic_ProductType_swigregister(StepBasic_ProductType)

class StepBasic_SiUnitAndAreaUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndAreaUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndAreaUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandareaunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AreaUnit(self, *args) -> "opencascade::handle< StepBasic_AreaUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_AreaUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndAreaUnit_AreaUnit(self, *args)


    def SetAreaUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        anAreaUnit: StepBasic_AreaUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndAreaUnit_SetAreaUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndAreaUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndAreaUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndAreaUnit_swigregister = _StepBasic.StepBasic_SiUnitAndAreaUnit_swigregister
StepBasic_SiUnitAndAreaUnit_swigregister(StepBasic_SiUnitAndAreaUnit)

class StepBasic_SiUnitAndLengthUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndLengthUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndLengthUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandlengthunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndLengthUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAprefix: bool
        aPrefix: StepBasic_SiPrefix
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndLengthUnit_Init(self, *args)


    def LengthUnit(self, *args) -> "opencascade::handle< StepBasic_LengthUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_LengthUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndLengthUnit_LengthUnit(self, *args)


    def SetLengthUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aLengthUnit: StepBasic_LengthUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndLengthUnit_SetLengthUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndLengthUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndLengthUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndLengthUnit_swigregister = _StepBasic.StepBasic_SiUnitAndLengthUnit_swigregister
StepBasic_SiUnitAndLengthUnit_swigregister(StepBasic_SiUnitAndLengthUnit)

class StepBasic_SiUnitAndMassUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndMassUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndMassUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandmassunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndMassUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAprefix: bool
        aPrefix: StepBasic_SiPrefix
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndMassUnit_Init(self, *args)


    def MassUnit(self, *args) -> "opencascade::handle< StepBasic_MassUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_MassUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndMassUnit_MassUnit(self, *args)


    def SetMassUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aMassUnit: StepBasic_MassUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndMassUnit_SetMassUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndMassUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndMassUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndMassUnit_swigregister = _StepBasic.StepBasic_SiUnitAndMassUnit_swigregister
StepBasic_SiUnitAndMassUnit_swigregister(StepBasic_SiUnitAndMassUnit)

class StepBasic_SiUnitAndPlaneAngleUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndPlaneAngleUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndPlaneAngleUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandplaneangleunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndPlaneAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAprefix: bool
        aPrefix: StepBasic_SiPrefix
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_Init(self, *args)


    def PlaneAngleUnit(self, *args) -> "opencascade::handle< StepBasic_PlaneAngleUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_PlaneAngleUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_PlaneAngleUnit(self, *args)


    def SetPlaneAngleUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aPlaneAngleUnit: StepBasic_PlaneAngleUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_SetPlaneAngleUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndPlaneAngleUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndPlaneAngleUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndPlaneAngleUnit_swigregister = _StepBasic.StepBasic_SiUnitAndPlaneAngleUnit_swigregister
StepBasic_SiUnitAndPlaneAngleUnit_swigregister(StepBasic_SiUnitAndPlaneAngleUnit)

class StepBasic_SiUnitAndRatioUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndRatioUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndRatioUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandratiounit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndRatioUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAprefix: bool
        aPrefix: StepBasic_SiPrefix
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndRatioUnit_Init(self, *args)


    def RatioUnit(self, *args) -> "opencascade::handle< StepBasic_RatioUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_RatioUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndRatioUnit_RatioUnit(self, *args)


    def SetRatioUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aRatioUnit: StepBasic_RatioUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndRatioUnit_SetRatioUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndRatioUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndRatioUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndRatioUnit_swigregister = _StepBasic.StepBasic_SiUnitAndRatioUnit_swigregister
StepBasic_SiUnitAndRatioUnit_swigregister(StepBasic_SiUnitAndRatioUnit)

class StepBasic_SiUnitAndSolidAngleUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndSolidAngleUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndSolidAngleUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandsolidangleunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndSolidAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAprefix: bool
        aPrefix: StepBasic_SiPrefix
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_Init(self, *args)


    def SetSolidAngleUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aSolidAngleUnit: StepBasic_SolidAngleUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_SetSolidAngleUnit(self, *args)


    def SolidAngleUnit(self, *args) -> "opencascade::handle< StepBasic_SolidAngleUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_SolidAngleUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_SolidAngleUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndSolidAngleUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndSolidAngleUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndSolidAngleUnit_swigregister = _StepBasic.StepBasic_SiUnitAndSolidAngleUnit_swigregister
StepBasic_SiUnitAndSolidAngleUnit_swigregister(StepBasic_SiUnitAndSolidAngleUnit)

class StepBasic_SiUnitAndThermodynamicTemperatureUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndThermodynamicTemperatureUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndThermodynamicTemperatureUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandthermodynamictemperatureunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndThermodynamicTemperatureUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAprefix: bool
        aPrefix: StepBasic_SiPrefix
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_Init(self, *args)


    def SetThermodynamicTemperatureUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aThermodynamicTemperatureUnit: StepBasic_ThermodynamicTemperatureUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_SetThermodynamicTemperatureUnit(self, *args)


    def ThermodynamicTemperatureUnit(self, *args) -> "opencascade::handle< StepBasic_ThermodynamicTemperatureUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_ThermodynamicTemperatureUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_ThermodynamicTemperatureUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndThermodynamicTemperatureUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister = _StepBasic.StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister
StepBasic_SiUnitAndThermodynamicTemperatureUnit_swigregister(StepBasic_SiUnitAndThermodynamicTemperatureUnit)

class StepBasic_SiUnitAndTimeUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndTimeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndTimeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandtimeunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndTimeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        hasAprefix: bool
        aPrefix: StepBasic_SiPrefix
        aName: StepBasic_SiUnitName

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndTimeUnit_Init(self, *args)


    def SetTimeUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aTimeUnit: StepBasic_TimeUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndTimeUnit_SetTimeUnit(self, *args)


    def TimeUnit(self, *args) -> "opencascade::handle< StepBasic_TimeUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_TimeUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndTimeUnit_TimeUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndTimeUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndTimeUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndTimeUnit_swigregister = _StepBasic.StepBasic_SiUnitAndTimeUnit_swigregister
StepBasic_SiUnitAndTimeUnit_swigregister(StepBasic_SiUnitAndTimeUnit)

class StepBasic_SiUnitAndVolumeUnit(StepBasic_SiUnit):
    __swig_setmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_SiUnitAndVolumeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_SiUnit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_SiUnitAndVolumeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Returns a siunitandvolumeunit.

        Returns
        -------
        None

        """
        this = _StepBasic.new_StepBasic_SiUnitAndVolumeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetVolumeUnit(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        aVolumeUnit: StepBasic_VolumeUnit

        Returns
        -------
        None

        """
        return _StepBasic.StepBasic_SiUnitAndVolumeUnit_SetVolumeUnit(self, *args)


    def VolumeUnit(self, *args) -> "opencascade::handle< StepBasic_VolumeUnit >":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<StepBasic_VolumeUnit>

        """
        return _StepBasic.StepBasic_SiUnitAndVolumeUnit_VolumeUnit(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_SiUnitAndVolumeUnit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepBasic.delete_StepBasic_SiUnitAndVolumeUnit
    __del__ = lambda self: None
StepBasic_SiUnitAndVolumeUnit_swigregister = _StepBasic.StepBasic_SiUnitAndVolumeUnit_swigregister
StepBasic_SiUnitAndVolumeUnit_swigregister(StepBasic_SiUnitAndVolumeUnit)

class StepBasic_HArray1OfOrganization(StepBasic_Array1OfOrganization, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfOrganization, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfOrganization, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfOrganization, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfOrganization, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfOrganization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfOrganization const &":
        return _StepBasic.StepBasic_HArray1OfOrganization_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfOrganization &":
        return _StepBasic.StepBasic_HArray1OfOrganization_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfOrganization_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfOrganization
    __del__ = lambda self: None
StepBasic_HArray1OfOrganization_swigregister = _StepBasic.StepBasic_HArray1OfOrganization_swigregister
StepBasic_HArray1OfOrganization_swigregister(StepBasic_HArray1OfOrganization)

class StepBasic_HArray1OfProductDefinition(StepBasic_Array1OfProductDefinition, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfProductDefinition, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfProductDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfProductDefinition, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfProductDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfProductDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfProductDefinition const &":
        return _StepBasic.StepBasic_HArray1OfProductDefinition_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfProductDefinition &":
        return _StepBasic.StepBasic_HArray1OfProductDefinition_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfProductDefinition_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfProductDefinition
    __del__ = lambda self: None
StepBasic_HArray1OfProductDefinition_swigregister = _StepBasic.StepBasic_HArray1OfProductDefinition_swigregister
StepBasic_HArray1OfProductDefinition_swigregister(StepBasic_HArray1OfProductDefinition)

class StepBasic_HArray1OfDerivedUnitElement(StepBasic_Array1OfDerivedUnitElement, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfDerivedUnitElement, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfDerivedUnitElement, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfDerivedUnitElement, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfDerivedUnitElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfDerivedUnitElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfDerivedUnitElement const &":
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfDerivedUnitElement &":
        return _StepBasic.StepBasic_HArray1OfDerivedUnitElement_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfDerivedUnitElement_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfDerivedUnitElement
    __del__ = lambda self: None
StepBasic_HArray1OfDerivedUnitElement_swigregister = _StepBasic.StepBasic_HArray1OfDerivedUnitElement_swigregister
StepBasic_HArray1OfDerivedUnitElement_swigregister(StepBasic_HArray1OfDerivedUnitElement)

class StepBasic_HArray1OfPerson(StepBasic_Array1OfPerson, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfPerson, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfPerson, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfPerson, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfPerson, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfPerson(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfPerson const &":
        return _StepBasic.StepBasic_HArray1OfPerson_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfPerson &":
        return _StepBasic.StepBasic_HArray1OfPerson_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfPerson_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfPerson
    __del__ = lambda self: None
StepBasic_HArray1OfPerson_swigregister = _StepBasic.StepBasic_HArray1OfPerson_swigregister
StepBasic_HArray1OfPerson_swigregister(StepBasic_HArray1OfPerson)

class StepBasic_HArray1OfUncertaintyMeasureWithUnit(StepBasic_Array1OfUncertaintyMeasureWithUnit, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfUncertaintyMeasureWithUnit, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfUncertaintyMeasureWithUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfUncertaintyMeasureWithUnit, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfUncertaintyMeasureWithUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfUncertaintyMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfUncertaintyMeasureWithUnit const &":
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfUncertaintyMeasureWithUnit &":
        return _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfUncertaintyMeasureWithUnit
    __del__ = lambda self: None
StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister = _StepBasic.StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister
StepBasic_HArray1OfUncertaintyMeasureWithUnit_swigregister(StepBasic_HArray1OfUncertaintyMeasureWithUnit)

class StepBasic_HArray1OfApproval(StepBasic_Array1OfApproval, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfApproval, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfApproval, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfApproval, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfApproval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfApproval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfApproval const &":
        return _StepBasic.StepBasic_HArray1OfApproval_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfApproval &":
        return _StepBasic.StepBasic_HArray1OfApproval_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfApproval_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfApproval
    __del__ = lambda self: None
StepBasic_HArray1OfApproval_swigregister = _StepBasic.StepBasic_HArray1OfApproval_swigregister
StepBasic_HArray1OfApproval_swigregister(StepBasic_HArray1OfApproval)

class StepBasic_HArray1OfNamedUnit(StepBasic_Array1OfNamedUnit, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfNamedUnit, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfNamedUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfNamedUnit, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfNamedUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfNamedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfNamedUnit const &":
        return _StepBasic.StepBasic_HArray1OfNamedUnit_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfNamedUnit &":
        return _StepBasic.StepBasic_HArray1OfNamedUnit_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfNamedUnit_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfNamedUnit
    __del__ = lambda self: None
StepBasic_HArray1OfNamedUnit_swigregister = _StepBasic.StepBasic_HArray1OfNamedUnit_swigregister
StepBasic_HArray1OfNamedUnit_swigregister(StepBasic_HArray1OfNamedUnit)

class StepBasic_HArray1OfProductContext(StepBasic_Array1OfProductContext, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfProductContext, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfProductContext, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfProductContext, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfProductContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfProductContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfProductContext const &":
        return _StepBasic.StepBasic_HArray1OfProductContext_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfProductContext &":
        return _StepBasic.StepBasic_HArray1OfProductContext_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfProductContext_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfProductContext
    __del__ = lambda self: None
StepBasic_HArray1OfProductContext_swigregister = _StepBasic.StepBasic_HArray1OfProductContext_swigregister
StepBasic_HArray1OfProductContext_swigregister(StepBasic_HArray1OfProductContext)

class StepBasic_HArray1OfDocument(StepBasic_Array1OfDocument, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfDocument, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfDocument, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfDocument, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfDocument const &":
        return _StepBasic.StepBasic_HArray1OfDocument_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfDocument &":
        return _StepBasic.StepBasic_HArray1OfDocument_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfDocument_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfDocument
    __del__ = lambda self: None
StepBasic_HArray1OfDocument_swigregister = _StepBasic.StepBasic_HArray1OfDocument_swigregister
StepBasic_HArray1OfDocument_swigregister(StepBasic_HArray1OfDocument)

class StepBasic_HArray1OfProduct(StepBasic_Array1OfProduct, OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [StepBasic_Array1OfProduct, OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepBasic_HArray1OfProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [StepBasic_Array1OfProduct, OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepBasic_HArray1OfProduct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StepBasic.new_StepBasic_HArray1OfProduct(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Array1(self) -> "StepBasic_Array1OfProduct const &":
        return _StepBasic.StepBasic_HArray1OfProduct_Array1(self)

    def ChangeArray1(self) -> "StepBasic_Array1OfProduct &":
        return _StepBasic.StepBasic_HArray1OfProduct_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_StepBasic_HArray1OfProduct_DownCast(t)

    __swig_destroy__ = _StepBasic.delete_StepBasic_HArray1OfProduct
    __del__ = lambda self: None
StepBasic_HArray1OfProduct_swigregister = _StepBasic.StepBasic_HArray1OfProduct_swigregister
StepBasic_HArray1OfProduct_swigregister(StepBasic_HArray1OfProduct)



# This file is compatible with both classic and new-style classes.


