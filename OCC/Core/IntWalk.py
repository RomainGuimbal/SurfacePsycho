# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
IntWalk module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_intwalk.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntWalk')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntWalk')
    _IntWalk = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntWalk', [dirname(__file__)])
        except ImportError:
            import _IntWalk
            return _IntWalk
        try:
            _mod = imp.load_module('_IntWalk', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntWalk = swig_import_helper()
    del swig_import_helper
else:
    import _IntWalk
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntWalk.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _IntWalk.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IntWalk.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _IntWalk.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _IntWalk.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _IntWalk.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _IntWalk.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _IntWalk.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _IntWalk.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _IntWalk.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IntWalk.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _IntWalk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _IntWalk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IntWalk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _IntWalk.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _IntWalk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _IntWalk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IntWalk.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _IntWalk.process_exception(error, method_name, class_name)
process_exception = _IntWalk.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.IntImp
import OCC.Core.IntSurf

from enum import IntEnum
from OCC.Core.Exception import *

IntWalk_PasTropGrand = _IntWalk.IntWalk_PasTropGrand
IntWalk_StepTooSmall = _IntWalk.IntWalk_StepTooSmall
IntWalk_PointConfondu = _IntWalk.IntWalk_PointConfondu
IntWalk_ArretSurPointPrecedent = _IntWalk.IntWalk_ArretSurPointPrecedent
IntWalk_ArretSurPoint = _IntWalk.IntWalk_ArretSurPoint
IntWalk_OK = _IntWalk.IntWalk_OK


class IntWalk_StatusDeflection(IntEnum):
	IntWalk_PasTropGrand = 0
	IntWalk_StepTooSmall = 1
	IntWalk_PointConfondu = 2
	IntWalk_ArretSurPointPrecedent = 3
	IntWalk_ArretSurPoint = 4
	IntWalk_OK = 5
IntWalk_PasTropGrand = IntWalk_StatusDeflection.IntWalk_PasTropGrand
IntWalk_StepTooSmall = IntWalk_StatusDeflection.IntWalk_StepTooSmall
IntWalk_PointConfondu = IntWalk_StatusDeflection.IntWalk_PointConfondu
IntWalk_ArretSurPointPrecedent = IntWalk_StatusDeflection.IntWalk_ArretSurPointPrecedent
IntWalk_ArretSurPoint = IntWalk_StatusDeflection.IntWalk_ArretSurPoint
IntWalk_OK = IntWalk_StatusDeflection.IntWalk_OK

class IntWalk_TheFunctionOfTheInt2S(OCC.Core.math.math_FunctionSetWithDerivatives):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionSetWithDerivatives]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntWalk_TheFunctionOfTheInt2S, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.math.math_FunctionSetWithDerivatives]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntWalk_TheFunctionOfTheInt2S, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface

        Returns
        -------
        None

        """
        this = _IntWalk.new_IntWalk_TheFunctionOfTheInt2S(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AuxillarSurface1(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_AuxillarSurface1(self, *args)


    def AuxillarSurface2(self, *args) -> "opencascade::handle< Adaptor3d_HSurface > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_HSurface>

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_AuxillarSurface2(self, *args)


    def ComputeParameters(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        ChoixIso: IntImp_ConstIsoparametric
        Param: TColStd_Array1OfReal
        UVap: math_Vector
        BornInf: math_Vector
        BornSup: math_Vector
        Tolerance: math_Vector

        Returns
        -------
        None

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_ComputeParameters(self, *args)


    def Direction(self, *args) -> "gp_Dir":
        """
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Direction(self, *args)


    def DirectionOnS1(self, *args) -> "gp_Dir2d":
        """
        No available documentation.

        Returns
        -------
        gp_Dir2d

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_DirectionOnS1(self, *args)


    def DirectionOnS2(self, *args) -> "gp_Dir2d":
        """
        No available documentation.

        Returns
        -------
        gp_Dir2d

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_DirectionOnS2(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        UVap: math_Vector
        Param: TColStd_Array1OfReal

        Returns
        -------
        BestChoix: IntImp_ConstIsoparametric

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_IsTangent(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Point(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        Returns somme des fi*fi.

        Returns
        -------
        float

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Root(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntWalk.delete_IntWalk_TheFunctionOfTheInt2S
    __del__ = lambda self: None
IntWalk_TheFunctionOfTheInt2S_swigregister = _IntWalk.IntWalk_TheFunctionOfTheInt2S_swigregister
IntWalk_TheFunctionOfTheInt2S_swigregister(IntWalk_TheFunctionOfTheInt2S)

class IntWalk_TheInt2S(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntWalk_TheInt2S, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntWalk_TheInt2S, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Compute the solution point with the close point.

        Parameters
        ----------
        Param: TColStd_Array1OfReal
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        TolTangency: float

        Returns
        -------
        None

        Initialize the parameters to compute the solution point it 's possible to write to optimize: intimp_int2s inter(s1,s2,func,toltangency); math_functionsetroot rsnld(inter.function()); while ...{ param(1)=... param(2)=... param(3)=... inter.perform(param,rsnld); }.

        Parameters
        ----------
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        TolTangency: float

        Returns
        -------
        None

        """
        this = _IntWalk.new_IntWalk_TheInt2S(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangePoint(self, *args) -> "IntSurf_PntOn2S &":
        """
        Return the intersection point which is enable for changing.

        Returns
        -------
        IntSurf_PntOn2S

        """
        return _IntWalk.IntWalk_TheInt2S_ChangePoint(self, *args)


    def Direction(self, *args) -> "gp_Dir const":
        """
        Returns the tangent at the intersection line.

        Returns
        -------
        gp_Dir

        """
        return _IntWalk.IntWalk_TheInt2S_Direction(self, *args)


    def DirectionOnS1(self, *args) -> "gp_Dir2d const":
        """
        Returns the tangent at the intersection line in the parametric space of the first surface.

        Returns
        -------
        gp_Dir2d

        """
        return _IntWalk.IntWalk_TheInt2S_DirectionOnS1(self, *args)


    def DirectionOnS2(self, *args) -> "gp_Dir2d const":
        """
        Returns the tangent at the intersection line in the parametric space of the second surface.

        Returns
        -------
        gp_Dir2d

        """
        return _IntWalk.IntWalk_TheInt2S_DirectionOnS2(self, *args)


    def Function(self, *args) -> "IntWalk_TheFunctionOfTheInt2S &":
        """
        Return the math function which is used to compute the intersection.

        Returns
        -------
        IntWalk_TheFunctionOfTheInt2S

        """
        return _IntWalk.IntWalk_TheInt2S_Function(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        Returns true if the creation completed without failure.

        Returns
        -------
        bool

        """
        return _IntWalk.IntWalk_TheInt2S_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        Returns true when there is no solution to the problem.

        Returns
        -------
        bool

        """
        return _IntWalk.IntWalk_TheInt2S_IsEmpty(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        Returns true if the surfaces are tangent at the intersection point.

        Returns
        -------
        bool

        """
        return _IntWalk.IntWalk_TheInt2S_IsTangent(self, *args)


    def Perform(self, *args) -> "IntImp_ConstIsoparametric":
        """
        Returns the best constant isoparametric to find the next intersection's point +stores the solution point (the solution point is found with the close point to intersect the isoparametric with the other patch; the choice of the isoparametic is calculated).

        Parameters
        ----------
        Param: TColStd_Array1OfReal
        Rsnld: math_FunctionSetRoot

        Returns
        -------
        IntImp_ConstIsoparametric

        Returns the best constant isoparametric to find the next intersection's point +stores the solution point (the solution point is found with the close point to intersect the isoparametric with the other patch; the choice of the isoparametic is given by choixiso).

        Parameters
        ----------
        Param: TColStd_Array1OfReal
        Rsnld: math_FunctionSetRoot
        ChoixIso: IntImp_ConstIsoparametric

        Returns
        -------
        IntImp_ConstIsoparametric

        """
        return _IntWalk.IntWalk_TheInt2S_Perform(self, *args)


    def Point(self, *args) -> "IntSurf_PntOn2S const &":
        """
        Returns the intersection point.

        Returns
        -------
        IntSurf_PntOn2S

        """
        return _IntWalk.IntWalk_TheInt2S_Point(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _IntWalk.delete_IntWalk_TheInt2S
    __del__ = lambda self: None
IntWalk_TheInt2S_swigregister = _IntWalk.IntWalk_TheInt2S_swigregister
IntWalk_TheInt2S_swigregister(IntWalk_TheInt2S)

class IntWalk_WalkingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntWalk_WalkingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntWalk_WalkingData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ustart"] = _IntWalk.IntWalk_WalkingData_ustart_set
    __swig_getmethods__["ustart"] = _IntWalk.IntWalk_WalkingData_ustart_get
    if _newclass:
        ustart = _swig_property(_IntWalk.IntWalk_WalkingData_ustart_get, _IntWalk.IntWalk_WalkingData_ustart_set)
    __swig_setmethods__["vstart"] = _IntWalk.IntWalk_WalkingData_vstart_set
    __swig_getmethods__["vstart"] = _IntWalk.IntWalk_WalkingData_vstart_get
    if _newclass:
        vstart = _swig_property(_IntWalk.IntWalk_WalkingData_vstart_get, _IntWalk.IntWalk_WalkingData_vstart_set)
    __swig_setmethods__["etat"] = _IntWalk.IntWalk_WalkingData_etat_set
    __swig_getmethods__["etat"] = _IntWalk.IntWalk_WalkingData_etat_get
    if _newclass:
        etat = _swig_property(_IntWalk.IntWalk_WalkingData_etat_get, _IntWalk.IntWalk_WalkingData_etat_set)

    __repr__ = _dumps_object


    def __init__(self):
        this = _IntWalk.new_IntWalk_WalkingData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntWalk.delete_IntWalk_WalkingData
    __del__ = lambda self: None
IntWalk_WalkingData_swigregister = _IntWalk.IntWalk_WalkingData_swigregister
IntWalk_WalkingData_swigregister(IntWalk_WalkingData)



# This file is compatible with both classic and new-style classes.


