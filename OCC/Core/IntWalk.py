# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
IntWalk module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_intwalk.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IntWalk
else:
    import _IntWalk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntWalk.delete_SwigPyIterator

    def value(self):
        return _IntWalk.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IntWalk.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IntWalk.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IntWalk.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IntWalk.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IntWalk.SwigPyIterator_copy(self)

    def next(self):
        return _IntWalk.SwigPyIterator_next(self)

    def __next__(self):
        return _IntWalk.SwigPyIterator___next__(self)

    def previous(self):
        return _IntWalk.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IntWalk.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IntWalk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IntWalk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IntWalk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IntWalk.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IntWalk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IntWalk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IntWalk:
_IntWalk.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _IntWalk.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.math
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.IntImp
import OCC.Core.IntSurf

from enum import IntEnum
from OCC.Core.Exception import *

IntWalk_PasTropGrand = _IntWalk.IntWalk_PasTropGrand
IntWalk_StepTooSmall = _IntWalk.IntWalk_StepTooSmall
IntWalk_PointConfondu = _IntWalk.IntWalk_PointConfondu
IntWalk_ArretSurPointPrecedent = _IntWalk.IntWalk_ArretSurPointPrecedent
IntWalk_ArretSurPoint = _IntWalk.IntWalk_ArretSurPoint
IntWalk_OK = _IntWalk.IntWalk_OK


class IntWalk_StatusDeflection(IntEnum):
	IntWalk_PasTropGrand = 0
	IntWalk_StepTooSmall = 1
	IntWalk_PointConfondu = 2
	IntWalk_ArretSurPointPrecedent = 3
	IntWalk_ArretSurPoint = 4
	IntWalk_OK = 5
IntWalk_PasTropGrand = IntWalk_StatusDeflection.IntWalk_PasTropGrand
IntWalk_StepTooSmall = IntWalk_StatusDeflection.IntWalk_StepTooSmall
IntWalk_PointConfondu = IntWalk_StatusDeflection.IntWalk_PointConfondu
IntWalk_ArretSurPointPrecedent = IntWalk_StatusDeflection.IntWalk_ArretSurPointPrecedent
IntWalk_ArretSurPoint = IntWalk_StatusDeflection.IntWalk_ArretSurPoint
IntWalk_OK = IntWalk_StatusDeflection.IntWalk_OK

class IntWalk_TheFunctionOfTheInt2S(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _IntWalk.IntWalk_TheFunctionOfTheInt2S_swiginit(self, _IntWalk.new_IntWalk_TheFunctionOfTheInt2S(*args))

    def AuxillarSurface1(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Adaptor3d_Surface>

        Description
        -----------
        No available documentation.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_AuxillarSurface1(self, *args)

    def AuxillarSurface2(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Adaptor3d_Surface>

        Description
        -----------
        No available documentation.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_AuxillarSurface2(self, *args)

    def ComputeParameters(self, *args):
        r"""

        Parameters
        ----------
        ChoixIso: IntImp_ConstIsoparametric
        Param: TColStd_Array1OfReal
        UVap: math_Vector
        BornInf: math_Vector
        BornSup: math_Vector
        Tolerance: math_Vector

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_ComputeParameters(self, *args)

    def Direction(self, *args):
        r"""
        Return
        -------
        gp_Dir

        Description
        -----------
        No available documentation.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Direction(self, *args)

    def DirectionOnS1(self, *args):
        r"""
        Return
        -------
        gp_Dir2d

        Description
        -----------
        No available documentation.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_DirectionOnS1(self, *args)

    def DirectionOnS2(self, *args):
        r"""
        Return
        -------
        gp_Dir2d

        Description
        -----------
        No available documentation.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_DirectionOnS2(self, *args)

    def IsTangent(self, *args):
        r"""

        Parameters
        ----------
        UVap: math_Vector
        Param: TColStd_Array1OfReal

        Return
        -------
        BestChoix: IntImp_ConstIsoparametric

        Description
        -----------
        No available documentation.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_IsTangent(self, *args)

    def Point(self, *args):
        r"""
        Return
        -------
        gp_Pnt

        Description
        -----------
        No available documentation.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Point(self, *args)

    def Root(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns somme des fi*fi.

        """
        return _IntWalk.IntWalk_TheFunctionOfTheInt2S_Root(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntWalk.delete_IntWalk_TheFunctionOfTheInt2S

# Register IntWalk_TheFunctionOfTheInt2S in _IntWalk:
_IntWalk.IntWalk_TheFunctionOfTheInt2S_swigregister(IntWalk_TheFunctionOfTheInt2S)
class IntWalk_TheInt2S(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        Param: TColStd_Array1OfReal
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        TolTangency: float

        Return
        -------
        None

        Description
        -----------
        Compute the solution point with the close point.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        TolTangency: float

        Return
        -------
        None

        Description
        -----------
        Initialize the parameters to compute the solution point it 's possible to write to optimize: intimp_int2s inter(s1,s2,func,toltangency); math_functionsetroot rsnld(inter.function()); while ...{ param(1)=... param(2)=... param(3)=... inter.perform(param,rsnld); }.

        """
        _IntWalk.IntWalk_TheInt2S_swiginit(self, _IntWalk.new_IntWalk_TheInt2S(*args))

    def ChangePoint(self, *args):
        r"""
        Return
        -------
        IntSurf_PntOn2S

        Description
        -----------
        Return the intersection point which is enable for changing.

        """
        return _IntWalk.IntWalk_TheInt2S_ChangePoint(self, *args)

    def Direction(self, *args):
        r"""
        Return
        -------
        gp_Dir

        Description
        -----------
        Returns the tangent at the intersection line.

        """
        return _IntWalk.IntWalk_TheInt2S_Direction(self, *args)

    def DirectionOnS1(self, *args):
        r"""
        Return
        -------
        gp_Dir2d

        Description
        -----------
        Returns the tangent at the intersection line in the parametric space of the first surface.

        """
        return _IntWalk.IntWalk_TheInt2S_DirectionOnS1(self, *args)

    def DirectionOnS2(self, *args):
        r"""
        Return
        -------
        gp_Dir2d

        Description
        -----------
        Returns the tangent at the intersection line in the parametric space of the second surface.

        """
        return _IntWalk.IntWalk_TheInt2S_DirectionOnS2(self, *args)

    def Function(self, *args):
        r"""
        Return
        -------
        IntWalk_TheFunctionOfTheInt2S

        Description
        -----------
        Return the math function which is used to compute the intersection.

        """
        return _IntWalk.IntWalk_TheInt2S_Function(self, *args)

    def IsDone(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the creation completed without failure.

        """
        return _IntWalk.IntWalk_TheInt2S_IsDone(self, *args)

    def IsEmpty(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when there is no solution to the problem.

        """
        return _IntWalk.IntWalk_TheInt2S_IsEmpty(self, *args)

    def IsTangent(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the surfaces are tangent at the intersection point.

        """
        return _IntWalk.IntWalk_TheInt2S_IsTangent(self, *args)

    def Perform(self, *args):
        r"""

        Parameters
        ----------
        Param: TColStd_Array1OfReal
        Rsnld: math_FunctionSetRoot

        Return
        -------
        IntImp_ConstIsoparametric

        Description
        -----------
        Returns the best constant isoparametric to find the next intersection's point +stores the solution point (the solution point is found with the close point to intersect the isoparametric with the other patch; the choice of the isoparametic is calculated).

        Parameters
        ----------
        Param: TColStd_Array1OfReal
        Rsnld: math_FunctionSetRoot
        ChoixIso: IntImp_ConstIsoparametric

        Return
        -------
        IntImp_ConstIsoparametric

        Description
        -----------
        Returns the best constant isoparametric to find the next intersection's point +stores the solution point (the solution point is found with the close point to intersect the isoparametric with the other patch; the choice of the isoparametic is given by choixiso).

        """
        return _IntWalk.IntWalk_TheInt2S_Perform(self, *args)

    def Point(self, *args):
        r"""
        Return
        -------
        IntSurf_PntOn2S

        Description
        -----------
        Returns the intersection point.

        """
        return _IntWalk.IntWalk_TheInt2S_Point(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _IntWalk.delete_IntWalk_TheInt2S

# Register IntWalk_TheInt2S in _IntWalk:
_IntWalk.IntWalk_TheInt2S_swigregister(IntWalk_TheInt2S)
class IntWalk_WalkingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ustart = property(_IntWalk.IntWalk_WalkingData_ustart_get, _IntWalk.IntWalk_WalkingData_ustart_set)
    vstart = property(_IntWalk.IntWalk_WalkingData_vstart_get, _IntWalk.IntWalk_WalkingData_vstart_set)
    etat = property(_IntWalk.IntWalk_WalkingData_etat_get, _IntWalk.IntWalk_WalkingData_etat_set)

    __repr__ = _dumps_object


    def __init__(self):
        _IntWalk.IntWalk_WalkingData_swiginit(self, _IntWalk.new_IntWalk_WalkingData())
    __swig_destroy__ = _IntWalk.delete_IntWalk_WalkingData

# Register IntWalk_WalkingData in _IntWalk:
_IntWalk.IntWalk_WalkingData_swigregister(IntWalk_WalkingData)



