# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ShapeProcess module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_shapeprocess.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeProcess')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeProcess')
    _ShapeProcess = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeProcess', [dirname(__file__)])
        except ImportError:
            import _ShapeProcess
            return _ShapeProcess
        try:
            _mod = imp.load_module('_ShapeProcess', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeProcess = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeProcess
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeProcess.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _ShapeProcess.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ShapeProcess.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ShapeProcess.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _ShapeProcess.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeProcess.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _ShapeProcess.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _ShapeProcess.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _ShapeProcess.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _ShapeProcess.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ShapeProcess.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeProcess.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _ShapeProcess.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ShapeProcess.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ShapeProcess.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ShapeProcess.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _ShapeProcess.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ShapeProcess.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ShapeProcess.process_exception(error, method_name, class_name)
process_exception = _ShapeProcess.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.Resource
import OCC.Core.TopoDS
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.TColgp
import OCC.Core.BVH
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Geom2d
import OCC.Core.TopTools
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.ShapeExtend
import OCC.Core.TColGeom
import OCC.Core.ShapeBuild

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_ShapeProcess_Context_Create() -> "opencascade::handle< ShapeProcess_Context >":
    return _ShapeProcess.Handle_ShapeProcess_Context_Create()
Handle_ShapeProcess_Context_Create = _ShapeProcess.Handle_ShapeProcess_Context_Create

def Handle_ShapeProcess_Context_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeProcess_Context >":
    return _ShapeProcess.Handle_ShapeProcess_Context_DownCast(t)
Handle_ShapeProcess_Context_DownCast = _ShapeProcess.Handle_ShapeProcess_Context_DownCast

def Handle_ShapeProcess_Context_IsNull(t: 'opencascade::handle< ShapeProcess_Context > const &') -> "bool":
    return _ShapeProcess.Handle_ShapeProcess_Context_IsNull(t)
Handle_ShapeProcess_Context_IsNull = _ShapeProcess.Handle_ShapeProcess_Context_IsNull

def Handle_ShapeProcess_Operator_Create() -> "opencascade::handle< ShapeProcess_Operator >":
    return _ShapeProcess.Handle_ShapeProcess_Operator_Create()
Handle_ShapeProcess_Operator_Create = _ShapeProcess.Handle_ShapeProcess_Operator_Create

def Handle_ShapeProcess_Operator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeProcess_Operator >":
    return _ShapeProcess.Handle_ShapeProcess_Operator_DownCast(t)
Handle_ShapeProcess_Operator_DownCast = _ShapeProcess.Handle_ShapeProcess_Operator_DownCast

def Handle_ShapeProcess_Operator_IsNull(t: 'opencascade::handle< ShapeProcess_Operator > const &') -> "bool":
    return _ShapeProcess.Handle_ShapeProcess_Operator_IsNull(t)
Handle_ShapeProcess_Operator_IsNull = _ShapeProcess.Handle_ShapeProcess_Operator_IsNull

def Handle_ShapeProcess_ShapeContext_Create() -> "opencascade::handle< ShapeProcess_ShapeContext >":
    return _ShapeProcess.Handle_ShapeProcess_ShapeContext_Create()
Handle_ShapeProcess_ShapeContext_Create = _ShapeProcess.Handle_ShapeProcess_ShapeContext_Create

def Handle_ShapeProcess_ShapeContext_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeProcess_ShapeContext >":
    return _ShapeProcess.Handle_ShapeProcess_ShapeContext_DownCast(t)
Handle_ShapeProcess_ShapeContext_DownCast = _ShapeProcess.Handle_ShapeProcess_ShapeContext_DownCast

def Handle_ShapeProcess_ShapeContext_IsNull(t: 'opencascade::handle< ShapeProcess_ShapeContext > const &') -> "bool":
    return _ShapeProcess.Handle_ShapeProcess_ShapeContext_IsNull(t)
Handle_ShapeProcess_ShapeContext_IsNull = _ShapeProcess.Handle_ShapeProcess_ShapeContext_IsNull

def Handle_ShapeProcess_UOperator_Create() -> "opencascade::handle< ShapeProcess_UOperator >":
    return _ShapeProcess.Handle_ShapeProcess_UOperator_Create()
Handle_ShapeProcess_UOperator_Create = _ShapeProcess.Handle_ShapeProcess_UOperator_Create

def Handle_ShapeProcess_UOperator_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< ShapeProcess_UOperator >":
    return _ShapeProcess.Handle_ShapeProcess_UOperator_DownCast(t)
Handle_ShapeProcess_UOperator_DownCast = _ShapeProcess.Handle_ShapeProcess_UOperator_DownCast

def Handle_ShapeProcess_UOperator_IsNull(t: 'opencascade::handle< ShapeProcess_UOperator > const &') -> "bool":
    return _ShapeProcess.Handle_ShapeProcess_UOperator_IsNull(t)
Handle_ShapeProcess_UOperator_IsNull = _ShapeProcess.Handle_ShapeProcess_UOperator_IsNull
class shapeprocess(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shapeprocess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shapeprocess, name)
    __repr__ = _swig_repr

    def FindOperator(*args) -> "Standard_Boolean":
        """
        Finds operator by its name.

        Parameters
        ----------
        name: char *
        op: ShapeProcess_Operator

        Returns
        -------
        bool

        """
        return _ShapeProcess.shapeprocess_FindOperator(*args)

    FindOperator = staticmethod(FindOperator)

    def Perform(*args) -> "Standard_Boolean":
        """
        Performs a specified sequence of operators on context resource file and other data should be already loaded to context (including description of sequence seq).

        Parameters
        ----------
        context: ShapeProcess_Context
        seq: char *
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        bool

        """
        return _ShapeProcess.shapeprocess_Perform(*args)

    Perform = staticmethod(Perform)

    def RegisterOperator(*args) -> "Standard_Boolean":
        """
        Registers operator to make it visible for performer.

        Parameters
        ----------
        name: char *
        op: ShapeProcess_Operator

        Returns
        -------
        bool

        """
        return _ShapeProcess.shapeprocess_RegisterOperator(*args)

    RegisterOperator = staticmethod(RegisterOperator)

    __repr__ = _dumps_object


    def __init__(self):
        this = _ShapeProcess.new_shapeprocess()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeProcess.delete_shapeprocess
    __del__ = lambda self: None
shapeprocess_swigregister = _ShapeProcess.shapeprocess_swigregister
shapeprocess_swigregister(shapeprocess)

def shapeprocess_FindOperator(*args) -> "Standard_Boolean":
    """
    Finds operator by its name.

    Parameters
    ----------
    name: char *
    op: ShapeProcess_Operator

    Returns
    -------
    bool

    """
    return _ShapeProcess.shapeprocess_FindOperator(*args)

def shapeprocess_Perform(*args) -> "Standard_Boolean":
    """
    Performs a specified sequence of operators on context resource file and other data should be already loaded to context (including description of sequence seq).

    Parameters
    ----------
    context: ShapeProcess_Context
    seq: char *
    theProgress: Message_ProgressRange,optional
    	default value is Message_ProgressRange()

    Returns
    -------
    bool

    """
    return _ShapeProcess.shapeprocess_Perform(*args)

def shapeprocess_RegisterOperator(*args) -> "Standard_Boolean":
    """
    Registers operator to make it visible for performer.

    Parameters
    ----------
    name: char *
    op: ShapeProcess_Operator

    Returns
    -------
    bool

    """
    return _ShapeProcess.shapeprocess_RegisterOperator(*args)

class ShapeProcess_Context(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeProcess_Context, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeProcess_Context, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty tool.

        Returns
        -------
        None

        Creates a new tool and initialises by name of resource file and (if specified) starting scope calls method init().

        Parameters
        ----------
        file: char *
        scope: char *,optional
        	default value is 

        Returns
        -------
        None

        """
        this = _ShapeProcess.new_ShapeProcess_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def BooleanVal(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        param: char *
        def: bool

        Returns
        -------
        bool

        """
        return _ShapeProcess.ShapeProcess_Context_BooleanVal(self, *args)


    def GetBoolean(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        param: char *

        Returns
        -------
        val: bool

        """
        return _ShapeProcess.ShapeProcess_Context_GetBoolean(self, *args)


    def GetInteger(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        param: char *

        Returns
        -------
        val: int

        """
        return _ShapeProcess.ShapeProcess_Context_GetInteger(self, *args)


    def GetReal(self, *args) -> "Standard_Boolean":
        """
        No available documentation.

        Parameters
        ----------
        param: char *

        Returns
        -------
        val: float

        """
        return _ShapeProcess.ShapeProcess_Context_GetReal(self, *args)


    def GetString(self, *args) -> "Standard_Boolean":
        """
        Get value of parameter as being of specific type returns false if parameter is not defined or has a wrong type.

        Parameters
        ----------
        param: char *
        val: TCollection_AsciiString

        Returns
        -------
        bool

        """
        return _ShapeProcess.ShapeProcess_Context_GetString(self, *args)


    def Init(self, *args) -> "Standard_Boolean":
        """
        Initialises a tool by loading resource file and (if specified) sets starting scope returns false if resource file not found.

        Parameters
        ----------
        file: char *
        scope: char *,optional
        	default value is 

        Returns
        -------
        bool

        """
        return _ShapeProcess.ShapeProcess_Context_Init(self, *args)


    def IntegerVal(self, *args) -> "Standard_Integer":
        """
        No available documentation.

        Parameters
        ----------
        param: char *
        def: int

        Returns
        -------
        int

        """
        return _ShapeProcess.ShapeProcess_Context_IntegerVal(self, *args)


    def IsParamSet(self, *args) -> "Standard_Boolean":
        """
        Returns true if parameter is defined in the resource file.

        Parameters
        ----------
        param: char *

        Returns
        -------
        bool

        """
        return _ShapeProcess.ShapeProcess_Context_IsParamSet(self, *args)


    def LoadResourceManager(self, *args) -> "opencascade::handle< Resource_Manager >":
        """
        Loading resource_manager object if this object not equal internal static resource_manager object or internal static resource_manager object is null.

        Parameters
        ----------
        file: char *

        Returns
        -------
        opencascade::handle<Resource_Manager>

        """
        return _ShapeProcess.ShapeProcess_Context_LoadResourceManager(self, *args)


    def Messenger(self, *args) -> "opencascade::handle< Message_Messenger >":
        """
        Returns messenger used for outputting messages.

        Returns
        -------
        opencascade::handle<Message_Messenger>

        """
        return _ShapeProcess.ShapeProcess_Context_Messenger(self, *args)


    def RealVal(self, *args) -> "Standard_Real":
        """
        No available documentation.

        Parameters
        ----------
        param: char *
        def: float

        Returns
        -------
        float

        """
        return _ShapeProcess.ShapeProcess_Context_RealVal(self, *args)


    def ResourceManager(self, *args) -> "opencascade::handle< Resource_Manager > const &":
        """
        Returns internal resource_manager object.

        Returns
        -------
        opencascade::handle<Resource_Manager>

        """
        return _ShapeProcess.ShapeProcess_Context_ResourceManager(self, *args)


    def SetMessenger(self, *args) -> "void":
        """
        Sets messenger used for outputting messages.

        Parameters
        ----------
        messenger: Message_Messenger

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_Context_SetMessenger(self, *args)


    def SetScope(self, *args) -> "void":
        """
        Set a new (sub)scope.

        Parameters
        ----------
        scope: char *

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_Context_SetScope(self, *args)


    def SetTraceLevel(self, *args) -> "void":
        """
        Sets trace level used for outputting messages - 0: no trace at all - 1: errors - 2: errors and warnings - 3: all messages default is 1 : errors traced.

        Parameters
        ----------
        tracelev: int

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_Context_SetTraceLevel(self, *args)


    def StringVal(self, *args) -> "char const *":
        """
        Get value of parameter as being of specific type if parameter is not defined or does not have expected type, returns default value as specified.

        Parameters
        ----------
        param: char *
        def: char *

        Returns
        -------
        char *

        """
        return _ShapeProcess.ShapeProcess_Context_StringVal(self, *args)


    def TraceLevel(self, *args) -> "Standard_Integer":
        """
        Returns trace level used for outputting messages.

        Returns
        -------
        int

        """
        return _ShapeProcess.ShapeProcess_Context_TraceLevel(self, *args)


    def UnSetScope(self, *args) -> "void":
        """
        Go out of current scope.

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_Context_UnSetScope(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeProcess_Context_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_Context
    __del__ = lambda self: None
ShapeProcess_Context_swigregister = _ShapeProcess.ShapeProcess_Context_swigregister
ShapeProcess_Context_swigregister(ShapeProcess_Context)

class ShapeProcess_OperLibrary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeProcess_OperLibrary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeProcess_OperLibrary, name)
    __repr__ = _swig_repr

    def ApplyModifier(*args) -> "TopoDS_Shape":
        """
        Applies breptools_modification to a shape, taking into account sharing of components of compounds. if themutableinput vat is set to true then imput shape s can be modified during the modification process.

        Parameters
        ----------
        S: TopoDS_Shape
        context: ShapeProcess_ShapeContext
        M: BRepTools_Modification
        map: TopTools_DataMapOfShapeShape
        msg: ShapeExtend_MsgRegistrator,optional
        	default value is 0
        theMutableInput: bool,optional
        	default value is Standard_False

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_OperLibrary_ApplyModifier(*args)

    ApplyModifier = staticmethod(ApplyModifier)

    def Init(*args) -> "void":
        """
        Registers all the operators.

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_OperLibrary_Init(*args)

    Init = staticmethod(Init)

    __repr__ = _dumps_object


    def __init__(self):
        this = _ShapeProcess.new_ShapeProcess_OperLibrary()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_OperLibrary
    __del__ = lambda self: None
ShapeProcess_OperLibrary_swigregister = _ShapeProcess.ShapeProcess_OperLibrary_swigregister
ShapeProcess_OperLibrary_swigregister(ShapeProcess_OperLibrary)

def ShapeProcess_OperLibrary_ApplyModifier(*args) -> "TopoDS_Shape":
    """
    Applies breptools_modification to a shape, taking into account sharing of components of compounds. if themutableinput vat is set to true then imput shape s can be modified during the modification process.

    Parameters
    ----------
    S: TopoDS_Shape
    context: ShapeProcess_ShapeContext
    M: BRepTools_Modification
    map: TopTools_DataMapOfShapeShape
    msg: ShapeExtend_MsgRegistrator,optional
    	default value is 0
    theMutableInput: bool,optional
    	default value is Standard_False

    Returns
    -------
    TopoDS_Shape

    """
    return _ShapeProcess.ShapeProcess_OperLibrary_ApplyModifier(*args)

def ShapeProcess_OperLibrary_Init(*args) -> "void":
    """
    Registers all the operators.

    Returns
    -------
    None

    """
    return _ShapeProcess.ShapeProcess_OperLibrary_Init(*args)

class ShapeProcess_Operator(OCC.Core.Standard.Standard_Transient):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeProcess_Operator, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.Standard.Standard_Transient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeProcess_Operator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Perform(self, *args) -> "Standard_Boolean":
        """
        Performs operation and eventually records changes in the context.

        Parameters
        ----------
        context: ShapeProcess_Context
        theProgress: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        bool

        """
        return _ShapeProcess.ShapeProcess_Operator_Perform(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeProcess_Operator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_Operator
    __del__ = lambda self: None
ShapeProcess_Operator_swigregister = _ShapeProcess.ShapeProcess_Operator_swigregister
ShapeProcess_Operator_swigregister(ShapeProcess_Operator)

class ShapeProcess_ShapeContext(ShapeProcess_Context):
    __swig_setmethods__ = {}
    for _s in [ShapeProcess_Context]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeProcess_ShapeContext, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeProcess_Context]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeProcess_ShapeContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        file: char *
        seq: char *,optional
        	default value is 

        Returns
        -------
        None

        Initializes a tool by resource file and shape to be processed.

        Parameters
        ----------
        S: TopoDS_Shape
        file: char *
        seq: char *,optional
        	default value is 

        Returns
        -------
        None

        """
        this = _ShapeProcess.new_ShapeProcess_ShapeContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddMessage(self, *args) -> "void":
        """
        Record a message for shape s shape s should be one of subshapes of original shape (or whole one), but not one of intermediate shapes records only if message() is not null.

        Parameters
        ----------
        S: TopoDS_Shape
        msg: Message_Msg
        gravity: Message_Gravity,optional
        	default value is Message_Warning

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_AddMessage(self, *args)


    def ContinuityVal(self, *args) -> "GeomAbs_Shape":
        """
        Get value of parameter as being of the type geomabs_shape if parameter is not defined or does not have expected type, returns default value as specified.

        Parameters
        ----------
        param: char *
        def: GeomAbs_Shape

        Returns
        -------
        GeomAbs_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_ContinuityVal(self, *args)


    def GetContinuity(self, *args) -> "Standard_Boolean":
        """
        Get value of parameter as being of the type geomabs_shape returns false if parameter is not defined or has a wrong type.

        Parameters
        ----------
        param: char *

        Returns
        -------
        val: GeomAbs_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_GetContinuity(self, *args)


    def GetDetalisation(self, *args) -> "TopAbs_ShapeEnum":
        """
        Set and get value for detalisation level only shapes of types from topods_compound and until specified detalisation level will be recorded in maps to cancel mapping, use topabs_shape to force full mapping, use topabs_vertex the default level is topabs_face.

        Returns
        -------
        TopAbs_ShapeEnum

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_GetDetalisation(self, *args)


    def Init(self, *args) -> "void":
        """
        Initializes tool by a new shape and clears all results.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Init(self, *args)


    def IsNonManifold(self, *args) -> "Standard_Boolean":
        """
        Get nonmanifold flag.

        Returns
        -------
        bool

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_IsNonManifold(self, *args)


    def Map(self, *args) -> "TopTools_DataMapOfShapeShape const &":
        """
        Returns map of replacements shape -> shape this map is not recursive.

        Returns
        -------
        TopTools_DataMapOfShapeShape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Map(self, *args)


    def Messages(self, *args) -> "opencascade::handle< ShapeExtend_MsgRegistrator > const &":
        """
        No available documentation.

        Returns
        -------
        opencascade::handle<ShapeExtend_MsgRegistrator>

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Messages(self, *args)


    def PrintStatistics(self, *args) -> "void":
        """
        Prints statistics on shape processing onto the current messenger.

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_PrintStatistics(self, *args)


    def RecordModification(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        repl: TopTools_DataMapOfShapeShape
        msg: ShapeExtend_MsgRegistrator,optional
        	default value is 0

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        repl: ShapeBuild_ReShape
        msg: ShapeExtend_MsgRegistrator

        Returns
        -------
        None

        No available documentation.

        Parameters
        ----------
        repl: ShapeBuild_ReShape

        Returns
        -------
        None

        Records modifications and resets result accordingly note: modification of resulting shape should be explicitly defined in the maps along with modifications of subshapes //! in the last function, sh is the shape on which modifier was run. it can be different from the whole shape, but in that case result as a whole should be reset later either by call to setresult(), or by another call to recordmodification() which contains mapping of current result to a new one explicitly.

        Parameters
        ----------
        sh: TopoDS_Shape
        repl: BRepTools_Modifier
        msg: ShapeExtend_MsgRegistrator,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_RecordModification(self, *args)


    def Result(self, *args) -> "TopoDS_Shape const":
        """
        Returns current result.

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Result(self, *args)


    def SetDetalisation(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        level: TopAbs_ShapeEnum

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_SetDetalisation(self, *args)


    def SetNonManifold(self, *args) -> "void":
        """
        Set nonmanifold flag.

        Parameters
        ----------
        theNonManifold: bool

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_SetNonManifold(self, *args)


    def SetResult(self, *args) -> "void":
        """
        Sets a new result shape note: this method should be used very carefully to keep consistency of modifications it is recommended to use recordmodification() methods with explicit definition of mapping from current result to a new one.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_SetResult(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        Returns shape being processed.

        Returns
        -------
        TopoDS_Shape

        """
        return _ShapeProcess.ShapeProcess_ShapeContext_Shape(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_ShapeProcess_ShapeContext_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_ShapeContext
    __del__ = lambda self: None
ShapeProcess_ShapeContext_swigregister = _ShapeProcess.ShapeProcess_ShapeContext_swigregister
ShapeProcess_ShapeContext_swigregister(ShapeProcess_ShapeContext)

class ShapeProcess_UOperator(ShapeProcess_Operator):
    __swig_setmethods__ = {}
    for _s in [ShapeProcess_Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeProcess_UOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [ShapeProcess_Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeProcess_UOperator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates operator with implementation defined as operfunc (static function).

        Parameters
        ----------
        func: ShapeProcess_OperFunc

        Returns
        -------
        None

        """
        this = _ShapeProcess.new_ShapeProcess_UOperator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this


    @staticmethod
    def DownCast(t):
      return Handle_ShapeProcess_UOperator_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeProcess.delete_ShapeProcess_UOperator
    __del__ = lambda self: None
ShapeProcess_UOperator_swigregister = _ShapeProcess.ShapeProcess_UOperator_swigregister
ShapeProcess_UOperator_swigregister(ShapeProcess_UOperator)



# This file is compatible with both classic and new-style classes.


