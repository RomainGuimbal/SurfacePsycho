# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
XmlMDataXtd module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_xmlmdataxtd.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMDataXtd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMDataXtd')
    _XmlMDataXtd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMDataXtd', [dirname(__file__)])
        except ImportError:
            import _XmlMDataXtd
            return _XmlMDataXtd
        try:
            _mod = imp.load_module('_XmlMDataXtd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMDataXtd = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMDataXtd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDataXtd.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _XmlMDataXtd.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlMDataXtd.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _XmlMDataXtd.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _XmlMDataXtd.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMDataXtd.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _XmlMDataXtd.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _XmlMDataXtd.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _XmlMDataXtd.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _XmlMDataXtd.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlMDataXtd.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMDataXtd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _XmlMDataXtd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlMDataXtd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _XmlMDataXtd.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _XmlMDataXtd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _XmlMDataXtd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMDataXtd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _XmlMDataXtd.process_exception(error, method_name, class_name)
process_exception = _XmlMDataXtd.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.XmlMDF
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TDF
import OCC.Core.XmlObjMgt
import OCC.Core.LDOM
import OCC.Core.gp
import OCC.Core.Storage

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_XmlMDataXtd_ConstraintDriver_Create() -> "opencascade::handle< XmlMDataXtd_ConstraintDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_Create()
Handle_XmlMDataXtd_ConstraintDriver_Create = _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_Create

def Handle_XmlMDataXtd_ConstraintDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMDataXtd_ConstraintDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_DownCast(t)
Handle_XmlMDataXtd_ConstraintDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_DownCast

def Handle_XmlMDataXtd_ConstraintDriver_IsNull(t: 'opencascade::handle< XmlMDataXtd_ConstraintDriver > const &') -> "bool":
    return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_IsNull(t)
Handle_XmlMDataXtd_ConstraintDriver_IsNull = _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_IsNull

def Handle_XmlMDataXtd_GeometryDriver_Create() -> "opencascade::handle< XmlMDataXtd_GeometryDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_Create()
Handle_XmlMDataXtd_GeometryDriver_Create = _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_Create

def Handle_XmlMDataXtd_GeometryDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMDataXtd_GeometryDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_DownCast(t)
Handle_XmlMDataXtd_GeometryDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_DownCast

def Handle_XmlMDataXtd_GeometryDriver_IsNull(t: 'opencascade::handle< XmlMDataXtd_GeometryDriver > const &') -> "bool":
    return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_IsNull(t)
Handle_XmlMDataXtd_GeometryDriver_IsNull = _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_IsNull

def Handle_XmlMDataXtd_PatternStdDriver_Create() -> "opencascade::handle< XmlMDataXtd_PatternStdDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_Create()
Handle_XmlMDataXtd_PatternStdDriver_Create = _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_Create

def Handle_XmlMDataXtd_PatternStdDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMDataXtd_PatternStdDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_DownCast(t)
Handle_XmlMDataXtd_PatternStdDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_DownCast

def Handle_XmlMDataXtd_PatternStdDriver_IsNull(t: 'opencascade::handle< XmlMDataXtd_PatternStdDriver > const &') -> "bool":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_IsNull(t)
Handle_XmlMDataXtd_PatternStdDriver_IsNull = _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_IsNull

def Handle_XmlMDataXtd_PositionDriver_Create() -> "opencascade::handle< XmlMDataXtd_PositionDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_Create()
Handle_XmlMDataXtd_PositionDriver_Create = _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_Create

def Handle_XmlMDataXtd_PositionDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMDataXtd_PositionDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_DownCast(t)
Handle_XmlMDataXtd_PositionDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_DownCast

def Handle_XmlMDataXtd_PositionDriver_IsNull(t: 'opencascade::handle< XmlMDataXtd_PositionDriver > const &') -> "bool":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_IsNull(t)
Handle_XmlMDataXtd_PositionDriver_IsNull = _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_IsNull

def Handle_XmlMDataXtd_PresentationDriver_Create() -> "opencascade::handle< XmlMDataXtd_PresentationDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_Create()
Handle_XmlMDataXtd_PresentationDriver_Create = _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_Create

def Handle_XmlMDataXtd_PresentationDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMDataXtd_PresentationDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_DownCast(t)
Handle_XmlMDataXtd_PresentationDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_DownCast

def Handle_XmlMDataXtd_PresentationDriver_IsNull(t: 'opencascade::handle< XmlMDataXtd_PresentationDriver > const &') -> "bool":
    return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_IsNull(t)
Handle_XmlMDataXtd_PresentationDriver_IsNull = _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_IsNull

def Handle_XmlMDataXtd_TriangulationDriver_Create() -> "opencascade::handle< XmlMDataXtd_TriangulationDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_Create()
Handle_XmlMDataXtd_TriangulationDriver_Create = _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_Create

def Handle_XmlMDataXtd_TriangulationDriver_DownCast(t: 'opencascade::handle< Standard_Transient > const &') -> "opencascade::handle< XmlMDataXtd_TriangulationDriver >":
    return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_DownCast(t)
Handle_XmlMDataXtd_TriangulationDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_DownCast

def Handle_XmlMDataXtd_TriangulationDriver_IsNull(t: 'opencascade::handle< XmlMDataXtd_TriangulationDriver > const &') -> "bool":
    return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_IsNull(t)
Handle_XmlMDataXtd_TriangulationDriver_IsNull = _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_IsNull
class xmlmdataxtd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xmlmdataxtd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xmlmdataxtd, name)
    __repr__ = _swig_repr

    def AddDrivers(*args) -> "void":
        """
        Adds the attribute drivers to <adrivertable>.

        Parameters
        ----------
        aDriverTable: XmlMDF_ADriverTable
        anMsgDrv: Message_Messenger

        Returns
        -------
        None

        """
        return _XmlMDataXtd.xmlmdataxtd_AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def DocumentVersion(*args) -> "Standard_Integer":
        """
        No available documentation.

        Returns
        -------
        int

        """
        return _XmlMDataXtd.xmlmdataxtd_DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def SetDocumentVersion(*args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        DocVersion: int

        Returns
        -------
        None

        """
        return _XmlMDataXtd.xmlmdataxtd_SetDocumentVersion(*args)

    SetDocumentVersion = staticmethod(SetDocumentVersion)

    __repr__ = _dumps_object


    def __init__(self):
        this = _XmlMDataXtd.new_xmlmdataxtd()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDataXtd.delete_xmlmdataxtd
    __del__ = lambda self: None
xmlmdataxtd_swigregister = _XmlMDataXtd.xmlmdataxtd_swigregister
xmlmdataxtd_swigregister(xmlmdataxtd)

def xmlmdataxtd_AddDrivers(*args) -> "void":
    """
    Adds the attribute drivers to <adrivertable>.

    Parameters
    ----------
    aDriverTable: XmlMDF_ADriverTable
    anMsgDrv: Message_Messenger

    Returns
    -------
    None

    """
    return _XmlMDataXtd.xmlmdataxtd_AddDrivers(*args)

def xmlmdataxtd_DocumentVersion(*args) -> "Standard_Integer":
    """
    No available documentation.

    Returns
    -------
    int

    """
    return _XmlMDataXtd.xmlmdataxtd_DocumentVersion(*args)

def xmlmdataxtd_SetDocumentVersion(*args) -> "void":
    """
    No available documentation.

    Parameters
    ----------
    DocVersion: int

    Returns
    -------
    None

    """
    return _XmlMDataXtd.xmlmdataxtd_SetDocumentVersion(*args)

class XmlMDataXtd_ConstraintDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMDataXtd_ConstraintDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMDataXtd_ConstraintDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_ConstraintDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMDataXtd_ConstraintDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_ConstraintDriver
    __del__ = lambda self: None
XmlMDataXtd_ConstraintDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_swigregister
XmlMDataXtd_ConstraintDriver_swigregister(XmlMDataXtd_ConstraintDriver)

class XmlMDataXtd_GeometryDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMDataXtd_GeometryDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMDataXtd_GeometryDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_GeometryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMDataXtd.XmlMDataXtd_GeometryDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMDataXtd_GeometryDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_GeometryDriver
    __del__ = lambda self: None
XmlMDataXtd_GeometryDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_GeometryDriver_swigregister
XmlMDataXtd_GeometryDriver_swigregister(XmlMDataXtd_GeometryDriver)

class XmlMDataXtd_PatternStdDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMDataXtd_PatternStdDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMDataXtd_PatternStdDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PatternStdDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMDataXtd_PatternStdDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PatternStdDriver
    __del__ = lambda self: None
XmlMDataXtd_PatternStdDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_swigregister
XmlMDataXtd_PatternStdDriver_swigregister(XmlMDataXtd_PatternStdDriver)

class XmlMDataXtd_PositionDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMDataXtd_PositionDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMDataXtd_PositionDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PositionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMDataXtd.XmlMDataXtd_PositionDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMDataXtd_PositionDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PositionDriver
    __del__ = lambda self: None
XmlMDataXtd_PositionDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PositionDriver_swigregister
XmlMDataXtd_PositionDriver_swigregister(XmlMDataXtd_PositionDriver)

class XmlMDataXtd_PresentationDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMDataXtd_PresentationDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMDataXtd_PresentationDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PresentationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMDataXtd.XmlMDataXtd_PresentationDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMDataXtd_PresentationDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PresentationDriver
    __del__ = lambda self: None
XmlMDataXtd_PresentationDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PresentationDriver_swigregister
XmlMDataXtd_PresentationDriver_swigregister(XmlMDataXtd_PresentationDriver)

class XmlMDataXtd_TriangulationDriver(OCC.Core.XmlMDF.XmlMDF_ADriver):
    __swig_setmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlMDataXtd_TriangulationDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [OCC.Core.XmlMDF.XmlMDF_ADriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlMDataXtd_TriangulationDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        No available documentation.

        Parameters
        ----------
        theMessageDriver: Message_Messenger

        Returns
        -------
        None

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_TriangulationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Paste(self, *args) -> "void":
        """
        No available documentation.

        Parameters
        ----------
        Source: XmlObjMgt_Persistent
        Target: TDF_Attribute
        RelocTable: XmlObjMgt_RRelocationTable

        Returns
        -------
        bool

        No available documentation.

        Parameters
        ----------
        Source: TDF_Attribute
        Target: XmlObjMgt_Persistent
        RelocTable: XmlObjMgt_SRelocationTable

        Returns
        -------
        None

        """
        return _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_Paste(self, *args)



    @staticmethod
    def DownCast(t):
      return Handle_XmlMDataXtd_TriangulationDriver_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_TriangulationDriver
    __del__ = lambda self: None
XmlMDataXtd_TriangulationDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_swigregister
XmlMDataXtd_TriangulationDriver_swigregister(XmlMDataXtd_TriangulationDriver)



# This file is compatible with both classic and new-style classes.


