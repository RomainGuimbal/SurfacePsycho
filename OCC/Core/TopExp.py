# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopExp module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_topexp.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopExp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopExp')
    _TopExp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopExp', [dirname(__file__)])
        except ImportError:
            import _TopExp
            return _TopExp
        try:
            _mod = imp.load_module('_TopExp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopExp = swig_import_helper()
    del swig_import_helper
else:
    import _TopExp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopExp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _TopExp.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopExp.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _TopExp.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _TopExp.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _TopExp.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _TopExp.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _TopExp.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _TopExp.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _TopExp.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopExp.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _TopExp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _TopExp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopExp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _TopExp.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _TopExp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _TopExp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopExp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _TopExp.process_exception(error, method_name, class_name)
process_exception = _TopExp.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.TopTools

from enum import IntEnum
from OCC.Core.Exception import *



class topexp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, topexp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, topexp, name)
    __repr__ = _swig_repr

    def CommonVertex(*args) -> "Standard_Boolean":
        """
        Finds the vertex <v> common to the two edges <e1,e2>, returns true if this vertex exists. //! warning: <v> has sense only if the value <true> is returned.

        Parameters
        ----------
        E1: TopoDS_Edge
        E2: TopoDS_Edge
        V: TopoDS_Vertex

        Returns
        -------
        bool

        """
        return _TopExp.topexp_CommonVertex(*args)

    CommonVertex = staticmethod(CommonVertex)

    def FirstVertex(*args) -> "TopoDS_Vertex":
        """
        Returns the vertex of orientation forward in e. if there is none returns a null shape. cumori = true : taking account the edge orientation.

        Parameters
        ----------
        E: TopoDS_Edge
        CumOri: bool,optional
        	default value is Standard_False

        Returns
        -------
        TopoDS_Vertex

        """
        return _TopExp.topexp_FirstVertex(*args)

    FirstVertex = staticmethod(FirstVertex)

    def LastVertex(*args) -> "TopoDS_Vertex":
        """
        Returns the vertex of orientation reversed in e. if there is none returns a null shape. cumori = true : taking account the edge orientation.

        Parameters
        ----------
        E: TopoDS_Edge
        CumOri: bool,optional
        	default value is Standard_False

        Returns
        -------
        TopoDS_Vertex

        """
        return _TopExp.topexp_LastVertex(*args)

    LastVertex = staticmethod(LastVertex)

    def MapShapes(*args) -> "void":
        """
        Tool to explore a topological data structure. stores in the map <m> all the sub-shapes of <s> of type <t>. //! warning: the map is not cleared at first.

        Parameters
        ----------
        S: TopoDS_Shape
        T: TopAbs_ShapeEnum
        M: TopTools_IndexedMapOfShape

        Returns
        -------
        None

        Stores in the map <m> all the sub-shapes of <s>.

        Parameters
        ----------
        S: TopoDS_Shape
        M: TopTools_IndexedMapOfShape

        Returns
        -------
        None

        Stores in the map <m> all the sub-shapes of <s>.

        Parameters
        ----------
        S: TopoDS_Shape
        M: TopTools_MapOfShape

        Returns
        -------
        None

        """
        return _TopExp.topexp_MapShapes(*args)

    MapShapes = staticmethod(MapShapes)

    def MapShapesAndAncestors(*args) -> "void":
        """
        Stores in the map <m> all the subshape of <s> of type <ts> for each one append to the list all the ancestors of type <ta>. for example map all the edges and bind the list of faces. warning: the map is not cleared at first.

        Parameters
        ----------
        S: TopoDS_Shape
        TS: TopAbs_ShapeEnum
        TA: TopAbs_ShapeEnum
        M: TopTools_IndexedDataMapOfShapeListOfShape

        Returns
        -------
        None

        """
        return _TopExp.topexp_MapShapesAndAncestors(*args)

    MapShapesAndAncestors = staticmethod(MapShapesAndAncestors)

    def MapShapesAndUniqueAncestors(*args) -> "void":
        """
        Stores in the map <m> all the subshape of <s> of type <ts> for each one append to the list all unique ancestors of type <ta>. for example map all the edges and bind the list of faces. useorientation = true : taking account the ancestor orientation warning: the map is not cleared at first.

        Parameters
        ----------
        S: TopoDS_Shape
        TS: TopAbs_ShapeEnum
        TA: TopAbs_ShapeEnum
        M: TopTools_IndexedDataMapOfShapeListOfShape
        useOrientation: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TopExp.topexp_MapShapesAndUniqueAncestors(*args)

    MapShapesAndUniqueAncestors = staticmethod(MapShapesAndUniqueAncestors)

    def Vertices(*args) -> "void":
        """
        Returns in vfirst, vlast the forward and reversed vertices of the edge <e>. may be null shapes. cumori = true : taking account the edge orientation.

        Parameters
        ----------
        E: TopoDS_Edge
        Vfirst: TopoDS_Vertex
        Vlast: TopoDS_Vertex
        CumOri: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        Returns in vfirst, vlast the first and last vertices of the open wire <w>. may be null shapes. if <w> is closed vfirst and vlast are a same vertex on <w>. if <w> is no manifold. vfirst and vlast are null shapes.

        Parameters
        ----------
        W: TopoDS_Wire
        Vfirst: TopoDS_Vertex
        Vlast: TopoDS_Vertex

        Returns
        -------
        None

        """
        return _TopExp.topexp_Vertices(*args)

    Vertices = staticmethod(Vertices)

    __repr__ = _dumps_object


    def __init__(self):
        this = _TopExp.new_topexp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopExp.delete_topexp
    __del__ = lambda self: None
topexp_swigregister = _TopExp.topexp_swigregister
topexp_swigregister(topexp)

def topexp_CommonVertex(*args) -> "Standard_Boolean":
    """
    Finds the vertex <v> common to the two edges <e1,e2>, returns true if this vertex exists. //! warning: <v> has sense only if the value <true> is returned.

    Parameters
    ----------
    E1: TopoDS_Edge
    E2: TopoDS_Edge
    V: TopoDS_Vertex

    Returns
    -------
    bool

    """
    return _TopExp.topexp_CommonVertex(*args)

def topexp_FirstVertex(*args) -> "TopoDS_Vertex":
    """
    Returns the vertex of orientation forward in e. if there is none returns a null shape. cumori = true : taking account the edge orientation.

    Parameters
    ----------
    E: TopoDS_Edge
    CumOri: bool,optional
    	default value is Standard_False

    Returns
    -------
    TopoDS_Vertex

    """
    return _TopExp.topexp_FirstVertex(*args)

def topexp_LastVertex(*args) -> "TopoDS_Vertex":
    """
    Returns the vertex of orientation reversed in e. if there is none returns a null shape. cumori = true : taking account the edge orientation.

    Parameters
    ----------
    E: TopoDS_Edge
    CumOri: bool,optional
    	default value is Standard_False

    Returns
    -------
    TopoDS_Vertex

    """
    return _TopExp.topexp_LastVertex(*args)

def topexp_MapShapes(*args) -> "void":
    """
    Tool to explore a topological data structure. stores in the map <m> all the sub-shapes of <s> of type <t>. //! warning: the map is not cleared at first.

    Parameters
    ----------
    S: TopoDS_Shape
    T: TopAbs_ShapeEnum
    M: TopTools_IndexedMapOfShape

    Returns
    -------
    None

    Stores in the map <m> all the sub-shapes of <s>.

    Parameters
    ----------
    S: TopoDS_Shape
    M: TopTools_IndexedMapOfShape

    Returns
    -------
    None

    Stores in the map <m> all the sub-shapes of <s>.

    Parameters
    ----------
    S: TopoDS_Shape
    M: TopTools_MapOfShape

    Returns
    -------
    None

    """
    return _TopExp.topexp_MapShapes(*args)

def topexp_MapShapesAndAncestors(*args) -> "void":
    """
    Stores in the map <m> all the subshape of <s> of type <ts> for each one append to the list all the ancestors of type <ta>. for example map all the edges and bind the list of faces. warning: the map is not cleared at first.

    Parameters
    ----------
    S: TopoDS_Shape
    TS: TopAbs_ShapeEnum
    TA: TopAbs_ShapeEnum
    M: TopTools_IndexedDataMapOfShapeListOfShape

    Returns
    -------
    None

    """
    return _TopExp.topexp_MapShapesAndAncestors(*args)

def topexp_MapShapesAndUniqueAncestors(*args) -> "void":
    """
    Stores in the map <m> all the subshape of <s> of type <ts> for each one append to the list all unique ancestors of type <ta>. for example map all the edges and bind the list of faces. useorientation = true : taking account the ancestor orientation warning: the map is not cleared at first.

    Parameters
    ----------
    S: TopoDS_Shape
    TS: TopAbs_ShapeEnum
    TA: TopAbs_ShapeEnum
    M: TopTools_IndexedDataMapOfShapeListOfShape
    useOrientation: bool,optional
    	default value is Standard_False

    Returns
    -------
    None

    """
    return _TopExp.topexp_MapShapesAndUniqueAncestors(*args)

def topexp_Vertices(*args) -> "void":
    """
    Returns in vfirst, vlast the forward and reversed vertices of the edge <e>. may be null shapes. cumori = true : taking account the edge orientation.

    Parameters
    ----------
    E: TopoDS_Edge
    Vfirst: TopoDS_Vertex
    Vlast: TopoDS_Vertex
    CumOri: bool,optional
    	default value is Standard_False

    Returns
    -------
    None

    Returns in vfirst, vlast the first and last vertices of the open wire <w>. may be null shapes. if <w> is closed vfirst and vlast are a same vertex on <w>. if <w> is no manifold. vfirst and vlast are null shapes.

    Parameters
    ----------
    W: TopoDS_Wire
    Vfirst: TopoDS_Vertex
    Vlast: TopoDS_Vertex

    Returns
    -------
    None

    """
    return _TopExp.topexp_Vertices(*args)

class TopExp_Explorer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopExp_Explorer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopExp_Explorer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Creates an empty explorer, becomes usefull after init.

        Returns
        -------
        None

        Creates an explorer on the shape <s>. //! <tofind> is the type of shapes to search. topabs_vertex, topabs_edge, ... //! <toavoid> is the type of shape to skip in the exploration. if <toavoid> is equal or less complex than <tofind> or if <toavoid> is shape it has no effect on the exploration.

        Parameters
        ----------
        S: TopoDS_Shape
        ToFind: TopAbs_ShapeEnum
        ToAvoid: TopAbs_ShapeEnum,optional
        	default value is TopAbs_SHAPE

        Returns
        -------
        None

        """
        this = _TopExp.new_TopExp_Explorer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args) -> "void":
        """
        Clears the content of the explorer. it will return false on more().

        Returns
        -------
        None

        """
        return _TopExp.TopExp_Explorer_Clear(self, *args)


    def Current(self, *args) -> "TopoDS_Shape const":
        """
        Returns the current shape in the exploration. exceptions standard_nosuchobject if this explorer has no more shapes to explore.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopExp.TopExp_Explorer_Current(self, *args)


    def Depth(self, *args) -> "Standard_Integer":
        """
        Returns the current depth of the exploration. 0 is the shape to explore itself.

        Returns
        -------
        int

        """
        return _TopExp.TopExp_Explorer_Depth(self, *args)


    def Destroy(self, *args) -> "void":
        """
        No available documentation.

        Returns
        -------
        None

        """
        return _TopExp.TopExp_Explorer_Destroy(self, *args)


    def Init(self, *args) -> "void":
        """
        Resets this explorer on the shape s. it is initialized to search the shape s, for shapes of type tofind, that are not part of a shape toavoid. if the shape toavoid is equal to topabs_shape, or if it is the same as, or less complex than, the shape tofind it has no effect on the search.

        Parameters
        ----------
        S: TopoDS_Shape
        ToFind: TopAbs_ShapeEnum
        ToAvoid: TopAbs_ShapeEnum,optional
        	default value is TopAbs_SHAPE

        Returns
        -------
        None

        """
        return _TopExp.TopExp_Explorer_Init(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        Returns true if there are more shapes in the exploration.

        Returns
        -------
        bool

        """
        return _TopExp.TopExp_Explorer_More(self, *args)


    def Next(self, *args) -> "void":
        """
        Moves to the next shape in the exploration. exceptions standard_nomoreobject if there are no more shapes to explore.

        Returns
        -------
        None

        """
        return _TopExp.TopExp_Explorer_Next(self, *args)


    def ReInit(self, *args) -> "void":
        """
        Reinitialize the exploration with the original arguments.

        Returns
        -------
        None

        """
        return _TopExp.TopExp_Explorer_ReInit(self, *args)


    def Value(self, *args) -> "TopoDS_Shape const":
        """
        Returns the current shape in the exploration. exceptions standard_nosuchobject if this explorer has no more shapes to explore.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopExp.TopExp_Explorer_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopExp.delete_TopExp_Explorer
    __del__ = lambda self: None
TopExp_Explorer_swigregister = _TopExp.TopExp_Explorer_swigregister
TopExp_Explorer_swigregister(TopExp_Explorer)



# This file is compatible with both classic and new-style classes.


