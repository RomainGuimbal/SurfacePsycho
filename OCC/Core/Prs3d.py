# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
Prs3d module, see official documentation at
https://www.opencascade.com/doc/occt-7.7.0/refman/html/package_prs3d.html
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Prs3d
else:
    import _Prs3d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Prs3d.delete_SwigPyIterator

    def value(self):
        return _Prs3d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Prs3d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Prs3d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Prs3d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Prs3d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Prs3d.SwigPyIterator_copy(self)

    def next(self):
        return _Prs3d.SwigPyIterator_next(self)

    def __next__(self):
        return _Prs3d.SwigPyIterator___next__(self)

    def previous(self):
        return _Prs3d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Prs3d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Prs3d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Prs3d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Prs3d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Prs3d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Prs3d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Prs3d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Prs3d:
_Prs3d.SwigPyIterator_swigregister(SwigPyIterator)

def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _Prs3d.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColgp
import OCC.Core.Graphic3d
import OCC.Core.BVH
import OCC.Core.Quantity
import OCC.Core.TCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.Aspect
import OCC.Core.Image
import OCC.Core.TopLoc
import OCC.Core.Bnd
import OCC.Core.OSD
import OCC.Core.Media
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.GeomAbs

from enum import IntEnum
from OCC.Core.Exception import *

Prs3d_DatumAttribute_NB = _Prs3d.Prs3d_DatumAttribute_NB
Prs3d_DatumAttribute_XAxisLength = _Prs3d.Prs3d_DatumAttribute_XAxisLength
Prs3d_DatumAttribute_YAxisLength = _Prs3d.Prs3d_DatumAttribute_YAxisLength
Prs3d_DatumAttribute_ZAxisLength = _Prs3d.Prs3d_DatumAttribute_ZAxisLength
Prs3d_DatumAttribute_ShadingTubeRadiusPercent = _Prs3d.Prs3d_DatumAttribute_ShadingTubeRadiusPercent
Prs3d_DatumAttribute_ShadingConeRadiusPercent = _Prs3d.Prs3d_DatumAttribute_ShadingConeRadiusPercent
Prs3d_DatumAttribute_ShadingConeLengthPercent = _Prs3d.Prs3d_DatumAttribute_ShadingConeLengthPercent
Prs3d_DatumAttribute_ShadingOriginRadiusPercent = _Prs3d.Prs3d_DatumAttribute_ShadingOriginRadiusPercent
Prs3d_DatumAttribute_ShadingNumberOfFacettes = _Prs3d.Prs3d_DatumAttribute_ShadingNumberOfFacettes
Prs3d_DA_XAxisLength = _Prs3d.Prs3d_DA_XAxisLength
Prs3d_DA_YAxisLength = _Prs3d.Prs3d_DA_YAxisLength
Prs3d_DA_ZAxisLength = _Prs3d.Prs3d_DA_ZAxisLength
Prs3d_DP_ShadingTubeRadiusPercent = _Prs3d.Prs3d_DP_ShadingTubeRadiusPercent
Prs3d_DP_ShadingConeRadiusPercent = _Prs3d.Prs3d_DP_ShadingConeRadiusPercent
Prs3d_DP_ShadingConeLengthPercent = _Prs3d.Prs3d_DP_ShadingConeLengthPercent
Prs3d_DP_ShadingOriginRadiusPercent = _Prs3d.Prs3d_DP_ShadingOriginRadiusPercent
Prs3d_DP_ShadingNumberOfFacettes = _Prs3d.Prs3d_DP_ShadingNumberOfFacettes
Prs3d_DatumAxes_XAxis = _Prs3d.Prs3d_DatumAxes_XAxis
Prs3d_DatumAxes_YAxis = _Prs3d.Prs3d_DatumAxes_YAxis
Prs3d_DatumAxes_ZAxis = _Prs3d.Prs3d_DatumAxes_ZAxis
Prs3d_DatumAxes_XYAxes = _Prs3d.Prs3d_DatumAxes_XYAxes
Prs3d_DatumAxes_YZAxes = _Prs3d.Prs3d_DatumAxes_YZAxes
Prs3d_DatumAxes_XZAxes = _Prs3d.Prs3d_DatumAxes_XZAxes
Prs3d_DatumAxes_XYZAxes = _Prs3d.Prs3d_DatumAxes_XYZAxes
Prs3d_DA_XAxis = _Prs3d.Prs3d_DA_XAxis
Prs3d_DA_YAxis = _Prs3d.Prs3d_DA_YAxis
Prs3d_DA_ZAxis = _Prs3d.Prs3d_DA_ZAxis
Prs3d_DA_XYAxis = _Prs3d.Prs3d_DA_XYAxis
Prs3d_DA_YZAxis = _Prs3d.Prs3d_DA_YZAxis
Prs3d_DA_XZAxis = _Prs3d.Prs3d_DA_XZAxis
Prs3d_DA_XYZAxis = _Prs3d.Prs3d_DA_XYZAxis
Prs3d_DM_WireFrame = _Prs3d.Prs3d_DM_WireFrame
Prs3d_DM_Shaded = _Prs3d.Prs3d_DM_Shaded
Prs3d_DatumParts_Origin = _Prs3d.Prs3d_DatumParts_Origin
Prs3d_DatumParts_XAxis = _Prs3d.Prs3d_DatumParts_XAxis
Prs3d_DatumParts_YAxis = _Prs3d.Prs3d_DatumParts_YAxis
Prs3d_DatumParts_ZAxis = _Prs3d.Prs3d_DatumParts_ZAxis
Prs3d_DatumParts_XArrow = _Prs3d.Prs3d_DatumParts_XArrow
Prs3d_DatumParts_YArrow = _Prs3d.Prs3d_DatumParts_YArrow
Prs3d_DatumParts_ZArrow = _Prs3d.Prs3d_DatumParts_ZArrow
Prs3d_DatumParts_XOYAxis = _Prs3d.Prs3d_DatumParts_XOYAxis
Prs3d_DatumParts_YOZAxis = _Prs3d.Prs3d_DatumParts_YOZAxis
Prs3d_DatumParts_XOZAxis = _Prs3d.Prs3d_DatumParts_XOZAxis
Prs3d_DatumParts_None = _Prs3d.Prs3d_DatumParts_None
Prs3d_DP_Origin = _Prs3d.Prs3d_DP_Origin
Prs3d_DP_XAxis = _Prs3d.Prs3d_DP_XAxis
Prs3d_DP_YAxis = _Prs3d.Prs3d_DP_YAxis
Prs3d_DP_ZAxis = _Prs3d.Prs3d_DP_ZAxis
Prs3d_DP_XArrow = _Prs3d.Prs3d_DP_XArrow
Prs3d_DP_YArrow = _Prs3d.Prs3d_DP_YArrow
Prs3d_DP_ZArrow = _Prs3d.Prs3d_DP_ZArrow
Prs3d_DP_XOYAxis = _Prs3d.Prs3d_DP_XOYAxis
Prs3d_DP_YOZAxis = _Prs3d.Prs3d_DP_YOZAxis
Prs3d_DP_XOZAxis = _Prs3d.Prs3d_DP_XOZAxis
Prs3d_DP_None = _Prs3d.Prs3d_DP_None
Prs3d_DAO_Internal = _Prs3d.Prs3d_DAO_Internal
Prs3d_DAO_External = _Prs3d.Prs3d_DAO_External
Prs3d_DAO_Fit = _Prs3d.Prs3d_DAO_Fit
Prs3d_DTHP_Left = _Prs3d.Prs3d_DTHP_Left
Prs3d_DTHP_Right = _Prs3d.Prs3d_DTHP_Right
Prs3d_DTHP_Center = _Prs3d.Prs3d_DTHP_Center
Prs3d_DTHP_Fit = _Prs3d.Prs3d_DTHP_Fit
Prs3d_DTVP_Above = _Prs3d.Prs3d_DTVP_Above
Prs3d_DTVP_Below = _Prs3d.Prs3d_DTVP_Below
Prs3d_DTVP_Center = _Prs3d.Prs3d_DTVP_Center
Prs3d_TOH_NotSet = _Prs3d.Prs3d_TOH_NotSet
Prs3d_TOH_PolyAlgo = _Prs3d.Prs3d_TOH_PolyAlgo
Prs3d_TOH_Algo = _Prs3d.Prs3d_TOH_Algo
Prs3d_TypeOfHighlight_None = _Prs3d.Prs3d_TypeOfHighlight_None
Prs3d_TypeOfHighlight_Selected = _Prs3d.Prs3d_TypeOfHighlight_Selected
Prs3d_TypeOfHighlight_Dynamic = _Prs3d.Prs3d_TypeOfHighlight_Dynamic
Prs3d_TypeOfHighlight_LocalSelected = _Prs3d.Prs3d_TypeOfHighlight_LocalSelected
Prs3d_TypeOfHighlight_LocalDynamic = _Prs3d.Prs3d_TypeOfHighlight_LocalDynamic
Prs3d_TypeOfHighlight_SubIntensity = _Prs3d.Prs3d_TypeOfHighlight_SubIntensity
Prs3d_TypeOfHighlight_NB = _Prs3d.Prs3d_TypeOfHighlight_NB
Prs3d_TOLP_Point = _Prs3d.Prs3d_TOLP_Point
Prs3d_TOLP_Segment = _Prs3d.Prs3d_TOLP_Segment
Prs3d_VDM_Isolated = _Prs3d.Prs3d_VDM_Isolated
Prs3d_VDM_All = _Prs3d.Prs3d_VDM_All
Prs3d_VDM_Inherited = _Prs3d.Prs3d_VDM_Inherited


class Prs3d_DatumAttribute(IntEnum):
	Prs3d_DatumAttribute_XAxisLength = 0
	Prs3d_DatumAttribute_YAxisLength = 1
	Prs3d_DatumAttribute_ZAxisLength = 2
	Prs3d_DatumAttribute_ShadingTubeRadiusPercent = 3
	Prs3d_DatumAttribute_ShadingConeRadiusPercent = 4
	Prs3d_DatumAttribute_ShadingConeLengthPercent = 5
	Prs3d_DatumAttribute_ShadingOriginRadiusPercent = 6
	Prs3d_DatumAttribute_ShadingNumberOfFacettes = 7
	Prs3d_DA_XAxisLength = Prs3d_DatumAttribute_XAxisLength
	Prs3d_DA_YAxisLength = Prs3d_DatumAttribute_YAxisLength
	Prs3d_DA_ZAxisLength = Prs3d_DatumAttribute_ZAxisLength
	Prs3d_DP_ShadingTubeRadiusPercent = Prs3d_DatumAttribute_ShadingTubeRadiusPercent
	Prs3d_DP_ShadingConeRadiusPercent = Prs3d_DatumAttribute_ShadingConeRadiusPercent
	Prs3d_DP_ShadingConeLengthPercent = Prs3d_DatumAttribute_ShadingConeLengthPercent
	Prs3d_DP_ShadingOriginRadiusPercent = Prs3d_DatumAttribute_ShadingOriginRadiusPercent
	Prs3d_DP_ShadingNumberOfFacettes = Prs3d_DatumAttribute_ShadingNumberOfFacettes
Prs3d_DatumAttribute_XAxisLength = Prs3d_DatumAttribute.Prs3d_DatumAttribute_XAxisLength
Prs3d_DatumAttribute_YAxisLength = Prs3d_DatumAttribute.Prs3d_DatumAttribute_YAxisLength
Prs3d_DatumAttribute_ZAxisLength = Prs3d_DatumAttribute.Prs3d_DatumAttribute_ZAxisLength
Prs3d_DatumAttribute_ShadingTubeRadiusPercent = Prs3d_DatumAttribute.Prs3d_DatumAttribute_ShadingTubeRadiusPercent
Prs3d_DatumAttribute_ShadingConeRadiusPercent = Prs3d_DatumAttribute.Prs3d_DatumAttribute_ShadingConeRadiusPercent
Prs3d_DatumAttribute_ShadingConeLengthPercent = Prs3d_DatumAttribute.Prs3d_DatumAttribute_ShadingConeLengthPercent
Prs3d_DatumAttribute_ShadingOriginRadiusPercent = Prs3d_DatumAttribute.Prs3d_DatumAttribute_ShadingOriginRadiusPercent
Prs3d_DatumAttribute_ShadingNumberOfFacettes = Prs3d_DatumAttribute.Prs3d_DatumAttribute_ShadingNumberOfFacettes
Prs3d_DA_XAxisLength = Prs3d_DatumAttribute.Prs3d_DA_XAxisLength
Prs3d_DA_YAxisLength = Prs3d_DatumAttribute.Prs3d_DA_YAxisLength
Prs3d_DA_ZAxisLength = Prs3d_DatumAttribute.Prs3d_DA_ZAxisLength
Prs3d_DP_ShadingTubeRadiusPercent = Prs3d_DatumAttribute.Prs3d_DP_ShadingTubeRadiusPercent
Prs3d_DP_ShadingConeRadiusPercent = Prs3d_DatumAttribute.Prs3d_DP_ShadingConeRadiusPercent
Prs3d_DP_ShadingConeLengthPercent = Prs3d_DatumAttribute.Prs3d_DP_ShadingConeLengthPercent
Prs3d_DP_ShadingOriginRadiusPercent = Prs3d_DatumAttribute.Prs3d_DP_ShadingOriginRadiusPercent
Prs3d_DP_ShadingNumberOfFacettes = Prs3d_DatumAttribute.Prs3d_DP_ShadingNumberOfFacettes

class Prs3d_DatumAxes(IntEnum):
	Prs3d_DatumAxes_XAxis = 1
	Prs3d_DatumAxes_YAxis = 2
	Prs3d_DatumAxes_ZAxis = 4
	Prs3d_DatumAxes_XYAxes = Prs3d_DatumAxes_XAxis | Prs3d_DatumAxes_YAxis
	Prs3d_DatumAxes_YZAxes = Prs3d_DatumAxes_YAxis | Prs3d_DatumAxes_ZAxis
	Prs3d_DatumAxes_XZAxes = Prs3d_DatumAxes_XAxis | Prs3d_DatumAxes_ZAxis
	Prs3d_DatumAxes_XYZAxes = Prs3d_DatumAxes_XAxis | Prs3d_DatumAxes_YAxis | Prs3d_DatumAxes_ZAxis
	Prs3d_DA_XAxis = Prs3d_DatumAxes_XAxis
	Prs3d_DA_YAxis = Prs3d_DatumAxes_YAxis
	Prs3d_DA_ZAxis = Prs3d_DatumAxes_ZAxis
	Prs3d_DA_XYAxis = Prs3d_DatumAxes_XYAxes
	Prs3d_DA_YZAxis = Prs3d_DatumAxes_YZAxes
	Prs3d_DA_XZAxis = Prs3d_DatumAxes_XZAxes
	Prs3d_DA_XYZAxis = Prs3d_DatumAxes_XYZAxes
Prs3d_DatumAxes_XAxis = Prs3d_DatumAxes.Prs3d_DatumAxes_XAxis
Prs3d_DatumAxes_YAxis = Prs3d_DatumAxes.Prs3d_DatumAxes_YAxis
Prs3d_DatumAxes_ZAxis = Prs3d_DatumAxes.Prs3d_DatumAxes_ZAxis
Prs3d_DatumAxes_XYAxes = Prs3d_DatumAxes.Prs3d_DatumAxes_XYAxes
Prs3d_DatumAxes_YZAxes = Prs3d_DatumAxes.Prs3d_DatumAxes_YZAxes
Prs3d_DatumAxes_XZAxes = Prs3d_DatumAxes.Prs3d_DatumAxes_XZAxes
Prs3d_DatumAxes_XYZAxes = Prs3d_DatumAxes.Prs3d_DatumAxes_XYZAxes
Prs3d_DA_XAxis = Prs3d_DatumAxes.Prs3d_DA_XAxis
Prs3d_DA_YAxis = Prs3d_DatumAxes.Prs3d_DA_YAxis
Prs3d_DA_ZAxis = Prs3d_DatumAxes.Prs3d_DA_ZAxis
Prs3d_DA_XYAxis = Prs3d_DatumAxes.Prs3d_DA_XYAxis
Prs3d_DA_YZAxis = Prs3d_DatumAxes.Prs3d_DA_YZAxis
Prs3d_DA_XZAxis = Prs3d_DatumAxes.Prs3d_DA_XZAxis
Prs3d_DA_XYZAxis = Prs3d_DatumAxes.Prs3d_DA_XYZAxis

class Prs3d_DatumMode(IntEnum):
	Prs3d_DM_WireFrame = 0
	Prs3d_DM_Shaded = 1
Prs3d_DM_WireFrame = Prs3d_DatumMode.Prs3d_DM_WireFrame
Prs3d_DM_Shaded = Prs3d_DatumMode.Prs3d_DM_Shaded

class Prs3d_DatumParts(IntEnum):
	Prs3d_DatumParts_Origin = 0
	Prs3d_DatumParts_XAxis = 1
	Prs3d_DatumParts_YAxis = 2
	Prs3d_DatumParts_ZAxis = 3
	Prs3d_DatumParts_XArrow = 4
	Prs3d_DatumParts_YArrow = 5
	Prs3d_DatumParts_ZArrow = 6
	Prs3d_DatumParts_XOYAxis = 7
	Prs3d_DatumParts_YOZAxis = 8
	Prs3d_DatumParts_XOZAxis = 9
	Prs3d_DatumParts_None = 10
	Prs3d_DP_Origin = Prs3d_DatumParts_Origin
	Prs3d_DP_XAxis = Prs3d_DatumParts_XAxis
	Prs3d_DP_YAxis = Prs3d_DatumParts_YAxis
	Prs3d_DP_ZAxis = Prs3d_DatumParts_ZAxis
	Prs3d_DP_XArrow = Prs3d_DatumParts_XArrow
	Prs3d_DP_YArrow = Prs3d_DatumParts_YArrow
	Prs3d_DP_ZArrow = Prs3d_DatumParts_ZArrow
	Prs3d_DP_XOYAxis = Prs3d_DatumParts_XOYAxis
	Prs3d_DP_YOZAxis = Prs3d_DatumParts_YOZAxis
	Prs3d_DP_XOZAxis = Prs3d_DatumParts_XOZAxis
	Prs3d_DP_None = Prs3d_DatumParts_None
Prs3d_DatumParts_Origin = Prs3d_DatumParts.Prs3d_DatumParts_Origin
Prs3d_DatumParts_XAxis = Prs3d_DatumParts.Prs3d_DatumParts_XAxis
Prs3d_DatumParts_YAxis = Prs3d_DatumParts.Prs3d_DatumParts_YAxis
Prs3d_DatumParts_ZAxis = Prs3d_DatumParts.Prs3d_DatumParts_ZAxis
Prs3d_DatumParts_XArrow = Prs3d_DatumParts.Prs3d_DatumParts_XArrow
Prs3d_DatumParts_YArrow = Prs3d_DatumParts.Prs3d_DatumParts_YArrow
Prs3d_DatumParts_ZArrow = Prs3d_DatumParts.Prs3d_DatumParts_ZArrow
Prs3d_DatumParts_XOYAxis = Prs3d_DatumParts.Prs3d_DatumParts_XOYAxis
Prs3d_DatumParts_YOZAxis = Prs3d_DatumParts.Prs3d_DatumParts_YOZAxis
Prs3d_DatumParts_XOZAxis = Prs3d_DatumParts.Prs3d_DatumParts_XOZAxis
Prs3d_DatumParts_None = Prs3d_DatumParts.Prs3d_DatumParts_None
Prs3d_DP_Origin = Prs3d_DatumParts.Prs3d_DP_Origin
Prs3d_DP_XAxis = Prs3d_DatumParts.Prs3d_DP_XAxis
Prs3d_DP_YAxis = Prs3d_DatumParts.Prs3d_DP_YAxis
Prs3d_DP_ZAxis = Prs3d_DatumParts.Prs3d_DP_ZAxis
Prs3d_DP_XArrow = Prs3d_DatumParts.Prs3d_DP_XArrow
Prs3d_DP_YArrow = Prs3d_DatumParts.Prs3d_DP_YArrow
Prs3d_DP_ZArrow = Prs3d_DatumParts.Prs3d_DP_ZArrow
Prs3d_DP_XOYAxis = Prs3d_DatumParts.Prs3d_DP_XOYAxis
Prs3d_DP_YOZAxis = Prs3d_DatumParts.Prs3d_DP_YOZAxis
Prs3d_DP_XOZAxis = Prs3d_DatumParts.Prs3d_DP_XOZAxis
Prs3d_DP_None = Prs3d_DatumParts.Prs3d_DP_None

class Prs3d_DimensionArrowOrientation(IntEnum):
	Prs3d_DAO_Internal = 0
	Prs3d_DAO_External = 1
	Prs3d_DAO_Fit = 2
Prs3d_DAO_Internal = Prs3d_DimensionArrowOrientation.Prs3d_DAO_Internal
Prs3d_DAO_External = Prs3d_DimensionArrowOrientation.Prs3d_DAO_External
Prs3d_DAO_Fit = Prs3d_DimensionArrowOrientation.Prs3d_DAO_Fit

class Prs3d_DimensionTextHorizontalPosition(IntEnum):
	Prs3d_DTHP_Left = 0
	Prs3d_DTHP_Right = 1
	Prs3d_DTHP_Center = 2
	Prs3d_DTHP_Fit = 3
Prs3d_DTHP_Left = Prs3d_DimensionTextHorizontalPosition.Prs3d_DTHP_Left
Prs3d_DTHP_Right = Prs3d_DimensionTextHorizontalPosition.Prs3d_DTHP_Right
Prs3d_DTHP_Center = Prs3d_DimensionTextHorizontalPosition.Prs3d_DTHP_Center
Prs3d_DTHP_Fit = Prs3d_DimensionTextHorizontalPosition.Prs3d_DTHP_Fit

class Prs3d_DimensionTextVerticalPosition(IntEnum):
	Prs3d_DTVP_Above = 0
	Prs3d_DTVP_Below = 1
	Prs3d_DTVP_Center = 2
Prs3d_DTVP_Above = Prs3d_DimensionTextVerticalPosition.Prs3d_DTVP_Above
Prs3d_DTVP_Below = Prs3d_DimensionTextVerticalPosition.Prs3d_DTVP_Below
Prs3d_DTVP_Center = Prs3d_DimensionTextVerticalPosition.Prs3d_DTVP_Center

class Prs3d_TypeOfHLR(IntEnum):
	Prs3d_TOH_NotSet = 0
	Prs3d_TOH_PolyAlgo = 1
	Prs3d_TOH_Algo = 2
Prs3d_TOH_NotSet = Prs3d_TypeOfHLR.Prs3d_TOH_NotSet
Prs3d_TOH_PolyAlgo = Prs3d_TypeOfHLR.Prs3d_TOH_PolyAlgo
Prs3d_TOH_Algo = Prs3d_TypeOfHLR.Prs3d_TOH_Algo

class Prs3d_TypeOfHighlight(IntEnum):
	Prs3d_TypeOfHighlight_None = 0
	Prs3d_TypeOfHighlight_Selected = 1
	Prs3d_TypeOfHighlight_Dynamic = 2
	Prs3d_TypeOfHighlight_LocalSelected = 3
	Prs3d_TypeOfHighlight_LocalDynamic = 4
	Prs3d_TypeOfHighlight_SubIntensity = 5
	Prs3d_TypeOfHighlight_NB = 6
Prs3d_TypeOfHighlight_None = Prs3d_TypeOfHighlight.Prs3d_TypeOfHighlight_None
Prs3d_TypeOfHighlight_Selected = Prs3d_TypeOfHighlight.Prs3d_TypeOfHighlight_Selected
Prs3d_TypeOfHighlight_Dynamic = Prs3d_TypeOfHighlight.Prs3d_TypeOfHighlight_Dynamic
Prs3d_TypeOfHighlight_LocalSelected = Prs3d_TypeOfHighlight.Prs3d_TypeOfHighlight_LocalSelected
Prs3d_TypeOfHighlight_LocalDynamic = Prs3d_TypeOfHighlight.Prs3d_TypeOfHighlight_LocalDynamic
Prs3d_TypeOfHighlight_SubIntensity = Prs3d_TypeOfHighlight.Prs3d_TypeOfHighlight_SubIntensity
Prs3d_TypeOfHighlight_NB = Prs3d_TypeOfHighlight.Prs3d_TypeOfHighlight_NB

class Prs3d_TypeOfLinePicking(IntEnum):
	Prs3d_TOLP_Point = 0
	Prs3d_TOLP_Segment = 1
Prs3d_TOLP_Point = Prs3d_TypeOfLinePicking.Prs3d_TOLP_Point
Prs3d_TOLP_Segment = Prs3d_TypeOfLinePicking.Prs3d_TOLP_Segment

class Prs3d_VertexDrawMode(IntEnum):
	Prs3d_VDM_Isolated = 0
	Prs3d_VDM_All = 1
	Prs3d_VDM_Inherited = 2
Prs3d_VDM_Isolated = Prs3d_VertexDrawMode.Prs3d_VDM_Isolated
Prs3d_VDM_All = Prs3d_VertexDrawMode.Prs3d_VDM_All
Prs3d_VDM_Inherited = Prs3d_VertexDrawMode.Prs3d_VDM_Inherited


def Handle_Prs3d_BasicAspect_Create():
    return _Prs3d.Handle_Prs3d_BasicAspect_Create()

def Handle_Prs3d_BasicAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_BasicAspect_DownCast(t)

def Handle_Prs3d_BasicAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_BasicAspect_IsNull(t)

def Handle_Prs3d_Drawer_Create():
    return _Prs3d.Handle_Prs3d_Drawer_Create()

def Handle_Prs3d_Drawer_DownCast(t):
    return _Prs3d.Handle_Prs3d_Drawer_DownCast(t)

def Handle_Prs3d_Drawer_IsNull(t):
    return _Prs3d.Handle_Prs3d_Drawer_IsNull(t)

def Handle_Prs3d_PresentationShadow_Create():
    return _Prs3d.Handle_Prs3d_PresentationShadow_Create()

def Handle_Prs3d_PresentationShadow_DownCast(t):
    return _Prs3d.Handle_Prs3d_PresentationShadow_DownCast(t)

def Handle_Prs3d_PresentationShadow_IsNull(t):
    return _Prs3d.Handle_Prs3d_PresentationShadow_IsNull(t)

def Handle_Prs3d_ArrowAspect_Create():
    return _Prs3d.Handle_Prs3d_ArrowAspect_Create()

def Handle_Prs3d_ArrowAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_ArrowAspect_DownCast(t)

def Handle_Prs3d_ArrowAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_ArrowAspect_IsNull(t)

def Handle_Prs3d_DatumAspect_Create():
    return _Prs3d.Handle_Prs3d_DatumAspect_Create()

def Handle_Prs3d_DatumAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_DatumAspect_DownCast(t)

def Handle_Prs3d_DatumAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_DatumAspect_IsNull(t)

def Handle_Prs3d_DimensionAspect_Create():
    return _Prs3d.Handle_Prs3d_DimensionAspect_Create()

def Handle_Prs3d_DimensionAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_DimensionAspect_DownCast(t)

def Handle_Prs3d_DimensionAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_DimensionAspect_IsNull(t)

def Handle_Prs3d_LineAspect_Create():
    return _Prs3d.Handle_Prs3d_LineAspect_Create()

def Handle_Prs3d_LineAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_LineAspect_DownCast(t)

def Handle_Prs3d_LineAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_LineAspect_IsNull(t)

def Handle_Prs3d_PlaneAspect_Create():
    return _Prs3d.Handle_Prs3d_PlaneAspect_Create()

def Handle_Prs3d_PlaneAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_PlaneAspect_DownCast(t)

def Handle_Prs3d_PlaneAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_PlaneAspect_IsNull(t)

def Handle_Prs3d_PointAspect_Create():
    return _Prs3d.Handle_Prs3d_PointAspect_Create()

def Handle_Prs3d_PointAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_PointAspect_DownCast(t)

def Handle_Prs3d_PointAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_PointAspect_IsNull(t)

def Handle_Prs3d_ShadingAspect_Create():
    return _Prs3d.Handle_Prs3d_ShadingAspect_Create()

def Handle_Prs3d_ShadingAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_ShadingAspect_DownCast(t)

def Handle_Prs3d_ShadingAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_ShadingAspect_IsNull(t)

def Handle_Prs3d_TextAspect_Create():
    return _Prs3d.Handle_Prs3d_TextAspect_Create()

def Handle_Prs3d_TextAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_TextAspect_DownCast(t)

def Handle_Prs3d_TextAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_TextAspect_IsNull(t)

def Handle_Prs3d_IsoAspect_Create():
    return _Prs3d.Handle_Prs3d_IsoAspect_Create()

def Handle_Prs3d_IsoAspect_DownCast(t):
    return _Prs3d.Handle_Prs3d_IsoAspect_DownCast(t)

def Handle_Prs3d_IsoAspect_IsNull(t):
    return _Prs3d.Handle_Prs3d_IsoAspect_IsNull(t)
class Prs3d_NListOfSequenceOfPnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_begin(self)

    def end(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_end(self)

    def cbegin(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_cbegin(self)

    def cend(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_cend(self)

    def __init__(self, *args):
        _Prs3d.Prs3d_NListOfSequenceOfPnt_swiginit(self, _Prs3d.new_Prs3d_NListOfSequenceOfPnt(*args))

    def Size(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Size(self)

    def Assign(self, theOther):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Assign(self, theOther)

    def Set(self, theOther):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Clear(self, theAllocator)

    def First(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_First(self)

    def Last(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Last(self)

    def Append(self, *args):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Append(self, *args)

    def Prepend(self, *args):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Prepend(self, *args)

    def RemoveFirst(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_RemoveFirst(self)

    def Remove(self, theIter):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_InsertAfter(self, *args)

    def Reverse(self):
        return _Prs3d.Prs3d_NListOfSequenceOfPnt_Reverse(self)
    __swig_destroy__ = _Prs3d.delete_Prs3d_NListOfSequenceOfPnt

    def __len__(self):
        return self.Size()


# Register Prs3d_NListOfSequenceOfPnt in _Prs3d:
_Prs3d.Prs3d_NListOfSequenceOfPnt_swigregister(Prs3d_NListOfSequenceOfPnt)
class prs3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AddFreeEdges(*args):
        r"""

        Parameters
        ----------
        theSegments: TColgp_SequenceOfPnt
        thePolyTri: Poly_Triangulation
        theLocation: gp_Trsf

        Return
        -------
        None

        Description
        -----------
        Add triangulation free edges into sequence of line segments. @param thesegments [out] sequence of line segments to fill @param thepolytri [in] triangulation to process @param thelocation [in] transformation to apply.

        """
        return _Prs3d.prs3d_AddFreeEdges(*args)

    @staticmethod
    def AddPrimitivesGroup(*args):
        r"""

        Parameters
        ----------
        thePrs: Prs3d_Presentation
        theAspect: Prs3d_LineAspect
        thePolylines: Prs3d_NListOfSequenceOfPnt

        Return
        -------
        None

        Description
        -----------
        Add primitives into new group in presentation and clear the list of polylines.

        """
        return _Prs3d.prs3d_AddPrimitivesGroup(*args)

    @staticmethod
    def GetDeflection(*args):
        r"""

        Parameters
        ----------
        theBndMin: Graphic3d_Vec3d
        theBndMax: Graphic3d_Vec3d
        theDeviationCoefficient: float

        Return
        -------
        float

        Description
        -----------
        Computes the absolute deflection value based on relative deflection prs3d_drawer::deviationcoefficient(). @param thebndmin [in] bounding box min corner @param thebndmax [in] bounding box max corner @param thedeviationcoefficient [in] relative deflection coefficient from prs3d_drawer::deviationcoefficient() return absolute deflection coefficient based on bounding box dimensions.

        Parameters
        ----------
        theBndBox: Bnd_Box
        theDeviationCoefficient: float
        theMaximalChordialDeviation: float

        Return
        -------
        float

        Description
        -----------
        Computes the absolute deflection value based on relative deflection prs3d_drawer::deviationcoefficient(). @param thebndbox [in] bounding box @param thedeviationcoefficient [in] relative deflection coefficient from prs3d_drawer::deviationcoefficient() @param themaximalchordialdeviation [in] absolute deflection coefficient from prs3d_drawer::maximalchordialdeviation() return absolute deflection coefficient based on bounding box dimensions or themaximalchordialdeviation if bounding box is void or infinite.

        """
        return _Prs3d.prs3d_GetDeflection(*args)

    @staticmethod
    def MatchSegment(*args):
        r"""

        Parameters
        ----------
        X: float
        Y: float
        Z: float
        aDistance: float
        p1: gp_Pnt
        p2: gp_Pnt

        Return
        -------
        dist: float

        Description
        -----------
        Draws an arrow at a given location, with respect to a given direction.

        """
        return _Prs3d.prs3d_MatchSegment(*args)

    @staticmethod
    def PrimitivesFromPolylines(*args):
        r"""

        Parameters
        ----------
        thePoints: Prs3d_NListOfSequenceOfPnt

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfPrimitives>

        Description
        -----------
        Assembles array of primitives for sequence of polylines. @param thepoints [in] the polylines sequence return array of primitives.

        """
        return _Prs3d.prs3d_PrimitivesFromPolylines(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _Prs3d.prs3d_swiginit(self, _Prs3d.new_prs3d())
    __swig_destroy__ = _Prs3d.delete_prs3d

# Register prs3d in _Prs3d:
_Prs3d.prs3d_swigregister(prs3d)
class Prs3d_Arrow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Draw(*args):
        r"""

        Parameters
        ----------
        theGroup: Graphic3d_Group
        theLocation: gp_Pnt
        theDirection: gp_Dir
        theAngle: float
        theLength: float

        Return
        -------
        None

        Description
        -----------
        Defines the representation of the arrow. note that this method does not assign any presentation aspects to the primitives group! @param thegroup presentation group to add primitives @param thelocation location of the arrow tip @param thedirection direction of the arrow @param theangle angle of opening of the arrow head @param thelength length of the arrow (from the tip).

        """
        return _Prs3d.Prs3d_Arrow_Draw(*args)

    @staticmethod
    def DrawSegments(*args):
        r"""

        Parameters
        ----------
        theLocation: gp_Pnt
        theDir: gp_Dir
        theAngle: float
        theLength: float
        theNbSegments: int

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfSegments>

        Description
        -----------
        Defines the representation of the arrow as a container of segments. @param thelocation location of the arrow tip @param thedir direction of the arrow @param theangle angle of opening of the arrow head @param thelength length of the arrow (from the tip) @param thenbsegments count of points on polyline where location is connected.

        """
        return _Prs3d.Prs3d_Arrow_DrawSegments(*args)

    @staticmethod
    def DrawShaded(*args):
        r"""

        Parameters
        ----------
        theAxis: gp_Ax1
        theTubeRadius: float
        theAxisLength: float
        theConeRadius: float
        theConeLength: float
        theNbFacettes: int

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Defines the representation of the arrow as shaded triangulation. @param theaxis axis definition (arrow origin and direction) @param thetuberadius tube (cylinder) radius @param theaxislength overall arrow length (cylinder + cone) @param theconeradius cone radius (arrow tip) @param theconelength cone length (arrow tip) @param thenbfacettes tessellation quality for each part.

        """
        return _Prs3d.Prs3d_Arrow_DrawShaded(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _Prs3d.Prs3d_Arrow_swiginit(self, _Prs3d.new_Prs3d_Arrow())
    __swig_destroy__ = _Prs3d.delete_Prs3d_Arrow

# Register Prs3d_Arrow in _Prs3d:
_Prs3d.Prs3d_Arrow_swigregister(Prs3d_Arrow)
class Prs3d_BasicAspect(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_BasicAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_BasicAspect

# Register Prs3d_BasicAspect in _Prs3d:
_Prs3d.Prs3d_BasicAspect_swigregister(Prs3d_BasicAspect)
class Prs3d_DimensionUnits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Default constructor. sets meters as default length units and radians as default angle units.

        Parameters
        ----------
        theUnits: Prs3d_DimensionUnits

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _Prs3d.Prs3d_DimensionUnits_swiginit(self, _Prs3d.new_Prs3d_DimensionUnits(*args))

    def GetAngleUnits(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Return angle units.

        """
        return _Prs3d.Prs3d_DimensionUnits_GetAngleUnits(self, *args)

    def GetLengthUnits(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Return length units.

        """
        return _Prs3d.Prs3d_DimensionUnits_GetLengthUnits(self, *args)

    def SetAngleUnits(self, *args):
        r"""

        Parameters
        ----------
        theUnits: str

        Return
        -------
        None

        Description
        -----------
        Sets angle units.

        """
        return _Prs3d.Prs3d_DimensionUnits_SetAngleUnits(self, *args)

    def SetLengthUnits(self, *args):
        r"""

        Parameters
        ----------
        theUnits: str

        Return
        -------
        None

        Description
        -----------
        Sets length units.

        """
        return _Prs3d.Prs3d_DimensionUnits_SetLengthUnits(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_DimensionUnits

# Register Prs3d_DimensionUnits in _Prs3d:
_Prs3d.Prs3d_DimensionUnits_swigregister(Prs3d_DimensionUnits)
class Prs3d_Drawer(OCC.Core.Graphic3d.Graphic3d_PresentationAttributes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Default constructor.

        """
        _Prs3d.Prs3d_Drawer_swiginit(self, _Prs3d.new_Prs3d_Drawer(*args))

    def ArrowAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_ArrowAspect>

        Description
        -----------
        Returns own attributes for display of arrows, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_ArrowAspect(self, *args)

    def ClearLocalAttributes(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Removes local attributes. .

        """
        return _Prs3d.Prs3d_Drawer_ClearLocalAttributes(self, *args)

    def DatumAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_DatumAspect>

        Description
        -----------
        Returns own settings for the appearance of datums, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_DatumAspect(self, *args)

    def DeviationAngle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the value for deviation angle in radians, 20 * m_pi / 180 by default.

        """
        return _Prs3d.Prs3d_Drawer_DeviationAngle(self, *args)

    def DeviationCoefficient(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the deviation coefficient. drawings of curves or patches are made with respect to a maximal chordal deviation. a deviation coefficient is used in the shading display mode. the shape is seen decomposed into triangles. these are used to calculate reflection of light from the surface of the object. the triangles are formed from chords of the curves in the shape. the deviation coefficient gives the highest value of the angle with which a chord can deviate from a tangent to a curve. if this limit is reached, a new triangle is begun. this deviation is absolute and is set through the method: setmaximalchordialdeviation. the default value is 0.001. in drawing shapes, however, you are allowed to ask for a relative deviation. this deviation will be: sizeofobject * deviationcoefficient.

        """
        return _Prs3d.Prs3d_Drawer_DeviationCoefficient(self, *args)

    def DimAngleDisplayUnits(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns angle units in which dimension presentation is displayed.

        """
        return _Prs3d.Prs3d_Drawer_DimAngleDisplayUnits(self, *args)

    def DimAngleModelUnits(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns angle model units for the dimension presentation. .

        """
        return _Prs3d.Prs3d_Drawer_DimAngleModelUnits(self, *args)

    def DimLengthDisplayUnits(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns length units in which dimension presentation is displayed.

        """
        return _Prs3d.Prs3d_Drawer_DimLengthDisplayUnits(self, *args)

    def DimLengthModelUnits(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns length model units for the dimension presentation. .

        """
        return _Prs3d.Prs3d_Drawer_DimLengthModelUnits(self, *args)

    def DimensionAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_DimensionAspect>

        Description
        -----------
        Returns own settings for the appearance of dimensions, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_DimensionAspect(self, *args)

    def DisableDrawHiddenLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Disables the drawhiddenline function.

        """
        return _Prs3d.Prs3d_Drawer_DisableDrawHiddenLine(self, *args)

    def Discretisation(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the discretisation setting. .

        """
        return _Prs3d.Prs3d_Drawer_Discretisation(self, *args)

    def DrawHiddenLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns standard_true if the hidden lines are to be drawn. by default the hidden lines are not drawn.

        """
        return _Prs3d.Prs3d_Drawer_DrawHiddenLine(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_Drawer_DumpJsonToString(self, depth)

    def EnableDrawHiddenLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Enables the drawhiddenline function.

        """
        return _Prs3d.Prs3d_Drawer_EnableDrawHiddenLine(self, *args)

    def FaceBoundaryAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own line aspect of face boundaries, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_FaceBoundaryAspect(self, *args)

    def FaceBoundaryDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Checks whether the face boundary drawing is enabled or not.

        """
        return _Prs3d.Prs3d_Drawer_FaceBoundaryDraw(self, *args)

    def FaceBoundaryUpperContinuity(self, *args):
        r"""
        Return
        -------
        GeomAbs_Shape

        Description
        -----------
        Get the most edge continuity class; geomabs_cn by default (all edges).

        """
        return _Prs3d.Prs3d_Drawer_FaceBoundaryUpperContinuity(self, *args)

    def FreeBoundaryAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own settings for presentation of free boundaries, settings from linked drawer or null if neither was set. in other words, this settings affect boundaries which are not shared. these attributes are used by the algorithm prs3d_wfshape.

        """
        return _Prs3d.Prs3d_Drawer_FreeBoundaryAspect(self, *args)

    def FreeBoundaryDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawing of the free boundaries is enabled true is the default setting.

        """
        return _Prs3d.Prs3d_Drawer_FreeBoundaryDraw(self, *args)

    def HLRAngle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_Drawer_HLRAngle(self, *args)

    def HasLink(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the current object has a link on the other drawer.

        """
        return _Prs3d.Prs3d_Drawer_HasLink(self, *args)

    def HasOwnArrowAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for arrow aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnArrowAspect(self, *args)

    def HasOwnDatumAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for datum aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDatumAspect(self, *args)

    def HasOwnDeviationAngle(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a local setting for deviation angle in this framework for a specific interactive object.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDeviationAngle(self, *args)

    def HasOwnDeviationCoefficient(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if there is a local setting for deviation coefficient in this framework for a specific interactive object.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDeviationCoefficient(self, *args)

    def HasOwnDimAngleDisplayUnits(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for angle units in which dimension presentation is displayed that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimAngleDisplayUnits(self, *args)

    def HasOwnDimAngleModelUnits(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for dimension angle model units that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimAngleModelUnits(self, *args)

    def HasOwnDimLengthDisplayUnits(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for length units in which dimension presentation is displayed that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimLengthDisplayUnits(self, *args)

    def HasOwnDimLengthModelUnits(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for dimension length model units that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimLengthModelUnits(self, *args)

    def HasOwnDimensionAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for the appearance of dimensions that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimensionAspect(self, *args)

    def HasOwnDiscretisation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has discretisation setting active.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDiscretisation(self, *args)

    def HasOwnDrawHiddenLine(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for 'draw hidden lines' flag that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDrawHiddenLine(self, *args)

    def HasOwnFaceBoundaryAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for face boundaries aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFaceBoundaryAspect(self, *args)

    def HasOwnFaceBoundaryDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for 'draw face boundaries' flag that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFaceBoundaryDraw(self, *args)

    def HasOwnFaceBoundaryUpperContinuity(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for face boundaries upper edge continuity class that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFaceBoundaryUpperContinuity(self, *args)

    def HasOwnFreeBoundaryAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for free boundaries aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFreeBoundaryAspect(self, *args)

    def HasOwnFreeBoundaryDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for 'draw free boundaries' flag that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFreeBoundaryDraw(self, *args)

    def HasOwnHLRDeviationAngle(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnHLRDeviationAngle(self, *args)

    def HasOwnHiddenLineAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for hidden lines aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnHiddenLineAspect(self, *args)

    def HasOwnIsAutoTriangulation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has isoonplane setting active.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnIsAutoTriangulation(self, *args)

    def HasOwnIsoOnPlane(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has isoonplane setting active.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnIsoOnPlane(self, *args)

    def HasOwnIsoOnTriangulation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has isoontriangulation setting active.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnIsoOnTriangulation(self, *args)

    def HasOwnLineArrowDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for 'draw arrow' flag that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnLineArrowDraw(self, *args)

    def HasOwnLineAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for line aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnLineAspect(self, *args)

    def HasOwnMaximalChordialDeviation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has a maximal chordial deviation setting active.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnMaximalChordialDeviation(self, *args)

    def HasOwnMaximalParameterValue(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has a maximum value allowed for the first and last parameters of an infinite curve setting active.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnMaximalParameterValue(self, *args)

    def HasOwnPlaneAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for plane aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnPlaneAspect(self, *args)

    def HasOwnPointAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for point aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnPointAspect(self, *args)

    def HasOwnSectionAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for section aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnSectionAspect(self, *args)

    def HasOwnSeenLineAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for seen line aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnSeenLineAspect(self, *args)

    def HasOwnShadingAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for shading aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnShadingAspect(self, *args)

    def HasOwnTextAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for text aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnTextAspect(self, *args)

    def HasOwnTypeOfDeflection(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has a type of deflection setting active.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnTypeOfDeflection(self, *args)

    def HasOwnTypeOfHLR(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the type of hlr is not equal to prs3d_toh_notset.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnTypeOfHLR(self, *args)

    def HasOwnUIsoAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for uiso aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnUIsoAspect(self, *args)

    def HasOwnUnFreeBoundaryAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for unfree boundaries aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnUnFreeBoundaryAspect(self, *args)

    def HasOwnUnFreeBoundaryDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for 'draw shared boundaries' flag that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnUnFreeBoundaryDraw(self, *args)

    def HasOwnVIsoAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for viso aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnVIsoAspect(self, *args)

    def HasOwnVectorAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for vector aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnVectorAspect(self, *args)

    def HasOwnVertexDrawMode(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the vertex draw mode is not equal to <b>prs3d_vdm_inherited</b>. this means that individual vertex draw mode value (i.e. not inherited from the global drawer) is used for a specific interactive object.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnVertexDrawMode(self, *args)

    def HasOwnWireAspect(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for wire aspect that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnWireAspect(self, *args)

    def HasOwnWireDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawer has its own attribute for 'draw wires' flag that overrides the one in the link.

        """
        return _Prs3d.Prs3d_Drawer_HasOwnWireDraw(self, *args)

    def HiddenLineAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own settings for hidden line aspects, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_HiddenLineAspect(self, *args)

    def IsAutoTriangulation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if automatic triangulation is enabled.

        """
        return _Prs3d.Prs3d_Drawer_IsAutoTriangulation(self, *args)

    def IsoOnPlane(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawing of isos on planes is enabled.

        """
        return _Prs3d.Prs3d_Drawer_IsoOnPlane(self, *args)

    def IsoOnTriangulation(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawing of isos on triangulation is enabled.

        """
        return _Prs3d.Prs3d_Drawer_IsoOnTriangulation(self, *args)

    def LineArrowDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if drawing an arrow at the end of each edge is enabled and false otherwise (the default).

        """
        return _Prs3d.Prs3d_Drawer_LineArrowDraw(self, *args)

    def LineAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own settings for line aspects, settings from linked drawer or null if neither was set. these attributes are used by the following algorithms: prs3d_curve prs3d_line prs3d_hlrshape.

        """
        return _Prs3d.Prs3d_Drawer_LineAspect(self, *args)

    def Link(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_Drawer>

        Description
        -----------
        Returns the drawer to which the current object references.

        Parameters
        ----------
        theDrawer: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Sets thedrawer as a link to which the current object references.

        """
        return _Prs3d.Prs3d_Drawer_Link(self, *args)

    def MaximalChordialDeviation(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the maximal chordal deviation. the default value is 0.0001. drawings of curves or patches are made with respect to an absolute maximal chordal deviation.

        """
        return _Prs3d.Prs3d_Drawer_MaximalChordialDeviation(self, *args)

    def MaximalParameterValue(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Sets the maximum value allowed for the first and last parameters of an infinite curve. by default, this value is 500000.

        """
        return _Prs3d.Prs3d_Drawer_MaximalParameterValue(self, *args)

    def PlaneAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_PlaneAspect>

        Description
        -----------
        Returns own settings for the appearance of planes, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_PlaneAspect(self, *args)

    def PointAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_PointAspect>

        Description
        -----------
        Returns own point aspect setting, settings from linked drawer or null if neither was set. these attributes are used by the algorithms prs3d_point.

        """
        return _Prs3d.Prs3d_Drawer_PointAspect(self, *args)

    def PreviousDeviationAngle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the previous deviation angle.

        """
        return _Prs3d.Prs3d_Drawer_PreviousDeviationAngle(self, *args)

    def PreviousDeviationCoefficient(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Saves the previous value used for the chordal deviation coefficient. .

        """
        return _Prs3d.Prs3d_Drawer_PreviousDeviationCoefficient(self, *args)

    def PreviousHLRDeviationAngle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_Drawer_PreviousHLRDeviationAngle(self, *args)

    def SectionAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own lineaspect for section wire, settings from linked drawer or null if neither was set. these attributes are used by the algorithm prs3d_wfshape.

        """
        return _Prs3d.Prs3d_Drawer_SectionAspect(self, *args)

    def SeenLineAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own settings for seen line aspects, settings of linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_SeenLineAspect(self, *args)

    def SetArrowAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_ArrowAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for display attributes of arrows.

        """
        return _Prs3d.Prs3d_Drawer_SetArrowAspect(self, *args)

    def SetAutoTriangulation(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Sets isautotriangulated on or off by setting the parameter theisenabled to true or false. if this flag is true automatic re-triangulation with deflection-check logic will be applied. else this feature will be disable and triangulation is expected to be computed by application itself and no shading presentation at all if unavailable.

        """
        return _Prs3d.Prs3d_Drawer_SetAutoTriangulation(self, *args)

    def SetDatumAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_DatumAspect

        Return
        -------
        None

        Description
        -----------
        Sets the modality theaspect for the display of datums.

        """
        return _Prs3d.Prs3d_Drawer_SetDatumAspect(self, *args)

    def SetDeviationAngle(self, *args):
        r"""

        Parameters
        ----------
        theAngle: float

        Return
        -------
        None

        Description
        -----------
        Sets the deviation angle theangle. also sets the hasowndeviationangle flag to standard_true, and mypreviousdeviationangle.
        Return
        -------
        None

        Description
        -----------
        Resets hasowndeviationangle() flag, e.g. undoes previous setdeviationangle().

        """
        return _Prs3d.Prs3d_Drawer_SetDeviationAngle(self, *args)

    def SetDeviationCoefficient(self, *args):
        r"""

        Parameters
        ----------
        theCoefficient: float

        Return
        -------
        None

        Description
        -----------
        Sets the deviation coefficient thecoefficient. also sets the hasowndeviationcoefficient flag to standard_true and mypreviousdeviationcoefficient.
        Return
        -------
        None

        Description
        -----------
        Resets hasowndeviationcoefficient() flag, e.g. undoes previous setdeviationcoefficient().

        """
        return _Prs3d.Prs3d_Drawer_SetDeviationCoefficient(self, *args)

    def SetDimAngleDisplayUnits(self, *args):
        r"""

        Parameters
        ----------
        theUnits: str

        Return
        -------
        None

        Description
        -----------
        Sets angle units in which value for dimension presentation is displayed. the method sets value owned by the drawer that will be used during visualization instead of the one set in link.

        """
        return _Prs3d.Prs3d_Drawer_SetDimAngleDisplayUnits(self, *args)

    def SetDimAngleModelUnits(self, *args):
        r"""

        Parameters
        ----------
        theUnits: str

        Return
        -------
        None

        Description
        -----------
        Sets dimension angle model units for computing of dimension presentation. the method sets value owned by the drawer that will be used during visualization instead of the one set in link.

        """
        return _Prs3d.Prs3d_Drawer_SetDimAngleModelUnits(self, *args)

    def SetDimLengthDisplayUnits(self, *args):
        r"""

        Parameters
        ----------
        theUnits: str

        Return
        -------
        None

        Description
        -----------
        Sets length units in which value for dimension presentation is displayed. the method sets value owned by the drawer that will be used during visualization instead of the one set in link.

        """
        return _Prs3d.Prs3d_Drawer_SetDimLengthDisplayUnits(self, *args)

    def SetDimLengthModelUnits(self, *args):
        r"""

        Parameters
        ----------
        theUnits: str

        Return
        -------
        None

        Description
        -----------
        Sets dimension length model units for computing of dimension presentation. the method sets value owned by the drawer that will be used during visualization instead of the one set in link.

        """
        return _Prs3d.Prs3d_Drawer_SetDimLengthModelUnits(self, *args)

    def SetDimensionAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_DimensionAspect

        Return
        -------
        None

        Description
        -----------
        Sets the settings for the appearance of dimensions. the method sets aspect owned by the drawer that will be used during visualization instead of the one set in link.

        """
        return _Prs3d.Prs3d_Drawer_SetDimensionAspect(self, *args)

    def SetDiscretisation(self, *args):
        r"""

        Parameters
        ----------
        theValue: int

        Return
        -------
        None

        Description
        -----------
        Sets the discretisation parameter thevalue.

        """
        return _Prs3d.Prs3d_Drawer_SetDiscretisation(self, *args)

    def SetFaceBoundaryAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets line aspect for face boundaries. the method sets line aspect owned by the drawer that will be used during visualization instead of the one set in link. theaspect is the line aspect that determines the look of the face boundaries.

        """
        return _Prs3d.Prs3d_Drawer_SetFaceBoundaryAspect(self, *args)

    def SetFaceBoundaryDraw(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Enables or disables face boundary drawing for shading presentations. the method sets drawing flag owned by the drawer that will be used during visualization instead of the one set in link. theisenabled is a boolean flag indicating whether the face boundaries should be drawn or not.

        """
        return _Prs3d.Prs3d_Drawer_SetFaceBoundaryDraw(self, *args)

    def SetFaceBoundaryUpperContinuity(self, *args):
        r"""

        Parameters
        ----------
        theMostAllowedEdgeClass: GeomAbs_Shape

        Return
        -------
        None

        Description
        -----------
        Set the most edge continuity class for face boundaries.

        """
        return _Prs3d.Prs3d_Drawer_SetFaceBoundaryUpperContinuity(self, *args)

    def SetFreeBoundaryAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for the display of free boundaries. the method sets aspect owned by the drawer that will be used during visualization instead of the one set in link.

        """
        return _Prs3d.Prs3d_Drawer_SetFreeBoundaryAspect(self, *args)

    def SetFreeBoundaryDraw(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Enables or disables drawing of free boundaries for shading presentations. the method sets drawing flag owned by the drawer that will be used during visualization instead of the one set in link. theisenabled is a boolean flag indicating whether the free boundaries should be drawn or not.

        """
        return _Prs3d.Prs3d_Drawer_SetFreeBoundaryDraw(self, *args)

    def SetHLRAngle(self, *args):
        r"""

        Parameters
        ----------
        theAngle: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.
        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_Drawer_SetHLRAngle(self, *args)

    def SetHiddenLineAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for the display of hidden lines in hidden line removal mode.

        """
        return _Prs3d.Prs3d_Drawer_SetHiddenLineAspect(self, *args)

    def SetIsoOnPlane(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Sets isoonplane on or off by setting the parameter theisenabled to true or false.

        """
        return _Prs3d.Prs3d_Drawer_SetIsoOnPlane(self, *args)

    def SetIsoOnTriangulation(self, *args):
        r"""

        Parameters
        ----------
        theToEnable: bool

        Return
        -------
        None

        Description
        -----------
        Enables or disables isolines on triangulation by setting the parameter theisenabled to true or false.

        """
        return _Prs3d.Prs3d_Drawer_SetIsoOnTriangulation(self, *args)

    def SetLineArrowDraw(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Enables the drawing of an arrow at the end of each line. by default the arrows are not drawn.

        """
        return _Prs3d.Prs3d_Drawer_SetLineArrowDraw(self, *args)

    def SetLineAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for display attributes of lines.

        """
        return _Prs3d.Prs3d_Drawer_SetLineAspect(self, *args)

    def SetLink(self, *args):
        r"""

        Parameters
        ----------
        theDrawer: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Sets thedrawer as a link to which the current object references.

        """
        return _Prs3d.Prs3d_Drawer_SetLink(self, *args)

    def SetMaximalChordialDeviation(self, *args):
        r"""

        Parameters
        ----------
        theChordialDeviation: float

        Return
        -------
        None

        Description
        -----------
        Defines the maximal chordial deviation when drawing any curve. even if the type of deviation is set to tod_relative, this value is used by: prs3d_deflectioncurve prs3d_wfdeflectionsurface prs3d_wfdeflectionrestrictedface.

        """
        return _Prs3d.Prs3d_Drawer_SetMaximalChordialDeviation(self, *args)

    def SetMaximalParameterValue(self, *args):
        r"""

        Parameters
        ----------
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Defines the maximum value allowed for the first and last parameters of an infinite curve.

        """
        return _Prs3d.Prs3d_Drawer_SetMaximalParameterValue(self, *args)

    def SetOwnDatumAspects(self, *args):
        r"""

        Parameters
        ----------
        theDefaults: Prs3d_Drawer (optional, default to opencascade::handle<Prs3d_Drawer>())

        Return
        -------
        bool

        Description
        -----------
        Sets own line aspects for datums. returns false if own line for datums are already set.

        """
        return _Prs3d.Prs3d_Drawer_SetOwnDatumAspects(self, *args)

    def SetOwnLineAspects(self, *args):
        r"""

        Parameters
        ----------
        theDefaults: Prs3d_Drawer (optional, default to opencascade::handle<Prs3d_Drawer>())

        Return
        -------
        bool

        Description
        -----------
        Sets own line aspects, which are single u and single v gray75 solid isolines (::uisoaspect(), ::visoaspect()), red wire (::wireaspect()), yellow line (::lineaspect()), yellow seen line (::seenlineaspect()), dashed yellow hidden line (::hiddenlineaspect()), green free boundary (::freeboundaryaspect()), yellow unfree boundary (::unfreeboundaryaspect()). returns false if own line aspect are already set.

        """
        return _Prs3d.Prs3d_Drawer_SetOwnLineAspects(self, *args)

    def SetPlaneAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_PlaneAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for the display of planes. .

        """
        return _Prs3d.Prs3d_Drawer_SetPlaneAspect(self, *args)

    def SetPointAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_PointAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for display attributes of points.

        """
        return _Prs3d.Prs3d_Drawer_SetPointAspect(self, *args)

    def SetSectionAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for display attributes of sections. .

        """
        return _Prs3d.Prs3d_Drawer_SetSectionAspect(self, *args)

    def SetSeenLineAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for the display of seen lines in hidden line removal mode.

        """
        return _Prs3d.Prs3d_Drawer_SetSeenLineAspect(self, *args)

    def SetShaderProgram(self, *args):
        r"""

        Parameters
        ----------
        theProgram: Graphic3d_ShaderProgram
        theAspect: Graphic3d_GroupAspect
        theToOverrideDefaults: bool (optional, default to false)

        Return
        -------
        bool

        Description
        -----------
        Assign shader program for specified type of primitives. @param theprogram new program to set (might be null) @param theaspect the type of primitives @param thetooverridedefaults if true then non-overridden attributes using defaults will be allocated and copied from the link;  otherwise, only already customized attributes will be changed return true if presentation should be recomputed after creating aspects not previously customized (if thetooverridedefaults is also true).

        """
        return _Prs3d.Prs3d_Drawer_SetShaderProgram(self, *args)

    def SetShadingAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_ShadingAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for display attributes of shading.

        """
        return _Prs3d.Prs3d_Drawer_SetShadingAspect(self, *args)

    def SetShadingModel(self, *args):
        r"""

        Parameters
        ----------
        theModel: Graphic3d_TypeOfShadingModel
        theToOverrideDefaults: bool (optional, default to false)

        Return
        -------
        bool

        Description
        -----------
        Sets shading model type for the shading aspect.

        """
        return _Prs3d.Prs3d_Drawer_SetShadingModel(self, *args)

    def SetTextAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_TextAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for display attributes of text.

        """
        return _Prs3d.Prs3d_Drawer_SetTextAspect(self, *args)

    def SetTypeOfDeflection(self, *args):
        r"""

        Parameters
        ----------
        theTypeOfDeflection: Aspect_TypeOfDeflection

        Return
        -------
        None

        Description
        -----------
        Sets the type of chordal deflection. this indicates whether the deflection value is absolute or relative to the size of the object.

        """
        return _Prs3d.Prs3d_Drawer_SetTypeOfDeflection(self, *args)

    def SetTypeOfHLR(self, *args):
        r"""

        Parameters
        ----------
        theTypeOfHLR: Prs3d_TypeOfHLR

        Return
        -------
        None

        Description
        -----------
        Sets the type of hlr algorithm used by drawer's interactive objects.

        """
        return _Prs3d.Prs3d_Drawer_SetTypeOfHLR(self, *args)

    def SetUIsoAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_IsoAspect

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_Drawer_SetUIsoAspect(self, *args)

    def SetUnFreeBoundaryAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for the display of shared boundaries. the method sets aspect owned by the drawer that will be used during visualization instead of the one set in link.

        """
        return _Prs3d.Prs3d_Drawer_SetUnFreeBoundaryAspect(self, *args)

    def SetUnFreeBoundaryDraw(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Enables or disables drawing of shared boundaries for shading presentations. the method sets drawing flag owned by the drawer that will be used during visualization instead of the one set in link. theisenabled is a boolean flag indicating whether the shared boundaries should be drawn or not.

        """
        return _Prs3d.Prs3d_Drawer_SetUnFreeBoundaryDraw(self, *args)

    def SetVIsoAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_IsoAspect

        Return
        -------
        None

        Description
        -----------
        Sets the appearance of v isoparameters - theaspect.

        """
        return _Prs3d.Prs3d_Drawer_SetVIsoAspect(self, *args)

    def SetVectorAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the modality theaspect for the display of vectors.

        """
        return _Prs3d.Prs3d_Drawer_SetVectorAspect(self, *args)

    def SetVertexDrawMode(self, *args):
        r"""

        Parameters
        ----------
        theMode: Prs3d_VertexDrawMode

        Return
        -------
        None

        Description
        -----------
        Sets the mode of visualization of vertices of a topods_shape instance. by default, only stand-alone vertices (not belonging topologically to an edge) are drawn, that corresponds to prs3d_vdm_standalone mode. switching to prs3d_vdm_standalone mode makes all shape's vertices visible. to inherit this parameter from the global drawer instance ('the link') when it is present, prs3d_vdm_inherited value should be used.

        """
        return _Prs3d.Prs3d_Drawer_SetVertexDrawMode(self, *args)

    def SetWireAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the parameter theaspect for display of wires.

        """
        return _Prs3d.Prs3d_Drawer_SetWireAspect(self, *args)

    def SetWireDraw(self, *args):
        r"""

        Parameters
        ----------
        theIsEnabled: bool

        Return
        -------
        None

        Description
        -----------
        Sets wiredraw on or off by setting the parameter theisenabled to true or false.

        """
        return _Prs3d.Prs3d_Drawer_SetWireDraw(self, *args)

    def SetupOwnDefaults(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Setup all own aspects with default values.

        """
        return _Prs3d.Prs3d_Drawer_SetupOwnDefaults(self, *args)

    def SetupOwnFaceBoundaryAspect(self, *args):
        r"""

        Parameters
        ----------
        theDefaults: Prs3d_Drawer (optional, default to opencascade::handle<Prs3d_Drawer>())

        Return
        -------
        bool

        Description
        -----------
        Sets own face boundary aspect, which is a black solid line by default. returns false if the drawer already has its own attribute for face boundary aspect.

        """
        return _Prs3d.Prs3d_Drawer_SetupOwnFaceBoundaryAspect(self, *args)

    def SetupOwnPointAspect(self, *args):
        r"""

        Parameters
        ----------
        theDefaults: Prs3d_Drawer (optional, default to opencascade::handle<Prs3d_Drawer>())

        Return
        -------
        bool

        Description
        -----------
        Sets own point aspect, which is a yellow aspect_tom_plus marker by default. returns false if the drawer already has its own attribute for point aspect.

        """
        return _Prs3d.Prs3d_Drawer_SetupOwnPointAspect(self, *args)

    def SetupOwnShadingAspect(self, *args):
        r"""

        Parameters
        ----------
        theDefaults: Prs3d_Drawer (optional, default to opencascade::handle<Prs3d_Drawer>())

        Return
        -------
        bool

        Description
        -----------
        Sets own shading aspect, which is graphic3d_nameofmaterial_brass material by default. returns false if the drawer already has its own attribute for shading aspect.

        """
        return _Prs3d.Prs3d_Drawer_SetupOwnShadingAspect(self, *args)

    def ShadingAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_ShadingAspect>

        Description
        -----------
        Returns own settings for shading aspects, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_ShadingAspect(self, *args)

    def TextAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_TextAspect>

        Description
        -----------
        Returns own settings for text aspect, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_TextAspect(self, *args)

    def TypeOfDeflection(self, *args):
        r"""
        Return
        -------
        Aspect_TypeOfDeflection

        Description
        -----------
        Returns the type of chordal deflection. this indicates whether the deflection value is absolute or relative to the size of the object.

        """
        return _Prs3d.Prs3d_Drawer_TypeOfDeflection(self, *args)

    def TypeOfHLR(self, *args):
        r"""
        Return
        -------
        Prs3d_TypeOfHLR

        Description
        -----------
        Returns the type of hlr algorithm currently in use.

        """
        return _Prs3d.Prs3d_Drawer_TypeOfHLR(self, *args)

    def UIsoAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_IsoAspect>

        Description
        -----------
        Defines own attributes for drawing an u isoparametric curve of a face, settings from linked drawer or null if neither was set. //! these attributes are used by the following algorithms: prs3d_wfdeflectionsurface prs3d_wfdeflectionrestrictedface.

        """
        return _Prs3d.Prs3d_Drawer_UIsoAspect(self, *args)

    def UnFreeBoundaryAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own settings for shared boundary line aspects, settings from linked drawer or null if neither was set. these attributes are used by the algorithm prs3d_wfshape.

        """
        return _Prs3d.Prs3d_Drawer_UnFreeBoundaryAspect(self, *args)

    def UnFreeBoundaryDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawing of the shared boundaries is enabled. true is the default setting.

        """
        return _Prs3d.Prs3d_Drawer_UnFreeBoundaryDraw(self, *args)

    def UnsetFaceBoundaryUpperContinuity(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Unset the most edge continuity class for face boundaries.

        """
        return _Prs3d.Prs3d_Drawer_UnsetFaceBoundaryUpperContinuity(self, *args)

    def UnsetOwnDimAngleDisplayUnits(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasowndimangledisplayunits() flag, e.g. undoes setdimlengthdisplayunits().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnDimAngleDisplayUnits(self, *args)

    def UnsetOwnDimAngleModelUnits(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasowndimanglemodelunits() flag, e.g. undoes setdimanglemodelunits().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnDimAngleModelUnits(self, *args)

    def UnsetOwnDimLengthDisplayUnits(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasowndimlengthmodelunits() flag, e.g. undoes setdimlengthdisplayunits().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnDimLengthDisplayUnits(self, *args)

    def UnsetOwnDimLengthModelUnits(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasowndimlengthmodelunits() flag, e.g. undoes setdimlengthmodelunits().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnDimLengthModelUnits(self, *args)

    def UnsetOwnDiscretisation(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasowndiscretisation() flag, e.g. undoes setdiscretisation().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnDiscretisation(self, *args)

    def UnsetOwnDrawHiddenLine(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasowndrawhiddenline() flag, e.g. unsets enabledrawhiddenline()/disabledrawhiddenline().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnDrawHiddenLine(self, *args)

    def UnsetOwnFaceBoundaryDraw(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownfaceboundarydraw() flag, e.g. undoes setfaceboundarydraw().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnFaceBoundaryDraw(self, *args)

    def UnsetOwnFreeBoundaryDraw(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownfreeboundarydraw() flag, e.g. undoes setfreeboundarydraw().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnFreeBoundaryDraw(self, *args)

    def UnsetOwnIsAutoTriangulation(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownisautotriangulation() flag, e.g. undoes setautotriangulation().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnIsAutoTriangulation(self, *args)

    def UnsetOwnIsoOnPlane(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownisoonplane() flag, e.g. undoes setisoonplane().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnIsoOnPlane(self, *args)

    def UnsetOwnIsoOnTriangulation(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownisoontriangulation() flag, e.g. undoes setisoontriangulation().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnIsoOnTriangulation(self, *args)

    def UnsetOwnLineArrowDraw(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Reset hasownlinearrowdraw() flag, e.g. undoes setlinearrowdraw().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnLineArrowDraw(self, *args)

    def UnsetOwnMaximalChordialDeviation(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownmaximalchordialdeviation() flag, e.g. undoes setmaximalchordialdeviation().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnMaximalChordialDeviation(self, *args)

    def UnsetOwnMaximalParameterValue(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownmaximalparametervalue() flag, e.g. undoes setmaximalparametervalue().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnMaximalParameterValue(self, *args)

    def UnsetOwnTypeOfDeflection(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasowntypeofdeflection() flag, e.g. undoes settypeofdeflection().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnTypeOfDeflection(self, *args)

    def UnsetOwnUnFreeBoundaryDraw(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownunfreeboundarydraw() flag, e.g. undoes setunfreeboundarydraw().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnUnFreeBoundaryDraw(self, *args)

    def UnsetOwnWireDraw(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Resets hasownwiredraw() flag, e.g. undoes setwiredraw().

        """
        return _Prs3d.Prs3d_Drawer_UnsetOwnWireDraw(self, *args)

    def UpdatePreviousDeviationAngle(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Updates the previous deviation angle to the current value.

        """
        return _Prs3d.Prs3d_Drawer_UpdatePreviousDeviationAngle(self, *args)

    def UpdatePreviousDeviationCoefficient(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Updates the previous value used for the chordal deviation coefficient to the current state.

        """
        return _Prs3d.Prs3d_Drawer_UpdatePreviousDeviationCoefficient(self, *args)

    def VIsoAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_IsoAspect>

        Description
        -----------
        Defines own attributes for drawing an v isoparametric curve of a face, settings from linked drawer or null if neither was set. //! these attributes are used by the following algorithms: prs3d_wfdeflectionsurface prs3d_wfdeflectionrestrictedface.

        """
        return _Prs3d.Prs3d_Drawer_VIsoAspect(self, *args)

    def VectorAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own settings for the appearance of vectors, settings from linked drawer or null if neither was set.

        """
        return _Prs3d.Prs3d_Drawer_VectorAspect(self, *args)

    def VertexDrawMode(self, *args):
        r"""
        Return
        -------
        Prs3d_VertexDrawMode

        Description
        -----------
        Returns the current mode of visualization of vertices of a topods_shape instance.

        """
        return _Prs3d.Prs3d_Drawer_VertexDrawMode(self, *args)

    def WireAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns own wire aspect settings, settings from linked drawer or null if neither was set. these attributes are used by the algorithm prs3d_wfshape.

        """
        return _Prs3d.Prs3d_Drawer_WireAspect(self, *args)

    def WireDraw(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the drawing of the wire is enabled.

        """
        return _Prs3d.Prs3d_Drawer_WireDraw(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_Drawer_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_Drawer

# Register Prs3d_Drawer in _Prs3d:
_Prs3d.Prs3d_Drawer_swigregister(Prs3d_Drawer)
class Prs3d_PresentationShadow(OCC.Core.Graphic3d.Graphic3d_Structure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theViewer: Graphic3d_StructureManager
        thePrs: Graphic3d_Structure

        Return
        -------
        None

        Description
        -----------
        Constructs a shadow of existing presentation object.

        """
        _Prs3d.Prs3d_PresentationShadow_swiginit(self, _Prs3d.new_Prs3d_PresentationShadow(*args))

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_PresentationShadow_DumpJsonToString(self, depth)

    def ParentAffinity(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_ViewAffinity>

        Description
        -----------
        Returns view affinity of the parent presentation.

        """
        return _Prs3d.Prs3d_PresentationShadow_ParentAffinity(self, *args)

    def ParentId(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the id of the parent presentation.

        """
        return _Prs3d.Prs3d_PresentationShadow_ParentId(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_PresentationShadow_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_PresentationShadow

# Register Prs3d_PresentationShadow in _Prs3d:
_Prs3d.Prs3d_PresentationShadow_swigregister(Prs3d_PresentationShadow)
class Prs3d_Root(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CurrentGroup(*args):
        r"""

        Parameters
        ----------
        thePrs3d: Prs3d_Presentation

        Return
        -------
        opencascade::handle<Graphic3d_Group>

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_Root_CurrentGroup(*args)

    @staticmethod
    def NewGroup(*args):
        r"""

        Parameters
        ----------
        thePrs3d: Prs3d_Presentation

        Return
        -------
        opencascade::handle<Graphic3d_Group>

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_Root_NewGroup(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _Prs3d.Prs3d_Root_swiginit(self, _Prs3d.new_Prs3d_Root())
    __swig_destroy__ = _Prs3d.delete_Prs3d_Root

# Register Prs3d_Root in _Prs3d:
_Prs3d.Prs3d_Root_swigregister(Prs3d_Root)
class Prs3d_Text(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Draw(*args):
        r"""

        Parameters
        ----------
        theGroup: Graphic3d_Group
        theAspect: Prs3d_TextAspect
        theText: str
        theAttachmentPoint: gp_Pnt

        Return
        -------
        opencascade::handle<Graphic3d_Text>

        Description
        -----------
        Defines the display of the text. @param thegroup group to add primitives @param theaspect presentation attributes @param thetext text to draw @param theattachmentpoint attachment point return text to draw.

        Parameters
        ----------
        theGroup: Graphic3d_Group
        theAspect: Prs3d_TextAspect
        theText: str
        theOrientation: gp_Ax2
        theHasOwnAnchor: bool (optional, default to Standard_True)

        Return
        -------
        opencascade::handle<Graphic3d_Text>

        Description
        -----------
        Draws the text label. @param thegroup group to add primitives @param theaspect presentation attributes @param thetext text to draw @param theorientation location and orientation specified in the model 3d space @param thehasownanchor return text to draw.

        """
        return _Prs3d.Prs3d_Text_Draw(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _Prs3d.Prs3d_Text_swiginit(self, _Prs3d.new_Prs3d_Text())
    __swig_destroy__ = _Prs3d.delete_Prs3d_Text

# Register Prs3d_Text in _Prs3d:
_Prs3d.Prs3d_Text_swigregister(Prs3d_Text)
class Prs3d_ToolQuadric(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def CreatePolyTriangulation(self, *args):
        r"""

        Parameters
        ----------
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Poly_Triangulation>

        Description
        -----------
        Generate primitives for 3d quadric surface presentation. @param thetrsf [in] optional transformation to apply return generated triangulation.

        """
        return _Prs3d.Prs3d_ToolQuadric_CreatePolyTriangulation(self, *args)

    def CreateTriangulation(self, *args):
        r"""

        Parameters
        ----------
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface presentation. @param thetrsf [in] optional transformation to apply return generated triangulation.

        """
        return _Prs3d.Prs3d_ToolQuadric_CreateTriangulation(self, *args)

    def FillArray(self, *args):
        r"""

        Parameters
        ----------
        theArray: Graphic3d_ArrayOfTriangles
        theTrsf: gp_Trsf

        Return
        -------
        None

        Description
        -----------
        Generate primitives for 3d quadric surface and fill the given array. @param thearray [in][out] the array of vertices;  when null, function will create an indexed array;  when not null, triangles will be appended to the end of array  (will raise an exception if reserved array size is not large enough) @param thetrsf [in] optional transformation to apply.

        Parameters
        ----------
        theArray: Graphic3d_ArrayOfTriangles
        theTriangulation: Poly_Triangulation
        theTrsf: gp_Trsf

        Return
        -------
        None

        Description
        -----------
        Generate primitives for 3d quadric surface presentation. @param thearray [out] generated array of triangles @param thetriangulation [out] generated triangulation @param thetrsf [in] optional transformation to apply.

        """
        return _Prs3d.Prs3d_ToolQuadric_FillArray(self, *args)

    def TrianglesNb(self, *args):
        r"""

        Parameters
        ----------
        theSlicesNb: int
        theStacksNb: int

        Return
        -------
        int

        Description
        -----------
        Return number of triangles for presentation with the given params.
        Return
        -------
        int

        Description
        -----------
        Return number of triangles in generated presentation.

        """
        return _Prs3d.Prs3d_ToolQuadric_TrianglesNb(self, *args)

    def VerticesNb(self, *args):
        r"""

        Parameters
        ----------
        theSlicesNb: int
        theStacksNb: int
        theIsIndexed: bool (optional, default to Standard_True)

        Return
        -------
        int

        Description
        -----------
        Return number of vertices for presentation with the given params.

        Parameters
        ----------
        theIsIndexed: bool (optional, default to true)

        Return
        -------
        int

        Description
        -----------
        Return number of vertices in generated presentation.

        """
        return _Prs3d.Prs3d_ToolQuadric_VerticesNb(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolQuadric

# Register Prs3d_ToolQuadric in _Prs3d:
_Prs3d.Prs3d_ToolQuadric_swigregister(Prs3d_ToolQuadric)
class Prs3d_ArrowAspect(Prs3d_BasicAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty framework for displaying arrows in representations of lengths. the lengths displayed are either on their own or in chamfers, fillets, diameters and radii.

        Parameters
        ----------
        anAngle: float
        aLength: float

        Return
        -------
        None

        Description
        -----------
        Constructs a framework to display an arrow with a shaft of the length alength and having a head with sides at the angle anangle from each other.

        Parameters
        ----------
        theAspect: Graphic3d_AspectLine3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _Prs3d.Prs3d_ArrowAspect_swiginit(self, _Prs3d.new_Prs3d_ArrowAspect(*args))

    def Angle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the current value of the angle used when drawing an arrow.

        """
        return _Prs3d.Prs3d_ArrowAspect_Angle(self, *args)

    def Aspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_AspectLine3d>

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_ArrowAspect_Aspect(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_ArrowAspect_DumpJsonToString(self, depth)

    def IsZoomable(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true when the arrow zoomable is on; true by default.

        """
        return _Prs3d.Prs3d_ArrowAspect_IsZoomable(self, *args)

    def Length(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the current value of the length used when drawing an arrow.

        """
        return _Prs3d.Prs3d_ArrowAspect_Length(self, *args)

    def SetAngle(self, *args):
        r"""

        Parameters
        ----------
        anAngle: float

        Return
        -------
        None

        Description
        -----------
        Defines the angle of the arrows.

        """
        return _Prs3d.Prs3d_ArrowAspect_SetAngle(self, *args)

    def SetAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Graphic3d_AspectLine3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_ArrowAspect_SetAspect(self, *args)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_ArrowAspect_SetColor(self, *args)

    def SetLength(self, *args):
        r"""

        Parameters
        ----------
        theLength: float

        Return
        -------
        None

        Description
        -----------
        Defines the length of the arrows.

        """
        return _Prs3d.Prs3d_ArrowAspect_SetLength(self, *args)

    def SetZoomable(self, *args):
        r"""

        Parameters
        ----------
        theIsZoomable: bool

        Return
        -------
        None

        Description
        -----------
        Turns usage of arrow zoomable on/off.

        """
        return _Prs3d.Prs3d_ArrowAspect_SetZoomable(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_ArrowAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_ArrowAspect

# Register Prs3d_ArrowAspect in _Prs3d:
_Prs3d.Prs3d_ArrowAspect_swigregister(Prs3d_ArrowAspect)
class Prs3d_BndBox(Prs3d_Root):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Add(*args):
        r"""

        Parameters
        ----------
        thePresentation: Prs3d_Presentation
        theBndBox: Bnd_Box
        theDrawer: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Computes presentation of a bounding box. @param thepresentation [in] the presentation. @param thebndbox [in] the bounding box. @param thedrawer [in] the drawer.

        Parameters
        ----------
        thePresentation: Prs3d_Presentation
        theBndBox: Bnd_OBB
        theDrawer: Prs3d_Drawer

        Return
        -------
        None

        Description
        -----------
        Computes presentation of a bounding box. @param thepresentation [in] the presentation. @param thebndbox [in] the bounding box. @param thedrawer [in] the drawer.

        """
        return _Prs3d.Prs3d_BndBox_Add(*args)

    @staticmethod
    def FillSegments(*args):
        r"""

        Parameters
        ----------
        theBox: Bnd_OBB

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfSegments>

        Description
        -----------
        Create primitive array with line segments for displaying a box. @param thebox [in] the box to add.

        Parameters
        ----------
        theBox: Bnd_Box

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfSegments>

        Description
        -----------
        Create primitive array with line segments for displaying a box. @param thebox [in] the box to add.

        Parameters
        ----------
        theSegments: Graphic3d_ArrayOfSegments
        theBox: Bnd_OBB

        Return
        -------
        None

        Description
        -----------
        Create primitive array with line segments for displaying a box. @param thesegments [in] [out] primitive array to be filled;  should be at least 8 nodes and 24 edges in size @param thebox [in] the box to add.

        Parameters
        ----------
        theSegments: Graphic3d_ArrayOfSegments
        theBox: Bnd_Box

        Return
        -------
        None

        Description
        -----------
        Create primitive array with line segments for displaying a box. @param thesegments [in] [out] primitive array to be filled;  should be at least 8 nodes and 24 edges in size @param thebox [in] the box to add.

        """
        return _Prs3d.Prs3d_BndBox_FillSegments(*args)

    @staticmethod
    def fillSegments(*args):
        r"""

        Parameters
        ----------
        theSegments: Graphic3d_ArrayOfSegments
        theBox: gp_Pnt *

        Return
        -------
        None

        Description
        -----------
        Create primitive array with line segments for displaying a box. @param thesegments [in] [out] primitive array to be filled;  should be at least 8 nodes and 24 edges in size @param thebox [in] the box to add.

        """
        return _Prs3d.Prs3d_BndBox_fillSegments(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _Prs3d.Prs3d_BndBox_swiginit(self, _Prs3d.new_Prs3d_BndBox())
    __swig_destroy__ = _Prs3d.delete_Prs3d_BndBox

# Register Prs3d_BndBox in _Prs3d:
_Prs3d.Prs3d_BndBox_swigregister(Prs3d_BndBox)
class Prs3d_DatumAspect(Prs3d_BasicAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        An empty constructor.

        """
        _Prs3d.Prs3d_DatumAspect_swiginit(self, _Prs3d.new_Prs3d_DatumAspect(*args))

    def ArrowAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_ArrowAspect>

        Description
        -----------
        Returns the arrow aspect of presentation.

        """
        return _Prs3d.Prs3d_DatumAspect_ArrowAspect(self, *args)

    @staticmethod
    def ArrowPartForAxis(*args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        Prs3d_DatumParts

        Description
        -----------
        Returns type of arrow for a type of axis.

        """
        return _Prs3d.Prs3d_DatumAspect_ArrowPartForAxis(*args)

    def Attribute(self, *args):
        r"""

        Parameters
        ----------
        theType: Prs3d_DatumAttribute

        Return
        -------
        float

        Description
        -----------
        Returns the attribute of the datum type.

        """
        return _Prs3d.Prs3d_DatumAspect_Attribute(self, *args)

    def AxisLength(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        float

        Description
        -----------
        Returns the length of the displayed first axis.

        """
        return _Prs3d.Prs3d_DatumAspect_AxisLength(self, *args)

    def CopyAspectsFrom(self, *args):
        r"""

        Parameters
        ----------
        theOther: Prs3d_DatumAspect

        Return
        -------
        None

        Description
        -----------
        Performs deep copy of attributes from another aspect instance.

        """
        return _Prs3d.Prs3d_DatumAspect_CopyAspectsFrom(self, *args)

    def DatumAxes(self, *args):
        r"""
        Return
        -------
        Prs3d_DatumAxes

        Description
        -----------
        Returns axes used in the datum aspect.

        """
        return _Prs3d.Prs3d_DatumAspect_DatumAxes(self, *args)

    def DrawDatumPart(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        bool

        Description
        -----------
        Returns true if the given part is used in axes of aspect.

        """
        return _Prs3d.Prs3d_DatumAspect_DrawDatumPart(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_DatumAspect_DumpJsonToString(self, depth)

    def LineAspect(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns line aspect for specified part.

        """
        return _Prs3d.Prs3d_DatumAspect_LineAspect(self, *args)

    def PointAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_PointAspect>

        Description
        -----------
        Returns the point aspect of origin wireframe presentation.

        """
        return _Prs3d.Prs3d_DatumAspect_PointAspect(self, *args)

    def SetArrowAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_ArrowAspect

        Return
        -------
        None

        Description
        -----------
        Sets the arrow aspect of presentation.

        """
        return _Prs3d.Prs3d_DatumAspect_SetArrowAspect(self, *args)

    def SetAttribute(self, *args):
        r"""

        Parameters
        ----------
        theType: Prs3d_DatumAttribute
        theValue: float

        Return
        -------
        None

        Description
        -----------
        Sets the attribute of the datum type.

        """
        return _Prs3d.Prs3d_DatumAspect_SetAttribute(self, *args)

    def SetAxisLength(self, *args):
        r"""

        Parameters
        ----------
        theL1: float
        theL2: float
        theL3: float

        Return
        -------
        None

        Description
        -----------
        Sets the lengths of the three axes.

        """
        return _Prs3d.Prs3d_DatumAspect_SetAxisLength(self, *args)

    def SetDrawArrows(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool

        Return
        -------
        None

        Description
        -----------
        Sets option to draw or not arrows for axes.

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawArrows(self, *args)

    def SetDrawDatumAxes(self, *args):
        r"""

        Parameters
        ----------
        theType: Prs3d_DatumAxes

        Return
        -------
        None

        Description
        -----------
        Sets the axes used in the datum aspect.

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawDatumAxes(self, *args)

    def SetDrawLabels(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool

        Return
        -------
        None

        Description
        -----------
        Sets option to draw or not to draw text labels for axes.

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawLabels(self, *args)

    def SetPointAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_PointAspect

        Return
        -------
        None

        Description
        -----------
        Returns the point aspect of origin wireframe presentation.

        """
        return _Prs3d.Prs3d_DatumAspect_SetPointAspect(self, *args)

    def SetTextAspect(self, *args):
        r"""

        Parameters
        ----------
        theTextAspect: Prs3d_TextAspect

        Return
        -------
        None

        Description
        -----------
        Sets text attributes for rendering labels.

        """
        return _Prs3d.Prs3d_DatumAspect_SetTextAspect(self, *args)

    def SetToDrawLabels(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_DatumAspect_SetToDrawLabels(self, *args)

    def ShadingAspect(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        opencascade::handle<Prs3d_ShadingAspect>

        Description
        -----------
        Returns shading aspect for specified part.

        """
        return _Prs3d.Prs3d_DatumAspect_ShadingAspect(self, *args)

    def TextAspect(self, *args):
        r"""

        Parameters
        ----------
        thePart: Prs3d_DatumParts

        Return
        -------
        opencascade::handle<Prs3d_TextAspect>

        Description
        -----------
        Returns the text attributes for rendering label of specified part (prs3d_datumparts_xaxis/prs3d_datumparts_yaxis/prs3d_datumparts_zaxis).
        Return
        -------
        opencascade::handle<Prs3d_TextAspect>

        Description
        -----------
        Returns the text attributes for rendering labels.

        """
        return _Prs3d.Prs3d_DatumAspect_TextAspect(self, *args)

    def ToDrawArrows(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if axes arrows are drawn; true by default.

        """
        return _Prs3d.Prs3d_DatumAspect_ToDrawArrows(self, *args)

    def ToDrawLabels(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Return true if axes labels are drawn; true by default.

        """
        return _Prs3d.Prs3d_DatumAspect_ToDrawLabels(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_DatumAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_DatumAspect

# Register Prs3d_DatumAspect in _Prs3d:
_Prs3d.Prs3d_DatumAspect_swigregister(Prs3d_DatumAspect)
class Prs3d_DimensionAspect(Prs3d_BasicAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty framework to define the display of dimensions.

        """
        _Prs3d.Prs3d_DimensionAspect_swiginit(self, _Prs3d.new_Prs3d_DimensionAspect(*args))

    def ArrowAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_ArrowAspect>

        Description
        -----------
        Returns the settings for displaying arrows.

        """
        return _Prs3d.Prs3d_DimensionAspect_ArrowAspect(self, *args)

    def ArrowOrientation(self, *args):
        r"""
        Return
        -------
        Prs3d_DimensionArrowOrientation

        Description
        -----------
        Gets orientation of arrows (external or internal).

        """
        return _Prs3d.Prs3d_DimensionAspect_ArrowOrientation(self, *args)

    def ArrowTailSize(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns arrow tail size.

        """
        return _Prs3d.Prs3d_DimensionAspect_ArrowTailSize(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_DimensionAspect_DumpJsonToString(self, depth)

    def ExtensionSize(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns extension size.

        """
        return _Prs3d.Prs3d_DimensionAspect_ExtensionSize(self, *args)

    def IsArrows3d(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Gets type of arrows.

        """
        return _Prs3d.Prs3d_DimensionAspect_IsArrows3d(self, *args)

    def IsText3d(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Check if text for dimension label is 3d.

        """
        return _Prs3d.Prs3d_DimensionAspect_IsText3d(self, *args)

    def IsTextShaded(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Check if 3d text for dimension label is shaded.

        """
        return _Prs3d.Prs3d_DimensionAspect_IsTextShaded(self, *args)

    def IsUnitsDisplayed(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Shows if units are to be displayed along with dimension value.

        """
        return _Prs3d.Prs3d_DimensionAspect_IsUnitsDisplayed(self, *args)

    def LineAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns the settings for the display of lines used in presentation of dimensions.

        """
        return _Prs3d.Prs3d_DimensionAspect_LineAspect(self, *args)

    def MakeArrows3d(self, *args):
        r"""

        Parameters
        ----------
        theIsArrows3d: bool

        Return
        -------
        None

        Description
        -----------
        Sets type of arrows.

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeArrows3d(self, *args)

    def MakeText3d(self, *args):
        r"""

        Parameters
        ----------
        isText3d: bool

        Return
        -------
        None

        Description
        -----------
        Sets type of text.

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeText3d(self, *args)

    def MakeTextShaded(self, *args):
        r"""

        Parameters
        ----------
        theIsTextShaded: bool

        Return
        -------
        None

        Description
        -----------
        Turns on/off text shading for 3d text.

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeTextShaded(self, *args)

    def MakeUnitsDisplayed(self, *args):
        r"""

        Parameters
        ----------
        theIsDisplayed: bool

        Return
        -------
        None

        Description
        -----------
        Specifies whether the units string should be displayed along with value label or not.

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeUnitsDisplayed(self, *args)

    def SetArrowAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_ArrowAspect

        Return
        -------
        None

        Description
        -----------
        Sets the display attributes of arrows used in presentation of dimensions.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowAspect(self, *args)

    def SetArrowOrientation(self, *args):
        r"""

        Parameters
        ----------
        theArrowOrient: Prs3d_DimensionArrowOrientation

        Return
        -------
        None

        Description
        -----------
        Sets orientation of arrows (external or internal). by default orientation is chosen automatically according to situation and text label size.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowOrientation(self, *args)

    def SetArrowTailSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: float

        Return
        -------
        None

        Description
        -----------
        Set size for arrow tail (extension without text).

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowTailSize(self, *args)

    def SetCommonColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets the same color for all parts of dimension: lines, arrows and text.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetCommonColor(self, *args)

    def SetExtensionSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: float

        Return
        -------
        None

        Description
        -----------
        Sets extension size.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetExtensionSize(self, *args)

    def SetLineAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_LineAspect

        Return
        -------
        None

        Description
        -----------
        Sets the display attributes of lines used in presentation of dimensions.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetLineAspect(self, *args)

    def SetTextAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Prs3d_TextAspect

        Return
        -------
        None

        Description
        -----------
        Sets the display attributes of text used in presentation of dimensions.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextAspect(self, *args)

    def SetTextHorizontalPosition(self, *args):
        r"""

        Parameters
        ----------
        thePosition: Prs3d_DimensionTextHorizontalPosition

        Return
        -------
        None

        Description
        -----------
        Sets horizontal text alignment for text label.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextHorizontalPosition(self, *args)

    def SetTextVerticalPosition(self, *args):
        r"""

        Parameters
        ----------
        thePosition: Prs3d_DimensionTextVerticalPosition

        Return
        -------
        None

        Description
        -----------
        Sets vertical text alignment for text label.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextVerticalPosition(self, *args)

    def SetValueStringFormat(self, *args):
        r"""

        Parameters
        ----------
        theFormat: str

        Return
        -------
        None

        Description
        -----------
        Sets 'sprintf'-syntax format for formatting dimension value labels.

        """
        return _Prs3d.Prs3d_DimensionAspect_SetValueStringFormat(self, *args)

    def TextAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_TextAspect>

        Description
        -----------
        Returns the settings for the display of text used in presentation of dimensions.

        """
        return _Prs3d.Prs3d_DimensionAspect_TextAspect(self, *args)

    def TextHorizontalPosition(self, *args):
        r"""
        Return
        -------
        Prs3d_DimensionTextHorizontalPosition

        Description
        -----------
        Gets horizontal text alignment for text label.

        """
        return _Prs3d.Prs3d_DimensionAspect_TextHorizontalPosition(self, *args)

    def TextVerticalPosition(self, *args):
        r"""
        Return
        -------
        Prs3d_DimensionTextVerticalPosition

        Description
        -----------
        Gets vertical text alignment for text label.

        """
        return _Prs3d.Prs3d_DimensionAspect_TextVerticalPosition(self, *args)

    def ValueStringFormat(self, *args):
        r"""
        Return
        -------
        TCollection_AsciiString

        Description
        -----------
        Returns format.

        """
        return _Prs3d.Prs3d_DimensionAspect_ValueStringFormat(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_DimensionAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_DimensionAspect

# Register Prs3d_DimensionAspect in _Prs3d:
_Prs3d.Prs3d_DimensionAspect_swigregister(Prs3d_DimensionAspect)
class Prs3d_LineAspect(Prs3d_BasicAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color
        theType: Aspect_TypeOfLine
        theWidth: float

        Return
        -------
        None

        Description
        -----------
        Constructs a framework for line aspect defined by - the color acolor - the type of line atype and - the line thickness awidth. type of line refers to whether the line is solid or dotted, for example.

        Parameters
        ----------
        theAspect: Graphic3d_AspectLine3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _Prs3d.Prs3d_LineAspect_swiginit(self, _Prs3d.new_Prs3d_LineAspect(*args))

    def Aspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_AspectLine3d>

        Description
        -----------
        Returns the line aspect. this is defined as the set of color, type and thickness attributes.

        """
        return _Prs3d.Prs3d_LineAspect_Aspect(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_LineAspect_DumpJsonToString(self, depth)

    def SetAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Graphic3d_AspectLine3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_LineAspect_SetAspect(self, *args)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets the line color defined at the time of construction. default value: quantity_noc_yellow.

        """
        return _Prs3d.Prs3d_LineAspect_SetColor(self, *args)

    def SetTypeOfLine(self, *args):
        r"""

        Parameters
        ----------
        theType: Aspect_TypeOfLine

        Return
        -------
        None

        Description
        -----------
        Sets the type of line defined at the time of construction. this could, for example, be solid, dotted or made up of dashes. default value: aspect_tol_solid.

        """
        return _Prs3d.Prs3d_LineAspect_SetTypeOfLine(self, *args)

    def SetWidth(self, *args):
        r"""

        Parameters
        ----------
        theWidth: float

        Return
        -------
        None

        Description
        -----------
        Sets the line width defined at the time of construction. default value: 1.

        """
        return _Prs3d.Prs3d_LineAspect_SetWidth(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_LineAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_LineAspect

# Register Prs3d_LineAspect in _Prs3d:
_Prs3d.Prs3d_LineAspect_swigregister(Prs3d_LineAspect)
class Prs3d_PlaneAspect(Prs3d_BasicAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty framework for the display of planes.

        """
        _Prs3d.Prs3d_PlaneAspect_swiginit(self, _Prs3d.new_Prs3d_PlaneAspect(*args))

    def ArrowAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns the settings for displaying an arrow.

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowAspect(self, *args)

    def ArrowsAngle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the angle of the arrowhead used in the display of arrows involved in the presentation of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsAngle(self, *args)

    def ArrowsLength(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the length of the arrow shaft used in the display of arrows.

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsLength(self, *args)

    def ArrowsSize(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the size of arrows used in the display of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsSize(self, *args)

    def DisplayCenterArrow(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the display of center arrows is allowed.

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayCenterArrow(self, *args)

    def DisplayEdges(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayEdges(self, *args)

    def DisplayEdgesArrows(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the display of edge arrows is allowed.

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayEdgesArrows(self, *args)

    def DisplayIso(self, *args):
        r"""
        Return
        -------
        bool

        Description
        -----------
        Returns true if the display of isoparameters is allowed.

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayIso(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_PlaneAspect_DumpJsonToString(self, depth)

    def EdgesAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns the attributes of displayed edges involved in the presentation of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_EdgesAspect(self, *args)

    def IsoAspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Prs3d_LineAspect>

        Description
        -----------
        Returns the attributes of displayed isoparameters involved in the presentation of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_IsoAspect(self, *args)

    def IsoDistance(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the distance between isoparameters used in the display of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_IsoDistance(self, *args)

    def PlaneXLength(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the length of the x axis used in the display of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_PlaneXLength(self, *args)

    def PlaneYLength(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the length of the y axis used in the display of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_PlaneYLength(self, *args)

    def SetArrowsAngle(self, *args):
        r"""

        Parameters
        ----------
        theAngle: float

        Return
        -------
        None

        Description
        -----------
        Sets the angle of the arrowhead used in the display of arrows involved in the presentation of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsAngle(self, *args)

    def SetArrowsLength(self, *args):
        r"""

        Parameters
        ----------
        theLength: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsLength(self, *args)

    def SetArrowsSize(self, *args):
        r"""

        Parameters
        ----------
        theSize: float

        Return
        -------
        None

        Description
        -----------
        Sets the angle of the arrowhead used in the display of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsSize(self, *args)

    def SetDisplayCenterArrow(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool

        Return
        -------
        None

        Description
        -----------
        Sets the display attributes defined in displaycenterarrow to active.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayCenterArrow(self, *args)

    def SetDisplayEdges(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayEdges(self, *args)

    def SetDisplayEdgesArrows(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool

        Return
        -------
        None

        Description
        -----------
        Sets the display attributes defined in displayedgesarrows to active.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayEdgesArrows(self, *args)

    def SetDisplayIso(self, *args):
        r"""

        Parameters
        ----------
        theToDraw: bool

        Return
        -------
        None

        Description
        -----------
        Sets the display attributes defined in displayiso to active.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayIso(self, *args)

    def SetIsoDistance(self, *args):
        r"""

        Parameters
        ----------
        theL: float

        Return
        -------
        None

        Description
        -----------
        Sets the distance l between isoparameters used in the display of planes.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetIsoDistance(self, *args)

    def SetPlaneLength(self, *args):
        r"""

        Parameters
        ----------
        theLX: float
        theLY: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_PlaneAspect_SetPlaneLength(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_PlaneAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_PlaneAspect

# Register Prs3d_PlaneAspect in _Prs3d:
_Prs3d.Prs3d_PlaneAspect_swigregister(Prs3d_PlaneAspect)
class Prs3d_PointAspect(Prs3d_BasicAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theType: Aspect_TypeOfMarker
        theColor: Quantity_Color
        theScale: float

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        Parameters
        ----------
        theColor: Quantity_Color
        theWidth: int
        theHeight: int
        theTexture: TColStd_HArray1OfByte

        Return
        -------
        None

        Description
        -----------
        Defines the user defined marker point.

        Parameters
        ----------
        theAspect: Graphic3d_AspectMarker3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _Prs3d.Prs3d_PointAspect_swiginit(self, _Prs3d.new_Prs3d_PointAspect(*args))

    def Aspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_AspectMarker3d>

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_PointAspect_Aspect(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_PointAspect_DumpJsonToString(self, depth)

    def GetTexture(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_MarkerImage>

        Description
        -----------
        Returns marker's texture.

        """
        return _Prs3d.Prs3d_PointAspect_GetTexture(self, *args)

    def GetTextureSize(self, *args):
        r"""

        Parameters
        ----------

        Return
        -------
        theWidth: int
        theHeight: int

        Description
        -----------
        Returns marker's texture size.

        """
        return _Prs3d.Prs3d_PointAspect_GetTextureSize(self, *args)

    def SetAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Graphic3d_AspectMarker3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_PointAspect_SetAspect(self, *args)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Defines the color to be used when drawing a point. default value: quantity_noc_yellow.

        """
        return _Prs3d.Prs3d_PointAspect_SetColor(self, *args)

    def SetScale(self, *args):
        r"""

        Parameters
        ----------
        theScale: float

        Return
        -------
        None

        Description
        -----------
        Defines the size of the marker used when drawing a point. default value: 1.

        """
        return _Prs3d.Prs3d_PointAspect_SetScale(self, *args)

    def SetTypeOfMarker(self, *args):
        r"""

        Parameters
        ----------
        theType: Aspect_TypeOfMarker

        Return
        -------
        None

        Description
        -----------
        Defines the type of representation to be used when drawing a point. default value: aspect_tom_plus.

        """
        return _Prs3d.Prs3d_PointAspect_SetTypeOfMarker(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_PointAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_PointAspect

# Register Prs3d_PointAspect in _Prs3d:
_Prs3d.Prs3d_PointAspect_swigregister(Prs3d_PointAspect)
class Prs3d_ShadingAspect(Prs3d_BasicAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty framework to display shading.

        Parameters
        ----------
        theAspect: Graphic3d_AspectFillArea3d

        Return
        -------
        None

        Description
        -----------
        Constructor with initialization.

        """
        _Prs3d.Prs3d_ShadingAspect_swiginit(self, _Prs3d.new_Prs3d_ShadingAspect(*args))

    def Aspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_AspectFillArea3d>

        Description
        -----------
        Returns the polygons aspect properties.

        """
        return _Prs3d.Prs3d_ShadingAspect_Aspect(self, *args)

    def Color(self, *args):
        r"""

        Parameters
        ----------
        aModel: Aspect_TypeOfFacingModel (optional, default to Aspect_TOFM_FRONT_SIDE)

        Return
        -------
        Quantity_Color

        Description
        -----------
        Returns the polygons color.

        """
        return _Prs3d.Prs3d_ShadingAspect_Color(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_ShadingAspect_DumpJsonToString(self, depth)

    def Material(self, *args):
        r"""

        Parameters
        ----------
        aModel: Aspect_TypeOfFacingModel (optional, default to Aspect_TOFM_FRONT_SIDE)

        Return
        -------
        Graphic3d_MaterialAspect

        Description
        -----------
        Returns the polygons material aspect.

        """
        return _Prs3d.Prs3d_ShadingAspect_Material(self, *args)

    def SetAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Graphic3d_AspectFillArea3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_ShadingAspect_SetAspect(self, *args)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        aColor: Quantity_Color
        aModel: Aspect_TypeOfFacingModel (optional, default to Aspect_TOFM_BOTH_SIDE)

        Return
        -------
        None

        Description
        -----------
        Change the polygons interior color and material ambient color.

        """
        return _Prs3d.Prs3d_ShadingAspect_SetColor(self, *args)

    def SetMaterial(self, *args):
        r"""

        Parameters
        ----------
        aMaterial: Graphic3d_MaterialAspect
        aModel: Aspect_TypeOfFacingModel (optional, default to Aspect_TOFM_BOTH_SIDE)

        Return
        -------
        None

        Description
        -----------
        Change the polygons material aspect.

        """
        return _Prs3d.Prs3d_ShadingAspect_SetMaterial(self, *args)

    def SetTransparency(self, *args):
        r"""

        Parameters
        ----------
        aValue: float
        aModel: Aspect_TypeOfFacingModel (optional, default to Aspect_TOFM_BOTH_SIDE)

        Return
        -------
        None

        Description
        -----------
        Change the polygons transparency value. warning: avalue must be in the range 0,1. 0 is the default (no transparent).

        """
        return _Prs3d.Prs3d_ShadingAspect_SetTransparency(self, *args)

    def Transparency(self, *args):
        r"""

        Parameters
        ----------
        aModel: Aspect_TypeOfFacingModel (optional, default to Aspect_TOFM_FRONT_SIDE)

        Return
        -------
        float

        Description
        -----------
        Returns the polygons transparency value.

        """
        return _Prs3d.Prs3d_ShadingAspect_Transparency(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_ShadingAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_ShadingAspect

# Register Prs3d_ShadingAspect in _Prs3d:
_Prs3d.Prs3d_ShadingAspect_swigregister(Prs3d_ShadingAspect)
class Prs3d_TextAspect(Prs3d_BasicAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Return
        -------
        None

        Description
        -----------
        Constructs an empty framework for defining display attributes of text.

        Parameters
        ----------
        theAspect: Graphic3d_AspectText3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        _Prs3d.Prs3d_TextAspect_swiginit(self, _Prs3d.new_Prs3d_TextAspect(*args))

    def Angle(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the angle.

        """
        return _Prs3d.Prs3d_TextAspect_Angle(self, *args)

    def Aspect(self, *args):
        r"""
        Return
        -------
        opencascade::handle<Graphic3d_AspectText3d>

        Description
        -----------
        Returns the purely textual attributes used in the display of text. these include: - color - font - height/width ratio, that is, the expansion factor, and - space between characters.

        """
        return _Prs3d.Prs3d_TextAspect_Aspect(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""Json string serializer.Json string serializer."""
        return _Prs3d.Prs3d_TextAspect_DumpJsonToString(self, depth)

    def Height(self, *args):
        r"""
        Return
        -------
        float

        Description
        -----------
        Returns the height of the text box.

        """
        return _Prs3d.Prs3d_TextAspect_Height(self, *args)

    def HorizontalJustification(self, *args):
        r"""
        Return
        -------
        Graphic3d_HorizontalTextAlignment

        Description
        -----------
        Returns the horizontal alignment of the text. the range of values includes: - left - center - right, and - normal (justified).

        """
        return _Prs3d.Prs3d_TextAspect_HorizontalJustification(self, *args)

    def Orientation(self, *args):
        r"""
        Return
        -------
        Graphic3d_TextPath

        Description
        -----------
        Returns the orientation of the text. text can be displayed in the following directions: - up - down - left, or - right.

        """
        return _Prs3d.Prs3d_TextAspect_Orientation(self, *args)

    def SetAngle(self, *args):
        r"""

        Parameters
        ----------
        theAngle: float

        Return
        -------
        None

        Description
        -----------
        Sets the angle.

        """
        return _Prs3d.Prs3d_TextAspect_SetAngle(self, *args)

    def SetAspect(self, *args):
        r"""

        Parameters
        ----------
        theAspect: Graphic3d_AspectText3d

        Return
        -------
        None

        Description
        -----------
        No available documentation.

        """
        return _Prs3d.Prs3d_TextAspect_SetAspect(self, *args)

    def SetColor(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color

        Return
        -------
        None

        Description
        -----------
        Sets the color of the type used in text display.

        """
        return _Prs3d.Prs3d_TextAspect_SetColor(self, *args)

    def SetFont(self, *args):
        r"""

        Parameters
        ----------
        theFont: str

        Return
        -------
        None

        Description
        -----------
        Sets the font used in text display.

        """
        return _Prs3d.Prs3d_TextAspect_SetFont(self, *args)

    def SetHeight(self, *args):
        r"""

        Parameters
        ----------
        theHeight: float

        Return
        -------
        None

        Description
        -----------
        Sets the height of the text.

        """
        return _Prs3d.Prs3d_TextAspect_SetHeight(self, *args)

    def SetHorizontalJustification(self, *args):
        r"""

        Parameters
        ----------
        theJustification: Graphic3d_HorizontalTextAlignment

        Return
        -------
        None

        Description
        -----------
        Sets horizontal alignment of text.

        """
        return _Prs3d.Prs3d_TextAspect_SetHorizontalJustification(self, *args)

    def SetOrientation(self, *args):
        r"""

        Parameters
        ----------
        theOrientation: Graphic3d_TextPath

        Return
        -------
        None

        Description
        -----------
        Sets the orientation of text.

        """
        return _Prs3d.Prs3d_TextAspect_SetOrientation(self, *args)

    def SetVerticalJustification(self, *args):
        r"""

        Parameters
        ----------
        theJustification: Graphic3d_VerticalTextAlignment

        Return
        -------
        None

        Description
        -----------
        Sets the vertical alignment of text.

        """
        return _Prs3d.Prs3d_TextAspect_SetVerticalJustification(self, *args)

    def VerticalJustification(self, *args):
        r"""
        Return
        -------
        Graphic3d_VerticalTextAlignment

        Description
        -----------
        Returns the vertical alignment of the text. the range of values includes: - normal - top - cap - half - base - bottom.

        """
        return _Prs3d.Prs3d_TextAspect_VerticalJustification(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_TextAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_TextAspect

# Register Prs3d_TextAspect in _Prs3d:
_Prs3d.Prs3d_TextAspect_swigregister(Prs3d_TextAspect)
class Prs3d_ToolCylinder(Prs3d_ToolQuadric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theBottomRad: float
        theTopRad: float
        theHeight: float
        theNbSlices: int
        theNbStacks: int

        Return
        -------
        None

        Description
        -----------
        Initializes the algorithm creating a cylinder. @param thebottomrad [in] cylinder bottom radius @param thetoprad [in] cylinder top radius @param theheight [in] cylinder height @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter.

        """
        _Prs3d.Prs3d_ToolCylinder_swiginit(self, _Prs3d.new_Prs3d_ToolCylinder(*args))

    @staticmethod
    def Create(*args):
        r"""

        Parameters
        ----------
        theBottomRad: float
        theTopRad: float
        theHeight: float
        theNbSlices: int
        theNbStacks: int
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface and return a filled array. @param thebottomrad [in] cylinder bottom radius @param thetoprad [in] cylinder top radius @param theheight [in] cylinder height @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter @param thetrsf [in] optional transformation to apply return generated triangulation.

        """
        return _Prs3d.Prs3d_ToolCylinder_Create(*args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolCylinder

# Register Prs3d_ToolCylinder in _Prs3d:
_Prs3d.Prs3d_ToolCylinder_swigregister(Prs3d_ToolCylinder)
class Prs3d_ToolDisk(Prs3d_ToolQuadric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theInnerRadius: float
        theOuterRadius: float
        theNbSlices: int
        theNbStacks: int

        Return
        -------
        None

        Description
        -----------
        Initializes the algorithm creating a disk. @param theinnerradius [in] inner disk radius @param theouterradius [in] outer disk radius @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter.

        """
        _Prs3d.Prs3d_ToolDisk_swiginit(self, _Prs3d.new_Prs3d_ToolDisk(*args))

    @staticmethod
    def Create(*args):
        r"""

        Parameters
        ----------
        theInnerRadius: float
        theOuterRadius: float
        theNbSlices: int
        theNbStacks: int
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface. @param theinnerradius [in] inner disc radius @param theouterradius [in] outer disc radius @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter @param thetrsf [in] optional transformation to apply return generated triangulation.

        """
        return _Prs3d.Prs3d_ToolDisk_Create(*args)

    def SetAngleRange(self, *args):
        r"""

        Parameters
        ----------
        theStartAngle: float
        theEndAngle: float

        Return
        -------
        None

        Description
        -----------
        Set angle range in radians [0, 2*pi] by default. @param thestartangle [in] start angle in counter clockwise order @param theendangle [in] end angle in counter clockwise order.

        """
        return _Prs3d.Prs3d_ToolDisk_SetAngleRange(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolDisk

# Register Prs3d_ToolDisk in _Prs3d:
_Prs3d.Prs3d_ToolDisk_swigregister(Prs3d_ToolDisk)
class Prs3d_ToolSector(Prs3d_ToolQuadric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theRadius: float
        theNbSlices: int
        theNbStacks: int

        Return
        -------
        None

        Description
        -----------
        Initializes the algorithm creating a sector (quadrant). @param theradius [in] sector radius @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter.

        """
        _Prs3d.Prs3d_ToolSector_swiginit(self, _Prs3d.new_Prs3d_ToolSector(*args))

    @staticmethod
    def Create(*args):
        r"""

        Parameters
        ----------
        theRadius: float
        theNbSlices: int
        theNbStacks: int
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface. @param theradius [in] sector radius @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter @param thetrsf [in] optional transformation to apply return generated triangulation.

        """
        return _Prs3d.Prs3d_ToolSector_Create(*args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolSector

# Register Prs3d_ToolSector in _Prs3d:
_Prs3d.Prs3d_ToolSector_swigregister(Prs3d_ToolSector)
class Prs3d_ToolSphere(Prs3d_ToolQuadric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theRadius: float
        theNbSlices: int
        theNbStacks: int

        Return
        -------
        None

        Description
        -----------
        Initializes the algorithm creating a sphere. @param theradius [in] sphere radius @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter.

        """
        _Prs3d.Prs3d_ToolSphere_swiginit(self, _Prs3d.new_Prs3d_ToolSphere(*args))

    @staticmethod
    def Create(*args):
        r"""

        Parameters
        ----------
        theRadius: float
        theNbSlices: int
        theNbStacks: int
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface. @param theradius [in] sphere radius @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter @param thetrsf [in] optional transformation to apply return generated triangulation.

        """
        return _Prs3d.Prs3d_ToolSphere_Create(*args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolSphere

# Register Prs3d_ToolSphere in _Prs3d:
_Prs3d.Prs3d_ToolSphere_swigregister(Prs3d_ToolSphere)
class Prs3d_ToolTorus(Prs3d_ToolQuadric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theMajorRad: float
        theMinorRad: float
        theNbSlices: int
        theNbStacks: int

        Return
        -------
        None

        Description
        -----------
        Initializes the algorithm creating a complete torus. @param themajorrad [in] distance from the center of the pipe to the center of the torus @param theminorrad [in] radius of the pipe @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter.

        Parameters
        ----------
        theMajorRad: float
        theMinorRad: float
        theAngle: float
        theNbSlices: int
        theNbStacks: int

        Return
        -------
        None

        Description
        -----------
        Initializes the algorithm creating a torus pipe segment. @param themajorrad [in] distance from the center of the pipe to the center of the torus @param theminorrad [in] radius of the pipe @param theangle [in] angle to create a torus pipe segment @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter.

        Parameters
        ----------
        theMajorRad: float
        theMinorRad: float
        theAngle1: float
        theAngle2: float
        theNbSlices: int
        theNbStacks: int

        Return
        -------
        None

        Description
        -----------
        Initializes the algorithm creating a torus ring segment. @param themajorrad [in] distance from the center of the pipe to the center of the torus @param theminorrad [in] radius of the pipe @param theangle1 [in] first angle to create a torus ring segment @param theangle2 [in] second angle to create a torus ring segment @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter.

        Parameters
        ----------
        theMajorRad: float
        theMinorRad: float
        theAngle1: float
        theAngle2: float
        theAngle: float
        theNbSlices: int
        theNbStacks: int

        Return
        -------
        None

        Description
        -----------
        Initializes the algorithm creating a torus ring segment. @param themajorrad [in] distance from the center of the pipe to the center of the torus @param theminorrad [in] radius of the pipe @param theangle1 [in] first angle to create a torus ring segment @param theangle2 [in] second angle to create a torus ring segment @param theangle [in] angle to create a torus pipe segment @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter.

        """
        _Prs3d.Prs3d_ToolTorus_swiginit(self, _Prs3d.new_Prs3d_ToolTorus(*args))

    @staticmethod
    def Create(*args):
        r"""

        Parameters
        ----------
        theMajorRad: float
        theMinorRad: float
        theNbSlices: int
        theNbStacks: int
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface (complete torus). @param themajorrad [in] distance from the center of the pipe to the center of the torus @param theminorrad [in] radius of the pipe @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter @param thetrsf [in] optional transformation to apply return generated triangulation.

        Parameters
        ----------
        theMajorRad: float
        theMinorRad: float
        theAngle: float
        theNbSlices: int
        theNbStacks: int
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface (torus segment). @param themajorrad [in] distance from the center of the pipe to the center of the torus @param theminorrad [in] radius of the pipe @param theangle [in] angle to create a torus pipe segment @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter @param thetrsf [in] optional transformation to apply return generated triangulation.

        Parameters
        ----------
        theMajorRad: float
        theMinorRad: float
        theAngle1: float
        theAngle2: float
        theNbSlices: int
        theNbStacks: int
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface (torus ring segment). @param themajorrad [in] distance from the center of the pipe to the center of the torus @param theminorrad [in] radius of the pipe @param theangle1 [in] first angle to create a torus ring segment @param theangle2 [in] second angle to create a torus ring segment @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter @param thetrsf [in] optional transformation to apply return generated triangulation.

        Parameters
        ----------
        theMajorRad: float
        theMinorRad: float
        theAngle1: float
        theAngle2: float
        theAngle: float
        theNbSlices: int
        theNbStacks: int
        theTrsf: gp_Trsf

        Return
        -------
        opencascade::handle<Graphic3d_ArrayOfTriangles>

        Description
        -----------
        Generate primitives for 3d quadric surface (segment of the torus ring segment). @param themajorrad [in] distance from the center of the pipe to the center of the torus @param theminorrad [in] radius of the pipe @param theangle1 [in] first angle to create a torus ring segment @param theangle2 [in] second angle to create a torus ring segment @param theangle [in] angle to create a torus pipe segment @param thenbslices [in] number of slices within u parameter @param thenbstacks [in] number of stacks within v parameter @param thetrsf [in] optional transformation to apply return generated triangulation.

        """
        return _Prs3d.Prs3d_ToolTorus_Create(*args)

    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolTorus

# Register Prs3d_ToolTorus in _Prs3d:
_Prs3d.Prs3d_ToolTorus_swigregister(Prs3d_ToolTorus)
class Prs3d_IsoAspect(Prs3d_LineAspect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Parameters
        ----------
        theColor: Quantity_Color
        theType: Aspect_TypeOfLine
        theWidth: float
        theNumber: int

        Return
        -------
        None

        Description
        -----------
        Constructs a framework to define display attributes of isoparameters. these include: - the color attribute acolor - the type of line atype - the width value awidth - anumber, the number of isoparameters to be displayed.

        """
        _Prs3d.Prs3d_IsoAspect_swiginit(self, _Prs3d.new_Prs3d_IsoAspect(*args))

    def Number(self, *args):
        r"""
        Return
        -------
        int

        Description
        -----------
        Returns the number of u or v isoparametric curves drawn for a single face.

        """
        return _Prs3d.Prs3d_IsoAspect_Number(self, *args)

    def SetNumber(self, *args):
        r"""

        Parameters
        ----------
        theNumber: int

        Return
        -------
        None

        Description
        -----------
        Defines the number of u or v isoparametric curves to be drawn for a single face. default value: 10.

        """
        return _Prs3d.Prs3d_IsoAspect_SetNumber(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Prs3d_IsoAspect_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Prs3d.delete_Prs3d_IsoAspect

# Register Prs3d_IsoAspect in _Prs3d:
_Prs3d.Prs3d_IsoAspect_swigregister(Prs3d_IsoAspect)

@classnotwrapped
class Prs3d_ShapeTool:
	pass



Prs3d_Presentation=OCC.Core.Graphic3d.Graphic3d_Structure


@deprecated
def prs3d_AddFreeEdges(*args):
	return prs3d.AddFreeEdges(*args)

@deprecated
def prs3d_AddPrimitivesGroup(*args):
	return prs3d.AddPrimitivesGroup(*args)

@deprecated
def prs3d_GetDeflection(*args):
	return prs3d.GetDeflection(*args)

@deprecated
def prs3d_GetDeflection(*args):
	return prs3d.GetDeflection(*args)

@deprecated
def prs3d_MatchSegment(*args):
	return prs3d.MatchSegment(*args)

@deprecated
def prs3d_PrimitivesFromPolylines(*args):
	return prs3d.PrimitivesFromPolylines(*args)

@deprecated
def Prs3d_Arrow_Draw(*args):
	return Prs3d_Arrow.Draw(*args)

@deprecated
def Prs3d_Arrow_DrawSegments(*args):
	return Prs3d_Arrow.DrawSegments(*args)

@deprecated
def Prs3d_Arrow_DrawShaded(*args):
	return Prs3d_Arrow.DrawShaded(*args)

@deprecated
def Prs3d_Point_Add(*args):
	return Prs3d_Point.Add(*args)

@deprecated
def Prs3d_Point_Match(*args):
	return Prs3d_Point.Match(*args)

@deprecated
def Prs3d_Root_CurrentGroup(*args):
	return Prs3d_Root.CurrentGroup(*args)

@deprecated
def Prs3d_Root_NewGroup(*args):
	return Prs3d_Root.NewGroup(*args)

@deprecated
def Prs3d_Text_Draw(*args):
	return Prs3d_Text.Draw(*args)

@deprecated
def Prs3d_Text_Draw(*args):
	return Prs3d_Text.Draw(*args)

@deprecated
def Prs3d_ToolQuadric_TrianglesNb(*args):
	return Prs3d_ToolQuadric.TrianglesNb(*args)

@deprecated
def Prs3d_ToolQuadric_VerticesNb(*args):
	return Prs3d_ToolQuadric.VerticesNb(*args)

@deprecated
def Prs3d_BndBox_Add(*args):
	return Prs3d_BndBox.Add(*args)

@deprecated
def Prs3d_BndBox_Add(*args):
	return Prs3d_BndBox.Add(*args)

@deprecated
def Prs3d_BndBox_FillSegments(*args):
	return Prs3d_BndBox.FillSegments(*args)

@deprecated
def Prs3d_BndBox_FillSegments(*args):
	return Prs3d_BndBox.FillSegments(*args)

@deprecated
def Prs3d_BndBox_FillSegments(*args):
	return Prs3d_BndBox.FillSegments(*args)

@deprecated
def Prs3d_BndBox_FillSegments(*args):
	return Prs3d_BndBox.FillSegments(*args)

@deprecated
def Prs3d_BndBox_fillSegments(*args):
	return Prs3d_BndBox.fillSegments(*args)

@deprecated
def Prs3d_DatumAspect_ArrowPartForAxis(*args):
	return Prs3d_DatumAspect.ArrowPartForAxis(*args)

@deprecated
def Prs3d_ToolCylinder_Create(*args):
	return Prs3d_ToolCylinder.Create(*args)

@deprecated
def Prs3d_ToolDisk_Create(*args):
	return Prs3d_ToolDisk.Create(*args)

@deprecated
def Prs3d_ToolSector_Create(*args):
	return Prs3d_ToolSector.Create(*args)

@deprecated
def Prs3d_ToolSphere_Create(*args):
	return Prs3d_ToolSphere.Create(*args)

@deprecated
def Prs3d_ToolTorus_Create(*args):
	return Prs3d_ToolTorus.Create(*args)

@deprecated
def Prs3d_ToolTorus_Create(*args):
	return Prs3d_ToolTorus.Create(*args)

@deprecated
def Prs3d_ToolTorus_Create(*args):
	return Prs3d_ToolTorus.Create(*args)

@deprecated
def Prs3d_ToolTorus_Create(*args):
	return Prs3d_ToolTorus.Create(*args)



