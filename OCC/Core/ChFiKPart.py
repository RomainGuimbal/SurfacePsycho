# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ChFiKPart module, see official documentation at
https://www.opencascade.com/doc/occt-7.4.0/refman/html/package_chfikpart.html
"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ChFiKPart')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ChFiKPart')
    _ChFiKPart = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ChFiKPart', [dirname(__file__)])
        except ImportError:
            import _ChFiKPart
            return _ChFiKPart
        try:
            _mod = imp.load_module('_ChFiKPart', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ChFiKPart = swig_import_helper()
    del swig_import_helper
else:
    import _ChFiKPart
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFiKPart.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _ChFiKPart.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ChFiKPart.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _ChFiKPart.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _ChFiKPart.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _ChFiKPart.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _ChFiKPart.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _ChFiKPart.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _ChFiKPart.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _ChFiKPart.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ChFiKPart.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _ChFiKPart.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _ChFiKPart.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ChFiKPart.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _ChFiKPart.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _ChFiKPart.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _ChFiKPart.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ChFiKPart.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error: 'Standard_Failure', method_name: 'std::string', class_name: 'std::string') -> "void":
    return _ChFiKPart.process_exception(error, method_name, class_name)
process_exception = _ChFiKPart.process_exception

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopOpeBRepDS
import OCC.Core.Geom
import OCC.Core.TopAbs
import OCC.Core.TopOpeBRepTool
import OCC.Core.BRepClass3d
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopLoc
import OCC.Core.IntCurveSurface
import OCC.Core.math
import OCC.Core.Adaptor3d
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.TopTools
import OCC.Core.IntCurvesFace
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.TopExp
import OCC.Core.Extrema
import OCC.Core.ChFiDS
import OCC.Core.Law

from enum import IntEnum
from OCC.Core.Exception import *



class ChFiKPart_RstMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChFiKPart_RstMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChFiKPart_RstMap, name)
    __repr__ = _swig_repr

    def begin(self) -> "NCollection_DataMap< int,opencascade::handle< Adaptor2d_HCurve2d >,NCollection_DefaultHasher< int > >::iterator":
        return _ChFiKPart.ChFiKPart_RstMap_begin(self)

    def end(self) -> "NCollection_DataMap< int,opencascade::handle< Adaptor2d_HCurve2d >,NCollection_DefaultHasher< int > >::iterator":
        return _ChFiKPart.ChFiKPart_RstMap_end(self)

    def cbegin(self) -> "NCollection_DataMap< int,opencascade::handle< Adaptor2d_HCurve2d >,NCollection_DefaultHasher< int > >::const_iterator":
        return _ChFiKPart.ChFiKPart_RstMap_cbegin(self)

    def cend(self) -> "NCollection_DataMap< int,opencascade::handle< Adaptor2d_HCurve2d >,NCollection_DefaultHasher< int > >::const_iterator":
        return _ChFiKPart.ChFiKPart_RstMap_cend(self)

    def __init__(self, *args):
        this = _ChFiKPart.new_ChFiKPart_RstMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, theOther: 'ChFiKPart_RstMap') -> "void":
        return _ChFiKPart.ChFiKPart_RstMap_Exchange(self, theOther)

    def Assign(self, theOther: 'ChFiKPart_RstMap') -> "NCollection_DataMap< Standard_Integer,opencascade::handle< Adaptor2d_HCurve2d >,TColStd_MapIntegerHasher > &":
        return _ChFiKPart.ChFiKPart_RstMap_Assign(self, theOther)

    def Set(self, theOther: 'ChFiKPart_RstMap') -> "NCollection_DataMap< Standard_Integer,opencascade::handle< Adaptor2d_HCurve2d >,TColStd_MapIntegerHasher > &":
        return _ChFiKPart.ChFiKPart_RstMap_Set(self, theOther)

    def ReSize(self, N: 'Standard_Integer const') -> "void":
        return _ChFiKPart.ChFiKPart_RstMap_ReSize(self, N)

    def Bind(self, theKey: 'int const &', theItem: 'opencascade::handle< Adaptor2d_HCurve2d > const &') -> "Standard_Boolean":
        return _ChFiKPart.ChFiKPart_RstMap_Bind(self, theKey, theItem)

    def Bound(self, theKey: 'int const &', theItem: 'opencascade::handle< Adaptor2d_HCurve2d > const &') -> "opencascade::handle< Adaptor2d_HCurve2d > *":
        return _ChFiKPart.ChFiKPart_RstMap_Bound(self, theKey, theItem)

    def IsBound(self, theKey: 'int const &') -> "Standard_Boolean":
        return _ChFiKPart.ChFiKPart_RstMap_IsBound(self, theKey)

    def UnBind(self, theKey: 'int const &') -> "Standard_Boolean":
        return _ChFiKPart.ChFiKPart_RstMap_UnBind(self, theKey)

    def Seek(self, theKey: 'int const &') -> "opencascade::handle< Adaptor2d_HCurve2d > const *":
        return _ChFiKPart.ChFiKPart_RstMap_Seek(self, theKey)

    def Find(self, *args) -> "Standard_Boolean":
        return _ChFiKPart.ChFiKPart_RstMap_Find(self, *args)

    def ChangeSeek(self, theKey: 'int const &') -> "opencascade::handle< Adaptor2d_HCurve2d > *":
        return _ChFiKPart.ChFiKPart_RstMap_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey: 'int const &') -> "opencascade::handle< Adaptor2d_HCurve2d > &":
        return _ChFiKPart.ChFiKPart_RstMap_ChangeFind(self, theKey)

    def __call__(self, *args) -> "opencascade::handle< Adaptor2d_HCurve2d > &":
        return _ChFiKPart.ChFiKPart_RstMap___call__(self, *args)

    def Clear(self, *args) -> "void":
        return _ChFiKPart.ChFiKPart_RstMap_Clear(self, *args)
    __swig_destroy__ = _ChFiKPart.delete_ChFiKPart_RstMap
    __del__ = lambda self: None

    def Size(self) -> "Standard_Integer":
        return _ChFiKPart.ChFiKPart_RstMap_Size(self)

    def Keys(self) -> "PyObject *":
        return _ChFiKPart.ChFiKPart_RstMap_Keys(self)
ChFiKPart_RstMap_swigregister = _ChFiKPart.ChFiKPart_RstMap_swigregister
ChFiKPart_RstMap_swigregister(ChFiKPart_RstMap)

class ChFiKPart_ComputeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChFiKPart_ComputeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChFiKPart_ComputeData, name)
    __repr__ = _swig_repr

    def Compute(*args) -> "Standard_Boolean":
        """
        Computes a simple fillet in several particular cases.

        Parameters
        ----------
        DStr: TopOpeBRepDS_DataStructure
        Data: ChFiDS_SurfData
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        Or1: TopAbs_Orientation
        Or2: TopAbs_Orientation
        Sp: ChFiDS_Spine
        Iedge: int

        Returns
        -------
        bool

        """
        return _ChFiKPart.ChFiKPart_ComputeData_Compute(*args)

    Compute = staticmethod(Compute)

    def ComputeCorner(*args) -> "Standard_Boolean":
        """
        Computes a toric or spheric corner fillet.

        Parameters
        ----------
        DStr: TopOpeBRepDS_DataStructure
        Data: ChFiDS_SurfData
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        OrFace1: TopAbs_Orientation
        OrFace2: TopAbs_Orientation
        Or1: TopAbs_Orientation
        Or2: TopAbs_Orientation
        minRad: float
        majRad: float
        P1S1: gp_Pnt2d
        P2S1: gp_Pnt2d
        P1S2: gp_Pnt2d
        P2S2: gp_Pnt2d

        Returns
        -------
        bool

        Computes spheric corner fillet with non iso pcurve on s2.

        Parameters
        ----------
        DStr: TopOpeBRepDS_DataStructure
        Data: ChFiDS_SurfData
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        OrFace1: TopAbs_Orientation
        OrFace2: TopAbs_Orientation
        Or1: TopAbs_Orientation
        Or2: TopAbs_Orientation
        Rad: float
        PS1: gp_Pnt2d
        P1S2: gp_Pnt2d
        P2S2: gp_Pnt2d

        Returns
        -------
        bool

        Computes a toric corner rotule.

        Parameters
        ----------
        DStr: TopOpeBRepDS_DataStructure
        Data: ChFiDS_SurfData
        S: Adaptor3d_HSurface
        S1: Adaptor3d_HSurface
        S2: Adaptor3d_HSurface
        OfS: TopAbs_Orientation
        OS: TopAbs_Orientation
        OS1: TopAbs_Orientation
        OS2: TopAbs_Orientation
        Radius: float

        Returns
        -------
        bool

        """
        return _ChFiKPart.ChFiKPart_ComputeData_ComputeCorner(*args)

    ComputeCorner = staticmethod(ComputeCorner)

    __repr__ = _dumps_object


    def __init__(self):
        this = _ChFiKPart.new_ChFiKPart_ComputeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChFiKPart.delete_ChFiKPart_ComputeData
    __del__ = lambda self: None
ChFiKPart_ComputeData_swigregister = _ChFiKPart.ChFiKPart_ComputeData_swigregister
ChFiKPart_ComputeData_swigregister(ChFiKPart_ComputeData)

def ChFiKPart_ComputeData_Compute(*args) -> "Standard_Boolean":
    """
    Computes a simple fillet in several particular cases.

    Parameters
    ----------
    DStr: TopOpeBRepDS_DataStructure
    Data: ChFiDS_SurfData
    S1: Adaptor3d_HSurface
    S2: Adaptor3d_HSurface
    Or1: TopAbs_Orientation
    Or2: TopAbs_Orientation
    Sp: ChFiDS_Spine
    Iedge: int

    Returns
    -------
    bool

    """
    return _ChFiKPart.ChFiKPart_ComputeData_Compute(*args)

def ChFiKPart_ComputeData_ComputeCorner(*args) -> "Standard_Boolean":
    """
    Computes a toric or spheric corner fillet.

    Parameters
    ----------
    DStr: TopOpeBRepDS_DataStructure
    Data: ChFiDS_SurfData
    S1: Adaptor3d_HSurface
    S2: Adaptor3d_HSurface
    OrFace1: TopAbs_Orientation
    OrFace2: TopAbs_Orientation
    Or1: TopAbs_Orientation
    Or2: TopAbs_Orientation
    minRad: float
    majRad: float
    P1S1: gp_Pnt2d
    P2S1: gp_Pnt2d
    P1S2: gp_Pnt2d
    P2S2: gp_Pnt2d

    Returns
    -------
    bool

    Computes spheric corner fillet with non iso pcurve on s2.

    Parameters
    ----------
    DStr: TopOpeBRepDS_DataStructure
    Data: ChFiDS_SurfData
    S1: Adaptor3d_HSurface
    S2: Adaptor3d_HSurface
    OrFace1: TopAbs_Orientation
    OrFace2: TopAbs_Orientation
    Or1: TopAbs_Orientation
    Or2: TopAbs_Orientation
    Rad: float
    PS1: gp_Pnt2d
    P1S2: gp_Pnt2d
    P2S2: gp_Pnt2d

    Returns
    -------
    bool

    Computes a toric corner rotule.

    Parameters
    ----------
    DStr: TopOpeBRepDS_DataStructure
    Data: ChFiDS_SurfData
    S: Adaptor3d_HSurface
    S1: Adaptor3d_HSurface
    S2: Adaptor3d_HSurface
    OfS: TopAbs_Orientation
    OS: TopAbs_Orientation
    OS1: TopAbs_Orientation
    OS2: TopAbs_Orientation
    Radius: float

    Returns
    -------
    bool

    """
    return _ChFiKPart.ChFiKPart_ComputeData_ComputeCorner(*args)



# This file is compatible with both classic and new-style classes.


